{"code_source": "package com.baeldung.switchpatterns;\n\npublic class GuardedPatterns {\n\n    static double getDoubleValueUsingIf(Object o) {\n        return switch (o) {\n            case String s -> {\n                if (s.length() > 0) {\n                    yield Double.parseDouble(s);\n                } else {\n                    yield 0d;\n                }\n            }\n            default -> 0d;\n        };\n    }\n\n    static double getDoubleValueUsingGuardedPatterns(Object o) {\n        return switch (o) {\n            case String s && s.length() > 0 -> Double.parseDouble(s);\n            default -> 0d;\n        };\n    }\n\n}\n", "test_case": "package com.baeldung.switchpatterns;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static com.baeldung.switchpatterns.GuardedPatterns.*;\n\nclass GuardedPatternsUnitTest {\n\n    @Test\n    void givenIfImplementation_whenUsingEmptyString_thenDoubleIsReturned() {\n        assertEquals(0d, getDoubleValueUsingIf(\"\"));\n    }\n\n    @Test\n    void givenIfImplementation_whenUsingNonEmptyString_thenDoubleIsReturned() {\n        assertEquals(10d, getDoubleValueUsingIf(\"10\"));\n    }\n\n    @Test\n    void givenPatternsImplementation_whenUsingEmptyString_thenDoubleIsReturned() {\n        assertEquals(0d, getDoubleValueUsingGuardedPatterns(\"\"));\n    }\n\n    @Test\n    void givenPatternsImplementation_whenUsingNonEmptyString_thenDoubleIsReturned() {\n        assertEquals(10d, getDoubleValueUsingGuardedPatterns(\"10\"));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.switchpatterns;\n\npublic class HandlingNullValues {\n\n    static double getDoubleUsingSwitchNullCase(Object o) {\n        return switch (o) {\n            case String s -> Double.parseDouble(s);\n            case null -> 0d;\n            default -> 0d;\n        };\n    }\n\n    static double getDoubleUsingSwitchTotalType(Object o) {\n        return switch (o) {\n            case String s -> Double.parseDouble(s);\n            case Object ob -> 0d;\n        };\n    }\n\n}\n", "test_case": "package com.baeldung.switchpatterns;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static com.baeldung.switchpatterns.HandlingNullValues.*;\n\nclass HandlingNullValuesUnitTest {\n\n    @Test\n    void givenNullCaseInSwitch_whenUsingStringAsArgument_thenDoubleIsReturned() {\n        assertEquals(10d, getDoubleUsingSwitchNullCase(\"10\"));\n    }\n\n    @Test\n    void givenTotalTypeInSwitch_whenUsingNullArgument_thenDoubleIsReturned() {\n        assertEquals(0d, getDoubleUsingSwitchNullCase(null));\n    }\n\n    @Test\n    void givenTotalTypeInSwitch_whenUsingStringAsArgument_thenDoubleIsReturned() {\n        assertEquals(10d, getDoubleUsingSwitchTotalType(\"10\"));\n    }\n\n    @Test\n    void givenNullCaseInSwitch_whenUsingNullArgument_thenDoubleIsReturned() {\n        assertEquals(0d, getDoubleUsingSwitchTotalType(null));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.switchpatterns;\n\npublic class ParenthesizedPatterns {\n\n    static double getDoubleValueUsingIf(Object o) {\n        return switch (o) {\n            case String s -> {\n                if (s.length() > 0) {\n                    if (s.contains(\"#\") || s.contains(\"@\")) {\n                        yield 0d;\n                    } else {\n                        yield Double.parseDouble(s);\n                    }\n                } else {\n                    yield 0d;\n                }\n            }\n            default -> 0d;\n        };\n    }\n\n    static double getDoubleValueUsingParenthesizedPatterns(Object o) {\n        return switch (o) {\n            case String s && s.length() > 0 && !(s.contains(\"#\") || s.contains(\"@\")) -> Double.parseDouble(s);\n            default -> 0d;\n        };\n    }\n\n}\n", "test_case": "package com.baeldung.switchpatterns;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static com.baeldung.switchpatterns.ParenthesizedPatterns.*;\n\nclass ParenthesizedPatternsUnitTest {\n\n    @Test\n    void givenIfImplementation_whenUsingEmptyString_thenDoubleIsReturned() {\n        assertEquals(0d, getDoubleValueUsingIf(\"\"));\n    }\n\n    @Test\n    void givenIfImplementation_whenUsingNonEmptyString_thenDoubleIsReturned() {\n        assertEquals(10d, getDoubleValueUsingIf(\"10\"));\n    }\n\n    @Test\n    void givenIfImplementation_whenStringContainsSpecialChar_thenDoubleIsReturned() {\n        assertEquals(0d, getDoubleValueUsingIf(\"@10\"));\n    }\n\n    @Test\n    void givenPatternsImplementation_whenUsingEmptyString_thenDoubleIsReturned() {\n        assertEquals(0d, getDoubleValueUsingParenthesizedPatterns(\"\"));\n    }\n\n    @Test\n    void givenPatternsImplementation_whenUsingNonEmptyString_thenDoubleIsReturned() {\n        assertEquals(10d, getDoubleValueUsingParenthesizedPatterns(\"10\"));\n    }\n\n    @Test\n    void givenPatternsImplementation_whenStringContainsSpecialChar_thenDoubleIsReturned() {\n        assertEquals(0d, getDoubleValueUsingParenthesizedPatterns(\"@10\"));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.switchpatterns;\n\npublic class TypePatterns {\n\n    static double getDoubleUsingIf(Object o) {\n        double result;\n\n        if (o instanceof Integer) {\n            result = ((Integer) o).doubleValue();\n        } else if (o instanceof Float) {\n            result = ((Float) o).doubleValue();\n        } else if (o instanceof String) {\n            result = Double.parseDouble(((String) o));\n        } else {\n            result = 0d;\n        }\n\n        return result;\n    }\n\n    static double getDoubleUsingSwitch(Object o) {\n        return switch (o) {\n            case Integer i -> i.doubleValue();\n            case Float f -> f.doubleValue();\n            case String s -> Double.parseDouble(s);\n            default -> 0d;\n        };\n    }\n\n}\n", "test_case": "package com.baeldung.switchpatterns;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static com.baeldung.switchpatterns.TypePatterns.*;\n\nclass TypePatternsUnitTest {\n\n    @Test\n    void givenIfImplementation_whenUsingIntegerAsArgument_thenDoubleIsReturned() {\n        assertEquals(10d, getDoubleUsingIf(10));\n    }\n\n    @Test\n    void givenIfImplementation_whenUsingDoubleAsArgument_thenDoubleIsReturned() {\n        assertEquals(10d, getDoubleUsingIf(10.0f));\n    }\n\n    @Test\n    void givenIfImplementation_whenUsingStringAsArgument_thenDoubleIsReturned() {\n        assertEquals(10d, getDoubleUsingIf(\"10\"));\n    }\n\n    @Test\n    void givenIfImplementation_whenUsingCharAsArgument_thenDoubleIsReturned() {\n        assertEquals(0d, getDoubleUsingIf('c'));\n    }\n\n    @Test\n    void givenSwitchImplementation_whenUsingIntegerAsArgument_thenDoubleIsReturned() {\n        assertEquals(10d, getDoubleUsingSwitch(10));\n    }\n\n    @Test\n    void givenSwitchImplementation_whenUsingDoubleAsArgument_thenDoubleIsReturned() {\n        assertEquals(10d, getDoubleUsingSwitch(10.0f));\n    }\n\n    @Test\n    void givenSwitchImplementation_whenUsingStringAsArgument_thenDoubleIsReturned() {\n        assertEquals(10d, getDoubleUsingSwitch(\"10\"));\n    }\n\n    @Test\n    void givenSwitchImplementation_whenUsingCharAsArgument_thenDoubleIsReturned() {\n        assertEquals(0d, getDoubleUsingSwitch('c'));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.spliteratorAPI;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class Executor {\n\n\tpublic static int countAutors(Stream<Author> stream) {\n\t\tRelatedAuthorCounter wordCounter = stream.reduce(new RelatedAuthorCounter(0, true),\n\t\t\t\tRelatedAuthorCounter::accumulate, RelatedAuthorCounter::combine);\n\t\treturn wordCounter.getCounter();\n\t}\n\n\tpublic static List<Article> generateElements() {\n\t\treturn Stream.generate(() -> new Article(\"Java\")).limit(35000).collect(Collectors.toList());\n\t}\n\n}", "test_case": "package com.baeldung.spliteratorAPI;\n\nimport java.util.Arrays;\nimport java.util.Spliterator;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\nimport static org.assertj.core.api.Assertions.*;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class ExecutorUnitTest {\n\tArticle article;\n\tStream<Author> stream;\n\tSpliterator<Author> spliterator;\n\tSpliterator<Article> split1;\n\tSpliterator<Article> split2;\n\n\t@Before\n\tpublic void init() {\n\t\tarticle = new Article(Arrays.asList(new Author(\"Ahmad\", 0), new Author(\"Eugen\", 0), new Author(\"Alice\", 1),\n\t\t\t\tnew Author(\"Alice\", 1), new Author(\"Mike\", 0), new Author(\"Alice\", 1), new Author(\"Mike\", 0),\n\t\t\t\tnew Author(\"Alice\", 1), new Author(\"Mike\", 0), new Author(\"Alice\", 1), new Author(\"Mike\", 0),\n\t\t\t\tnew Author(\"Mike\", 0), new Author(\"Alice\", 1), new Author(\"Mike\", 0), new Author(\"Alice\", 1),\n\t\t\t\tnew Author(\"Mike\", 0), new Author(\"Alice\", 1), new Author(\"Mike\", 0), new Author(\"Alice\", 1),\n\t\t\t\tnew Author(\"Mike\", 0), new Author(\"Micha\u0142\", 0), new Author(\"Loredana\", 1)), 0);\n\t\tstream = article.getListOfAuthors().stream();\n\t\tsplit1 = Executor.generateElements().spliterator();\n\t\tsplit2 = split1.trySplit();\n\t\tspliterator = new RelatedAuthorSpliterator(article.getListOfAuthors());\n\t}\n\n\t@Test\n\tpublic void givenAstreamOfAuthors_whenProcessedInParallelWithCustomSpliterator_coubtProducessRightOutput() {\n\t\tStream<Author> stream2 = StreamSupport.stream(spliterator, true);\n\t\tassertThat(Executor.countAutors(stream2.parallel())).isEqualTo(9);\n\t}\n\n\t@Test\n\tpublic void givenSpliterator_whenAppliedToAListOfArticle_thenSplittedInHalf() {\n\t\tassertThat(new Task(split1).call()).containsSequence(Executor.generateElements().size() / 2 + \"\");\n\t\tassertThat(new Task(split2).call()).containsSequence(Executor.generateElements().size() / 2 + \"\");\n\t}\n}\n"}
{"code_source": "package com.baeldung.argsVsvarargs;\n\npublic class StringArrayAndVarargs {\n    public static void capitalizeNames(String[] args) {\n        for(int i = 0; i < args.length; i++){\n           args[i] = args[i].toUpperCase();\n        }\n\n    }\n\n    public static String[] firstLetterOfWords(String... args) {\n        String[] firstLetter = new String[args.length];\n        for(int i = 0; i < args.length; i++){\n            firstLetter[i] = String.valueOf(args[i].charAt(0));\n        }\n        return firstLetter;\n    }\n\n}\n", "test_case": "package com.baeldung.argsVsvarargs;\n\nimport static com.baeldung.argsVsvarargs.StringArrayAndVarargs.capitalizeNames;\nimport static com.baeldung.argsVsvarargs.StringArrayAndVarargs.firstLetterOfWords;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Test;\n\nclass StringArrayAndVarargsUnitTest {\n\n    @Test\n    void whenCheckingArgumentClassName_thenNameShouldBeStringArray() {\n        String[] names = {\"john\", \"ade\", \"kofi\", \"imo\"};\n        assertNotNull(names);\n        assertEquals(\"java.lang.String[]\", names.getClass().getTypeName());\n        capitalizeNames(names);\n    }\n\n    @Test\n    void whenCheckingReturnedObjectClass_thenClassShouldBeStringArray() {\n        assertEquals(String[].class, firstLetterOfWords(\"football\", \"basketball\", \"volleyball\").getClass());\n        assertEquals(3, firstLetterOfWords(\"football\", \"basketball\", \"volleyball\").length);\n    }\n}"}
{"code_source": "package com.baeldung.date.comparison;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\n\nimport static java.time.temporal.ChronoUnit.*;\n\npublic class DateTimeComparisonUtils {\n\n    public static boolean isSameDay(LocalDateTime timestamp, LocalDate localDateToCompare) {\n        return timestamp.toLocalDate().isEqual(localDateToCompare);\n    }\n\n    public static boolean isSameDay(LocalDateTime timestamp, LocalDateTime timestampToCompare) {\n        return timestamp.truncatedTo(DAYS).isEqual(timestampToCompare.truncatedTo(DAYS));\n    }\n\n    public static boolean isSameHour(LocalDateTime timestamp, LocalDateTime timestampToCompare) {\n        return timestamp.truncatedTo(HOURS).isEqual(timestampToCompare.truncatedTo(HOURS));\n    }\n\n    public static boolean isSameMinute(LocalDateTime timestamp, LocalDateTime timestampToCompare) {\n        return timestamp.truncatedTo(MINUTES).isEqual(timestampToCompare.truncatedTo(MINUTES));\n    }\n\n    public static boolean isSameHour(ZonedDateTime zonedTimestamp, ZonedDateTime zonedTimestampToCompare) {\n        return zonedTimestamp.truncatedTo(HOURS).isEqual(zonedTimestampToCompare.truncatedTo(HOURS));\n    }\n\n    public static boolean isSameHour(ZonedDateTime zonedDateTime, LocalDateTime localDateTime, ZoneId zoneId) {\n        return isSameHour(zonedDateTime, localDateTime.atZone(zoneId));\n    }\n}\n", "test_case": "package com.baeldung.date.comparison;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.assertThat;\n\nclass DateTimeComparisonUtilsUnitTest {\n\n    @Test\n    void givenLocalDateTimes_whenIsSameDay_thenCompareTrue() {\n        LocalDateTime firstTimestamp = LocalDateTime.of(2019, 8, 10, 11, 00, 0);\n        LocalDateTime secondTimestamp = firstTimestamp.plusHours(5);\n        LocalDateTime thirdTimestamp = firstTimestamp.plusDays(1);\n\n        assertThat(DateTimeComparisonUtils.isSameDay(firstTimestamp, secondTimestamp), is(true));\n\n        assertThat(DateTimeComparisonUtils.isSameDay(secondTimestamp, thirdTimestamp), is(false));\n    }\n\n    @Test\n    void givenLocalDateAndLocalDateTime_whenIsSameDay_thenCompareTrue() {\n        LocalDate localDate = LocalDate.of(2019, 8, 10);\n        LocalDateTime localDateTime = LocalDateTime.of(2019, 8, 10, 11, 30, 0);\n\n        assertThat(DateTimeComparisonUtils.isSameDay(localDateTime, localDate), is(true));\n    }\n\n    @Test\n    void givenLocalDateTimes_whenIsSameHour_thenCompareTrue() {\n        LocalDateTime firstTimestamp = LocalDateTime.of(2019, 8, 10, 8, 00, 0);\n        LocalDateTime secondTimestamp = firstTimestamp.plusMinutes(15);\n        LocalDateTime thirdTimestamp = firstTimestamp.plusHours(2);\n\n        assertThat(DateTimeComparisonUtils.isSameHour(firstTimestamp, secondTimestamp), is(true));\n\n        assertThat(DateTimeComparisonUtils.isSameHour(secondTimestamp, thirdTimestamp), is(false));\n    }\n\n    @Test\n    void givenLocalDateTimes_whenIsSameMinute_thenCompareTrue() {\n        LocalDateTime firstTimestamp = LocalDateTime.of(2019, 8, 10, 8, 15, 0);\n        LocalDateTime secondTimestamp = firstTimestamp.plusSeconds(30);\n        LocalDateTime thirdTimestamp = firstTimestamp.plusMinutes(5);\n\n        assertThat(DateTimeComparisonUtils.isSameMinute(firstTimestamp, secondTimestamp), is(true));\n\n        assertThat(DateTimeComparisonUtils.isSameMinute(secondTimestamp, thirdTimestamp), is(false));\n    }\n\n    @Test\n    void givenZonedDateTimes_whenIsSameHour_thenCompareTrue() {\n        ZonedDateTime zonedTimestamp = ZonedDateTime.of(2019, 8, 10, 8, 0, 0, 30,\n          ZoneId.of(\"America/New_York\"));\n        ZonedDateTime zonedTimestampToCompare = ZonedDateTime.of(2019, 8, 10, 14, 0, 0, 0,\n          ZoneId.of(\"Europe/Berlin\"));\n\n        assertThat(DateTimeComparisonUtils.isSameHour(zonedTimestamp, zonedTimestampToCompare), is(true));\n    }\n\n    @Test\n    void givenZonedDateTimeAndLocalDateTime_whenIsSameHour_thenCompareTrue() {\n        ZonedDateTime zonedTimestamp = ZonedDateTime.of(2019, 8, 10, 8, 15, 0, 0,\n          ZoneId.of(\"America/New_York\"));\n        LocalDateTime localTimestamp = LocalDateTime.of(2019, 8, 10, 14, 20, 0);\n        ZoneId zoneId = ZoneId.of(\"Europe/Berlin\");\n\n        assertThat(DateTimeComparisonUtils.isSameHour(zonedTimestamp, localTimestamp, zoneId), is(true));\n    }\n}"}
{"code_source": "package com.baeldung.date.comparison;\n\nimport org.apache.commons.lang3.time.DateUtils;\n\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class LegacyDateComparisonUtils {\n\n    public static boolean isSameDay(Date date, Date dateToCompare) {\n        return DateUtils.isSameDay(date, dateToCompare);\n    }\n\n    public static boolean isSameHour(Date date, Date dateToCompare) {\n        return DateUtils.truncatedEquals(date, dateToCompare, Calendar.HOUR);\n    }\n}\n", "test_case": "package com.baeldung.date.comparison;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.util.Date;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.assertThat;\n\nclass LegacyDateComparisonUtilsUnitTest {\n\n    private Date toDate(LocalDateTime localDateTime) {\n        return Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());\n    }\n\n    @Test\n    void givenDatesWithDifferentHours_whenIsSameDay_thenReturnsTrue() {\n        Date firstDate = toDate(LocalDateTime.of(2019, 8, 10, 11, 00, 00));\n        Date secondDate = toDate(LocalDateTime.of(2019, 8, 10, 12, 00, 00));\n        Date thirdDate = toDate(LocalDateTime.of(2019, 8, 15, 12, 00, 00));\n\n        assertThat(LegacyDateComparisonUtils.isSameDay(firstDate, secondDate), is(true));\n        assertThat(LegacyDateComparisonUtils.isSameDay(secondDate, thirdDate), is(false));\n    }\n\n    @Test\n    void givenDatesWithingSameHour_whenIsSameHour_thenReturnsTrue() {\n        Date firstDate = toDate(LocalDateTime.of(2019, 8, 10, 11, 00, 00));\n        Date secondDate = toDate(LocalDateTime.of(2019, 8, 10, 11, 15, 00));\n        Date thirdDate = toDate(LocalDateTime.of(2019, 8, 10, 12, 00, 00));\n\n        assertThat(LegacyDateComparisonUtils.isSameHour(firstDate, secondDate), is(true));\n        assertThat(LegacyDateComparisonUtils.isSameHour(secondDate, thirdDate), is(false));\n    }\n\n    @Test\n    void givenDates__whenComparing_thenAssertsPass() {\n        Date firstDate = toDate(LocalDateTime.of(2019, 8, 10, 0, 00, 00));\n        Date secondDate = toDate(LocalDateTime.of(2019, 8, 15, 0, 00, 00));\n        Date thirdDate = toDate(LocalDateTime.of(2019, 8, 15, 0, 00, 00)); // same date as secondDate\n\n        assertThat(firstDate.after(secondDate), is(false));\n        assertThat(firstDate.before(secondDate), is(true));\n        assertThat(firstDate.compareTo(secondDate), is(-1));\n        assertThat(firstDate.equals(secondDate), is(false));\n\n        assertThat(thirdDate.after(secondDate), is(false));\n        assertThat(thirdDate.before(secondDate), is(false));\n        assertThat(thirdDate.compareTo(secondDate), is(0));\n        assertThat(thirdDate.equals(secondDate), is(true));\n    }\n}"}
{"code_source": "package com.baeldung.datetime;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.FormatStyle;\nimport java.util.Locale;\n\npublic class UseDateTimeFormatter {\n    public String formatAsIsoDate(LocalDateTime localDateTime) {\n        return localDateTime.format(DateTimeFormatter.ISO_DATE);\n    }\n\n    public String formatCustom(LocalDateTime localDateTime, String pattern) {\n        return localDateTime.format(DateTimeFormatter.ofPattern(pattern));\n    }\n\n    public String formatWithStyleAndLocale(LocalDateTime localDateTime, FormatStyle formatStyle, Locale locale) {\n        return localDateTime.format(DateTimeFormatter.ofLocalizedDateTime(formatStyle)\n            .withLocale(locale));\n    }\n}\n", "test_case": "package com.baeldung.datetime;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.LocalDateTime;\nimport java.time.Month;\nimport java.time.format.FormatStyle;\nimport java.util.Locale;\n\nimport org.junit.Test;\n\npublic class UseDateTimeFormatterUnitTest {\n    private final UseDateTimeFormatter subject = new UseDateTimeFormatter();\n    private final LocalDateTime localDateTime = LocalDateTime.of(2015, Month.JANUARY, 25, 6, 30);\n\n    @Test\n    public void givenALocalDate_whenFormattingAsIso_thenPass() {\n        String result = subject.formatAsIsoDate(localDateTime);\n\n        assertThat(result).isEqualTo(\"2015-01-25\");\n    }\n\n    @Test\n    public void givenALocalDate_whenFormattingWithPattern_thenPass() {\n        String result = subject.formatCustom(localDateTime, \"yyyy/MM/dd\");\n\n        assertThat(result).isEqualTo(\"2015/01/25\");\n    }\n\n    @Test\n    public void givenALocalDate_whenFormattingWithStyleAndLocale_thenPass() {\n        String result = subject.formatWithStyleAndLocale(localDateTime, FormatStyle.MEDIUM, Locale.UK);\n\n        assertThat(result).isEqualTo(\"25-Jan-2015 06:30:00\");\n    }\n}"}
{"code_source": "package com.baeldung.datetime;\n\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.ZoneOffset;\nimport java.time.temporal.ChronoField;\n\npublic class UseLocalDateTime {\n\n    public LocalDateTime getLocalDateTimeUsingParseMethod(String representation) {\n        return LocalDateTime.parse(representation);\n    }\n\n    LocalDateTime getEndOfDayFromLocalDateTimeDirectly(LocalDateTime localDateTime) {\n        LocalDateTime endOfDate = localDateTime.with(ChronoField.NANO_OF_DAY, LocalTime.MAX.toNanoOfDay());\n        return endOfDate;\n    }\n\n    LocalDateTime getEndOfDayFromLocalDateTime(LocalDateTime localDateTime) {\n        LocalDateTime endOfDate = localDateTime.toLocalDate()\n            .atTime(LocalTime.MAX);\n        return endOfDate;\n    }\n\n    LocalDateTime ofEpochSecond(int epochSecond, ZoneOffset zoneOffset) {\n        return LocalDateTime.ofEpochSecond(epochSecond, 0, zoneOffset);\n    }\n}\n", "test_case": "package com.baeldung.datetime;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.Assert.assertEquals;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.Month;\nimport java.time.ZoneOffset;\n\nimport org.junit.Test;\n\npublic class UseLocalDateTimeUnitTest {\n\n    private UseLocalDateTime useLocalDateTime = new UseLocalDateTime();\n\n    @Test\n    public void givenString_whenUsingParse_thenLocalDateTime() {\n        assertEquals(LocalDate.of(2016, Month.MAY, 10), useLocalDateTime.getLocalDateTimeUsingParseMethod(\"2016-05-10T06:30\")\n            .toLocalDate());\n        assertEquals(LocalTime.of(6, 30), useLocalDateTime.getLocalDateTimeUsingParseMethod(\"2016-05-10T06:30\")\n            .toLocalTime());\n    }\n\n    @Test\n    public void givenLocalDateTime_whenSettingEndOfDay_thenReturnLastMomentOfDay() {\n        LocalDateTime givenTimed = LocalDateTime.parse(\"2018-06-23T05:55:55\");\n\n        LocalDateTime endOfDayFromGivenDirectly = useLocalDateTime.getEndOfDayFromLocalDateTimeDirectly(givenTimed);\n        LocalDateTime endOfDayFromGiven = useLocalDateTime.getEndOfDayFromLocalDateTime(givenTimed);\n\n        assertThat(endOfDayFromGivenDirectly).isEqualTo(endOfDayFromGiven);\n        assertThat(endOfDayFromGivenDirectly.toLocalTime()).isEqualTo(LocalTime.MAX);\n        assertThat(endOfDayFromGivenDirectly.toString()).isEqualTo(\"2018-06-23T23:59:59.999999999\");\n    }\n\n    @Test\n    public void givenLocalDateTimeInFebruary_whenRequestingMonth_thenMonthIsFebruary() {\n        LocalDateTime givenLocalDateTime = LocalDateTime.of(2015, Month.FEBRUARY, 20, 6, 30);\n\n        assertThat(givenLocalDateTime.getMonth()).isEqualTo(Month.FEBRUARY);\n    }\n\n    @Test\n    public void givenLocalDateTime_whenManipulating_thenResultIsAsExpected() {\n        LocalDateTime givenLocalDateTime = LocalDateTime.parse(\"2015-02-20T06:30:00\");\n\n        LocalDateTime manipulatedLocalDateTime = givenLocalDateTime.plusDays(1);\n        manipulatedLocalDateTime = manipulatedLocalDateTime.minusHours(2);\n\n        assertThat(manipulatedLocalDateTime).isEqualTo(LocalDateTime.of(2015, Month.FEBRUARY, 21, 4, 30));\n    }\n\n    @Test\n    public void whenRequestTimeFromEpoch_thenResultIsAsExpected() {\n        LocalDateTime result = useLocalDateTime.ofEpochSecond(1465817690, ZoneOffset.UTC);\n\n        assertThat(result.toString()).isEqualTo(\"2016-06-13T11:34:50\");\n    }\n}\n"}
{"code_source": "package com.baeldung.datetime;\n\nimport java.time.DayOfWeek;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.temporal.ChronoUnit;\nimport java.time.temporal.TemporalAdjusters;\n\nclass UseLocalDate {\n\n    LocalDate getLocalDateUsingFactoryOfMethod(int year, int month, int dayOfMonth) {\n        return LocalDate.of(year, month, dayOfMonth);\n    }\n\n    LocalDate getLocalDateUsingParseMethod(String representation) {\n        return LocalDate.parse(representation);\n    }\n\n    LocalDate getLocalDateFromClock() {\n        LocalDate localDate = LocalDate.now();\n        return localDate;\n    }\n\n    LocalDate getNextDay(LocalDate localDate) {\n        return localDate.plusDays(1);\n    }\n\n    LocalDate getPreviousDay(LocalDate localDate) {\n        return localDate.minus(1, ChronoUnit.DAYS);\n    }\n\n    DayOfWeek getDayOfWeek(LocalDate localDate) {\n        DayOfWeek day = localDate.getDayOfWeek();\n        return day;\n    }\n\n    LocalDate getFirstDayOfMonth() {\n        LocalDate firstDayOfMonth = LocalDate.now()\n            .with(TemporalAdjusters.firstDayOfMonth());\n        return firstDayOfMonth;\n    }\n\n    boolean isLeapYear(LocalDate localDate) {\n        return localDate.isLeapYear();\n    }\n\n    LocalDateTime getStartOfDay(LocalDate localDate) {\n        LocalDateTime startofDay = localDate.atStartOfDay();\n        return startofDay;\n    }\n\n    LocalDateTime getStartOfDayOfLocalDate(LocalDate localDate) {\n        LocalDateTime startofDay = LocalDateTime.of(localDate, LocalTime.MIDNIGHT);\n        return startofDay;\n    }\n\n    LocalDateTime getStartOfDayAtMinTime(LocalDate localDate) {\n        LocalDateTime startofDay = localDate.atTime(LocalTime.MIN);\n        return startofDay;\n    }\n\n    LocalDateTime getStartOfDayAtMidnightTime(LocalDate localDate) {\n        LocalDateTime startofDay = localDate.atTime(LocalTime.MIDNIGHT);\n        return startofDay;\n    }\n\n    LocalDateTime getEndOfDay(LocalDate localDate) {\n        LocalDateTime endOfDay = localDate.atTime(LocalTime.MAX);\n        return endOfDay;\n    }\n\n    LocalDateTime getEndOfDayFromLocalTime(LocalDate localDate) {\n        LocalDateTime endOfDate = LocalTime.MAX.atDate(localDate);\n        return endOfDate;\n    }\n\n}\n", "test_case": "package com.baeldung.datetime;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.Assert.assertEquals;\n\nimport java.time.DayOfWeek;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\n\nimport org.junit.Test;\n\npublic class UseLocalDateUnitTest {\n\n    private UseLocalDate useLocalDate = new UseLocalDate();\n\n    @Test\n    public void givenValues_whenUsingFactoryOf_thenLocalDate() {\n        assertEquals(\"2016-05-10\", useLocalDate.getLocalDateUsingFactoryOfMethod(2016, 5, 10)\n            .toString());\n    }\n\n    @Test\n    public void givenString_whenUsingParse_thenLocalDate() {\n        assertEquals(\"2016-05-10\", useLocalDate.getLocalDateUsingParseMethod(\"2016-05-10\")\n            .toString());\n    }\n\n    @Test\n    public void whenUsingClock_thenLocalDate() {\n        assertEquals(LocalDate.now(), useLocalDate.getLocalDateFromClock());\n    }\n\n    @Test\n    public void givenDate_whenUsingPlus_thenNextDay() {\n        assertEquals(LocalDate.now()\n            .plusDays(1), useLocalDate.getNextDay(LocalDate.now()));\n    }\n\n    @Test\n    public void givenDate_whenUsingMinus_thenPreviousDay() {\n        assertEquals(LocalDate.now()\n            .minusDays(1), useLocalDate.getPreviousDay(LocalDate.now()));\n    }\n\n    @Test\n    public void givenToday_whenUsingGetDayOfWeek_thenDayOfWeek() {\n        assertEquals(DayOfWeek.SUNDAY, useLocalDate.getDayOfWeek(LocalDate.parse(\"2016-05-22\")));\n    }\n\n    @Test\n    public void givenToday_whenUsingWithTemporalAdjuster_thenFirstDayOfMonth() {\n        assertEquals(1, useLocalDate.getFirstDayOfMonth()\n            .getDayOfMonth());\n    }\n\n    @Test\n    public void givenLocalDate_whenUsingAtStartOfDay_thenReturnMidnight() {\n        assertEquals(LocalDateTime.parse(\"2016-05-22T00:00:00\"), useLocalDate.getStartOfDay(LocalDate.parse(\"2016-05-22\")));\n    }\n\n    @Test\n    public void givenLocalDate_whenSettingStartOfDay_thenReturnMidnightInAllCases() {\n        LocalDate given = LocalDate.parse(\"2018-06-23\");\n\n        LocalDateTime startOfDayWithMethod = useLocalDate.getStartOfDay(given);\n        LocalDateTime startOfDayOfLocalDate = useLocalDate.getStartOfDayOfLocalDate(given);\n        LocalDateTime startOfDayWithMin = useLocalDate.getStartOfDayAtMinTime(given);\n        LocalDateTime startOfDayWithMidnight = useLocalDate.getStartOfDayAtMidnightTime(given);\n\n        assertThat(startOfDayWithMethod).isEqualTo(startOfDayWithMin)\n            .isEqualTo(startOfDayWithMidnight)\n            .isEqualTo(startOfDayOfLocalDate)\n            .isEqualTo(LocalDateTime.parse(\"2018-06-23T00:00:00\"));\n        assertThat(startOfDayWithMin.toLocalTime()).isEqualTo(LocalTime.MIDNIGHT);\n        assertThat(startOfDayWithMin.toString()).isEqualTo(\"2018-06-23T00:00\");\n    }\n\n    @Test\n    public void givenLocalDate_whenSettingEndOfDay_thenReturnLastMomentOfDay() {\n        LocalDate given = LocalDate.parse(\"2018-06-23\");\n\n        LocalDateTime endOfDayWithMax = useLocalDate.getEndOfDay(given);\n        LocalDateTime endOfDayFromLocalTime = useLocalDate.getEndOfDayFromLocalTime(given);\n\n        assertThat(endOfDayWithMax).isEqualTo(endOfDayFromLocalTime);\n        assertThat(endOfDayWithMax.toLocalTime()).isEqualTo(LocalTime.MAX);\n        assertThat(endOfDayWithMax.toString()).isEqualTo(\"2018-06-23T23:59:59.999999999\");\n    }\n\n    @Test\n    public void givenTheYear2000_whenCheckingForLeapYear_thenReturnTrue() {\n        LocalDate given = LocalDate.parse(\"2000-06-23\");\n\n        boolean leapYear = useLocalDate.isLeapYear(given);\n\n        assertThat(leapYear).isEqualTo(true);\n    }\n\n    @Test\n    public void givenTheYear2004_whenCheckingForLeapYear_thenReturnTrue() {\n        LocalDate given = LocalDate.parse(\"2004-06-23\");\n\n        boolean leapYear = useLocalDate.isLeapYear(given);\n\n        assertThat(leapYear).isEqualTo(true);\n    }\n\n    @Test\n    public void givenTheYear2019_whenCheckingForLeapYear_thenReturnFalse() {\n        LocalDate given = LocalDate.parse(\"2019-06-23\");\n\n        boolean leapYear = useLocalDate.isLeapYear(given);\n\n        assertThat(leapYear).isEqualTo(false);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.datetime;\n\nimport java.time.LocalTime;\nimport java.time.temporal.ChronoUnit;\n\npublic class UseLocalTime {\n\n    LocalTime getLocalTimeUsingFactoryOfMethod(int hour, int min, int seconds) {\n        return LocalTime.of(hour, min, seconds);\n    }\n\n    LocalTime getLocalTimeUsingFactoryOfMethod(int hour, int min) {\n        return LocalTime.of(hour, min);\n    }\n\n    LocalTime getLocalTimeUsingParseMethod(String timeRepresentation) {\n        return LocalTime.parse(timeRepresentation);\n    }\n\n    private LocalTime getLocalTimeFromClock() {\n        return LocalTime.now();\n    }\n\n    LocalTime addAnHour(LocalTime localTime) {\n        return localTime.plus(1, ChronoUnit.HOURS);\n    }\n\n    int getHourFromLocalTime(LocalTime localTime) {\n        return localTime.getHour();\n    }\n\n    LocalTime getLocalTimeWithMinuteSetToValue(LocalTime localTime, int minute) {\n        return localTime.withMinute(minute);\n    }\n}\n", "test_case": "package com.baeldung.datetime;\n\nimport java.time.LocalTime;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class UseLocalTimeUnitTest {\n\n    private UseLocalTime useLocalTime = new UseLocalTime();\n\n    @Test\n    public void givenValues_whenUsingFactoryOf_thenLocalTime() {\n        Assert.assertEquals(\"07:07:07\", useLocalTime.getLocalTimeUsingFactoryOfMethod(7, 7, 7)\n            .toString());\n    }\n\n    @Test\n    public void givenValues_whenUsingFactoryOfWithoutSeconds_thenLocalTime() {\n        Assert.assertEquals(\"07:07\", useLocalTime.getLocalTimeUsingFactoryOfMethod(7, 7)\n            .toString());\n    }\n\n    @Test\n    public void givenString_whenUsingParse_thenLocalTime() {\n        Assert.assertEquals(\"06:30\", useLocalTime.getLocalTimeUsingParseMethod(\"06:30\")\n            .toString());\n    }\n\n    @Test\n    public void givenTime_whenAddHour_thenLocalTime() {\n        Assert.assertEquals(\"07:30\", useLocalTime.addAnHour(LocalTime.of(6, 30))\n            .toString());\n    }\n\n    @Test\n    public void getHourFromLocalTime() {\n        Assert.assertEquals(1, useLocalTime.getHourFromLocalTime(LocalTime.of(1, 1)));\n    }\n\n    @Test\n    public void getLocalTimeWithMinuteSetToValue() {\n        Assert.assertEquals(LocalTime.of(10, 20), useLocalTime.getLocalTimeWithMinuteSetToValue(LocalTime.of(10, 10), 20));\n    }\n}\n"}
{"code_source": "package com.baeldung.datetime;\n\nimport java.time.LocalDateTime;\nimport java.time.OffsetDateTime;\nimport java.time.ZoneOffset;\n\npublic class UseOffsetDateTime {\n    public OffsetDateTime offsetOfLocalDateTimeAndOffset(LocalDateTime localDateTime, ZoneOffset offset) {\n        return OffsetDateTime.of(localDateTime, offset);\n    }\n}\n", "test_case": "package com.baeldung.datetime;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.LocalDateTime;\nimport java.time.Month;\nimport java.time.OffsetDateTime;\nimport java.time.ZoneOffset;\n\nimport org.junit.Test;\n\npublic class UseOffsetDateTimeUnitTest {\n    private final UseOffsetDateTime subject = new UseOffsetDateTime();\n\n    @Test\n    public void givenAZoneOffSetAndLocalDateTime_whenCombing_thenValidResult() {\n        ZoneOffset offset = ZoneOffset.of(\"+02:00\");\n        LocalDateTime localDateTime = LocalDateTime.of(2015, Month.FEBRUARY, 20, 6, 30);\n\n        OffsetDateTime result = subject.offsetOfLocalDateTimeAndOffset(localDateTime, offset);\n\n        assertThat(result.toString()).isEqualTo(\"2015-02-20T06:30+02:00\");\n    }\n}"}
{"code_source": "package com.baeldung.datetime;\n\nimport java.time.LocalDate;\nimport java.time.Period;\n\nclass UsePeriod {\n\n    LocalDate modifyDates(LocalDate localDate, Period period) {\n        return localDate.plus(period);\n    }\n\n    Period getDifferenceBetweenDates(LocalDate localDate1, LocalDate localDate2) {\n        return Period.between(localDate1, localDate2);\n    }\n}\n", "test_case": "package com.baeldung.datetime;\n\nimport java.time.LocalDate;\nimport java.time.Period;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class UsePeriodUnitTest {\n    UsePeriod usingPeriod = new UsePeriod();\n\n    @Test\n    public void givenPeriodAndLocalDate_thenCalculateModifiedDate() {\n        Period period = Period.ofDays(1);\n        LocalDate localDate = LocalDate.parse(\"2007-05-10\");\n        Assert.assertEquals(localDate.plusDays(1), usingPeriod.modifyDates(localDate, period));\n    }\n\n    @Test\n    public void givenDates_thenGetPeriod() {\n        LocalDate localDate1 = LocalDate.parse(\"2007-05-10\");\n        LocalDate localDate2 = LocalDate.parse(\"2007-05-15\");\n\n        Assert.assertEquals(Period.ofDays(5), usingPeriod.getDifferenceBetweenDates(localDate1, localDate2));\n    }\n}\n"}
{"code_source": "package com.baeldung.datetime;\n\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class UseToInstant {\n\n    public LocalDateTime convertDateToLocalDate(Date date) {\n        return LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());\n    }\n\n    public LocalDateTime convertDateToLocalDate(Calendar calendar) {\n        return LocalDateTime.ofInstant(calendar.toInstant(), ZoneId.systemDefault());\n    }\n}\n", "test_case": "package com.baeldung.datetime;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\n\nimport org.junit.Test;\n\npublic class UseToInstantUnitTest {\n\n    private UseToInstant subject = new UseToInstant();\n\n    @Test\n    public void givenAGregorianCalenderDate_whenConvertingToLocalDate_thenAsExpected() {\n        GregorianCalendar givenCalender = new GregorianCalendar(2018, Calendar.JULY, 28);\n\n        LocalDateTime localDateTime = subject.convertDateToLocalDate(givenCalender);\n\n        assertThat(localDateTime).isEqualTo(\"2018-07-28T00:00:00\");\n    }\n\n    @Test\n    public void givenADate_whenConvertingToLocalDate_thenAsExpected() {\n        LocalDateTime currentDateTime = LocalDateTime.now();\n        Date givenDate = Date.from(currentDateTime.atZone(ZoneId.systemDefault()).toInstant());\n\n        LocalDateTime localDateTime = subject.convertDateToLocalDate(givenDate);\n\n        assertThat(localDateTime).isEqualTo(currentDateTime);\n    }\n}"}
{"code_source": "package com.baeldung.datetime;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.time.temporal.ChronoField;\n\nclass UseZonedDateTime {\n\n    ZonedDateTime getZonedDateTime(LocalDateTime localDateTime, ZoneId zoneId) {\n        return ZonedDateTime.of(localDateTime, zoneId);\n    }\n\n    ZonedDateTime getZonedDateTimeUsingParseMethod(String parsableString) {\n        return ZonedDateTime.parse(parsableString);\n    }\n\n    ZonedDateTime getStartOfDay(LocalDate localDate, ZoneId zone) {\n        ZonedDateTime startOfDay = localDate.atStartOfDay()\n            .atZone(zone);\n        return startOfDay;\n    }\n\n    ZonedDateTime getStartOfDayShorthand(LocalDate localDate, ZoneId zone) {\n        ZonedDateTime startOfDay = localDate.atStartOfDay(zone);\n        return startOfDay;\n    }\n\n    ZonedDateTime getStartOfDayFromZonedDateTime(ZonedDateTime zonedDateTime) {\n        ZonedDateTime startOfDay = zonedDateTime.toLocalDateTime()\n            .toLocalDate()\n            .atStartOfDay(zonedDateTime.getZone());\n        return startOfDay;\n    }\n\n    ZonedDateTime getStartOfDayAtMinTime(ZonedDateTime zonedDateTime) {\n        ZonedDateTime startOfDay = zonedDateTime.with(ChronoField.HOUR_OF_DAY, 0);\n        return startOfDay;\n    }\n\n    ZonedDateTime getStartOfDayAtMidnightTime(ZonedDateTime zonedDateTime) {\n        ZonedDateTime startOfDay = zonedDateTime.with(ChronoField.NANO_OF_DAY, 0);\n        return startOfDay;\n    }\n}\n", "test_case": "package com.baeldung.datetime;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.util.Set;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class UseZonedDateTimeUnitTest {\n\n    private UseZonedDateTime zonedDateTime = new UseZonedDateTime();\n\n    @Test\n    public void givenZoneId_thenZonedDateTime() {\n        ZoneId zoneId = ZoneId.of(\"Europe/Paris\");\n        ZonedDateTime zonedDatetime = zonedDateTime.getZonedDateTime(LocalDateTime.parse(\"2016-05-20T06:30\"), zoneId);\n        Assert.assertEquals(zoneId, ZoneId.from(zonedDatetime));\n    }\n\n    @Test\n    public void whenRequestingZones_thenAtLeastOneIsReturned() {\n        Set<String> allZoneIds = ZoneId.getAvailableZoneIds();\n\n        assertThat(allZoneIds.size()).isGreaterThan(1);\n    }\n\n    @Test\n    public void givenLocalDateOrZoned_whenSettingStartOfDay_thenReturnMidnightInAllCases() {\n        LocalDate given = LocalDate.parse(\"2018-06-23\");\n        ZoneId zone = ZoneId.of(\"Europe/Paris\");\n        ZonedDateTime zonedGiven = ZonedDateTime.of(given, LocalTime.NOON, zone);\n\n        ZonedDateTime startOfOfDayWithMethod = zonedDateTime.getStartOfDay(given, zone);\n        ZonedDateTime startOfOfDayWithShorthandMethod = zonedDateTime.getStartOfDayShorthand(given, zone);\n        ZonedDateTime startOfOfDayFromZonedDateTime = zonedDateTime.getStartOfDayFromZonedDateTime(zonedGiven);\n        ZonedDateTime startOfOfDayAtMinTime = zonedDateTime.getStartOfDayAtMinTime(zonedGiven);\n        ZonedDateTime startOfOfDayAtMidnightTime = zonedDateTime.getStartOfDayAtMidnightTime(zonedGiven);\n\n        assertThat(startOfOfDayWithMethod).isEqualTo(startOfOfDayWithShorthandMethod)\n            .isEqualTo(startOfOfDayFromZonedDateTime)\n            .isEqualTo(startOfOfDayAtMinTime)\n            .isEqualTo(startOfOfDayAtMidnightTime);\n        assertThat(startOfOfDayWithMethod.toLocalTime()).isEqualTo(LocalTime.MIDNIGHT);\n        assertThat(startOfOfDayWithMethod.toLocalTime()\n            .toString()).isEqualTo(\"00:00\");\n    }\n\n    @Test\n    public void givenAStringWithTimeZone_whenParsing_thenEqualsExpected() {\n        ZonedDateTime resultFromString = zonedDateTime.getZonedDateTimeUsingParseMethod(\"2015-05-03T10:15:30+01:00[Europe/Paris]\");\n        ZonedDateTime resultFromLocalDateTime = ZonedDateTime.of(2015, 5, 3, 10, 15, 30, 0, ZoneId.of(\"Europe/Paris\"));\n\n        assertThat(resultFromString.getZone()).isEqualTo(ZoneId.of(\"Europe/Paris\"));\n        assertThat(resultFromLocalDateTime.getZone()).isEqualTo(ZoneId.of(\"Europe/Paris\"));\n\n        assertThat(resultFromString).isEqualTo(resultFromLocalDateTime);\n    }\n}\n"}
{"code_source": "package com.baeldung.temporaladjuster;\n\nimport java.time.DayOfWeek;\nimport java.time.temporal.ChronoField;\nimport java.time.temporal.ChronoUnit;\nimport java.time.temporal.Temporal;\nimport java.time.temporal.TemporalAdjuster;\n\npublic class CustomTemporalAdjuster implements TemporalAdjuster {\n\n    @Override\n    public Temporal adjustInto(Temporal temporal) {\n        switch (DayOfWeek.of(temporal.get(ChronoField.DAY_OF_WEEK))) {\n        case FRIDAY:\n            return temporal.plus(3, ChronoUnit.DAYS);\n        case SATURDAY:\n            return temporal.plus(2, ChronoUnit.DAYS);\n        default:\n            return temporal.plus(1, ChronoUnit.DAYS);\n        }\n    }\n}\n", "test_case": "package com.baeldung.temporaladjusters;\n\nimport com.baeldung.temporaladjuster.CustomTemporalAdjuster;\nimport org.junit.Test;\n\nimport java.time.LocalDate;\nimport java.time.Period;\nimport java.time.temporal.TemporalAdjuster;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class CustomTemporalAdjusterUnitTest {\n\n    private static final TemporalAdjuster NEXT_WORKING_DAY = new CustomTemporalAdjuster();\n\n    @Test\n    public void whenAdjustAndImplementInterface_thenNextWorkingDay() {\n        LocalDate localDate = LocalDate.of(2017, 07, 8);\n        CustomTemporalAdjuster temporalAdjuster = new CustomTemporalAdjuster();\n        LocalDate nextWorkingDay = localDate.with(temporalAdjuster);\n\n        assertEquals(\"2017-07-10\", nextWorkingDay.toString());\n    }\n\n    @Test\n    public void whenAdjust_thenNextWorkingDay() {\n        LocalDate localDate = LocalDate.of(2017, 07, 8);\n        LocalDate date = localDate.with(NEXT_WORKING_DAY);\n\n        assertEquals(\"2017-07-10\", date.toString());\n    }\n\n    @Test\n    public void whenAdjust_thenFourteenDaysAfterDate() {\n        LocalDate localDate = LocalDate.of(2017, 07, 8);\n        TemporalAdjuster temporalAdjuster = (t) -> t.plus(Period.ofDays(14));\n        LocalDate result = localDate.with(temporalAdjuster);\n\n        String fourteenDaysAfterDate = \"2017-07-22\";\n\n        assertEquals(fourteenDaysAfterDate, result.toString());\n    }\n}"}
{"code_source": "package com.baeldung.localdate;\n\nimport java.time.LocalDate;\nimport java.time.Month;\nimport java.time.format.DateTimeFormatter;\n\npublic class LocalDateExample {\n    public LocalDate getCustomDateOne(int year, int month, int dayOfMonth) {\n        return LocalDate.of(year, month, dayOfMonth);\n    }\n\n    public LocalDate getCustomDateTwo(int year, Month month, int dayOfMonth) {\n        return LocalDate.of(year, month, dayOfMonth);\n    }\n\n    public LocalDate getDateFromEpochDay(long epochDay) {\n        return LocalDate.ofEpochDay(epochDay);\n    }\n\n    public LocalDate getDateFromYearAndDayOfYear(int year, int dayOfYear) {\n        return LocalDate.ofYearDay(year, dayOfYear);\n    }\n\n    public LocalDate getDateFromString(String date) {\n        return LocalDate.parse(date);\n    }\n\n    public LocalDate getDateFromStringAndFormatter(String date, String pattern) {\n        return LocalDate.parse(date, DateTimeFormatter.ofPattern(pattern));\n    }\n}\n", "test_case": "package com.baeldung.localdate;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.time.Month;\n\nimport org.junit.Test;\n\npublic class LocalDateExampleUnitTest {\n    private LocalDateExample date = new LocalDateExample();\n\n    @Test\n    public void givenValues_whenUsingOfMethod_thenLocalDate() {\n        assertEquals(\"2020-01-08\", date.getCustomDateOne(2020, 1, 8).toString());\n    }\n\n    @Test\n    public void givenValuesWithMonthEnum_whenUsingOfMethod_thenLocalDate() {\n        assertEquals(\"2020-01-08\", date.getCustomDateTwo(2020, Month.JANUARY, 8).toString());\n    }\n\n    @Test\n    public void givenValues_whenUsingEpochDay_thenLocalDate() {\n        assertEquals(\"2020-01-08\", date.getDateFromEpochDay(18269).toString());\n    }\n\n    @Test\n    public void givenValues_whenUsingYearDay_thenLocalDate() {\n        assertEquals(\"2020-01-08\", date.getDateFromYearAndDayOfYear(2020, 8).toString());\n    }\n\n    @Test\n    public void givenValues_whenUsingParse_thenLocalDate() {\n        assertEquals(\"2020-01-08\", date.getDateFromString(\"2020-01-08\").toString());\n    }\n\n    @Test\n    public void givenValuesWithFormatter_whenUsingParse_thenLocalDate() {\n        assertEquals(\"2020-01-08\", date.getDateFromStringAndFormatter(\"8-Jan-2020\", \"d-MMM-yyyy\").toString());\n    }\n}\n"}
{"code_source": "package com.baeldung.random;\n\nimport java.time.LocalDate;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class RandomDates {\n\n    public static LocalDate between(LocalDate startInclusive, LocalDate endExclusive) {\n        long startEpochDay = startInclusive.toEpochDay();\n        long endEpochDay = endExclusive.toEpochDay();\n        long randomDay = ThreadLocalRandom.current().nextLong(startEpochDay, endEpochDay);\n\n        return LocalDate.ofEpochDay(randomDay);\n    }\n\n    public static LocalDate date() {\n        int hundredYears = 100 * 365;\n        return LocalDate.ofEpochDay(ThreadLocalRandom.current().nextInt(-hundredYears, hundredYears));\n    }\n}\n", "test_case": "package com.baeldung.random;\n\nimport org.junit.jupiter.api.RepeatedTest;\n\nimport java.time.LocalDate;\nimport java.time.Month;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass RandomDatesUnitTest {\n\n    @RepeatedTest(100)\n    void givenNoRange_WhenGenDate_ShouldGenerateRandomDates() {\n        LocalDate randomDay = RandomDates.date();\n\n        assertThat(randomDay).isAfter(LocalDate.MIN).isBefore(LocalDate.MAX);\n    }\n\n    @RepeatedTest(100)\n    void givenARange_WhenGenDate_ShouldBeInRange() {\n        LocalDate start = LocalDate.of(1989, Month.OCTOBER, 14);\n        LocalDate end = LocalDate.now();\n\n        LocalDate random = RandomDates.between(start, end);\n        assertThat(random).isAfterOrEqualTo(start).isBefore(end);\n    }\n}\n"}
{"code_source": "package com.baeldung.random;\n\nimport java.time.LocalTime;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class RandomTimes {\n\n    public static LocalTime between(LocalTime startTime, LocalTime endTime) {\n        int startSeconds = startTime.toSecondOfDay();\n        int endSeconds = endTime.toSecondOfDay();\n        int randomTime = ThreadLocalRandom.current().nextInt(startSeconds, endSeconds);\n\n        return LocalTime.ofSecondOfDay(randomTime);\n    }\n\n    public static LocalTime time() {\n        return between(LocalTime.MIN, LocalTime.MAX);\n    }\n}\n", "test_case": "package com.baeldung.random;\n\nimport org.junit.jupiter.api.RepeatedTest;\n\nimport java.time.LocalTime;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass RandomTimesUnitTest {\n\n    @RepeatedTest(100)\n    void givenARange_WhenGenTime_ShouldBeInRange() {\n        LocalTime morning = LocalTime.of(8, 30);\n        LocalTime randomTime = RandomTimes.between(LocalTime.MIDNIGHT, morning);\n\n        assertThat(randomTime)\n                .isAfter(LocalTime.MIDNIGHT).isBefore(morning)\n                .isAfter(LocalTime.MIN).isBefore(LocalTime.MAX);\n    }\n}\n"}
{"code_source": "package com.baeldung.java9.delimiters;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\n\npublic class DelimiterDemo {\n\n    public static List<String> scannerWithDelimiter(String input, String delimiter) {\n        try (Scanner scan = new Scanner(input)) {\n            scan.useDelimiter(delimiter);\n            List<String> result = new ArrayList<String>();\n            scan.forEachRemaining(result::add);\n            return result;\n        }\n    }\n\n    public static List<String> scannerWithDelimiterUsingPattern(String input, Pattern delimiter) {\n        try (Scanner scan = new Scanner(input)) {\n            scan.useDelimiter(delimiter);\n            List<String> result = new ArrayList<String>();\n            scan.forEachRemaining(result::add);\n            return result;\n        }\n    }\n\n    public static List<String> baseScanner(String input) {\n        try (Scanner scan = new Scanner(input)) {\n            List<String> result = new ArrayList<String>();\n            scan.forEachRemaining(result::add);\n            return result;\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.java9.delimiters;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.BiFunction;\nimport java.util.regex.Pattern;\n\nimport org.junit.jupiter.api.Test;\n\nclass DelimiterDemoUnitTest {\n\n    @Test\n    void givenSimpleCharacterDelimiter_whenScannerWithDelimiter_ThenInputIsCorrectlyParsed() {\n        checkOutput(DelimiterDemo::scannerWithDelimiter, \"Welcome to Baeldung\", \"\\\\s\", Arrays.asList(\"Welcome\", \"to\", \"Baeldung\"));\n    }\n\n    @Test\n    void givenStringDelimiter_whenScannerWithDelimiter_ThenInputIsCorrectlyParsed() {\n        checkOutput(DelimiterDemo::scannerWithDelimiter, \"HelloBaeldungHelloWorld\", \"Hello\", Arrays.asList(\"Baeldung\", \"World\"));\n    }\n\n    @Test\n    void givenVariousPossibleDelimiters_whenScannerWithDelimiter_ThenInputIsCorrectlyParsed() {\n        checkOutput(DelimiterDemo::scannerWithDelimiter, \"Welcome to Baeldung.\\nThank you for reading.\\nThe team\", \"\\n|\\\\s\", Arrays.asList(\"Welcome\", \"to\", \"Baeldung.\", \"Thank\", \"you\", \"for\", \"reading.\", \"The\", \"team\"));\n    }\n\n    @Test\n    void givenWildcardRegexDelimiter_whenScannerWithDelimiter_ThenInputIsCorrectlyParsed() {\n        checkOutput(DelimiterDemo::scannerWithDelimiter, \"1aaaaaaa2aa3aaa4\", \"a+\", Arrays.asList(\"1\", \"2\", \"3\", \"4\"));\n    }\n\n    @Test\n    void givenSimpleCharacterDelimiter_whenScannerWithDelimiterUsingPattern_ThenInputIsCorrectlyParsed() {\n        checkOutput(DelimiterDemo::scannerWithDelimiterUsingPattern, \"Welcome to Baeldung\", Pattern.compile(\"\\\\s\"), Arrays.asList(\"Welcome\", \"to\", \"Baeldung\"));\n    }\n\n    @Test\n    void givenStringDelimiter_whenScannerWithDelimiterUsingPattern_ThenInputIsCorrectlyParsed() {\n        checkOutput(DelimiterDemo::scannerWithDelimiterUsingPattern, \"HelloBaeldungHelloWorld\", Pattern.compile(\"Hello\"), Arrays.asList(\"Baeldung\", \"World\"));\n    }\n\n    @Test\n    void givenVariousPossibleDelimiters_whenScannerWithDelimiterUsingPattern_ThenInputIsCorrectlyParsed() {\n        checkOutput(DelimiterDemo::scannerWithDelimiterUsingPattern, \"Welcome to Baeldung.\\nThank you for reading.\\nThe team\", Pattern.compile(\"\\n|\\\\s\"), Arrays.asList(\"Welcome\", \"to\", \"Baeldung.\", \"Thank\", \"you\", \"for\", \"reading.\", \"The\", \"team\"));\n    }\n\n    @Test\n    void givenWildcardRegexDelimiters_whenScannerWithDelimiterUsingPattern_ThenInputIsCorrectlyParsed() {\n        checkOutput(DelimiterDemo::scannerWithDelimiterUsingPattern, \"1aaaaaaa2aa3aaa4\", Pattern.compile(\"a*\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\"));\n    }\n\n    void checkOutput(BiFunction<String, String, List<String>> function, String input, String delimiter, List<String> expectedOutput) {\n        assertEquals(expectedOutput, function.apply(input, delimiter));\n    }\n\n    void checkOutput(BiFunction<String, Pattern, List<String>> function, String input, Pattern delimiter, List<String> expectedOutput) {\n        assertEquals(expectedOutput, function.apply(input, delimiter));\n    }\n\n    @Test\n    void whenBaseScanner_ThenWhitespacesAreUsedAsDelimiters() {\n        assertEquals(List.of(\"Welcome\", \"at\", \"Baeldung\"), DelimiterDemo.baseScanner(\"Welcome at Baeldung\"));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.java9.interfaces;\n\npublic interface Foo {\n\n    public default void bar() {\n        System.out.print(\"Hello\");\n        baz();\n    }\n\n    public static void buzz() {\n        System.out.print(\"Hello\");\n        staticBaz();\n    }\n\n    private void baz() {\n        System.out.print(\" world!\");\n    }\n\n    private static void staticBaz() {\n        System.out.print(\" static world!\");\n    }\n}\n", "test_case": "package com.baeldung.java9.interfaces;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass CustomFooUnitTest {\n    private ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n    private PrintStream originalOut = System.out;\n\n    @BeforeEach\n    void setup() {\n        System.setOut(new PrintStream(outContent));\n    }\n\n    @AfterEach\n    void tearDown() {\n        System.setOut(originalOut);\n    }\n\n    @Test\n    void givenACustomFooObject_whenCallingDefaultMethodBar_thenExpectedStringIsWrittenToSystemOut() {\n        CustomFoo customFoo = new CustomFoo();\n        customFoo.bar();\n        assertThat(outContent.toString()).isEqualTo(\"Hello world!\");\n    }\n\n    @Test\n    void givenAFooInterface_whenCallingStaticMethodBuzz_thenExpectedStringIsWrittenToSystemOut() {\n        Foo.buzz();\n        assertThat(outContent.toString()).isEqualTo(\"Hello static world!\");\n    }\n}"}
{"code_source": "package com.baeldung.java9.rangedates;\n\nimport java.util.Collection;\nimport java.util.Date;\n\npublic class DatesCollectionIteration {\n\n    public void iteratingRangeOfDatesJava7(Collection<Date> dates) {\n\n        for (Date date : dates) {\n            processDate(date);\n        }\n    }\n\n    public void iteratingRangeOfDatesJava8(Collection<Date> dates) {\n        dates.stream()\n            .forEach(this::processDate);\n    }\n\n    private void processDate(Date date) {\n        System.out.println(date);\n    }\n\n}\n", "test_case": "package com.baeldung.java9.rangedates;\n\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.time.temporal.ChronoUnit;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport org.junit.Test;\n\npublic class DatesCollectionIterationUnitTest {\n\n    private Collection<LocalDate> localDates = LocalDate.now()\n        .datesUntil(LocalDate.now()\n            .plus(10L, ChronoUnit.DAYS))\n        .collect(Collectors.toList());\n\n    private Collection<Date> dates = localDates.stream()\n        .map(localDate -> Date.from(localDate.atStartOfDay(ZoneId.systemDefault())\n            .toInstant()))\n        .collect(Collectors.toList());\n\n    @Test\n    public void givenIteratingListOfDatesJava7_WhenStartTodayAndEnding10DaysAhead() {\n        DatesCollectionIteration iterateInColleciton = new DatesCollectionIteration();\n        Calendar today = Calendar.getInstance();\n        Calendar next10Ahead = (Calendar) today.clone();\n        next10Ahead.add(Calendar.DATE, 10);\n\n        iterateInColleciton.iteratingRangeOfDatesJava7(createRangeDates(today.getTime(), next10Ahead.getTime()));\n    }\n\n    @Test\n    public void givenIteratingListOfDatesJava8_WhenStartTodayAndEnd10DaysAhead() {\n        DatesCollectionIteration iterateInColleciton = new DatesCollectionIteration();\n\n        iterateInColleciton.iteratingRangeOfDatesJava8(dates);\n    }\n\n    private List<Date> createRangeDates(Date start, Date end) {\n\n        List<Date> dates = new ArrayList<>();\n        Date current = start;\n\n        while (current.before(end)) {\n            dates.add(current);\n            \n            Calendar calendar = Calendar.getInstance();\n            calendar.setTime(current);\n            calendar.add(Calendar.DATE, 1);\n\n            current = calendar.getTime();\n        }\n\n        return dates;\n    }\n}\n"}
{"code_source": "package com.baeldung.java9.rangedates;\n\nimport java.time.LocalDate;\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class RangeDatesIteration {\n\n    public void iterateBetweenDatesJava9(LocalDate startDate, LocalDate endDate) {\n\n        startDate.datesUntil(endDate)\n            .forEach(this::processDate);\n    }\n\n    public void iterateBetweenDatesJava8(LocalDate start, LocalDate end) {\n        for (LocalDate date = start; date.isBefore(end); date = date.plusDays(1)) {\n            processDate(date);\n        }\n    }\n\n    public void iterateBetweenDatesJava7(Date start, Date end) {\n        Date current = start;\n\n        while (current.before(end)) {\n            processDate(current);\n\n            Calendar calendar = Calendar.getInstance();\n            calendar.setTime(current);\n\n            calendar.add(Calendar.DATE, 1);\n\n            current = calendar.getTime();\n        }\n    }\n\n    private void processDate(LocalDate date) {\n        System.out.println(date);\n    }\n\n    private void processDate(Date date) {\n        System.out.println(date);\n    }\n}\n", "test_case": "package com.baeldung.java9.rangedates;\n\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Calendar;\nimport java.util.Date;\n\nimport org.junit.Test;\n\npublic class RangeDatesIterationUnitTest {\n\n    @Test\n    public void givenIterateBetweenDatesJava9_WhenStartDateAsTodayAndEndDateAs10DaysAhead() {\n        LocalDate start = LocalDate.now();\n        LocalDate end = start.plus(10L, ChronoUnit.DAYS);\n\n        RangeDatesIteration iteration = new RangeDatesIteration();\n\n        iteration.iterateBetweenDatesJava9(start, end);\n    }\n\n    @Test\n    public void givenIterateBetweenDatesJava8_WhenStartDateAsTodayAndEndDateAs10DaysAhead() {\n        LocalDate start = LocalDate.now();\n        LocalDate end = start.plus(10L, ChronoUnit.DAYS);\n\n        RangeDatesIteration iteration = new RangeDatesIteration();\n\n        iteration.iterateBetweenDatesJava8(start, end);\n    }\n\n    @Test\n    public void givenIterateBetweenDatesJava7_WhenStartDateAsTodayAndEndDateAs10DaysAhead() {\n        Calendar today = Calendar.getInstance();\n        Calendar calendar = Calendar.getInstance();\n        calendar.clear();\n        calendar.set(today.get(Calendar.YEAR), today.get(Calendar.MONTH), today.get(Calendar.DATE));\n        Date start = calendar.getTime();\n\n        calendar.add(Calendar.DATE, 10);\n        Date end = calendar.getTime();\n\n        RangeDatesIteration iteration = new RangeDatesIteration();\n\n        iteration.iterateBetweenDatesJava7(start, end);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.java9.language;\n\npublic interface PrivateInterface {\n\n    private static String staticPrivate() {\n        return \"static private\";\n    }\n\n    private String instancePrivate() {\n        return \"instance private\";\n    }\n\n    public default void check() {\n        String result = staticPrivate();\n        if (!result.equals(\"static private\"))\n            throw new AssertionError(\"Incorrect result for static private interface method\");\n        PrivateInterface pvt = new PrivateInterface() {\n        };\n        result = pvt.instancePrivate();\n        if (!result.equals(\"instance private\"))\n            throw new AssertionError(\"Incorrect result for instance private interface method\");\n    }\n}\n", "test_case": "package com.baeldung.java9.language;\n\nimport com.baeldung.java9.language.PrivateInterface;\nimport org.junit.Test;\n\npublic class PrivateInterfaceUnitTest {\n\n    @Test\n    public void test() {\n        PrivateInterface piClass = new PrivateInterface() {\n        };\n        piClass.check();\n    }\n\n}\n"}
{"code_source": "package com.baeldung.java9.reactive;\n\nimport java.util.ArrayList;\nimport java.util.concurrent.Flow.Subscriber;\nimport java.util.concurrent.Flow.Subscription;\n\npublic class BaeldungBatchSubscriberImpl<T> implements Subscriber<String> {\n    private Subscription subscription;\n    private boolean completed = false;\n    private int counter;\n    private ArrayList<String> buffer;\n    public static final int BUFFER_SIZE = 5;\n\n    public BaeldungBatchSubscriberImpl() {\n        buffer = new ArrayList<String>();\n    }\n\n    public boolean isCompleted() {\n        return completed;\n    }\n\n    public void setCompleted(boolean completed) {\n        this.completed = completed;\n    }\n\n    public int getCounter() {\n        return counter;\n    }\n\n    public void setCounter(int counter) {\n        this.counter = counter;\n    }\n\n    @Override\n    public void onSubscribe(Subscription subscription) {\n        this.subscription = subscription;\n        subscription.request(BUFFER_SIZE);\n    }\n\n    @Override\n    public void onNext(String item) {\n        buffer.add(item);\n        // if buffer is full, process the items.\n        if (buffer.size() >= BUFFER_SIZE) {\n            processBuffer();\n        }\n        //request more items.\n        subscription.request(1);\n    }\n\n    private void processBuffer() {\n        if (buffer.isEmpty())\n            return;\n        // Process all items in the buffer. Here, we just print it and sleep for 1 second.\n        System.out.print(\"Processed items: \");\n        buffer.stream()\n            .forEach(item -> {\n                System.out.print(\" \" + item);\n            });\n        System.out.println();\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        counter = counter + buffer.size();\n        buffer.clear();\n    }\n\n    @Override\n    public void onError(Throwable t) {\n        t.printStackTrace();\n    }\n\n    @Override\n    public void onComplete() {\n        completed = true;\n        // process any remaining items in buffer before\n        processBuffer();\n        subscription.cancel();\n    }\n}\n", "test_case": "package com.baeldung.java9.reactive;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.concurrent.SubmissionPublisher;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.IntStream;\n\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.Stopwatch;\n\npublic class BaeldungBatchSubscriberImplIntegrationTest {\n\n    private static final int ITEM_SIZE = 10;\n    private SubmissionPublisher<String> publisher;\n    private BaeldungBatchSubscriberImpl<String> subscriber;\n\n    @Before\n    public void initialize() {\n        this.publisher = new SubmissionPublisher<String>(ForkJoinPool.commonPool(), 6);\n        this.subscriber = new BaeldungBatchSubscriberImpl<String>();\n        publisher.subscribe(subscriber);\n    }\n\n    @Rule\n    public Stopwatch stopwatch = new Stopwatch() {\n\n    };\n\n    @Test\n    public void testReactiveStreamCount() {\n        IntStream.range(0, ITEM_SIZE)\n            .forEach(item -> publisher.submit(item + \"\"));\n        publisher.close();\n\n        do {\n            // wait for subscribers to complete all processing.\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        } while (!subscriber.isCompleted());\n\n        int count = subscriber.getCounter();\n\n        assertEquals(ITEM_SIZE, count);\n    }\n\n    @Test\n    public void testReactiveStreamTime() {\n        IntStream.range(0, ITEM_SIZE)\n            .forEach(item -> publisher.submit(item + \"\"));\n        publisher.close();\n\n        do {\n            // wait for subscribers to complete all processing.\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        } while (!subscriber.isCompleted());\n\n        // The runtime in seconds should be equal to the number of items in each batch.\n        assertTrue(stopwatch.runtime(TimeUnit.SECONDS) >= (ITEM_SIZE / subscriber.BUFFER_SIZE));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.java9.reactive;\n\nimport java.util.concurrent.Flow.Subscriber;\nimport java.util.concurrent.Flow.Subscription;\n\npublic class BaeldungSubscriberImpl<T> implements Subscriber<String> {\n    private Subscription subscription;\n    private boolean completed = false;\n    private int counter;\n\n    public boolean isCompleted() {\n        return completed;\n    }\n\n    public void setCompleted(boolean completed) {\n        this.completed = completed;\n    }\n\n    public int getCounter() {\n        return counter;\n    }\n\n    public void setCounter(int counter) {\n        this.counter = counter;\n    }\n\n    @Override\n    public void onSubscribe(Subscription subscription) {\n        this.subscription = subscription;\n        subscription.request(1);\n    }\n\n    @Override\n    public void onNext(String item) {\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        counter++;\n        System.out.println(\"Processed item : \" + item);\n        subscription.request(1);\n    }\n\n    @Override\n    public void onError(Throwable t) {\n        t.printStackTrace();\n    }\n\n    @Override\n    public void onComplete() {\n        completed = true;\n        subscription.cancel();\n    }\n}\n", "test_case": "package com.baeldung.java9.reactive;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.concurrent.SubmissionPublisher;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.IntStream;\n\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.Stopwatch;\n\npublic class BaeldungSubscriberImplIntegrationTest {\n\n    private static final int ITEM_SIZE = 10;\n    private SubmissionPublisher<String> publisher;\n    private BaeldungSubscriberImpl<String> subscriber;\n\n    @Before\n    public void initialize() {\n        // create Publisher with max buffer capacity 3.\n        this.publisher = new SubmissionPublisher<String>(ForkJoinPool.commonPool(), 3);\n        this.subscriber = new BaeldungSubscriberImpl<String>();\n        publisher.subscribe(subscriber);\n    }\n\n    @Rule\n    public Stopwatch stopwatch = new Stopwatch() {\n\n    };\n\n    @Test\n    public void testReactiveStreamCount() {\n        IntStream.range(0, ITEM_SIZE)\n            .forEach(item -> publisher.submit(item + \"\"));\n        publisher.close();\n\n        do {\n            // wait for subscribers to complete all processing.\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        } while (!subscriber.isCompleted());\n\n        int count = subscriber.getCounter();\n\n        assertEquals(ITEM_SIZE, count);\n    }\n\n    @Test\n    public void testReactiveStreamTime() {\n        IntStream.range(0, ITEM_SIZE)\n            .forEach(item -> publisher.submit(item + \"\"));\n        publisher.close();\n\n        do {\n            // wait for subscribers to complete all processing.\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        } while (!subscriber.isCompleted());\n\n        // The runtime in seconds should be equal to the number of items.\n        assertTrue(stopwatch.runtime(TimeUnit.SECONDS) >= ITEM_SIZE);\n    }\n\n    @Test\n    public void testReactiveStreamOffer() {\n        IntStream.range(0, ITEM_SIZE)\n            .forEach(item -> publisher.offer(item + \"\", (subscriber, string) -> {\n                // Returning false means this item will be dropped (no retry), if blocked.\n                return false;\n            }));\n        publisher.close();\n\n        do {\n            // wait for subscribers to complete all processing.\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        } while (!subscriber.isCompleted());\n\n        int count = subscriber.getCounter();\n        // Because 10 items were offered and the buffer capacity was 3, few items will not be processed.\n        assertTrue(ITEM_SIZE > count);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.java9.stackwalker;\n\nimport java.lang.StackWalker.StackFrame;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class StackWalkerDemo {\n\n    public void methodOne() {\n        this.methodTwo();\n    }\n\n    public void methodTwo() {\n        this.methodThree();\n    }\n\n    public void methodThree() {\n        List<StackFrame> stackTrace = StackWalker.getInstance()\n            .walk(this::walkExample);\n\n        printStackTrace(stackTrace);\n\n        System.out.println(\"---------------------------------------------\");\n\n        stackTrace = StackWalker.getInstance()\n            .walk(this::walkExample2);\n\n        printStackTrace(stackTrace);\n\n        System.out.println(\"---------------------------------------------\");\n\n        String line = StackWalker.getInstance().walk(this::walkExample3);\n        System.out.println(line);\n\n        System.out.println(\"---------------------------------------------\");\n        \n        stackTrace = StackWalker.getInstance(StackWalker.Option.SHOW_REFLECT_FRAMES)\n            .walk(this::walkExample);\n\n        printStackTrace(stackTrace);\n        \n        System.out.println(\"---------------------------------------------\");\n        \n        Runnable r = () -> {\n            List<StackFrame> stackTrace2 = StackWalker.getInstance(StackWalker.Option.SHOW_HIDDEN_FRAMES)\n                .walk(this::walkExample);\n            printStackTrace(stackTrace2);\n        };\n        r.run();\n    }\n\n    public List<StackFrame> walkExample(Stream<StackFrame> stackFrameStream) {\n        return stackFrameStream.collect(Collectors.toList());\n    }\n\n    public List<StackFrame> walkExample2(Stream<StackFrame> stackFrameStream) {\n        return stackFrameStream.filter(frame -> frame.getClassName()\n            .contains(\"com.baeldung\"))\n            .collect(Collectors.toList());\n    }\n\n    public String walkExample3(Stream<StackFrame> stackFrameStream) {\n        return stackFrameStream.filter(frame -> frame.getClassName()\n            .contains(\"com.baeldung\")\n            && frame.getClassName()\n            .endsWith(\"Test\"))\n            .findFirst()\n            .map(frame -> frame.getClassName() + \"#\" + frame.getMethodName() + \", Line \" + frame.getLineNumber())\n            .orElse(\"Unknown caller\");\n    }\n    \n    public void findCaller() {\n        Class<?> caller = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE).getCallerClass();\n        System.out.println(caller.getCanonicalName());\n    }\n\n    public void printStackTrace(List<StackFrame> stackTrace) {\n        for (StackFrame stackFrame : stackTrace) {\n            System.out.println(stackFrame.getClassName()\n                .toString() + \"#\" + stackFrame.getMethodName() + \", Line \" + stackFrame.getLineNumber());\n        }\n    }\n}\n", "test_case": "package com.baeldung.java9.stackwalker;\n\nimport org.junit.Test;\n\npublic class StackWalkerDemoUnitTest {\n\n    @Test\n    public void giveStalkWalker_whenWalkingTheStack_thenShowStackFrames() {\n        new StackWalkerDemo().methodOne();\n    }\n    \n    @Test\n    public void giveStalkWalker_whenInvokingFindCaller_thenFindCallingClass() {\n        new StackWalkerDemo().findCaller();\n    }\n}\n"}
{"code_source": "package com.baeldung.readannotations;\n\npublic class ClassWithAnnotations {\n\n    @FirstAnnotation\n    @SecondAnnotation\n    @ThirdAnnotation\n    private String classMember;\n}\n", "test_case": "package com.baeldung.readannotations;\n\nimport org.junit.Test;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class ClassWithAnnotationsUnitTest {\n\n    @Test\n    public void whenCallingGetDeclaredAnnotations_thenOnlyRuntimeAnnotationsAreAvailable() throws NoSuchFieldException {\n        Field classMemberField = ClassWithAnnotations.class.getDeclaredField(\"classMember\");\n        Annotation[] annotations = classMemberField.getDeclaredAnnotations();\n        assertThat(annotations).hasSize(2);\n    }\n\n    @Test\n    public void whenCallingIsAnnotationPresent_thenOnlyRuntimeAnnotationsAreAvailable() throws NoSuchFieldException {\n        Field classMemberField = ClassWithAnnotations.class.getDeclaredField(\"classMember\");\n        assertThat(classMemberField.isAnnotationPresent(FirstAnnotation.class)).isTrue();\n        assertThat(classMemberField.isAnnotationPresent(SecondAnnotation.class)).isTrue();\n        assertThat(classMemberField.isAnnotationPresent(ThirdAnnotation.class)).isFalse();\n    }\n\n    @Test\n    public void whenCallingGetDeclaredAnnotationsOrGetAnnotations_thenSameAnnotationsAreReturned() throws NoSuchFieldException {\n        Field classMemberField = ClassWithAnnotations.class.getDeclaredField(\"classMember\");\n        Annotation[] declaredAnnotations = classMemberField.getDeclaredAnnotations();\n        Annotation[] annotations = classMemberField.getAnnotations();\n        assertThat(declaredAnnotations).containsExactly(annotations);\n    }\n}\n"}
{"code_source": "package com.baeldung.array.conversions;\n\nimport com.google.common.primitives.Ints;\nimport com.google.common.primitives.Longs;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.apache.commons.lang3.Conversion;\n\nimport java.math.BigInteger;\nimport java.nio.ByteBuffer;\nimport java.util.Arrays;\n\nclass ByteArrayToNumericRepresentation {\n\n    static int convertByteArrayToIntUsingShiftOperator(byte[] bytes) {\n        int value = 0;\n        for (byte b : bytes) {\n            value = (value << 8) + (b & 0xFF);\n        }\n        return value;\n    }\n\n    static byte[] convertIntToByteArrayUsingShiftOperator(int value) {\n        byte[] bytes = new byte[Integer.BYTES];\n        int length = bytes.length;\n        for (int i = 0; i < length; i++) {\n            bytes[length - i - 1] = (byte) (value & 0xFF);\n            value >>= 8;\n        }\n        return bytes;\n    }\n\n    static long convertByteArrayToLongUsingShiftOperator(byte[] bytes) {\n        long value = 0;\n        for (byte b : bytes) {\n            value <<= 8;\n            value |= (b & 0xFF);\n        }\n        return value;\n    }\n\n    static byte[] convertLongToByteArrayUsingShiftOperator(long value) {\n        byte[] bytes = new byte[Long.BYTES];\n        int length = bytes.length;\n        for (int i = 0; i < length; i++) {\n            bytes[length - i - 1] = (byte) (value & 0xFF);\n            value >>= 8;\n        }\n        return bytes;\n    }\n\n    static float convertByteArrayToFloatUsingShiftOperator(byte[] bytes) {\n        // convert bytes to int\n        int intValue = 0;\n        for (byte b : bytes) {\n            intValue = (intValue << 8) + (b & 0xFF);\n        }\n\n        // convert int to float\n        return Float.intBitsToFloat(intValue);\n    }\n\n    static byte[] convertFloatToByteArrayUsingShiftOperator(float value) {\n        // convert float to int\n        int intValue = Float.floatToIntBits(value);\n\n        // convert int to bytes\n        byte[] bytes = new byte[Float.BYTES];\n        int length = bytes.length;\n        for (int i = 0; i < length; i++) {\n            bytes[length - i - 1] = (byte) (intValue & 0xFF);\n            intValue >>= 8;\n        }\n        return bytes;\n    }\n\n    static double convertingByteArrayToDoubleUsingShiftOperator(byte[] bytes) {\n        long longValue = 0;\n        for (byte b : bytes) {\n            longValue = (longValue << 8) + (b & 0xFF);\n        }\n\n        return Double.longBitsToDouble(longValue);\n    }\n\n    static byte[] convertDoubleToByteArrayUsingShiftOperator(double value) {\n        long longValue = Double.doubleToLongBits(value);\n\n        byte[] bytes = new byte[Double.BYTES];\n        int length = bytes.length;\n        for (int i = 0; i < length; i++) {\n            bytes[length - i - 1] = (byte) (longValue & 0xFF);\n            longValue >>= 8;\n        }\n        return bytes;\n    }\n\n    static int convertByteArrayToIntUsingByteBuffer(byte[] bytes) {\n        ByteBuffer buffer = ByteBuffer.allocate(Integer.BYTES);\n        buffer.put(bytes);\n        buffer.rewind();\n        return buffer.getInt();\n    }\n\n    static byte[] convertIntToByteArrayUsingByteBuffer(int value) {\n        ByteBuffer buffer = ByteBuffer.allocate(Integer.BYTES);\n        buffer.putInt(value);\n        buffer.rewind();\n        return buffer.array();\n    }\n\n    static long convertByteArrayToLongUsingByteBuffer(byte[] bytes) {\n        ByteBuffer buffer = ByteBuffer.allocate(Long.BYTES);\n        buffer.put(bytes);\n        buffer.rewind();\n        return buffer.getLong();\n    }\n\n    static byte[] convertLongToByteArrayUsingByteBuffer(long value) {\n        ByteBuffer buffer = ByteBuffer.allocate(Long.BYTES);\n        buffer.putLong(value);\n        buffer.rewind();\n        return buffer.array();\n    }\n\n    static float convertByteArrayToFloatUsingByteBuffer(byte[] bytes) {\n        ByteBuffer buffer = ByteBuffer.allocate(Float.BYTES);\n        buffer.put(bytes);\n        buffer.rewind();\n        return buffer.getFloat();\n    }\n\n    static byte[] convertFloatToByteArrayUsingByteBuffer(float value) {\n        ByteBuffer buffer = ByteBuffer.allocate(Float.BYTES);\n        buffer.putFloat(value);\n        buffer.rewind();\n        return buffer.array();\n    }\n\n    static double convertByteArrayToDoubleUsingByteBuffer(byte[] bytes) {\n        ByteBuffer buffer = ByteBuffer.allocate(Double.BYTES);\n        buffer.put(bytes);\n        buffer.rewind();\n        return buffer.getDouble();\n    }\n\n    static byte[] convertDoubleToByteArrayUsingByteBuffer(double value) {\n        ByteBuffer buffer = ByteBuffer.allocate(Double.BYTES);\n        buffer.putDouble(value);\n        buffer.rewind();\n        return buffer.array();\n    }\n\n    static int convertByteArrayToIntUsingBigInteger(byte[] bytes) {\n        return new BigInteger(bytes).intValue();\n    }\n\n    static byte[] convertIntToByteArrayUsingBigInteger(int value) {\n        return BigInteger.valueOf(value).toByteArray();\n    }\n\n    static long convertByteArrayToLongUsingBigInteger(byte[] bytes) {\n        return new BigInteger(bytes).longValue();\n    }\n\n    static byte[] convertLongToByteArrayUsingBigInteger(long value) {\n        return BigInteger.valueOf(value).toByteArray();\n    }\n\n    static float convertByteArrayToFloatUsingBigInteger(byte[] bytes) {\n        int intValue = new BigInteger(bytes).intValue();\n        return Float.intBitsToFloat(intValue);\n    }\n\n    static byte[] convertFloatToByteArrayUsingBigInteger(float value) {\n        int intValue = Float.floatToIntBits(value);\n        return BigInteger.valueOf(intValue).toByteArray();\n    }\n\n    static double convertByteArrayToDoubleUsingBigInteger(byte[] bytes) {\n        long longValue = new BigInteger(bytes).longValue();\n        return Double.longBitsToDouble(longValue);\n    }\n\n    static byte[] convertDoubleToByteArrayUsingBigInteger(double value) {\n        long longValue = Double.doubleToLongBits(value);\n        return BigInteger.valueOf(longValue).toByteArray();\n    }\n\n    static int convertingByteArrayToIntUsingGuava(byte[] bytes) {\n        return Ints.fromByteArray(bytes);\n    }\n\n    static byte[] convertIntToByteArrayUsingGuava(int value) {\n        return Ints.toByteArray(value);\n    }\n\n    static long convertByteArrayToLongUsingGuava(byte[] bytes) {\n        return Longs.fromByteArray(bytes);\n    }\n\n    static byte[] convertLongToByteArrayUsingGuava(long value) {\n        return Longs.toByteArray(value);\n    }\n\n    static float convertByteArrayToFloatUsingGuava(byte[] bytes) {\n        int intValue = Ints.fromByteArray(bytes);\n        return Float.intBitsToFloat(intValue);\n    }\n\n    static byte[] convertFloatToByteArrayUsingGuava(float value) {\n        int intValue = Float.floatToIntBits(value);\n        return Ints.toByteArray(intValue);\n    }\n\n    static double convertByteArrayToDoubleUsingGuava(byte[] bytes) {\n        long longValue = Longs.fromByteArray(bytes);\n        return Double.longBitsToDouble(longValue);\n    }\n\n    static byte[] convertDoubleToByteArrayUsingGuava(double value) {\n        long longValue = Double.doubleToLongBits(value);\n        return Longs.toByteArray(longValue);\n    }\n\n    static int convertByteArrayToIntUsingCommonsLang(byte[] bytes) {\n        byte[] copyBytes = Arrays.copyOf(bytes, bytes.length);\n        ArrayUtils.reverse(copyBytes);\n        return Conversion.byteArrayToInt(copyBytes, 0, 0, 0, copyBytes.length);\n    }\n\n    static byte[] convertIntToByteArrayUsingCommonsLang(int value) {\n        byte[] bytes = new byte[Integer.BYTES];\n        Conversion.intToByteArray(value, 0, bytes, 0, bytes.length);\n        ArrayUtils.reverse(bytes);\n        return bytes;\n    }\n\n    static long convertByteArrayToLongUsingCommonsLang(byte[] bytes) {\n        byte[] copyBytes = Arrays.copyOf(bytes, bytes.length);\n        ArrayUtils.reverse(copyBytes);\n        return Conversion.byteArrayToLong(copyBytes, 0, 0, 0, copyBytes.length);\n    }\n\n    static byte[] convertLongToByteArrayUsingCommonsLang(long value) {\n        byte[] bytes = new byte[Long.BYTES];\n        Conversion.longToByteArray(value, 0, bytes, 0, bytes.length);\n        ArrayUtils.reverse(bytes);\n        return bytes;\n    }\n\n    static float convertByteArrayToFloatUsingCommonsLang(byte[] bytes) {\n        byte[] copyBytes = Arrays.copyOf(bytes, bytes.length);\n        ArrayUtils.reverse(copyBytes);\n        int intValue = Conversion.byteArrayToInt(copyBytes, 0, 0, 0, copyBytes.length);\n        return Float.intBitsToFloat(intValue);\n    }\n\n    static byte[] convertFloatToByteArrayUsingCommonsLang(float value) {\n        int intValue = Float.floatToIntBits(value);\n        byte[] bytes = new byte[Float.BYTES];\n        Conversion.intToByteArray(intValue, 0, bytes, 0, bytes.length);\n        ArrayUtils.reverse(bytes);\n        return bytes;\n    }\n\n    static double convertByteArrayToDoubleUsingCommonsLang(byte[] bytes) {\n        byte[] copyBytes = Arrays.copyOf(bytes, bytes.length);\n        ArrayUtils.reverse(copyBytes);\n        long longValue = Conversion.byteArrayToLong(copyBytes, 0, 0, 0, copyBytes.length);\n        return Double.longBitsToDouble(longValue);\n    }\n\n    static byte[] convertDoubleToByteArrayUsingCommonsLang(double value) {\n        long longValue = Double.doubleToLongBits(value);\n        byte[] bytes = new byte[Long.BYTES];\n        Conversion.longToByteArray(longValue, 0, bytes, 0, bytes.length);\n        ArrayUtils.reverse(bytes);\n        return bytes;\n    }\n\n}", "test_case": "package com.baeldung.array.conversions;\n\nimport org.junit.Test;\n\nimport static com.baeldung.array.conversions.ByteArrayToNumericRepresentation.*;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\n\npublic class ByteArrayToNumericRepresentationUnitTest {\n    private static final byte[] INT_BYTE_ARRAY = new byte[]{\n            (byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE\n    };\n    private static final int INT_VALUE = 0xCAFEBABE;\n\n\n    private static final byte[] FLOAT_BYTE_ARRAY = new byte[]{\n            (byte) 0x40, (byte) 0x48, (byte) 0xF5, (byte) 0xC3\n    };\n    private static final float FLOAT_VALUE = 3.14F;\n\n\n    private static final byte[] LONG_BYTE_ARRAY = new byte[]{\n            (byte) 0x01, (byte) 0x23, (byte) 0x45, (byte) 0x67,\n            (byte) 0x89, (byte) 0xAB, (byte) 0xCD, (byte) 0xEF\n    };\n    private static final long LONG_VALUE = 0x0123456789ABCDEFL;\n\n\n    private static final byte[] DOUBLE_BYTE_ARRAY = new byte[]{\n            (byte) 0x3F, (byte) 0xE3, (byte) 0xC6, (byte) 0xA7,\n            (byte) 0xEF, (byte) 0x9D, (byte) 0xB2, (byte) 0x2D\n    };\n    private static final double DOUBLE_VALUE = 0.618D;\n\n\n    @Test\n    public void givenShiftOperator_whenConvertingByteArrayToInt_thenSuccess() {\n        int value = convertByteArrayToIntUsingShiftOperator(INT_BYTE_ARRAY);\n\n        assertEquals(INT_VALUE, value);\n    }\n\n    @Test\n    public void givenShiftOperator_whenConvertingIntToByteArray_thenSuccess() {\n        byte[] bytes = convertIntToByteArrayUsingShiftOperator(INT_VALUE);\n\n        assertArrayEquals(INT_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenShiftOperator_whenConvertingByteArrayToLong_thenSuccess() {\n        long value = convertByteArrayToLongUsingShiftOperator(LONG_BYTE_ARRAY);\n\n        assertEquals(LONG_VALUE, value);\n    }\n\n    @Test\n    public void givenShiftOperator_whenConvertingLongToByteArray_thenSuccess() {\n        byte[] bytes = convertLongToByteArrayUsingShiftOperator(LONG_VALUE);\n\n        assertArrayEquals(LONG_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenShiftOperator_whenConvertingByteArrayToFloat_thenSuccess() {\n        float value = convertByteArrayToFloatUsingShiftOperator(FLOAT_BYTE_ARRAY);\n\n        assertEquals(Float.floatToIntBits(FLOAT_VALUE), Float.floatToIntBits(value));\n    }\n\n    @Test\n    public void givenShiftOperator_whenConvertingFloatToByteArray_thenSuccess() {\n        byte[] bytes = convertFloatToByteArrayUsingShiftOperator(FLOAT_VALUE);\n\n        assertArrayEquals(FLOAT_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenShiftOperator_whenConvertingByteArrayToDouble_thenSuccess() {\n        double value = convertingByteArrayToDoubleUsingShiftOperator(DOUBLE_BYTE_ARRAY);\n\n        assertEquals(Double.doubleToLongBits(DOUBLE_VALUE), Double.doubleToLongBits(value));\n    }\n\n    @Test\n    public void givenShiftOperator_whenConvertingDoubleToByteArray_thenSuccess() {\n        byte[] bytes = convertDoubleToByteArrayUsingShiftOperator(DOUBLE_VALUE);\n\n        assertArrayEquals(DOUBLE_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenByteBuffer_whenConvertingByteArrayToInt_thenSuccess() {\n        int value = convertByteArrayToIntUsingByteBuffer(INT_BYTE_ARRAY);\n\n        assertEquals(INT_VALUE, value);\n    }\n\n    @Test\n    public void givenByteBuffer_whenConvertingIntToByteArray_thenSuccess() {\n        byte[] bytes = convertIntToByteArrayUsingByteBuffer(INT_VALUE);\n\n        assertArrayEquals(INT_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenByteBuffer_whenConvertingByteArrayToLong_thenSuccess() {\n        long value = convertByteArrayToLongUsingByteBuffer(LONG_BYTE_ARRAY);\n\n        assertEquals(LONG_VALUE, value);\n    }\n\n    @Test\n    public void givenByteBuffer_whenConvertingLongToByteArray_thenSuccess() {\n        byte[] bytes = convertLongToByteArrayUsingByteBuffer(LONG_VALUE);\n\n        assertArrayEquals(LONG_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenByteBuffer_whenConvertingByteArrayToFloat_thenSuccess() {\n        float value = convertByteArrayToFloatUsingByteBuffer(FLOAT_BYTE_ARRAY);\n\n        assertEquals(Float.floatToIntBits(FLOAT_VALUE), Float.floatToIntBits(value));\n    }\n\n    @Test\n    public void givenByteBuffer_whenConvertingFloatToByteArray_thenSuccess() {\n        byte[] bytes = convertFloatToByteArrayUsingByteBuffer(FLOAT_VALUE);\n\n        assertArrayEquals(FLOAT_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenByteBuffer_whenConvertingByteArrayToDouble_thenSuccess() {\n        double value = convertByteArrayToDoubleUsingByteBuffer(DOUBLE_BYTE_ARRAY);\n\n        assertEquals(Double.doubleToLongBits(DOUBLE_VALUE), Double.doubleToLongBits(value));\n    }\n\n    @Test\n    public void givenByteBuffer_whenConvertingDoubleToByteArray_thenSuccess() {\n        byte[] bytes = convertDoubleToByteArrayUsingByteBuffer(DOUBLE_VALUE);\n\n        assertArrayEquals(DOUBLE_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenBigInteger_whenConvertingByteArrayToInt_thenSuccess() {\n        int value = convertByteArrayToIntUsingBigInteger(INT_BYTE_ARRAY);\n\n        assertEquals(INT_VALUE, value);\n    }\n\n    @Test\n    public void givenBigInteger_whenConvertingIntToByteArray_thenSuccess() {\n        byte[] bytes = convertIntToByteArrayUsingBigInteger(INT_VALUE);\n\n        assertArrayEquals(INT_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenBigInteger_whenConvertingByteArrayToLong_thenSuccess() {\n        long value = convertByteArrayToLongUsingBigInteger(LONG_BYTE_ARRAY);\n\n        assertEquals(LONG_VALUE, value);\n    }\n\n    @Test\n    public void givenBigInteger_whenConvertingLongToByteArray_thenSuccess() {\n        byte[] bytes = convertLongToByteArrayUsingBigInteger(LONG_VALUE);\n\n        assertArrayEquals(LONG_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenBigInteger_whenConvertingByteArrayToFloat_thenSuccess() {\n        float value = convertByteArrayToFloatUsingBigInteger(FLOAT_BYTE_ARRAY);\n\n        assertEquals(Float.floatToIntBits(FLOAT_VALUE), Float.floatToIntBits(value));\n    }\n\n    @Test\n    public void givenBigInteger_whenConvertingFloatToByteArray_thenSuccess() {\n        byte[] bytes = convertFloatToByteArrayUsingBigInteger(FLOAT_VALUE);\n\n        assertArrayEquals(FLOAT_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenBigInteger_whenConvertingByteArrayToDouble_thenSuccess() {\n        double value = convertByteArrayToDoubleUsingBigInteger(DOUBLE_BYTE_ARRAY);\n\n        assertEquals(Double.doubleToLongBits(DOUBLE_VALUE), Double.doubleToLongBits(value));\n    }\n\n    @Test\n    public void givenBigInteger_whenConvertingDoubleToByteArray_thenSuccess() {\n        byte[] bytes = convertDoubleToByteArrayUsingBigInteger(DOUBLE_VALUE);\n\n        assertArrayEquals(DOUBLE_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenGuava_whenConvertingByteArrayToInt_thenSuccess() {\n        int value = convertingByteArrayToIntUsingGuava(INT_BYTE_ARRAY);\n\n        assertEquals(INT_VALUE, value);\n    }\n\n    @Test\n    public void givenGuava_whenConvertingIntToByteArray_thenSuccess() {\n        byte[] bytes = convertIntToByteArrayUsingGuava(INT_VALUE);\n\n        assertArrayEquals(INT_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenGuava_whenConvertingByteArrayToLong_thenSuccess() {\n        long value = convertByteArrayToLongUsingGuava(LONG_BYTE_ARRAY);\n\n        assertEquals(LONG_VALUE, value);\n    }\n\n    @Test\n    public void givenGuava_whenConvertingLongToByteArray_thenSuccess() {\n        byte[] bytes = convertLongToByteArrayUsingGuava(LONG_VALUE);\n\n        assertArrayEquals(LONG_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenGuava_whenConvertingByteArrayToFloat_thenSuccess() {\n        float value = convertByteArrayToFloatUsingGuava(FLOAT_BYTE_ARRAY);\n\n        assertEquals(Float.floatToIntBits(FLOAT_VALUE), Float.floatToIntBits(value));\n    }\n\n    @Test\n    public void givenGuava_whenConvertingFloatToByteArray_thenSuccess() {\n        byte[] bytes = convertFloatToByteArrayUsingGuava(FLOAT_VALUE);\n\n        assertArrayEquals(FLOAT_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenGuava_whenConvertingByteArrayToDouble_thenSuccess() {\n        double value = convertByteArrayToDoubleUsingGuava(DOUBLE_BYTE_ARRAY);\n\n        assertEquals(Double.doubleToLongBits(DOUBLE_VALUE), Double.doubleToLongBits(value));\n    }\n\n    @Test\n    public void givenGuava_whenConvertingDoubleToByteArray_thenSuccess() {\n        byte[] bytes = convertDoubleToByteArrayUsingGuava(DOUBLE_VALUE);\n\n        assertArrayEquals(DOUBLE_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenCommonsLang_whenConvertingByteArrayToInt_thenSuccess() {\n        int value = convertByteArrayToIntUsingCommonsLang(INT_BYTE_ARRAY);\n\n        assertEquals(INT_VALUE, value);\n    }\n\n    @Test\n    public void givenCommonsLang_whenConvertingIntToByteArray_thenSuccess() {\n        byte[] bytes = convertIntToByteArrayUsingCommonsLang(INT_VALUE);\n\n        assertArrayEquals(INT_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenCommonsLang_whenConvertingByteArrayToLong_thenSuccess() {\n        long value = convertByteArrayToLongUsingCommonsLang(LONG_BYTE_ARRAY);\n\n        assertEquals(LONG_VALUE, value);\n    }\n\n    @Test\n    public void givenCommonsLang_whenConvertingLongToByteArray_thenSuccess() {\n        byte[] bytes = convertLongToByteArrayUsingCommonsLang(LONG_VALUE);\n\n        assertArrayEquals(LONG_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenCommonsLang_whenConvertingByteArrayToFloat_thenSuccess() {\n        float value = convertByteArrayToFloatUsingCommonsLang(FLOAT_BYTE_ARRAY);\n\n        assertEquals(Float.floatToIntBits(FLOAT_VALUE), Float.floatToIntBits(value));\n    }\n\n    @Test\n    public void givenCommonsLang_whenConvertingFloatToByteArray_thenSuccess() {\n        byte[] bytes = convertFloatToByteArrayUsingCommonsLang(FLOAT_VALUE);\n\n        assertArrayEquals(FLOAT_BYTE_ARRAY, bytes);\n    }\n\n    @Test\n    public void givenCommonsLang_whenConvertingByteArrayToDouble_thenSuccess() {\n        double value = convertByteArrayToDoubleUsingCommonsLang(DOUBLE_BYTE_ARRAY);\n\n        assertEquals(Double.doubleToLongBits(DOUBLE_VALUE), Double.doubleToLongBits(value));\n    }\n\n    @Test\n    public void givenCommonsLang_whenConvertingDoubleToByteArray_thenSuccess() {\n        byte[] bytes = convertDoubleToByteArrayUsingCommonsLang(DOUBLE_VALUE);\n\n        assertArrayEquals(DOUBLE_BYTE_ARRAY, bytes);\n    }\n\n}"}
{"code_source": "package com.baeldung.array.conversions;\n\nimport java.nio.ByteBuffer;\n\npublic class FloatToByteArray {\n    \n    /**\n     * convert float into byte array using Float API floatToIntBits \n     * @param value\n     * @return byte[]\n     */\n    public static byte[] floatToByteArray(float value) {\n        int intBits =  Float.floatToIntBits(value);\n        return new byte[] {(byte) (intBits >> 24), (byte) (intBits >> 16), (byte) (intBits >> 8), (byte) (intBits) };\n    }\n    \n    /**\n     * convert byte array into float using Float API intBitsToFloat\n     * @param bytes\n     * @return float\n     */\n    public static float byteArrayToFloat(byte[] bytes) {\n        int intBits =  bytes[0] << 24 | (bytes[1] & 0xFF) << 16 | (bytes[2] & 0xFF) << 8 | (bytes[3] & 0xFF);\n        return Float.intBitsToFloat(intBits);\n    }\n    \n    /**\n     * convert float into byte array using ByteBuffer\n     * @param value\n     * @return byte[]\n     */\n    public static byte[] floatToByteArrayWithByteBuffer(float value) {\n        return ByteBuffer.allocate(4).putFloat(value).array();\n    }\n    \n    /**\n     * convert byte array into float using ByteBuffer\n     * @param bytes\n     * @return float\n     */\n    public static float byteArrayToFloatWithByteBuffer(byte[] bytes) {\n        return ByteBuffer.wrap(bytes).getFloat();\n    }\n}\n", "test_case": "package com.baeldung.array.conversions;\n\nimport org.junit.Test;\n\nimport static com.baeldung.array.conversions.FloatToByteArray.*;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\n\npublic class FloatToByteArrayUnitTest {\n\n    @Test\n    public void givenAFloat_thenConvertToByteArray() {\n        assertArrayEquals(new byte[] { 63, -116, -52, -51}, floatToByteArray(1.1f));\n    }\n\n    @Test\n    public void givenAByteArray_thenConvertToFloat() {\n        assertEquals(1.1f, byteArrayToFloat(new byte[] { 63, -116, -52, -51}), 0);\n    }\n\n    @Test\n    public void givenAFloat_thenConvertToByteArrayUsingByteBuffer() {\n        assertArrayEquals(new byte[] { 63, -116, -52, -51}, floatToByteArrayWithByteBuffer(1.1f));\n    }\n\n    @Test\n    public void givenAByteArray_thenConvertToFloatUsingByteBuffer() {\n        assertEquals(1.1f, byteArrayToFloatWithByteBuffer(new byte[] { 63, -116, -52, -51}), 0);\n    }\n\n    @Test\n    public void givenAFloat_thenConvertToByteArray_thenConvertToFloat() {\n        float floatToConvert = 200.12f;\n        byte[] byteArray = floatToByteArray(floatToConvert);\n        assertEquals(200.12f, byteArrayToFloat(byteArray), 0);\n    }\n    \n    @Test\n    public void givenAFloat_thenConvertToByteArrayWithByteBuffer_thenConvertToFloatWithByteBuffer() {\n        float floatToConvert = 30100.42f;\n        byte[] byteArray = floatToByteArrayWithByteBuffer(floatToConvert);\n        assertEquals(30100.42f, byteArrayToFloatWithByteBuffer(byteArray), 0);\n    }\n}\n"}
{"code_source": "package com.baeldung.array.conversions;\n\nimport java.util.Arrays;\nimport java.util.function.IntFunction;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\npublic class StreamArrayConversion {\n\n    public static String[] stringStreamToStringArrayUsingFunctionalInterface(Stream<String> stringStream) {\n        IntFunction<String[]> intFunction = new IntFunction<String[]>() {\n            @Override\n            public String[] apply(int value) {\n                return new String[value];\n            }\n        };\n\n        return stringStream.toArray(intFunction);\n    }\n\n    public static String[] stringStreamToStringArrayUsingMethodReference(Stream<String> stringStream) {\n        return stringStream.toArray(String[]::new);\n    }\n\n    public static String[] stringStreamToStringArrayUsingLambda(Stream<String> stringStream) {\n        return stringStream.toArray(value -> new String[value]);\n    }\n\n    public static Integer[] integerStreamToIntegerArray(Stream<Integer> integerStream) {\n        return integerStream.toArray(Integer[]::new);\n    }\n\n    public static int[] intStreamToPrimitiveIntArray(Stream<Integer> integerStream) {\n        return integerStream.mapToInt(i -> i).toArray();\n    }\n\n    public static Stream<String> stringArrayToStreamUsingArraysStream(String[] stringArray) {\n        return Arrays.stream(stringArray);\n    }\n\n    public static Stream<String> stringArrayToStreamUsingStreamOf(String[] stringArray) {\n        return Stream.of(stringArray);\n    }\n\n    public static IntStream primitiveIntArrayToStreamUsingArraysStream(int[] intArray) {\n        return Arrays.stream(intArray);\n    }\n\n    public static Stream<int[]> primitiveIntArrayToStreamUsingStreamOf(int[] intArray) {\n        return Stream.of(intArray);\n    }\n}\n", "test_case": "package com.baeldung.array.conversions;\n\nimport static com.baeldung.array.conversions.StreamArrayConversion.intStreamToPrimitiveIntArray;\nimport static com.baeldung.array.conversions.StreamArrayConversion.integerStreamToIntegerArray;\nimport static com.baeldung.array.conversions.StreamArrayConversion.stringStreamToStringArrayUsingFunctionalInterface;\nimport static com.baeldung.array.conversions.StreamArrayConversion.stringStreamToStringArrayUsingLambda;\nimport static com.baeldung.array.conversions.StreamArrayConversion.stringStreamToStringArrayUsingMethodReference;\nimport static com.baeldung.array.conversions.StreamArrayConversion.stringArrayToStreamUsingArraysStream;\nimport static com.baeldung.array.conversions.StreamArrayConversion.stringArrayToStreamUsingStreamOf;\nimport static com.baeldung.array.conversions.StreamArrayConversion.primitiveIntArrayToStreamUsingArraysStream;\nimport static com.baeldung.array.conversions.StreamArrayConversion.primitiveIntArrayToStreamUsingStreamOf;\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\nimport com.google.common.collect.Iterators;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\nimport org.junit.Test;\n\npublic class StreamArrayConversionUnitTest {\n\n    private String[] stringArray = new String[]{\"baeldung\", \"convert\", \"to\", \"string\", \"array\"};\n    private Integer[] integerArray = new Integer[]{1, 2, 3, 4, 5, 6, 7};\n    private int[] intPrimitiveArray = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n    @Test\n    public void givenStringStream_thenConvertToStringArrayUsingFunctionalInterface() {\n        Stream<String> stringStream = Stream.of(\"baeldung\", \"convert\", \"to\", \"string\", \"array\");\n        assertArrayEquals(stringArray, stringStreamToStringArrayUsingFunctionalInterface(stringStream));\n    }\n\n    @Test\n    public void givenStringStream_thenConvertToStringArrayUsingMethodReference() {\n        Stream<String> stringStream = Stream.of(\"baeldung\", \"convert\", \"to\", \"string\", \"array\");\n        assertArrayEquals(stringArray, stringStreamToStringArrayUsingMethodReference(stringStream));\n    }\n\n    @Test\n    public void givenStringStream_thenConvertToStringArrayUsingLambda() {\n        Stream<String> stringStream = Stream.of(\"baeldung\", \"convert\", \"to\", \"string\", \"array\");\n        assertArrayEquals(stringArray, stringStreamToStringArrayUsingLambda(stringStream));\n    }\n\n    @Test\n    public void givenIntegerStream_thenConvertToIntegerArray() {\n        Stream<Integer> integerStream = Stream.of(1, 2, 3, 4, 5, 6, 7);\n        assertArrayEquals(integerArray, integerStreamToIntegerArray(integerStream));\n    }\n\n    @Test\n    public void givenIntStream_thenConvertToIntegerArray() {\n        Stream<Integer> integerStream = IntStream.rangeClosed(1, 7).boxed();\n        assertArrayEquals(intPrimitiveArray, intStreamToPrimitiveIntArray(integerStream));\n    }\n\n    @Test\n    public void givenStringArray_whenConvertedTwoWays_thenConvertedStreamsAreEqual() {\n        assertTrue(Iterators\n            .elementsEqual(stringArrayToStreamUsingArraysStream(stringArray).iterator(),\n                stringArrayToStreamUsingStreamOf(stringArray).iterator()));\n    }\n\n    @Test\n    public void givenPrimitiveArray_whenConvertedTwoWays_thenConvertedStreamsAreNotEqual() {\n        assertFalse(Iterators.elementsEqual(\n            primitiveIntArrayToStreamUsingArraysStream(intPrimitiveArray).iterator(),\n            primitiveIntArrayToStreamUsingStreamOf(intPrimitiveArray).iterator()));\n    }\n}\n"}
{"code_source": "package com.baeldung.genericarrays;\n\nimport java.lang.reflect.Array;\n\npublic class MyStack<E> {\n    private E[] elements;\n    private int size = 0;\n\n    public MyStack(Class<E> clazz, int capacity) {\n        elements = (E[]) Array.newInstance(clazz, capacity);\n    }\n\n    public void push(E item) {\n        if (size == elements.length) {\n            throw new RuntimeException();\n        }\n        elements[size++] = item;\n    }\n\n    public E pop() {\n        if (size == 0) {\n            throw new RuntimeException();\n        }\n        return elements[--size];\n    }\n\n    public E[] getAllElements() {\n        return elements;\n    }\n}\n", "test_case": "package com.baeldung.genericarrays;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class MyStackUnitTest {\n\n    @Test\n    public void givenStackWithTwoItems_whenPop_thenReturnLastAdded() {\n        MyStack<String> myStack = new MyStack<>(String.class, 2);\n        myStack.push(\"hello\");\n        myStack.push(\"example\");\n\n        assertEquals(\"example\", myStack.pop());\n    }\n\n    @Test (expected = RuntimeException.class)\n    public void givenStackWithFixedCapacity_whenExceedCapacity_thenThrowException() {\n        MyStack<Integer> myStack = new MyStack<>(Integer.class, 2);\n        myStack.push(100);\n        myStack.push(200);\n        myStack.push(300);\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void givenStack_whenPopOnEmptyStack_thenThrowException() {\n        MyStack<Integer> myStack = new MyStack<>(Integer.class, 1);\n        myStack.push(100);\n        myStack.pop();\n        myStack.pop();\n    }\n\n    @Test\n    public void givenStackWithItems_whenGetAllElements_thenSizeShouldEqualTotal() {\n        MyStack<String> myStack = new MyStack<>(String.class, 2);\n        myStack.push(\"hello\");\n        myStack.push(\"example\");\n\n        String[] items = myStack.getAllElements();\n\n        assertEquals(2, items.length);\n    }\n}\n"}
{"code_source": "package com.baeldung.array;\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class MultiDimensionalArray {\n\n    int[][] shortHandFormInitialization() {\n        int[][] multiDimensionalArray = { { 1, 2 }, { 3, 4, 5 }, { 6, 7, 8, 9 } };\n        return multiDimensionalArray;\n    }\n\n    int[][] declarationAndThenInitialization() {\n        int[][] multiDimensionalArray = new int[3][];\n        multiDimensionalArray[0] = new int[] { 1, 2 };\n        multiDimensionalArray[1] = new int[] { 3, 4, 5 };\n        multiDimensionalArray[2] = new int[] { 6, 7, 8, 9 };\n        return multiDimensionalArray;\n    }\n\n    int[][] declarationAndThenInitializationUsingUserInputs() {\n        int[][] multiDimensionalArray = new int[3][];\n        multiDimensionalArray[0] = new int[2];\n        multiDimensionalArray[1] = new int[3];\n        multiDimensionalArray[2] = new int[4];\n        initializeElements(multiDimensionalArray);\n        return multiDimensionalArray;\n    }\n\n    void initializeElements(int[][] multiDimensionalArray) {\n        Scanner sc = new Scanner(System.in);\n        for (int outer = 0; outer < multiDimensionalArray.length; outer++) {\n            for (int inner = 0; inner < multiDimensionalArray[outer].length; inner++) {\n                multiDimensionalArray[outer][inner] = sc.nextInt();\n            }\n        }\n    }\n\n    void initialize2DArray(int[][] multiDimensionalArray) {\n        for (int[] array : multiDimensionalArray) {\n            Arrays.fill(array, 7);\n        }\n    }\n\n    void printElements(int[][] multiDimensionalArray) {\n        for (int index = 0; index < multiDimensionalArray.length; index++) {\n            System.out.println(Arrays.toString(multiDimensionalArray[index]));\n        }\n    }\n\n    int[] getElementAtGivenIndex(int[][] multiDimensionalArray, int index) {\n        return multiDimensionalArray[index];\n    }\n\n    int[] findLengthOfElements(int[][] multiDimensionalArray) {\n        int[] arrayOfLengths = new int[multiDimensionalArray.length];\n        for (int i = 0; i < multiDimensionalArray.length; i++) {\n            arrayOfLengths[i] = multiDimensionalArray[i].length;\n        }\n        return arrayOfLengths;\n    }\n\n    Integer[] findLengthOfElements(Integer[][] multiDimensionalArray) {\n        return Arrays.stream(multiDimensionalArray)\n          .map(array -> array.length)\n          .toArray(Integer[]::new);\n    }\n\n    int[][] copy2DArray(int[][] arrayOfArrays) {\n        int[][] copied2DArray = new int[arrayOfArrays.length][];\n        for (int i = 0; i < arrayOfArrays.length; i++) {\n            int[] array = arrayOfArrays[i];\n            copied2DArray[i] = Arrays.copyOf(array, array.length);\n        }\n        return copied2DArray;\n    }\n\n    Integer[][] copy2DArray(Integer[][] arrayOfArrays) {\n        return Arrays.stream(arrayOfArrays)\n          .map(array -> Arrays.copyOf(array, array.length))\n          .toArray(Integer[][]::new);\n    }\n}\n", "test_case": "package com.baeldung.array;\n\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\n\nimport org.junit.Test;\n\npublic class MultiDimensionalArrayUnitTest {\n\n    private MultiDimensionalArray obj = new MultiDimensionalArray();\n\n    @Test\n    public void whenInitializedUsingShortHandForm_thenCorrect() {\n        assertArrayEquals(new int[][] { { 1, 2 }, { 3, 4, 5 }, { 6, 7, 8, 9 } }, obj.shortHandFormInitialization());\n    }\n\n    @Test\n    public void whenInitializedWithDeclarationAndThenInitalization_thenCorrect() {\n        assertArrayEquals(new int[][] { { 1, 2 }, { 3, 4, 5 }, { 6, 7, 8, 9 } }, obj.declarationAndThenInitialization());\n    }\n\n    @Test\n    public void whenInitializedWithDeclarationAndThenInitalizationUsingUserInputs_thenCorrect() {\n        InputStream is = new ByteArrayInputStream(\"1 2 3 4 5 6 7 8 9\".getBytes());\n        System.setIn(is);\n        assertArrayEquals(new int[][] { { 1, 2 }, { 3, 4, 5 }, { 6, 7, 8, 9 } }, obj.declarationAndThenInitializationUsingUserInputs());\n        System.setIn(System.in);\n    }\n\n    @Test\n    public void givenMultiDimensionalArrayAndAnIndex_thenReturnArrayAtGivenIndex() {\n        int[][] multiDimensionalArr = { { 1, 2 }, { 3, 4, 5 }, { 6, 7, 8, 9 } };\n        assertArrayEquals(new int[] { 1, 2 }, obj.getElementAtGivenIndex(multiDimensionalArr, 0));\n        assertArrayEquals(new int[] { 3, 4, 5 }, obj.getElementAtGivenIndex(multiDimensionalArr, 1));\n        assertArrayEquals(new int[] { 6, 7, 8, 9 }, obj.getElementAtGivenIndex(multiDimensionalArr, 2));\n    }\n\n    @Test\n    public void givenMultiDimensionalArray_whenUsingArraysAPI_thenVerifyPrintedElements() {\n        int[][] multiDimensionalArr = { { 1, 2 }, { 3, 4, 5 }, { 6, 7, 8, 9 } };\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n        obj.printElements(multiDimensionalArr);\n        assertEquals(\"[1, 2][3, 4, 5][6, 7, 8, 9]\", outContent.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\"));\n        System.setOut(System.out);\n    }\n\n    @Test\n    public void givenMultiDimensionalArray_whenUsingArraysFill_thenVerifyInitialize2DArray() {\n        int[][] multiDimensionalArr = new int[3][];\n        multiDimensionalArr[0] = new int[2];\n        multiDimensionalArr[1] = new int[3];\n        multiDimensionalArr[2] = new int[4];\n        obj.initialize2DArray(multiDimensionalArr);\n        assertArrayEquals(new int[][] {{7,7}, {7,7,7}, {7,7,7,7}}, multiDimensionalArr);\n    }\n    \n    @Test\n    public void givenMultiDimensionalArray_whenUsingIteration_thenVerifyFindLengthOfElements() {\n        int[][] multiDimensionalArr = { { 1, 2 }, { 3, 4, 5 }, { 6, 7, 8, 9 } };\n        assertArrayEquals(new int[]{2,3,4}, obj.findLengthOfElements(multiDimensionalArr));\n    }\n    \n    @Test\n    public void givenMultiDimensionalArray_whenUsingArraysStream_thenVerifyFindLengthOfElements() {\n        Integer[][] multiDimensionalArr = { { 1, 2 }, { 3, 4, 5 }, { 6, 7, 8, 9 } };\n        assertArrayEquals(new Integer[]{2,3,4}, obj.findLengthOfElements(multiDimensionalArr));\n    }\n    \n    @Test\n    public void givenMultiDimensionalArray_whenUsingArraysCopyOf_thenVerifyCopy2DArray() {\n        int[][] multiDimensionalArr = { { 1, 2 }, { 3, 4, 5 }, { 6, 7, 8, 9 } };\n        assertArrayEquals(multiDimensionalArr, obj.copy2DArray(multiDimensionalArr));\n    }\n    \n    @Test\n    public void givenMultiDimensionalArray_whenUsingArraysStream_thenVerifyCopy2DArray() {\n        Integer[][] multiDimensionalArr = { { 1, 2 }, { 3, 4, 5 }, { 6, 7, 8, 9 } };\n        assertArrayEquals(multiDimensionalArr, obj.copy2DArray(multiDimensionalArr));\n    }\n}\n"}
{"code_source": "package com.baeldung.array.looping;\n\npublic class LoopDiagonally {\n\n\n    public String loopDiagonally(String[][] twoDArray) {\n\n        int length = twoDArray.length;\n        int diagonalLines = (length + length) - 1;\n        int itemsInDiagonal = 0;\n        int midPoint = (diagonalLines / 2) + 1;\n        StringBuilder output = new StringBuilder();\n\n        for (int i = 1; i <= diagonalLines; i++) {\n\n            StringBuilder items = new StringBuilder();\n            int rowIndex;\n            int columnIndex;\n\n            if (i <= midPoint) {\n                itemsInDiagonal++;\n                for (int j = 0; j < itemsInDiagonal; j++) {\n                    rowIndex = (i - j) - 1;\n                    columnIndex = j;\n                    items.append(twoDArray[rowIndex][columnIndex]);\n                }\n            } else {\n                itemsInDiagonal--;\n                for (int j = 0; j < itemsInDiagonal; j++) {\n                    rowIndex = (length - 1) - j;\n                    columnIndex = (i - length) + j;\n                    items.append(twoDArray[rowIndex][columnIndex]);\n                }\n            }\n\n            if (i != diagonalLines) {\n                output.append(items).append(\" \");\n            } else {\n                output.append(items);\n            }\n        }\n\n        return output.toString();\n    }\n}\n", "test_case": "package com.baeldung.array.looping;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class LoopDiagonallyUnitTest {\n\n    @Test\n    public void twoArrayIsLoopedDiagonallyAsExpected() {\n\n        LoopDiagonally loopDiagonally = new LoopDiagonally();\n        String[][] twoDArray = {{\"a\", \"b\", \"c\"},\n                                {\"d\", \"e\", \"f\"},\n                                {\"g\", \"h\", \"i\"}};\n\n        String output = loopDiagonally.loopDiagonally(twoDArray);\n        assertEquals(\"a db gec hf i\", output);\n    }\n}"}
{"code_source": "package com.baeldung.array;\n\nimport java.util.Arrays;\n\npublic class SumAndAverageInArray {\n\n    public static int findSumWithoutUsingStream(int[] array) {\n        int sum = 0;\n        for (int value : array) {\n            sum += value;\n        }\n        return sum;\n    }\n\n    public static int findSumUsingStream(int[] array) {\n        return Arrays.stream(array).sum();\n    }\n\n    public static int findSumUsingStream(Integer[] array) {\n        return Arrays.stream(array).mapToInt(Integer::intValue).sum();\n    }\n\n    public static double findAverageWithoutUsingStream(int[] array) {\n        int sum = findSumWithoutUsingStream(array);\n        return (double) sum / array.length;\n    }\n\n    public static double findAverageUsingStream(int[] array) {\n        return Arrays.stream(array).average().orElse(Double.NaN);\n    }\n}\n", "test_case": "package com.baeldung.array;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class SumAndAverageInArrayUnitTest {\n    @Test\n    public void givenAnIntArray_whenNotUsingStream_thenFindSum() {\n        int[] array = { 1, 3, 4, 8, 19, 20 };\n        int expectedSumOfArray = 55;\n        int actualSumOfArray = SumAndAverageInArray.findSumWithoutUsingStream(array);\n        Assert.assertEquals(expectedSumOfArray, actualSumOfArray);\n    }\n\n    @Test\n    public void givenAnIntArray_whenUsingStream_thenFindSum() {\n        int[] array = { 1, 3, 4, 8, 19, 20 };\n        int expectedSumOfArray = 55;\n        int actualSumOfArray = SumAndAverageInArray.findSumUsingStream(array);\n\n        Assert.assertEquals(expectedSumOfArray, actualSumOfArray);\n    }\n\n    @Test\n    public void givenAnBoxedIntegerArray_whenUsingStream_thenFindSum() {\n        Integer[] array = new Integer[]{1, 3, 4, 8, 19, 20};\n        int expectedSumOfArray = 55;\n        int actualSumOfArray = SumAndAverageInArray.findSumUsingStream(array);\n\n        Assert.assertEquals(expectedSumOfArray, actualSumOfArray);\n    }\n\n    @Test\n    public void givenAnIntArray_whenNotUsingStream_thenFindAverage() {\n        int[] array = { 1, 3, 4, 8, 19, 20 };\n        double expectedAvgOfArray = 9.17;\n        double actualAvgOfArray = SumAndAverageInArray.findAverageWithoutUsingStream(array);\n\n        Assert.assertEquals(expectedAvgOfArray, actualAvgOfArray, 0.0034);\n    }\n\n    @Test\n    public void givenAnIntArray_whenUsingStream_thenFindAverage() {\n        int[] array = { 1, 3, 4, 8, 19, 20 };\n        double expectedAvgOfArray = 9.17;\n        double actualAvgOfArray = SumAndAverageInArray.findAverageUsingStream(array);\n\n        Assert.assertEquals(expectedAvgOfArray, actualAvgOfArray, 0.0034);\n    }\n\n    @Test\n    public void givenAnEmptyIntArray_whenUsingStream_thenFindAverage() {\n        int[] array = {};\n        double expectedAvgOfArray = Double.NaN;\n        double actualAvgOfArray = SumAndAverageInArray.findAverageUsingStream(array);\n\n        Assert.assertEquals(expectedAvgOfArray, actualAvgOfArray, 0.00);\n    }\n}\n"}
{"code_source": "package com.baeldung.arrayconcat;\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\npublic class ArrayConcatUtil {\n    private ArrayConcatUtil() {}\n\n    static <T> T[] concatWithCollection(T[] array1, T[] array2) {\n        List<T> resultList = new ArrayList<>(array1.length + array2.length);\n        Collections.addAll(resultList, array1);\n        Collections.addAll(resultList, array2);\n\n        @SuppressWarnings(\"unchecked\")\n        //the type cast is safe as the array1 has the type T[]\n        T[] resultArray = (T[]) Array.newInstance(array1.getClass().getComponentType(), 0);\n        return resultList.toArray(resultArray);\n    }\n\n    static <T> T[] concatWithArrayCopy(T[] array1, T[] array2) {\n        T[] result = Arrays.copyOf(array1, array1.length + array2.length);\n        System.arraycopy(array2, 0, result, array1.length, array2.length);\n        return result;\n    }\n\n    static <T> T concatWithCopy2(T array1, T array2) {\n        if (!array1.getClass().isArray() || !array2.getClass().isArray()) {\n            throw new IllegalArgumentException(\"Only arrays are accepted.\");\n        }\n\n        Class<?> compType1 = array1.getClass().getComponentType();\n        Class<?> compType2 = array2.getClass().getComponentType();\n\n        if (!compType1.equals(compType2)) {\n            throw new IllegalArgumentException(\"Two arrays have different types.\");\n        }\n\n        int len1 = Array.getLength(array1);\n        int len2 = Array.getLength(array2);\n\n        @SuppressWarnings(\"unchecked\")\n        //the cast is safe due to the previous checks\n        T result = (T) Array.newInstance(compType1, len1 + len2);\n\n        System.arraycopy(array1, 0, result, 0, len1);\n        System.arraycopy(array2, 0, result, len1, len2);\n\n        return result;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    static <T> T[] concatWithStream(T[] array1, T[] array2) {\n        return Stream.concat(Arrays.stream(array1), Arrays.stream(array2))\n                     .toArray(size -> (T[]) Array.newInstance(array1.getClass().getComponentType(), size));\n    }\n\n    static int[] concatIntArraysWithIntStream(int[] array1, int[] array2) {\n        return IntStream.concat(Arrays.stream(array1), Arrays.stream(array2)).toArray();\n    }\n}\n", "test_case": "package com.baeldung.arrayconcat;\n\n\nimport com.google.common.collect.ObjectArrays;\nimport com.google.common.primitives.Ints;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.junit.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.fail;\n\npublic class ArrayConcatUtilUnitTest {\n    private final String[] strArray1 = { \"element 1\", \"element 2\", \"element 3\" };\n    private final String[] strArray2 = { \"element 4\", \"element 5\" };\n    private final String[] expectedStringArray = { \"element 1\", \"element 2\", \"element 3\", \"element 4\", \"element 5\" };\n\n    private final int[] intArray1 = { 0, 1, 2, 3 };\n    private final int[] intArray2 = { 4, 5, 6, 7 };\n    private final int[] expectedIntArray = { 0, 1, 2, 3, 4, 5, 6, 7 };\n\n    @Test\n    public void givenTwoStringArrays_whenConcatWithList_thenGetExpectedResult() {\n        String[] result = ArrayConcatUtil.concatWithCollection(strArray1, strArray2);\n        assertThat(result).isEqualTo(expectedStringArray);\n    }\n\n    @Test\n    public void givenTwoStringArrays_whenConcatWithCopy_thenGetExpectedResult() {\n        String[] result = ArrayConcatUtil.concatWithArrayCopy(strArray1, strArray2);\n        assertThat(result).isEqualTo(expectedStringArray);\n    }\n\n    @Test\n    public void givenTwoStrings_whenConcatWithCopy2_thenGetException() {\n        String exMsg = \"Only arrays are accepted.\";\n        try {\n            ArrayConcatUtil.concatWithCopy2(\"String Nr. 1\", \"String Nr. 2\");\n            fail(String.format(\"IllegalArgumentException with message:'%s' should be thrown. But it didn't\", exMsg));\n        } catch (IllegalArgumentException e) {\n            assertThat(e).hasMessage(exMsg);\n        }\n    }\n\n    @Test\n    public void givenTwoArraysInDifferentTypes_whenConcatWithCopy2_thenGetException() {\n        String[] strArray = new String[] { \"test 1\", \"test 2\" };\n        Integer[] integerArray = new Integer[] { 7, 11 };\n        String exMsg = \"Two arrays have different types.\";\n\n        try {\n            ArrayConcatUtil.concatWithCopy2(strArray, integerArray);\n            fail(String.format(\"IllegalArgumentException with message:'%s' should be thrown. But it didn't\", exMsg));\n        } catch (IllegalArgumentException e) {\n            assertThat(e).hasMessage(exMsg);\n        }\n    }\n\n    @Test\n    public void givenTwoArrays_whenConcatWithCopy2_thenGetExpectedResult() {\n        String[] result = ArrayConcatUtil.concatWithCopy2(strArray1, strArray2);\n        assertThat(result).isEqualTo(expectedStringArray);\n\n        int[] intResult = ArrayConcatUtil.concatWithCopy2(intArray1, intArray2);\n        assertThat(intResult).isEqualTo(expectedIntArray);\n    }\n\n    @Test\n    public void givenTwoStringArrays_whenConcatWithStream_thenGetExpectedResult() {\n        String[] result = ArrayConcatUtil.concatWithStream(strArray1, strArray2);\n        assertThat(result).isEqualTo(expectedStringArray);\n    }\n\n    @Test\n    public void givenTwoIntArrays_whenConcatWithIntStream_thenGetExpectedResult() {\n        int[] intResult = ArrayConcatUtil.concatIntArraysWithIntStream(intArray1, intArray2);\n        assertThat(intResult).isEqualTo(expectedIntArray);\n    }\n\n    @Test\n    public void givenTwoArrays_whenConcatWithCommonsLang_thenGetExpectedResult() {\n        String[] result = ArrayUtils.addAll(strArray1, strArray2);\n        assertThat(result).isEqualTo(expectedStringArray);\n\n        int[] intResult = ArrayUtils.addAll(intArray1, intArray2);\n        assertThat(intResult).isEqualTo(expectedIntArray);\n    }\n\n    @Test\n    public void givenTwoStringArrays_whenConcatWithGuava_thenGetExpectedResult() {\n        String[] result = ObjectArrays.concat(strArray1, strArray2, String.class);\n        assertThat(result).isEqualTo(expectedStringArray);\n    }\n\n    @Test\n    public void givenTwoIntArrays_whenConcatWithGuava_thenGetExpectedResult() {\n        int[] intResult = Ints.concat(intArray1, intArray2);\n        assertThat(intResult).isEqualTo(expectedIntArray);\n    }\n}\n"}
{"code_source": "package com.baeldung.array;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class AddElementToEndOfArray {\n\n    public Integer[] addElementUsingArraysCopyOf(Integer[] srcArray, int elementToAdd) {\n        Integer[] destArray = Arrays.copyOf(srcArray, srcArray.length + 1);\n\n        destArray[destArray.length - 1] = elementToAdd;\n        return destArray;\n    }\n\n    public Integer[] addElementUsingArrayList(Integer[] srcArray, int elementToAdd) {\n        Integer[] destArray = new Integer[srcArray.length + 1];\n\n        ArrayList<Integer> arrayList = new ArrayList<>(Arrays.asList(srcArray));\n        arrayList.add(elementToAdd);\n\n        return arrayList.toArray(destArray);\n    }\n\n    public Integer[] addElementUsingSystemArrayCopy(Integer[] srcArray, int elementToAdd) {\n        Integer[] destArray = new Integer[srcArray.length + 1];\n\n        System.arraycopy(srcArray, 0, destArray, 0, srcArray.length);\n\n        destArray[destArray.length - 1] = elementToAdd;\n\n        return destArray;\n    }\n\n}\n", "test_case": "package com.baeldung.array;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertArrayEquals;\n\npublic class AddElementToEndOfArrayUnitTest {\n\n    AddElementToEndOfArray addElementToEndOfArray;\n\n    @Before\n    public void init() {\n        addElementToEndOfArray = new AddElementToEndOfArray();\n    }\n\n    @Test\n    public void givenSourceArrayAndElement_whenAddElementUsingArraysCopyIsInvoked_thenNewElementMustBeAdded() {\n        Integer[] sourceArray = {1, 2, 3, 4};\n        int elementToAdd = 5;\n\n        Integer[] destArray = addElementToEndOfArray.addElementUsingArraysCopyOf(sourceArray, elementToAdd);\n\n        Integer[] expectedArray = {1, 2, 3, 4, 5};\n        assertArrayEquals(expectedArray, destArray);\n    }\n\n    @Test\n    public void givenSourceArrayAndElement_whenAddElementUsingArrayListIsInvoked_thenNewElementMustBeAdded() {\n        Integer[] sourceArray = {1, 2, 3, 4};\n        int elementToAdd = 5;\n\n        Integer[] destArray = addElementToEndOfArray.addElementUsingArrayList(sourceArray, elementToAdd);\n\n        Integer[] expectedArray = {1, 2, 3, 4, 5};\n        assertArrayEquals(expectedArray, destArray);\n    }\n\n    @Test\n    public void givenSourceArrayAndElement_whenAddElementUsingSystemArrayCopyIsInvoked_thenNewElementMustBeAdded() {\n        Integer[] sourceArray = {1, 2, 3, 4};\n        int elementToAdd = 5;\n\n        Integer[] destArray = addElementToEndOfArray.addElementUsingSystemArrayCopy(sourceArray, elementToAdd);\n\n        Integer[] expectedArray = {1, 2, 3, 4, 5};\n        assertArrayEquals(expectedArray, destArray);\n    }\n}\n"}
{"code_source": "package com.baeldung.array;\n\nimport java.util.Arrays;\n\nimport org.apache.commons.lang3.ArrayUtils;\n\npublic class ArrayInitializer {\n\n    static int[] initializeArrayInLoop() {\n        int array[] = new int[5];\n        for (int i = 0; i < array.length; i++) {\n            array[i] = i + 2;\n        }\n        return array;\n    }\n\n    static int[][] initializeMultiDimensionalArrayInLoop() {\n        int array[][] = new int[2][5];\n        for (int i = 0; i < 2; i++) {\n            for (int j = 0; j < 5; j++) {\n                array[i][j] = j + 1;\n            }\n        }\n\n        return array;\n    }\n\n    static String[] initializeArrayAtTimeOfDeclarationMethod1() {\n        String array[] = new String[] { \"Toyota\", \"Mercedes\", \"BMW\", \"Volkswagen\", \"Skoda\" };\n        return array;\n    }\n\n    static int[] initializeArrayAtTimeOfDeclarationMethod2() {\n        int[] array = new int[] { 1, 2, 3, 4, 5 };\n        return array;\n    }\n\n    static int[] initializeArrayAtTimeOfDeclarationMethod3() {\n        int array[] = { 1, 2, 3, 4, 5 };\n        return array;\n    }\n\n    static long[] initializeArrayUsingArraysFill() {\n        long array[] = new long[5];\n        Arrays.fill(array, 30);\n        return array;\n    }\n\n    static int[] initializeArrayRangeUsingArraysFill() {\n        int array[] = new int[5];\n        Arrays.fill(array, 0, 3, -50);\n        return array;\n    }\n\n    static int[] initializeArrayUsingArraysCopy() {\n        int array[] = { 1, 2, 3, 4, 5 };\n        int[] copy = Arrays.copyOf(array, 5);\n        return copy;\n    }\n\n    static int[] initializeLargerArrayUsingArraysCopy() {\n        int array[] = { 1, 2, 3, 4, 5 };\n        int[] copy = Arrays.copyOf(array, 6);\n        return copy;\n    }\n\n    static int[] initializeArrayUsingArraysSetAll() {\n        int[] array = new int[20];\n\n        Arrays.setAll(array, p -> p > 9 ? 0 : p);\n        return array;\n    }\n\n    static char[] initializeArrayUsingArraysUtilClone() {\n        char[] array = new char[] { 'a', 'b', 'c' };\n        return ArrayUtils.clone(array);\n    }\n}\n", "test_case": "package com.baeldung.array;\n\nimport static com.baeldung.array.ArrayInitializer.initializeArrayAtTimeOfDeclarationMethod1;\nimport static com.baeldung.array.ArrayInitializer.initializeArrayAtTimeOfDeclarationMethod2;\nimport static com.baeldung.array.ArrayInitializer.initializeArrayAtTimeOfDeclarationMethod3;\nimport static com.baeldung.array.ArrayInitializer.initializeArrayInLoop;\nimport static com.baeldung.array.ArrayInitializer.initializeArrayRangeUsingArraysFill;\nimport static com.baeldung.array.ArrayInitializer.initializeArrayUsingArraysCopy;\nimport static com.baeldung.array.ArrayInitializer.initializeArrayUsingArraysFill;\nimport static com.baeldung.array.ArrayInitializer.initializeArrayUsingArraysSetAll;\nimport static com.baeldung.array.ArrayInitializer.initializeArrayUsingArraysUtilClone;\nimport static com.baeldung.array.ArrayInitializer.initializeLargerArrayUsingArraysCopy;\nimport static com.baeldung.array.ArrayInitializer.initializeMultiDimensionalArrayInLoop;\nimport static org.junit.Assert.assertArrayEquals;\n\nimport org.junit.Test;\n\npublic class ArrayInitializerUnitTest {\n\n    @Test\n    public void whenInitializeArrayInLoop_thenCorrect() {\n        assertArrayEquals(new int[] { 2, 3, 4, 5, 6 }, initializeArrayInLoop());\n    }\n\n    @Test\n    public void whenInitializeMultiDimensionalArrayInLoop_thenCorrect() {\n        assertArrayEquals(new int[][] { { 1, 2, 3, 4, 5 }, { 1, 2, 3, 4, 5 } }, initializeMultiDimensionalArrayInLoop());\n    }\n\n    @Test\n    public void whenInitializeArrayAtTimeOfDeclarationMethod1_thenCorrect() {\n        assertArrayEquals(new String[] { \"Toyota\", \"Mercedes\", \"BMW\", \"Volkswagen\", \"Skoda\" }, initializeArrayAtTimeOfDeclarationMethod1());\n    }\n\n    @Test\n    public void whenInitializeArrayAtTimeOfDeclarationMethod2_thenCorrect() {\n        assertArrayEquals(new int[] { 1, 2, 3, 4, 5 }, initializeArrayAtTimeOfDeclarationMethod2());\n    }\n\n    @Test\n    public void whenInitializeArrayAtTimeOfDeclarationMethod3_thenCorrect() {\n        assertArrayEquals(new int[] { 1, 2, 3, 4, 5 }, initializeArrayAtTimeOfDeclarationMethod3());\n    }\n\n    @Test\n    public void whenInitializeArrayUsingArraysFill_thenCorrect() {\n        assertArrayEquals(new long[] { 30, 30, 30, 30, 30 }, initializeArrayUsingArraysFill());\n    }\n\n    @Test\n    public void whenInitializeArrayRangeUsingArraysFill_thenCorrect() {\n        assertArrayEquals(new int[] { -50, -50, -50, 0, 0 }, initializeArrayRangeUsingArraysFill());\n    }\n\n    @Test\n    public void whenInitializeArrayRangeUsingArraysCopy_thenCorrect() {\n        assertArrayEquals(new int[] { 1, 2, 3, 4, 5 }, initializeArrayUsingArraysCopy());\n    }\n\n    @Test\n    public void whenInitializeLargerArrayRangeUsingArraysCopy_thenCorrect() {\n        assertArrayEquals(new int[] { 1, 2, 3, 4, 5, 0 }, initializeLargerArrayUsingArraysCopy());\n    }\n\n    @Test\n    public void whenInitializeLargerArrayRangeUsingArraysSetAll_thenCorrect() {\n        assertArrayEquals(new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, initializeArrayUsingArraysSetAll());\n    }\n\n    @Test\n    public void whenInitializeArrayUsingArraysUtilClone_thenCorrect() {\n        assertArrayEquals(new char[] { 'a', 'b', 'c' }, initializeArrayUsingArraysUtilClone());\n    }\n}\n"}
{"code_source": "package com.baeldung.array;\n\nimport org.apache.commons.lang3.ArrayUtils;\n\npublic class RemoveElementFromAnArray {\n\n    public int[] removeAnElementWithAGivenIndex(int[] array, int index) {\n        return ArrayUtils.remove(array, index);\n    }\n\n    public int[] removeAllElementsWithGivenIndices(int[] array, int... indicies) {\n        return ArrayUtils.removeAll(array, indicies);\n    }\n\n    public int[] removeFirstOccurrenceOfGivenElement(int[] array, int element) {\n        return ArrayUtils.removeElement(array, element);\n    }\n\n    public int[] removeAllGivenElements(int[] array, int... elements) {\n        return ArrayUtils.removeElements(array, elements);\n    }\n\n    public int[] removeAllOccurrencesOfAGivenElement(int[] array, int element) {\n        return ArrayUtils.removeAllOccurences(array, element);\n    }\n\n}\n", "test_case": "package com.baeldung.array;\n\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass RemoveElementFromAnArrayUnitTest {\n\n    private final RemoveElementFromAnArray sut = new RemoveElementFromAnArray();\n    private final int[] inputArray = new int[] { 40, 10, 20, 30, 40, 50 };\n\n    @Test\n    void testRemoveAnElementWithAGivenIndex() {\n        int index = 2;\n        int[] modifiedArray = sut.removeAnElementWithAGivenIndex(inputArray, index);\n\n        assertFalse(ArrayUtils.contains(modifiedArray, inputArray[index]));\n    }\n\n    @Test\n    void testRemoveAllElementsWithGivenIndices() {\n        int first = 0;\n        int last = inputArray.length - 1;\n        int[] modifiedArray = sut.removeAllElementsWithGivenIndices(inputArray, first, last);\n\n        assertFalse(ArrayUtils.contains(modifiedArray, inputArray[first]) && ArrayUtils.contains(modifiedArray, inputArray[last]));\n    }\n\n    @Test\n    void testRemoveElement_WhenArrayIsNull_ThrowsIndexOutOfBoundEx() {\n        int index = 2;\n\n        assertThrows(IndexOutOfBoundsException.class, () -> {\n            sut.removeAnElementWithAGivenIndex(null, index);\n        });\n\n        assertThrows(IndexOutOfBoundsException.class, () -> {\n            sut.removeAllElementsWithGivenIndices(null, index);\n        });\n    }\n\n    @Test\n    void testRemoveFirstOccurrenceOfGivenElement() {\n        int element = 40;\n        int[] modifiedArray = sut.removeFirstOccurrenceOfGivenElement(inputArray, element);\n\n        int indexInInputArray = ArrayUtils.indexOf(inputArray, element);\n        int indexInModifiedArray = ArrayUtils.indexOf(modifiedArray, element);\n        assertFalse(indexInInputArray == indexInModifiedArray);\n    }\n\n    @Test\n    void testRemoveAllGivenElements() {\n        int duplicateElement = 40;\n        int[] elements = new int[] { duplicateElement, 10, 50 };\n        int[] modifiedArray = sut.removeAllGivenElements(inputArray, elements);\n\n        assertTrue(ArrayUtils.contains(modifiedArray, duplicateElement));\n        assertFalse(ArrayUtils.contains(modifiedArray, elements[1]));\n        assertFalse(ArrayUtils.contains(modifiedArray, elements[2]));\n    }\n\n    @Test\n    void testRemoveAllOccurrencesOfAGivenElement() {\n        int element = 40;\n        int[] modifiedArray = sut.removeAllOccurrencesOfAGivenElement(inputArray, element);\n\n        assertFalse(ArrayUtils.contains(modifiedArray, element));\n    }\n\n    @Test\n    void testRemoveElement_WhenArrayIsNull_ReturnsNull() {\n        int element = 20;\n\n        assertEquals(null, sut.removeFirstOccurrenceOfGivenElement(null, element));\n        assertEquals(null, sut.removeAllGivenElements(null, element));\n        assertEquals(null, sut.removeAllOccurrencesOfAGivenElement(null, element));\n\n    }\n\n}\n"}
{"code_source": "package com.baeldung.array.operations;\n\nimport org.apache.commons.lang3.ArrayUtils;\n\nimport java.lang.reflect.Array;\nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.function.IntPredicate;\nimport java.util.function.Predicate;\nimport java.util.stream.Stream;\n\npublic class ArrayOperations {\n\n    // Get the first and last item of an array\n    public static <T> T getFirstObject(T[] array) {\n        return array[0];\n    }\n\n    public static int getFirstInt(int[] array) {\n        return array[0];\n    }\n\n    public static <T> T getLastObject(T[] array) {\n        return array[array.length - 1];\n    }\n\n    public static int getLastInt(int[] array) {\n        return array[array.length - 1];\n    }\n\n    // Append a new item to an array\n    public static <T> T[] appendObject(T[] array, T newItem) {\n        return ArrayUtils.add(array, newItem);\n    }\n\n    public static int[] appendInt(int[] array, int newItem) {\n        int[] newArray = Arrays.copyOf(array, array.length + 1);\n        newArray[newArray.length - 1] = newItem;\n        return newArray;\n    }\n\n    public static int[] appendIntWithUtils(int[] array, int newItem) {\n        return ArrayUtils.add(array, newItem);\n    }\n\n    // Compare two arrays to check if they have the same elements\n    public static <T> boolean compareObjectArrays(T[] array1, T[] array2) {\n        return Arrays.equals(array1, array2);\n    }\n\n    public static boolean compareIntArrays(int[] array1, int[] array2) {\n        return Arrays.equals(array1, array2);\n    }\n\n    // Deep Compare (for nested arrays)\n    public static <T> boolean deepCompareObjectArrayUsingArrays(T[][] array1, T[][] array2) {\n        // We can use Objects.deepEquals for a broader approach\n        return Arrays.deepEquals(array1, array2);\n    }\n\n    public static boolean deepCompareIntArrayUsingArrays(int[][] array1, int[][] array2) {\n        return Arrays.deepEquals(array1, array2);\n    }\n\n    // Check if array is empty\n    public static <T> boolean isEmptyObjectArrayUsingUtils(T[] array1) {\n        return ArrayUtils.isEmpty(array1);\n    }\n\n    public static boolean isEmptyIntArrayUsingUtils(int[] array1) {\n        return ArrayUtils.isEmpty(array1);\n    }\n\n    // Remove duplicates\n    public static Integer[] removeDuplicateObjects(Integer[] array) {\n        // We can use other ways of converting the array to a set too\n        Set<Integer> set = new HashSet<>(Arrays.asList(array));\n        return set.toArray(new Integer[set.size()]);\n    }\n\n    public static int[] removeDuplicateInts(int[] array) {\n        // Box\n        Integer[] list = ArrayUtils.toObject(array);\n        // Remove duplicates\n        Set<Integer> set = new HashSet<Integer>(Arrays.asList(list));\n        // Create array and unbox\n        return ArrayUtils.toPrimitive(set.toArray(new Integer[set.size()]));\n    }\n\n    // Remove duplicates preserving the order\n    public static Integer[] removeDuplicateWithOrderObjectArray(Integer[] array) {\n        // We can use other ways of converting the array to a set too\n        Set<Integer> set = new LinkedHashSet<>(Arrays.asList(array));\n        return set.toArray(new Integer[set.size()]);\n    }\n\n    public static int[] removeDuplicateWithOrderIntArray(int[] array) {\n        // Box\n        Integer[] list = ArrayUtils.toObject(array);\n        // Remove duplicates\n        Set<Integer> set = new LinkedHashSet<Integer>(Arrays.asList(list));\n        // Create array and unbox\n        return ArrayUtils.toPrimitive(set.toArray(new Integer[set.size()]));\n    }\n\n    // Print an array\n    public static String printObjectArray(Integer[] array) {\n        return ArrayUtils.toString(array);\n    }\n\n    public static String printObjectArray(Integer[][] array) {\n        return ArrayUtils.toString(array);\n    }\n\n    public static String printIntArray(int[] array) {\n        return ArrayUtils.toString(array);\n    }\n\n    public static String printIntArray(int[][] array) {\n        return ArrayUtils.toString(array);\n    }\n\n    // Box or Unbox values\n    public static int[] unboxIntegerArray(Integer[] array) {\n        return ArrayUtils.toPrimitive(array);\n    }\n\n    public static Integer[] boxIntArray(int[] array) {\n        return ArrayUtils.toObject(array);\n    }\n\n    // Map array values\n    @SuppressWarnings(\"unchecked\")\n    public static <T, U> U[] mapObjectArray(T[] array, Function<T, U> function, Class<U> targetClazz) {\n        U[] newArray = (U[]) Array.newInstance(targetClazz, array.length);\n        for (int i = 0; i < array.length; i++) {\n            newArray[i] = function.apply(array[i]);\n        }\n        return newArray;\n    }\n\n    public static String[] mapIntArrayToString(int[] array) {\n        return Arrays.stream(array)\n            .mapToObj(value -> String.format(\"Value: %s\", value))\n            .toArray(String[]::new);\n    }\n\n    // Filter array values\n    public static Integer[] filterObjectArray(Integer[] array, Predicate<Integer> predicate) {\n        return Arrays.stream(array)\n            .filter(predicate)\n            .toArray(Integer[]::new);\n    }\n\n    public static int[] filterIntArray(int[] array, IntPredicate predicate) {\n        return Arrays.stream(array)\n            .filter(predicate)\n            .toArray();\n    }\n\n    // Insert item between others\n    public static int[] insertBetweenIntArray(int[] array, int... values) {\n        return ArrayUtils.insert(2, array, values);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T[] insertBetweenObjectArray(T[] array, T... values) {\n        return ArrayUtils.insert(2, array, values);\n    }\n\n    // Shuffling arrays\n    public static int[] shuffleIntArray(int[] array) {\n        // we create a different array instance for testing purposes\n        int[] shuffled = Arrays.copyOf(array, array.length);\n        ArrayUtils.shuffle(shuffled);\n        return shuffled;\n    }\n\n    public static <T> T[] shuffleObjectArray(T[] array) {\n        // we create a different array instance for testing purposes\n        T[] shuffled = Arrays.copyOf(array, array.length);\n        ArrayUtils.shuffle(shuffled);\n        return shuffled;\n    }\n\n    // Get random number\n    public static int getRandomFromIntArray(int[] array) {\n        return array[new Random().nextInt(array.length)];\n    }\n\n    public static <T> T getRandomFromObjectArray(T[] array) {\n        return array[new Random().nextInt(array.length)];\n    }\n\n    public static Integer[] intersectionSimple(final Integer[] a, final Integer[] b) {\n        return Stream.of(a)\n            .filter(Arrays.asList(b)::contains)\n            .toArray(Integer[]::new);\n    }\n\n    public static Integer[] intersectionSet(final Integer[] a, final Integer[] b) {\n        return Stream.of(a)\n            .filter(Arrays.asList(b)::contains)\n            .distinct()\n            .toArray(Integer[]::new);\n    }\n\n    public static Integer[] intersectionMultiSet(final Integer[] a, final Integer[] b) {\n        return Stream.of(a)\n            .filter(new LinkedList<>(Arrays.asList(b))::remove)\n            .toArray(Integer[]::new);\n    }\n\n    public static Integer[] addElementUsingPureJava(Integer[] srcArray, int elementToAdd) {\n        Integer[] destArray = new Integer[srcArray.length + 1];\n\n        for (int i = 0; i < srcArray.length; i++) {\n            destArray[i] = srcArray[i];\n        }\n\n        destArray[destArray.length - 1] = elementToAdd;\n        return destArray;\n    }\n\n    public static int[] insertAnElementAtAGivenIndex(final int[] srcArray, int index, int newElement) {\n        int[] destArray = new int[srcArray.length + 1];\n        int j = 0;\n        for (int i = 0; i < destArray.length - 1; i++) {\n\n            if (i == index) {\n                destArray[i] = newElement;\n            } else {\n                destArray[i] = srcArray[j];\n                j++;\n            }\n        }\n        return destArray;\n    }\n}\n", "test_case": "package com.baeldung.array.operations;\n\nimport java.util.Arrays;\nimport org.assertj.core.api.Condition;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.Assert.assertArrayEquals;\n\npublic class ArrayOperationsUnitTest {\n\n    private Integer[] defaultObjectArray;\n    private int[] defaultIntArray;\n    private Integer[][] defaultJaggedObjectArray;\n    private int[][] defaultJaggedIntArray;\n\n    @BeforeEach\n    public void setupDefaults() {\n        defaultObjectArray = new Integer[] { 3, 5, 2, 5, 14, 4 };\n        defaultIntArray = new int[] { 3, 5, 2, 5, 14, 4 };\n        defaultJaggedObjectArray = new Integer[][] { { 1, 3 }, { 5 }, {} };\n        defaultJaggedIntArray = new int[][] { { 1, 3 }, { 5 }, {} };\n    }\n\n    // Get the first and last item of an array\n    @Test\n    public void whenGetFirstObjectCalled_thenReturnFirstItemOfArray() {\n        Integer output = ArrayOperations.getFirstObject(defaultObjectArray);\n\n        assertThat(output).isEqualTo(3);\n    }\n\n    @Test\n    public void whenGetFirstIntCalled_thenReturnFirstItemOfArray() {\n        int output = ArrayOperations.getFirstInt(defaultIntArray);\n\n        assertThat(output).isEqualTo(3);\n    }\n\n    @Test\n    public void whenGetLastObjectCalled_thenReturnLastItemOfArray() {\n        Integer output = ArrayOperations.getLastObject(defaultObjectArray);\n\n        assertThat(output).isEqualTo(4);\n    }\n\n    @Test\n    public void whenGetLastIntCalled_thenReturnLastItemOfArray() {\n        int output = ArrayOperations.getLastInt(defaultIntArray);\n\n        assertThat(output).isEqualTo(4);\n    }\n\n    // Append a new item to an array\n    @Test\n    public void whenAppendObject_thenReturnArrayWithExtraItem() {\n        Integer[] output = ArrayOperations.appendObject(defaultObjectArray, 7);\n\n        assertThat(output).endsWith(4, 7)\n            .hasSize(7);\n    }\n\n    @Test\n    public void whenAppendInt_thenReturnArrayWithExtraItem() {\n        int[] output = ArrayOperations.appendInt(defaultIntArray, 7);\n        int[] outputUsingUtils = ArrayOperations.appendIntWithUtils(defaultIntArray, 7);\n\n        assertThat(output).endsWith(4, 7)\n            .hasSize(7);\n        assertThat(outputUsingUtils).endsWith(4, 7)\n            .hasSize(7);\n    }\n\n    // Compare two arrays to check if they have the same elements\n    @Test\n    public void whenCompareObjectArrays_thenReturnBoolean() {\n        Integer[] array2 = { 8, 7, 6 };\n        Integer[] sameArray = { 3, 5, 2, 5, 14, 4 };\n        boolean output = ArrayOperations.compareObjectArrays(defaultObjectArray, array2);\n        boolean output2 = ArrayOperations.compareObjectArrays(defaultObjectArray, sameArray);\n\n        assertThat(output).isFalse();\n        assertThat(output2).isTrue();\n    }\n\n    @Test\n    public void whenCompareIntArrays_thenReturnBoolean() {\n        int[] array2 = { 8, 7, 6 };\n        int[] sameArray = { 3, 5, 2, 5, 14, 4 };\n        boolean output = ArrayOperations.compareIntArrays(defaultIntArray, array2);\n        boolean output2 = ArrayOperations.compareIntArrays(defaultIntArray, sameArray);\n\n        assertThat(output).isFalse();\n        assertThat(output2).isTrue();\n    }\n\n    // Deep compare\n    @Test\n    public void whenDeepCompareObjectArrays_thenReturnBoolean() {\n        Integer[][] sameArray = { { 1, 3 }, { 5 }, {} };\n        Integer[][] array2 = { { 1, 3 }, { 5 }, { 3 } };\n        boolean output = ArrayOperations.deepCompareObjectArrayUsingArrays(defaultJaggedObjectArray, array2);\n        boolean output2 = ArrayOperations.deepCompareObjectArrayUsingArrays(defaultJaggedObjectArray, sameArray);\n        // Because arrays are Objects, we could wrongly use the non-deep approach\n        boolean outputUsingNonDeep = ArrayOperations.compareObjectArrays(defaultJaggedObjectArray, sameArray);\n\n        assertThat(output).isFalse();\n        assertThat(output2).isTrue();\n        // This is not what we would expect!\n        assertThat(outputUsingNonDeep).isFalse();\n    }\n\n    @Test\n    public void whenDeepCompareIntArrays_thenReturnBoolean() {\n        int[][] sameArray = { { 1, 3 }, { 5 }, {} };\n        int[][] array2 = { { 1, 3 }, { 5 }, { 3 } };\n        boolean output = ArrayOperations.deepCompareIntArrayUsingArrays(defaultJaggedIntArray, array2);\n        boolean output2 = ArrayOperations.deepCompareIntArrayUsingArrays(defaultJaggedIntArray, sameArray);\n\n        assertThat(output).isFalse();\n        assertThat(output2).isTrue();\n    }\n\n    // Empty Check\n    @Test\n    public void whenIsEmptyObjectArray_thenReturnBoolean() {\n        Integer[] array2 = {};\n        Integer[] array3 = null;\n        Integer[] array4 = { null, null, null };\n        Integer[] array5 = { null };\n        Integer[][] array6 = { {}, {}, {} };\n        boolean output = ArrayOperations.isEmptyObjectArrayUsingUtils(defaultObjectArray);\n        boolean output2 = ArrayOperations.isEmptyObjectArrayUsingUtils(array2);\n        boolean output3 = ArrayOperations.isEmptyObjectArrayUsingUtils(array3);\n        boolean output4 = ArrayOperations.isEmptyObjectArrayUsingUtils(array4);\n        boolean output5 = ArrayOperations.isEmptyObjectArrayUsingUtils(array5);\n        boolean output6 = ArrayOperations.isEmptyObjectArrayUsingUtils(array6);\n\n        assertThat(output).isFalse();\n        assertThat(output2).isTrue();\n        assertThat(output3).isTrue();\n        // Mind these edge cases!\n        assertThat(output4).isFalse();\n        assertThat(output5).isFalse();\n        assertThat(output6).isFalse();\n    }\n\n    @Test\n    public void whenIsEmptyIntArray_thenReturnBoolean() {\n        int[] array2 = {};\n        boolean output = ArrayOperations.isEmptyIntArrayUsingUtils(defaultIntArray);\n        boolean output2 = ArrayOperations.isEmptyIntArrayUsingUtils(array2);\n\n        assertThat(output).isFalse();\n        assertThat(output2).isTrue();\n    }\n\n    // Remove Duplicates\n    @Test\n    public void whenRemoveDuplicateObjectArray_thenReturnArrayWithNoDuplicates() {\n        Integer[] output = ArrayOperations.removeDuplicateObjects(defaultObjectArray);\n\n        assertThat(output).containsOnlyOnce(5)\n            .hasSize(5)\n            .doesNotHaveDuplicates();\n    }\n\n    @Test\n    public void whenRemoveDuplicateIntArray_thenReturnArrayWithNoDuplicates() {\n        int[] output = ArrayOperations.removeDuplicateInts(defaultIntArray);\n\n        assertThat(output).containsOnlyOnce(5)\n            .hasSize(5)\n            .doesNotHaveDuplicates();\n    }\n\n    // Remove Duplicates Preserving order\n    @Test\n    public void whenRemoveDuplicatePreservingOrderObjectArray_thenReturnArrayWithNoDuplicates() {\n        Integer[] array2 = { 3, 5, 2, 14, 4 };\n        Integer[] output = ArrayOperations.removeDuplicateWithOrderObjectArray(defaultObjectArray);\n\n        assertThat(output).containsOnlyOnce(5)\n            .hasSize(5)\n            .containsExactly(array2);\n    }\n\n    @Test\n    public void whenRemoveDuplicatePreservingOrderIntArray_thenReturnArrayWithNoDuplicates() {\n        int[] array2 = { 3, 5, 2, 14, 4 };\n        int[] output = ArrayOperations.removeDuplicateWithOrderIntArray(defaultIntArray);\n\n        assertThat(output).containsOnlyOnce(5)\n            .hasSize(5)\n            .containsExactly(array2);\n    }\n\n    // Print\n    @Test\n    public void whenPrintObjectArray_thenReturnString() {\n        String output = ArrayOperations.printObjectArray(defaultObjectArray);\n        String jaggedOutput = ArrayOperations.printObjectArray(defaultJaggedObjectArray);\n        // Comparing to Arrays output:\n        String wrongArraysOutput = Arrays.toString(defaultJaggedObjectArray);\n        String differentFormatArraysOutput = Arrays.toString(defaultObjectArray);\n        // We should use Arrays.deepToString for jagged arrays\n        String differentFormatJaggedArraysOutput = Arrays.deepToString(defaultJaggedObjectArray);\n\n        assertThat(output).isEqualTo(\"{3,5,2,5,14,4}\");\n        assertThat(jaggedOutput).isEqualTo(\"{{1,3},{5},{}}\");\n        assertThat(differentFormatArraysOutput).isEqualTo(\"[3, 5, 2, 5, 14, 4]\");\n        assertThat(wrongArraysOutput).contains(\"[[Ljava.lang.Integer;@\");\n        assertThat(differentFormatJaggedArraysOutput).contains(\"[[1, 3], [5], []]\");\n    }\n\n    @Test\n    public void whenPrintIntArray_thenReturnString() {\n        String output = ArrayOperations.printIntArray(defaultIntArray);\n        String jaggedOutput = ArrayOperations.printIntArray(defaultJaggedIntArray);\n        // Comparing to Arrays output:\n        String wrongArraysOutput = Arrays.toString(defaultJaggedObjectArray);\n        String differentFormatArraysOutput = Arrays.toString(defaultObjectArray);\n\n        assertThat(output).isEqualTo(\"{3,5,2,5,14,4}\");\n        assertThat(jaggedOutput).isEqualTo(\"{{1,3},{5},{}}\");\n        assertThat(differentFormatArraysOutput).isEqualTo(\"[3, 5, 2, 5, 14, 4]\");\n        assertThat(wrongArraysOutput).contains(\"[[Ljava.lang.Integer;@\");\n    }\n\n    // Box and unbox\n    @Test\n    public void whenUnboxObjectArray_thenReturnPrimitiveArray() {\n        int[] output = ArrayOperations.unboxIntegerArray(defaultObjectArray);\n\n        assertThat(output).containsExactly(defaultIntArray);\n    }\n\n    @Test\n    public void henBoxPrimitiveArray_thenReturnObjectArray() {\n        Integer[] output = ArrayOperations.boxIntArray(defaultIntArray);\n\n        assertThat(output).containsExactly(defaultObjectArray);\n    }\n\n    // Map values\n    @Test\n    public void whenMapMultiplyingObjectArray_thenReturnMultipliedArray() {\n        Integer[] multipliedExpectedArray = new Integer[] { 6, 10, 4, 10, 28, 8 };\n        Integer[] output = ArrayOperations.mapObjectArray(defaultObjectArray, value -> value * 2, Integer.class);\n\n        assertThat(output).containsExactly(multipliedExpectedArray);\n    }\n\n    @Test\n    public void whenMapDividingObjectArray_thenReturnDividedArray() {\n        Double[] multipliedExpectedArray = new Double[] { 1.5, 2.5, 1.0, 2.5, 7.0, 2.0 };\n        Double[] output = ArrayOperations.mapObjectArray(defaultObjectArray, value -> value / 2.0, Double.class);\n\n        assertThat(output).containsExactly(multipliedExpectedArray);\n    }\n\n    @Test\n    public void whenMapIntArrayToString_thenReturnArray() {\n        String[] expectedArray = new String[] { \"Value: 3\", \"Value: 5\", \"Value: 2\", \"Value: 5\", \"Value: 14\", \"Value: 4\" };\n        String[] output = ArrayOperations.mapIntArrayToString(defaultIntArray);\n\n        assertThat(output).containsExactly(expectedArray);\n    }\n\n    // Filter values\n    @Test\n    public void whenFilterObjectArray_thenReturnFilteredArray() {\n        Integer[] multipliedExpectedArray = new Integer[] { 2, 14, 4 };\n        Integer[] output = ArrayOperations.filterObjectArray(defaultObjectArray, value -> value % 2 == 0);\n\n        assertThat(output).containsExactly(multipliedExpectedArray);\n    }\n\n    @Test\n    public void whenFilterIntArray_thenReturnFilteredArray() {\n        int[] expectedArray = new int[] { 2, 14, 4 };\n        int[] output = ArrayOperations.filterIntArray(defaultIntArray, value -> (int) value % 2 == 0);\n\n        assertThat(output).containsExactly(expectedArray);\n    }\n\n    // Insert between\n    @Test\n    public void whenInsertBetweenIntArrayToString_thenReturnNewArray() {\n        int[] expectedArray = { 3, 5, 77, 88, 2, 5, 14, 4 };\n        int[] output = ArrayOperations.insertBetweenIntArray(defaultIntArray, 77, 88);\n\n        assertThat(output).containsExactly(expectedArray);\n    }\n\n    @Test\n    public void whenInsertBetweenObjectArrayToString_thenReturnNewArray() {\n        Integer[] expectedArray = { 3, 5, 77, 99, 2, 5, 14, 4 };\n        Integer[] output = ArrayOperations.insertBetweenObjectArray(defaultObjectArray, 77, 99);\n\n        assertThat(output).containsExactly(expectedArray);\n    }\n\n    // Shuffle between\n    @Test\n    public void whenShufflingIntArraySeveralTimes_thenAtLeastOneWithDifferentOrder() {\n        int[] output = ArrayOperations.shuffleIntArray(defaultIntArray);\n        int[] output2 = ArrayOperations.shuffleIntArray(defaultIntArray);\n        int[] output3 = ArrayOperations.shuffleIntArray(defaultIntArray);\n        int[] output4 = ArrayOperations.shuffleIntArray(defaultIntArray);\n        int[] output5 = ArrayOperations.shuffleIntArray(defaultIntArray);\n        int[] output6 = ArrayOperations.shuffleIntArray(defaultIntArray);\n\n        Condition<int[]> atLeastOneArraysIsNotEqual = new Condition<int[]>(\"at least one output should be different (order-wise)\") {\n            @Override\n            public boolean matches(int[] value) {\n                return !Arrays.equals(value, output) || !Arrays.equals(value, output2) || !Arrays.equals(value, output3) || !Arrays.equals(value, output4) || !Arrays.equals(value, output5) || !Arrays.equals(value, output6);\n            }\n        };\n\n        assertThat(defaultIntArray).has(atLeastOneArraysIsNotEqual);\n    }\n\n    @Test\n    public void whenShufflingObjectArraySeveralTimes_thenAtLeastOneWithDifferentOrder() {\n        Integer[] output = ArrayOperations.shuffleObjectArray(defaultObjectArray);\n        Integer[] output2 = ArrayOperations.shuffleObjectArray(defaultObjectArray);\n        Integer[] output3 = ArrayOperations.shuffleObjectArray(defaultObjectArray);\n        Integer[] output4 = ArrayOperations.shuffleObjectArray(defaultObjectArray);\n        Integer[] output5 = ArrayOperations.shuffleObjectArray(defaultObjectArray);\n        Integer[] output6 = ArrayOperations.shuffleObjectArray(defaultObjectArray);\n\n        Condition<Integer[]> atLeastOneArraysIsNotEqual = new Condition<Integer[]>(\"at least one output should be different (order-wise)\") {\n            @Override\n            public boolean matches(Integer[] value) {\n                return !Arrays.equals(value, output) || !Arrays.equals(value, output2) || !Arrays.equals(value, output3) || !Arrays.equals(value, output4) || !Arrays.equals(value, output5) || !Arrays.equals(value, output6);\n            }\n        };\n\n        assertThat(defaultObjectArray).has(atLeastOneArraysIsNotEqual);\n    }\n\n    // Get random item\n    @Test\n    public void whenGetRandomFromIntArrayToString_thenReturnItemContainedInArray() {\n        int output = ArrayOperations.getRandomFromIntArray(defaultIntArray);\n\n        assertThat(defaultIntArray).contains(output);\n    }\n\n    @Test\n    public void whenGetRandomFromObjectArrayToString_thenReturnItemContainedInArray() {\n        Integer output = ArrayOperations.getRandomFromObjectArray(defaultObjectArray);\n\n        assertThat(defaultObjectArray).contains(output);\n    }\n\n    @Test\n    public void givenSourceArrayAndElement_whenAddElementUsingPureJavaIsInvoked_thenNewElementMustBeAdded() {\n        Integer[] sourceArray = { 1, 2, 3, 4 };\n        int elementToAdd = 5;\n\n        Integer[] destArray = ArrayOperations.addElementUsingPureJava(sourceArray, elementToAdd);\n\n        Integer[] expectedArray = { 1, 2, 3, 4, 5 };\n        assertArrayEquals(expectedArray, destArray);\n    }\n\n    @Test\n    public void whenInsertAnElementAtAGivenIndexCalled_thenShiftTheFollowingElementsAndInsertTheElementInArray() {\n        int[] expectedArray = { 1, 4, 2, 3, 0 };\n        int[] anArray = new int[4];\n        anArray[0] = 1;\n        anArray[1] = 2;\n        anArray[2] = 3;\n        int[] outputArray = ArrayOperations.insertAnElementAtAGivenIndex(anArray, 1, 4);\n\n        assertThat(outputArray).containsExactly(expectedArray);\n    }\n}\n"}
{"code_source": "package com.baeldung.arraylist.operations;\n\nimport java.util.ArrayList;\n\npublic class ArrayListOperations {\n\n    public static Integer getAnIntegerElement(ArrayList<Integer> anArrayList, int index) {\n        return anArrayList.get(index);\n    }\n\n    public static void modifyAnIntegerElement(ArrayList<Integer> anArrayList, int index, Integer newElement) {\n        anArrayList.set(index, newElement);\n    }\n\n    public static void appendAnIntegerElement(ArrayList<Integer> anArrayList, Integer newElement) {\n        anArrayList.add(newElement);\n    }\n\n    public static void insertAnIntegerElementAtIndex(ArrayList<Integer> anArrayList, int index, Integer newElement) {\n        anArrayList.add(index, newElement);\n    }\n\n}\n", "test_case": "package com.baeldung.arraylist.operations;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class ArrayListOperationsUnitTest {\n\n    private ArrayList<Integer> anArrayList;\n\n    @BeforeEach\n    public void setupDefaults() {\n        anArrayList = new ArrayList<>();\n        anArrayList.add(2);\n        anArrayList.add(3);\n        anArrayList.add(4);\n    }\n\n    @Test\n    public void whenGetAnIntegerElementCalled_thenReturnTheIntegerElement() {\n        Integer output = ArrayListOperations.getAnIntegerElement(anArrayList, 1);\n\n        assertThat(output).isEqualTo(3);\n    }\n\n    @Test\n    public void whenModifyAnIntegerElementCalled_thenModifyTheIntegerElement() {\n        ArrayListOperations.modifyAnIntegerElement(anArrayList, 2, 5);\n        Integer output = ArrayListOperations.getAnIntegerElement(anArrayList, 2);\n\n        assertThat(output).isEqualTo(5);\n    }\n\n    @Test\n    public void whenAppendAnIntegerElementCalled_thenTheIntegerElementIsAppendedToArrayList() {\n        ArrayListOperations.appendAnIntegerElement(anArrayList, 6);\n        Integer output = ArrayListOperations.getAnIntegerElement(anArrayList, anArrayList.size() - 1);\n\n        assertThat(output).isEqualTo(6);\n    }\n\n    @Test\n    public void whenInsertAnIntegerAtIndexCalled_thenTheIntegerElementIsInseredToArrayList() {\n        ArrayListOperations.insertAnIntegerElementAtIndex(anArrayList, 1, 10);\n        Integer output = ArrayListOperations.getAnIntegerElement(anArrayList, 1);\n\n        assertThat(output).isEqualTo(10);\n    }\n}"}
{"code_source": "package com.baeldung.array;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.stream.IntStream;\n\nimport org.apache.commons.lang3.ArrayUtils;\n\nimport com.google.common.collect.Lists;\n\npublic class ArrayInverter {\n\n    public void invertUsingFor(Object[] array) {\n        for (int i = 0; i < array.length / 2; i++) {\n            Object temp = array[i];\n            array[i] = array[array.length - 1 - i];\n            array[array.length - 1 - i] = temp;\n        }\n    }\n\n    public void invertUsingCollectionsReverse(Object[] array) {\n        List<Object> list = Arrays.asList(array);\n        Collections.reverse(list);\n    }\n\n    public Object[] invertUsingStreams(final Object[] array) {\n        return IntStream.rangeClosed(1, array.length)\n            .mapToObj(i -> array[array.length - i])\n            .toArray();\n    }\n\n    public void invertUsingCommonsLang(Object[] array) {\n        ArrayUtils.reverse(array);\n    }\n\n    public Object[] invertUsingGuava(Object[] array) {\n        List<Object> list = Arrays.asList(array);\n        List<Object> reverted = Lists.reverse(list);\n        return reverted.toArray();\n    }\n\n}\n", "test_case": "package com.baeldung.array;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.Test;\n\npublic class ArrayInverterUnitTest {\n\n    private String[] fruits = { \"apples\", \"tomatoes\", \"bananas\", \"guavas\", \"pineapples\", \"oranges\" };\n\n    @Test\n    public void invertArrayWithForLoop() {\n        ArrayInverter inverter = new ArrayInverter();\n        inverter.invertUsingFor(fruits);\n\n        assertThat(new String[] { \"oranges\", \"pineapples\", \"guavas\", \"bananas\", \"tomatoes\", \"apples\" }).isEqualTo(fruits);\n    }\n\n    @Test\n    public void invertArrayWithCollectionsReverse() {\n        ArrayInverter inverter = new ArrayInverter();\n        inverter.invertUsingCollectionsReverse(fruits);\n\n        assertThat(new String[] { \"oranges\", \"pineapples\", \"guavas\", \"bananas\", \"tomatoes\", \"apples\" }).isEqualTo(fruits);\n    }\n\n    @Test\n    public void invertArrayWithStreams() {\n        ArrayInverter inverter = new ArrayInverter();\n\n        assertThat(new String[] { \"oranges\", \"pineapples\", \"guavas\", \"bananas\", \"tomatoes\", \"apples\" }).isEqualTo(inverter.invertUsingStreams(fruits));\n    }\n\n    @Test\n    public void invertArrayWithCommonsLang() {\n        ArrayInverter inverter = new ArrayInverter();\n        inverter.invertUsingCommonsLang(fruits);\n\n        assertThat(new String[] { \"oranges\", \"pineapples\", \"guavas\", \"bananas\", \"tomatoes\", \"apples\" }).isEqualTo(fruits);\n    }\n\n    @Test\n    public void invertArrayWithGuava() {\n        ArrayInverter inverter = new ArrayInverter();\n\n        assertThat(new String[] { \"oranges\", \"pineapples\", \"guavas\", \"bananas\", \"tomatoes\", \"apples\" }).isEqualTo(inverter.invertUsingGuava(fruits));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.array;\n\nimport java.util.Comparator;\n\npublic class SortedArrayChecker {\n\n    boolean isSorted(int[] array, int length) {\n        if (array == null || length < 2)\n            return true;\n\n        if (array[length - 2] > array[length - 1])\n            return false;\n\n        return isSorted(array, length - 1);\n    }\n\n    boolean isSorted(int[] array) {\n        for (int i = 0; i < array.length - 1; i++) {\n            if (array[i] > array[i + 1])\n                return false;\n        }\n\n        return true;\n    }\n\n    boolean isSorted(Comparable[] array, int length) {\n        if (array == null || length < 2)\n            return true;\n\n        if (array[length - 2].compareTo(array[length - 1]) > 0)\n            return false;\n\n        return isSorted(array, length - 1);\n    }\n\n    boolean isSorted(Comparable[] array) {\n        for (int i = 0; i < array.length - 1; ++i) {\n            if (array[i].compareTo(array[i + 1]) > 0)\n                return false;\n        }\n\n        return true;\n    }\n\n    boolean isSorted(Object[] array, Comparator comparator) {\n        for (int i = 0; i < array.length - 1; ++i) {\n            if (comparator.compare(array[i], (array[i + 1])) > 0)\n                return false;\n        }\n\n        return true;\n    }\n\n    boolean isSorted(Object[] array, Comparator comparator, int length) {\n        if (array == null || length < 2)\n            return true;\n\n        if (comparator.compare(array[length - 2], array[length - 1]) > 0)\n            return false;\n\n        return isSorted(array, comparator, length - 1);\n    }\n}\n", "test_case": "package com.baeldung.array;\n\nimport com.baeldung.sort.Employee;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.util.Comparator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class SortedArrayCheckerUnitTest {\n    private static final int[] INTEGER_SORTED = {1, 3, 5, 7, 9};\n    private static final int[] INTEGER_NOT_SORTED = {1, 3, 11, 7};\n\n    private static final String[] STRING_SORTED = {\"abc\", \"cde\", \"fgh\"};\n    private static final String[] STRING_NOT_SORTED = {\"abc\", \"fgh\", \"cde\", \"ijk\"};\n\n    private static final Employee[] EMPLOYEES_SORTED_BY_NAME = {\n            new Employee(1, \"Carlos\", 26),\n            new Employee(2, \"Daniel\", 31),\n            new Employee(3, \"Marta\", 27)};\n\n    private static final Employee[] EMPLOYEES_NOT_SORTED_BY_NAME = {\n            new Employee(1, \"Daniel\", 31),\n            new Employee(2, \"Carlos\", 26),\n            new Employee(3, \"Marta\", 27)};\n\n    private static final Employee[] EMPLOYEES_SORTED_BY_AGE = {\n            new Employee(1, \"Carlos\", 26),\n            new Employee(2, \"Marta\", 27),\n            new Employee(3, \"Daniel\", 31)};\n\n    private static final Employee[] EMPLOYEES_NOT_SORTED_BY_AGE = {\n            new Employee(1, \"Marta\", 27),\n            new Employee(2, \"Carlos\", 26),\n            new Employee(3, \"Daniel\", 31)};\n\n    private SortedArrayChecker sortedArrayChecker;\n\n    @Before\n    public void setup() {\n        sortedArrayChecker = new SortedArrayChecker();\n    }\n\n    @Test\n    public void givenIntegerArray_thenReturnIfItIsSortedOrNot() {\n        assertThat(sortedArrayChecker.isSorted(INTEGER_SORTED)).isEqualTo(true);\n        assertThat(sortedArrayChecker.isSorted(INTEGER_NOT_SORTED)).isEqualTo(false);\n\n        assertThat(sortedArrayChecker.isSorted(INTEGER_SORTED, INTEGER_SORTED.length)).isEqualTo(true);\n        assertThat(sortedArrayChecker.isSorted(INTEGER_NOT_SORTED, INTEGER_NOT_SORTED.length)).isEqualTo(false);\n    }\n\n    @Test\n    public void givenStringArray_thenReturnIfItIsSortedOrNot() {\n        assertThat(sortedArrayChecker.isSorted(STRING_SORTED)).isEqualTo(true);\n        assertThat(sortedArrayChecker.isSorted(STRING_NOT_SORTED)).isEqualTo(false);\n\n        assertThat(sortedArrayChecker.isSorted(STRING_SORTED, STRING_SORTED.length)).isEqualTo(true);\n        assertThat(sortedArrayChecker.isSorted(STRING_NOT_SORTED, STRING_NOT_SORTED.length)).isEqualTo(false);\n    }\n\n    @Test\n    public void givenEmployeeArray_thenReturnIfItIsSortedOrNot() {\n        assertThat(sortedArrayChecker.isSorted(EMPLOYEES_SORTED_BY_NAME, Comparator.comparing(Employee::getName))).isEqualTo(true);\n        assertThat(sortedArrayChecker.isSorted(EMPLOYEES_NOT_SORTED_BY_NAME, Comparator.comparing(Employee::getName))).isEqualTo(false);\n\n        assertThat(sortedArrayChecker.isSorted(EMPLOYEES_SORTED_BY_AGE, Comparator.comparingInt(Employee::getAge))).isEqualTo(true);\n        assertThat(sortedArrayChecker.isSorted(EMPLOYEES_NOT_SORTED_BY_AGE, Comparator.comparingInt(Employee::getAge))).isEqualTo(false);\n\n        assertThat(sortedArrayChecker\n                .isSorted(EMPLOYEES_SORTED_BY_AGE, Comparator.comparingInt(Employee::getAge), EMPLOYEES_SORTED_BY_AGE.length))\n                .isEqualTo(true);\n        assertThat(sortedArrayChecker\n                .isSorted(EMPLOYEES_NOT_SORTED_BY_AGE, Comparator.comparingInt(Employee::getAge), EMPLOYEES_NOT_SORTED_BY_AGE.length))\n                .isEqualTo(false);\n    }\n\n}"}
{"code_source": "package com.baeldung.charstack;\n\npublic class CharStackWithArray {\n\n    private char[] elements;\n    private int size;\n\n    public CharStackWithArray() {\n        size = 0;\n        elements = new char[4];\n    }\n\n    public int size() {\n        return size;\n    }\n\n    public char peek() {\n        if (size == 0) {\n            throw new EmptyStackException();\n        }\n        return elements[size - 1];\n    }\n\n    public char pop() {\n        if (size == 0) {\n            throw new EmptyStackException();\n        }\n\n        return elements[--size];\n    }\n\n    public void push(char item) {\n        ensureCapacity(size + 1);\n        elements[size] = item;\n        size++;\n    }\n\n    private void ensureCapacity(int newSize) {\n        char newBiggerArray[];\n\n        if (elements.length < newSize) {\n            newBiggerArray = new char[elements.length * 2];\n            System.arraycopy(elements, 0, newBiggerArray, 0, size);\n            elements = newBiggerArray;\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.charstack;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class CharStackWithArrayUnitTest {\n\n    @Test\n    public void whenCharStackIsCreated_thenItHasSize0() {\n\n        CharStackWithArray charStack = new CharStackWithArray();\n\n        assertEquals(0, charStack.size());\n    }\n\n    @Test\n    public void givenEmptyCharStack_whenElementIsPushed_thenStackSizeisIncreased() {\n\n        CharStackWithArray charStack = new CharStackWithArray();\n\n        charStack.push('A');\n\n        assertEquals(1, charStack.size());\n    }\n\n    @Test\n    public void givenEmptyCharStack_when5ElementIsPushed_thenStackSizeis() {\n\n        CharStackWithArray charStack = new CharStackWithArray();\n\n        charStack.push('A');\n        charStack.push('B');\n        charStack.push('C');\n        charStack.push('D');\n        charStack.push('E');\n\n        assertEquals(5, charStack.size());\n    }\n\n    @Test\n    public void givenCharStack_whenElementIsPoppedFromStack_thenElementIsRemovedAndSizeChanges() {\n\n        CharStackWithArray charStack = new CharStackWithArray();\n        charStack.push('A');\n\n        char element = charStack.pop();\n\n        assertEquals('A', element);\n        assertEquals(0, charStack.size());\n    }\n\n    @Test\n    public void givenCharStack_whenElementIsPeeked_thenElementIsNotRemovedAndSizeDoesNotChange() {\n\n        CharStackWithArray charStack = new CharStackWithArray();\n        charStack.push('A');\n\n        char element = charStack.peek();\n\n        assertEquals('A', element);\n        assertEquals(1, charStack.size());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.collections.convertarrayprimitives;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\nimport org.apache.commons.lang3.ArrayUtils;\n\nimport com.google.common.primitives.Ints;\n\npublic class ConvertPrimitivesArrayToList {\n\n    public static void failConvert() {\n        int[] input = new int[]{1,2,3,4};\n        // List<Integer> inputAsList = Arrays.asList(input);\n    }\n\n    public static List<Integer> iterateConvert(int[] input) {\n        List<Integer> output = new ArrayList<Integer>();\n        for (int value : input) {\n            output.add(value);\n        }\n        return output;\n    }\n\n    public static List<Integer> streamConvert(int[] input) {\n        List<Integer> output = Arrays.stream(input).boxed().collect(Collectors.toList());\n        return output;\n    }\n\n    public static List<Integer> streamConvertIntStream(int[] input) {\n        List<Integer> output = IntStream.of(input).boxed().collect(Collectors.toList());\n        return output;\n    }\n\n    public static List<Integer> guavaConvert(int[] input) {\n        List<Integer> output = Ints.asList(input);\n        return output;\n    }\n\n    public static List<Integer> apacheCommonConvert(int[] input) {\n        Integer[] outputBoxed = ArrayUtils.toObject(input);\n        List<Integer> output = Arrays.asList(outputBoxed);\n        return output;\n    }\n\n}\n", "test_case": "package com.baeldung.collections.convertarrayprimitives;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.Arrays;\n\nimport org.junit.Test;\n\npublic class ConvertPrimitivesArrayToListUnitTest {\n\n    @Test\n    public void givenArrayWithPrimitives_whenIterativeConvert_thenArrayGetsConverted() {\n        assertEquals(Arrays.asList(1,2,3,4), ConvertPrimitivesArrayToList.iterateConvert(new int[]{1,2,3,4}));\n    }\n\n    @Test\n    public void givenArrayWithPrimitives_whenStreamConvert_thenArrayGetsConverted() {\n        assertEquals(Arrays.asList(1,2,3,4), ConvertPrimitivesArrayToList.streamConvert(new int[]{1,2,3,4}));\n    }\n\n    @Test\n    public void givenArrayWithPrimitives_whenIntStreamConvert_thenArrayGetsConverted() {\n        assertEquals(Arrays.asList(1,2,3,4), ConvertPrimitivesArrayToList.streamConvertIntStream(new int[]{1,2,3,4}));\n    }\n\n    @Test\n    public void givenArrayWithPrimitives_whenGuavaConvert_thenArrayGetsConverted() {\n        assertEquals(Arrays.asList(1,2,3,4), ConvertPrimitivesArrayToList.guavaConvert(new int[]{1,2,3,4}));\n    }\n\n    @Test\n    public void givenArrayWithPrimitives_whenApacheCommonConvert_thenArrayGetsConverted() {\n        assertEquals(Arrays.asList(1,2,3,4), ConvertPrimitivesArrayToList.apacheCommonConvert(new int[]{1,2,3,4}));\n    }\n}\n"}
{"code_source": "package com.baeldung.queueInterface;\n\nimport java.util.AbstractQueue;\nimport java.util.Iterator;\nimport java.util.LinkedList;\n\npublic class CustomBaeldungQueue<T> extends AbstractQueue<T> {\n\n  private LinkedList<T> elements;\n\n  public CustomBaeldungQueue() {\n    this.elements = new LinkedList<T>();\n  }\n\n  @Override\n  public Iterator<T> iterator() {\n    return elements.iterator();\n  }\n\n  @Override\n  public int size() {\n    return elements.size();\n  }\n\n  @Override\n  public boolean offer(T t) {\n    if(t == null) return false;\n    elements.add(t);\n    return true;\n  }\n\n  @Override\n  public T poll() {\n\n    Iterator<T> iter = elements.iterator();\n    T t = iter.next();\n    if(t != null){\n      iter.remove();\n      return t;\n    }\n    return null;\n  }\n\n  @Override\n  public T peek() {\n    return elements.getFirst();\n  }\n}\n", "test_case": "package com.baeldung.queueInterface;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class CustomBaeldungQueueUnitTest {\n\n  private CustomBaeldungQueue<Integer> customQueue;\n\n  @Before\n  public void setUp() throws Exception {\n    customQueue = new CustomBaeldungQueue<>();\n  }\n\n  @Test\n  public void givenQueueWithTwoElements_whenElementsRetrieved_checkRetrievalCorrect() {\n\n    customQueue.add(7);\n    customQueue.add(5);\n\n    int first = customQueue.poll();\n    int second = customQueue.poll();\n\n    assertEquals(7, first);\n    assertEquals(5, second);\n\n  }\n}\n"}
{"code_source": "package com.baeldung.collections.combiningcollections;\n\nimport java.util.Arrays;\nimport java.util.stream.Stream;\n\nimport org.apache.commons.lang3.ArrayUtils;\n\nimport com.google.common.collect.ObjectArrays;\n\npublic class CombiningArrays {\n    \n    public static Object[] usingNativeJava(Object[] first, Object[] second) {\n        Object[] combined = new Object[first.length + second.length];\n        System.arraycopy(first, 0, combined, 0, first.length);\n        System.arraycopy(second, 0, combined, first.length, second.length);\n        return combined;\n    }\n    \n    public static Object[] usingJava8ObjectStream(Object[] first, Object[] second) {\n        Object[] combined = Stream.concat(Arrays.stream(first), Arrays.stream(second)).toArray();\n        return combined;\n    }\n\n    public static Object[] usingJava8FlatMaps(Object[] first, Object[] second) {\n        Object[] combined = Stream.of(first, second).flatMap(Stream::of).toArray(String[]::new);\n        return combined;\n    }\n    \n    public static Object[] usingApacheCommons(Object[] first, Object[] second) {\n        Object[] combined = ArrayUtils.addAll(first, second);\n        return combined;\n    }\n\n    public static Object[] usingGuava(Object[] first, Object[] second) {\n        Object [] combined = ObjectArrays.concat(first, second, Object.class);\n        return combined;\n    }\n    \n}\n", "test_case": "package com.baeldung.collections.combiningcollections;\n\nimport static org.junit.Assert.*;\nimport org.junit.Test;\n\npublic class CombiningArraysUnitTest {\n    private static final String first[] = {\n            \"One\", \n            \"Two\", \n            \"Three\"\n    };\n    \n    private static final String second[] = {\n            \"Four\", \n            \"Five\", \n            \"Six\"\n    };\n\n    private static final String expected[] = {\n            \"One\", \n            \"Two\", \n            \"Three\",\n            \"Four\", \n            \"Five\", \n            \"Six\"\n    };\n    \n    @Test\n    public void givenTwoArrays_whenUsingNativeJava_thenArraysCombined() {\n        assertArrayEquals(expected, CombiningArrays.usingNativeJava(first, second));\n    }\n\n    @Test\n    public void givenTwoArrays_whenUsingObjectStreams_thenArraysCombined() {\n        assertArrayEquals(expected, CombiningArrays.usingJava8ObjectStream(first, second));\n    }\n\n    @Test\n    public void givenTwoArrays_whenUsingFlatMaps_thenArraysCombined() {\n        assertArrayEquals(expected, CombiningArrays.usingJava8FlatMaps(first, second));\n    }\n\n    @Test\n    public void givenTwoArrays_whenUsingApacheCommons_thenArraysCombined() {\n        assertArrayEquals(expected, CombiningArrays.usingApacheCommons(first, second));\n    }\n\n    @Test\n    public void givenTwoArrays_whenUsingGuava_thenArraysCombined() {\n        assertArrayEquals(expected, CombiningArrays.usingGuava(first, second));\n    }\n}\n"}
{"code_source": "package com.baeldung.collections.combiningcollections;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport org.apache.commons.collections4.ListUtils;\n\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.Lists;\n\npublic class CombiningLists {\n    \n    public static List<Object> usingNativeJava(List<Object> first, List<Object> second) {\n        List<Object> combined = new ArrayList<>();\n        combined.addAll(first);\n        combined.addAll(second);\n        return combined;\n    }\n    \n    public static List<Object> usingJava8ObjectStream(List<Object> first, List<Object> second) {\n        List<Object> combined = Stream.concat(first.stream(), second.stream()).collect(Collectors.toList());\n        return combined;\n    }\n\n    public static List<Object> usingJava8FlatMaps(List<Object> first, List<Object> second) {\n        List<Object> combined = Stream.of(first, second).flatMap(Collection::stream).collect(Collectors.toList());\n        return combined;\n    }\n    \n    public static List<Object> usingApacheCommons(List<Object> first, List<Object> second) {\n        List<Object> combined = ListUtils.union(first, second);\n        return combined;\n    }\n\n    public static List<Object> usingGuava(List<Object> first, List<Object> second) {\n        Iterable<Object> combinedIterables = Iterables.unmodifiableIterable(\n        Iterables.concat(first, second));\n        \n        List<Object> combined = Lists.newArrayList(combinedIterables);\n        return combined;\n    }\n    \n}\n", "test_case": "package com.baeldung.collections.combiningcollections;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.Test;\n\npublic class CombiningListsUnitTest {\n    private static final List<Object> first = Arrays.asList(new Object[]{\n            \"One\", \n            \"Two\", \n            \"Three\"\n    });\n    \n    private static final List<Object> second = Arrays.asList(new Object[]{\n            \"Four\", \n            \"Five\", \n            \"Six\"\n    });\n\n    private static final List<Object> expected = Arrays.asList(new Object[]{\n            \"One\", \n            \"Two\", \n            \"Three\",\n            \"Four\", \n            \"Five\", \n            \"Six\"\n    });\n    \n    @Test\n    public void givenTwoLists_whenUsingNativeJava_thenArraysCombined() {\n    \tassertThat(CombiningLists.usingNativeJava(first, second), is(expected));\n    }\n\n    @Test\n    public void givenTwoLists_whenUsingObjectStreams_thenArraysCombined() {\n        assertThat(CombiningLists.usingJava8ObjectStream(first, second), is(expected));\n    }\n\n    @Test\n    public void givenTwoLists_whenUsingFlatMaps_thenArraysCombined() {\n        assertThat(CombiningLists.usingJava8FlatMaps(first, second), is(expected));\n    }\n\n    @Test\n    public void givenTwoLists_whenUsingApacheCommons_thenArraysCombined() {\n        assertThat(CombiningLists.usingApacheCommons(first, second), is(expected));\n    }\n\n    @Test\n    public void givenTwoLists_whenUsingGuava_thenArraysCombined() {\n        assertThat(CombiningLists.usingGuava(first, second), is(expected));\n    }\n}\n"}
{"code_source": "package com.baeldung.collections.combiningcollections;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport org.apache.commons.exec.util.MapUtils;\n\nimport com.google.common.collect.ImmutableMap;\n\npublic class CombiningMaps {\n    \n    public static Map<String, String> usingPlainJava(Map<String, String> first, Map<String, String> second) {\n    \tMap<String, String> combined = new HashMap<>();\n    \tcombined.putAll(first);\n    \tcombined.putAll(second);\n        return combined;\n    }\n    \n    public static Map<String, String> usingJava8ForEach(Map<String, String> first, Map<String, String> second) {\n    \tsecond.forEach((key, value) -> first.merge(key, value, String::concat));\n        return first;\n    }\n\n    public static Map<String, String> usingJava8FlatMaps(Map<String, String> first, Map<String, String> second) {\n\t\tMap<String, String> combined = Stream.of(first, second).map(Map::entrySet).flatMap(Collection::stream)\n\t\t\t\t.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, String::concat));\n\t\treturn combined;\n\n    }\n    \n    public static Map<String, String> usingApacheCommons(Map<String, String> first, Map<String, String> second) {\n        Map<String, String> combined = MapUtils.merge(first, second);\n        return combined;\n    }\n\n    public static Map<String, String> usingGuava(Map<String, String> first, Map<String, String> second) {\n        Map<String, String> combined = ImmutableMap.<String, String>builder()\n          .putAll(first)\n          .putAll(second)\n          .build();\n        return combined;\n    }\n    \n}\n", "test_case": "package com.baeldung.collections.combiningcollections;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.Test;\n\npublic class CombiningMapsUnitTest {\n    private static final Map<String, String> first = new HashMap<>();\n    private static final Map<String, String> second = new HashMap<>();\n    private static Map<String, String> expected = new HashMap<>();\n    \n    static {\n    \tfirst.put(\"one\", \"first String\");\n    \tfirst.put(\"two\", \"second String\");\n    \t\n    \tsecond.put(\"three\", \"third String\");\n    \tsecond.put(\"four\", \"fourth String\");\n\n    \texpected.put(\"one\", \"first String\");\n    \texpected.put(\"two\", \"second String\");\n    \texpected.put(\"three\", \"third String\");\n    \texpected.put(\"four\", \"fourth String\");\n    }\n    \n    @Test\n    public void givenTwoMaps_whenUsingNativeJava_thenMapsCombined() {\n    \tassertThat(CombiningMaps.usingPlainJava(first, second), is(expected));\n    }\n\n    \n    @Test\n    public void givenTwoMaps_whenUsingForEach_thenMapsCombined() {\n    \tassertThat(CombiningMaps.usingJava8ForEach(first, second), is(expected));\n    }\n    \n    @Test\n    public void givenTwoMaps_whenUsingFlatMaps_thenMapsCombined() {\n    \tassertThat(CombiningMaps.usingJava8FlatMaps(first, second), is(expected));\n    }\n    \n    @Test\n    public void givenTwoMaps_whenUsingApacheCommons_thenMapsCombined() {\n    \tassertThat(CombiningMaps.usingApacheCommons(first, second), is(expected));\n    }\n    \n    @Test\n    public void givenTwoMaps_whenUsingGuava_thenMapsCombined() {\n    \tassertThat(CombiningMaps.usingGuava(first, second), is(expected));\n    }\n}\n"}
{"code_source": "package com.baeldung.collections.combiningcollections;\n\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport org.apache.commons.collections4.SetUtils;\n\nimport com.google.common.collect.Sets;\n\npublic class CombiningSets {\n    \n    public static Set<Object> usingNativeJava(Set<Object> first, Set<Object> second) {\n        Set<Object> combined = new HashSet<>();\n        combined.addAll(first);\n        combined.addAll(second);\n        return combined;\n    }\n    \n    public static Set<Object> usingJava8ObjectStream(Set<Object> first, Set<Object> second) {\n        Set<Object> combined = Stream.concat(first.stream(), second.stream()).collect(Collectors.toSet());\n        return combined;\n    }\n\n    public static Set<Object> usingJava8FlatMaps(Set<Object> first, Set<Object> second) {\n        Set<Object> combined = Stream.of(first, second).flatMap(Collection::stream).collect(Collectors.toSet());\n        return combined;\n    }\n    \n    public static Set<Object> usingApacheCommons(Set<Object> first, Set<Object> second) {\n        Set<Object> combined = SetUtils.union(first, second);\n        return combined;\n    }\n\n    public static Set<Object> usingGuava(Set<Object> first, Set<Object> second) {\n        Set<Object> combined = Sets.union(first, second);\n        return combined;\n    }\n    \n}\n", "test_case": "\npackage com.baeldung.collections.combiningcollections;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.junit.Test;\n\npublic class CombiningSetsUnitTest {\n\tprivate static final Set<Object> first = new HashSet<Object>(Arrays.asList(new Object[] { \"One\", \"Two\", \"Three\" }));\n\n\tprivate static final Set<Object> second = new HashSet<Object>(Arrays.asList(new Object[] { \"Four\", \"Five\", \"Six\" }));\n\n\tprivate static final Set<Object> expected = new HashSet<Object>(Arrays\n\t\t\t.asList(new Object[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\" }));\n\n\t@Test\n\tpublic void givenTwoSets_whenUsingNativeJava_thenArraysCombined() {\n\t\tassertThat(CombiningSets.usingNativeJava(first, second), is(expected));\n\t}\n\n\t@Test\n\tpublic void givenTwoSets_whenUsingObjectStreams_thenArraysCombined() {\n\t\tassertThat(CombiningSets.usingJava8ObjectStream(first, second), is(expected));\n\t}\n\n\t@Test\n\tpublic void givenTwoSets_whenUsingFlatMaps_thenArraysCombined() {\n\t\tassertThat(CombiningSets.usingJava8FlatMaps(first, second), is(expected));\n\t}\n\n\t@Test\n\tpublic void givenTwoSets_whenUsingApacheCommons_thenArraysCombined() {\n\t\tassertThat(CombiningSets.usingApacheCommons(first, second), is(expected));\n\t}\n\n\t@Test\n\tpublic void givenTwoSets_whenUsingGuava_thenArraysCombined() {\n\t\tassertThat(CombiningSets.usingGuava(first, second), is(expected));\n\t}\n}"}
{"code_source": "package com.baeldung.collections.iterablesize;\n\nimport java.util.Collection;\nimport java.util.stream.StreamSupport;\n\nimport org.apache.commons.collections4.IterableUtils;\n\nimport com.google.common.collect.Iterables;\n\n/**\n * Provides methods for getting the size of an {@link Iterable} object.\n */\npublic class IterableSize {\n\n    /**\n     * Get the size of {@code Iterable} using Java 7.\n     *\n     * @param data the iterable\n     * @return the size of the iterable\n     */\n    public static int sizeUsingJava7(final Iterable data) {\n\n        if (data instanceof Collection) {\n            return ((Collection<?>) data).size();\n        }\n        int counter = 0;\n        for (final Object i : data) {\n            counter++;\n        }\n        return counter;\n    }\n\n    /**\n     * Get the size of {@code Iterable} using Java 8.\n     *\n     * @param data the iterable\n     * @return the size of the iterable\n     */\n    public static long sizeUsingJava8(final Iterable data) {\n\n        return StreamSupport.stream(data.spliterator(), false).count();\n    }\n\n    /**\n     * Get the size of {@code Iterable} using Apache Collections.\n     *\n     * @param data the iterable\n     * @return the size of the iterable\n     */\n    public static int sizeUsingApacheCollections(final Iterable data) {\n\n        return IterableUtils.size(data);\n    }\n\n    /**\n     * Get the size of {@code Iterable} using Google Guava.\n     *\n     * @param data the iterable\n     * @return the size of the iterable\n     */\n    public static int sizeUsingGoogleGuava(final Iterable data) {\n\n        return Iterables.size(data);\n    }\n}\n", "test_case": "package com.baeldung.collections.iterablesize;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.sql.SQLException;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.google.common.collect.Lists;\n\nclass IterableSizeUnitTest {\n\n    private final List<String> list = Lists.newArrayList(\"Apple\", \"Orange\", \"Banana\");\n\n    private Iterable data;\n\n    @Test\n    void whenUsingJava7_iterableOfCollectionType_thenCorrectSize() {\n\n        final int size = IterableSize.sizeUsingJava7(list);\n\n        assertEquals(3, size);\n    }\n\n    @Test\n    void whenUsingJava7_iterableNotOfCollectionType_thenCorrect() {\n\n        final SQLException exception = new SQLException();\n        exception.setNextException(new SQLException());\n        final int size = IterableSize.sizeUsingJava7(exception);\n\n        assertEquals(2, size);\n    }\n\n    @Test\n    void whenUsingJava8_thenCorrect() {\n\n        final long size = IterableSize.sizeUsingJava8(list);\n\n        assertEquals(3, size);\n    }\n\n    @Test\n    void whenUsingApacheCollections_thenCorrect() {\n\n        final int size = IterableSize.sizeUsingApacheCollections(list);\n\n        assertEquals(3, size);\n    }\n\n    @Test\n    void whenUsingGoogleGuava_thenCorrect() {\n\n        final int size = IterableSize.sizeUsingGoogleGuava(list);\n\n        assertEquals(3, size);\n    }\n}"}
{"code_source": "package com.baeldung.collections.iterators;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class Iterators {\n\n    private static final Logger LOG = LoggerFactory.getLogger(Iterators.class);\n\n    public static int failFast1() {\n        ArrayList<Integer> numbers = new ArrayList<>();\n\n        numbers.add(10);\n        numbers.add(20);\n        numbers.add(30);\n        numbers.add(40);\n\n        Iterator<Integer> iterator = numbers.iterator();\n        while (iterator.hasNext()) {\n            Integer number = iterator.next();\n            numbers.add(50);\n        }\n\n        return numbers.size();\n    }\n\n    public static int failFast2() {\n        ArrayList<Integer> numbers = new ArrayList<>();\n        numbers.add(10);\n        numbers.add(20);\n        numbers.add(30);\n        numbers.add(40);\n\n        Iterator<Integer> iterator = numbers.iterator();\n        while (iterator.hasNext()) {\n            if (iterator.next() == 30) {\n                // will not throw Exception\n                iterator.remove();\n            }\n        }\n\n        LOG.debug(\"using iterator's remove method = {}\", numbers);\n\n        iterator = numbers.iterator();\n        while (iterator.hasNext()) {\n            if (iterator.next() == 40) {\n                // will throw Exception on\n                // next call of next() method\n                numbers.remove(2);\n            }\n        }\n\n        return numbers.size();\n    }\n\n    public static int failSafe1() {\n        ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();\n\n        map.put(\"First\", 10);\n        map.put(\"Second\", 20);\n        map.put(\"Third\", 30);\n        map.put(\"Fourth\", 40);\n\n        Iterator<String> iterator = map.keySet()\n            .iterator();\n\n        while (iterator.hasNext()) {\n            String key = iterator.next();\n            map.put(\"Fifth\", 50);\n        }\n\n        return map.size();\n    }\n\n}\n", "test_case": "package com.baeldung.collections.iterators;\n\nimport static com.baeldung.collections.iterators.Iterators.failFast1;\nimport static com.baeldung.collections.iterators.Iterators.failFast2;\nimport static com.baeldung.collections.iterators.Iterators.failSafe1;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\n\nimport java.util.ConcurrentModificationException;\n\nimport org.junit.Test;\n\n/**\n * Source code https://github.com/eugenp/tutorials\n *\n * @author Santosh Thakur\n */\n\npublic class IteratorsUnitTest {\n\n    @Test\n    public void whenFailFast_ThenThrowsException() {\n        assertThatThrownBy(() -> {\n            failFast1();\n        }).isInstanceOf(ConcurrentModificationException.class);\n    }\n\n    @Test\n    public void whenFailFast_ThenThrowsExceptionInSecondIteration() {\n        assertThatThrownBy(() -> {\n            failFast2();\n        }).isInstanceOf(ConcurrentModificationException.class);\n    }\n\n    @Test\n    public void whenFailSafe_ThenDoesNotThrowException() {\n        assertThat(failSafe1()).isGreaterThanOrEqualTo(0);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.collections.fixedsizequeues;\n\nimport java.util.AbstractQueue;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class FifoFixedSizeQueue<E> extends AbstractQueue<E> {\n\n    /** The queued items */\n    final Object[] items;\n\n    /** Number of elements in the queue */\n    int count;\n\n    public FifoFixedSizeQueue(int capacity) {\n        super();\n\n        items = new Object[capacity];\n        count = 0;\n    }\n\n    @Override\n    public boolean offer(E e) {\n        if (e == null) {\n            throw new NullPointerException(\"Queue doesn't allow nulls\");\n        }\n        if (count == items.length) {\n            this.poll();\n        }\n        this.items[count] = e;\n        count++;\n        return true;\n    }\n\n    @Override\n    public E poll() {\n        if (count <= 0) {\n            return null;\n        }\n        E item = (E) items[0];\n        shiftLeft();\n        count--;\n        return item;\n    }\n\n    private void shiftLeft() {\n        int i = 1;\n        while (i < items.length) {\n            if (items[i] == null) {\n                break;\n            }\n            items[i - 1] = items[i];\n            i++;\n        }\n    }\n\n    @Override\n    public E peek() {\n        if (count <= 0) {\n            return null;\n        }\n        return (E) items[0];\n    }\n\n    @Override\n    public int size() {\n        return count;\n    }\n\n    @Override\n    public Iterator<E> iterator() {\n        List<E> list = new ArrayList<>(count);\n        for (int i = 0; i < count; i++) {\n            list.add((E) items[i]);\n        }\n        return list.iterator();\n    }\n}\n", "test_case": "package com.baeldung.collections.fixedsizequeues;\n\nimport java.util.Iterator;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNull;\n\npublic class FifoFixedSizeQueueUnitTest {\n\n    @Test\n    void givenEmptyQueue_whenIterating_thenHasNextIsFalse() {\n        FifoFixedSizeQueue<String> toTest = new FifoFixedSizeQueue<>(10);\n        Iterator<String> i = toTest.iterator();\n        assertFalse(i.hasNext());\n    }\n\n    @Test\n    void givenEmptyQueue_whenOffer_thenCountIsOne() {\n        FifoFixedSizeQueue<String> toTest = new FifoFixedSizeQueue<>(10);\n        toTest.offer(\"1\");\n        assertEquals(1, toTest.size());\n    }\n\n    @Test\n    void givenEmptyQueue_whenPeek_thenNull() {\n        FifoFixedSizeQueue<String> toTest = new FifoFixedSizeQueue<>(10);\n        String tail = toTest.peek();\n        assertNull(tail);\n    }\n\n    @Test\n    void givenEmptyQueue_whenPoll_thenNull() {\n        FifoFixedSizeQueue<String> toTest = new FifoFixedSizeQueue<>(10);\n        String dequeued = toTest.poll();\n        assertNull(dequeued);\n    }\n\n    @Test\n    void givenNonEmptyQueue_whenIterating_thenHasNextIsTrue() {\n        FifoFixedSizeQueue<String> toTest = new FifoFixedSizeQueue<>(10);\n        Iterator<String> i = toTest.iterator();\n        assertFalse(i.hasNext());\n    }\n\n    @Test\n    void givenNonEmptyQueue_whenOffer_thenCountMatchesQueueElements() {\n        FifoFixedSizeQueue<String> toTest = new FifoFixedSizeQueue<>(10);\n        toTest.offer(\"1\");\n        toTest.offer(\"2\");\n        assertEquals(2, toTest.size());\n    }\n\n    @Test\n    void givenNonEmptyQueue_whenPeek_thenFirstElementMustBeReturned() {\n        String expectedElement = \"1\";\n\n        FifoFixedSizeQueue<String> toTest = new FifoFixedSizeQueue<>(10);\n        toTest.offer(expectedElement);\n        toTest.offer(\"2\");\n\n        assertEquals(expectedElement, toTest.peek());\n        assertEquals(expectedElement, toTest.peek());\n    }\n\n    @Test\n    void givenNonEmptyQueue_whenPoll_thenFirstElementMustBeReturnedAndRemoved() {\n        String expectedPoll = \"1\";\n        String expectedTailAfterPoll = \"2\";\n\n        FifoFixedSizeQueue<String> toTest = new FifoFixedSizeQueue<>(10);\n        toTest.offer(expectedPoll);\n        toTest.offer(expectedTailAfterPoll);\n\n        assertEquals(expectedPoll, toTest.poll());\n        assertEquals(expectedTailAfterPoll, toTest.peek());\n    }\n\n    @Test\n    void givenFullQueue_whenOffer_thenRemovedOldestFromTailAndOffer() {\n        FifoFixedSizeQueue<String> toTest = new FifoFixedSizeQueue<>(2);\n        toTest.offer(\"1\");\n        toTest.offer(\"2\");\n        toTest.offer(\"3\");\n\n        Iterator<String> i = toTest.iterator();\n        assertEquals(\"2\", i.next());\n        assertEquals(\"3\", i.next());\n        assertFalse(i.hasNext());\n    }\n\n    @Test\n    void whenPoll_thenSizeDecreases() {\n        FifoFixedSizeQueue<String> toTest = new FifoFixedSizeQueue<>(2);\n        toTest.offer(\"1\");\n\n        toTest.poll();\n        assertEquals(0, toTest.size());\n    }\n\n    @Test\n    void whenOffer_thenSizeIncreases() {\n        FifoFixedSizeQueue<String> toTest = new FifoFixedSizeQueue<>(2);\n        toTest.offer(\"1\");\n        assertEquals(1, toTest.size());\n    }\n\n    @Test\n    void givenFullQueue_whenOffer_thenElementIsInsertedAndSizeEqualsCapacity() {\n        FifoFixedSizeQueue<String> toTest = new FifoFixedSizeQueue<>(2);\n        toTest.offer(\"1\");\n        toTest.offer(\"2\");\n        toTest.offer(\"3\");\n        assertEquals(2, toTest.size());\n        assertEquals(\"2\", toTest.peek());\n    }\n\n    @Test\n    void givenEmptyQueue_whenSizeRequest_thenZero() {\n        FifoFixedSizeQueue<String> toTest = new FifoFixedSizeQueue<>(2);\n        assertEquals(0, toTest.size());\n    }\n\n    @Test\n    void givenEmptyQueue_whenPoll_thenReturnNullAndSizeIsZero() {\n        FifoFixedSizeQueue<String> toTest = new FifoFixedSizeQueue<>(2);\n        assertNull(toTest.poll());\n        assertEquals(0, toTest.size());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.defaultarraylistcapacity;\n\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\n\npublic class DefaultArrayListCapacity {\n\n    public static int getDefaultCapacity(ArrayList<?> arrayList) throws Exception {\n\n        if (arrayList == null) {\n            return 0;\n        }\n\n        Field field = ArrayList.class.getDeclaredField(\"elementData\");\n        field.setAccessible(true);\n\n        return ((Object[]) field.get(arrayList)).length;\n    }\n\n}\n", "test_case": "package com.baeldung.defaultarraylistcapacity;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.ArrayList;\n\nimport org.junit.jupiter.api.Test;\n\npublic class DefaultArrayListCapacityUnitTest {\n\n    @Test\n    void givenEmptyArrayList_whenGetDefaultCapacity_thenReturnZero() throws Exception {\n\n        ArrayList<Integer> myList = new ArrayList<>();\n        int defaultCapacity = DefaultArrayListCapacity.getDefaultCapacity(myList);\n\n        assertEquals(0, defaultCapacity);\n\n    }\n\n    @Test\n    void givenEmptyArrayList_whenAddItemAndGetDefaultCapacity_thenReturn10() throws Exception {\n\n        ArrayList<String> myList = new ArrayList<>();\n        myList.add(\"ITEM 1\");\n\n        int defaultCapacity = DefaultArrayListCapacity.getDefaultCapacity(myList);\n\n        assertEquals(10, defaultCapacity);\n\n    }\n\n}\n"}
{"code_source": "package com.baeldung.initializearraylistwithnullorzeros;\n\nimport java.util.ArrayList;\n\npublic class InitializeArrayListWithNullOrZeros {\n\n    public static void main(String[] args) {\n\n        ArrayList<Integer> arrayList = new ArrayList<>();\n        for (int i = 0; i< 10; i++) {\n            arrayList.add(null);\n        }\n    }\n}\n\n", "test_case": "package com.baeldung.initializearraylistwithnullorzeros;\n\nimport org.junit.Test;\nimport org.junit.jupiter.api.Assertions;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\npublic class InitializeArrayListWithNullOrZerosUnitTest {\n\n    @Test\n    public void whenInitializingListWithNCopies_thenListIsCorrectlyPopulated() {\n        // when\n        ArrayList<Integer> list = IntStream.of(new int[10])\n                .boxed()\n                .collect(Collectors.toCollection(ArrayList::new));\n\n        // then\n        Assertions.assertEquals(10, list.size());\n        Assertions.assertTrue(list.stream().allMatch(elem -> elem == 0));\n    }\n\n    @Test\n    public void whenInitializingListWithStream_thenListIsCorrectlyPopulated() {\n\n        // when\n        ArrayList<Integer> listWithZeros = Stream.generate(() -> 0)\n                .limit(10).collect(Collectors.toCollection(ArrayList::new));\n\n        ArrayList<Object> listWithNulls = Stream.generate(() -> null)\n                .limit(10).collect(Collectors.toCollection(ArrayList::new));\n\n        // then\n        Assertions.assertEquals(10, listWithZeros.size());\n        Assertions.assertTrue(listWithZeros.stream().allMatch(elem -> elem == 0));\n\n        Assertions.assertEquals(10, listWithNulls.size());\n        Assertions.assertTrue(listWithNulls.stream().allMatch(Objects::isNull));\n    }\n\n    @Test public void whenInitializingListWithIntStream_thenListIsCorrectlyPopulated() {\n        // when\n        ArrayList<Integer> list = IntStream.of(new int[10])\n                .boxed()\n                .collect(Collectors.toCollection(ArrayList::new));\n\n        // then\n        Assertions.assertEquals(10, list.size());\n        Assertions.assertTrue(list.stream().allMatch(elem -> elem == 0)); }\n\n    @Test\n    public void whenInitializingListWithAsList_thenListIsCorrectlyPopulated() {\n        // when\n        Integer[] integers = new Integer[10];\n        Arrays.fill(integers, 0);\n        List<Integer> integerList = new ArrayList<>(Arrays.asList(integers));\n\n        // then\n        Assertions.assertEquals(10, integerList.size());\n        Assertions.assertTrue(integerList.stream().allMatch(elem -> elem == 0));\n    }\n\n    @Test\n    public void whenInitializingListWithVector_thenListIsCorrectlyPopulated() {\n        // when\n        List<Integer> integerList = new Vector<>() {{setSize(10);}};\n\n        // then\n        Assertions.assertEquals(10, integerList.size());\n        Assertions.assertTrue(integerList.stream().allMatch(Objects::isNull));\n    }\n}\n"}
{"code_source": "package com.baeldung.triple;\n\npublic class Triple<L, M, R> {\n\n    private final L left;\n    private final M middle;\n    private final R right;\n\n    public Triple(L left, M middle, R right) {\n        this.left = left;\n        this.middle = middle;\n        this.right = right;\n    }\n\n    public L getLeft() {\n        return left;\n    }\n\n    public M getMiddle() {\n        return middle;\n    }\n\n    public R getRight() {\n        return right;\n    }\n}\n", "test_case": "package com.baeldung.triple;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport org.junit.jupiter.api.Test;\n\npublic class TripleInListUnitTest {\n\n    enum OP {\n        PLUS(\"+\"), MINUS(\"-\"), MULTIPLY(\"x\");\n        final String opSign;\n\n        OP(String x) {\n            this.opSign = x;\n        }\n    }\n\n    private String createQuestion(Long num1, OP operator, Long num2) {\n        long result;\n        switch (operator) {\n            case PLUS:\n                result = num1 + num2;\n                break;\n            case MINUS:\n                result = num1 - num2;\n                break;\n            case MULTIPLY:\n                result = num1 * num2;\n                break;\n            default:\n                throw new IllegalArgumentException(\"Unknown operator\");\n        }\n        return String.format(\"%d %s %d = ? ( answer: %d )\", num1, operator.opSign, num2, result);\n    }\n\n    private static final List<String> EXPECTED_QUESTIONS = Arrays.asList(\n        \"100 - 42 = ? ( answer: 58 )\",\n        \"100 + 42 = ? ( answer: 142 )\",\n        \"100 x 42 = ? ( answer: 4200 )\");\n\n    @Test\n    void givenTripleValues_whenStoreAsList_thenTypeIsNotSafe() {\n\n        List myTriple1 = new ArrayList(3);\n        myTriple1.add(100L);\n        myTriple1.add(OP.MINUS);\n        myTriple1.add(42L);\n\n        List myTriple2 = new ArrayList(3);\n        myTriple2.add(100L);\n        myTriple2.add(OP.PLUS);\n        myTriple2.add(42L);\n\n        List myTriple3 = new ArrayList(3);\n        myTriple3.add(100L);\n        myTriple3.add(OP.MULTIPLY);\n        myTriple3.add(42L);\n\n        List<List> listOfTriples = new ArrayList<>(Arrays.asList(myTriple1, myTriple2, myTriple3));\n\n        List oopsTriple = new ArrayList(3);\n        oopsTriple.add(\"Oops\");\n        oopsTriple.add(911L);\n        oopsTriple.add(\"The type is wrong\");\n\n        listOfTriples.add(oopsTriple);\n        assertEquals(4, listOfTriples.size());\n\n        List<String> questions = listOfTriples.stream()\n            .filter(\n                triple -> triple.size() == 3\n                    && triple.get(0) instanceof Long\n                    && triple.get(1) instanceof OP\n                    && triple.get(2) instanceof Long\n            ).map(triple -> {\n                Long left = (Long) triple.get(0);\n                OP op = (OP) triple.get(1);\n                Long right = (Long) triple.get(2);\n                return createQuestion(left, op, right);\n            }).collect(Collectors.toList());\n\n        assertEquals(EXPECTED_QUESTIONS, questions);\n    }\n\n    @Test\n    void givenTripleValues_whenUsingTheTripleClass_thenTypeIsSafeAndNeat() {\n        Triple<Long, OP, Long> triple1 = new Triple<>(100L, OP.MINUS, 42L);\n        Triple<Long, OP, Long> triple2 = new Triple<>(100L, OP.PLUS, 42L);\n        Triple<Long, OP, Long> triple3 = new Triple<>(100L, OP.MULTIPLY, 42L);\n        Triple<String, Long, String> tripleOops = new Triple<>(\"Oops\", 911L, \"The type is wrong\");\n\n        List<Triple<Long, OP, Long>> listOfTriples = new ArrayList<>(Arrays.asList(triple1, triple2, triple3));\n        // listOfTriples.add(tripleOops); // Compiler error: \"java: incompatible types ... \"\n\n        List<String> questions = listOfTriples.stream()\n            .map(triple -> createQuestion(triple.getLeft(), triple.getMiddle(), triple.getRight()))\n            .collect(Collectors.toList());\n\n        assertEquals(EXPECTED_QUESTIONS, questions);\n    }\n}\n"}
{"code_source": "package com.baeldung.convertlisttomap;\n\nimport com.google.common.collect.Maps;\nimport org.apache.commons.collections4.MapUtils;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class ConvertListToMapService {\n\n    public Map<Integer, Animal> convertListBeforeJava8(List<Animal> list) {\n\n        Map<Integer, Animal> map = new HashMap<>();\n\n        for (Animal animal : list) {\n            map.put(animal.getId(), animal);\n        }\n        return map;\n    }\n\n    public Map<Integer, Animal> convertListAfterJava8(List<Animal> list) {\n        Map<Integer, Animal> map = list.stream().collect(Collectors.toMap(Animal::getId, Function.identity()));\n        return map;\n    }\n\n    public Map<Integer, Animal> convertListWithGuava(List<Animal> list) {\n\n        Map<Integer, Animal> map = Maps.uniqueIndex(list, Animal::getId);\n        return map;\n    }\n\n    public Map<Integer, Animal> convertListWithApacheCommons(List<Animal> list) {\n\n        Map<Integer, Animal> map = new HashMap<>();\n\n        MapUtils.populateMap(map, list, Animal::getId);\n\n        return map;\n    }\n}\n", "test_case": "package com.baeldung.convertlisttomap;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.containsInAnyOrder;\n\npublic class ConvertListToMapServiceUnitTest {\n    List<Animal> list;\n\n    private ConvertListToMapService convertListService;\n\n    @Before\n    public void init() {\n        this.convertListService = new ConvertListToMapService();\n        this.list = new ArrayList<>();\n\n        Animal cat = new Animal(1, \"Cat\");\n        list.add(cat);\n        Animal dog = new Animal(2, \"Dog\");\n        list.add(dog);\n        Animal pig = new Animal(3, \"Pig\");\n        list.add(pig);\n        Animal cow = new Animal(4, \"Cow\");\n        list.add(cow);\n        Animal goat = new Animal(5, \"Goat\");\n        list.add(goat);\n\n    }\n\n    @Test\n    public void givenAList_whenConvertBeforeJava8_thenReturnMapWithTheSameElements() {\n\n        Map<Integer, Animal> map = convertListService.convertListBeforeJava8(list);\n\n        assertThat(map.values(), containsInAnyOrder(list.toArray()));\n    }\n\n    @Test\n    public void givenAList_whenConvertAfterJava8_thenReturnMapWithTheSameElements() {\n\n        Map<Integer, Animal> map = convertListService.convertListAfterJava8(list);\n\n        assertThat(map.values(), containsInAnyOrder(list.toArray()));\n    }\n\n    @Test\n    public void givenAList_whenConvertWithGuava_thenReturnMapWithTheSameElements() {\n\n        Map<Integer, Animal> map = convertListService.convertListWithGuava(list);\n\n        assertThat(map.values(), containsInAnyOrder(list.toArray()));\n    }\n\n    @Test\n    public void givenAList_whenConvertWithApacheCommons_thenReturnMapWithTheSameElements() {\n\n        Map<Integer, Animal> map = convertListService.convertListWithApacheCommons(list);\n\n        assertThat(map.values(), containsInAnyOrder(list.toArray()));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.convertToMap;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class ConvertToMap {\n    public Map<String, String> listToMap(List<Book> books) {\n        return books.stream().collect(Collectors.toMap(Book::getIsbn, Book::getName));\n    }\n\n    public Map<Integer, Book> listToMapWithDupKeyError(List<Book> books) {\n        return books.stream().collect(Collectors.toMap(Book::getReleaseYear, Function.identity()));\n    }\n\n    public Map<Integer, Book> listToMapWithDupKey(List<Book> books) {\n        return books.stream().collect(Collectors.toMap(Book::getReleaseYear, Function.identity(), (existing, replacement) -> existing));\n    }\n\n    public Map<Integer, Book> listToConcurrentMap(List<Book> books) {\n        return books.stream().collect(Collectors.toMap(Book::getReleaseYear, Function.identity(), (o1, o2) -> o1, ConcurrentHashMap::new));\n    }\n\n    public TreeMap<String, Book> listToSortedMap(List<Book> books) {\n        return books.stream()\n                .collect(Collectors.toMap(Book::getName, Function.identity(), (o1, o2) -> o1, TreeMap::new));\n    }\n}\n\n", "test_case": "package com.baeldung.convertToMap;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\n\npublic class ConvertToMapUnitTest {\n\n    private List<Book> bookList;\n    private ConvertToMap convertToMap = new ConvertToMap();\n\n    @Before\n    public void init() {\n        bookList = new ArrayList<>();\n        bookList.add(new Book(\"The Fellowship of the Ring\", 1954, \"0395489318\"));\n        bookList.add(new Book(\"The Two Towers\", 1954, \"0345339711\"));\n        bookList.add(new Book(\"The Return of the King\", 1955, \"0618129111\"));\n    }\n\n    @Test\n    public void whenConvertFromListToMap() {\n        assertTrue(convertToMap.listToMap(bookList).size() == 3);\n    }\n\n    @Test(expected = IllegalStateException.class)\n    public void whenMapHasDuplicateKey_without_merge_function_then_runtime_exception() {\n        convertToMap.listToMapWithDupKeyError(bookList);\n    }\n\n    @Test\n    public void whenMapHasDuplicateKeyThenMergeFunctionHandlesCollision() {\n        Map<Integer, Book> booksByYear = convertToMap.listToMapWithDupKey(bookList);\n        assertEquals(2, booksByYear.size());\n        assertEquals(\"0395489318\", booksByYear.get(1954).getIsbn());\n    }\n\n    @Test\n    public void whenCreateConcurrentHashMap() {\n        assertTrue(convertToMap.listToConcurrentMap(bookList) instanceof ConcurrentHashMap);\n    }\n\n    @Test\n    public void whenMapisSorted() {\n        assertTrue(convertToMap.listToSortedMap(bookList).firstKey().equals(\"The Fellowship of the Ring\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.findanelement;\n\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.apache.commons.collections4.IterableUtils;\n\nimport com.google.common.base.Predicate;\nimport com.google.common.collect.Iterables;\n\npublic class FindACustomerInGivenList {\n\n    public Customer findUsingGivenIndex(int indexOfCustomer, List<Customer> customers) {\n        if (indexOfCustomer >= 0 && indexOfCustomer < customers.size())\n            return customers.get(indexOfCustomer);\n        return null;\n    }\n\n    public int findUsingIndexOf(Customer customer, List<Customer> customers) {\n        return customers.indexOf(customer);\n    }\n\n    public boolean findUsingContains(Customer customer, List<Customer> customers) {\n        return customers.contains(customer);\n    }\n\n    public Customer findUsingIterator(String name, List<Customer> customers) {\n        Iterator<Customer> iterator = customers.iterator();\n        while (iterator.hasNext()) {\n            Customer customer = iterator.next();\n            if (customer.getName().equals(name)) {\n                return customer;\n            }\n        }\n        return null;\n    }\n\n    public Customer findUsingEnhancedForLoop(String name, List<Customer> customers) {\n        for (Customer customer : customers) {\n            if (customer.getName().equals(name)) {\n                return customer;\n            }\n        }\n        return null;\n    }\n\n    public Customer findUsingStream(String name, List<Customer> customers) {\n        return customers.stream()\n            .filter(customer -> customer.getName().equals(name))\n            .findFirst()\n            .orElse(null);\n    }\n\n    public Customer findUsingParallelStream(String name, List<Customer> customers) {\n        return customers.parallelStream()\n            .filter(customer -> customer.getName().equals(name))\n            .findAny()\n            .orElse(null);\n    }\n\n    public Customer findUsingGuava(String name, List<Customer> customers) {\n        return Iterables.tryFind(customers, new Predicate<Customer>() {\n            public boolean apply(Customer customer) {\n                return customer.getName().equals(name);\n            }\n        }).orNull();\n    }\n\n    public Customer findUsingApacheCommon(String name, List<Customer> customers) {\n        return IterableUtils.find(customers, new org.apache.commons.collections4.Predicate<Customer>() {\n            public boolean evaluate(Customer customer) {\n                return customer.getName().equals(name);\n            }\n        });\n    }\n\n}", "test_case": "package com.baeldung.findanelement;\n\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.Test;\n\npublic class FindACustomerInGivenListUnitTest {\n\n    private static List<Customer> customers = new ArrayList<>();\n\n    static {\n        customers.add(new Customer(1, \"Jack\"));\n        customers.add(new Customer(2, \"James\"));\n        customers.add(new Customer(3, \"Sam\"));\n    }\n\n    private static FindACustomerInGivenList findACustomerInGivenList = new FindACustomerInGivenList();\n\n    @Test\n    public void givenAnIndex_whenFoundUsingGivenIndex_thenReturnCustomer() {\n        Customer customer = findACustomerInGivenList.findUsingGivenIndex(0, customers);\n\n        assertEquals(1, customer.getId());\n    }\n\n    @Test\n    public void givenAnIndex_whenNotFoundUsingGivenIndex_thenReturnNull() {\n        Customer customer = findACustomerInGivenList.findUsingGivenIndex(5, customers);\n\n        assertNull(customer);\n    }\n\n    @Test\n    public void givenACustomer_whenFoundUsingContains_thenReturnTrue() {\n        Customer james = new Customer(2, \"James\");\n        boolean isJamesPresent = findACustomerInGivenList.findUsingContains(james, customers);\n\n        assertEquals(true, isJamesPresent);\n    }\n\n    @Test\n    public void givenACustomer_whenNotFoundUsingContains_thenReturnFalse() {\n        Customer john = new Customer(5, \"John\");\n        boolean isJohnPresent = findACustomerInGivenList.findUsingContains(john, customers);\n\n        assertEquals(false, isJohnPresent);\n    }\n\n    @Test\n    public void givenACustomer_whenFoundUsingIndexOf_thenReturnItsIndex() {\n        Customer james = new Customer(2, \"James\");\n        int indexOfJames = findACustomerInGivenList.findUsingIndexOf(james, customers);\n\n        assertEquals(1, indexOfJames);\n    }\n\n    @Test\n    public void givenACustomer_whenNotFoundUsingIndexOf_thenReturnMinus1() {\n        Customer john = new Customer(5, \"John\");\n        int indexOfJohn = findACustomerInGivenList.findUsingIndexOf(john, customers);\n\n        assertEquals(-1, indexOfJohn);\n    }\n\n    @Test\n    public void givenName_whenCustomerWithNameFoundUsingIterator_thenReturnCustomer() {\n        Customer james = findACustomerInGivenList.findUsingIterator(\"James\", customers);\n\n        assertEquals(\"James\", james.getName());\n        assertEquals(2, james.getId());\n    }\n\n    @Test\n    public void givenName_whenCustomerWithNameNotFoundUsingIterator_thenReturnNull() {\n        Customer john = findACustomerInGivenList.findUsingIterator(\"John\", customers);\n\n        assertNull(john);\n    }\n\n    @Test\n    public void givenName_whenCustomerWithNameFoundUsingEnhancedFor_thenReturnCustomer() {\n        Customer james = findACustomerInGivenList.findUsingEnhancedForLoop(\"James\", customers);\n\n        assertEquals(\"James\", james.getName());\n        assertEquals(2, james.getId());\n    }\n\n    @Test\n    public void givenName_whenCustomerWithNameNotFoundUsingEnhancedFor_thenReturnNull() {\n        Customer john = findACustomerInGivenList.findUsingEnhancedForLoop(\"John\", customers);\n\n        assertNull(john);\n    }\n\n    @Test\n    public void givenName_whenCustomerWithNameFoundUsingStream_thenReturnCustomer() {\n        Customer james = findACustomerInGivenList.findUsingStream(\"James\", customers);\n\n        assertEquals(\"James\", james.getName());\n        assertEquals(2, james.getId());\n    }\n\n    @Test\n    public void givenName_whenCustomerWithNameNotFoundUsingStream_thenReturnNull() {\n        Customer john = findACustomerInGivenList.findUsingStream(\"John\", customers);\n\n        assertNull(john);\n    }\n\n    @Test\n    public void givenName_whenCustomerWithNameFoundUsingParallelStream_thenReturnCustomer() {\n        Customer james = findACustomerInGivenList.findUsingParallelStream(\"James\", customers);\n\n        assertEquals(\"James\", james.getName());\n        assertEquals(2, james.getId());\n    }\n\n    @Test\n    public void givenName_whenCustomerWithNameNotFoundUsingParallelStream_thenReturnNull() {\n        Customer john = findACustomerInGivenList.findUsingParallelStream(\"John\", customers);\n\n        assertNull(john);\n    }\n\n    @Test\n    public void givenName_whenCustomerWithNameFoundUsingApacheCommon_thenReturnCustomer() {\n        Customer james = findACustomerInGivenList.findUsingApacheCommon(\"James\", customers);\n\n        assertEquals(\"James\", james.getName());\n        assertEquals(2, james.getId());\n    }\n\n    @Test\n    public void givenName_whenCustomerWithNameNotFoundUsingApacheCommon_thenReturnNull() {\n        Customer john = findACustomerInGivenList.findUsingApacheCommon(\"John\", customers);\n\n        assertNull(john);\n    }\n\n    @Test\n    public void givenName_whenCustomerWithNameFoundUsingGuava_thenReturnCustomer() {\n        Customer james = findACustomerInGivenList.findUsingGuava(\"James\", customers);\n\n        assertEquals(\"James\", james.getName());\n        assertEquals(2, james.getId());\n    }\n\n    @Test\n    public void givenName_whenCustomerWithNameNotFoundUsingGuava_thenReturnNull() {\n        Customer john = findACustomerInGivenList.findUsingGuava(\"John\", customers);\n\n        assertNull(john);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.java.list;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\n\npublic class CustomList<E> implements List<E> {\n    private Object[] internal = {};\n\n    @Override\n    public boolean isEmpty() {\n        // the first cycle\n        // return true;\n\n        // the second cycle\n        // if (internal.length != 0) {\n        //     return false;\n        // } else {\n        //     return true;\n        // }\n\n        // refactoring\n        return internal.length == 0;\n    }\n\n    @Override\n    public int size() {\n        // the first cycle\n        // if (isEmpty()) {\n        //     return 0;\n        // } else {\n        //     return internal.length;\n        // }\n\n        // refactoring\n        return internal.length;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public E get(int index) {\n        // the first cycle\n        // return (E) internal[0];\n\n        // improvement\n        return (E) internal[index];\n    }\n\n    @Override\n    public boolean add(E element) {\n        // the first cycle\n        // internal = new Object[] { element };\n        // return true;\n\n        // the second cycle\n        Object[] temp = Arrays.copyOf(internal, internal.length + 1);\n        temp[internal.length] = element;\n        internal = temp;\n        return true;\n    }\n\n    @Override\n    public void add(int index, E element) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public boolean addAll(Collection<? extends E> collection) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public boolean addAll(int index, Collection<? extends E> collection) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public E remove(int index) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public boolean remove(Object object) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public boolean removeAll(Collection<?> collection) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public boolean retainAll(Collection<?> collection) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public boolean contains(Object object) {\n        for (Object element : internal) {\n            if (object.equals(element)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public boolean containsAll(Collection<?> collection) {\n        for (Object element : collection)\n            if (!contains(element)) {\n                return false;\n            }\n        return true;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public E set(int index, E element) {\n        E oldElement = (E) internal[index];\n        internal[index] = element;\n        return oldElement;\n    }\n\n    @Override\n    public void clear() {\n        internal = new Object[0];\n    }\n\n    @Override\n    public int indexOf(Object object) {\n        for (int i = 0; i < internal.length; i++) {\n            if (object.equals(internal[i])) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    @Override\n    public int lastIndexOf(Object object) {\n        for (int i = internal.length - 1; i >= 0; i--) {\n            if (object.equals(internal[i])) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public List<E> subList(int fromIndex, int toIndex) {\n        Object[] temp = new Object[toIndex - fromIndex];\n        System.arraycopy(internal, fromIndex, temp, 0, temp.length);\n        return (List<E>) Arrays.asList(temp);\n    }\n\n    @Override\n    public Object[] toArray() {\n        return Arrays.copyOf(internal, internal.length);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public <T> T[] toArray(T[] array) {\n        if (array.length < internal.length) {\n            return (T[]) Arrays.copyOf(internal, internal.length, array.getClass());\n        }\n\n        System.arraycopy(internal, 0, array, 0, internal.length);\n        if (array.length > internal.length) {\n            array[internal.length] = null;\n        }\n        return array;\n    }\n\n    @Override\n    public Iterator<E> iterator() {\n        return new CustomIterator();\n    }\n\n    @Override\n    public ListIterator<E> listIterator() {\n        return null;\n    }\n\n    @Override\n    public ListIterator<E> listIterator(int index) {\n        // ignored for brevity\n        return null;\n    }\n\n    private class CustomIterator implements Iterator<E> {\n        int index;\n\n        @Override\n        public boolean hasNext() {\n            return index != internal.length;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        @Override\n        public E next() {\n            E element = (E) CustomList.this.internal[index];\n            index++;\n            return element;\n        }\n    }\n}\n", "test_case": "package com.baeldung.java.list;\n\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.junit.Test;\n\npublic class CustomListUnitTest {\n     @Test\n     public void givenEmptyList_whenIsEmpty_thenTrueIsReturned() {\n         List<Object> list = new CustomList<>();\n    \n         assertTrue(list.isEmpty());\n     }\n     \n     @Test\n     public void givenNonEmptyList_whenIsEmpty_thenFalseIsReturned() {\n         List<Object> list = new CustomList<>();\n         list.add(null);\n      \n         assertFalse(list.isEmpty());\n     }\n     \n     @Test\n     public void givenListWithAnElement_whenSize_thenOneIsReturned() {\n         List<Object> list = new CustomList<>();\n         list.add(null);\n      \n         assertEquals(1, list.size());\n     }\n     \n     @Test\n     public void givenListWithAnElement_whenGet_thenThatElementIsReturned() {\n         List<Object> list = new CustomList<>();\n         list.add(\"baeldung\");\n         Object element = list.get(0);\n      \n         assertEquals(\"baeldung\", element);\n     }\n     \n     @Test\n     public void givenEmptyList_whenElementIsAdded_thenGetReturnsThatElement() {\n         List<Object> list = new CustomList<>();\n         boolean succeeded = list.add(null);\n      \n         assertTrue(succeeded);\n     }\n     \n     @Test\n     public void givenListWithAnElement_whenAnotherIsAdded_thenGetReturnsBoth() {\n         List<Object> list = new CustomList<>();\n         list.add(\"baeldung\");\n         list.add(\".com\");\n         Object element1 = list.get(0);\n         Object element2 = list.get(1);\n\n         assertEquals(\"baeldung\", element1);\n         assertEquals(\".com\", element2);\n     }\n    \n    @Test(expected = UnsupportedOperationException.class)\n    public void whenAddToSpecifiedIndex_thenExceptionIsThrown() {\n        new CustomList<>().add(0, null);\n    }\n\n    @Test(expected = UnsupportedOperationException.class)\n    public void whenAddAllToTheEnd_thenExceptionIsThrown() {\n        Collection<Object> collection = new ArrayList<>();\n        List<Object> list = new CustomList<>();\n        list.addAll(collection);\n    }\n\n    @Test(expected = UnsupportedOperationException.class)\n    public void whenAddAllToSpecifiedIndex_thenExceptionIsThrown() {\n        Collection<Object> collection = new ArrayList<>();\n        List<Object> list = new CustomList<>();\n        list.addAll(0, collection);\n    }\n\n    @Test(expected = UnsupportedOperationException.class)\n    public void whenRemoveAtSpecifiedIndex_thenExceptionIsThrown() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n        list.remove(0);\n    }\n\n    @Test(expected = UnsupportedOperationException.class)\n    public void whenRemoveSpecifiedElement_thenExceptionIsThrown() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n        list.remove(\"baeldung\");\n    }\n\n    @Test(expected = UnsupportedOperationException.class)\n    public void whenRemoveAll_thenExceptionIsThrown() {\n        Collection<Object> collection = new ArrayList<>();\n        collection.add(\"baeldung\");\n        List<Object> list = new CustomList<>();\n        list.removeAll(collection);\n    }\n\n    @Test(expected = UnsupportedOperationException.class)\n    public void whenRetainAll_thenExceptionIsThrown() {\n        Collection<Object> collection = new ArrayList<>();\n        collection.add(\"baeldung\");\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n        list.retainAll(collection);\n    }\n\n    @Test\n    public void givenEmptyList_whenContains_thenFalseIsReturned() {\n        List<Object> list = new CustomList<>();\n\n        assertFalse(list.contains(null));\n    }\n\n    @Test\n    public void givenListWithAnElement_whenContains_thenTrueIsReturned() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n\n        assertTrue(list.contains(\"baeldung\"));\n    }\n\n    @Test\n    public void givenListWithAnElement_whenContainsAll_thenTrueIsReturned() {\n        Collection<Object> collection = new ArrayList<>();\n        collection.add(\"baeldung\");\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n\n        assertTrue(list.containsAll(collection));\n    }\n\n    @Test\n    public void givenList_whenContainsAll_thenEitherTrueOrFalseIsReturned() {\n        Collection<Object> collection1 = new ArrayList<>();\n        collection1.add(\"baeldung\");\n        collection1.add(\".com\");\n        Collection<Object> collection2 = new ArrayList<>();\n        collection2.add(\"baeldung\");\n\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n\n        assertFalse(list.containsAll(collection1));\n        assertTrue(list.containsAll(collection2));\n    }\n\n    @Test\n    public void givenList_whenSet_thenOldElementIsReturned() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n        Object element = list.set(0, null);\n\n        assertEquals(\"baeldung\", element);\n        assertNull(list.get(0));\n    }\n\n    @Test\n    public void givenList_whenClear_thenAllElementsAreRemoved() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n        list.clear();\n\n        assertTrue(list.isEmpty());\n    }\n\n    @Test\n    public void givenList_whenIndexOf_thenIndexZeroIsReturned() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n\n        assertEquals(0, list.indexOf(\"baeldung\"));\n    }\n\n    @Test\n    public void givenList_whenIndexOf_thenPositiveIndexOrMinusOneIsReturned() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n        list.add(\".com\");\n        list.add(\".com\");\n\n        assertEquals(1, list.indexOf(\".com\"));\n        assertEquals(-1, list.indexOf(\"com\"));\n    }\n\n    @Test\n    public void whenLastIndexOf_thenIndexZeroIsReturned() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n\n        assertEquals(0, list.lastIndexOf(\"baeldung\"));\n    }\n\n    @Test\n    public void whenLastIndexOf_thenPositiveIndexOrMinusOneIsReturned() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n        list.add(\"baeldung\");\n        list.add(\".com\");\n\n        assertEquals(1, list.lastIndexOf(\"baeldung\"));\n        assertEquals(-1, list.indexOf(\"com\"));\n    }\n\n    @Test\n    public void whenSubListZeroToOne_thenListContainingFirstElementIsReturned() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n        List<Object> subList = list.subList(0, 1);\n\n        assertEquals(\"baeldung\", subList.get(0));\n    }\n\n    @Test\n    public void whenSubListOneToTwo_thenListContainingSecondElementIsReturned() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n        list.add(\".\");\n        list.add(\"com\");\n        List<Object> subList = list.subList(1, 2);\n\n        assertEquals(1, subList.size());\n        assertEquals(\".\", subList.get(0));\n    }\n\n    @Test\n    public void givenListWithElements_whenToArray_thenArrayContainsThose() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n        list.add(\".com\");\n        Object[] array = list.toArray();\n\n        assertArrayEquals(new Object[] { \"baeldung\", \".com\" }, array);\n    }\n\n    @Test\n    public void givenListWithAnElement_whenToArray_thenInputArrayIsReturned() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n        String[] input = new String[1];\n        String[] output = list.toArray(input);\n\n        assertArrayEquals(new String[] { \"baeldung\" }, input);\n    }\n\n    @Test\n    public void whenToArrayIsCalledWithEmptyInputArray_thenNewArrayIsReturned() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n        String[] input = {};\n        String[] output = list.toArray(input);\n\n        assertArrayEquals(new String[] { \"baeldung\" }, output);\n    }\n\n    @Test\n    public void whenToArrayIsCalledWithLargerInput_thenOutputHasTrailingNull() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n        String[] input = new String[2];\n        String[] output = list.toArray(input);\n\n        assertArrayEquals(new String[] { \"baeldung\", null }, output);\n    }\n\n    @Test\n    public void givenListWithOneElement_whenIterator_thenThisElementIsNext() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n        Iterator<Object> iterator = list.iterator();\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"baeldung\", iterator.next());\n    }\n\n    @Test\n    public void whenIteratorHasNextIsCalledTwice_thenTheSecondReturnsFalse() {\n        List<Object> list = new CustomList<>();\n        list.add(\"baeldung\");\n        Iterator<Object> iterator = list.iterator();\n\n        iterator.next();\n        assertFalse(iterator.hasNext());\n    }\n}\n"}
{"code_source": "package com.baeldung.java.list;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ListIterator;\n\nimport org.apache.commons.collections4.iterators.ReverseListIterator;\n\nimport com.google.common.collect.Lists;\n\n/**\n * Provides methods for iterating backward over a list.\n */\npublic class ReverseIterator {\n\n    /**\n     * Iterate using the for loop.\n     *\n     * @param list the list\n     */\n    public void iterateUsingForLoop(final List<String> list) {\n\n        for (int i = list.size(); i-- > 0; ) {\n            System.out.println(list.get(i));\n        }\n    }\n\n    /**\n     * Iterate using the Java {@link ListIterator}.\n     *\n     * @param list the list\n     */\n    public void iterateUsingListIterator(final List<String> list) {\n\n        final ListIterator listIterator = list.listIterator(list.size());\n        while (listIterator.hasPrevious()) {\n            System.out.println(listIterator.previous());\n        }\n    }\n\n    /**\n     * Iterate using Java {@link Collections} API.\n     *\n     * @param list the list\n     */\n    public void iterateUsingCollections(final List<String> list) {\n\n        Collections.reverse(list);\n        for (final String item : list) {\n            System.out.println(item);\n        }\n    }\n\n    /**\n     * Iterate using Apache Commons {@link ReverseListIterator}.\n     *\n     * @param list the list\n     */\n    public void iterateUsingApacheReverseListIterator(final List<String> list) {\n\n        final ReverseListIterator listIterator = new ReverseListIterator(list);\n        while (listIterator.hasNext()) {\n            System.out.println(listIterator.next());\n        }\n    }\n\n    /**\n     * Iterate using Guava {@link Lists} API.\n     *\n     * @param list the list\n     */\n    public void iterateUsingGuava(final List<String> list) {\n\n        final List<String> reversedList = Lists.reverse(list);\n        for (final String item : reversedList) {\n            System.out.println(item);\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.java.list;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ListIterator;\n\nimport org.apache.commons.collections4.iterators.ReverseListIterator;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport com.google.common.collect.Lists;\n\npublic class ReverseIteratorUnitTest {\n\n    private final ReverseIterator reverseIterator = new ReverseIterator();\n\n    private List<String> list;\n\n    private final String originalString = \"ABCDE\";\n\n    @BeforeEach\n    void setUp() {\n\n        list = Lists.newArrayList(\"A\", \"B\", \"C\", \"D\", \"E\");\n    }\n\n    @Test\n    void whenIteratingUsingForLoop_thenCorrect() {\n\n        String reverseString = \"\";\n        for (int i = list.size(); i-- > 0; ) {\n            reverseString += list.get(i);\n        }\n        assertEquals(reverseString, StringUtils.reverse(originalString));\n    }\n\n    @Test\n    void whenIteratingUsingListIterator_thenCorrect() {\n\n        String reverseString = \"\";\n        final ListIterator listIterator = list.listIterator(list.size());\n        while (listIterator.hasPrevious()) {\n            reverseString += listIterator.previous();\n        }\n        assertEquals(reverseString, StringUtils.reverse(originalString));\n    }\n\n    @Test\n    void whenIteratingUsingCollections_thenCorrect() {\n\n        String reverseString = \"\";\n        Collections.reverse(list);\n        for (final String item : list) {\n            reverseString += item;\n        }\n        assertEquals(reverseString, StringUtils.reverse(originalString));\n\n        assertEquals(\"E\", list.get(0));\n    }\n\n    @Test\n    void whenIteratingUsingApacheReverseListIterator_thenCorrect() {\n\n        String reverseString = \"\";\n        final ReverseListIterator listIterator = new ReverseListIterator(list);\n        while (listIterator.hasNext()) {\n            reverseString += listIterator.next();\n        }\n        assertEquals(reverseString, StringUtils.reverse(originalString));\n    }\n\n    @Test\n    void whenIteratingUsingGuava_thenCorrect() {\n\n        String reverseString = \"\";\n        final List<String> reversedList = Lists.reverse(list);\n        for (final String item : reversedList) {\n            reverseString += item;\n        }\n        assertEquals(reverseString, StringUtils.reverse(originalString));\n\n        assertEquals(\"A\", list.get(0));\n    }\n}"}
{"code_source": "package com.baeldung.list.removeall;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.stream.Collectors;\n\npublic class RemoveAll {\n\n    static void removeWithWhileLoopPrimitiveElement(List<Integer> list, int element) {\n        while (list.contains(element)) {\n            list.remove(element);\n        }\n    }\n\n    static void removeWithWhileLoopNonPrimitiveElement(List<Integer> list, Integer element) {\n        while (list.contains(element)) {\n            list.remove(element);\n        }\n    }\n\n    static void removeWithWhileLoopStoringFirstOccurrenceIndex(List<Integer> list, Integer element) {\n        int index;\n        while ((index = list.indexOf(element)) >= 0) {\n            list.remove(index);\n        }\n    }\n\n    static void removeWithCallingRemoveUntilModifies(List<Integer> list, Integer element) {\n        while (list.remove(element))\n            ;\n    }\n\n    static void removeWithStandardForLoopUsingIndex(List<Integer> list, int element) {\n        for (int i = 0; i < list.size(); i++) {\n            if (Objects.equals(element, list.get(i))) {\n                list.remove(i);\n            }\n        }\n    }\n\n    static void removeWithForLoopDecrementOnRemove(List<Integer> list, int element) {\n        for (int i = 0; i < list.size(); i++) {\n            if (Objects.equals(element, list.get(i))) {\n                list.remove(i);\n                i--;\n            }\n        }\n    }\n\n    static void removeWithForLoopIncrementIfRemains(List<Integer> list, int element) {\n        for (int i = 0; i < list.size();) {\n            if (Objects.equals(element, list.get(i))) {\n                list.remove(i);\n            } else {\n                i++;\n            }\n        }\n    }\n\n    static void removeWithForEachLoop(List<Integer> list, int element) {\n        for (Integer number : list) {\n            if (Objects.equals(number, element)) {\n                list.remove(number);\n            }\n        }\n    }\n\n    static void removeWithIterator(List<Integer> list, int element) {\n        for (Iterator<Integer> i = list.iterator(); i.hasNext();) {\n            Integer number = i.next();\n            if (Objects.equals(number, element)) {\n                i.remove();\n            }\n        }\n    }\n\n    static List<Integer> removeWithCollectingAndReturningRemainingElements(List<Integer> list, int element) {\n        List<Integer> remainingElements = new ArrayList<>();\n        for (Integer number : list) {\n            if (!Objects.equals(number, element)) {\n                remainingElements.add(number);\n            }\n        }\n        return remainingElements;\n    }\n\n    static void removeWithCollectingRemainingElementsAndAddingToOriginalList(List<Integer> list, int element) {\n        List<Integer> remainingElements = new ArrayList<>();\n        for (Integer number : list) {\n            if (!Objects.equals(number, element)) {\n                remainingElements.add(number);\n            }\n        }\n\n        list.clear();\n        list.addAll(remainingElements);\n    }\n\n    static List<Integer> removeWithStreamFilter(List<Integer> list, Integer element) {\n        return list.stream()\n            .filter(e -> !Objects.equals(e, element))\n            .collect(Collectors.toList());\n    }\n\n    static void removeWithRemoveIf(List<Integer> list, Integer element) {\n        list.removeIf(n -> Objects.equals(n, element));\n    }\n\n}\n", "test_case": "package com.baeldung.list.removeall;\n\nimport static com.baeldung.list.removeall.RemoveAll.removeWithCallingRemoveUntilModifies;\nimport static com.baeldung.list.removeall.RemoveAll.removeWithCollectingAndReturningRemainingElements;\nimport static com.baeldung.list.removeall.RemoveAll.removeWithCollectingRemainingElementsAndAddingToOriginalList;\nimport static com.baeldung.list.removeall.RemoveAll.removeWithForEachLoop;\nimport static com.baeldung.list.removeall.RemoveAll.removeWithForLoopDecrementOnRemove;\nimport static com.baeldung.list.removeall.RemoveAll.removeWithForLoopIncrementIfRemains;\nimport static com.baeldung.list.removeall.RemoveAll.removeWithIterator;\nimport static com.baeldung.list.removeall.RemoveAll.removeWithRemoveIf;\nimport static com.baeldung.list.removeall.RemoveAll.removeWithStandardForLoopUsingIndex;\nimport static com.baeldung.list.removeall.RemoveAll.removeWithStreamFilter;\nimport static com.baeldung.list.removeall.RemoveAll.removeWithWhileLoopNonPrimitiveElement;\nimport static com.baeldung.list.removeall.RemoveAll.removeWithWhileLoopPrimitiveElement;\nimport static com.baeldung.list.removeall.RemoveAll.removeWithWhileLoopStoringFirstOccurrenceIndex;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.ConcurrentModificationException;\nimport java.util.List;\n\nimport org.junit.Test;\n\npublic class RemoveAllUnitTest {\n\n\tprivate List<Integer> list(Integer... elements) {\n\t\treturn new ArrayList<>(Arrays.asList(elements));\n\t}\n\n\t@Test\n\tpublic void givenAList_whenRemovingElementsWithWhileLoopUsingPrimitiveElement_thenTheResultCorrect() {\n\t\t// given\n\t\tList<Integer> list = list(1, 2, 3);\n\t\tint valueToRemove = 1;\n\n\t\t// when\n\t\tassertThatThrownBy(() -> removeWithWhileLoopPrimitiveElement(list, valueToRemove))\n\t\t\t\t.isInstanceOf(IndexOutOfBoundsException.class);\n\t}\n\n\t@Test\n\tpublic void givenAList_whenRemovingElementsWithWhileLoopUsingNonPrimitiveElement_thenTheResultCorrect() {\n\t\t// given\n\t\tList<Integer> list = list(1, 2, 3);\n\t\tint valueToRemove = 1;\n\n\t\t// when\n\t\tremoveWithWhileLoopNonPrimitiveElement(list, valueToRemove);\n\n\t\t// then\n\t\tassertThat(list).isEqualTo(list(2, 3));\n\t}\n\n\t@Test\n\tpublic void givenAList_whenRemovingElementsWithWhileLoopStoringFirstOccurrenceIndex_thenTheResultCorrect() {\n\t\t// given\n\t\tList<Integer> list = list(1, 2, 3);\n\t\tint valueToRemove = 1;\n\n\t\t// when\n\t\tremoveWithWhileLoopStoringFirstOccurrenceIndex(list, valueToRemove);\n\n\t\t// then\n\t\tassertThat(list).isEqualTo(list(2, 3));\n\t}\n\n\t@Test\n\tpublic void givenAList_whenRemovingElementsWithCallingRemoveUntilModifies_thenTheResultIsCorrect() {\n\t\t// given\n\t\tList<Integer> list = list(1, 1, 2, 3);\n\t\tint valueToRemove = 1;\n\n\t\t// when\n\t\tremoveWithCallingRemoveUntilModifies(list, valueToRemove);\n\n\t\t// then\n\t\tassertThat(list).isEqualTo(list(2, 3));\n\t}\n\n\t@Test\n\tpublic void givenAListWithoutDuplication_whenRemovingElementsWithStandardForLoopUsingIndex_thenTheResultIsCorrect() {\n\t\t// given\n\t\tList<Integer> list = list(1, 2, 3);\n\t\tint valueToRemove = 1;\n\n\t\t// when\n\t\tremoveWithStandardForLoopUsingIndex(list, valueToRemove);\n\n\t\t// then\n\t\tassertThat(list).isEqualTo(list(2, 3));\n\t}\n\n\t@Test\n\tpublic void givenAListWithAdjacentElements_whenRemovingElementsWithStandardForLoop_thenTheResultIsInCorrect() {\n\t\t// given\n\t\tList<Integer> list = list(1, 1, 2, 3);\n\t\tint valueToRemove = 1;\n\n\t\t// when\n\t\tremoveWithStandardForLoopUsingIndex(list, valueToRemove);\n\n\t\t// then\n\t\tassertThat(list).isEqualTo(list(1, 2, 3));\n\t}\n\n\t@Test\n\tpublic void givenAListWithAdjacentElements_whenRemovingElementsWithForLoopAndDecrementOnRemove_thenTheResultIsCorrect() {\n\t\t// given\n\t\tList<Integer> list = list(1, 1, 2, 3);\n\t\tint valueToRemove = 1;\n\n\t\t// when\n\t\tremoveWithForLoopDecrementOnRemove(list, valueToRemove);\n\n\t\t// then\n\t\tassertThat(list).isEqualTo(list(2, 3));\n\t}\n\n\t@Test\n\tpublic void givenAListWithAdjacentElements_whenRemovingElementsWithForLoopAndIncrementIfRemains_thenTheResultIsCorrect() {\n\t\t// given\n\t\tList<Integer> list = list(1, 1, 2, 3);\n\t\tint valueToRemove = 1;\n\n\t\t// when\n\t\tremoveWithForLoopIncrementIfRemains(list, valueToRemove);\n\n\t\t// then\n\t\tassertThat(list).isEqualTo(list(2, 3));\n\t}\n\n\t@Test\n\tpublic void givenAList_whenRemovingElementsWithForEachLoop_thenExceptionIsThrown() {\n\t\t// given\n\t\tList<Integer> list = list(1, 1, 2, 3);\n\t\tint valueToRemove = 1;\n\n\t\t// when\n\t\tassertThatThrownBy(() -> removeWithForEachLoop(list, valueToRemove))\n\t\t\t\t.isInstanceOf(ConcurrentModificationException.class);\n\t}\n\n\t@Test\n\tpublic void givenAList_whenRemovingElementsWithIterator_thenTheResultIsCorrect() {\n\t\t// given\n\t\tList<Integer> list = list(1, 1, 2, 3);\n\t\tint valueToRemove = 1;\n\n\t\t// when\n\t\tremoveWithIterator(list, valueToRemove);\n\n\t\t// then\n\t\tassertThat(list).isEqualTo(list(2, 3));\n\t}\n\n\t@Test\n\tpublic void givenAList_whenRemovingElementsWithCollectingAndReturningRemainingElements_thenTheResultIsCorrect() {\n\t\t// given\n\t\tList<Integer> list = list(1, 1, 2, 3);\n\t\tint valueToRemove = 1;\n\n\t\t// when\n\t\tList<Integer> result = removeWithCollectingAndReturningRemainingElements(list, valueToRemove);\n\n\t\t// then\n\t\tassertThat(result).isEqualTo(list(2, 3));\n\t}\n\n\t@Test\n\tpublic void givenAList_whenRemovingElementsWithCollectingRemainingAndAddingToOriginalList_thenTheResultIsCorrect() {\n\t\t// given\n\t\tList<Integer> list = list(1, 1, 2, 3);\n\t\tint valueToRemove = 1;\n\n\t\t// when\n\t\tremoveWithCollectingRemainingElementsAndAddingToOriginalList(list, valueToRemove);\n\n\t\t// then\n\t\tassertThat(list).isEqualTo(list(2, 3));\n\t}\n\n\t@Test\n\tpublic void givenAList_whenRemovingElementsWithStreamFilter_thenTheResultIsCorrect() {\n\t\t// given\n\t\tList<Integer> list = list(1, 1, 2, 3);\n\t\tint valueToRemove = 1;\n\n\t\t// when\n\t\tList<Integer> result = removeWithStreamFilter(list, valueToRemove);\n\n\t\t// then\n\t\tassertThat(result).isEqualTo(list(2, 3));\n\t}\n\n\t@Test\n\tpublic void givenAList_whenRemovingElementsWithCallingRemoveIf_thenTheResultIsCorrect() {\n\t\t// given\n\t\tList<Integer> list = list(1, 1, 2, 3);\n\t\tint valueToRemove = 1;\n\n\t\t// when\n\t\tremoveWithRemoveIf(list, valueToRemove);\n\n\t\t// then\n\t\tassertThat(list).isEqualTo(list(2, 3));\n\t}\n\n}\n"}
{"code_source": "package com.baeldung.java.list;\n\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\n\n/**\n *  Demonstrates the different ways to loop over\n *  the elements of a list.\n */\npublic class WaysToIterate {\n\n    List<String> countries = Arrays.asList(\"Germany\", \"Panama\", \"Australia\");\n\n    /**\n     * Iterate over a list using a basic for loop\n     */\n    public void iterateWithForLoop() {\n        for (int i = 0; i < countries.size(); i++) {\n            System.out.println(countries.get(i));\n        }\n    }\n\n    /**\n     * Iterate over a list using the enhanced for loop\n     */\n    public void iterateWithEnhancedForLoop() {\n        for (String country : countries) {\n            System.out.println(country);\n        }\n    }\n\n    /**\n     * Iterate over a list using an Iterator\n     */\n    public void iterateWithIterator() {\n        Iterator<String> countriesIterator = countries.iterator();\n        while(countriesIterator.hasNext()) {\n            System.out.println(countriesIterator.next());\n        }\n    }\n\n    /**\n     * Iterate over a list using a ListIterator\n     */\n    public void iterateWithListIterator() {\n        ListIterator<String> listIterator = countries.listIterator();\n        while(listIterator.hasNext()) {\n            System.out.println(listIterator.next());\n        }\n    }\n\n    /**\n     * Iterate over a list using the Iterable.forEach() method\n     */\n    public void iterateWithForEach() {\n        countries.forEach(System.out::println);\n    }\n\n    /**\n     * Iterate over a list using the Stream.forEach() method\n     */\n    public void iterateWithStreamForEach() {\n        countries.stream().forEach((c) -> System.out.println(c));\n    }\n}", "test_case": "package com.baeldung.java.list;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\n\nimport org.junit.Test;\n\npublic class WaysToIterateUnitTest {\n\n    List<String> globalCountries = new ArrayList<String>();\n    List<String> europeanCountries = Arrays.asList(\"Germany\", \"Panama\", \"Australia\");\n\n    @Test\n    public void whenIteratingUsingForLoop_thenReturnThreeAsSizeOfList() {\n        for (int i = 0; i < europeanCountries.size(); i++) {\n            globalCountries.add(europeanCountries.get(i));\n        }\n        assertEquals(globalCountries.size(), 3);\n        globalCountries.clear();\n    }\n\n    @Test\n    public void whenIteratingUsingEnhancedForLoop_thenReturnThreeAsSizeOfList() {\n        for (String country : europeanCountries) {\n            globalCountries.add(country);\n        }\n        assertEquals(globalCountries.size(), 3);\n        globalCountries.clear();\n    }\n\n    @Test\n    public void whenIteratingUsingIterator_thenReturnThreeAsSizeOfList() {\n        Iterator<String> countriesIterator = europeanCountries.iterator();\n        while (countriesIterator.hasNext()) {\n            globalCountries.add(countriesIterator.next());\n        }\n\n        assertEquals(globalCountries.size(), 3);\n        globalCountries.clear();\n    }\n\n    @Test\n    public void whenIteratingUsingListIterator_thenReturnThreeAsSizeOfList() {\n        ListIterator<String> countriesIterator = europeanCountries.listIterator();\n        while (countriesIterator.hasNext()) {\n            globalCountries.add(countriesIterator.next());\n        }\n\n        assertEquals(globalCountries.size(), 3);\n        globalCountries.clear();\n    }\n\n    @Test\n    public void whenIteratingUsingForEach_thenReturnThreeAsSizeOfList() {\n        europeanCountries.forEach(country -> globalCountries.add(country));\n        assertEquals(globalCountries.size(), 3);\n        globalCountries.clear();\n    }\n\n    @Test\n    public void whenIteratingUsingStreamForEach_thenReturnThreeAsSizeOfList() {\n        europeanCountries.stream().forEach((country) -> globalCountries.add(country));\n        assertEquals(globalCountries.size(), 3);\n        globalCountries.clear();\n    }\n}"}
{"code_source": "package com.baeldung.allequalelements;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport org.apache.commons.collections4.IterableUtils;\nimport com.google.common.base.Predicate;\nimport com.google.common.collect.Iterables;\n\npublic class VerifyAllEqualListElements {\n\n    public boolean verifyAllEqualUsingALoop(List<String> list) {\n        for (String s : list) {\n            if (!s.equals(list.get(0)))\n                return false;\n        }\n        return true;\n    }\n\n    public boolean verifyAllEqualUsingHashSet(List<String> list) {\n        return new HashSet<String>(list).size() <= 1;\n    }\n\n    public boolean verifyAllEqualUsingFrequency(List<String> list) {\n        return list.isEmpty() || Collections.frequency(list, list.get(0)) == list.size();\n    }\n\n    public boolean verifyAllEqualUsingStream(List<String> list) {\n        return list.stream()\n            .distinct()\n            .count() <= 1;\n    }\n\n    public boolean verifyAllEqualAnotherUsingStream(List<String> list) {\n        return list.isEmpty() || list.stream()\n            .allMatch(list.get(0)::equals);\n    }\n\n    public boolean verifyAllEqualUsingGuava(List<String> list) {\n        return Iterables.all(list, new Predicate<String>() {\n            public boolean apply(String s) {\n                return s.equals(list.get(0));\n            }\n        });\n    }\n\n    public boolean verifyAllEqualUsingApacheCommon(List<String> list) {\n        return IterableUtils.matchesAll(list, new org.apache.commons.collections4.Predicate<String>() {\n            public boolean evaluate(String s) {\n                return s.equals(list.get(0));\n            }\n        });\n    }\n\n}", "test_case": "package com.baeldung.allequalelements;\n\nimport org.junit.Test;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class VerifyAllEqualListElementsUnitTest {\n\n    private static List<String> notAllEqualList = new ArrayList<>();\n\n    private static List<String> emptyList = new ArrayList<>();\n\n    private static List<String> allEqualList = new ArrayList<>();\n\n    static {\n        notAllEqualList = Arrays.asList(\"Jack\", \"James\", \"Sam\", \"James\");\n        emptyList = Arrays.asList();\n        allEqualList = Arrays.asList(\"Jack\", \"Jack\", \"Jack\", \"Jack\");\n    }\n\n    private static VerifyAllEqualListElements verifyAllEqualListElements = new VerifyAllEqualListElements();\n\n    @Test\n    public void givenNotAllEqualList_whenUsingALoop_thenReturnFalse() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingALoop(notAllEqualList);\n\n        assertFalse(allEqual);\n    }\n\n    @Test\n    public void givenEmptyList_whenUsingALoop_thenReturnTrue() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingALoop(emptyList);\n\n        assertTrue(allEqual);\n    }\n\n    @Test\n    public void givenAllEqualList_whenUsingALoop_thenReturnTrue() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingALoop(allEqualList);\n\n        assertTrue(allEqual);\n    }\n\n    @Test\n    public void givenNotAllEqualList_whenUsingHashSet_thenReturnFalse() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingHashSet(notAllEqualList);\n\n        assertFalse(allEqual);\n    }\n\n    @Test\n    public void givenEmptyList_whenUsingHashSet_thenReturnTrue() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingHashSet(emptyList);\n\n        assertTrue(allEqual);\n    }\n\n    @Test\n    public void givenAllEqualList_whenUsingHashSet_thenReturnTrue() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingHashSet(allEqualList);\n\n        assertTrue(allEqual);\n    }\n\n    @Test\n    public void givenNotAllEqualList_whenUsingFrequency_thenReturnFalse() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingFrequency(notAllEqualList);\n\n        assertFalse(allEqual);\n    }\n\n    @Test\n    public void givenEmptyList_whenUsingFrequency_thenReturnTrue() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingFrequency(emptyList);\n\n        assertTrue(allEqual);\n    }\n\n    @Test\n    public void givenAllEqualList_whenUsingFrequency_thenReturnTrue() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingFrequency(allEqualList);\n\n        assertTrue(allEqual);\n    }\n\n    @Test\n    public void givenNotAllEqualList_whenUsingStream_thenReturnFalse() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingStream(notAllEqualList);\n\n        assertFalse(allEqual);\n    }\n\n    @Test\n    public void givenEmptyList_whenUsingStream_thenReturnTrue() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingStream(emptyList);\n\n        assertTrue(allEqual);\n    }\n\n    @Test\n    public void givenAllEqualList_whenUsingStream_thenReturnTrue() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingStream(allEqualList);\n\n        assertTrue(allEqual);\n    }\n\n    @Test\n    public void givenNotAllEqualList_whenUsingAnotherStream_thenReturnFalse() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualAnotherUsingStream(notAllEqualList);\n\n        assertFalse(allEqual);\n    }\n\n    @Test\n    public void givenEmptyList_whenUsingAnotherStream_thenReturnTrue() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualAnotherUsingStream(emptyList);\n\n        assertTrue(allEqual);\n    }\n\n    @Test\n    public void givenAllEqualList_whenUsingAnotherStream_thenReturnTrue() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualAnotherUsingStream(allEqualList);\n\n        assertTrue(allEqual);\n    }\n\n    @Test\n    public void givenNotAllEqualList_whenUsingGuava_thenReturnFalse() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingGuava(notAllEqualList);\n\n        assertFalse(allEqual);\n    }\n\n    @Test\n    public void givenEmptyList_whenUsingGuava_thenReturnTrue() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingGuava(emptyList);\n\n        assertTrue(allEqual);\n    }\n\n    @Test\n    public void givenAllEqualList_whenUsingGuava_thenReturnTrue() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingGuava(allEqualList);\n\n        assertTrue(allEqual);\n    }\n\n    @Test\n    public void givenNotAllEqualList_whenUsingApacheCommon_thenReturnFalse() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingApacheCommon(notAllEqualList);\n\n        assertFalse(allEqual);\n    }\n\n    @Test\n    public void givenEmptyList_whenUsingApacheCommon_thenReturnTrue() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingApacheCommon(emptyList);\n\n        assertTrue(allEqual);\n    }\n\n    @Test\n    public void givenAllEqualList_whenUsingApacheCommon_thenReturnTrue() {\n        boolean allEqual = verifyAllEqualListElements.verifyAllEqualUsingApacheCommon(allEqualList);\n\n        assertTrue(allEqual);\n    }\n}\n"}
{"code_source": "package com.baeldung.java.list;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class CopyListService {\n\n    public List<Flower> copyListByConstructor(List<Flower> source) {\n        return new ArrayList<Flower>(source);\n    }\n\n    public List<Flower> copyListByConstructorAndEditOneFlowerInTheNewList(List<Flower> source) {\n        List<Flower> flowers = new ArrayList<>(source);\n        if(flowers.size() > 0) {\n            flowers.get(0).setPetals(flowers.get(0).getPetals() * 3);\n        }\n\n        return flowers;\n    }\n\n    public List<Flower> copyListByAddAllMethod(List<Flower> source) {\n        List<Flower> flowers = new ArrayList<>();\n        flowers.addAll(source);\n        return flowers;\n    }\n\n    public List<Flower> copyListByAddAllMethodAndEditOneFlowerInTheNewList(List<Flower> source) {\n        List<Flower> flowers = new ArrayList<>();\n        flowers.addAll(source);\n\n        if(flowers.size() > 0) {\n            flowers.get(0).setPetals(flowers.get(0).getPetals() * 3);\n        }\n\n        return flowers;\n    }\n\n    public List<Integer> copyListByCopyMethod(List<Integer> source, List<Integer> dest) {\n        Collections.copy(dest, source);\n        return dest;\n    }\n\n    public List<Flower> copyListByStream(List<Flower> source) {\n        return source.stream().collect(Collectors.toList());\n    }\n\n    public List<Flower> copyListByStreamAndSkipFirstElement(List<Flower> source) {\n        return source.stream().skip(1).collect(Collectors.toList());\n    }\n\n    public List<Flower> copyListByStreamWithFilter(List<Flower> source, Integer moreThanPetals) {\n        return source.stream().filter(f -> f.getPetals() > moreThanPetals).collect(Collectors.toList());\n    }\n\n    public List<Flower> copyListByStreamWithOptional(List<Flower> source) {\n        return Optional.ofNullable(source)\n                 .map(List::stream)\n                 .orElseGet(Stream::empty)\n                 .collect(Collectors.toList());\n    }\n\n    public List<Flower> copyListByStreamWithOptionalAndSkip(List<Flower> source) {\n        return Optional.ofNullable(source)\n                .map(List::stream)\n                .orElseGet(Stream::empty)\n                .skip(1)\n                .collect(Collectors.toList());\n    }\n}\n", "test_case": "package com.baeldung.java.list;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class CopyListServiceUnitTest {\n\n    List<Flower> flowers;\n\n    private CopyListService copyListService;\n\n    @Before\n    public void init() {\n        this.copyListService = new CopyListService();\n        this.flowers = new ArrayList<>();\n\n        Flower poppy = new Flower(\"Poppy\", 12);\n        flowers.add(poppy);\n        Flower anemone = new Flower(\"Anemone\", 8);\n        flowers.add(anemone);\n        Flower catmint = new Flower(\"Catmint\", 12);\n        flowers.add(catmint);\n        Flower diascia = new Flower(\"Diascia\", 5);\n        flowers.add(diascia);\n        Flower iris = new Flower(\"Iris\", 3);\n        flowers.add(iris);\n        Flower pansy = new Flower(\"Pansy\", 5);\n        flowers.add(pansy);\n    }\n\n    @Test\n    public void givenAList_whenListDoesNotHaveNullElements_thenReturnAnotherListWithTheSameElementsByConstructor() {\n        List<Flower> copy = copyListService.copyListByConstructor(flowers);\n        assertEquals(copy.size(), flowers.size());\n        assertTrue(copy.containsAll(flowers));\n    }\n\n    @Test\n    public void givenAList_whenListDoesNotHaveNullElements_thenReturnAnotherListWithOneModifiedElementByConstructor() {\n        List<Flower> copy = copyListService.copyListByConstructorAndEditOneFlowerInTheNewList(flowers);\n        assertEquals(copy.size(), flowers.size());\n        assertTrue(copy.containsAll(flowers));\n    }\n\n    @Test\n    public void givenAList_whenListDoesNotHaveNullElements_thenReturnAnotherListWithTheSameElementsByAddAllmethod() {\n        List<Flower> copy = copyListService.copyListByAddAllMethod(flowers);\n        assertEquals(copy.size(), flowers.size());\n        assertTrue(copy.containsAll(flowers));\n    }\n\n    @Test\n    public void givenAList_whenListDoesNotHaveNullElements_thenReturnAnotherListWithOneModifiedElementByAddAllmethod() {\n        List<Flower> copy = copyListService.copyListByAddAllMethodAndEditOneFlowerInTheNewList(flowers);\n        assertEquals(copy.size(), flowers.size());\n        assertTrue(copy.containsAll(flowers));\n    }\n\n    @Test\n    public void givenAList_whenListsHaveSameSize_thenReturnAnotherListWithTheSameElementsByCopyMethod() {\n        List<Integer> source = Arrays.asList(1,2,3);\n        List<Integer> dest = Arrays.asList(4,5,6);\n\n        dest = copyListService.copyListByCopyMethod(source, dest);\n        assertEquals(dest.size(), source.size());\n        assertTrue(dest.containsAll(source));\n    }\n\n    @Test\n    public void givenAList_whenListsHaveDifferentSize_thenReturnAnotherListWithTheSameElementsByCopyMethod() {\n        List<Integer> source = Arrays.asList(1,2,3);\n        List<Integer> dest = Arrays.asList(5,6,7,8,9,10);\n\n        dest = copyListService.copyListByCopyMethod(source, dest);\n        assertNotEquals(dest.size(), source.size());\n        assertTrue(dest.containsAll(source));\n    }\n\n    @Test\n    public void givenAList_whenListDoesNotHaveNullElements_thenReturnAnotherListWithTheSameElementsByStreamProcess() {\n        List<Flower> copy = copyListService.copyListByStream(flowers);\n        assertEquals(copy.size(), flowers.size());\n        assertTrue(copy.containsAll(flowers));\n    }\n\n    @Test\n    public void givenAList_whenListDoesNotHaveNullElements_thenReturnAnotherListWithOneElementLessByStreamProcess() {\n        List<Flower> copy = copyListService.copyListByStreamAndSkipFirstElement(flowers);\n        assertNotEquals(copy.size(), flowers.size());\n        assertEquals(copy.size() + 1, flowers.size());\n        assertFalse(copy.containsAll(flowers));\n    }\n\n    @Test\n    public void givenAList_whenListDoesNotHaveNullElements_thenReturnAnotherListWithFilterElementsByStreamProcess() {\n        List<Flower> copy = copyListService.copyListByStreamWithFilter(flowers, 5);\n        assertNotEquals(copy.size(), flowers.size());\n        assertEquals(copy.size() + 3, flowers.size());\n        assertFalse(copy.containsAll(flowers));\n    }\n\n    @Test\n    public void givenAList_whenListIsNull_thenReturnEmptyListByStreamProcess() {\n        List<Flower> copy = copyListService.copyListByStreamWithOptional(null);\n        assertNotNull(copy);\n        assertEquals(copy.size(), 0);\n    }\n\n    @Test\n    public void givenAList_whenListIsNotNull_thenReturnAnotherListWithTheElementsByStreamProcess() {\n        List<Flower> copy = copyListService.copyListByStreamWithOptional(flowers);\n        assertEquals(copy.size(), flowers.size());\n        assertTrue(copy.containsAll(flowers));\n    }\n\n    @Test\n    public void givenAList_whenListIsNotNull_thenReturnAnotherListWithOneElementLessByStreamProcess() {\n        List<Flower> copy = copyListService.copyListByStreamWithOptionalAndSkip(flowers);\n        assertNotEquals(copy.size(), flowers.size());\n        assertEquals(copy.size() + 1, flowers.size());\n        assertFalse(copy.containsAll(flowers));\n    }\n}\n"}
{"code_source": "package com.baeldung.list.duplicatescounter;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\n/**\n * Demo different approaches to get count of duplicated elements in an\n * arrayList\n */\npublic class DuplicatesCounter {\n\n    public static <T> Map<T, Long> countByClassicalLoop(List<T> inputList) {\n        Map<T, Long> resultMap = new HashMap<>();\n        for (T element : inputList) {\n            if (resultMap.containsKey(element)) {\n                resultMap.put(element, resultMap.get(element) + 1L);\n            } else {\n                resultMap.put(element, 1L);\n            }\n        }\n        return resultMap;\n    }\n\n    public static <T> Map<T, Long> countByForEachLoopWithGetOrDefault(List<T> inputList) {\n        Map<T, Long> resultMap = new HashMap<>();\n        inputList.forEach(e -> resultMap.put(e, resultMap.getOrDefault(e, 0L) + 1L));\n        return resultMap;\n    }\n\n    public static <T> Map<T, Long> countByForEachLoopWithMapCompute(List<T> inputList) {\n        Map<T, Long> resultMap = new HashMap<>();\n        inputList.forEach(e -> resultMap.compute(e, (k, v) -> v == null ? 1L : v + 1L));\n        return resultMap;\n    }\n\n    public static <T> Map<T, Long> countByForEachLoopWithMapMerge(List<T> inputList) {\n        Map<T, Long> resultMap = new HashMap<>();\n        inputList.forEach(e -> resultMap.merge(e, 1L, Long::sum));\n        return resultMap;\n    }\n\n    public static <T> Map<T, Long> countByStreamToMap(List<T> inputList) {\n        return inputList.stream().collect(Collectors.toMap(Function.identity(), v -> 1L, Long::sum));\n    }\n\n    public static <T> Map<T, Long> countByStreamGroupBy(List<T> inputList) {\n        return inputList.stream().collect(Collectors.groupingBy(k -> k, Collectors.counting()));\n    }\n}\n", "test_case": "package com.baeldung.list.duplicatescounter;\n\nimport org.assertj.core.util.Lists;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.data.MapEntry.entry;\n\nclass DuplicatesCounterUnitTest {\n\n    private static List<String> INPUT_LIST = Lists.list(\n        \"expect1\",\n        \"expect2\", \"expect2\",\n        \"expect3\", \"expect3\", \"expect3\",\n        \"expect4\", \"expect4\", \"expect4\", \"expect4\");\n\n    @Test\n    void givenInput_whenCountByClassicalLoop_thenGetResultMap() {\n        Map<String, Long> result = DuplicatesCounter.countByClassicalLoop(INPUT_LIST);\n        verifyResult(result);\n    }\n\n    @Test\n    void givenInput_whenCountByForEachLoopWithGetOrDefault_thenGetResultMap() {\n        Map<String, Long> result = DuplicatesCounter.countByForEachLoopWithGetOrDefault(INPUT_LIST);\n        verifyResult(result);\n    }\n\n    @Test\n    void givenInput_whenCountByForEachLoopWithMapCompute_thenGetResultMap() {\n        Map<String, Long> result = DuplicatesCounter.countByForEachLoopWithMapCompute(INPUT_LIST);\n        verifyResult(result);\n    }\n\n    @Test\n    void givenInput_whenCountByForEachLoopWithMapMerge_thenGetResultMap() {\n        Map<String, Long> result = DuplicatesCounter.countByForEachLoopWithMapMerge(INPUT_LIST);\n        verifyResult(result);\n    }\n\n    @Test\n    void givenInput_whenCountByStreamToMap_thenGetResultMap() {\n        Map<String, Long> result = DuplicatesCounter.countByStreamToMap(INPUT_LIST);\n        verifyResult(result);\n    }\n\n    @Test\n    void givenInput_whenCountByStreamGroupBy_thenGetResultMap() {\n        Map<String, Long> result = DuplicatesCounter.countByStreamGroupBy(INPUT_LIST);\n        verifyResult(result);\n    }\n\n    private void verifyResult(Map<String, Long> resultMap) {\n        assertThat(resultMap)\n            .isNotEmpty().hasSize(4)\n            .containsExactly(\n                entry(\"expect1\", 1L),\n                entry(\"expect2\", 2L),\n                entry(\"expect3\", 3L),\n                entry(\"expect4\", 4L));\n    }\n}"}
{"code_source": "package com.baeldung.list.reverse;\n\nimport java.util.List;\n\npublic class ReverseArrayList {\n    private ReverseArrayList() {\n        throw new RuntimeException(\"This class cannot be instantiated.\");\n    }\n\n    public static <T> void reverseWithRecursion(List<T> list) {\n        if (list.size() > 1) {\n            T value = list.remove(0);\n            reverseWithRecursion(list);\n            list.add(value);\n        }\n    }\n\n    public static <T> void reverseWithLoop(List<T> list) {\n        for (int i = 0, j = list.size() - 1; i < j; i++) {\n            list.add(i, list.remove(j));\n        }\n    }\n}\n", "test_case": "package com.baeldung.list.reverse;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nclass ReverseArrayListUnitTest {\n\n    private static final List<Integer> EXPECTED = new ArrayList<>(Arrays.asList(7, 6, 5, 4, 3, 2, 1));\n\n    @Test\n    void givenArrayList_whenCallReverseMethod_thenListReversedInPlace() {\n        List<Integer> aList = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7));\n        Collections.reverse(aList);\n        assertThat(aList).isEqualTo(EXPECTED);\n    }\n\n    @Test\n    void givenArrayList_whenCallReverseMethod_thenListReversedAsaNewList() {\n        List<Integer> originalList = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7));\n        List<Integer> aNewList = new ArrayList<>(originalList);\n        Collections.reverse(aNewList);\n\n        assertThat(aNewList).isNotEqualTo(originalList)\n            .isEqualTo(EXPECTED);\n    }\n\n    @Test\n    void givenArrayList_whenCallReverseWithRecur_thenListReversedInPlace() {\n        List<Integer> aList = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7));\n        ReverseArrayList.reverseWithRecursion(aList);\n        assertThat(aList).isEqualTo(EXPECTED);\n    }\n\n    @Test\n    void givenArrayList_whenCallReverseWithLoop_thenListReversedInPlace() {\n        List<Integer> aList = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7));\n        ReverseArrayList.reverseWithLoop(aList);\n        assertThat(aList).isEqualTo(EXPECTED);\n    }\n}"}
{"code_source": "package com.baeldung.map;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.NavigableMap;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\n\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.Maps;\n\npublic class EmptyMapInitializer {\n\n  public static Map<String, String> articleMap;\n  static {\n    articleMap = new HashMap<>();\n  }\n\n  public static Map<String, String> createEmptyMap() {\n    return Collections.emptyMap();\n  }\n\n  public void createMapUsingConstructors() {\n    Map hashMap = new HashMap();\n    Map linkedHashMap = new LinkedHashMap();\n    Map treeMap = new TreeMap();\n  }\n\n  public Map<String, String> createEmptyMapUsingMapsObject() {\n    Map<String, String> emptyMap = Maps.newHashMap();\n    return emptyMap;\n  }\n\n  public Map createGenericEmptyMapUsingGuavaMapsObject() {\n    Map genericEmptyMap = Maps.<String, Integer>newHashMap();\n    return genericEmptyMap;\n  }\n\n  public static Map<String, String> createMapUsingGuava() {\n    Map<String, String> emptyMapUsingGuava =\n        Maps.newHashMap(ImmutableMap.of());\n    return emptyMapUsingGuava;\n  }\n\n  public static Map<String, String> createImmutableMapUsingGuava() {\n\t    Map<String, String> emptyImmutableMapUsingGuava = ImmutableMap.of();\n\t    return emptyImmutableMapUsingGuava;\n  }\n  \n  public SortedMap<String, String> createEmptySortedMap() {\n    SortedMap<String, String> sortedMap = Collections.emptySortedMap();\n    return sortedMap;\n  }\n\n  public NavigableMap<String, String> createEmptyNavigableMap() {\n    NavigableMap<String, String> navigableMap = Collections.emptyNavigableMap();\n    return navigableMap;\n  }\n\n}\n", "test_case": "package com.baeldung.map;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.Map;\n\nimport org.junit.Test;\n\npublic class EmptyMapInitializerUnitTest {\n\n  @Test(expected=UnsupportedOperationException.class)\n  public void givenEmptyMap_whenAddingEntries_throwsException() {\n    Map<String, String> map = EmptyMapInitializer.createEmptyMap();\n    map.put(\"key\", \"value\");\n  }\n\n  @Test\n  public void givenEmptyMap_whenChecked_returnsTrue() {\n    assertTrue(EmptyMapInitializer.articleMap.isEmpty());\n  }\n\n  @Test\n  public void givenEmptyMap_whenCreatedUsingGuava_returnsEmptyOrNot() {\n    Map<String, String> emptyMapUsingGuava =\n        EmptyMapInitializer.createMapUsingGuava();\n    assertTrue(emptyMapUsingGuava.isEmpty());\n    emptyMapUsingGuava.put(\"key\", \"value\");\n    assertFalse(emptyMapUsingGuava.isEmpty());\n  }\n\n  @Test(expected=UnsupportedOperationException.class)\n  public void givenImmutableEmptyMapUsingGuava_whenAddingEntries_throwsException() {\n    Map<String, String> map = EmptyMapInitializer.createImmutableMapUsingGuava();\n    map.put(\"key\", \"value\");\n  }\n}\n"}
{"code_source": "/**\n * \n */\npackage com.baeldung.map;\n\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.stream.Stream;\n\n/**\n * @author swpraman\n *\n */\npublic class MapUtil {\n    \n    public static <K, V> Stream<K> keys(Map<K, V> map, V value) {\n        return map.entrySet()\n                .stream()\n                .filter(entry -> value.equals(entry.getValue()))\n                .map(Map.Entry::getKey);\n    }\n    \n    public static <K, V> Set<K> getKeys(Map<K, V> map, V value) {\n        Set<K> keys = new HashSet<>();\n        for (Entry<K, V> entry : map.entrySet()) {\n            if (entry.getValue().equals(value)) {\n                keys.add(entry.getKey());\n            }\n        }\n        return keys;\n    }\n    \n    public static <K, V> K getKey(Map<K, V> map, V value) {\n        for (Entry<K, V> entry : map.entrySet()) {\n            if (entry.getValue().equals(value)) {\n                return entry.getKey();\n            }\n        }\n        return null;\n    }\n\n}\n", "test_case": "/**\n * \n */\npackage com.baeldung.map;\n\nimport com.google.common.collect.HashBiMap;\nimport org.apache.commons.collections4.BidiMap;\nimport org.apache.commons.collections4.bidimap.DualHashBidiMap;\nimport org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\nimport static org.junit.Assert.assertEquals;\n\n/**\n * @author swpraman\n *\n */\npublic class MapUtilUnitTest {\n    \n    \n    @Test\n    public void whenUsingImperativeWayForSingleKey_shouldReturnSingleKey() {\n        Map<String, String> capitalCountryMap = new HashMap<>();\n        capitalCountryMap.put(\"Tokyo\", \"Japan\");\n        capitalCountryMap.put(\"New Delhi\", \"India\");\n        assertEquals(\"New Delhi\", MapUtil.getKey(capitalCountryMap, \"India\"));\n    }\n    \n    @Test\n    public void whenUsingImperativeWayForAllKeys_shouldReturnAllKeys() {\n        Map<String, String> capitalCountryMap = new HashMap<>();\n        capitalCountryMap.put(\"Tokyo\", \"Japan\");\n        capitalCountryMap.put(\"Berlin\", \"Germany\");\n        capitalCountryMap.put(\"Cape Town\", \"South Africa\");\n        capitalCountryMap.put(\"Pretoria\", \"South Africa\");\n        capitalCountryMap.put(\"Bloemfontein\", \"South Africa\");\n\n        assertEquals(new HashSet<String>(Arrays.asList(\n                new String[] {\"Cape Town\", \"Pretoria\", \"Bloemfontein\"})), \n                MapUtil.getKeys(capitalCountryMap, \"South Africa\"));\n    }\n    \n    @Test\n    public void whenUsingFunctionalWayForSingleKey_shouldReturnSingleKey() {\n        Map<String, String> capitalCountryMap = new HashMap<>();\n        capitalCountryMap.put(\"Tokyo\", \"Japan\");\n        capitalCountryMap.put(\"Berlin\", \"Germany\");\n        assertEquals(\"Berlin\", MapUtil.keys(capitalCountryMap, \"Germany\").findFirst().get());\n    }\n    \n    @Test\n    public void whenUsingFunctionalWayForAllKeys_shouldReturnAllKeys() {\n        Map<String, String> capitalCountryMap = new HashMap<>();\n        capitalCountryMap.put(\"Tokyo\", \"Japan\");\n        capitalCountryMap.put(\"Berlin\", \"Germany\");\n        capitalCountryMap.put(\"Cape Town\", \"South Africa\");\n        capitalCountryMap.put(\"Pretoria\", \"South Africa\");\n        capitalCountryMap.put(\"Bloemfontein\", \"South Africa\");\n        assertEquals(new HashSet<String>(Arrays.asList(\n                new String[] {\"Cape Town\", \"Pretoria\", \"Bloemfontein\"})), \n                MapUtil.keys(capitalCountryMap, \"South Africa\").collect(Collectors.toSet()));\n    }\n    \n    @Test\n    public void whenUsingBidiMap_shouldReturnKey() {\n        BidiMap<String, String> capitalCountryMap = new DualHashBidiMap<String, String>();\n        capitalCountryMap.put(\"Berlin\", \"Germany\");\n        capitalCountryMap.put(\"Cape Town\", \"South Africa\");\n        assertEquals(\"Berlin\", capitalCountryMap.getKey(\"Germany\"));\n    }\n    \n    @Test\n    public void whenUsingBidiMapAddDuplicateValue_shouldRemoveOldEntry() {\n        BidiMap<String, String> capitalCountryMap = new DualHashBidiMap<String, String>();\n        capitalCountryMap.put(\"Berlin\", \"Germany\");\n        capitalCountryMap.put(\"Cape Town\", \"South Africa\");\n        capitalCountryMap.put(\"Pretoria\", \"South Africa\");\n        assertEquals(\"Pretoria\", capitalCountryMap.getKey(\"South Africa\"));\n    }\n    \n    @Test\n    public void whenUsingBiMap_shouldReturnKey() {\n        HashBiMap<String, String> capitalCountryMap = HashBiMap.create();\n        capitalCountryMap.put(\"Berlin\", \"Germany\");\n        capitalCountryMap.put(\"Cape Town\", \"South Africa\");\n        assertEquals(\"Berlin\", capitalCountryMap.inverse().get(\"Germany\"));\n    }\n    \n    @Test(expected=IllegalArgumentException.class)\n    public void whenUsingBiMapAddDuplicateValue_shouldThrowException() {\n        HashBiMap<String, String> capitalCountryMap = HashBiMap.create();\n        capitalCountryMap.put(\"Berlin\", \"Germany\");\n        capitalCountryMap.put(\"Cape Town\", \"South Africa\");\n        capitalCountryMap.put(\"Pretoria\", \"South Africa\");\n        assertEquals(\"Berlin\", capitalCountryMap.inverse().get(\"Germany\"));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.map;\n\nimport java.util.*;\n\npublic class Product {\n\n    private String name;\n    private String description;\n    private List<String> tags;\n\n    public Product(String name, String description) {\n        this.name = name;\n        this.description = description;\n        this.tags = new ArrayList<>();\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public List<String> getTags() {\n        return tags;\n    }\n\n    public Product addTagsOfOtherProduct(Product product) {\n        this.tags.addAll(product.getTags());\n        return this;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n\n        Product product = (Product) o;\n        return Objects.equals(name, product.name) &&\n                Objects.equals(description, product.description);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(name, description);\n    }\n\n    public static void forEach() {\n\n        HashMap<String, Product> productsByName = new HashMap<>();\n        productsByName.forEach( (key, product)\n                        -> System.out.println(\"Key: \" + key + \" Product:\" + product.getDescription())\n                //do something with the key and value\n        );\n\n        //Prior to Java 8:\n        for(Map.Entry<String, Product> entry : productsByName.entrySet()) {\n            Product product =  entry.getValue();\n            String key = entry.getKey();\n            //do something with the key and value\n        }\n    }\n\n    public static void getOrDefault() {\n\n        HashMap<String, Product> productsByName = new HashMap<>();\n        Product chocolate = new Product(\"chocolate\", \"something sweet\");\n        Product defaultProduct = productsByName.getOrDefault(\"horse carriage\", chocolate);\n        Product bike = productsByName.getOrDefault(\"E-Bike\", chocolate);\n\n        //Prior to Java 8:\n        Product bike2 = productsByName.containsKey(\"E-Bike\")\n                ? productsByName.get(\"E-Bike\")\n                : chocolate;\n        Product defaultProduct2 = productsByName.containsKey(\"horse carriage\")\n                ? productsByName.get(\"horse carriage\")\n                : chocolate;\n    }\n\n    public static void putIfAbsent() {\n\n        HashMap<String, Product> productsByName = new HashMap<>();\n        Product chocolate = new Product(\"chocolate\", \"something sweet\");\n        productsByName.putIfAbsent(\"E-Bike\", chocolate);\n\n        //Prior to Java 8:\n        if(productsByName.containsKey(\"E-Bike\")) {\n            productsByName.put(\"E-Bike\", chocolate);\n        }\n    }\n\n    public static void merge() {\n\n        HashMap<String, Product> productsByName = new HashMap<>();\n        Product eBike2 = new Product(\"E-Bike\", \"A bike with a battery\");\n        eBike2.getTags().add(\"sport\");\n        productsByName.merge(\"E-Bike\", eBike2, Product::addTagsOfOtherProduct);\n\n        //Prior to Java 8:\n        if(productsByName.containsKey(\"E-Bike\")) {\n            productsByName.get(\"E-Bike\").addTagsOfOtherProduct(eBike2);\n        } else {\n            productsByName.put(\"E-Bike\", eBike2);\n        }\n    }\n\n    public static void compute() {\n\n        HashMap<String, Product> productsByName = new HashMap<>();\n        Product eBike2 = new Product(\"E-Bike\", \"A bike with a battery\");\n\n        productsByName.compute(\"E-Bike\", (k,v) -> {\n            if(v != null) {\n                return v.addTagsOfOtherProduct(eBike2);\n            } else {\n                return eBike2;\n            }\n        });\n\n        //Prior to Java 8:\n        if(productsByName.containsKey(\"E-Bike\")) {\n            productsByName.get(\"E-Bike\").addTagsOfOtherProduct(eBike2);\n        } else {\n            productsByName.put(\"E-Bike\", eBike2);\n        }\n    }\n}\n", "test_case": "package com.baeldung.map;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ProductUnitTest {\n\n\n    @Test\n    public void getExistingValue() {\n        HashMap<String, Product> productsByName = new HashMap<>();\n\n        Product eBike = new Product(\"E-Bike\", \"A bike with a battery\");\n        Product roadBike = new Product(\"Road bike\", \"A bike for competition\");\n\n        productsByName.put(eBike.getName(), eBike);\n        productsByName.put(roadBike.getName(), roadBike);\n\n        Product nextPurchase = productsByName.get(\"E-Bike\");\n\n        assertEquals(\"A bike with a battery\", nextPurchase.getDescription());\n    }\n\n    @Test\n    public void getNonExistingValue() {\n        HashMap<String, Product> productsByName = new HashMap<>();\n\n        Product eBike = new Product(\"E-Bike\", \"A bike with a battery\");\n        Product roadBike = new Product(\"Road bike\", \"A bike for competition\");\n\n        productsByName.put(eBike.getName(), eBike);\n        productsByName.put(roadBike.getName(), roadBike);\n\n        Product nextPurchase = productsByName.get(\"Car\");\n\n        assertNull(nextPurchase);\n    }\n\n    @Test\n    public void getExistingValueAfterSameKeyInsertedTwice() {\n        HashMap<String, Product> productsByName = new HashMap<>();\n\n        Product eBike = new Product(\"E-Bike\", \"A bike with a battery\");\n        Product roadBike = new Product(\"Road bike\", \"A bike for competition\");\n        Product newEBike = new Product(\"E-Bike\", \"A bike with a better battery\");\n\n        productsByName.put(eBike.getName(), eBike);\n        productsByName.put(roadBike.getName(), roadBike);\n        productsByName.put(newEBike.getName(), newEBike);\n\n        Product nextPurchase = productsByName.get(\"E-Bike\");\n\n        assertEquals(\"A bike with a better battery\", nextPurchase.getDescription());\n    }\n\n    @Test\n    public void getExistingValueWithNullKey() {\n        HashMap<String, Product> productsByName = new HashMap<>();\n\n        Product defaultProduct = new Product(\"Chocolate\", \"At least buy chocolate\");\n\n        productsByName.put(null, defaultProduct);\n        productsByName.put(defaultProduct.getName(), defaultProduct);\n\n        Product nextPurchase = productsByName.get(null);\n        assertEquals(\"At least buy chocolate\", nextPurchase.getDescription());\n\n        nextPurchase = productsByName.get(\"Chocolate\");\n        assertEquals(\"At least buy chocolate\", nextPurchase.getDescription());\n    }\n\n    @Test\n    public void insertSameObjectWithDifferentKey() {\n        HashMap<String, Product> productsByName = new HashMap<>();\n\n        Product defaultProduct = new Product(\"Chocolate\", \"At least buy chocolate\");\n\n        productsByName.put(null, defaultProduct);\n        productsByName.put(defaultProduct.getName(), defaultProduct);\n\n        assertSame(productsByName.get(null), productsByName.get(\"Chocolate\"));\n    }\n\n    @Test\n    public void checkIfKeyExists() {\n        HashMap<String, Product> productsByName = new HashMap<>();\n\n        Product eBike = new Product(\"E-Bike\", \"A bike with a battery\");\n\n        productsByName.put(eBike.getName(), eBike);\n\n        assertTrue(productsByName.containsKey(\"E-Bike\"));\n    }\n\n    @Test\n    public void checkIfValueExists() {\n        HashMap<String, Product> productsByName = new HashMap<>();\n\n        Product eBike = new Product(\"E-Bike\", \"A bike with a battery\");\n\n        productsByName.put(eBike.getName(), eBike);\n\n        assertTrue(productsByName.containsValue(eBike));\n    }\n\n    @Test\n    public void removeExistingKey() {\n        HashMap<String, Product> productsByName = new HashMap<>();\n\n        Product eBike = new Product(\"E-Bike\", \"A bike with a battery\");\n        Product roadBike = new Product(\"Road bike\", \"A bike for competition\");\n\n        productsByName.put(eBike.getName(), eBike);\n        productsByName.put(roadBike.getName(), roadBike);\n\n        productsByName.remove(\"E-Bike\");\n\n        assertNull(productsByName.get(\"E-Bike\"));\n    }\n\n    @Test\n    public void givenMutableKeyWhenKeyChangeThenValueNotFound() {\n        // Given\n        MutableKey key = new MutableKey(\"initial\");\n\n        Map<MutableKey, String> items = new HashMap<>();\n        items.put(key, \"success\");\n\n        // When\n        key.setName(\"changed\");\n\n        // Then\n        assertNull(items.get(key));\n    }\n\n    static class MutableKey {\n        private String name;\n\n        public MutableKey(String name) {\n            this.name = name;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) {\n                return true;\n            }\n            if (o == null || getClass() != o.getClass()) {\n                return false;\n            }\n            MutableKey that = (MutableKey) o;\n            return Objects.equals(name, that.name);\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(name);\n        }\n    }\n\n}\n"}
{"code_source": "package com.baeldung.map.convert;\n\nimport com.google.common.base.Joiner;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class MapToString {\n\n    public static String convertWithIteration(Map<Integer, ?> map) {\n        StringBuilder mapAsString = new StringBuilder(\"{\");\n        for (Integer key : map.keySet()) {\n            mapAsString.append(key + \"=\" + map.get(key) + \", \");\n        }\n        mapAsString.delete(mapAsString.length()-2, mapAsString.length()).append(\"}\");\n        return mapAsString.toString();\n    }\n\n    public static String convertWithStream(Map<Integer, ?> map) {\n        String mapAsString = map.keySet().stream()\n                .map(key -> key + \"=\" + map.get(key))\n                .collect(Collectors.joining(\", \", \"{\", \"}\"));\n        return mapAsString;\n    }\n\n    public static String convertWithGuava(Map<Integer, ?> map) {\n        return Joiner.on(\",\").withKeyValueSeparator(\"=\").join(map);\n    }\n\n    public static String convertWithApache(Map map) {\n        return StringUtils.join(map);\n    }\n}\n", "test_case": "package com.baeldung.map.convert;\n\nimport org.apache.commons.collections4.MapUtils;\nimport org.junit.Assert;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class MapToStringUnitTest {\n\n    private Map<Integer, String> wordsByKey = new HashMap<>();\n\n    @BeforeEach\n    public void setup() {\n        wordsByKey.clear();\n        wordsByKey.put(1, \"one\");\n        wordsByKey.put(2, \"two\");\n        wordsByKey.put(3, \"three\");\n        wordsByKey.put(4, \"four\");\n    }\n\n    @Test\n    public void givenMap_WhenUsingIteration_ThenResultingMapIsCorrect() {\n        String mapAsString = MapToString.convertWithIteration(wordsByKey);\n        Assert.assertEquals(\"{1=one, 2=two, 3=three, 4=four}\", mapAsString);\n    }\n\n    @Test\n    public void givenMap_WhenUsingStream_ThenResultingMapIsCorrect() {\n        String mapAsString = MapToString.convertWithStream(wordsByKey);\n        Assert.assertEquals(\"{1=one, 2=two, 3=three, 4=four}\", mapAsString);\n    }\n\n    @Test\n    public void givenMap_WhenUsingGuava_ThenResultingMapIsCorrect() {\n        String mapAsString = MapToString.convertWithGuava(wordsByKey);\n        Assert.assertEquals(\"1=one,2=two,3=three,4=four\", mapAsString);\n    }\n\n    @Test\n    public void givenMap_WhenUsingApache_ThenResultingMapIsCorrect() {\n        String mapAsString = MapToString.convertWithApache(wordsByKey);\n        Assert.assertEquals(\"{1=one, 2=two, 3=three, 4=four}\", mapAsString);\n        MapUtils.debugPrint(System.out, \"Map as String\", wordsByKey);\n    }\n}"}
{"code_source": "package com.baeldung.map.convert;\n\nimport com.google.common.base.Splitter;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class StringToMap {\n\n    public static Map<String, String> convertWithStream(String mapAsString) {\n        Map<String, String> map = Arrays.stream(mapAsString.split(\",\"))\n                .map(entry -> entry.split(\"=\"))\n                .collect(Collectors.toMap(entry -> entry[0], entry -> entry[1]));\n        return map;\n    }\n\n    public static Map<String, String> convertWithGuava(String mapAsString) {\n        return Splitter.on(',').withKeyValueSeparator('=').split(mapAsString);\n    }\n}\n", "test_case": "package com.baeldung.map.convert;\n\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Map;\n\npublic class StringToMapUnitTest {\n\n    @Test\n    public void givenString_WhenUsingStream_ThenResultingStringIsCorrect() {\n        Map<String, String> wordsByKey = StringToMap.convertWithStream(\"1=one,2=two,3=three,4=four\");\n        Assert.assertEquals(4, wordsByKey.size());\n        Assert.assertEquals(\"one\", wordsByKey.get(\"1\"));\n    }\n\n    @Test\n    void givenString_WhenUsingGuava_ThenResultingStringIsCorrect() {\n        Map<String, String> wordsByKey = StringToMap.convertWithGuava(\"1=one,2=two,3=three,4=four\");\n        Assert.assertEquals(4, wordsByKey.size());\n        Assert.assertEquals(\"one\", wordsByKey.get(\"1\"));\n    }\n}"}
{"code_source": "package com.baeldung.map.copyhashmap;\n\nimport org.apache.commons.lang3.SerializationUtils;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class CopyHashMap {\n    \n    public static <String, Employee> HashMap<String, Employee> copyUsingConstructor(HashMap<String, Employee> originalMap) {\n        return new HashMap<String, Employee>(originalMap);\n    }\n    \n    public static <String, Employee> HashMap<String, Employee> copyUsingClone(HashMap<String, Employee> originalMap) {\n        return (HashMap<String, Employee>) originalMap.clone();\n    }\n\n    public static <String, Employee> HashMap<String, Employee> copyUsingPut(HashMap<String, Employee> originalMap) {\n        HashMap<String, Employee> shallowCopy = new HashMap<String, Employee>();\n        Set<Entry<String, Employee>> entries = originalMap.entrySet();\n        for(Map.Entry<String, Employee> mapEntry: entries) {\n            shallowCopy.put(mapEntry.getKey(), mapEntry.getValue());\n        }\n        \n        return shallowCopy;\n    }\n    \n    public static <String, Employee> HashMap<String, Employee> copyUsingPutAll(HashMap<String, Employee> originalMap) {\n        HashMap<String, Employee> shallowCopy = new HashMap<String, Employee>();\n        shallowCopy.putAll(originalMap);\n        \n        return shallowCopy;\n    }\n    \n    public static <String, Employee> HashMap<String, Employee> copyUsingJava8Stream(HashMap<String, Employee> originalMap) {\n        Set<Entry<String, Employee>> entries = originalMap.entrySet();\n        HashMap<String, Employee> shallowCopy = (HashMap<String, Employee>) entries\n            .stream()\n            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n        \n        return shallowCopy;\n    }\n    \n    public static <String, Employee> HashMap<String, Employee> shallowCopy(HashMap<String, Employee> originalMap) {\n        return (HashMap<String, Employee>) originalMap.clone();\n    }\n    \n    public static <String, Employee> HashMap<String, Employee> deepCopy(HashMap<String, Employee> originalMap) {\n        return SerializationUtils.clone(originalMap);\n    }\n    \n}\n", "test_case": "package com.baeldung.map.copyhashmap;\n\nimport com.google.common.collect.ImmutableMap;\nimport org.junit.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class CopyHashMapUnitTest {\n    \n    @Test\n    public void givenHashMap_whenShallowCopy_thenCopyisNotSameAsOriginal() {\n        \n        HashMap<String, Employee> map = new HashMap<>();\n        Employee emp1 = new Employee(\"John\");\n        Employee emp2 = new Employee(\"Norman\");\n        map.put(\"emp1\",emp1);\n        map.put(\"emp2\",emp2);\n    \n        HashMap<String, Employee> shallowCopy = CopyHashMap.shallowCopy(map);\n        \n        assertThat(shallowCopy).isNotSameAs(map);\n        \n    }\n    \n    @Test\n    public void givenHashMap_whenShallowCopyModifyingOriginalObject_thenCopyShouldChange() {\n        \n        HashMap<String, Employee> map = new HashMap<>();\n        Employee emp1 = new Employee(\"John\");\n        Employee emp2 = new Employee(\"Norman\");\n        map.put(\"emp1\",emp1);\n        map.put(\"emp2\",emp2);\n        \n        HashMap<String, Employee> shallowCopy = CopyHashMap.shallowCopy(map);\n        \n        emp1.setName(\"Johny\");\n        \n        assertThat(shallowCopy.get(\"emp1\")).isEqualTo(map.get(\"emp1\"));\n        \n    }\n    \n    @Test\n    public void givenHashMap_whenDeepCopyModifyingOriginalObject_thenCopyShouldNotChange() {\n        \n        HashMap<String, Employee> map = new HashMap<>();\n        Employee emp1 = new Employee(\"John\");\n        Employee emp2 = new Employee(\"Norman\");\n        map.put(\"emp1\",emp1);\n        map.put(\"emp2\",emp2);\n        HashMap<String, Employee> deepCopy = CopyHashMap.deepCopy(map);\n        \n        emp1.setName(\"Johny\");\n        \n        assertThat(deepCopy.get(\"emp1\")).isNotEqualTo(map.get(\"emp1\"));\n        \n    }\n    \n    @Test\n    public void givenImmutableMap_whenCopyUsingGuava_thenCopyShouldNotChange() {\n        Employee emp1 = new Employee(\"John\");\n        Employee emp2 = new Employee(\"Norman\");\n        \n        Map<String, Employee> map = ImmutableMap.<String, Employee> builder()\n            .put(\"emp1\",emp1)\n            .put(\"emp2\",emp2)\n            .build();\n        Map<String, Employee> shallowCopy = ImmutableMap.copyOf(map);\n        \n        assertThat(shallowCopy).isSameAs(map);\n        \n    }\n\n}\n"}
{"code_source": "package com.baeldung.map.initialize;\n\nimport java.util.AbstractMap;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class MapInitializer {\n\n    public static Map<String, String> articleMapOne;\n    static {\n        articleMapOne = new HashMap<>();\n        articleMapOne.put(\"ar01\", \"Intro to Map\");\n        articleMapOne.put(\"ar02\", \"Some article\");\n    }\n\n    public static Map<String, String> createSingletonMap() {\n        Map<String, String> passwordMap = Collections.singletonMap(\"username1\", \"password1\");\n        return passwordMap;\n\n    }\n\n    public Map<String, String> createEmptyMap() {\n        Map<String, String> emptyMap = Collections.emptyMap();\n        return emptyMap;\n    }\n\n    public Map<String, String> createUsingDoubleBrace() {\n        Map<String, String> doubleBraceMap = new HashMap<String, String>() {\n\n            /**\n             * \n             */\n            private static final long serialVersionUID = 1L;\n\n            {\n                put(\"key1\", \"value1\");\n                put(\"key2\", \"value2\");\n            }\n        };\n        return doubleBraceMap;\n    }\n\n    public Map<String, String> createMapUsingStreamStringArray() {\n        Map<String, String> map = Stream.of(new String[][] { { \"Hello\", \"World\" }, { \"John\", \"Doe\" }, })\n            .collect(Collectors.toMap(data -> data[0], data -> data[1]));\n\n        return map;\n    }\n\n    public Map<String, Integer> createMapUsingStreamObjectArray() {\n        Map<String, Integer> map = Stream.of(new Object[][] { { \"data1\", 1 }, { \"data2\", 2 }, })\n            .collect(Collectors.toMap(data -> (String) data[0], data -> (Integer) data[1]));\n\n        return map;\n    }\n\n    public Map<String, Integer> createMapUsingStreamSimpleEntry() {\n        Map<String, Integer> map = Stream.of(new AbstractMap.SimpleEntry<>(\"idea\", 1), new AbstractMap.SimpleEntry<>(\"mobile\", 2))\n            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n\n        return map;\n    }\n\n    public Map<String, Integer> createMapUsingStreamSimpleImmutableEntry() {\n        Map<String, Integer> map = Stream.of(new AbstractMap.SimpleImmutableEntry<>(\"idea\", 1), new AbstractMap.SimpleImmutableEntry<>(\"mobile\", 2))\n            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n\n        return map;\n    }\n\n    public Map<String, String> createImmutableMapWithStreams() {\n        Map<String, String> map = Stream.of(new String[][] { { \"Hello\", \"World\" }, { \"John\", \"Doe\" }, })\n            .collect(Collectors.collectingAndThen(Collectors.toMap(data -> data[0], data -> data[1]), Collections::<String, String> unmodifiableMap));\n        return map;\n\n    }\n}\n", "test_case": "package com.baeldung.map.initialize;\n\nimport org.junit.Test;\n\nimport java.util.Map;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class MapInitializerUnitTest {\n    \n    @Test\n    public void givenStaticMap_whenUpdated_thenCorrect() {\n        \n        MapInitializer.articleMapOne.put(\"NewArticle1\", \"Convert array to List\");\n        \n        assertEquals(MapInitializer.articleMapOne.get(\"NewArticle1\"), \"Convert array to List\");\n        \n    }\n    \n    @Test(expected=UnsupportedOperationException.class)\n    public void givenSingleTonMap_whenEntriesAdded_throwsException() {\n        \n        Map<String, String> map = MapInitializer.createSingletonMap();\n        map.put(\"username2\", \"password2\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.map.mapmax;\n\nimport java.util.*;\nimport java.util.Map.Entry;\n\npublic class MapMax {\n\n    public <K, V extends Comparable<V>> V maxUsingIteration(Map<K, V> map) {\n\n        Map.Entry<K, V> maxEntry = null;\n\n        for (Map.Entry<K, V> entry : map.entrySet()) {\n\n            if (maxEntry == null || entry.getValue()\n                .compareTo(maxEntry.getValue()) > 0) {\n                maxEntry = entry;\n            }\n        }\n\n        return maxEntry.getValue();\n    }\n\n    public <K, V extends Comparable<V>> V maxUsingCollectionsMax(Map<K, V> map) {\n\n        Entry<K, V> maxEntry = Collections.max(map.entrySet(), new Comparator<Entry<K, V>>() {\n            public int compare(Entry<K, V> e1, Entry<K, V> e2) {\n                return e1.getValue()\n                    .compareTo(e2.getValue());\n            }\n        });\n\n        return maxEntry.getValue();\n    }\n\n    public <K, V extends Comparable<V>> V maxUsingCollectionsMaxAndLambda(Map<K, V> map) {\n\n        Entry<K, V> maxEntry = Collections.max(map.entrySet(), (Entry<K, V> e1, Entry<K, V> e2) -> e1.getValue()\n            .compareTo(e2.getValue()));\n\n        return maxEntry.getValue();\n    }\n\n    public <K, V extends Comparable<V>> V maxUsingCollectionsMaxAndMethodReference(Map<K, V> map) {\n\n        Entry<K, V> maxEntry = Collections.max(map.entrySet(), Comparator.comparing(Map.Entry::getValue));\n\n        return maxEntry.getValue();\n    }\n\n    public <K, V extends Comparable<V>> V maxUsingStreamAndLambda(Map<K, V> map) {\n\n        Optional<Entry<K, V>> maxEntry = map.entrySet()\n            .stream()\n            .max((Entry<K, V> e1, Entry<K, V> e2) -> e1.getValue()\n                .compareTo(e2.getValue()));\n\n        return maxEntry.get()\n            .getValue();\n    }\n\n    public <K, V extends Comparable<V>> V maxUsingStreamAndMethodReference(Map<K, V> map) {\n\n        Optional<Entry<K, V>> maxEntry = map.entrySet()\n            .stream()\n            .max(Comparator.comparing(Map.Entry::getValue));\n\n        return maxEntry.get()\n            .getValue();\n    }\n\n    public static void main(String[] args) {\n\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n\n        map.put(1, 3);\n        map.put(2, 4);\n        map.put(3, 5);\n        map.put(4, 6);\n        map.put(5, 7);\n        \n        MapMax mapMax = new MapMax();\n\n        System.out.println(mapMax.maxUsingIteration(map));\n        System.out.println(mapMax.maxUsingCollectionsMax(map));\n        System.out.println(mapMax.maxUsingCollectionsMaxAndLambda(map));\n        System.out.println(mapMax.maxUsingCollectionsMaxAndMethodReference(map));\n        System.out.println(mapMax.maxUsingStreamAndLambda(map));\n        System.out.println(mapMax.maxUsingStreamAndMethodReference(map));\n\n    }\n\n}\n", "test_case": "package com.baeldung.map.mapmax;\n\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class MapMaxUnitTest {\n    \n    Map<Integer, Integer> map = null;\n    MapMax mapMax = null;\n        \n    \n    @Before\n    public void setupTestData() {\n        map = new HashMap<Integer, Integer>();\n        map.put(23, 12);\n        map.put(46, 24);\n        map.put(27, 38); \n        mapMax = new MapMax();\n    }\n    \n    @Test\n    public void givenMap_whenIterated_thenReturnMaxValue() {\n        assertEquals(new Integer(38), mapMax.maxUsingIteration(map));\n    }\n    \n    @Test\n    public void givenMap_whenUsingCollectionsMax_thenReturnMaxValue() {\n        assertEquals(new Integer(38), mapMax.maxUsingCollectionsMax(map));\n    }\n    \n    @Test\n    public void givenMap_whenUsingCollectionsMaxAndLambda_thenReturnMaxValue() {\n        assertEquals(new Integer(38), mapMax.maxUsingCollectionsMaxAndLambda(map));\n    }\n    \n    @Test\n    public void givenMap_whenUsingCollectionsMaxAndMethodReference_thenReturnMaxValue() {\n        assertEquals(new Integer(38), mapMax.maxUsingCollectionsMaxAndMethodReference(map));\n    }\n    \n    @Test\n    public void givenMap_whenUsingStreamAndLambda_thenReturnMaxValue() {\n        assertEquals(new Integer(38), mapMax.maxUsingStreamAndLambda(map));\n    }\n    \n    @Test\n    public void givenMap_whenUsingStreamAndMethodReference_thenReturnMaxValue() {\n        assertEquals(new Integer(38), mapMax.maxUsingStreamAndMethodReference   (map));\n    }\n\n\n}\n"}
{"code_source": "package com.baeldung.map.propertieshashmap;\n\nimport com.google.common.collect.Maps;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.stream.Collectors;\n\npublic class PropertiesToHashMapConverter {\n\n    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n    public static HashMap<String, String> typeCastConvert(Properties prop) {\n        Map step1 = prop;\n        Map<String, String> step2 = (Map<String, String>) step1;\n        return new HashMap<>(step2);\n    }\n\n    public static HashMap<String, String> loopConvert(Properties prop) {\n        HashMap<String, String> retMap = new HashMap<>();\n        for (Map.Entry<Object, Object> entry : prop.entrySet()) {\n            retMap.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));\n        }\n        return retMap;\n    }\n\n    public static HashMap<String, String> streamConvert(Properties prop) {\n        return prop.entrySet().stream().collect(\n                Collectors.toMap(\n                  e -> String.valueOf(e.getKey()),\n                  e -> String.valueOf(e.getValue()),\n                  (prev, next) -> next, HashMap::new\n                ));\n    }\n\n    public static HashMap<String, String> guavaConvert(Properties prop) {\n        return Maps.newHashMap(Maps.fromProperties(prop));\n    }\n}\n", "test_case": "package com.baeldung.map.propertieshashmap;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Properties;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass PropertiesToHashMapConverterUnitTest {\n\n    private Properties properties;\n\n    private final static String propertyFileName = \"toHashMap.properties\";\n\n    @BeforeEach\n    public void setup() throws IOException {\n        properties = new Properties();\n        try (InputStream is = getClass().getClassLoader().getResourceAsStream(propertyFileName)) {\n            if (is != null) {\n                properties.load(is);\n            }\n        }\n    }\n\n    @Test\n    public void havingPropertiesLoaded_whenCheck_thenEquals() {\n        assertEquals(3, properties.size());\n        assertEquals(\"str_value\", properties.get(\"property1\"));\n        assertEquals(\"123\", properties.get(\"property2\"));\n        assertEquals(\"\", properties.get(\"property3\"));\n    }\n\n    @Test\n    public void whenPropertiesModified_thenTypeSafeIssues() {\n        compromiseProperties(properties);\n\n        assertEquals(5, properties.size());\n\n        assertNull(properties.getProperty(\"property4\"));\n        assertNotEquals(String.class, properties.get(\"property4\").getClass());\n        assertEquals(456, properties.get(\"property4\"));\n\n\n        assertNull(properties.getProperty(\"5\"));\n        assertNotEquals(String.class, properties.get(5).getClass());\n        assertEquals(10.11, properties.get(5));\n    }\n\n    @Test\n    public void havingNonModifiedProperties_whenTypeCastConvert_thenNoTypeSafeIssues() {\n        HashMap<String, String> hMap = PropertiesToHashMapConverter.typeCastConvert(properties);\n\n        assertEquals(3, hMap.size());\n        assertEquals(String.class, hMap.get(\"property1\").getClass());\n        assertEquals(properties.get(\"property1\"), hMap.get(\"property1\"));\n        assertEquals(String.class, hMap.get(\"property2\").getClass());\n        assertEquals(properties.get(\"property2\"), hMap.get(\"property2\"));\n        assertEquals(String.class, hMap.get(\"property3\").getClass());\n        assertEquals(properties.get(\"property3\"), hMap.get(\"property3\"));\n    }\n\n    @Test\n    public void havingModifiedProperties_whenTypeCastConvert_thenClassCastException() {\n        compromiseProperties(properties);\n        HashMap<String, String> hMap = PropertiesToHashMapConverter.typeCastConvert(properties);\n        assertEquals(5, hMap.size());\n\n        assertThrows(ClassCastException.class, () -> {\n            String s = hMap.get(\"property4\");\n        });\n        assertEquals(Integer.class, ((Object) hMap.get(\"property4\")).getClass());\n\n        assertNull(hMap.get(\"5\"));\n        assertNotNull(hMap.get(5));\n        assertThrows(ClassCastException.class, () -> {\n            String s = hMap.get(5);\n        });\n        assertEquals(Double.class, ((Object) hMap.get(5)).getClass());\n    }\n\n    @Test\n    public void havingNonModifiedProperties_whenLoopConvert_thenNoTypeSafeIssues() {\n        HashMap<String, String> hMap = PropertiesToHashMapConverter.loopConvert(properties);\n\n        assertEquals(3, hMap.size());\n        assertEquals(String.class, hMap.get(\"property1\").getClass());\n        assertEquals(properties.get(\"property1\"), hMap.get(\"property1\"));\n        assertEquals(String.class, hMap.get(\"property2\").getClass());\n        assertEquals(properties.get(\"property2\"), hMap.get(\"property2\"));\n        assertEquals(String.class, hMap.get(\"property3\").getClass());\n        assertEquals(properties.get(\"property3\"), hMap.get(\"property3\"));\n    }\n\n    @Test\n    public void havingModifiedProperties_whenLoopConvert_thenNoClassCastException() {\n        compromiseProperties(properties);\n        HashMap<String, String> hMap = PropertiesToHashMapConverter.loopConvert(properties);\n        assertEquals(5, hMap.size());\n\n        assertDoesNotThrow(() -> {\n            String s = hMap.get(\"property4\");\n        });\n        assertEquals(String.class, hMap.get(\"property4\").getClass());\n        assertEquals(\"456\", hMap.get(\"property4\"));\n\n        assertDoesNotThrow(() -> {\n            String s = hMap.get(\"5\");\n        });\n        assertEquals(\"10.11\", hMap.get(\"5\"));\n    }\n\n    @Test\n    public void havingNonModifiedProperties_whenStreamConvert_thenNoTypeSafeIssues() {\n        HashMap<String, String> hMap = PropertiesToHashMapConverter.streamConvert(properties);\n\n        assertEquals(3, hMap.size());\n        assertEquals(String.class, hMap.get(\"property1\").getClass());\n        assertEquals(properties.get(\"property1\"), hMap.get(\"property1\"));\n        assertEquals(String.class, hMap.get(\"property2\").getClass());\n        assertEquals(properties.get(\"property2\"), hMap.get(\"property2\"));\n        assertEquals(String.class, hMap.get(\"property3\").getClass());\n        assertEquals(properties.get(\"property3\"), hMap.get(\"property3\"));\n    }\n\n    @Test\n    public void havingModifiedProperties_whenStreamConvert_thenNoClassCastException() {\n        compromiseProperties(properties);\n        HashMap<String, String> hMap = PropertiesToHashMapConverter.streamConvert(properties);\n        assertEquals(5, hMap.size());\n\n        assertDoesNotThrow(() -> {\n            String s = hMap.get(\"property4\");\n        });\n        assertEquals(String.class, hMap.get(\"property4\").getClass());\n        assertEquals(\"456\", hMap.get(\"property4\"));\n\n        assertDoesNotThrow(() -> {\n            String s = hMap.get(\"5\");\n        });\n        assertEquals(\"10.11\", hMap.get(\"5\"));\n    }\n\n    @Test\n    public void havingModifiedProperties_whenLoopConvertAndStreamConvert_thenHashMapsSame() {\n        compromiseProperties(properties);\n        HashMap<String, String> hMap1 = PropertiesToHashMapConverter.loopConvert(properties);\n        HashMap<String, String> hMap2 = PropertiesToHashMapConverter.streamConvert(properties);\n\n        assertEquals(hMap2, hMap1);\n    }\n\n    @Test\n    public void havingNonModifiedProperties_whenGuavaConvert_thenNoTypeSafeIssues() {\n        HashMap<String, String> hMap = PropertiesToHashMapConverter.guavaConvert(properties);\n\n        assertEquals(3, hMap.size());\n        assertEquals(String.class, hMap.get(\"property1\").getClass());\n        assertEquals(properties.get(\"property1\"), hMap.get(\"property1\"));\n        assertEquals(String.class, hMap.get(\"property2\").getClass());\n        assertEquals(properties.get(\"property2\"), hMap.get(\"property2\"));\n        assertEquals(String.class, hMap.get(\"property3\").getClass());\n        assertEquals(properties.get(\"property3\"), hMap.get(\"property3\"));\n    }\n\n    @Test\n    public void havingModifiedProperties_whenGuavaConvert_thenUnableToConvertAndThrowException() {\n        compromiseProperties(properties);\n        assertThrows(Exception.class, () -> PropertiesToHashMapConverter.guavaConvert(properties));\n    }\n\n    @Test\n    public void havingModifiedPropertiesWithNoIntegerValue_whenGuavaConvert_thenNullPointerException() {\n        properties.put(\"property4\", 456);\n        assertThrows(NullPointerException.class, () -> PropertiesToHashMapConverter.guavaConvert(properties));\n    }\n\n    @Test\n    public void havingModifiedPropertiesWithNoIntegerKey_whenGuavaConvert_thenClassCastException() {\n        properties.put(5, 10.11);\n        assertThrows(ClassCastException.class, () -> PropertiesToHashMapConverter.guavaConvert(properties));\n    }\n\n\n    private void compromiseProperties(Properties prop) {\n        prop.put(\"property4\", 456);\n        prop.put(5, 10.11);\n    }\n}\n"}
{"code_source": "package com.baeldung.entries;\n\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.StringJoiner;\n\npublic class SimpleCustomKeyValue<K, V> implements Map.Entry<K, V> {\n\n    private final K key;\n    private V value;\n\n    public SimpleCustomKeyValue(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    @Override\n    public K getKey() {\n        return key;\n    }\n\n    @Override\n    public V getValue() {\n        return value;\n    }\n\n    @Override\n    public V setValue(V value) {\n        return this.value = value;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        SimpleCustomKeyValue<?, ?> that = (SimpleCustomKeyValue<?, ?>) o;\n        return Objects.equals(key, that.key) && Objects.equals(value, that.value);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(key, value);\n    }\n\n    @Override\n    public String toString() {\n        return new StringJoiner(\", \", SimpleCustomKeyValue.class.getSimpleName() + \"[\", \"]\").add(\"key=\" + key).add(\"value=\" + value).toString();\n    }\n}\n", "test_case": "package com.baeldung.entries;\n\nimport com.google.common.collect.ImmutableMap;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Map;\nimport java.util.stream.Stream;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.tuple;\n\nclass SimpleCustomKeyValueUnitTest {\n\n\n    @Test\n    public void givenModifiableEntries_whenVerifying_thenShouldContainKeyValues() {\n        Map.Entry<String, String> firstEntry = new SimpleCustomKeyValue<>(\"key1\", \"value1\");\n\n        Map.Entry<String, String> secondEntry = new SimpleCustomKeyValue<>(\"key2\", \"value2\");\n        secondEntry.setValue(\"different value\");\n\n        Map<String, String> map = Map.ofEntries(firstEntry, secondEntry);\n\n        assertThat(map)\n          .isEqualTo(ImmutableMap.<String,String>builder()\n            .put(\"key1\", \"value1\")\n            .put(\"key2\", \"different value\")\n            .build());\n    }\n\n}"}
{"code_source": "package com.baeldung.mapandhashmap.printer;\n\nimport java.util.Map;\nimport java.util.Map.Entry;\n\npublic class MapReporter {\n\n    private final Map<?, ?> map;\n\n    public MapReporter(final Map<?, ?> map) {\n        this.map = map;\n    }\n\n    public void printMap() {\n        for (final Entry<?, ?> entry : this.map.entrySet()) {\n            System.out.println(entry.getKey() + \" \" + entry.getValue());\n        }\n    }\n}\n", "test_case": "package com.baeldung.mapandhashmap.printer;\n\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.TreeMap;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nclass MapReporterUnitTest {\n\n    private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();\n\n    @BeforeEach\n    public void setUp() {\n        System.setOut(new PrintStream(outputStreamCaptor));\n    }\n\n    @Test\n    @DisplayName(\"Test reporter with TreeMap\")\n    void testPrintTreeMap() {\n        // given\n        String key = \"TreeMap\";\n        String value = \"Used when sorting is needed\";\n        String expected = key + \" \" + value;\n        TreeMap<String, String> map = new TreeMap<>();\n        map.put(key, value);\n        // when\n        MapReporter mapReporter = new MapReporter(map);\n        mapReporter.printMap();\n        // then\n        String actual = outputStreamCaptor.toString().trim();\n        assertThat(actual).isEqualTo(expected);\n    }\n\n    @Test\n    @DisplayName(\"Test reporter with HashMap\")\n    void testPrintHashMap() {\n        // given\n        String key = \"HashMap\";\n        String value = \"Main default implementation for the Map interface\";\n        String expected = key + \" \" + value;\n        HashMap<String, String> map = new HashMap<>();\n        map.put(key, value);\n        // when\n        MapReporter mapReporter = new MapReporter(map);\n        mapReporter.printMap();\n        // then\n        String actual = outputStreamCaptor.toString().trim();\n        assertThat(actual).isEqualTo(expected);\n    }\n\n    @Test\n    @DisplayName(\"Test reporter with LinkedHash\")\n    void testPrintLinkedHashMap() {\n        // given\n        String key = \"LinkedHashMap\";\n        String value = \"Use this implementation if you need keep the order of elements\";\n        String expected = key + \" \" + value;\n        LinkedHashMap<String, String> map = new LinkedHashMap<>();\n        map.put(key, value);\n        // when\n        MapReporter mapReporter = new MapReporter(map);\n        mapReporter.printMap();\n        // then\n        String actual = outputStreamCaptor.toString().trim();\n        assertThat(actual).isEqualTo(expected);\n    }\n\n}"}
{"code_source": "package com.baeldung.maps;\n\nimport java.util.Objects;\n\npublic class CoordinateKey {\n\n    private final int x;\n    private final int y;\n    private final int hashCode;\n\n    public CoordinateKey(int x, int y) {\n        this.x = x;\n        this.y = y;\n        this.hashCode = Objects.hash(x, y);\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public int getY() {\n        return y;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o)\n            return true;\n        if (o == null || getClass() != o.getClass())\n            return false;\n        CoordinateKey that = (CoordinateKey) o;\n        return x == that.x && y == that.y;\n    }\n\n    @Override\n    public int hashCode() {\n        return this.hashCode;\n    }\n}\n", "test_case": "package com.baeldung.maps;\n\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\n\nimport java.awt.*;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class CoordinateKeyUnitTest {\n\n    private Map<CoordinateKey, Color> pixels = new HashMap<>();\n\n    @Test\n    void testOptimalKey() {\n        // setup\n        CoordinateKey coord = new CoordinateKey(1, 2);\n        pixels.put(coord, Color.CYAN);\n        // read out color correctly\n        assertEquals(Color.CYAN, pixels.get(coord));\n    }\n\n    @Test\n    void testSlowKey() {\n        // setup\n        CoordinateKey coord = new CoordinateSlowKey(1, 2);\n        pixels.put(coord, Color.CYAN);\n        // read out color correctly\n        assertEquals(Color.CYAN, pixels.get(coord));\n    }\n\n    // Performance Test Parameters - change here\n    private static final int MAX_X = 100;\n    private static final int MAX_Y = 100;\n    private static final int COUNT_OF_QUERIES = 1000;\n    private static final int QUERY_X = 1;\n    private static final int QUERY_Y = 1;\n\n    @Tag(\"performance\")\n    @Test\n    void testKeyPerformance() {\n        // generate some sample keys and values\n        for (int x = 0; x < MAX_X; x++) {\n            for (int y = 0; y < MAX_Y; y++) {\n                pixels.put(new CoordinateKey(x, y), new Color(x % 255, y % 255, (x + y) % 255));\n            }\n        }\n        // read out multiple times and measure time\n        CoordinateKey coord = new CoordinateKey(QUERY_X, QUERY_Y);\n        long t1 = System.currentTimeMillis();\n        for (int i = 0; i < COUNT_OF_QUERIES; i++) {\n            assertNotNull(pixels.get(coord));\n        }\n        long t2 = System.currentTimeMillis();\n        System.out.printf(\"Optimal key performance: %d ms%n\", t2 - t1);\n    }\n\n    @Tag(\"performance\")\n    @Test\n    void testSlowKeyPerformance() {\n        // generate some sample keys and values\n        for (int x = 0; x < MAX_X; x++) {\n            for (int y = 0; y < MAX_Y; y++) {\n                pixels.put(new CoordinateSlowKey(x, y), new Color(x % 255, y % 255, (x + y) % 255));\n            }\n        }\n        // read out multiple times and measure time\n        CoordinateKey coord = new CoordinateSlowKey(QUERY_X, QUERY_Y);\n        long t1 = System.currentTimeMillis();\n        for (int i = 0; i < COUNT_OF_QUERIES; i++) {\n            assertNotNull(pixels.get(coord));\n        }\n        long t2 = System.currentTimeMillis();\n        System.out.printf(\"Slow key performance: %d ms%n\", t2 - t1);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.maps;\n\nimport java.util.Objects;\n\npublic class CoordinateMutableKey {\n\n    private int x;\n    private int y;\n\n    public CoordinateMutableKey(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public void setX(int x) {\n        this.x = x;\n    }\n\n    public int getY() {\n        return y;\n    }\n\n    public void setY(int y) {\n        this.y = y;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o)\n            return true;\n        if (o == null || getClass() != o.getClass())\n            return false;\n        CoordinateMutableKey that = (CoordinateMutableKey) o;\n        return x == that.x && y == that.y;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(x, y);\n    }\n}\n", "test_case": "package com.baeldung.maps;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.awt.*;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\n\npublic class CoordinateMutableKeyUnitTest {\n\n    @Test\n    void testKeyMutable() {\n        // setup\n        Map<CoordinateMutableKey, Color> pixels = new HashMap<>();\n        CoordinateMutableKey coord = new CoordinateMutableKey(1, 2);\n        pixels.put(coord, Color.CYAN);\n        // read out color correctly\n        assertEquals(Color.CYAN, pixels.get(coord));\n        // change key's hashcode should result in null value\n        coord.setX(10);\n        assertNull(pixels.get(coord));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.nestedhashmaps;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport java.util.List;\n\npublic class NestedHashMapExamplesClass {\n    public static void main(String[] args) {\n\n        MapsUtil mUtil = new MapsUtil();\n\n        List<String> batterList = new ArrayList<>();\n        Map<String, Map<Integer, String>> outerBakedGoodsMap = new HashMap<>();\n        Map<String, Map<Integer, String>> outerBakedGoodsMap2 = new HashMap<>();\n        Map<String, Map<Integer, String>> outerBakedGoodsMap3 = new HashMap<>();\n        Map<String, Map<Integer, String>> outerBakedGoodsMap4 = new HashMap<>();\n\n        batterList.add(\"Mulberry\");\n        batterList.add(\"Cranberry\");\n        batterList.add(\"Blackberry\");\n        batterList.add(\"Mixed fruit\");\n        batterList.add(\"Orange\");\n\n        outerBakedGoodsMap.put(\"Cake\", mUtil.buildInnerMap(batterList));\n\n        batterList.clear();\n        batterList.add(\"Candy\");\n        batterList.add(\"Dark Chocolate\");\n        batterList.add(\"Chocolate\");\n        batterList.add(\"Jam filled\");\n        batterList.add(\"Pineapple\");\n\n        outerBakedGoodsMap.put(\"Donut\", mUtil.buildInnerMap(batterList));\n\n        outerBakedGoodsMap2.put(\"Eclair\", mUtil.buildInnerMap(batterList));\n        outerBakedGoodsMap2.put(\"Donut\", mUtil.buildInnerMap(batterList));\n\n        outerBakedGoodsMap3.put(\"Cake\", mUtil.buildInnerMap(batterList));\n        batterList.clear();\n        batterList.add(\"Banana\");\n        batterList.add(\"Red Velvet\");\n        batterList.add(\"Blackberry\");\n        batterList.add(\"Passion fruit\");\n        batterList.add(\"Kiwi\");\n\n        outerBakedGoodsMap3.put(\"Donut\", mUtil.buildInnerMap(batterList));\n\n        outerBakedGoodsMap4.putAll(outerBakedGoodsMap);\n\n        System.out.println(outerBakedGoodsMap.equals(outerBakedGoodsMap2));\n        System.out.println(outerBakedGoodsMap.equals(outerBakedGoodsMap3));\n        System.out.println(outerBakedGoodsMap.equals(outerBakedGoodsMap4));\n\n        outerBakedGoodsMap.get(\"Cake\")\n            .put(6, \"Cranberry\");\n        System.out.println(outerBakedGoodsMap);\n\n        outerBakedGoodsMap.get(\"Cake\")\n            .remove(5);\n        System.out.println(outerBakedGoodsMap);\n\n        outerBakedGoodsMap.put(\"Eclair\", new HashMap<Integer, String>() {\n            {\n                put(1, \"Dark Chocolate\");\n            }\n        });\n\n        System.out.println(outerBakedGoodsMap);\n        outerBakedGoodsMap.remove(\"Eclair\");\n        System.out.println(outerBakedGoodsMap);\n        System.out.println(\"Baked Goods Map Flattened: \" + mUtil.flattenMap(outerBakedGoodsMap));\n\n        // Employees Map\n        List<Employee> listEmployee = new ArrayList<Employee>();\n\n        listEmployee.add(new Employee(1, new Address(124, \"Timbuktoo\"), \"Thorin Oakenshield\"));\n        listEmployee.add(new Employee(2, new Address(100, \"Misty Lanes\"), \"Balin\"));\n        listEmployee.add(new Employee(3, new Address(156, \"Bramles Lane\"), \"Bofur\"));\n        listEmployee.add(new Employee(4, new Address(200, \"Bag End\"), \"Bilbo Baggins\"));\n        listEmployee.add(new Employee(5, new Address(23, \"Rivendell\"), \"Elrond\"));\n\n        Map<Integer, Map<String, String>> employeeAddressMap = mUtil.createNestedMapfromStream(listEmployee);\n\n        Map<Integer, Map<Integer, Address>> employeeMap = mUtil.createNestedObjectMap(listEmployee);\n        Map<Integer, Map<Integer, Address>> employeeMap2 = mUtil.createNestedObjectMap(listEmployee);\n\n        listEmployee.clear();\n        listEmployee.add(new Employee(1, new Address(500, \"Timbuktoo\"), \"Thorin Oakenshield\"));\n        listEmployee.add(new Employee(2, new Address(600, \"Misty Lanes\"), \"Balin\"));\n        listEmployee.add(new Employee(3, new Address(700, \"Bramles Lane\"), \"Bofur\"));\n        listEmployee.add(new Employee(4, new Address(800, \"Bag End\"), \"Bilbo Baggins\"));\n        listEmployee.add(new Employee(5, new Address(900, \"Rivendell\"), \"Elrond\"));\n\n        Map<Integer, Map<String, String>> employeeAddressMap1 = mUtil.createNestedMapfromStream(listEmployee);\n\n        Map<Integer, Map<Integer, Address>> employeeMap1 = mUtil.createNestedObjectMap(listEmployee);\n\n        System.out.println(employeeMap.equals(employeeMap1));\n        System.out.println(employeeMap.equals(employeeMap2));\n\n        for (Map.Entry<String, Map<Integer, String>> outerBakedGoodsMapEntrySet : outerBakedGoodsMap.entrySet()) {\n            Map<Integer, String> valueMap = outerBakedGoodsMapEntrySet.getValue();\n            System.out.println(valueMap.entrySet());\n        }\n\n        for (Map.Entry<Integer, Map<String, String>> employeeEntrySet : employeeAddressMap.entrySet()) {\n            Map<String, String> valueMap = employeeEntrySet.getValue();\n            System.out.println(valueMap.entrySet());\n        }\n\n        System.out.println(\"Employee Address Map Flattened: \" + mUtil.flattenMap(employeeAddressMap));\n\n        System.out.println(employeeAddressMap.equals(employeeAddressMap1));\n    }\n\n}\n", "test_case": "package com.baeldung.nestedhashmaps;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.hamcrest.CoreMatchers.equalTo;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.CoreMatchers.notNullValue;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotEquals;\nimport static org.junit.Assert.assertNotSame;\nimport static org.junit.Assert.assertThat;\nimport org.hamcrest.collection.IsMapContaining;\n\npublic class NestedHashMapExamplesClassUnitTest {\n    private MapsUtil mUtil = new MapsUtil();\n    private List<String> batterList = new ArrayList<>();\n    private List<Employee> listEmployee = new ArrayList<Employee>();\n    private Map<String, Map<Integer, String>> actualBakedGoodsMap = new HashMap<>();\n    private Map<Integer, Map<String, String>> actualEmployeeAddressMap = new HashMap<>();\n    private Map<Integer, Map<Integer, Address>> actualEmployeeMap = new HashMap<>();\n\n    @Test\n    public void whenCreateNestedHashMap_thenNestedMap() {\n        assertThat(mUtil.buildInnerMap(batterList), is(notNullValue()));\n        Assert.assertEquals(actualBakedGoodsMap.keySet().size(), 2);\n        Assert.assertThat(actualBakedGoodsMap, IsMapContaining.hasValue(equalTo(mUtil.buildInnerMap(batterList))));\n    }\n\n    private Map<Integer, Map<String, String>> setup() {\n        Map<Integer, Map<String, String>> expectedMap = new HashMap<>();\n        expectedMap.put(Integer.valueOf(100), new HashMap<String, String>() {\n            {\n                put(\"Misty Lanes\", \"Balin\");\n            }\n        });\n        expectedMap.put(Integer.valueOf(200), new HashMap<String, String>() {\n            {\n                put(\"Bag End\", \"Bilbo Baggins\");\n            }\n        });\n        expectedMap.put(Integer.valueOf(156), new HashMap<String, String>() {\n            {\n                put(\"Brambles Lane\", \"Bofur\");\n            }\n        });\n        expectedMap.put(Integer.valueOf(124), new HashMap<String, String>() {\n            {\n                put(\"Timbuktoo\", \"Thorin Oakenshield\");\n            }\n        });\n        expectedMap.put(Integer.valueOf(23), new HashMap<String, String>() {\n            {\n                put(\"Rivendell\", \"Elrond\");\n            }\n        });\n\n        return expectedMap;\n    }\n\n    @Test\n    public void whenCreateNestedHashMapwithStreams_thenNestedMap() {\n\n        Map<Integer, Map<String, String>> expectedMap = setup();\n\n        assertThat(actualEmployeeAddressMap, equalTo(expectedMap));\n    }\n\n    @Test\n    public void whenCompareTwoHashMapswithDifferenctValues_usingEquals_thenFail() {\n        Map<String, Map<Integer, String>> outerBakedGoodsMap2 = new HashMap<>();\n        outerBakedGoodsMap2.put(\"Eclair\", mUtil.buildInnerMap(batterList));\n        outerBakedGoodsMap2.put(\"Donut\", mUtil.buildInnerMap(batterList));\n        assertNotEquals(outerBakedGoodsMap2, actualBakedGoodsMap);\n\n        Map<String, Map<Integer, String>> outerBakedGoodsMap3 = new HashMap<String, Map<Integer, String>>();\n        outerBakedGoodsMap3.put(\"Cake\", mUtil.buildInnerMap(batterList));\n        batterList = new ArrayList<>();\n        batterList = Arrays.asList(\"Banana\", \"Red Velvet\", \"Blackberry\", \"Passion fruit\", \"Kiwi\");\n\n        outerBakedGoodsMap3.put(\"Donut\", mUtil.buildInnerMap(batterList));\n\n        assertNotEquals(outerBakedGoodsMap2, actualBakedGoodsMap);\n\n        listEmployee.clear();\n        listEmployee.add(new Employee(1, new Address(500, \"Timbuktoo\"), \"Thorin Oakenshield\"));\n        listEmployee.add(new Employee(2, new Address(600, \"Misty Lanes\"), \"Balin\"));\n        listEmployee.add(new Employee(3, new Address(700, \"Bramles Lane\"), \"Bofur\"));\n        listEmployee.add(new Employee(4, new Address(800, \"Bag End\"), \"Bilbo Baggins\"));\n        listEmployee.add(new Employee(5, new Address(900, \"Rivendell\"), \"Elrond\"));\n\n        Map<Integer, Map<String, String>> employeeAddressMap1 = mUtil.createNestedMapfromStream(listEmployee);\n\n        Map<Integer, Map<Integer, Address>> employeeMap1 = mUtil.createNestedObjectMap(listEmployee);\n\n        assertNotEquals(employeeAddressMap1, actualEmployeeAddressMap);\n\n        assertNotEquals(employeeMap1, actualEmployeeMap);\n    }\n\n    @Test\n    public void whencomparingDifferentObjectValuesUsingEquals_thenFail() {\n        listEmployee.clear();\n        listEmployee.add(new Employee(1, new Address(124, \"Timbuktoo\"), \"Thorin Oakenshield\"));\n        listEmployee.add(new Employee(2, new Address(100, \"Misty Lanes\"), \"Balin\"));\n        listEmployee.add(new Employee(3, new Address(156, \"Brambles Lane\"), \"Bofur\"));\n        listEmployee.add(new Employee(4, new Address(200, \"Bag End\"), \"Bilbo Baggins\"));\n        listEmployee.add(new Employee(5, new Address(23, \"Rivendell\"), \"Elrond\"));\n\n        Map<Integer, Map<Integer, Object>> employeeMap1 = listEmployee.stream().collect(Collectors.groupingBy(\n                (Employee emp) -> emp.getEmployeeId(),\n                Collectors.toMap((Employee emp) -> emp.getAddress().getAddressId(), fEmpObj -> fEmpObj.getAddress())));\n\n        assertNotSame(employeeMap1, actualEmployeeMap);\n        assertNotEquals(employeeMap1, actualEmployeeMap);\n\n        Map<Integer, Map<Integer, Address>> expectedMap = setupAddressObjectMap();\n        assertNotSame(expectedMap, actualEmployeeMap);\n        assertNotEquals(expectedMap, actualEmployeeMap);\n\n    }\n\n    @Test\n    public void whenCompareTwoHashMapsUsingEquals_thenSuccess() {\n        Map<String, Map<Integer, String>> outerBakedGoodsMap4 = new HashMap<>();\n        outerBakedGoodsMap4.putAll(actualBakedGoodsMap);\n\n        assertEquals(actualBakedGoodsMap, outerBakedGoodsMap4);\n\n        Map<Integer, Map<Integer, Address>> employeeMap1 = new HashMap<>();\n        employeeMap1.putAll(actualEmployeeMap);\n        assertEquals(actualEmployeeMap, employeeMap1);\n    }\n\n    @Test\n    public void whenAddElementinHashMaps_thenSuccess() {\n        assertEquals(actualBakedGoodsMap.get(\"Cake\").size(), 5);\n        actualBakedGoodsMap.get(\"Cake\").put(6, \"Cranberry\");\n        assertEquals(actualBakedGoodsMap.get(\"Cake\").size(), 6);\n    }\n\n    @Test\n    public void whenDeleteElementinHashMaps_thenSuccess() {\n        assertNotEquals(actualBakedGoodsMap.get(\"Cake\").get(5), null);\n        actualBakedGoodsMap.get(\"Cake\").remove(5);\n        assertEquals(actualBakedGoodsMap.get(\"Cake\").get(5), null);\n\n        actualBakedGoodsMap.put(\"Eclair\", new HashMap<Integer, String>() {\n            {\n                put(1, \"Dark Chocolate\");\n            }\n        });\n\n        assertNotEquals(actualBakedGoodsMap.get(\"Eclair\").get(1), null);\n        actualBakedGoodsMap.get(\"Eclair\").remove(1);\n        assertEquals(actualBakedGoodsMap.get(\"Eclair\").get(1), null);\n\n        actualBakedGoodsMap.put(\"Eclair\", new HashMap<Integer, String>() {\n            {\n                put(1, \"Dark Chocolate\");\n            }\n        });\n\n        assertNotEquals(actualBakedGoodsMap.get(\"Eclair\"), null);\n        actualBakedGoodsMap.remove(\"Eclair\");\n        assertEquals(actualBakedGoodsMap.get(\"Eclair\"), null);\n    }\n\n    @Test\n    public void whenFlattenMap_thenRemovesNesting() {\n\n        Map<String, String> flattenedBakedGoodsMap = mUtil.flattenMap(actualBakedGoodsMap);\n        assertThat(flattenedBakedGoodsMap, IsMapContaining.hasKey(\"Donut.2\"));\n\n        Map<String, String> flattenedEmployeeAddressMap = mUtil.flattenMap(actualEmployeeAddressMap);\n        assertThat(flattenedEmployeeAddressMap, IsMapContaining.hasKey(\"200.Bag End\"));\n    }\n\n    @Before\n    public void buildMaps() {\n\n        batterList = Arrays.asList(\"Mulberry\", \"Cranberry\", \"Blackberry\", \"Mixed fruit\", \"Orange\");\n\n        actualBakedGoodsMap.put(\"Cake\", mUtil.buildInnerMap(batterList));\n\n        batterList = new ArrayList<>();\n        batterList = Arrays.asList(\"Candy\", \"Dark Chocolate\", \"Chocolate\", \"Jam filled\", \"Pineapple\");\n\n        actualBakedGoodsMap.put(\"Donut\", mUtil.buildInnerMap(batterList));\n\n        listEmployee.add(new Employee(1, new Address(124, \"Timbuktoo\"), \"Thorin Oakenshield\"));\n        listEmployee.add(new Employee(2, new Address(100, \"Misty Lanes\"), \"Balin\"));\n        listEmployee.add(new Employee(3, new Address(156, \"Brambles Lane\"), \"Bofur\"));\n        listEmployee.add(new Employee(4, new Address(200, \"Bag End\"), \"Bilbo Baggins\"));\n        listEmployee.add(new Employee(5, new Address(23, \"Rivendell\"), \"Elrond\"));\n\n        actualEmployeeAddressMap = mUtil.createNestedMapfromStream(listEmployee);\n\n        actualEmployeeMap = mUtil.createNestedObjectMap(listEmployee);\n\n    }\n\n    private Map<Integer, Map<Integer, Address>> setupAddressObjectMap() {\n\n        Map<Integer, Map<Integer, Address>> expectedMap = new HashMap<>();\n\n        expectedMap.put(1, new HashMap<Integer, Address>() {\n            {\n                put(124, new Address(124, \"Timbuktoo\"));\n            }\n        });\n        expectedMap.put(2, new HashMap<Integer, Address>() {\n            {\n                put(100, new Address(100, \"Misty Lanes\"));\n            }\n        });\n        expectedMap.put(3, new HashMap<Integer, Address>() {\n            {\n                put(156, new Address(156, \"Brambles Lane\"));\n            }\n        });\n        expectedMap.put(4, new HashMap<Integer, Address>() {\n            {\n                put(200, new Address(200, \"Bag End\"));\n            }\n        });\n        expectedMap.put(5, new HashMap<Integer, Address>() {\n            {\n                put(23, new Address(23, \"Rivendell\"));\n            }\n        });\n        return expectedMap;\n    }\n\n}\n"}
{"code_source": "package com.baeldung.map.identity;\n\nimport java.util.*;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class IdentityHashMapDemonstrator {\n    public static void main(String[] args) {\n        IdentityHashMap<String, String> identityHashMap = createWithSimpleData();\n        System.out.println(\"Map details: \" + identityHashMap);\n        IdentityHashMap<String, String> copiedMap = createFromAnotherMap(identityHashMap);\n\n        updateWithNewValue(copiedMap);\n        iterateIdentityHashMap(copiedMap);\n        addNullKeyValue();\n        demoHashMapVsIdentityMap();\n        demoMutableKeys();\n\n        Map<String, String> synchronizedMap = getSynchronizedMap();\n        //Do multithreaded operations on synchronizedMap\n    }\n\n    private static void addNullKeyValue() {\n        IdentityHashMap<String, String> identityHashMap = new IdentityHashMap<>();\n        identityHashMap.put(null, \"Null Key Accepted\");\n        identityHashMap.put(\"Null Value Accepted\", null);\n        assertEquals(\"Null Key Accepted\", identityHashMap.get(null));\n        assertEquals(null, identityHashMap.get(\"Null Value Accepted\"));\n    }\n\n    private static void iterateIdentityHashMap(IdentityHashMap<String, String> identityHashMap) {\n        // Iterating using entrySet\n        System.out.println(\"Iterating values: \");\n        Set<Map.Entry<String, String>> entries = identityHashMap.entrySet();\n        for (Map.Entry<String, String> entry: entries) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue());\n        }\n\n        // Iterating using keySet\n        System.out.println(\"Iterating values using keySet: \");\n        for (String key: identityHashMap.keySet()) {\n            System.out.println(key + \": \" + identityHashMap.get(key));\n        }\n\n        // Throws error if we modify while iterating\n        System.out.println(\"This iteration throws error: \");\n        try {\n            for (Map.Entry<String, String> entry: entries) {\n                System.out.println(entry.getKey() + \": \" + entry.getValue());\n                identityHashMap.remove(\"title\");\n            }\n        } catch (ConcurrentModificationException ex) {\n            System.out.println(\"This exception will raise for sure, if we modify while iterating\");\n        }\n    }\n\n    private static class Book {\n        String title;\n        int year;\n\n        Book() {\n            // nothing to do\n        }\n\n        Book(String title, int year) {\n            this.title = title;\n            this.year = year;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Book book = (Book) o;\n            return year == book.year && title.equals(book.title);\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(title, year);\n        }\n\n        @Override\n        public String toString() {\n            return \"Book{title='\" + title + \"', year=\" + year + \"}\";\n        }\n    }\n\n    private static void demoMutableKeys() {\n        Book book1 = new Book(\"A Passage to India\", 1924);\n        Book book2 = new Book(\"Invisible Man\", 1953);\n\n        HashMap<Book, String> hashMap = new HashMap<>(10);\n        hashMap.put(book1, \"A great work of fiction\");\n        hashMap.put(book2, \"won the US National Book Award\");\n        book2.year = 1952;\n        assertEquals(null, hashMap.get(book2));\n        System.out.println(\"HashMap: \" + hashMap);\n\n        IdentityHashMap<Book, String> identityHashMap = new IdentityHashMap<>(10);\n        identityHashMap.put(book1, \"A great work of fiction\");\n        identityHashMap.put(book2, \"won the US National Book Award\");\n        book2.year = 1951;\n        assertEquals(\"won the US National Book Award\", identityHashMap.get(book2));\n        System.out.println(\"IdentityHashMap: \" + identityHashMap);\n    }\n\n    private static void demoHashMapVsIdentityMap() {\n        IdentityHashMap<String, String> identityHashMap = new IdentityHashMap<>();\n        identityHashMap.put(\"title\", \"Harry Potter and the Goblet of Fire\");\n        identityHashMap.put(\"author\", \"J. K. Rowling\");\n        identityHashMap.put(\"language\", \"English\");\n        identityHashMap.put(\"genre\", \"Fantasy\");\n\n        HashMap<String, String> hashMap = new HashMap<>(identityHashMap);\n        hashMap.put(new String(\"genre\"), \"Drama\");\n        assertEquals(4, hashMap.size());\n        System.out.println(\"HashMap content: \" + hashMap);\n\n        identityHashMap.put(new String(\"genre\"), \"Drama\");\n        assertEquals(5, identityHashMap.size());\n        System.out.println(\"IdentityHashMap content: \" + identityHashMap);\n    }\n\n    private static Map<String, String> getSynchronizedMap() {\n        Map<String, String> synchronizedMap = Collections.synchronizedMap(new IdentityHashMap<String, String>());\n        return synchronizedMap;\n    }\n\n    private static IdentityHashMap<String, String> createFromAnotherMap(Map<String, String> otherMap) {\n        IdentityHashMap<String, String> identityHashMap = new IdentityHashMap<>(otherMap);\n        return identityHashMap;\n    }\n\n    private static void updateWithNewValue(IdentityHashMap<String, String> identityHashMap) {\n        String oldTitle = identityHashMap.put(\"title\", \"Harry Potter and the Deathly Hallows\");\n        assertEquals(\"Harry Potter and the Goblet of Fire\", oldTitle);\n        assertEquals(\"Harry Potter and the Deathly Hallows\", identityHashMap.get(\"title\"));\n    }\n\n    public static void addValue(IdentityHashMap<String, String> identityHashMap, String key, String value) {\n        identityHashMap.put(key, value);\n    }\n\n    public static void addAllValues(IdentityHashMap<String, String> identityHashMap, Map<String, String> otherMap) {\n        identityHashMap.putAll(otherMap);\n    }\n\n    public static IdentityHashMap<String, String> createWithSimpleData() {\n        IdentityHashMap<String, String> identityHashMap = new IdentityHashMap<>();\n        identityHashMap.put(\"title\", \"Harry Potter and the Goblet of Fire\");\n        identityHashMap.put(\"author\", \"J. K. Rowling\");\n        identityHashMap.put(\"language\", \"English\");\n        identityHashMap.put(\"genre\", \"Fantasy\");\n        return identityHashMap;\n    }\n}\n", "test_case": "package com.baeldung.map.identity;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.IdentityHashMap;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class IdentityHashMapDemonstratorUnitTest {\n\n    @Test\n    public void givenIdentityHashMap_whenNewObjectWithSameKey_thenAddsAsNewValue() {\n        IdentityHashMap<String, String> identityHashMap = IdentityHashMapDemonstrator.createWithSimpleData();\n        String newGenreKey = new String(\"genre\");\n        identityHashMap.put(newGenreKey, \"Drama\");\n\n        assertEquals(5, identityHashMap.size());\n        assertEquals(\"Fantasy\", identityHashMap.get(\"genre\"));\n        assertEquals(\"Drama\", identityHashMap.get(newGenreKey));\n    }\n}\n"}
{"code_source": "package com.baeldung.map.multikey;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\npublic class WrapperClassUserCache {\n    private Map<CacheKey, User> cache = new HashMap<>();\n\n    public User getById(CacheKey key) {\n        return cache.get(key);\n    }\n\n    public void storeById(CacheKey key, User user) {\n        cache.put(key, user);\n    }\n\n    public static class CacheKey {\n        private final Object value;\n\n        public CacheKey(String value) {\n            this.value = value;\n        }\n\n        public CacheKey(Long value) {\n            this.value = value;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            CacheKey cacheKey = (CacheKey) o;\n            return value.equals(cacheKey.value);\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(value);\n        }\n    }\n}\n", "test_case": "package com.baeldung.map.multikey;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\nclass WrapperClassUserCacheUnitTest {\n    private WrapperClassUserCache cache = new WrapperClassUserCache();\n\n    @BeforeEach\n    public void setup() {\n        cache.storeById(new WrapperClassUserCache.CacheKey(\"a\"), new User(\"User A\"));\n        cache.storeById(new WrapperClassUserCache.CacheKey(\"b\"), new User(\"User B\"));\n        cache.storeById(new WrapperClassUserCache.CacheKey(3L), new User(\"User 3\"));\n        cache.storeById(new WrapperClassUserCache.CacheKey(4L), new User(\"User 4\"));\n    }\n\n    @Test\n    public void getByString() {\n        User user = cache.getById(new WrapperClassUserCache.CacheKey(\"b\"));\n        assertNotNull(user);\n        assertEquals(\"User B\", user.getName());\n    }\n\n    @Test\n    public void getByLong() {\n        User user = cache.getById(new WrapperClassUserCache.CacheKey(4L));\n        assertNotNull(user);\n        assertEquals(\"User 4\", user.getName());\n    }\n}"}
{"code_source": "package com.baeldung.map.multikey;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\npublic class WrapperInterfaceUserCache {\n    private Map<CacheKey, User> cache = new HashMap<>();\n\n    public User getById(CacheKey key) {\n        return cache.get(key);\n    }\n\n    public void storeById(CacheKey key, User user) {\n        cache.put(key, user);\n    }\n\n    public interface CacheKey {\n    }\n\n    public static class StringCacheKey implements CacheKey{\n        private final String value;\n\n        public StringCacheKey(String value) {\n            this.value = value;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            StringCacheKey that = (StringCacheKey) o;\n            return value.equals(that.value);\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(value);\n        }\n    }\n\n    public static class LongCacheKey implements CacheKey {\n        private final Long value;\n\n        public LongCacheKey(Long value) {\n            this.value = value;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            LongCacheKey that = (LongCacheKey) o;\n            return value.equals(that.value);\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(value);\n        }\n    }\n}\n", "test_case": "package com.baeldung.map.multikey;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\nclass WrapperInterfaceUserCacheUnitTest {\n    private WrapperInterfaceUserCache cache = new WrapperInterfaceUserCache();\n\n    @BeforeEach\n    public void setup() {\n        cache.storeById(new WrapperInterfaceUserCache.StringCacheKey(\"a\"), new User(\"User A\"));\n        cache.storeById(new WrapperInterfaceUserCache.StringCacheKey(\"b\"), new User(\"User B\"));\n        cache.storeById(new WrapperInterfaceUserCache.LongCacheKey(3L), new User(\"User 3\"));\n        cache.storeById(new WrapperInterfaceUserCache.LongCacheKey(4L), new User(\"User 4\"));\n    }\n\n    @Test\n    public void getByString() {\n        User user = cache.getById(new WrapperInterfaceUserCache.StringCacheKey(\"b\"));\n        assertNotNull(user);\n        assertEquals(\"User B\", user.getName());\n    }\n\n    @Test\n    public void getByLong() {\n        User user = cache.getById(new WrapperInterfaceUserCache.LongCacheKey(4L));\n        assertNotNull(user);\n        assertEquals(\"User 4\", user.getName());\n    }\n}"}
{"code_source": "package com.baeldung.set;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class SetDiff {\n\n    public static <T> Set<T> findSymmetricDiff(Set<T> set1, Set<T> set2) {\n        Map<T, Integer> map = new HashMap<>();\n        set1.forEach(e -> putKey(map, e));\n        set2.forEach(e -> putKey(map, e));\n        return map.entrySet().stream()\n            .filter(e -> e.getValue() == 1)\n            .map(Map.Entry::getKey)\n            .collect(Collectors.toSet());\n    }\n\n    private static <T> void putKey(Map<T, Integer> map, T key) {\n        if (map.containsKey(key)) {\n            map.replace(key, Integer.MAX_VALUE);\n        } else {\n            map.put(key, 1);\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.set;\n\nimport com.google.common.collect.Sets;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.collections4.SetUtils;\nimport org.junit.Test;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class SetDiffUnitTest {\n    private final static Set<String> immutableSet1 = Set.of(\"Kotlin\", \"Java\", \"Rust\", \"Python\", \"C++\");\n    private final static Set<String> immutableSet2 = Set.of(\"Kotlin\", \"Java\", \"Rust\", \"Ruby\", \"C#\");\n    private final static Set<String> expectedOnlyInSet1 = Set.of(\"Python\", \"C++\");\n    private final static Set<String> expectedDiff = Set.of(\"Python\", \"C++\", \"Ruby\", \"C#\");\n\n    @Test\n    public void givenAnotherSet_whenRemoveAll_shouldGetDiff() {\n        Set<String> set1 = Stream.of(\"Kotlin\", \"Java\", \"Rust\", \"Python\", \"C++\").collect(Collectors.toSet());\n        Set<String> set2 = Stream.of(\"Kotlin\", \"Java\", \"Rust\", \"Ruby\", \"C#\").collect(Collectors.toSet());\n        Set<String> expectedOnlyInSet1 = Set.of(\"Python\", \"C++\");\n        set1.removeAll(set2);\n        assertThat(set1).isEqualTo(expectedOnlyInSet1);\n    }\n\n    @Test\n    public void givenAnotherSet_whenUsingStreamFilter_shouldGet() {\n        Set<String> actualOnlyInSet1 = immutableSet1.stream().filter(e -> !immutableSet2.contains(e)).collect(Collectors.toSet());\n        assertThat(actualOnlyInSet1).isEqualTo(expectedOnlyInSet1);\n    }\n\n    @Test\n    public void givenAnotherSet_whenCallingGuavaMethod_shouldGetDiff() {\n        Set<String> actualOnlyInSet1 = Sets.difference(immutableSet1, immutableSet2);\n        assertThat(actualOnlyInSet1).isEqualTo(expectedOnlyInSet1);\n    }\n\n    @Test\n    public void givenAnotherSet_whenCallingCommonsMethod_shouldGetDiff() {\n        Set<String> actualOnlyInSet1 = new HashSet<>(CollectionUtils.removeAll(immutableSet1, immutableSet2));\n        assertThat(actualOnlyInSet1).isEqualTo(expectedOnlyInSet1);\n    }\n\n\n    @Test\n    public void givenTwoSets_whenCallingFindDisjunction_shouldGetDisjunction() {\n        Set<String> actualDiff = SetDiff.findSymmetricDiff(immutableSet1, immutableSet2);\n        assertThat(actualDiff).isEqualTo(expectedDiff);\n    }\n\n    @Test\n    public void givenTwoSets_whenCallingCommonsMethod_shouldGetDisjunction() {\n        Set<String> actualDiff = SetUtils.disjunction(immutableSet1, immutableSet2);\n        assertThat(actualDiff).isEqualTo(expectedDiff);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.concurrent.atomic;\n\npublic class UnsafeCounter {\n    private int counter;\n    \n    int getValue() {\n        return counter;\n    }\n    \n    void increment() {\n        counter++;\n    }\n}\n", "test_case": "package com.baeldung.concurrent.atomic;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.IntStream;\n\nimport org.junit.Test;\n\n/**\n * This test shows the behaviour of a thread-unsafe class in a multithreaded scenario. We are calling\n * the increment methods 1000 times from a pool of 3 threads. In most of the cases, the counter will \n * less than 1000, because of lost updates, however, occasionally it may reach 1000, when no threads\n * called the method simultaneously. This may cause the build to fail occasionally. Hence excluding this\n * test from build by adding this in manual test\n */\npublic class ThreadUnsafeCounterManualTest {\n\n    @Test\n    public void givenMultiThread_whenUnsafeCounterIncrement() throws InterruptedException {\n        ExecutorService service = Executors.newFixedThreadPool(3);\n        UnsafeCounter unsafeCounter = new UnsafeCounter();\n\n        IntStream.range(0, 1000)\n          .forEach(count -> service.submit(unsafeCounter::increment));\n        service.awaitTermination(100, TimeUnit.MILLISECONDS);\n\n        assertEquals(1000, unsafeCounter.getValue());\n    }\n    \n}\n"}
{"code_source": "package com.baeldung.concurrent.cyclicbarrier;\n\nimport java.util.concurrent.BrokenBarrierException;\nimport java.util.concurrent.CyclicBarrier;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class CyclicBarrierCompletionMethodExample {\n\n    private int count;\n    private int threadCount;\n    private final AtomicInteger updateCount;\n    \n    CyclicBarrierCompletionMethodExample(int count, int threadCount) {\n        updateCount = new AtomicInteger(0);\n        this.count = count;\n        this.threadCount = threadCount;\n    }\n\n    public int countTrips() {\n\n        CyclicBarrier cyclicBarrier = new CyclicBarrier(count, () -> {\n            updateCount.incrementAndGet();\n        });\n\n        ExecutorService es = Executors.newFixedThreadPool(threadCount);\n        for (int i = 0; i < threadCount; i++) {\n            es.execute(() -> {\n                try {\n                    cyclicBarrier.await();\n                } catch (InterruptedException | BrokenBarrierException e) {\n                    e.printStackTrace();\n                }\n            });\n        }\n        es.shutdown();\n        try {\n            es.awaitTermination(1, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return updateCount.get();\n    }\n\n    public static void main(String[] args) {\n        CyclicBarrierCompletionMethodExample ex = new CyclicBarrierCompletionMethodExample(5, 20);\n        System.out.println(\"Count : \" + ex.countTrips());\n    }\n}\n", "test_case": "package com.baeldung.concurrent.cyclicbarrier;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\npublic class CyclicBarrierCompletionMethodExampleUnitTest {\n    \n    @Test\n    public void whenCyclicBarrier_countTrips() {\n        CyclicBarrierCompletionMethodExample ex = new CyclicBarrierCompletionMethodExample(7,20);\n        int lineCount = ex.countTrips();\n        assertEquals(2, lineCount);\n    }\n}\n"}
{"code_source": "package com.baeldung.concurrent.locks;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.ReentrantLock;\n\nimport static java.lang.Thread.sleep;\n\npublic class SharedObjectWithLock {\n\n    private static final Logger LOG = LoggerFactory.getLogger(SharedObjectWithLock.class);\n\n    private ReentrantLock lock = new ReentrantLock(true);\n\n    private int counter = 0;\n\n    void perform() {\n\n        lock.lock();\n        LOG.info(\"Thread - \" + Thread.currentThread().getName() + \" acquired the lock\");\n        try {\n            LOG.info(\"Thread - \" + Thread.currentThread().getName() + \" processing\");\n            counter++;\n        } catch (Exception exception) {\n            LOG.error(\" Interrupted Exception \", exception);\n        } finally {\n            lock.unlock();\n            LOG.info(\"Thread - \" + Thread.currentThread().getName() + \" released the lock\");\n        }\n    }\n\n    private void performTryLock() {\n\n        LOG.info(\"Thread - \" + Thread.currentThread().getName() + \" attempting to acquire the lock\");\n        try {\n            boolean isLockAcquired = lock.tryLock(2, TimeUnit.SECONDS);\n            if (isLockAcquired) {\n                try {\n                    LOG.info(\"Thread - \" + Thread.currentThread().getName() + \" acquired the lock\");\n\n                    LOG.info(\"Thread - \" + Thread.currentThread().getName() + \" processing\");\n                    sleep(1000);\n                } finally {\n                    lock.unlock();\n                    LOG.info(\"Thread - \" + Thread.currentThread().getName() + \" released the lock\");\n\n                }\n            }\n        } catch (InterruptedException exception) {\n            LOG.error(\" Interrupted Exception \", exception);\n        }\n        LOG.info(\"Thread - \" + Thread.currentThread().getName() + \" could not acquire the lock\");\n    }\n\n    public ReentrantLock getLock() {\n        return lock;\n    }\n\n    boolean isLocked() {\n        return lock.isLocked();\n    }\n\n    boolean hasQueuedThreads() {\n        return lock.hasQueuedThreads();\n    }\n\n    int getCounter() {\n        return counter;\n    }\n\n    public static void main(String[] args) {\n\n        final int threadCount = 2;\n        final ExecutorService service = Executors.newFixedThreadPool(threadCount);\n        final SharedObjectWithLock object = new SharedObjectWithLock();\n\n        service.execute(object::perform);\n        service.execute(object::performTryLock);\n\n        service.shutdown();\n\n    }\n\n}\n", "test_case": "package com.baeldung.concurrent.locks;\n\nimport org.junit.Test;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\nimport static junit.framework.TestCase.assertEquals;\n\npublic class SharedObjectWithLockManualTest {\n\n    @Test\n    public void whenLockAcquired_ThenLockedIsTrue() {\n        final SharedObjectWithLock object = new SharedObjectWithLock();\n\n        final int threadCount = 2;\n        final ExecutorService service = Executors.newFixedThreadPool(threadCount);\n\n        executeThreads(object, threadCount, service);\n\n        assertEquals(true, object.isLocked());\n\n        service.shutdown();\n    }\n\n    @Test\n    public void whenLocked_ThenQueuedThread() {\n        final int threadCount = 4;\n        final ExecutorService service = Executors.newFixedThreadPool(threadCount);\n        final SharedObjectWithLock object = new SharedObjectWithLock();\n\n        executeThreads(object, threadCount, service);\n\n        assertEquals(object.hasQueuedThreads(), true);\n\n        service.shutdown();\n\n    }\n\n    public void whenTryLock_ThenQueuedThread() {\n        final SharedObjectWithLock object = new SharedObjectWithLock();\n\n        final int threadCount = 2;\n        final ExecutorService service = Executors.newFixedThreadPool(threadCount);\n\n        executeThreads(object, threadCount, service);\n\n        assertEquals(true, object.isLocked());\n\n        service.shutdown();\n    }\n\n    @Test\n    public void whenGetCount_ThenCorrectCount() throws InterruptedException {\n        final int threadCount = 4;\n        final ExecutorService service = Executors.newFixedThreadPool(threadCount);\n        final SharedObjectWithLock object = new SharedObjectWithLock();\n\n        executeThreads(object, threadCount, service);\n        Thread.sleep(1000);\n        assertEquals(object.getCounter(), 4);\n\n        service.shutdown();\n\n    }\n\n    private void executeThreads(SharedObjectWithLock object, int threadCount, ExecutorService service) {\n        for (int i = 0; i < threadCount; i++) {\n            service.execute(object::perform);\n        }\n    }\n\n}\n"}
{"code_source": "package com.baeldung.concurrent.locks;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReadWriteLock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\n\nimport static java.lang.Thread.sleep;\n\npublic class SynchronizedHashMapWithRWLock {\n\n    private static Map<String, String> syncHashMap = new HashMap<>();\n    private Logger logger = LoggerFactory.getLogger(SynchronizedHashMapWithRWLock.class);\n\n    private final ReadWriteLock lock = new ReentrantReadWriteLock();\n    private final Lock readLock = lock.readLock();\n    private final Lock writeLock = lock.writeLock();\n\n    public void put(String key, String value) throws InterruptedException {\n\n        try {\n            writeLock.lock();\n            logger.info(Thread.currentThread().getName() + \" writing\");\n            syncHashMap.put(key, value);\n            sleep(1000);\n        } finally {\n            writeLock.unlock();\n        }\n\n    }\n\n    public String get(String key) {\n        try {\n            readLock.lock();\n            logger.info(Thread.currentThread().getName() + \" reading\");\n            return syncHashMap.get(key);\n        } finally {\n            readLock.unlock();\n        }\n    }\n\n    public String remove(String key) {\n        try {\n            writeLock.lock();\n            return syncHashMap.remove(key);\n        } finally {\n            writeLock.unlock();\n        }\n    }\n\n    public boolean containsKey(String key) {\n        try {\n            readLock.lock();\n            return syncHashMap.containsKey(key);\n        } finally {\n            readLock.unlock();\n        }\n    }\n\n    boolean isReadLockAvailable() {\n        return readLock.tryLock();\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n\n        final int threadCount = 3;\n        final ExecutorService service = Executors.newFixedThreadPool(threadCount);\n        SynchronizedHashMapWithRWLock object = new SynchronizedHashMapWithRWLock();\n\n        service.execute(new Thread(new Writer(object), \"Writer\"));\n        service.execute(new Thread(new Reader(object), \"Reader1\"));\n        service.execute(new Thread(new Reader(object), \"Reader2\"));\n\n        service.shutdown();\n    }\n\n    private static class Reader implements Runnable {\n\n        SynchronizedHashMapWithRWLock object;\n\n        Reader(SynchronizedHashMapWithRWLock object) {\n            this.object = object;\n        }\n\n        @Override\n        public void run() {\n            for (int i = 0; i < 10; i++) {\n                object.get(\"key\" + i);\n            }\n        }\n    }\n\n    private static class Writer implements Runnable {\n\n        SynchronizedHashMapWithRWLock object;\n\n        public Writer(SynchronizedHashMapWithRWLock object) {\n            this.object = object;\n        }\n\n        @Override\n        public void run() {\n            for (int i = 0; i < 10; i++) {\n                try {\n                    object.put(\"key\" + i, \"value\" + i);\n                    sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.concurrent.locks;\n\nimport org.junit.Test;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\nimport static junit.framework.TestCase.assertEquals;\n\npublic class SynchronizedHashMapWithRWLockManualTest {\n\n    @Test\n    public void whenWriting_ThenNoReading() {\n        SynchronizedHashMapWithRWLock object = new SynchronizedHashMapWithRWLock();\n        final int threadCount = 3;\n        final ExecutorService service = Executors.newFixedThreadPool(threadCount);\n\n        executeWriterThreads(object, threadCount, service);\n\n        assertEquals(object.isReadLockAvailable(), false);\n\n        service.shutdown();\n    }\n\n    @Test\n    public void whenReading_ThenMultipleReadingAllowed() {\n        SynchronizedHashMapWithRWLock object = new SynchronizedHashMapWithRWLock();\n        final int threadCount = 5;\n        final ExecutorService service = Executors.newFixedThreadPool(threadCount);\n\n        executeReaderThreads(object, threadCount, service);\n\n        assertEquals(object.isReadLockAvailable(), true);\n\n        service.shutdown();\n    }\n\n    private void executeWriterThreads(SynchronizedHashMapWithRWLock object, int threadCount, ExecutorService service) {\n        for (int i = 0; i < threadCount; i++) {\n            service.execute(() -> {\n                try {\n                    object.put(\"key\" + threadCount, \"value\" + threadCount);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            });\n        }\n    }\n\n    private void executeReaderThreads(SynchronizedHashMapWithRWLock object, int threadCount, ExecutorService service) {\n        for (int i = 0; i < threadCount; i++)\n            service.execute(() -> object.get(\"key\" + threadCount));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.concurrent.countdownlatch;\n\nimport java.util.concurrent.CountDownLatch;\n\npublic class CountdownLatchCountExample {\n\n    private int count;\n\n    public CountdownLatchCountExample(int count) {\n        this.count = count;\n    }\n\n    public boolean callTwiceInSameThread() {\n        CountDownLatch countDownLatch = new CountDownLatch(count);\n        Thread t = new Thread(() -> {\n            countDownLatch.countDown();\n            countDownLatch.countDown();\n        });\n        t.start();\n\n        try {\n            countDownLatch.await();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return countDownLatch.getCount() == 0;\n    }\n\n    public static void main(String[] args) {\n        CountdownLatchCountExample ex = new CountdownLatchCountExample(2);\n        System.out.println(\"Is CountDown Completed : \" + ex.callTwiceInSameThread());\n    }\n}\n", "test_case": "package com.baeldung.concurrent.countdownlatch;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class CountdownLatchCountExampleUnitTest {\n\n    @Test\n    public void whenCountDownLatch_completed() {\n        CountdownLatchCountExample ex = new CountdownLatchCountExample(2);\n        boolean isCompleted = ex.callTwiceInSameThread();\n        assertTrue(isCompleted);\n    }\n}\n"}
{"code_source": "package com.baeldung.concurrent.countdownlatch;\n\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class CountdownLatchResetExample {\n\n    private int count;\n    private int threadCount;\n    private final AtomicInteger updateCount;\n\n    CountdownLatchResetExample(int count, int threadCount) {\n        updateCount = new AtomicInteger(0);\n        this.count = count;\n        this.threadCount = threadCount;\n    }\n\n    public int countWaits() {\n        CountDownLatch countDownLatch = new CountDownLatch(count);\n        ExecutorService es = Executors.newFixedThreadPool(threadCount);\n        for (int i = 0; i < threadCount; i++) {\n            es.execute(() -> {\n                long prevValue = countDownLatch.getCount();\n                countDownLatch.countDown();\n                if (countDownLatch.getCount() != prevValue) {\n                    updateCount.incrementAndGet();\n                }               \n            });\n        }\n        \n        es.shutdown();\n        return updateCount.get();\n    }\n\n    public static void main(String[] args) {\n        CountdownLatchResetExample ex = new CountdownLatchResetExample(5, 20);\n        System.out.println(\"Count : \" + ex.countWaits());\n    }\n}\n", "test_case": "package com.baeldung.concurrent.countdownlatch;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class CountdownLatchResetExampleManualTest {\n    \n    @Test\n    public void whenCountDownLatch_noReset() {\n        CountdownLatchResetExample ex = new CountdownLatchResetExample(7,20);\n        int lineCount = ex.countWaits();\n        assertTrue(lineCount <= 7);\n    }\n}\n"}
{"code_source": "package com.baeldung.concurrent.cyclicbarrier;\n\nimport java.util.concurrent.BrokenBarrierException;\nimport java.util.concurrent.CyclicBarrier;\n\npublic class CyclicBarrierCountExample {\n\n    private int count;\n\n    public CyclicBarrierCountExample(int count) {\n        this.count = count;\n    }\n\n    public boolean callTwiceInSameThread() {\n        CyclicBarrier cyclicBarrier = new CyclicBarrier(count);\n        Thread t = new Thread(() -> {\n            try {\n                cyclicBarrier.await();\n                cyclicBarrier.await();\n            } catch (InterruptedException | BrokenBarrierException e) {\n                e.printStackTrace();\n            }\n        });\n        t.start();\n        return cyclicBarrier.isBroken();\n    }\n\n    public static void main(String[] args) {\n        CyclicBarrierCountExample ex = new CyclicBarrierCountExample(7);\n        System.out.println(\"Count : \" + ex.callTwiceInSameThread());\n    }\n}\n", "test_case": "package com.baeldung.concurrent.cyclicbarrier;\n\nimport static org.junit.Assert.assertFalse;\n\nimport org.junit.Test;\n\npublic class CyclicBarrierCountExampleUnitTest {\n\n    @Test\n    public void whenCyclicBarrier_notCompleted() {\n        CyclicBarrierCountExample ex = new CyclicBarrierCountExample(2);\n        boolean isCompleted = ex.callTwiceInSameThread();\n        assertFalse(isCompleted);\n    }\n}\n"}
{"code_source": "package com.baeldung.concurrent.cyclicbarrier;\n\nimport java.util.concurrent.BrokenBarrierException;\nimport java.util.concurrent.CyclicBarrier;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class CyclicBarrierResetExample {\n\n    private int count;\n    private int threadCount;\n    private final AtomicInteger updateCount;\n\n    CyclicBarrierResetExample(int count, int threadCount) {\n        updateCount = new AtomicInteger(0);\n        this.count = count;\n        this.threadCount = threadCount;\n    }\n\n    public int countWaits() {\n\n        CyclicBarrier cyclicBarrier = new CyclicBarrier(count);\n\n        ExecutorService es = Executors.newFixedThreadPool(threadCount);\n        for (int i = 0; i < threadCount; i++) {\n            es.execute(() -> {\n                try {\n                    if (cyclicBarrier.getNumberWaiting() > 0) {\n                        updateCount.incrementAndGet();\n                    }   \n                    cyclicBarrier.await();\n                } catch (InterruptedException | BrokenBarrierException e) {\n                    e.printStackTrace();\n                }\n            });\n        }\n        es.shutdown();\n        try {\n            es.awaitTermination(1, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return updateCount.get();\n    }\n\n    public static void main(String[] args) {\n        CyclicBarrierResetExample ex = new CyclicBarrierResetExample(7, 20);\n        System.out.println(\"Count : \" + ex.countWaits());\n    }\n}\n", "test_case": "package com.baeldung.concurrent.cyclicbarrier;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class CyclicBarrierResetExampleUnitTest {\n    \n    @Test\n    public void whenCyclicBarrier_reset() {\n        CyclicBarrierResetExample ex = new CyclicBarrierResetExample(7,20);\n        int lineCount = ex.countWaits();\n        assertTrue(lineCount > 7);\n    }\n}\n"}
{"code_source": "package com.baeldung.concurrent.prioritytaskexecution;\n\nimport java.util.Comparator;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.PriorityBlockingQueue;\nimport java.util.concurrent.TimeUnit;\n\npublic class PriorityJobScheduler {\n\n    private ExecutorService priorityJobPoolExecutor;\n    private ExecutorService priorityJobScheduler = \n      Executors.newSingleThreadExecutor();\n    private PriorityBlockingQueue<Job> priorityQueue;\n\n    public PriorityJobScheduler(Integer poolSize, Integer queueSize) {\n        priorityJobPoolExecutor = Executors.newFixedThreadPool(poolSize);\n        priorityQueue = new PriorityBlockingQueue<Job>(queueSize, \n          Comparator.comparing(Job::getJobPriority));\n\n        priorityJobScheduler.execute(()->{\n            while (true) {\n                try {\n                    priorityJobPoolExecutor.execute(priorityQueue.take());\n                } catch (InterruptedException e) {\n                    // exception needs special handling\n                    break;\n                }\n            }\n        });\n    }\n\n    public void scheduleJob(Job job) {\n        priorityQueue.add(job);\n    }\n\n    public int getQueuedTaskCount() {\n        return priorityQueue.size();\n    }\n\n    protected void close(ExecutorService scheduler) {\n        scheduler.shutdown();\n        try {\n            if (!scheduler.awaitTermination(5, TimeUnit.SECONDS)) {\n                scheduler.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            scheduler.shutdownNow();\n        }\n    }\n\n    public void closeScheduler() {\n        close(priorityJobPoolExecutor);\n        close(priorityJobScheduler);\n    }\n}\n", "test_case": "package com.baeldung.concurrent.prioritytaskexecution;\n\nimport org.junit.Test;\n\npublic class PriorityJobSchedulerUnitTest {\n    private static final int POOL_SIZE = 1;\n    private static final int QUEUE_SIZE = 10;\n\n    @Test\n    public void whenMultiplePriorityJobsQueued_thenHighestPriorityJobIsPicked() {\n        Job job1 = new Job(\"Job1\", JobPriority.LOW);\n        Job job2 = new Job(\"Job2\", JobPriority.MEDIUM);\n        Job job3 = new Job(\"Job3\", JobPriority.HIGH);\n        Job job4 = new Job(\"Job4\", JobPriority.MEDIUM);\n        Job job5 = new Job(\"Job5\", JobPriority.LOW);\n        Job job6 = new Job(\"Job6\", JobPriority.HIGH);\n\n        PriorityJobScheduler pjs = new PriorityJobScheduler(POOL_SIZE, QUEUE_SIZE);\n\n        pjs.scheduleJob(job1);\n        pjs.scheduleJob(job2);\n        pjs.scheduleJob(job3);\n        pjs.scheduleJob(job4);\n        pjs.scheduleJob(job5);\n        pjs.scheduleJob(job6);\n\n        // ensure no tasks is pending before closing the scheduler\n        while (pjs.getQueuedTaskCount() != 0);\n\n        // delay to avoid job sleep (added for demo) being interrupted\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(e);\n        }\n\n        pjs.closeScheduler();\n    }\n}\n"}
{"code_source": "package com.baeldung.atomicstampedreference;\n\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicStampedReference;\n\npublic class StampedAccount {\n\n    private final AtomicInteger stamp = new AtomicInteger(0);\n    private final AtomicStampedReference<Integer> account = new AtomicStampedReference<>(0, 0);\n\n    public boolean deposit(int funds) {\n        int[] stamps = new int[1];\n        int current = this.account.get(stamps);\n        int newStamp = this.stamp.incrementAndGet();\n\n        // Thread is paused here to allow other threads to update the stamp and amount (for testing only)\n        sleep();\n\n        return this.account.compareAndSet(current, current + funds, stamps[0], newStamp);\n    }\n\n    public boolean withdrawal(int funds) {\n        int[] stamps = new int[1];\n        int current = this.account.get(stamps);\n        int newStamp = this.stamp.incrementAndGet();\n        return this.account.compareAndSet(current, current - funds, stamps[0], newStamp);\n    }\n\n    public int getBalance() {\n        return account.getReference();\n    }\n\n    public int getStamp() {\n        return account.getStamp();\n    }\n\n    private static void sleep() {\n        try {\n            TimeUnit.SECONDS.sleep(1);\n        } catch (InterruptedException ignored) {\n        }\n    }\n}\n", "test_case": "package com.baeldung.atomicstampedreference;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\npublic class ThreadStampedAccountUnitTest {\n\n    @Test\n    public void givenMultiThread_whenStampedAccount_thenSetBalance() throws InterruptedException {\n        StampedAccount account = new StampedAccount();\n\n        Thread t = new Thread(() -> {\n            while (!account.deposit(100)) {\n                Thread.yield();\n            }\n        });\n        t.start();\n\n        Thread t2 = new Thread(() -> {\n            while (!account.withdrawal(100)) {\n                Thread.yield();\n            }\n        });\n        t2.start();\n\n        t.join(10_000);\n        t2.join(10_000);\n\n        assertFalse(t.isAlive());\n        assertFalse(t2.isAlive());\n\n        assertEquals(0, account.getBalance());\n        assertTrue(account.getStamp() > 0);\n    }\n}\n"}
{"code_source": "package com.baeldung.workstealing;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.concurrent.ForkJoinTask;\nimport java.util.concurrent.RecursiveAction;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class PrimeNumbers extends RecursiveAction {\n\n    private int lowerBound;\n    private int upperBound;\n    private int granularity;\n    static final List<Integer> GRANULARITIES\n      = Arrays.asList(1, 10, 100, 1000, 10000);\n    private AtomicInteger noOfPrimeNumbers;\n\n    PrimeNumbers(int lowerBound, int upperBound, int granularity, AtomicInteger noOfPrimeNumbers) {\n        this.lowerBound = lowerBound;\n        this.upperBound = upperBound;\n        this.granularity = granularity;\n        this.noOfPrimeNumbers = noOfPrimeNumbers;\n    }\n\n    PrimeNumbers(int upperBound) {\n        this(1, upperBound, 100, new AtomicInteger(0));\n    }\n\n    private PrimeNumbers(int lowerBound, int upperBound, AtomicInteger noOfPrimeNumbers) {\n        this(lowerBound, upperBound, 100, noOfPrimeNumbers);\n    }\n\n    private List<PrimeNumbers> subTasks() {\n        List<PrimeNumbers> subTasks = new ArrayList<>();\n\n        for (int i = 1; i <= this.upperBound / granularity; i++) {\n            int upper = i * granularity;\n            int lower = (upper - granularity) + 1;\n            subTasks.add(new PrimeNumbers(lower, upper, noOfPrimeNumbers));\n        }\n        return subTasks;\n    }\n\n    @Override\n    protected void compute() {\n        if (((upperBound + 1) - lowerBound) > granularity) {\n            ForkJoinTask.invokeAll(subTasks());\n        } else {\n            findPrimeNumbers();\n        }\n    }\n\n    void findPrimeNumbers() {\n        for (int num = lowerBound; num <= upperBound; num++) {\n            if (isPrime(num)) {\n                noOfPrimeNumbers.getAndIncrement();\n            }\n        }\n    }\n\n    private boolean isPrime(int number) {\n        if (number == 2) {\n            return true;\n        }\n\n        if (number == 1 || number % 2 == 0) {\n            return false;\n        }\n\n        int noOfNaturalNumbers = 0;\n\n        for (int i = 1; i <= number; i++) {\n            if (number % i == 0) {\n                noOfNaturalNumbers++;\n            }\n        }\n\n        return noOfNaturalNumbers == 2;\n    }\n\n    public int noOfPrimeNumbers() {\n        return noOfPrimeNumbers.intValue();\n    }\n}", "test_case": "package com.baeldung.workstealing;\n\nimport org.junit.Test;\nimport org.openjdk.jmh.annotations.*;\nimport org.openjdk.jmh.runner.Runner;\nimport org.openjdk.jmh.runner.RunnerException;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\n\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.logging.Logger;\n\nimport static org.junit.Assert.fail;\n\n/**\n * This test expects the file target/test-classes/META-INF/BenchmarkList to be present.\n *\n * Before running the test ensure that the file is present. \n * If not, please run mvn install on the module.\n * \n */\n\npublic class PrimeNumbersManualTest {\n\n    private static Logger logger = Logger.getAnonymousLogger();\n\n    @Test\n    public void givenPrimesCalculated_whenUsingPoolsAndOneThread_thenOneThreadSlowest() {\n        Options opt = new OptionsBuilder()\n          .include(Benchmarker.class.getSimpleName())\n          .forks(1)\n          .build();\n\n        try {\n            new Runner(opt).run();\n        } catch (RunnerException e) {\n            fail();\n        }\n    }\n\n    @Test\n    public void givenNewWorkStealingPool_whenGettingPrimes_thenStealCountChanges() {\n        StringBuilder info = new StringBuilder();\n\n        for (int granularity : PrimeNumbers.GRANULARITIES) {\n            int parallelism = ForkJoinPool.getCommonPoolParallelism();\n            ForkJoinPool pool =\n              (ForkJoinPool) Executors.newWorkStealingPool(parallelism);\n\n            stealCountInfo(info, granularity, pool);\n        }\n        logger.info(\"\\nExecutors.newWorkStealingPool ->\" + info.toString());\n    }\n\n    @Test\n    public void givenCommonPool_whenGettingPrimes_thenStealCountChangesSlowly() {\n        StringBuilder info = new StringBuilder();\n\n        for (int granularity : PrimeNumbers.GRANULARITIES) {\n            ForkJoinPool pool = ForkJoinPool.commonPool();\n            stealCountInfo(info, granularity, pool);\n        }\n        logger.info(\"\\nForkJoinPool.commonPool ->\" + info.toString());\n    }\n\n    private void stealCountInfo(StringBuilder info, int granularity, ForkJoinPool forkJoinPool) {\n        PrimeNumbers primes = new PrimeNumbers(1, 10000, granularity, new AtomicInteger(0));\n        forkJoinPool.invoke(primes);\n        forkJoinPool.shutdown();\n\n        long steals = forkJoinPool.getStealCount();\n        String output = \"\\nGranularity: [\" + granularity + \"], Steals: [\" + steals + \"]\";\n        info.append(output);\n    }\n\n\n    @BenchmarkMode(Mode.AverageTime)\n    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n    @State(Scope.Benchmark)\n    @Fork(value = 2, warmups = 1, jvmArgs = {\"-Xms2G\", \"-Xmx2G\"})\n    public static class Benchmarker {\n\n        @Benchmark\n        public void singleThread() {\n            PrimeNumbers primes = new PrimeNumbers(10000);\n            primes.findPrimeNumbers(); // get prime numbers using a single thread\n        }\n\n        @Benchmark\n        public void commonPoolBenchmark() {\n            PrimeNumbers primes = new PrimeNumbers(10000);\n            ForkJoinPool pool = ForkJoinPool.commonPool();\n            pool.invoke(primes);\n            pool.shutdown();\n        }\n\n        @Benchmark\n        public void newWorkStealingPoolBenchmark() {\n            PrimeNumbers primes = new PrimeNumbers(10000);\n            int parallelism = ForkJoinPool.getCommonPoolParallelism();\n            ForkJoinPool stealer = (ForkJoinPool) Executors.newWorkStealingPool(parallelism);\n            stealer.invoke(primes);\n            stealer.shutdown();\n        }\n    }\n}\n"}
{"code_source": "package com.baeldung.atomicvsvolatile;\n\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class SafeAtomicCounter {\n\n    private final AtomicInteger counter = new AtomicInteger(0);\n    \n    public int getValue() {\n        return counter.get();\n    }\n    \n    public void increment() {\n        counter.incrementAndGet();\n    }\n}\n", "test_case": "package com.baeldung.atomicvsvolatile;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.IntStream;\nimport org.junit.Test;\n\npublic class SafeAtomicCounterUnitTest {\n\n    private static final int INCREMENT_COUNTER = 1000;\n    private static final int TIMEOUT = 100;\n    private static final int POOL_SIZE = 3;\n\n    @Test\n    public void givenMultiThread_whenSafeAtomicCounterIncrement() throws InterruptedException {\n        ExecutorService service = Executors.newFixedThreadPool(POOL_SIZE);\n        SafeAtomicCounter safeCounter = new SafeAtomicCounter();\n        IntStream.range(0, INCREMENT_COUNTER).forEach(count -> service.submit(safeCounter::increment));\n        service.awaitTermination(TIMEOUT, TimeUnit.MILLISECONDS);\n        assertEquals(INCREMENT_COUNTER, safeCounter.getValue());\n    }\n}"}
{"code_source": "package com.baeldung.lockbykey;\n\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class LockByKey {\n    \n    private static class LockWrapper {\n        private final Lock lock = new ReentrantLock();\n        private final AtomicInteger numberOfThreadsInQueue = new AtomicInteger(1);\n        \n        private LockWrapper addThreadInQueue() {\n            numberOfThreadsInQueue.incrementAndGet(); \n            return this;\n        }\n        \n        private int removeThreadFromQueue() {\n            return numberOfThreadsInQueue.decrementAndGet(); \n        }\n        \n    }\n    \n    private static ConcurrentHashMap<String, LockWrapper> locks = new ConcurrentHashMap<String, LockWrapper>();\n    \n    public void lock(String key) {\n        LockWrapper lockWrapper = locks.compute(key, (k, v) -> v == null ? new LockWrapper() : v.addThreadInQueue());\n        lockWrapper.lock.lock();\n    }\n    \n    public void unlock(String key) {\n        LockWrapper lockWrapper = locks.get(key);\n        lockWrapper.lock.unlock();\n        if (lockWrapper.removeThreadFromQueue() == 0) { \n            // NB : We pass in the specific value to remove to handle the case where another thread would queue right before the removal\n            locks.remove(key, lockWrapper);\n        }\n    }\n    \n}\n", "test_case": "package com.baeldung.lockbykey;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nimport org.junit.jupiter.api.Test;\n\npublic class LockByKeyUnitTest {\n    \n    @Test\n    void givenNoLockedKey_WhenLock_ThenSuccess() throws InterruptedException {\n        AtomicBoolean threadWasExecuted = new AtomicBoolean(false);\n        Thread thread = new Thread(() -> {\n            String key = \"key\";\n            LockByKey lockByKey = new LockByKey();\n            lockByKey.lock(key);\n            try {\n               threadWasExecuted.set(true);\n            } finally {\n                lockByKey.unlock(key);\n            }\n        });\n        try {\n            thread.start();\n            Thread.sleep(100);\n        } finally {\n            assertTrue(threadWasExecuted.get());\n        }\n    }\n    \n    @Test\n    void givenLockedKey_WhenLock_ThenFailure() throws InterruptedException {\n        String key = \"key\";\n        LockByKey lockByKey = new LockByKey();\n        lockByKey.lock(key);\n        AtomicBoolean anotherThreadWasExecuted = new AtomicBoolean(false);\n        Thread threadLockingOnAnotherKey = new Thread(() -> {\n            LockByKey otherLockByKey = new LockByKey();\n            otherLockByKey.lock(key);\n            try {\n                anotherThreadWasExecuted.set(true);\n            } finally {\n                otherLockByKey.unlock(key);\n            }\n        });\n        try {\n            threadLockingOnAnotherKey.start();\n            Thread.sleep(100);\n        } finally {\n            assertFalse(anotherThreadWasExecuted.get());\n            lockByKey.unlock(key);\n        }\n    }\n    \n    @Test\n    void givenAnotherKeyLocked_WhenLock_ThenSuccess() throws InterruptedException {\n        String key = \"key\";\n        LockByKey lockByKey = new LockByKey();\n        lockByKey.lock(key);\n        AtomicBoolean anotherThreadWasExecuted = new AtomicBoolean(false);\n        Thread threadLockingOnAnotherKey = new Thread(() -> {\n            String anotherKey = \"anotherKey\";\n            LockByKey otherLockByKey = new LockByKey();\n            otherLockByKey.lock(anotherKey);\n            try {\n                anotherThreadWasExecuted.set(true);\n            } finally {\n                otherLockByKey.unlock(anotherKey);\n            }\n        });\n        try {\n            threadLockingOnAnotherKey.start();\n            Thread.sleep(100);\n        } finally {\n            assertTrue(anotherThreadWasExecuted.get());\n            lockByKey.unlock(key);\n        }\n    }\n    \n    @Test\n    void givenUnlockedKey_WhenLock_ThenSuccess() throws InterruptedException {\n        String key = \"key\";\n        LockByKey lockByKey = new LockByKey();\n        lockByKey.lock(key);\n        AtomicBoolean anotherThreadWasExecuted = new AtomicBoolean(false);\n        Thread threadLockingOnAnotherKey = new Thread(() -> {\n            LockByKey otherLockByKey = new LockByKey();\n            otherLockByKey.lock(key);\n            try {\n                anotherThreadWasExecuted.set(true);\n            } finally {\n                otherLockByKey.unlock(key);\n            }\n        });\n        try {\n            lockByKey.unlock(key);\n            threadLockingOnAnotherKey.start();\n            Thread.sleep(100);\n        } finally {\n            assertTrue(anotherThreadWasExecuted.get());\n        }\n    }\n\n}\n"}
{"code_source": "package com.baeldung.lockbykey;\n\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class SimpleExclusiveLockByKey {\n\n    private static Set<String> usedKeys= ConcurrentHashMap.newKeySet();\n    \n    public boolean tryLock(String key) {\n        return usedKeys.add(key);\n    }\n    \n    public void unlock(String key) {\n        usedKeys.remove(key);\n    }\n\n}\n", "test_case": "package com.baeldung.lockbykey;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.lang.reflect.Field;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class SimpleExclusiveLockByKeyUnitTest {\n    \n    @BeforeEach\n    void cleanUpLocks() throws Exception {\n        Field field = SimpleExclusiveLockByKey.class.getDeclaredField(\"usedKeys\");\n        field.setAccessible(true);\n        field.set(null, ConcurrentHashMap.newKeySet());\n    }\n    \n    @Test\n    void givenNoLockedKey_WhenTryLock_ThenSuccess() {\n        SimpleExclusiveLockByKey lockByKey = new SimpleExclusiveLockByKey();\n        assertTrue(lockByKey.tryLock(\"key\"));\n    }\n    \n    @Test\n    void givenLockedKey_WhenTryLock_ThenFailure() {\n        String key = \"key\";\n        SimpleExclusiveLockByKey lockByKey = new SimpleExclusiveLockByKey();\n        lockByKey.tryLock(key);\n        assertFalse(lockByKey.tryLock(key));\n    }\n    \n    @Test\n    void givenAnotherKeyLocked_WhenTryLock_ThenSuccess() {\n        SimpleExclusiveLockByKey lockByKey = new SimpleExclusiveLockByKey();\n        lockByKey.tryLock(\"other\");\n        assertTrue(lockByKey.tryLock(\"key\"));\n    }\n    \n    @Test\n    void givenUnlockedKey_WhenTryLock_ThenSuccess() {\n        String key = \"key\";\n        SimpleExclusiveLockByKey lockByKey = new SimpleExclusiveLockByKey();\n        lockByKey.tryLock(key);\n        lockByKey.unlock(key);\n        assertTrue(lockByKey.tryLock(key));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.lockbykey;\n\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.Semaphore;\n\npublic class SimultaneousEntriesLockByKey {\n\n    private static final int ALLOWED_THREADS = 2;\n    \n    private static ConcurrentHashMap<String, Semaphore> semaphores = new ConcurrentHashMap<String, Semaphore>();\n    \n    public void lock(String key) {\n        Semaphore semaphore = semaphores.compute(key, (k, v) -> v == null ? new Semaphore(ALLOWED_THREADS) : v);\n        semaphore.acquireUninterruptibly();\n    }\n    \n    public void unlock(String key) {\n        Semaphore semaphore = semaphores.get(key);\n        semaphore.release();\n        if (semaphore.availablePermits() == ALLOWED_THREADS) { \n            semaphores.remove(key, semaphore);\n        }  \n    }\n    \n}\n", "test_case": "package com.baeldung.lockbykey;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nimport org.junit.jupiter.api.Test;\n\npublic class SimultaneousEntriesLockByKeyUnitTest {\n\n    @Test\n    void givenNoKeyUsed_WhenLock_ThenSuccess() throws InterruptedException {\n        AtomicBoolean threadWasExecuted = new AtomicBoolean(false);\n        Thread thread = new Thread(() -> {\n            String key = \"key\";\n            SimultaneousEntriesLockByKey lockByKey = new SimultaneousEntriesLockByKey();\n            lockByKey.lock(key);\n            try {\n               threadWasExecuted.set(true);\n            } finally {\n                lockByKey.unlock(key);\n            }\n        });\n        try {\n            thread.start();\n            Thread.sleep(100);\n        } finally {\n            assertTrue(threadWasExecuted.get());\n        }\n    }\n    \n    @Test\n    void givenKeyLockedWithRemainingPermits_WhenLock_ThenSuccess() throws InterruptedException {\n        String key = \"key\";\n        SimultaneousEntriesLockByKey lockByKey = new SimultaneousEntriesLockByKey();\n        lockByKey.lock(key);\n        AtomicBoolean anotherThreadWasExecuted = new AtomicBoolean(false);\n        Thread threadLockingOnAnotherKey = new Thread(() -> {\n            SimultaneousEntriesLockByKey otherLockByKeyWithSemaphore = new SimultaneousEntriesLockByKey();\n            otherLockByKeyWithSemaphore.lock(key);\n            try {\n                anotherThreadWasExecuted.set(true);\n            } finally {\n                otherLockByKeyWithSemaphore.unlock(key);\n            }\n        });\n        try {\n            threadLockingOnAnotherKey.start();\n            Thread.sleep(100);\n        } finally {\n            assertTrue(anotherThreadWasExecuted.get());\n            lockByKey.unlock(key);\n        }\n    }\n    \n    @Test\n    void givenKeyLockedWithNoRemainingPermits_WhenLock_ThenFailure() throws InterruptedException {\n        String key = \"key\";\n        SimultaneousEntriesLockByKey lockByKey = new SimultaneousEntriesLockByKey();\n        lockByKey.lock(key);\n        AtomicBoolean anotherThreadWasExecuted = new AtomicBoolean(false);\n        Thread threadLockingOnAnotherKey1 = new Thread(() -> {\n            SimultaneousEntriesLockByKey otherLockByKeyWithSemaphore = new SimultaneousEntriesLockByKey();\n            otherLockByKeyWithSemaphore.lock(key);\n            try {\n                Thread.sleep(200); // make sure this thread will release the lock after the assertion\n            } catch (InterruptedException e) {\n                \n            } finally {\n                otherLockByKeyWithSemaphore.unlock(key);\n            }\n        });\n        Thread threadLockingOnAnotherKey2 = new Thread(() -> {\n            SimultaneousEntriesLockByKey otherLockByKey = new SimultaneousEntriesLockByKey();\n            try {\n                Thread.sleep(50); // make sure thread1 will acquire the key first\n            } catch (InterruptedException e) {\n            }\n            otherLockByKey.lock(key);\n            try {\n                anotherThreadWasExecuted.set(true);\n            } finally {\n                otherLockByKey.unlock(key);\n            }\n        });\n        try {\n            threadLockingOnAnotherKey1.start();\n            threadLockingOnAnotherKey2.start();\n            Thread.sleep(100);\n        } finally {\n            assertFalse(anotherThreadWasExecuted.get());\n            lockByKey.unlock(key);\n        }\n    }\n    \n    @Test\n    void givenAnotherKeyLocked_WhenLock_ThenSuccess() throws InterruptedException {\n        String key = \"key\";\n        SimultaneousEntriesLockByKey lockByKey = new SimultaneousEntriesLockByKey();\n        lockByKey.lock(key);\n        AtomicBoolean anotherThreadWasExecuted = new AtomicBoolean(false);\n        Thread threadLockingOnAnotherKey = new Thread(() -> {\n            String anotherKey = \"anotherKey\";\n            SimultaneousEntriesLockByKey otherLockByKey = new SimultaneousEntriesLockByKey();\n            otherLockByKey.lock(anotherKey);\n            try {\n                anotherThreadWasExecuted.set(true);\n            } finally {\n                otherLockByKey.unlock(anotherKey);\n            }\n        });\n        try {\n            threadLockingOnAnotherKey.start();\n            Thread.sleep(100);\n        } finally {\n            assertTrue(anotherThreadWasExecuted.get());\n            lockByKey.unlock(key);\n        }\n    }\n    \n    @Test\n    void givenUnlockedKey_WhenLock_ThenSuccess() throws InterruptedException {\n        String key = \"key\";\n        SimultaneousEntriesLockByKey lockByKey = new SimultaneousEntriesLockByKey();\n        lockByKey.lock(key);\n        AtomicBoolean anotherThreadWasExecuted = new AtomicBoolean(false);\n        Thread threadLockingOnAnotherKey = new Thread(() -> {\n            SimultaneousEntriesLockByKey otherLockByKey = new SimultaneousEntriesLockByKey();\n            otherLockByKey.lock(key);\n            try {\n                anotherThreadWasExecuted.set(true);\n            } finally {\n                otherLockByKey.unlock(key);\n            }\n        });\n        try {\n            lockByKey.unlock(key);\n            threadLockingOnAnotherKey.start();\n            Thread.sleep(100);\n        } finally {\n            assertTrue(anotherThreadWasExecuted.get());\n        }\n    }\n    \n}\n"}
{"code_source": "package com.baeldung.volatilekeywordthreadsafety;\n\nimport org.slf4j.LoggerFactory;\nimport org.slf4j.Logger;\n\npublic class VolatileVarNotThreadSafe {\n\n    private static final Logger LOG = LoggerFactory.getLogger(VolatileVarNotThreadSafe.class);\n    private static volatile int count = 0;\n    private static final int MAX_LIMIT = 1000;\n    \n    public static void increment() {\n        count++;\n    }\n    \n    public static int getCount() {\n        return count;\n    }\n    \n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(new Runnable() {\n           @Override\n           public void run() {\n               for(int index=0; index<MAX_LIMIT; index++) {\n                   increment();\n               }\n           }\n        });\n        \n        Thread t2 = new Thread(new Runnable() {\n           @Override\n           public void run() {\n               for(int index=0; index<MAX_LIMIT; index++) {\n                   increment();\n               }\n           }\n        });\n        \n        t1.start();\n        t2.start();\n        \n        t1.join();\n        t2.join();\n        \n        LOG.info(\"value of counter variable: \"+count);\n    }\n}\n", "test_case": "package com.baeldung.volatilekeywordthreadsafety;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class VolatileVarNotThreadSafeUnitTest {\n\n    @Test\n    public void whenCalledMainMethod_thenIncrementCount() throws InterruptedException {\n        VolatileVarNotThreadSafe.main(null);\n        Assertions.assertTrue(VolatileVarNotThreadSafe.getCount() > 0);\n    }\n}\n"}
{"code_source": "package com.baeldung.concurrent.threadfactory;\n\npublic class Task implements Runnable {\n\n    @Override\n    public void run() {\n        // task details\n    }\n\n}\n", "test_case": "package com.baeldung.concurrent.callable;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\nimport static junit.framework.Assert.assertEquals;\n\npublic class FactorialTaskManualTest {\n\n    private ExecutorService executorService;\n\n    @Before\n    public void setup(){\n        executorService = Executors.newSingleThreadExecutor();\n    }\n\n    @Test\n    public void whenTaskSubmitted_ThenFutureResultObtained() throws ExecutionException, InterruptedException {\n        FactorialTask task = new FactorialTask(5);\n        Future<Integer> future= executorService.submit(task);\n        assertEquals(120,future.get().intValue());\n    }\n\n    @Test(expected = ExecutionException.class)\n    public void whenException_ThenCallableThrowsIt() throws ExecutionException, InterruptedException {\n        FactorialTask task = new FactorialTask(-5);\n        Future<Integer> future= executorService.submit(task);\n        Integer result=future.get().intValue();\n    }\n\n    @Test\n    public void whenException_ThenCallableDoesntThrowsItIfGetIsNotCalled(){\n        FactorialTask task = new FactorialTask(-5);\n        Future<Integer> future= executorService.submit(task);\n        assertEquals(false,future.isDone());\n    }\n\n    @After\n    public void cleanup(){\n        executorService.shutdown();\n    }\n}\n"}
{"code_source": "package com.baeldung.concurrent.threadsafety.mathutils;\n\nimport java.math.BigInteger;\n\npublic class MathUtils {\n    \n    public static BigInteger factorial(int number) {\n        BigInteger f = new BigInteger(\"1\");\n        for (int i = 2; i <= number; i++) {\n            f = f.multiply(BigInteger.valueOf(i));\n        }\n        return f;\n    }\n}\n", "test_case": "package com.baeldung.concurrent.threadsafety;\n\nimport com.baeldung.concurrent.threadsafety.mathutils.MathUtils;\nimport org.junit.Test;\n\nimport java.math.BigInteger;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class MathUtilsUnitTest {\n    \n    @Test\n    public void whenCalledFactorialMethod_thenCorrect() {\n        assertThat(MathUtils.factorial(2)).isEqualTo(new BigInteger(\"2\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.concurrent.threadsafety.services;\n\npublic class ObjectLockCounter {\n\n    private int counter;\n    private final Object lock = new Object();\n\n    public ObjectLockCounter() {\n        this.counter = 0;\n    }\n\n    public void incrementCounter() {\n        synchronized (lock) {\n            counter += 1;\n        }\n    }\n\n    public int getCounter() {\n        synchronized (lock) {\n            return counter;\n        }\n    }\n}\n", "test_case": "package com.baeldung.concurrent.threadsafety;\n\nimport com.baeldung.concurrent.threadsafety.callables.ExtrinsicLockCounterCallable;\nimport com.baeldung.concurrent.threadsafety.services.ObjectLockCounter;\nimport org.junit.Test;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class ObjectLockCounterUnitTest {\n\n    @Test\n    public void whenCalledIncrementCounter_thenCorrect() throws Exception {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        ObjectLockCounter counter = new ObjectLockCounter();\n        Future<Integer> future1 = (Future<Integer>) executorService.submit(new ExtrinsicLockCounterCallable(counter));\n        Future<Integer> future2 = (Future<Integer>) executorService.submit(new ExtrinsicLockCounterCallable(counter));\n\n        // Just to make sure both are completed\n        future1.get();\n        future2.get();\n\n        assertThat(counter.getCounter()).isEqualTo(2);\n    }\n}\n"}
{"code_source": "package com.baeldung.concurrent.threadsafety.services;\n\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class ReentrantLockCounter {\n\n    private int counter;\n    private final ReentrantLock reLock = new ReentrantLock(true);\n\n    public ReentrantLockCounter() {\n        this.counter = 0;\n    }\n\n    public void incrementCounter() {\n        reLock.lock();\n        try {\n            counter += 1;\n        } finally {\n            reLock.unlock();\n        }\n    }\n\n    public int getCounter() {\n        return counter;\n    }\n}\n", "test_case": "package com.baeldung.concurrent.threadsafety;\n\nimport com.baeldung.concurrent.threadsafety.callables.ReentrantLockCounterCallable;\nimport com.baeldung.concurrent.threadsafety.services.ReentrantLockCounter;\nimport org.junit.Test;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class ReentrantLockCounterUnitTest {\n\n    @Test\n    public void whenCalledIncrementCounter_thenCorrect() throws Exception {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        ReentrantLockCounter counter = new ReentrantLockCounter();\n        Future<Integer> future1 = (Future<Integer>) executorService.submit(new ReentrantLockCounterCallable(counter));\n        Future<Integer> future2 = (Future<Integer>) executorService.submit(new ReentrantLockCounterCallable(counter));\n\n        // Just to make sure both are completed\n        future1.get();\n        future2.get();\n\n        assertThat(counter.getCounter()).isEqualTo(2);\n    }\n}\n"}
{"code_source": "package com.baeldung.concurrent.threadsafety.services;\n\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\n\npublic class ReentrantReadWriteLockCounter {\n    \n    private int counter;\n    private final ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();\n    private final Lock readLock = rwLock.readLock();\n    private final Lock writeLock = rwLock.writeLock();\n    \n    public ReentrantReadWriteLockCounter() {\n        this.counter = 0;\n    }\n    \n    public void incrementCounter() {\n        writeLock.lock();\n        try {\n            counter += 1;\n        } finally {\n            writeLock.unlock();\n        }\n    }\n    \n    public int getCounter() {\n        readLock.lock();\n        try {\n            return counter;\n        } finally {\n            readLock.unlock();\n        }\n    }\n}\n", "test_case": "package com.baeldung.concurrent.threadsafety;\n\nimport com.baeldung.concurrent.threadsafety.callables.ReentranReadWriteLockCounterCallable;\nimport com.baeldung.concurrent.threadsafety.services.ReentrantReadWriteLockCounter;\nimport org.junit.Test;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class ReentrantReadWriteLockCounterUnitTest {\n\n    @Test\n    public void whenCalledIncrementCounter_thenCorrect() throws Exception {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        ReentrantReadWriteLockCounter counter = new ReentrantReadWriteLockCounter();\n        Future<Integer> future1 = (Future<Integer>) executorService.submit(new ReentranReadWriteLockCounterCallable(counter));\n        Future<Integer> future2 = (Future<Integer>) executorService.submit(new ReentranReadWriteLockCounterCallable(counter));\n\n        // Just to make sure both are completed\n        future1.get();\n        future2.get();\n\n        assertThat(counter.getCounter()).isEqualTo(2);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.concurrent.threadsafety.services;\n\npublic class MessageService {\n    \n    private final String message;\n    \n    public MessageService(String message) {\n        this.message = message;\n    }\n    \n    public String getMesssage() {\n        return message;\n    }\n}\n", "test_case": "package com.baeldung.concurrent.threadsafety;\n\nimport com.baeldung.concurrent.threadsafety.callables.MessageServiceCallable;\nimport com.baeldung.concurrent.threadsafety.services.MessageService;\nimport org.junit.Test;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class MessageServiceUnitTest {\n\n    @Test\n    public void whenCalledgetMessage_thenCorrect() throws Exception {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        MessageService messageService = new MessageService(\"Welcome to Baeldung!\");\n        Future<String> future1 = (Future<String>) executorService.submit(new MessageServiceCallable(messageService));\n        Future<String> future2 = (Future<String>) executorService.submit(new MessageServiceCallable(messageService));\n\n        assertThat(future1.get()).isEqualTo(\"Welcome to Baeldung!\");\n        assertThat(future2.get()).isEqualTo(\"Welcome to Baeldung!\");\n    }\n}\n"}
{"code_source": "package com.baeldung.concurrent.stopexecution;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class FixedTimeTask implements Runnable {\n\n    private static final Logger LOG = LoggerFactory.getLogger(FixedTimeTask.class);\n\n    final int fixedTime; // milliseconds\n\n    public FixedTimeTask(int fixedTime) {\n        this.fixedTime = fixedTime;\n    }\n\n    @Override\n    public void run() {\n        LOG.info(fixedTime + \" milliseconds running task\");\n        try {\n            TimeUnit.MILLISECONDS.sleep(fixedTime);\n        } catch (InterruptedException e) {\n            LOG.info(\"interrupted\");\n        }\n        LOG.info(\"finished\");\n    }\n}\n", "test_case": "package com.baeldung.concurrent.stopexecution;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class FixedTimeTaskUnitTest {\n\n    @Test\n    public void run() throws InterruptedException {\n        long start = System.currentTimeMillis();\n        Thread thread = new Thread(new FixedTimeTask(10));\n        thread.start();\n        thread.join();\n        long end = System.currentTimeMillis();\n        assertTrue(end - start >= 10);\n    }\n}"}
{"code_source": "package com.baeldung.concurrent.stopexecution;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class LongRunningTask implements Runnable {\n\n    private static final Logger LOG = LoggerFactory.getLogger(LongRunningTask.class);\n\n    @Override\n    public void run() {\n        LOG.info(\"running\");\n        for (int i = 0; i < Long.MAX_VALUE; i++) {\n            if (Thread.interrupted()) {\n                LOG.info(\"stopping\");\n                return;\n            }\n        }\n        LOG.info(\"finished\");\n    }\n}\n", "test_case": "package com.baeldung.concurrent.stopexecution;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\npublic class LongRunningTaskUnitTest {\n\n    @Test\n    public void run() {\n        Thread thread = new Thread(new LongRunningTask());\n        thread.start();\n        assertTrue(thread.isAlive());\n\n        thread.interrupt();\n        assertTrue(thread.isInterrupted());\n    }\n}"}
{"code_source": "package com.baeldung.concurrent.stopexecution;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\n\npublic class SteppedTask implements Runnable {\n    private static final Logger LOG = LoggerFactory.getLogger(SteppedTask.class);\n\n    private List<Step> steps;\n\n    public SteppedTask(List<Step> steps) {\n        this.steps = steps;\n    }\n\n    @Override\n    public void run() {\n        LOG.info(\"running stepped process\");\n        for (Step step : steps) {\n            LOG.info(\"running step \" + step.number);\n            try {\n                step.perform();\n            } catch (InterruptedException e) {\n                LOG.info(\"interrupting task\");\n                return;\n            }\n        }\n        LOG.info(\"stepped process finished\");\n    }\n}\n", "test_case": "package com.baeldung.concurrent.stopexecution;\n\nimport org.junit.Test;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport static org.junit.Assert.*;\n\npublic class SteppedTaskUnitTest {\n\n    @Test\n    public void run() throws InterruptedException {\n        List<Step> steps = Stream.of(\n            new Step(1),\n            new Step(2),\n            new Step(3))\n          .collect(Collectors.toList());\n\n        Thread thread = new Thread(new SteppedTask(steps));\n        thread.start();\n        thread.interrupt();\n        thread.join();\n    }\n}"}
{"code_source": "package com.baeldung.concurrent.stopexecution;\n\nimport java.util.Timer;\nimport java.util.TimerTask;\n\npublic class TimeOutTask extends TimerTask {\n    private Thread thread;\n    private Timer timer;\n\n    public TimeOutTask(Thread thread, Timer timer) {\n        this.thread = thread;\n        this.timer = timer;\n    }\n\n    @Override\n    public void run() {\n        if (thread != null && thread.isAlive()) {\n            thread.interrupt();\n            timer.cancel();\n        }\n    }\n}\n", "test_case": "package com.baeldung.concurrent.stopexecution;\n\nimport org.junit.Test;\n\nimport java.util.Timer;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class TimeOutTaskUnitTest {\n\n    @Test\n    public void run() {\n        Thread thread = new Thread(new LongRunningTask());\n        Timer timer = new Timer();\n        TimeOutTask timeOutTask = new TimeOutTask(thread, timer);\n        thread.start();\n        timeOutTask.run();\n        assertTrue(thread.isInterrupted());\n    }\n}"}
{"code_source": "package com.baeldung.concurrent.interrupt;\n\npublic class InterruptExample extends Thread {\n    \n    public static void propagateException() throws InterruptedException {\n        Thread.sleep(1000);\n        Thread.currentThread().interrupt();\n        if (Thread.interrupted()) {\n            throw new InterruptedException();\n        }\n    }\n\n    public static Boolean restoreTheState() {\n        InterruptExample thread1 = new InterruptExample();\n        thread1.start();\n        thread1.interrupt();\n        return thread1.isInterrupted();\n    }\n\n    public void run() {\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n    \n    public static void throwCustomException() throws Exception {\n\n        Thread.sleep(1000);\n        Thread.currentThread().interrupt();\n        if (Thread.interrupted()) {\n            throw new CustomInterruptedException(\"This thread was interrupted\");\n        }\n    }\n    \n    public static Boolean handleWithCustomException() throws CustomInterruptedException{\n        try {\n            Thread.sleep(1000);\n            Thread.currentThread().interrupt();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new CustomInterruptedException(\"This thread was interrupted...\");\n        }\n        return Thread.currentThread().isInterrupted();\n    }\n}", "test_case": "package com.baeldung.concurrent.interrupt;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\npublic class InterruptExampleUnitTest {\n\n    @Test\n    public void whenPropagateException_thenThrowsInterruptedException() {\n        assertThrows(InterruptedException.class, InterruptExample::propagateException);\n    }\n\n    @Test\n    public void whenRestoreTheState_thenReturnsTrue() {\n        assertTrue(InterruptExample.restoreTheState());\n    }\n\n    @Test\n    public void whenThrowCustomException_thenContainsExpectedMessage() {\n        Exception exception = assertThrows(CustomInterruptedException.class, InterruptExample::throwCustomException);\n        String expectedMessage = \"This thread was interrupted\";\n        String actualMessage = exception.getMessage();\n\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n\n    @Test\n    public void whenHandleWithCustomException_thenReturnsTrue() throws CustomInterruptedException{\n        assertTrue(InterruptExample.handleWithCustomException());\n    }\n}\n"}
{"code_source": "package com.baeldung.concurrent.synchronize;\n\npublic class SynchronizedBlocks {\n\n    private int count = 0;\n    private static int staticCount = 0;\n\n    void performSynchronisedTask() {\n        synchronized (this) {\n            setCount(getCount() + 1);\n        }\n    }\n\n    static void performStaticSyncTask() {\n        synchronized (SynchronizedBlocks.class) {\n            setStaticCount(getStaticCount() + 1);\n        }\n    }\n\n    public int getCount() {\n        return count;\n    }\n\n    public void setCount(int count) {\n        this.count = count;\n    }\n\n    static int getStaticCount() {\n        return staticCount;\n    }\n\n    private static void setStaticCount(int staticCount) {\n        SynchronizedBlocks.staticCount = staticCount;\n    }\n}\n", "test_case": "package com.baeldung.concurrent.synchronize;\n\nimport org.junit.Test;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.IntStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class SynchronizedBlocksUnitTest {\n\n    @Test\n    public void givenMultiThread_whenBlockSync() throws InterruptedException {\n        ExecutorService service = Executors.newFixedThreadPool(3);\n        SynchronizedBlocks synchronizedBlocks = new SynchronizedBlocks();\n\n        IntStream.range(0, 1000)\n            .forEach(count -> service.submit(synchronizedBlocks::performSynchronisedTask));\n        service.awaitTermination(500, TimeUnit.MILLISECONDS);\n\n        assertEquals(1000, synchronizedBlocks.getCount());\n    }\n\n    @Test\n    public void givenMultiThread_whenStaticSyncBlock() throws InterruptedException {\n        ExecutorService service = Executors.newCachedThreadPool();\n\n        IntStream.range(0, 1000)\n            .forEach(count -> service.submit(SynchronizedBlocks::performStaticSyncTask));\n        service.awaitTermination(500, TimeUnit.MILLISECONDS);\n\n        assertEquals(1000, SynchronizedBlocks.getStaticCount());\n    }\n\n    @Test\n    public void givenHoldingTheLock_whenReentrant_thenCanAcquireItAgain() {\n        Object lock = new Object();\n        synchronized (lock) {\n            System.out.println(\"First time acquiring it\");\n\n            synchronized (lock) {\n                System.out.println(\"Entering again\");\n\n                synchronized (lock) {\n                    System.out.println(\"And again\");\n                }\n            }\n        }\n    }\n\n}\n"}
{"code_source": "package com.baeldung.concurrent.synchronize;\n\npublic class SynchronizedMethods {\n\n    private int sum = 0;\n    private int syncSum = 0;\n\n    static int staticSum = 0;\n\n    void calculate() {\n        setSum(getSum() + 1);\n    }\n\n    synchronized void synchronisedCalculate() {\n        setSyncSum(getSyncSum() + 1);\n    }\n\n    static synchronized void syncStaticCalculate() {\n        staticSum = staticSum + 1;\n    }\n\n    public int getSum() {\n        return sum;\n    }\n\n    public void setSum(int sum) {\n        this.sum = sum;\n    }\n\n    int getSyncSum() {\n        return syncSum;\n    }\n\n    private void setSyncSum(int syncSum) {\n        this.syncSum = syncSum;\n    }\n}\n", "test_case": "package com.baeldung.concurrent.synchronize;\n\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.IntStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class SynchronizedMethodsUnitTest {\n\n    @Test\n    @Ignore\n    public void givenMultiThread_whenNonSyncMethod() throws InterruptedException {\n        ExecutorService service = Executors.newFixedThreadPool(3);\n        SynchronizedMethods method = new SynchronizedMethods();\n\n        IntStream.range(0, 1000)\n            .forEach(count -> service.submit(method::calculate));\n        service.awaitTermination(100, TimeUnit.MILLISECONDS);\n\n        assertEquals(1000, method.getSum());\n    }\n\n    @Test\n    public void givenMultiThread_whenMethodSync() throws InterruptedException {\n        ExecutorService service = Executors.newFixedThreadPool(3);\n        SynchronizedMethods method = new SynchronizedMethods();\n\n        IntStream.range(0, 1000)\n            .forEach(count -> service.submit(method::synchronisedCalculate));\n        service.awaitTermination(100, TimeUnit.MILLISECONDS);\n\n        assertEquals(1000, method.getSyncSum());\n    }\n\n    @Test\n    public void givenMultiThread_whenStaticSyncMethod() throws InterruptedException {\n        ExecutorService service = Executors.newCachedThreadPool();\n\n        IntStream.range(0, 1000)\n            .forEach(count -> service.submit(SynchronizedMethods::syncStaticCalculate));\n        service.awaitTermination(100, TimeUnit.MILLISECONDS);\n\n        assertEquals(1000, SynchronizedMethods.staticSum);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.concurrent.volatilekeyword;\n\n\npublic class SharedObject {\n    private volatile int count=0;\n\n    void incrementCount(){\n        count++;\n    }\n    public int  getCount(){\n        return count;\n    }\n}\n", "test_case": "package com.baeldung.concurrent.volatilekeyword;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class SharedObjectManualTest {\n\n    @Test\n    public void whenOneThreadWrites_thenVolatileReadsFromMainMemory() throws InterruptedException {\n        SharedObject sharedObject = new SharedObject();\n\n        Thread writer = new Thread(() -> sharedObject.incrementCount());\n        writer.start();\n        Thread.sleep(100);\n\n        Thread readerOne = new Thread(() -> {\n            int valueReadByThread2 = sharedObject.getCount();\n            assertEquals(1, valueReadByThread2);\n        });\n        readerOne.start();\n\n        Thread readerTwo = new Thread(() -> {\n            int valueReadByThread3 = sharedObject.getCount();\n            assertEquals(1, valueReadByThread3);\n        });\n        readerTwo.start();\n\n    }\n\n    @Test\n    public void whenTwoThreadWrites_thenVolatileReadsFromMainMemory() throws InterruptedException {\n        SharedObject sharedObject = new SharedObject();\n        Thread writerOne = new Thread(() -> sharedObject.incrementCount());\n        writerOne.start();\n        Thread.sleep(100);\n\n        Thread writerTwo = new Thread(() -> sharedObject.incrementCount());\n        writerTwo.start();\n        Thread.sleep(100);\n\n        Thread readerOne = new Thread(() -> {\n            int valueReadByThread2 = sharedObject.getCount();\n            assertEquals(2, valueReadByThread2);\n        });\n        readerOne.start();\n\n        Thread readerTwo = new Thread(() -> {\n            int valueReadByThread3 = sharedObject.getCount();\n            assertEquals(2, valueReadByThread3);\n        });\n        readerTwo.start();\n\n    }\n}\n"}
{"code_source": "package com.baeldung.asciiart;\n\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.RenderingHints;\nimport java.awt.image.BufferedImage;\n\npublic class AsciiArt {\n\n    public AsciiArt() {\n    }\n\n    public void drawString(String text, String artChar, Settings settings) {\n        BufferedImage image = getImageIntegerMode(settings.width, settings.height);\n\n        Graphics2D graphics2D = getGraphics2D(image.getGraphics(), settings);\n        graphics2D.drawString(text, 6, ((int) (settings.height * 0.67)));\n\n        for (int y = 0; y < settings.height; y++) {\n            StringBuilder stringBuilder = new StringBuilder();\n\n            for (int x = 0; x < settings.width; x++) {\n                stringBuilder.append(image.getRGB(x, y) == -16777216 ? \" \" : artChar);\n            }\n\n            if (stringBuilder.toString()\n                .trim()\n                .isEmpty()) {\n                continue;\n            }\n\n            System.out.println(stringBuilder);\n        }\n\n    }\n\n    private BufferedImage getImageIntegerMode(int width, int height) {\n        return new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n    }\n\n    private Graphics2D getGraphics2D(Graphics graphics, Settings settings) {\n        graphics.setFont(settings.font);\n\n        Graphics2D graphics2D = (Graphics2D) graphics;\n        graphics2D.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n\n        return graphics2D;\n    }\n\n    public class Settings {\n        public Font font;\n        public int width;\n        public int height;\n\n        public Settings(Font font, int width, int height) {\n            this.font = font;\n            this.width = width;\n            this.height = height;\n        }\n    }\n}\n", "test_case": "package com.baeldung.asciiart;\n\nimport com.baeldung.asciiart.AsciiArt.Settings;\nimport org.junit.Test;\n\nimport java.awt.*;\n\npublic class AsciiArtIntegrationTest {\n\n    @Test\n    public void givenTextWithAsciiCharacterAndSettings_shouldPrintAsciiArt() {\n        AsciiArt asciiArt = new AsciiArt();\n        String text = \"BAELDUNG\";\n        Settings settings = asciiArt.new Settings(new Font(\"SansSerif\", Font.BOLD, 24), text.length() * 30, 30); // 30 pixel width per character\n        \n        asciiArt.drawString(text, \"*\", settings);\n    }\n}\n"}
{"code_source": "package com.baeldung.consoleout;\n\nimport java.io.Console;\n\npublic class ConsoleAndOut {\n    public static void main(String[] args) {\n        try {\n            printConsoleObject();\n            readPasswordFromConsole();\n        } catch (Exception ex) {\n            // Eating NullPointerExcpetion which will occur when this \n            // program will be run from mediums other than console\n        }\n        printSysOut();    \n    }\n\n    static void printConsoleObject() {\n        Console console = System.console();\n        console.writer().print(console);\n    }\n\n    static void readPasswordFromConsole() {\n        Console console = System.console();\n        char[] password = console.readPassword(\"Enter password: \");\n        console.printf(String.valueOf(password));\n    }\n    \n    static void printSysOut() {\n        System.out.println(System.out);\n    }\n}\n", "test_case": "package com.baeldung.consoleout;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport org.junit.jupiter.api.Test;\n\nclass ConsoleAndOutUnitTest {\n\n    @Test\n    void whenRetreivingConsole_thenPrintConsoleObject() {\n        assertThrows(NullPointerException.class, () -> {\n            ConsoleAndOut.printConsoleObject();  \n        });\n    }\n    \n    @Test\n    void whenReadingPassword_thenReadPassword() {\n        assertThrows(NullPointerException.class, () -> {\n            ConsoleAndOut.readPasswordFromConsole();  \n        });\n    }\n    \n    @Test\n    void whenRetrievingSysOut_thenPrintSysOutObject() {\n        ConsoleAndOut.printSysOut();\n    }\n}\n"}
{"code_source": "package com.baeldung.date;\n\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.time.Period;\nimport java.util.Date;\nimport org.joda.time.Years;\n\npublic class AgeCalculator {\n\n    public int calculateAge(LocalDate birthDate, LocalDate currentDate) {\n        // validate inputs ...\n        return Period.between(birthDate, currentDate)\n            .getYears();\n    }\n\n    public int calculateAgeWithJodaTime(org.joda.time.LocalDate birthDate, org.joda.time.LocalDate currentDate) {\n        // validate inputs ...\n        Years age = Years.yearsBetween(birthDate, currentDate);\n        return age.getYears();\n    }\n\n    public int calculateAgeWithJava7(Date birthDate, Date currentDate) {\n        // validate inputs ...\n        DateFormat formatter = new SimpleDateFormat(\"yyyyMMdd\");\n        int d1 = Integer.parseInt(formatter.format(birthDate));\n        int d2 = Integer.parseInt(formatter.format(currentDate));\n        int age = (d2 - d1) / 10000;\n        return age;\n    }\n}", "test_case": "package com.baeldung.date;\n\nimport static org.junit.Assert.assertEquals;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\n\npublic class AgeCalculatorUnitTest {\n    AgeCalculator ageCalculator = new AgeCalculator();\n\n    @Test\n    public void givenLocalDate_whenCalculateAge_thenOk() {\n        assertEquals(10, ageCalculator.calculateAge(LocalDate.of(2008, 5, 20), LocalDate.of(2018, 9, 20)));\n    }\n\n    @Test\n    public void givenJodaTime_whenCalculateAge_thenOk() {\n        assertEquals(10, ageCalculator.calculateAgeWithJodaTime(new org.joda.time.LocalDate(2008, 5, 20), new org.joda.time.LocalDate(2018, 9, 20)));\n    }\n\n    @Test\n    public void givenDate_whenCalculateAge_thenOk() throws ParseException {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-mm-dd\");\n        Date birthDate = sdf.parse(\"2008-05-20\");\n        Date currentDate = sdf.parse(\"2018-09-20\");\n        assertEquals(10, ageCalculator.calculateAgeWithJava7(birthDate, currentDate));\n    }\n\n}"}
{"code_source": "package com.baeldung.date;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class DateWithoutTime {\n\n    public static Date getDateWithoutTimeUsingCalendar() {\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(Calendar.HOUR_OF_DAY, 0);\n        calendar.set(Calendar.MINUTE, 0);\n        calendar.set(Calendar.SECOND, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n\n        return calendar.getTime();\n    }\n\n    public static Date getDateWithoutTimeUsingFormat() throws ParseException {\n        SimpleDateFormat formatter = new SimpleDateFormat(\"dd/MM/yyyy\");\n        return formatter.parse(formatter.format(new Date()));\n    }\n\n    public static LocalDate getLocalDate() {\n        return LocalDate.now();\n    }\n\n}\n", "test_case": "package com.baeldung.date;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.text.ParseException;\nimport java.time.LocalDate;\nimport java.time.OffsetDateTime;\nimport java.util.Calendar;\nimport java.util.Date;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotEquals;\n\npublic class DateWithoutTimeUnitTest {\n\n    private static final long MILLISECONDS_PER_DAY = 24 * 60 * 60 * 1000;\n\n    @Test\n    public void whenGettingDateWithoutTimeUsingCalendar_thenReturnDateWithoutTime() {\n        Date dateWithoutTime = DateWithoutTime.getDateWithoutTimeUsingCalendar();\n\n        // first check the time is set to 0\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(dateWithoutTime);\n\n        assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));\n        assertEquals(0, calendar.get(Calendar.MINUTE));\n        assertEquals(0, calendar.get(Calendar.SECOND));\n        assertEquals(0, calendar.get(Calendar.MILLISECOND));\n\n        // we get the day of the date\n        int day = calendar.get(Calendar.DAY_OF_MONTH);\n\n        // if we add the mills of one day minus 1 we should get the same day\n        calendar.setTimeInMillis(dateWithoutTime.getTime() + MILLISECONDS_PER_DAY - 1);\n        assertEquals(day, calendar.get(Calendar.DAY_OF_MONTH));\n\n        // if we add one full day in millis we should get a different day\n        calendar.setTimeInMillis(dateWithoutTime.getTime() + MILLISECONDS_PER_DAY);\n        assertNotEquals(day, calendar.get(Calendar.DAY_OF_MONTH));\n    }\n\n    @Test\n    public void whenGettingDateWithoutTimeUsingFormat_thenReturnDateWithoutTime() throws ParseException {\n        Date dateWithoutTime = DateWithoutTime.getDateWithoutTimeUsingFormat();\n\n        // first check the time is set to 0\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(dateWithoutTime);\n\n        assertEquals(0, calendar.get(Calendar.HOUR_OF_DAY));\n        assertEquals(0, calendar.get(Calendar.MINUTE));\n        assertEquals(0, calendar.get(Calendar.SECOND));\n        assertEquals(0, calendar.get(Calendar.MILLISECOND));\n\n        // we get the day of the date\n        int day = calendar.get(Calendar.DAY_OF_MONTH);\n\n        // if we add the mills of one day minus 1 we should get the same day\n        calendar.setTimeInMillis(dateWithoutTime.getTime() + MILLISECONDS_PER_DAY - 1);\n        assertEquals(day, calendar.get(Calendar.DAY_OF_MONTH));\n\n        // if we add one full day in millis we should get a different day\n        calendar.setTimeInMillis(dateWithoutTime.getTime() + MILLISECONDS_PER_DAY);\n        assertNotEquals(day, calendar.get(Calendar.DAY_OF_MONTH));\n    }\n\n    @Test\n    public void whenGettingLocalDate_thenReturnDateWithoutTime() {\n        // get the local date\n        LocalDate localDate = DateWithoutTime.getLocalDate();\n\n        // get the millis of our LocalDate\n        long millisLocalDate = localDate\n          .atStartOfDay()\n          .toInstant(OffsetDateTime\n            .now()\n            .getOffset())\n          .toEpochMilli();\n\n        Calendar calendar = Calendar.getInstance();\n        // if we add the millis of one day minus 1 we should get the same day\n        calendar.setTimeInMillis(millisLocalDate + MILLISECONDS_PER_DAY - 1);\n        assertEquals(localDate.getDayOfMonth(), calendar.get(Calendar.DAY_OF_MONTH));\n\n        // if we add one full day in millis we should get a different day\n        calendar.setTimeInMillis(millisLocalDate + MILLISECONDS_PER_DAY);\n        assertNotEquals(localDate.getDayOfMonth(), calendar.get(Calendar.DAY_OF_MONTH));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.datetime;\n\nimport java.time.Duration;\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.ZonedDateTime;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Calendar;\nimport java.util.Date;\n\nimport org.apache.commons.lang3.time.DateUtils;\n\npublic class AddHoursToDate {\n\n    public Date addHoursToJavaUtilDate(Date date, int hours) {\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);\n        calendar.add(Calendar.HOUR_OF_DAY, hours);\n        return calendar.getTime();\n    }\n\n    public Date addHoursToDateUsingInstant(Date date, int hours) {\n        return Date.from(date.toInstant()\n            .plus(Duration.ofHours(hours)));\n    }\n\n    public LocalDateTime addHoursToLocalDateTime(LocalDateTime localDateTime, int hours) {\n        return localDateTime.plusHours(hours);\n    }\n\n    public LocalDateTime subtractHoursToLocalDateTime(LocalDateTime localDateTime, int hours) {\n        return localDateTime.minusHours(hours);\n    }\n\n    public ZonedDateTime addHoursToZonedDateTime(ZonedDateTime zonedDateTime, int hours) {\n        return zonedDateTime.plusHours(hours);\n    }\n\n    public ZonedDateTime subtractHoursToZonedDateTime(ZonedDateTime zonedDateTime, int hours) {\n        return zonedDateTime.minusHours(hours);\n    }\n\n    public Instant addHoursToInstant(Instant instant, int hours) {\n        return instant.plus(hours, ChronoUnit.HOURS);\n    }\n\n    public Instant subtractHoursToInstant(Instant instant, int hours) {\n        return instant.minus(hours, ChronoUnit.HOURS);\n    }\n\n    public Date addHoursWithApacheCommons(Date date, int hours) {\n        return DateUtils.addHours(date, hours);\n    }\n}\n", "test_case": "package com.baeldung.datetime;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.Month;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\n\nimport org.junit.Test;\n\npublic class AddHoursToDateUnitTest {\n\n    private final AddHoursToDate addHoursToDateObj = new AddHoursToDate();\n\n    @Test\n    public void givenJavaUtilDate_whenPositiveHours_thenAddHours() {\n        Date actualDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 5, 0).getTime();\n        Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 7, 0).getTime();\n\n        assertThat(addHoursToDateObj.addHoursToJavaUtilDate(actualDate, 2)).isEqualTo(expectedDate);\n    }\n\n    @Test\n    public void givenJavaUtilDate_whenNegativeHours_thenMinusHours() {\n        Date actualDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 5, 0).getTime();\n        Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 3, 0).getTime();\n\n        assertThat(addHoursToDateObj.addHoursToJavaUtilDate(actualDate, -2)).isEqualTo(expectedDate);\n    }\n\n    @Test\n    public void givenJavaUtilDate_whenUsingToInstantAndPostiveHours_thenAddHours() {\n        Date actualDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 5, 0).getTime();\n        Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 7, 0).getTime();\n\n        assertThat(addHoursToDateObj.addHoursToDateUsingInstant(actualDate, 2)).isEqualTo(expectedDate);\n    }\n\n    @Test\n    public void givenJavaUtilDate_whenUsingToInstantAndNegativeHours_thenAddHours() {\n        Date actualDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 5, 0).getTime();\n        Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 3, 0).getTime();\n\n        assertThat(addHoursToDateObj.addHoursToDateUsingInstant(actualDate, -2)).isEqualTo(expectedDate);\n    }\n\n    @Test\n    public void givenLocalDateTime_whenUsingAddHoursToLocalDateTime_thenAddHours() {\n        LocalDateTime actualDateTime = LocalDateTime.of(2018, Month.JUNE, 25, 5, 0);\n        LocalDateTime expectedDateTime = LocalDateTime.of(2018, Month.JUNE, 25, 7, 0);\n\n        assertThat(addHoursToDateObj.addHoursToLocalDateTime(actualDateTime, 2)).isEqualTo(expectedDateTime);\n    }\n\n    @Test\n    public void givenLocalDateTime_whenUsingMinusHoursToLocalDateTime_thenMinusHours() {\n        LocalDateTime actualDateTime = LocalDateTime.of(2018, Month.JUNE, 25, 5, 0);\n        LocalDateTime expectedDateTime = LocalDateTime.of(2018, Month.JUNE, 25, 3, 0);\n\n        assertThat(addHoursToDateObj.subtractHoursToLocalDateTime(actualDateTime, 2)).isEqualTo(expectedDateTime);\n    }\n\n    @Test\n    public void givenZonedDateTime_whenUsingAddHoursToZonedDateTime_thenAddHours() {\n        ZonedDateTime actualZonedDateTime = ZonedDateTime.of(LocalDateTime.of(2018, Month.JUNE, 25, 5, 0), ZoneId.systemDefault());\n        ZonedDateTime expectedZonedDateTime = ZonedDateTime.of(LocalDateTime.of(2018, Month.JUNE, 25, 7, 0), ZoneId.systemDefault());\n\n        assertThat(addHoursToDateObj.addHoursToZonedDateTime(actualZonedDateTime, 2)).isEqualTo(expectedZonedDateTime);\n    }\n\n    @Test\n    public void givenZonedDateTime_whenUsingMinusHoursToZonedDateTime_thenMinusHours() {\n        ZonedDateTime actualZonedDateTime = ZonedDateTime.of(LocalDateTime.of(2018, Month.JUNE, 25, 5, 0), ZoneId.systemDefault());\n        ZonedDateTime expectedZonedDateTime = ZonedDateTime.of(LocalDateTime.of(2018, Month.JUNE, 25, 3, 0), ZoneId.systemDefault());\n\n        assertThat(addHoursToDateObj.subtractHoursToZonedDateTime(actualZonedDateTime, 2)).isEqualTo(expectedZonedDateTime);\n    }\n\n    @Test\n    public void givenJavaUtilDate_whenUsingPositiveHrsAndAddHoursWithApacheCommons_thenAddHours() {\n        Date actualDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 5, 0).getTime();\n        Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 7, 0).getTime();\n\n        assertThat(addHoursToDateObj.addHoursWithApacheCommons(actualDate, 2)).isEqualTo(expectedDate);\n    }\n\n    @Test\n    public void givenJavaUtilDate_whenUsingNegativeHrsAndAddHoursWithApacheCommons_thenMinusHours() {\n        Date actualDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 7, 0).getTime();\n        Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 5, 0).getTime();\n\n        assertThat(addHoursToDateObj.addHoursWithApacheCommons(actualDate, -2)).isEqualTo(expectedDate);\n    }\n\n    @Test\n    public void givenInstant_whenUsingAddHoursToInstant_thenAddHours() {\n        Instant actualValue = Instant.parse(\"2018-06-25T05:12:35Z\");\n        Instant expectedValue = Instant.parse(\"2018-06-25T07:12:35Z\");\n\n        assertThat(addHoursToDateObj.addHoursToInstant(actualValue, 2)).isEqualTo(expectedValue);\n    }\n\n    @Test\n    public void givenInstant_whenUsingSubtractHoursToInstant_thenMinusHours() {\n        Instant actualValue = Instant.parse(\"2018-06-25T07:12:35Z\");\n        Instant expectedValue = Instant.parse(\"2018-06-25T05:12:35Z\");\n\n        assertThat(addHoursToDateObj.subtractHoursToInstant(actualValue, 2)).isEqualTo(expectedValue);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.datetime;\n\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class DateExtractYearMonthDayIntegerValues {\n\n    int getYear(Date date) {\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);\n\n        return calendar.get(Calendar.YEAR);\n    }\n\n    int getMonth(Date date) {\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);\n\n        return calendar.get(Calendar.MONTH);\n    }\n\n    int getDay(Date date) {\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);\n\n        return calendar.get(Calendar.DAY_OF_MONTH);\n    }\n}\n", "test_case": "package com.baeldung.datetime;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class DateExtractYearMonthDayIntegerValuesUnitTest {\n\n    DateExtractYearMonthDayIntegerValues extractYearMonthDateIntegerValues = new DateExtractYearMonthDayIntegerValues();\n    \n    Date date;\n    \n    @Before\n    public void setup() throws ParseException\n    {\n        date=new SimpleDateFormat(\"dd-MM-yyyy\").parse(\"01-03-2018\");\n    }\n    \n    @Test\n    public void whenGetYear_thenCorrectYear()\n    {\n       int actualYear=extractYearMonthDateIntegerValues.getYear(date);\n       assertThat(actualYear,is(2018));\n    }\n    \n    @Test\n    public void whenGetMonth_thenCorrectMonth()\n    {\n       int actualMonth=extractYearMonthDateIntegerValues.getMonth(date);\n       assertThat(actualMonth,is(02));\n    }\n    \n    @Test\n    public void whenGetDay_thenCorrectDay()\n    {\n       int actualDayOfMonth=extractYearMonthDateIntegerValues.getDay(date);\n       assertThat(actualDayOfMonth,is(01));\n    }\n}\n"}
{"code_source": "package com.baeldung.datetime;\n\nimport java.time.LocalDate;\n\npublic class LocalDateExtractYearMonthDayIntegerValues {\n\n    int getYear(LocalDate localDate) {\n        return localDate.getYear();\n    }\n\n    int getMonth(LocalDate localDate) {\n        return localDate.getMonthValue();\n    }\n\n    int getDay(LocalDate localDate) {\n        return localDate.getDayOfMonth();\n    }\n}\n", "test_case": "package com.baeldung.datetime;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\n\nimport java.time.LocalDate;\n\nimport org.junit.Test;\n\npublic class LocalDateExtractYearMonthDayIntegerValuesUnitTest {\n\n    LocalDateExtractYearMonthDayIntegerValues localDateExtractYearMonthDayIntegerValues=new LocalDateExtractYearMonthDayIntegerValues();\n    \n    LocalDate localDate=LocalDate.parse(\"2007-12-03\");\n    \n    @Test\n    public void whenGetYear_thenCorrectYear()\n    {\n       int actualYear=localDateExtractYearMonthDayIntegerValues.getYear(localDate);\n       assertThat(actualYear,is(2007));\n    }\n    \n    @Test\n    public void whenGetMonth_thenCorrectMonth()\n    {\n       int actualMonth=localDateExtractYearMonthDayIntegerValues.getMonth(localDate);\n       assertThat(actualMonth,is(12));\n    }\n    \n    @Test\n    public void whenGetDay_thenCorrectDay()\n    {\n       int actualDayOfMonth=localDateExtractYearMonthDayIntegerValues.getDay(localDate);\n       assertThat(actualDayOfMonth,is(03));\n    }\n}\n"}
{"code_source": "package com.baeldung.datetime;\n\nimport java.time.LocalDateTime;\n\npublic class LocalDateTimeExtractYearMonthDayIntegerValues {\n\n    int getYear(LocalDateTime localDateTime) {\n        return localDateTime.getYear();\n    }\n\n    int getMonth(LocalDateTime localDateTime) {\n        return localDateTime.getMonthValue();\n    }\n\n    int getDay(LocalDateTime localDateTime) {\n        return localDateTime.getDayOfMonth();\n    }\n}\n", "test_case": "package com.baeldung.datetime;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\n\nimport java.time.LocalDateTime;\n\nimport org.junit.Test;\n\npublic class LocalDateTimeExtractYearMonthDayIntegerValuesUnitTest {\n\n    LocalDateTimeExtractYearMonthDayIntegerValues localDateTimeExtractYearMonthDayIntegerValues = new LocalDateTimeExtractYearMonthDayIntegerValues();\n    \n    LocalDateTime localDateTime=LocalDateTime.parse(\"2007-12-03T10:15:30\");\n    \n    @Test\n    public void whenGetYear_thenCorrectYear()\n    {\n       int actualYear=localDateTimeExtractYearMonthDayIntegerValues.getYear(localDateTime);\n       assertThat(actualYear,is(2007));\n    }\n    \n    @Test\n    public void whenGetMonth_thenCorrectMonth()\n    {\n       int actualMonth=localDateTimeExtractYearMonthDayIntegerValues.getMonth(localDateTime);\n       assertThat(actualMonth,is(12));\n    }\n    \n    @Test\n    public void whenGetDay_thenCorrectDay()\n    {\n       int actualDayOfMonth=localDateTimeExtractYearMonthDayIntegerValues.getDay(localDateTime);\n       assertThat(actualDayOfMonth,is(03));\n    }\n}\n"}
{"code_source": "package com.baeldung.datetime;\n\nimport java.time.OffsetDateTime;\n\npublic class OffsetDateTimeExtractYearMonthDayIntegerValues {\n\n    int getYear(OffsetDateTime offsetDateTime) {\n        return offsetDateTime.getYear();\n    }\n\n    int getMonth(OffsetDateTime offsetDateTime) {\n        return offsetDateTime.getMonthValue();\n    }\n\n    int getDay(OffsetDateTime offsetDateTime) {\n        return offsetDateTime.getDayOfMonth();\n    }\n}\n", "test_case": "package com.baeldung.datetime;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\n\nimport java.time.OffsetDateTime;\n\nimport org.junit.Test;\n\npublic class OffsetDateTimeExtractYearMonthDayIntegerValuesUnitTest {\n\n    OffsetDateTimeExtractYearMonthDayIntegerValues offsetDateTimeExtractYearMonthDayIntegerValues = new OffsetDateTimeExtractYearMonthDayIntegerValues();\n    \n    OffsetDateTime offsetDateTime=OffsetDateTime.parse(\"2007-12-03T10:15:30+01:00\");\n    \n    @Test\n    public void whenGetYear_thenCorrectYear()\n    {\n       int actualYear=offsetDateTimeExtractYearMonthDayIntegerValues.getYear(offsetDateTime);\n       assertThat(actualYear,is(2007));\n    }\n    \n    @Test\n    public void whenGetMonth_thenCorrectMonth()\n    {\n       int actualMonth=offsetDateTimeExtractYearMonthDayIntegerValues.getMonth(offsetDateTime);\n       assertThat(actualMonth,is(12));\n    }\n    \n    @Test\n    public void whenGetDay_thenCorrectDay()\n    {\n       int actualDayOfMonth=offsetDateTimeExtractYearMonthDayIntegerValues.getDay(offsetDateTime);\n       assertThat(actualDayOfMonth,is(03));\n    }\n}\n"}
{"code_source": "package com.baeldung.datetime;\n\nimport java.time.ZonedDateTime;\n\npublic class ZonedDateTimeExtractYearMonthDayIntegerValues {\n\n    int getYear(ZonedDateTime zonedDateTime) {\n        return zonedDateTime.getYear();\n    }\n\n    int getMonth(ZonedDateTime zonedDateTime) {\n        return zonedDateTime.getMonthValue();\n    }\n\n    int getDay(ZonedDateTime zonedDateTime) {\n        return zonedDateTime.getDayOfMonth();\n    }\n}\n", "test_case": "package com.baeldung.datetime;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\n\nimport java.time.ZonedDateTime;\n\nimport org.junit.Test;\n\npublic class ZonedDateTimeExtractYearMonthDayIntegerValuesUnitTest {\n\n    ZonedDateTimeExtractYearMonthDayIntegerValues zonedDateTimeExtractYearMonthDayIntegerValues = new ZonedDateTimeExtractYearMonthDayIntegerValues();\n    \n    ZonedDateTime zonedDateTime=ZonedDateTime.parse(\"2007-12-03T10:15:30+01:00\");\n    \n    @Test\n    public void whenGetYear_thenCorrectYear()\n    {\n       int actualYear=zonedDateTimeExtractYearMonthDayIntegerValues.getYear(zonedDateTime);\n       assertThat(actualYear,is(2007));\n    }\n    \n    @Test\n    public void whenGetMonth_thenCorrectMonth()\n    {\n       int actualMonth=zonedDateTimeExtractYearMonthDayIntegerValues.getMonth(zonedDateTime);\n       assertThat(actualMonth,is(12));\n    }\n    \n    @Test\n    public void whenGetDay_thenCorrectDay()\n    {\n       int actualDayOfMonth=zonedDateTimeExtractYearMonthDayIntegerValues.getDay(zonedDateTime);\n       assertThat(actualDayOfMonth,is(03));\n    }\n}\n"}
{"code_source": "package com.baeldung.datetime.modify;\n\nimport org.apache.commons.lang3.time.DateUtils;\nimport org.joda.time.DateTime;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.logging.Logger;\n\npublic class DateIncrementer {\n    private static final Logger log = Logger.getLogger(DateIncrementer.class.getName());\n    private static final int INCREMENT_BY_IN_DAYS = 1;\n\n    public static String addOneDay(String date) {\n        return LocalDate\n          .parse(date)\n          .plusDays(INCREMENT_BY_IN_DAYS)\n          .toString();\n    }\n\n    public static String addOneDayJodaTime(String date) {\n        DateTime dateTime = new DateTime(date);\n        return dateTime\n          .plusDays(INCREMENT_BY_IN_DAYS)\n          .toString(\"yyyy-MM-dd\");\n    }\n\n    public static String addOneDayCalendar(String date) throws ParseException {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n        Calendar c = Calendar.getInstance();\n        c.setTime(sdf.parse(date));\n        c.add(Calendar.DATE, 1);\n        return sdf.format(c.getTime());\n    }\n\n    public static String addOneDayApacheCommons(String date) throws ParseException {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n        Date incrementedDate = DateUtils.addDays(sdf.parse(date), 1);\n        return sdf.format(incrementedDate);\n    }\n\n    public static void main(String[] args) throws ParseException {\n        String date = LocalDate\n          .now()\n          .toString();\n        log.info(\"Current date = \" + date);\n\n        String incrementedDateJava8 = DateIncrementer.addOneDay(date);\n        log.info(\"Date incremented by one day using (Java 8): \" + incrementedDateJava8);\n\n        String incrementedDateJodaTime = DateIncrementer.addOneDayJodaTime(date);\n        log.info(\"Date incremented by one day using (Joda-Time): \" + incrementedDateJodaTime);\n\n        String incrementedDateCalendar = addOneDayCalendar(date);\n        log.info(\"Date incremented by one day using (java.util.Calendar): \" + incrementedDateCalendar);\n\n        String incrementedDateApacheCommons = addOneDayApacheCommons(date);\n        log.info(\"Date incremented by one day using (Apache Commons DateUtils): \" + incrementedDateApacheCommons);\n    }\n}\n", "test_case": "package com.baeldung.datetime.modify;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class DateIncrementerUnitTest {\n    private final static String DATE_TO_INCREMENT = \"2018-07-03\";\n    private final static String EXPECTED_DATE = \"2018-07-04\";\n\n    @Test\n    public void givenDate_whenUsingJava8_thenAddOneDay() throws Exception {\n        String incrementedDate = DateIncrementer.addOneDay(DATE_TO_INCREMENT);\n        assertEquals(EXPECTED_DATE, incrementedDate);\n    }\n\n    @Test\n    public void givenDate_whenUsingJodaTime_thenAddOneDay() throws Exception {\n        String incrementedDate = DateIncrementer.addOneDayJodaTime(DATE_TO_INCREMENT);\n        assertEquals(EXPECTED_DATE, incrementedDate);\n    }\n\n    @Test\n    public void givenDate_whenUsingCalendar_thenAddOneDay() throws Exception {\n        String incrementedDate = DateIncrementer.addOneDayCalendar(DATE_TO_INCREMENT);\n        assertEquals(EXPECTED_DATE, incrementedDate);\n    }\n\n    @Test\n    public void givenDate_whenUsingApacheCommons_thenAddOneDay() throws Exception {\n        String incrementedDate = DateIncrementer.addOneDayApacheCommons(DATE_TO_INCREMENT);\n        assertEquals(EXPECTED_DATE, incrementedDate);\n    }\n}\n"}
{"code_source": "package com.baeldung.java9.time;\n\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoUnit;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class TimeApi {\n\n    public static List<Date> getDatesBetweenUsingJava7(Date startDate, Date endDate) {\n        List<Date> datesInRange = new ArrayList<>();\n        Calendar calendar = getCalendarWithoutTime(startDate);\n        Calendar endCalendar = getCalendarWithoutTime(endDate);\n\n        while (calendar.before(endCalendar)) {\n            Date result = calendar.getTime();\n            datesInRange.add(result);\n            calendar.add(Calendar.DATE, 1);\n        }\n        return datesInRange;\n    }\n\n    public static List<LocalDate> getDatesBetweenUsingJava8(LocalDate startDate, LocalDate endDate) {\n        long numOfDaysBetween = ChronoUnit.DAYS.between(startDate, endDate);\n        return IntStream.iterate(0, i -> i + 1)\n                 .limit(numOfDaysBetween)\n                 .mapToObj(i -> startDate.plusDays(i))\n                 .collect(Collectors.toList());\n    }\n\n    public static List<LocalDate> getDatesBetweenUsingJava9(LocalDate startDate, LocalDate endDate) {\n        return startDate.datesUntil(endDate).collect(Collectors.toList());\n    }\n\n    private static Calendar getCalendarWithoutTime(Date date) {\n        Calendar calendar = new GregorianCalendar();\n        calendar.setTime(date);\n        calendar.set(Calendar.HOUR, 0);\n        calendar.set(Calendar.HOUR_OF_DAY, 0);\n        calendar.set(Calendar.MINUTE, 0);\n        calendar.set(Calendar.SECOND, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        return calendar;\n    }\n\n}\n", "test_case": "package com.baeldung.java9.time;\n\nimport org.junit.Test;\n\nimport java.time.LocalDate;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.List;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class TimeApiUnitTest {\n\n    @Test\n    public void givenGetDatesBetweenWithUsingJava7_WhenStartEndDate_thenDatesList() {\n        Date startDate = Calendar.getInstance().getTime();\n        Calendar endCalendar = Calendar.getInstance();\n        endCalendar.add(Calendar.DATE, 2);\n        Date endDate = endCalendar.getTime();\n\n        List<Date> dates = TimeApi.getDatesBetweenUsingJava7(startDate, endDate);\n\n        assertThat(dates).hasSize(2);\n\n        Calendar calendar = Calendar.getInstance();\n        Date expectedDate1 = calendar.getTime();\n        assertThat(dates.get(0)).isInSameDayAs(expectedDate1);\n        assertThatTimeFieldsAreZero(dates.get(0));\n\n        calendar.add(Calendar.DATE, 1);\n        Date expectedDate2 = calendar.getTime();\n        assertThat(dates.get(1)).isInSameDayAs(expectedDate2);\n        assertThatTimeFieldsAreZero(dates.get(1));\n    }\n\n    @Test\n    public void givenGetDatesBetweenWithUsingJava8_WhenStartEndDate_thenDatesList() {\n        LocalDate startDate = LocalDate.now();\n        LocalDate endDate = LocalDate.now().plusDays(2);\n\n        List<LocalDate> dates = TimeApi.getDatesBetweenUsingJava8(startDate, endDate);\n\n        assertThat(dates).containsExactly(LocalDate.now(), LocalDate.now().plusDays(1));\n    }\n\n    @Test\n    public void givenGetDatesBetweenWithUsingJava9_WhenStartEndDate_thenDatesList() {\n        LocalDate startDate = LocalDate.now();\n        LocalDate endDate = LocalDate.now().plusDays(2);\n\n        List<LocalDate> dates = TimeApi.getDatesBetweenUsingJava9(startDate, endDate);\n\n        assertThat(dates).containsExactly(LocalDate.now(), LocalDate.now().plusDays(1));\n    }\n\n    private static void assertThatTimeFieldsAreZero(Date date) {\n        assertThat(date).hasHourOfDay(0);\n        assertThat(date).hasMinute(0);\n        assertThat(date).hasSecond(0);\n        assertThat(date).hasMillisecond(0);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.date.comparison;\n\nimport java.text.SimpleDateFormat;\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.TimeZone;\n\nimport org.apache.commons.lang3.time.DateUtils;\n\nimport hirondelle.date4j.DateTime;\n\npublic class DateComparisonUtils {\n\n    public static boolean isSameDayUsingLocalDate(Date date1, Date date2) {\n        LocalDate localDate1 = date1.toInstant()\n            .atZone(ZoneId.systemDefault())\n            .toLocalDate();\n        LocalDate localDate2 = date2.toInstant()\n            .atZone(ZoneId.systemDefault())\n            .toLocalDate();\n        return localDate1.isEqual(localDate2);\n    }\n\n    public static boolean isSameDayUsingInstant(Date date1, Date date2) {\n        Instant instant1 = date1.toInstant()\n            .truncatedTo(ChronoUnit.DAYS);\n        Instant instant2 = date2.toInstant()\n            .truncatedTo(ChronoUnit.DAYS);\n        return instant1.equals(instant2);\n    }\n\n    public static boolean isSameDayUsingSimpleDateFormat(Date date1, Date date2) {\n        SimpleDateFormat fmt = new SimpleDateFormat(\"yyyyMMdd\");\n        return fmt.format(date1)\n            .equals(fmt.format(date2));\n    }\n\n    public static boolean isSameDayUsingCalendar(Date date1, Date date2) {\n        Calendar calendar1 = Calendar.getInstance();\n        calendar1.setTime(date1);\n        Calendar calendar2 = Calendar.getInstance();\n        calendar2.setTime(date2);\n        return calendar1.get(Calendar.YEAR) == calendar2.get(Calendar.YEAR) && calendar1.get(Calendar.MONTH) == calendar2.get(Calendar.MONTH) && calendar1.get(Calendar.DAY_OF_MONTH) == calendar2.get(Calendar.DAY_OF_MONTH);\n    }\n\n    public static boolean isSameDayUsingApacheCommons(Date date1, Date date2) {\n        return DateUtils.isSameDay(date1, date2);\n    }\n\n    public static boolean isSameDayUsingJoda(Date date1, Date date2) {\n        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(date1);\n        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(date2);\n        return localDate1.equals(localDate2);\n    }\n\n    public static boolean isSameDayUsingDate4j(Date date1, Date date2) {\n        DateTime dateObject1 = DateTime.forInstant(date1.getTime(), TimeZone.getDefault());\n        DateTime dateObject2 = DateTime.forInstant(date2.getTime(), TimeZone.getDefault());\n        return dateObject1.isSameDayAs(dateObject2);\n    }\n}\n", "test_case": "package com.baeldung.date.comparison;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.util.Date;\n\nimport org.junit.Test;\n\npublic class DateComparisonUtilsUnitTest {\n\n    private Date day1Morning = toDate(LocalDateTime.of(2019, 10, 19, 6, 30, 40));\n    private Date day1Evening = toDate(LocalDateTime.of(2019, 10, 19, 18, 30, 50));\n    private Date day2Morning = toDate(LocalDateTime.of(2019, 10, 20, 6, 30, 50));\n\n    private Date toDate(LocalDateTime localDateTime) {\n        return Date.from(localDateTime.atZone(ZoneId.systemDefault())\n            .toInstant());\n    }\n\n    @Test\n    public void givenDatesWithDifferentTime_whenIsSameDay_thenReturnsTrue() {\n        assertTrue(DateComparisonUtils.isSameDayUsingLocalDate(day1Morning, day1Evening));\n        assertTrue(DateComparisonUtils.isSameDayUsingInstant(day1Morning, day1Evening));\n        assertTrue(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Morning, day1Evening));\n        assertTrue(DateComparisonUtils.isSameDayUsingCalendar(day1Morning, day1Evening));\n        assertTrue(DateComparisonUtils.isSameDayUsingApacheCommons(day1Morning, day1Evening));\n        assertTrue(DateComparisonUtils.isSameDayUsingJoda(day1Morning, day1Evening));\n        assertTrue(DateComparisonUtils.isSameDayUsingDate4j(day1Morning, day1Evening));\n    }\n\n    @Test\n    public void givenDates_whenIsDifferentDay_thenReturnsFalse() {\n        assertFalse(DateComparisonUtils.isSameDayUsingLocalDate(day1Morning, day2Morning));\n        assertFalse(DateComparisonUtils.isSameDayUsingLocalDate(day1Evening, day2Morning));\n\n        assertFalse(DateComparisonUtils.isSameDayUsingInstant(day1Morning, day2Morning));\n        assertFalse(DateComparisonUtils.isSameDayUsingInstant(day1Evening, day2Morning));\n\n        assertFalse(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Morning, day2Morning));\n        assertFalse(DateComparisonUtils.isSameDayUsingSimpleDateFormat(day1Evening, day2Morning));\n\n        assertFalse(DateComparisonUtils.isSameDayUsingCalendar(day1Morning, day2Morning));\n        assertFalse(DateComparisonUtils.isSameDayUsingCalendar(day1Evening, day2Morning));\n\n        assertFalse(DateComparisonUtils.isSameDayUsingApacheCommons(day1Morning, day2Morning));\n        assertFalse(DateComparisonUtils.isSameDayUsingApacheCommons(day1Evening, day2Morning));\n\n        assertFalse(DateComparisonUtils.isSameDayUsingJoda(day1Morning, day2Morning));\n        assertFalse(DateComparisonUtils.isSameDayUsingJoda(day1Evening, day2Morning));\n\n        assertFalse(DateComparisonUtils.isSameDayUsingDate4j(day1Morning, day2Morning));\n        assertFalse(DateComparisonUtils.isSameDayUsingDate4j(day1Evening, day2Morning));\n    }\n}\n"}
{"code_source": "package com.baeldung.datetime;\n\nimport java.text.ParseException;\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class CalendarUtils {\n\n    public static Calendar getPlusDays(Date date, int amount) throws ParseException {\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);\n        calendar.add(Calendar.DAY_OF_YEAR, amount);\n        return calendar;\n    }\n}", "test_case": "package com.baeldung.datetime;\n\nimport org.junit.Test;\n\nimport java.text.ParseException;\nimport java.util.Date;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class CalendarUtilsUnitTest {\n\n    @Test\n    public void givenDateAndDaysToAdd_thenCalendarIsCorrectlyReturned() throws ParseException {\n        Date initialDate = DateUtils.getDate(\"2020/01/01\", \"yyyy/MM/dd\");\n        Date expectedDate= DateUtils.getDate(\"2020/01/11\", \"yyyy/MM/dd\");\n        assertEquals(expectedDate, CalendarUtils.getPlusDays(initialDate, 10).getTime());\n    }\n}"}
{"code_source": "package com.baeldung.datetime.dayofweek;\n\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.time.DayOfWeek;\nimport java.time.LocalDate;\nimport java.time.format.TextStyle;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Locale;\n\npublic class DayOfWeekExtractor {\n\n    public static int getDayNumberOld(Date date) {\n        Calendar cal = Calendar.getInstance();\n        cal.setTime(date);\n        return cal.get(Calendar.DAY_OF_WEEK);\n    }\n    \n    public static String getDayStringOld(Date date, Locale locale ) {\n        DateFormat formatter = new SimpleDateFormat(\"EEEE\", locale);\n        return formatter.format(date);\n    }\n\n    public static int getDayNumberNew(LocalDate date) {\n        DayOfWeek day = date.getDayOfWeek();\n        return day.getValue();\n    }\n\n    public static String getDayStringNew(LocalDate date, Locale locale ) {\n        DayOfWeek day = date.getDayOfWeek();\n        return day.getDisplayName(TextStyle.FULL, locale);\n    }\n    \n}\n", "test_case": "package com.baeldung.datetime.dayofweek;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.util.Calendar;\nimport java.util.Locale;\n\nimport org.junit.Test;\n\npublic class DayOfWeekExtractorUnitTest {\n    \n    private DateFormat oldDateParser = new SimpleDateFormat(\"yyyy-MM-dd\"); \n\n    @Test\n    public void givenFeb29_2020_thenOldSaturdayNumber() throws ParseException {\n        assertThat(DayOfWeekExtractor.getDayNumberOld(oldDateParser.parse(\"2020-02-29\")) == Calendar.SATURDAY);\n    }\n\n    @Test\n    public void givenFeb29_2020_and_localeUS_thenOldSaturdayText() throws ParseException {\n        assertThat(\"Saturday\".equals(DayOfWeekExtractor.getDayStringOld(oldDateParser.parse(\"2020-02-29\"), Locale.US)) );\n    }\n\n    @Test\n    public void givenFeb29_2020_and_localeDE_thenOldSaturdayText() throws ParseException {\n        assertThat(\"Samstag\".equals(DayOfWeekExtractor.getDayStringOld(oldDateParser.parse(\"2020-02-29\"), Locale.GERMANY)) );\n    }\n\n    @Test\n    public void givenFeb29_2020_thenNewSaturdayNumber() throws ParseException {\n        assertThat(DayOfWeekExtractor.getDayNumberNew(LocalDate.parse(\"2020-02-29\")) == Calendar.SATURDAY);\n    }\n\n    @Test\n    public void givenFeb29_2020_and_localeUS_thenNewSaturdayText() throws ParseException {\n        assertThat(\"Saturday\".equals(DayOfWeekExtractor.getDayStringOld(oldDateParser.parse(\"2020-02-29\"), Locale.US)) );\n    }\n\n    @Test\n    public void givenFeb29_2020_and_localeDE_thenNewSaturdayText() throws ParseException {\n        assertThat(\"Samstag\".equals(DayOfWeekExtractor.getDayStringOld(oldDateParser.parse(\"2020-02-29\"), Locale.GERMANY)) );\n    }\n\n\n}\n\n\n\n"}
{"code_source": "package com.baeldung.datetime.sql;\n\nimport java.sql.Timestamp;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class TimestampUtils {\n\n    public static Timestamp getNow() {\n        return new Timestamp(System.currentTimeMillis());\n    }\n\n    public static Timestamp getTimestamp(String timestampAsString) {\n        return Timestamp.valueOf(timestampAsString);\n    }\n\n    public static Timestamp getTimestamp(String dateAsString, String pattern) throws ParseException {\n        java.util.Date customUtilDate = new SimpleDateFormat(pattern).parse(dateAsString);\n        return new Timestamp(customUtilDate.getTime());\n    }\n}", "test_case": "package com.baeldung.datetime.sql;\n\nimport org.junit.Test;\n\nimport java.text.ParseException;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class TimestampUtilsUnitTest {\n\n    @Test(expected = IllegalArgumentException.class)\n    public void givenTimestampAsString_whenPatternIsNotRespected_thenExceptionIsThrown() {\n        TimestampUtils.getTimestamp(\"2020/01/01 10:11-12\");\n    }\n\n    @Test\n    public void givenTimestampAndPattern_thenTimestampIsCorrectlyReturned() throws ParseException {\n        assertEquals(TimestampUtils.getTimestamp(\"2020-01-01 10:11:12\"), TimestampUtils.getTimestamp(\"2020/01/01 10:11-12\", \"yyyy/MM/dd hh:mm-ss\"));\n    }\n}"}
{"code_source": "package com.baeldung.datetime.sql;\n\nimport java.sql.Time;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class TimeUtils {\n\n    public static Time getNow() {\n        return new Time(System.currentTimeMillis());\n    }\n\n    public static Time getTime(String timeAsString) {\n        return Time.valueOf(timeAsString);\n    }\n\n    public static Time getTime(String dateAsString, String pattern) throws ParseException {\n        java.util.Date customUtilDate = new SimpleDateFormat(pattern).parse(dateAsString);\n        return new Time(customUtilDate.getTime());\n    }\n}", "test_case": "package com.baeldung.datetime.sql;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\nimport com.baeldung.datetime.sql.TimeUtils;\n\nimport java.text.ParseException;\n\npublic class TimeUtilsUnitTest {\n\n    @Test(expected = IllegalArgumentException.class)\n    public void givenTimeAsString_whenPatternIsNotRespected_thenExceptionIsThrown() {\n        TimeUtils.getTime(\"10 11 12\");\n    }\n\n    @Test\n    public void givenTimeAndPattern_thenTimeIsCorrectlyReturned() throws ParseException {\n        assertEquals(TimeUtils.getTime(\"10:11:12\"), TimeUtils.getTime(\"10 11 12\", \"hh mm ss\"));\n    }\n}"}
{"code_source": "package com.baeldung.offsetdatetime;\n\nimport java.time.OffsetDateTime;\nimport java.time.ZoneOffset;\nimport java.util.Date;\n\npublic class ConvertToOffsetDateTime {\n\n    public static OffsetDateTime convert(Date date) {\n        return date.toInstant()\n            .atOffset(ZoneOffset.UTC);\n    }\n\n    public static OffsetDateTime convert(Date date, int hour, int minute) {\n        return date.toInstant()\n            .atOffset(ZoneOffset.ofHoursMinutes(hour, minute));\n    }\n\n}\n", "test_case": "package com.baeldung.offsetdatetime;\n\nimport org.junit.Test;\n\nimport java.time.OffsetDateTime;\nimport java.util.Date;\nimport java.util.TimeZone;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\npublic class ConvertToOffsetDateTimeUnitTest {\n\n    @Test\n    public void whenDateIsNotNull_thenConvertToOffsetDateTime() {\n        Date date = new Date();\n        assertTrue(ConvertToOffsetDateTime.convert(date) instanceof OffsetDateTime);\n    }\n\n    @Test\n    public void givenDate_whenHasOffset_thenConvertWithOffset() {\n        TimeZone prevTimezone = TimeZone.getDefault();\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n\n        Date date = new Date();\n        date.setHours(6);\n        date.setMinutes(30);\n\n        OffsetDateTime odt = ConvertToOffsetDateTime.convert(date, 3, 30);\n        assertEquals(10, odt.getHour());\n        assertEquals(0, odt.getMinute());\n\n        // Reset the timezone to its original value to prevent side effects\n        TimeZone.setDefault(prevTimezone);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.skipweekends;\n\nimport java.time.DayOfWeek;\nimport java.time.LocalDate;\n\npublic class AddSubtractDaysSkippingWeekendsUtils {\n\n    public static LocalDate addDaysSkippingWeekends(LocalDate date, int days) {\n        LocalDate result = date;\n        int addedDays = 0;\n        while (addedDays < days) {\n            result = result.plusDays(1);\n            if (!(result.getDayOfWeek() == DayOfWeek.SATURDAY || result.getDayOfWeek() == DayOfWeek.SUNDAY)) {\n                ++addedDays;\n            }\n        }\n        return result;\n    }\n\n    public static LocalDate subtractDaysSkippingWeekends(LocalDate date, int days) {\n        LocalDate result = date;\n        int subtractedDays = 0;\n        while (subtractedDays < days) {\n            result = result.minusDays(1);\n            if (!(result.getDayOfWeek() == DayOfWeek.SATURDAY || result.getDayOfWeek() == DayOfWeek.SUNDAY)) {\n                ++subtractedDays;\n            }\n        }\n        return result;\n    }\n}\n", "test_case": "package com.baeldung.skipweekends;\n\nimport static org.junit.Assert.assertEquals;\n\nimport com.baeldung.skipweekends.AddSubtractDaysSkippingWeekendsUtils;\nimport org.junit.Test;\n\nimport java.time.LocalDate;\n\npublic class AddSubtractDaysSkippingWeekendsUtilsUnitTest {\n\n    @Test\n    public void givenLocalDateAndDaysToAdd_thenAddDaysSkippingWeekends() {\n        LocalDate initialDate = LocalDate.of(2019, 11, 7);\n        LocalDate expectedDate = LocalDate.of(2019, 11, 13);\n        LocalDate result = AddSubtractDaysSkippingWeekendsUtils.addDaysSkippingWeekends(initialDate, 4);\n        assertEquals(expectedDate, result);\n    }\n\n    @Test\n    public void givenLocalDateAndDaysToSubtract_thenSubtractDaysSkippingWeekends() {\n        LocalDate initialDate = LocalDate.of(2019, 11, 7);\n        LocalDate expectedDate = LocalDate.of(2019, 11, 1);\n        LocalDate result = AddSubtractDaysSkippingWeekendsUtils.subtractDaysSkippingWeekends(initialDate, 4);\n        assertEquals(expectedDate, result);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.unixtime;\n\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.ZoneOffset;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class UnixTimeUtils {\n\n    private UnixTimeUtils() {\n    }\n\n    public static Date dateFrom(long timestamp) {\n        return new Date(timestamp);\n    }\n\n    public static Calendar calendarFrom(long timestamp) {\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTimeInMillis(timestamp);\n        return calendar;\n    }\n\n    public static Instant fromNanos(long timestamp) {\n        long seconds = timestamp / 1_000_000_000;\n        long nanos = timestamp % 1_000_000_000;\n\n        return Instant.ofEpochSecond(seconds, nanos);\n    }\n\n    public static Instant fromTimestamp(long timestamp) {\n        return Instant.ofEpochMilli(millis(timestamp));\n    }\n\n    public static String format(Instant instant) {\n        LocalDateTime time = localTimeUtc(instant);\n        return time.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n    }\n\n    public static LocalDateTime localTimeUtc(Instant instant) {\n        return LocalDateTime.ofInstant(instant, ZoneOffset.UTC);\n    }\n\n    private static long millis(long timestamp) {\n        if (timestamp >= 1E16 || timestamp <= -1E16) {\n            return timestamp / 1_000_000;\n        }\n\n        if (timestamp >= 1E14 || timestamp <= -1E14) {\n            return timestamp / 1_000;\n        }\n\n        if (timestamp >= 1E11 || timestamp <= -3E10) {\n            return timestamp;\n        }\n\n        return timestamp * 1_000;\n    }\n}\n", "test_case": "package com.baeldung.unixtime;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.temporal.ChronoField;\nimport java.util.Calendar;\nimport java.util.Date;\n\nimport org.junit.jupiter.api.Test;\n\nclass UnixTimeUtilsUnitTest {\n    private static final String AUG_16_2022_15h25m32_Z_FORMATTED = \"2022-08-16T15:25:32\";\n    private static final long AUG_16_2022_15h25m32_Z_NANOS = 1660663532747420283L;\n    private static final long AUGUST = 8;\n\n    private void assertInstantFieldsMatch(LocalDateTime time) {\n        assertEquals(AUGUST, time.get(ChronoField.MONTH_OF_YEAR));\n        assertEquals(16, time.get(ChronoField.DAY_OF_MONTH));\n        assertEquals(2022, time.get(ChronoField.YEAR));\n        assertEquals(15, time.get(ChronoField.HOUR_OF_DAY));\n        assertEquals(25, time.get(ChronoField.MINUTE_OF_HOUR));\n        assertEquals(32, time.get(ChronoField.SECOND_OF_MINUTE));\n    }\n\n    @Test\n    void givenMillis_whenDateFrom_thenLocalTimeMatches() {\n        long millis = AUG_16_2022_15h25m32_Z_NANOS / 1000 / 1000;\n\n        Date date = UnixTimeUtils.dateFrom(millis);\n\n        LocalDateTime time = UnixTimeUtils.localTimeUtc(date.toInstant());\n        assertInstantFieldsMatch(time);\n    }\n\n    @Test\n    void givenMillis_whenCalendarFrom_thenLocalTimeMatches() {\n        long millis = AUG_16_2022_15h25m32_Z_NANOS / 1000 / 1000;\n\n        Calendar calendar = UnixTimeUtils.calendarFrom(millis);\n\n        LocalDateTime time = UnixTimeUtils.localTimeUtc(calendar.toInstant());\n        assertInstantFieldsMatch(time);\n    }\n\n    @Test\n    void whenInstantFromNanos_thenLocalTimeMatches() {\n        Instant instant = UnixTimeUtils.fromNanos(AUG_16_2022_15h25m32_Z_NANOS);\n\n        LocalDateTime time = UnixTimeUtils.localTimeUtc(instant);\n        assertThat(time.toString()).startsWith(AUG_16_2022_15h25m32_Z_FORMATTED);\n    }\n\n    @Test\n    void givenWrongPrecision_whenInstantFromNanos_thenUnexpectedTime() {\n        long microseconds = AUG_16_2022_15h25m32_Z_NANOS / 1000;\n\n        Instant instant = UnixTimeUtils.fromNanos(microseconds);\n\n        LocalDateTime time = UnixTimeUtils.localTimeUtc(instant);\n        assertThat(time.toString()).doesNotStartWith(AUG_16_2022_15h25m32_Z_FORMATTED);\n        assertEquals(\"1970-01-20T05:17:43.532747420\", time.toString());\n    }\n\n    @Test\n    void givenNanos_whenInstantFromTimestamp_thenLocalTimeMatches() {\n        Instant instant = UnixTimeUtils.fromTimestamp(AUG_16_2022_15h25m32_Z_NANOS);\n\n        LocalDateTime time = UnixTimeUtils.localTimeUtc(instant);\n        assertInstantFieldsMatch(time);\n    }\n\n    @Test\n    void givenMicroseconds_whenInstantFromTimestamp_thenLocalTimeMatches() {\n        long microseconds = AUG_16_2022_15h25m32_Z_NANOS / 1000;\n\n        Instant instant = UnixTimeUtils.fromTimestamp(microseconds);\n\n        LocalDateTime time = UnixTimeUtils.localTimeUtc(instant);\n        assertInstantFieldsMatch(time);\n    }\n\n    @Test\n    void givenMillis_whenInstantFromTimestamp_thenLocalTimeMatches() {\n        long millis = AUG_16_2022_15h25m32_Z_NANOS / 1000 / 1000;\n\n        Instant instant = UnixTimeUtils.fromTimestamp(millis);\n\n        LocalDateTime time = UnixTimeUtils.localTimeUtc(instant);\n        assertInstantFieldsMatch(time);\n    }\n\n    @Test\n    void givenSeconds_whenInstantFromTimestamp_thenLocalTimeMatches() {\n        long seconds = AUG_16_2022_15h25m32_Z_NANOS / 1000 / 1000 / 1000;\n\n        Instant instant = UnixTimeUtils.fromTimestamp(seconds);\n\n        LocalDateTime time = UnixTimeUtils.localTimeUtc(instant);\n        assertInstantFieldsMatch(time);\n    }\n}\n"}
{"code_source": "package com.baeldung.utiltosqldate;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.util.TimeZone;\n\npublic class UtilToSqlDateUtils {\n\n    public static java.util.Date createAmericanDate(String date) throws ParseException {\n        SimpleDateFormat isoFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n        isoFormat.setTimeZone(TimeZone.getTimeZone(\"America/Los_Angeles\"));\n        return isoFormat.parse(date);\n    }\n\n    public static void switchTimezone(String timeZone) {\n        TimeZone.setDefault(TimeZone.getTimeZone(timeZone));\n    }\n\n    public static LocalDate getLocalDate(java.util.Date date, String timeZone) {\n        return date.toInstant().atZone(ZoneId.of(timeZone)).toLocalDate();\n    }\n}\n", "test_case": "package com.baeldung.utiltosqldate;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.text.ParseException;\n\npublic class UtilToSqlDateUtilsUnitTest {\n\n    @Test\n    public void givenUtilDate_whenCastingToSqlDate_thenThrowException() {\n        Assertions.assertThrows(ClassCastException.class, () -> {\n            java.sql.Date date = (java.sql.Date) new java.util.Date();\n        });\n    }\n\n    @Test\n    public void givenUtilDate_whenStandardConversion_thenTimezoneLost() throws ParseException {\n        java.util.Date date = UtilToSqlDateUtils.createAmericanDate(\"2010-05-23T22:01:02\");\n\n        UtilToSqlDateUtils.switchTimezone(\"America/Los_Angeles\");\n\n        java.sql.Date sqlDate = new java.sql.Date(date.getTime());\n        Assertions.assertEquals(\"2010-05-23\", sqlDate.toString());\n\n        UtilToSqlDateUtils.switchTimezone(\"Rome\");\n        sqlDate = new java.sql.Date(date.getTime());\n        Assertions.assertEquals(\"2010-05-24\",sqlDate.toString());\n    }\n\n    @Test\n    public void givenUtilDate_whenConversionToTimestamp_thenKeepTimeInfo() throws ParseException {\n        java.util.Date date = UtilToSqlDateUtils.createAmericanDate(\"2010-05-23T22:01:02\");\n        UtilToSqlDateUtils.switchTimezone(\"America/Los_Angeles\");\n        java.sql.Timestamp timestamp = new java.sql.Timestamp(date.getTime());\n        Assertions.assertEquals(\"2010-05-23 22:01:02.0\",timestamp.toString());\n    }\n\n    @Test\n    public void givenUtilDate_whenUsingJavaTimeConversion_thenTimezoneKept() throws ParseException {\n        java.util.Date date = UtilToSqlDateUtils.createAmericanDate(\"2010-05-23T22:01:02\");\n\n        UtilToSqlDateUtils.switchTimezone(\"America/Los_Angeles\");\n\n        java.time.LocalDate localDate = UtilToSqlDateUtils.getLocalDate(date,\"America/Los_Angeles\");\n        Assertions.assertEquals(localDate.toString(), \"2010-05-23\");\n\n        UtilToSqlDateUtils.switchTimezone(\"Rome\");\n        localDate = UtilToSqlDateUtils.getLocalDate(date,\"America/Los_Angeles\");\n        Assertions.assertEquals(localDate.toString(), \"2010-05-23\");\n    }\n\n}\n"}
{"code_source": "/**\n * \n */\npackage com.baeldung.datetolocaldate;\n\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.util.Date;\n\n/**\n * Class which shows a way to convert java.util.Date into java.time.LocalDate.\n * \n * @author abialas\n *\n */\npublic class DateToLocalDateConverter {\n\n    public static LocalDate convertToLocalDateViaInstant(Date dateToConvert) {\n        return dateToConvert.toInstant()\n            .atZone(ZoneId.systemDefault())\n            .toLocalDate();\n    }\n\n    public static LocalDate convertToLocalDateViaSqlDate(Date dateToConvert) {\n        return new java.sql.Date(dateToConvert.getTime()).toLocalDate();\n    }\n\n    public static LocalDate convertToLocalDateViaMilisecond(Date dateToConvert) {\n        return Instant.ofEpochMilli(dateToConvert.getTime())\n            .atZone(ZoneId.systemDefault())\n            .toLocalDate();\n    }\n\n    public static LocalDate convertToLocalDate(Date dateToConvert) {\n        return LocalDate.ofInstant(dateToConvert.toInstant(), ZoneId.systemDefault());\n    }\n\n}\n", "test_case": "/**\n * \n */\npackage com.baeldung.datetolocaldate;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.time.LocalDate;\nimport java.time.temporal.ChronoField;\nimport java.util.Calendar;\nimport java.util.Date;\n\nimport org.junit.Test;\n\nimport com.baeldung.datetolocaldate.DateToLocalDateConverter;\n\n/**\n * JUnits for {@link DateToLocalDateConverter} class.\n * \n * @author abialas\n *\n */\npublic class DateToLocalDateConverterUnitTest {\n\n    @Test\n    public void shouldReturn10thNovember2010WhenConvertViaInstant() {\n        // given\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(2010, 10, 10);\n        Date dateToConvert = calendar.getTime();\n\n        // when\n        LocalDate localDate = DateToLocalDateConverter.convertToLocalDateViaInstant(dateToConvert);\n\n        // then\n        assertEquals(2010, localDate.get(ChronoField.YEAR));\n        assertEquals(11, localDate.get(ChronoField.MONTH_OF_YEAR));\n        assertEquals(10, localDate.get(ChronoField.DAY_OF_MONTH));\n    }\n\n    @Test\n    public void shouldReturn10thNovember2010WhenConvertViaMiliseconds() {\n        // given\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(2010, 10, 10);\n        Date dateToConvert = calendar.getTime();\n\n        // when\n        LocalDate localDate = DateToLocalDateConverter.convertToLocalDateViaMilisecond(dateToConvert);\n\n        // then\n        assertEquals(2010, localDate.get(ChronoField.YEAR));\n        assertEquals(11, localDate.get(ChronoField.MONTH_OF_YEAR));\n        assertEquals(10, localDate.get(ChronoField.DAY_OF_MONTH));\n    }\n\n    @Test\n    public void shouldReturn10thNovember2010WhenConvertViaSqlDate() {\n        // given\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(2010, 10, 10);\n        Date dateToConvert = calendar.getTime();\n\n        // when\n        LocalDate localDate = DateToLocalDateConverter.convertToLocalDateViaSqlDate(dateToConvert);\n\n        // then\n        assertEquals(2010, localDate.get(ChronoField.YEAR));\n        assertEquals(11, localDate.get(ChronoField.MONTH_OF_YEAR));\n        assertEquals(10, localDate.get(ChronoField.DAY_OF_MONTH));\n    }\n\n    @Test\n    public void shouldReturn10thNovember2010WhenConvertToLocalDate() {\n        // given\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(2010, 10, 10);\n        Date dateToConvert = calendar.getTime();\n\n        // when\n        LocalDate localDateTime = DateToLocalDateConverter.convertToLocalDate(dateToConvert);\n\n        // then\n        assertEquals(2010, localDateTime.get(ChronoField.YEAR));\n        assertEquals(11, localDateTime.get(ChronoField.MONTH_OF_YEAR));\n        assertEquals(10, localDateTime.get(ChronoField.DAY_OF_MONTH));\n    }\n\n}\n"}
{"code_source": "/**\n * \n */\npackage com.baeldung.datetolocaldate;\n\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.util.Date;\n\n/**\n * Class which shows a way to convert java.util.Date into java.time.LocalDateTime.\n * \n * @author abialas\n *\n */\npublic class DateToLocalDateTimeConverter {\n\n    public static LocalDateTime convertToLocalDateTimeViaInstant(Date dateToConvert) {\n        return dateToConvert.toInstant()\n            .atZone(ZoneId.systemDefault())\n            .toLocalDateTime();\n    }\n\n    public static LocalDateTime convertToLocalDateTimeViaSqlTimestamp(Date dateToConvert) {\n        return new java.sql.Timestamp(dateToConvert.getTime()).toLocalDateTime();\n    }\n\n    public static LocalDateTime convertToLocalDateTimeViaMilisecond(Date dateToConvert) {\n        return Instant.ofEpochMilli(dateToConvert.getTime())\n            .atZone(ZoneId.systemDefault())\n            .toLocalDateTime();\n    }\n\n    public static LocalDateTime convertToLocalDateTime(Date dateToConvert) {\n        return LocalDateTime.ofInstant(dateToConvert.toInstant(), ZoneId.systemDefault());\n    }\n\n}\n", "test_case": "/**\n * \n */\npackage com.baeldung.datetolocaldate;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.time.LocalDateTime;\nimport java.time.temporal.ChronoField;\nimport java.util.Calendar;\nimport java.util.Date;\n\nimport org.junit.Test;\n\nimport com.baeldung.datetolocaldate.DateToLocalDateTimeConverter;\n\n/**\n * JUnits for {@link DateToLocalDateTimeConverter} class.\n * \n * @author abialas\n *\n */\npublic class DateToLocalDateTimeConverterUnitTest {\n\n    @Test\n    public void shouldReturn10thNovember2010time8hour20minWhenConvertViaInstant() {\n        // given\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(2010, 10, 10, 8, 20);\n        Date dateToConvert = calendar.getTime();\n\n        // when\n        LocalDateTime localDateTime = DateToLocalDateTimeConverter.convertToLocalDateTimeViaInstant(dateToConvert);\n\n        // then\n        assertEquals(2010, localDateTime.get(ChronoField.YEAR));\n        assertEquals(11, localDateTime.get(ChronoField.MONTH_OF_YEAR));\n        assertEquals(10, localDateTime.get(ChronoField.DAY_OF_MONTH));\n        assertEquals(8, localDateTime.get(ChronoField.HOUR_OF_DAY));\n        assertEquals(20, localDateTime.get(ChronoField.MINUTE_OF_HOUR));\n    }\n\n    @Test\n    public void shouldReturn10thNovember2010time8hour20minWhenConvertViaMiliseconds() {\n        // given\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(2010, 10, 10, 8, 20);\n        Date dateToConvert = calendar.getTime();\n\n        // when\n        LocalDateTime localDateTime = DateToLocalDateTimeConverter.convertToLocalDateTimeViaMilisecond(dateToConvert);\n\n        // then\n        assertEquals(2010, localDateTime.get(ChronoField.YEAR));\n        assertEquals(11, localDateTime.get(ChronoField.MONTH_OF_YEAR));\n        assertEquals(10, localDateTime.get(ChronoField.DAY_OF_MONTH));\n        assertEquals(8, localDateTime.get(ChronoField.HOUR_OF_DAY));\n        assertEquals(20, localDateTime.get(ChronoField.MINUTE_OF_HOUR));\n    }\n\n    @Test\n    public void shouldReturn10thNovember2010time8hour20minWhenConvertViaSqlTimestamp() {\n        // given\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(2010, 10, 10, 8, 20);\n        Date dateToConvert = calendar.getTime();\n\n        // when\n        LocalDateTime localDateTime = DateToLocalDateTimeConverter.convertToLocalDateTimeViaSqlTimestamp(dateToConvert);\n\n        // then\n        assertEquals(2010, localDateTime.get(ChronoField.YEAR));\n        assertEquals(11, localDateTime.get(ChronoField.MONTH_OF_YEAR));\n        assertEquals(10, localDateTime.get(ChronoField.DAY_OF_MONTH));\n        assertEquals(8, localDateTime.get(ChronoField.HOUR_OF_DAY));\n        assertEquals(20, localDateTime.get(ChronoField.MINUTE_OF_HOUR));\n    }\n\n    @Test\n    public void shouldReturn10thNovember2010time8hour20minWhenConvertToLocalDateTime() {\n        // given\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(2010, 10, 10, 8, 20);\n        Date dateToConvert = calendar.getTime();\n\n        // when\n        LocalDateTime localDateTime = DateToLocalDateTimeConverter.convertToLocalDateTime(dateToConvert);\n\n        // then\n        assertEquals(2010, localDateTime.get(ChronoField.YEAR));\n        assertEquals(11, localDateTime.get(ChronoField.MONTH_OF_YEAR));\n        assertEquals(10, localDateTime.get(ChronoField.DAY_OF_MONTH));\n        assertEquals(8, localDateTime.get(ChronoField.HOUR_OF_DAY));\n        assertEquals(20, localDateTime.get(ChronoField.MINUTE_OF_HOUR));\n    }\n\n}\n"}
{"code_source": "/**\n * \n */\npackage com.baeldung.datetolocaldate;\n\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.util.Date;\n\n/**\n * Class which shows different ways of converting java.time.LocalDateTime into java.util.Date. \n *  \n * @author abialas\n *\n */\npublic class LocalDateTimeToDateConverter {\n\n    public static Date convertToDateViaSqlTimestamp(LocalDateTime dateToConvert) {\n        return java.sql.Timestamp.valueOf(dateToConvert);\n    }\n\n    public static Date convertToDateViaInstant(LocalDateTime dateToConvert) {\n        return java.util.Date.from(dateToConvert.atZone(ZoneId.systemDefault())\n            .toInstant());\n    }\n\n}\n", "test_case": "/**\n * \n */\npackage com.baeldung.datetolocaldate;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.time.LocalDateTime;\nimport java.util.Calendar;\nimport java.util.Date;\n\nimport org.junit.Test;\n\nimport com.baeldung.datetolocaldate.LocalDateTimeToDateConverter;\n\n/**\n * \n * JUnits for {@link LocalDateTimeToDateConverter} class.\n * \n * @author abialas\n *\n */\npublic class LocalDateTimeToDateConverterUnitTest {\n\n    @Test\n    public void shouldReturn10thNovember2010time8hour20minWhenConvertViaInstant() {\n        // given\n        LocalDateTime dateToConvert = LocalDateTime.of(2010, 11, 10, 8, 20);\n\n        // when\n        Date date = LocalDateTimeToDateConverter.convertToDateViaInstant(dateToConvert);\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);\n\n        // then\n        assertEquals(2010, calendar.get(Calendar.YEAR));\n        assertEquals(10, calendar.get(Calendar.MONTH));\n        assertEquals(10, calendar.get(Calendar.DAY_OF_MONTH));\n        assertEquals(8, calendar.get(Calendar.HOUR));\n        assertEquals(20, calendar.get(Calendar.MINUTE));\n        assertEquals(0, calendar.get(Calendar.SECOND));\n    }\n\n    @Test\n    public void shouldReturn10thNovember2010WhenConvertViaSqlTimestamp() {\n        // given\n        LocalDateTime dateToConvert = LocalDateTime.of(2010, 11, 10, 8, 20);\n\n        // when\n        Date date = LocalDateTimeToDateConverter.convertToDateViaSqlTimestamp(dateToConvert);\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);\n\n        // then\n        assertEquals(2010, calendar.get(Calendar.YEAR));\n        assertEquals(10, calendar.get(Calendar.MONTH));\n        assertEquals(10, calendar.get(Calendar.DAY_OF_MONTH));\n        assertEquals(8, calendar.get(Calendar.HOUR));\n        assertEquals(20, calendar.get(Calendar.MINUTE));\n        assertEquals(0, calendar.get(Calendar.SECOND));\n    }\n\n}\n"}
{"code_source": "/**\n * \n */\npackage com.baeldung.datetolocaldate;\n\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.util.Date;\n\n/**\n * Class which shows different ways of converting java.time.LocalDate into java.util.Date. \n *  \n * @author abialas\n *\n */\npublic class LocalDateToDateConverter {\n\n    public static Date convertToDateViaSqlDate(LocalDate dateToConvert) {\n        return java.sql.Date.valueOf(dateToConvert);\n    }\n\n    public static Date convertToDateViaInstant(LocalDate dateToConvert) {\n        return java.util.Date.from(dateToConvert.atStartOfDay()\n            .atZone(ZoneId.systemDefault())\n            .toInstant());\n    }\n\n}\n", "test_case": "/**\n * \n */\npackage com.baeldung.datetolocaldate;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.time.LocalDate;\nimport java.util.Calendar;\nimport java.util.Date;\n\nimport org.junit.Test;\n\nimport com.baeldung.datetolocaldate.LocalDateToDateConverter;\n\n/**\n * \n * JUnits for {@link LocalDateToDateConverter} class.\n * \n * @author abialas\n *\n */\npublic class LocalDateToDateConverterUnitTest {\n\n    @Test\n    public void shouldReturn10thNovember2010WhenConvertViaInstant() {\n        // given\n        LocalDate dateToConvert = LocalDate.of(2010, 11, 10);\n\n        // when\n        Date date = LocalDateToDateConverter.convertToDateViaInstant(dateToConvert);\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);\n\n        // then\n        assertEquals(2010, calendar.get(Calendar.YEAR));\n        assertEquals(10, calendar.get(Calendar.MONTH));\n        assertEquals(10, calendar.get(Calendar.DAY_OF_MONTH));\n    }\n\n    @Test\n    public void shouldReturn10thNovember2010WhenConvertViaSqlDate() {\n        // given\n        LocalDate dateToConvert = LocalDate.of(2010, 11, 10);\n\n        // when\n        Date date = LocalDateToDateConverter.convertToDateViaSqlDate(dateToConvert);\n        Calendar calendar = Calendar.getInstance();\n        calendar.setTime(date);\n\n        // then\n        assertEquals(2010, calendar.get(Calendar.YEAR));\n        assertEquals(10, calendar.get(Calendar.MONTH));\n        assertEquals(10, calendar.get(Calendar.DAY_OF_MONTH));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.date.validation;\n\nimport org.apache.commons.validator.GenericValidator;\n\npublic class DateValidatorUsingApacheValidator implements DateValidator {\n\n    @Override\n    public boolean isValid(String dateStr) {\n        return GenericValidator.isDate(dateStr, \"yyyy-MM-dd\", true); \n    }\n}\n", "test_case": "package com.baeldung.date.validation;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\nimport org.apache.commons.validator.GenericValidator;\nimport org.junit.Test;\n\npublic class DateValidatorUsingApacheValidatorUnitTest {\n\n    @Test\n    public void whenValidDatePassed_ThenTrue() {\n        assertTrue(GenericValidator.isDate(\"2019-02-28\", \"yyyy-MM-dd\", true));\n    }\n\n    @Test\n    public void whenInvalidDatePassed_ThenFalse() {\n        assertFalse(GenericValidator.isDate(\"2019-02-29\", \"yyyy-MM-dd\", true));\n    }\n}\n"}
{"code_source": "package com.baeldung.date.validation;\n\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\n\npublic class DateValidatorUsingDateFormat implements DateValidator {\n    private String dateFormat;\n\n    public DateValidatorUsingDateFormat(String dateFormat) {\n        this.dateFormat = dateFormat;\n    }\n\n    @Override\n    public boolean isValid(String dateStr) {\n        DateFormat sdf = new SimpleDateFormat(this.dateFormat);\n        sdf.setLenient(false);\n        try {\n            sdf.parse(dateStr);\n        } catch (ParseException e) {\n            return false;\n        }\n        return true;\n    }\n}\n", "test_case": "package com.baeldung.date.validation;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class DateValidatorUsingDateFormatUnitTest {\n    \n    @Test\n    public void givenValidator_whenValidDatePassed_ThenTrue() {\n        DateValidator validator = new DateValidatorUsingDateFormat(\"MM/dd/yyyy\");\n        \n        assertTrue(validator.isValid(\"02/28/2019\"));\n    }\n    \n    @Test\n    public void givenValidator_whenInvalidDatePassed_ThenFalse() {\n        DateValidator validator = new DateValidatorUsingDateFormat(\"MM/dd/yyyy\");\n        \n        assertFalse(validator.isValid(\"02/30/2019\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.date.validation;\n\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\n\npublic class DateValidatorUsingDateTimeFormatter implements DateValidator {\n    private DateTimeFormatter dateFormatter;\n    \n    public DateValidatorUsingDateTimeFormatter(DateTimeFormatter dateFormatter) {\n        this.dateFormatter = dateFormatter;\n    }\n\n    @Override\n    public boolean isValid(String dateStr) {\n        try {\n            this.dateFormatter.parse(dateStr);\n        } catch (DateTimeParseException e) {\n            return false;\n        }\n        return true;\n    }\n}\n", "test_case": "package com.baeldung.date.validation;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.ResolverStyle;\nimport java.util.Locale;\n\nimport org.junit.Test;\n\npublic class DateValidatorUsingDateTimeFormatterUnitTest {\n    \n    @Test\n    public void givenValidator_whenValidDatePassed_ThenTrue() {\n        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"uuuu-MM-dd\", Locale.US)\n            .withResolverStyle(ResolverStyle.STRICT);\n        DateValidator validator = new DateValidatorUsingDateTimeFormatter(dateFormatter);\n        \n        assertTrue(validator.isValid(\"2019-02-28\"));\n    }\n    \n    @Test\n    public void givenValidator_whenInValidDatePassed_ThenFalse() {\n        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"uuuu-MM-dd\", Locale.US)\n            .withResolverStyle(ResolverStyle.STRICT);\n        DateValidator validator = new DateValidatorUsingDateTimeFormatter(dateFormatter);\n        \n        assertFalse(validator.isValid(\"2019-02-30\"));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.date.validation;\n\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\n\npublic class DateValidatorUsingLocalDate implements DateValidator {\n    private DateTimeFormatter dateFormatter;\n    \n    public DateValidatorUsingLocalDate(DateTimeFormatter dateFormatter) {\n        this.dateFormatter = dateFormatter;\n    }\n\n    @Override\n    public boolean isValid(String dateStr) {\n        try {\n            LocalDate.parse(dateStr, this.dateFormatter);\n        } catch (DateTimeParseException e) {\n            return false;\n        }\n        return true;\n    }\n}\n", "test_case": "package com.baeldung.date.validation;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\nimport java.time.format.DateTimeFormatter;\n\nimport org.junit.Test;\n\npublic class DateValidatorUsingLocalDateUnitTest {\n    \n    @Test\n    public void givenValidator_whenValidDatePassed_ThenTrue() {\n        DateTimeFormatter dateFormatter = DateTimeFormatter.BASIC_ISO_DATE;\n        DateValidator validator = new DateValidatorUsingLocalDate(dateFormatter);\n        \n        assertTrue(validator.isValid(\"20190228\"));\n    }\n    \n    @Test\n    public void givenValidator_whenInValidDatePassed_ThenFalse() {\n        DateTimeFormatter dateFormatter = DateTimeFormatter.BASIC_ISO_DATE;\n        DateValidator validator = new DateValidatorUsingLocalDate(dateFormatter);\n        \n        assertFalse(validator.isValid(\"20190230\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.regexp.datepattern;\n\nimport java.util.regex.Pattern;\n\nclass FormattedDateMatcher implements DateMatcher {\n\n    private static final Pattern DATE_PATTERN = Pattern.compile(\n            \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\");\n\n    @Override\n    public boolean matches(String date) {\n        return DATE_PATTERN.matcher(date).matches();\n    }\n}\n", "test_case": "package com.baeldung.regexp.datepattern;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class FormattedDateMatcherUnitTest {\n\n    private DateMatcher matcher = new FormattedDateMatcher();\n\n    @Test\n    public void whenUsingFormattedDateMatcher_thenFormatConstraintsSatisfied() {\n        Assert.assertTrue(matcher.matches(\"2017-12-31\"));\n        Assert.assertTrue(matcher.matches(\"2018-01-01\"));\n        Assert.assertTrue(matcher.matches(\"0000-00-00\"));\n        Assert.assertTrue(matcher.matches(\"1029-99-72\"));\n\n        Assert.assertFalse(matcher.matches(\"2018-01\"));\n        Assert.assertFalse(matcher.matches(\"2018-01-01-01\"));\n        Assert.assertFalse(matcher.matches(\"2018-01-XX\"));\n        Assert.assertFalse(matcher.matches(\" 2018-01-01\"));\n        Assert.assertFalse(matcher.matches(\"2018-01-01 \"));\n        Assert.assertFalse(matcher.matches(\"2018/01/01\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.regexp.datepattern;\n\nimport java.util.regex.Pattern;\n\nclass RangedDateMatcher implements DateMatcher {\n\n    private static final Pattern DATE_PATTERN = Pattern.compile(\n            \"^((19|2[0-9])[0-9]{2})-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$\");\n\n    @Override\n    public boolean matches(String date) {\n        return DATE_PATTERN.matcher(date).matches();\n    }\n}\n", "test_case": "package com.baeldung.regexp.datepattern;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class RangedDateMatcherUnitTest {\n\n    private DateMatcher matcher = new RangedDateMatcher();\n\n    @Test\n    public void whenUsingRangedDateMatcher_thenFormatConstraintsSatisfied() {\n        Assert.assertFalse(matcher.matches(\"2018-01\"));\n        Assert.assertFalse(matcher.matches(\"2018-01-01-01\"));\n        Assert.assertFalse(matcher.matches(\"2018-01-XX\"));\n        Assert.assertFalse(matcher.matches(\" 2018-01-01\"));\n        Assert.assertFalse(matcher.matches(\"2018-01-01 \"));\n        Assert.assertFalse(matcher.matches(\"2018/01/01\"));\n    }\n\n    @Test\n    public void whenUsingRangedDateMatcher_thenRangeConstraintsSatisfied() {\n        Assert.assertTrue(matcher.matches(\"1900-01-01\"));\n        Assert.assertTrue(matcher.matches(\"2018-02-31\"));\n        Assert.assertTrue(matcher.matches(\"2999-12-31\"));\n\n        Assert.assertFalse(matcher.matches(\"1899-12-31\"));\n        Assert.assertFalse(matcher.matches(\"2018-05-35\"));\n        Assert.assertFalse(matcher.matches(\"2018-13-05\"));\n        Assert.assertFalse(matcher.matches(\"3000-01-01\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.regexp.datepattern.gregorian;\n\nimport com.baeldung.regexp.datepattern.DateMatcher;\n\nimport java.util.regex.Pattern;\n\nclass GregorianDateMatcher implements DateMatcher {\n\n    private static final Pattern DATE_PATTERN = Pattern.compile(\n            \"^((2000|2400|2800|(19|2[0-9])(0[48]|[2468][048]|[13579][26]))-02-29)$\" \n            + \"|^(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))$\"\n            + \"|^(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))$\" \n            + \"|^(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))$\");\n\n    @Override\n    public boolean matches(String date) {\n        return DATE_PATTERN.matcher(date).matches();\n    }\n}\n", "test_case": "package com.baeldung.regexp.datepattern.gregorian;\n\nimport com.baeldung.regexp.datepattern.DateMatcher;\nimport com.baeldung.regexp.datepattern.gregorian.testhelper.GregorianDateTestHelper;\nimport org.junit.Test;\n\npublic class GregorianDateMatcherUnitTest {\n\n    private DateMatcher matcher = new GregorianDateMatcher();\n\n    private GregorianDateTestHelper testHelper = new GregorianDateTestHelper(matcher);\n\n    @Test\n    public void whenUsingGregorianDateMatcher_thenFormatConstraintsSatisfied() {\n        testHelper.assertFormat();\n    }\n\n    @Test\n    public void whenUsingGregorianDateMatcher_thenRangeConstraintsSatisfied() {\n        testHelper.assertRange();\n    }\n\n    @Test\n    public void whenYearIsLeap_thenFebruaryHas29Days() {\n        testHelper.assertFebruary29th();\n    }\n\n    @Test\n    public void whenMonthIsFebruary_thenMonthContainsUpTo28Days() {\n        testHelper.assertFebruaryGeneralDates();\n    }\n\n    @Test\n    public void whenMonthIsShort_thenMonthContainsUpTo30Days() {\n        testHelper.assertMonthsOf30Days();\n    }\n\n    @Test\n    public void whenMonthIsLong_thenMonthContainsUpTo31Days() {\n        testHelper.assertMonthsOf31Dates();\n    }\n}\n"}
{"code_source": "package com.baeldung.regexp.datepattern.gregorian;\n\nimport com.baeldung.regexp.datepattern.DateMatcher;\n\nimport java.util.regex.Pattern;\n\npublic class February29thMatcher implements DateMatcher {\n\n    private static final Pattern DATE_PATTERN = Pattern.compile(\n            \"^((2000|2400|2800|(19|2[0-9])(0[48]|[2468][048]|[13579][26]))-02-29)$\");\n\n    @Override\n    public boolean matches(String date) {\n        return DATE_PATTERN.matcher(date).matches();\n    }\n}\n", "test_case": "package com.baeldung.regexp.datepattern.gregorian;\n\nimport com.baeldung.regexp.datepattern.DateMatcher;\nimport com.baeldung.regexp.datepattern.gregorian.testhelper.GregorianDateTestHelper;\nimport org.junit.Test;\n\npublic class February29thMatcherUnitTest {\n\n    private DateMatcher matcher = new February29thMatcher();\n\n    private GregorianDateTestHelper testHelper = new GregorianDateTestHelper(matcher);\n\n    @Test\n    public void whenYearIsLeap_thenYearHasFebruary29th() {\n        testHelper.assertFebruary29th();\n    }\n}\n"}
{"code_source": "package com.baeldung.regexp.datepattern.gregorian;\n\nimport com.baeldung.regexp.datepattern.DateMatcher;\n\nimport java.util.regex.Pattern;\n\npublic class FebruaryGeneralMatcher implements DateMatcher {\n\n    private static final Pattern DATE_PATTERN = Pattern.compile(\n            \"^(((19|2[0-9])[0-9]{2})-02-(0[1-9]|1[0-9]|2[0-8]))$\");\n\n    @Override\n    public boolean matches(String date) {\n        return DATE_PATTERN.matcher(date).matches();\n    }\n}\n", "test_case": "package com.baeldung.regexp.datepattern.gregorian;\n\nimport com.baeldung.regexp.datepattern.DateMatcher;\nimport com.baeldung.regexp.datepattern.gregorian.testhelper.GregorianDateTestHelper;\nimport org.junit.Test;\n\npublic class FebruaryGeneralMatcherUnitTest {\n\n    private DateMatcher matcher = new FebruaryGeneralMatcher();\n\n    private GregorianDateTestHelper testHelper = new GregorianDateTestHelper(matcher);\n\n    @Test\n    public void whenMonthIsFebruary_thenMonthContainsUpTo28Days() {\n        testHelper.assertFebruaryGeneralDates();\n    }\n}"}
{"code_source": "package com.baeldung.regexp.datepattern.gregorian;\n\nimport com.baeldung.regexp.datepattern.DateMatcher;\n\nimport java.util.regex.Pattern;\n\npublic class MonthsOf30DaysMatcher implements DateMatcher {\n\n    private static final Pattern DATE_PATTERN = Pattern.compile(\n            \"^(((19|2[0-9])[0-9]{2})-(0[469]|11)-(0[1-9]|[12][0-9]|30))$\");\n\n    @Override\n    public boolean matches(String date) {\n        return DATE_PATTERN.matcher(date).matches();\n    }\n\n}\n", "test_case": "package com.baeldung.regexp.datepattern.gregorian;\n\nimport com.baeldung.regexp.datepattern.DateMatcher;\nimport com.baeldung.regexp.datepattern.gregorian.testhelper.GregorianDateTestHelper;\nimport org.junit.Test;\n\npublic class MonthsOf30DaysMatcherUnitTest {\n\n    private DateMatcher matcher = new MonthsOf30DaysMatcher();\n\n    private GregorianDateTestHelper testHelper = new GregorianDateTestHelper(matcher);\n\n    @Test\n    public void whenMonthIsShort_thenMonthContainsUpTo30Days() {\n        testHelper.assertMonthsOf30Days();\n    }\n}"}
{"code_source": "package com.baeldung.regexp.datepattern.gregorian;\n\nimport com.baeldung.regexp.datepattern.DateMatcher;\n\nimport java.util.regex.Pattern;\n\npublic class MonthsOf31DaysMatcher implements DateMatcher {\n\n    private static final Pattern DATE_PATTERN = Pattern.compile(\n            \"^(((19|2[0-9])[0-9]{2})-(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01]))$\");\n\n    @Override\n    public boolean matches(String date) {\n        return DATE_PATTERN.matcher(date).matches();\n    }\n\n}\n", "test_case": "package com.baeldung.regexp.datepattern.gregorian;\n\nimport com.baeldung.regexp.datepattern.DateMatcher;\nimport com.baeldung.regexp.datepattern.gregorian.testhelper.GregorianDateTestHelper;\nimport org.junit.Test;\n\npublic class MonthsOf31DaysMatcherUnitTest {\n\n    private DateMatcher matcher = new MonthsOf31DaysMatcher();\n\n    private GregorianDateTestHelper testHelper = new GregorianDateTestHelper(matcher);\n\n    @Test\n    public void whenMonthIsLong_thenMonthContainsUpTo31Days() {\n        testHelper.assertMonthsOf31Dates();\n    }\n}"}
{"code_source": "package com.baeldung.zonedatetime;\n\nimport java.time.OffsetDateTime;\nimport java.time.ZoneOffset;\n\npublic class OffsetDateTimeExample {\n\n    public OffsetDateTime getCurrentTimeByZoneOffset(String offset) {\n        ZoneOffset zoneOffSet= ZoneOffset.of(offset);\n        OffsetDateTime date = OffsetDateTime.now(zoneOffSet);\n        return date;\n    }\n}\n", "test_case": "package com.baeldung.zonedatetime;\n\nimport static org.junit.Assert.assertTrue;\n\nimport java.time.OffsetDateTime;\nimport java.time.ZoneOffset;\n\nimport org.junit.Test;\n\npublic class OffsetDateTimeExampleUnitTest {\n\n    OffsetDateTimeExample offsetDateTimeExample = new OffsetDateTimeExample();\n\n    @Test\n    public void givenZoneOffset_whenGetCurrentTime_thenResultHasZone() {\n        String offset = \"+02:00\";\n        OffsetDateTime time = offsetDateTimeExample.getCurrentTimeByZoneOffset(offset);\n\n        assertTrue(time.getOffset()\n            .equals(ZoneOffset.of(offset)));\n    }\n}\n"}
{"code_source": "package com.baeldung.zonedatetime;\n\nimport java.time.OffsetTime;\nimport java.time.ZoneOffset;\n\npublic class OffsetTimeExample {\n\n    public OffsetTime getCurrentTimeByZoneOffset(String offset) {\n        ZoneOffset zoneOffSet = ZoneOffset.of(offset);\n        OffsetTime time = OffsetTime.now(zoneOffSet);\n        return time;\n    }\n}\n", "test_case": "package com.baeldung.zonedatetime;\n\nimport static org.junit.Assert.assertTrue;\n\nimport java.time.OffsetTime;\nimport java.time.ZoneOffset;\n\nimport org.junit.Test;\n\npublic class OffsetTimeExampleUnitTest {\n\n    OffsetTimeExample offsetTimeExample = new OffsetTimeExample();\n\n    @Test\n    public void givenZoneOffset_whenGetCurrentTime_thenResultHasZone() {\n        String offset = \"+02:00\";\n        OffsetTime time = offsetTimeExample.getCurrentTimeByZoneOffset(offset);\n\n        assertTrue(time.getOffset()\n            .equals(ZoneOffset.of(offset)));\n    }\n}\n"}
{"code_source": "package com.baeldung.zonedatetime;\n\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\n\npublic class ZoneDateTimeExample {\n\n    public ZonedDateTime getCurrentTimeByZoneId(String region) {\n        ZoneId zone = ZoneId.of(region);\n        ZonedDateTime date = ZonedDateTime.now(zone);\n        return date;\n    }\n\n    public ZonedDateTime convertZonedDateTime(ZonedDateTime sourceDate, String destZone) {\n\n        ZoneId destZoneId = ZoneId.of(destZone);\n        ZonedDateTime destDate = sourceDate.withZoneSameInstant(destZoneId);\n\n        return destDate;\n    }\n}\n", "test_case": "package com.baeldung.zonedatetime;\n\nimport static org.junit.Assert.assertTrue;\n\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\n\nimport org.junit.Test;\n\npublic class ZoneDateTimeExampleUnitTest {\n\n    ZoneDateTimeExample zoneDateTimeExample = new ZoneDateTimeExample();\n\n    @Test\n    public void givenZone_whenGetCurrentTime_thenResultHasZone() {\n        String zone = \"Europe/Berlin\";\n        ZonedDateTime time = zoneDateTimeExample.getCurrentTimeByZoneId(zone);\n\n        assertTrue(time.getZone()\n            .equals(ZoneId.of(zone)));\n    }\n\n    @Test\n    public void givenZones_whenConvertDateByZone_thenGetConstantDiff() {\n        String sourceZone = \"Europe/Berlin\";\n        String destZone = \"Asia/Tokyo\";\n        ZonedDateTime sourceDate = zoneDateTimeExample.getCurrentTimeByZoneId(sourceZone);\n        ZonedDateTime destDate = zoneDateTimeExample.convertZonedDateTime(sourceDate, destZone);\n        \n        assertTrue(sourceDate.toInstant()\n            .compareTo(destDate.toInstant()) == 0);\n    }\n}\n"}
{"code_source": "package com.baeldung.exceptions.customexception;\n\npublic class IncorrectFileExtensionException extends RuntimeException{\n    private static final long serialVersionUID = 1L;\n\n    public IncorrectFileExtensionException(String errorMessage, Throwable err) {\n        super(errorMessage, err);\n    }\n}\n", "test_case": "package com.baeldung.exceptions.customexception;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.io.File;\n\nimport org.junit.Test;\n\npublic class IncorrectFileExtensionExceptionUnitTest {\n\n    @Test\n    public void testWhenCorrectFileExtensionGiven_ReceivesNoException() throws IncorrectFileNameException {\n        assertThat(FileManager.getFirstLine(\"correctFileNameWithProperExtension.txt\")).isEqualTo(\"Default First Line\");\n    }\n\n    @Test(expected = IncorrectFileExtensionException.class)\n    public void testWhenCorrectFileNameExceptionThrown_ReceivesNoException() throws IncorrectFileNameException {\n        StringBuffer sBuffer = new StringBuffer();\n        sBuffer.append(\"src\");\n        sBuffer.append(File.separator);\n        sBuffer.append(\"test\");\n        sBuffer.append(File.separator);\n        sBuffer.append(\"resources\");\n        sBuffer.append(File.separator);\n        sBuffer.append(\"correctFileNameWithoutProperExtension\");\n        FileManager.getFirstLine(sBuffer.toString());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.exceptions.customexception;\n\npublic class IncorrectFileNameException extends Exception {\n    private static final long serialVersionUID = 1L;\n    \n    public IncorrectFileNameException(String errorMessage, Throwable err) {\n        super(errorMessage, err);\n    }\n}\n", "test_case": "package com.baeldung.exceptions.customexception;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.Test;\n\npublic class IncorrectFileNameExceptionUnitTest {\n\n    @Test(expected = IncorrectFileNameException.class)\n    public void testWhenIncorrectFileNameExceptionThrown_ReceivesIncorrectFileNameException() throws IncorrectFileNameException {\n        FileManager.getFirstLine(\"wrongFileName.txt\");\n    }\n\n    @Test\n    public void testWhenCorrectFileNameExceptionThrown_ReceivesNoException() throws IncorrectFileNameException {\n        assertThat(FileManager.getFirstLine(\"correctFileName.txt\")).isEqualTo(\"Default First Line\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.exceptions.exceptionhandling;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.logging.Logger;\nimport java.util.stream.Collectors;\n\npublic class Exceptions {\n\n    private final static Logger logger = Logger.getLogger(\"ExceptionLogging\");\n\n    public static List<Player> getPlayers() throws IOException {\n        Path path = Paths.get(\"players.dat\");\n        List<String> players = Files.readAllLines(path);\n\n        return players.stream()\n          .map(Player::new)\n          .collect(Collectors.toList());\n    }\n\n    public List<Player> loadAllPlayers(String playersFile) throws IOException{\n        try {\n            throw new IOException();\n        } catch(IOException ex) {\n            throw new IllegalStateException();\n        }\n    }\n\n    public int getPlayerScoreThrows(String playerFile) throws FileNotFoundException {\t\t \n        Scanner contents = new Scanner(new File(playerFile));\n        return Integer.parseInt(contents.nextLine());\n    }\n\n    public int getPlayerScoreTryCatch(String playerFile) {\n        try {\n            Scanner contents = new Scanner(new File(playerFile));\n            return Integer.parseInt(contents.nextLine());\n        } catch (FileNotFoundException noFile) {\n            throw new IllegalArgumentException(\"File not found\");\n        }\n    }\n\n    public int getPlayerScoreTryCatchRecovery(String playerFile) {\n        try {\n            Scanner contents = new Scanner(new File(playerFile));\n            return Integer.parseInt(contents.nextLine());\n        } catch ( FileNotFoundException noFile ) {\n            logger.warning(\"File not found, resetting score.\");\n            return 0;\n        }\n    }\n\n    public int getPlayerScoreFinally(String playerFile) throws FileNotFoundException {\n        Scanner contents = null;\n        try {\n            contents = new Scanner(new File(playerFile));\n            return Integer.parseInt(contents.nextLine());\n        } finally {\n            if (contents != null) {\n                contents.close();\n            }\n        }\n    }\n\n    public int getPlayerScoreTryWithResources(String playerFile) {\n        try (Scanner contents = new Scanner(new File(playerFile))) {\n            return Integer.parseInt(contents.nextLine());\n        } catch (FileNotFoundException e ) {\n            logger.warning(\"File not found, resetting score.\");\n            return 0;\n        }\n    }\n\n    public int getPlayerScoreMultipleCatchBlocks(String playerFile) {\n        try (Scanner contents = new Scanner(new File(playerFile))) {\n            return Integer.parseInt(contents.nextLine());\n        } catch (IOException e) {\n            logger.warning(\"Player file wouldn't load!\");\n            return 0;\n        } catch (NumberFormatException e) {\n            logger.warning(\"Player file was corrupted!\");\n            return 0;\n        }\n    }\n\n    public int getPlayerScoreMultipleCatchBlocksAlternative(String playerFile) {\n        try (Scanner contents = new Scanner(new File(playerFile)) ) {\n            return Integer.parseInt(contents.nextLine());\n        } catch (FileNotFoundException e) {\n            logger.warning(\"Player file not found!\");\n            return 0;\n        } catch (IOException e) {\n            logger.warning(\"Player file wouldn't load!\");\n            return 0;\n        } catch (NumberFormatException e) {\n            logger.warning(\"Player file was corrupted!\");\n            return 0;\n        }\n    }\n\n    public int getPlayerScoreUnionCatchBlocks(String playerFile) {\n        try (Scanner contents = new Scanner(new File(playerFile))) {\n            return Integer.parseInt(contents.nextLine());\n        } catch (IOException | NumberFormatException e) {\n            logger.warning(\"Failed to load score!\");\n            return 0;\n        }\n    }\n\n    public List<Player> loadAllPlayersThrowingChecked(String playersFile) throws TimeoutException {\n        boolean tooLong = true;\n\n        while (!tooLong) {\n            // ... potentially long operation\n        }\n            throw new TimeoutException(\"This operation took too long\");\n    }\n\n    public List<Player> loadAllPlayersThrowingUnchecked(String playersFile) throws TimeoutException {\n        if(!isFilenameValid(playersFile)) {\n            throw new IllegalArgumentException(\"Filename isn't valid!\");\n        }\n        return null;\n\n        // ...\n    }\n\n    public List<Player> loadAllPlayersWrapping(String playersFile) throws IOException {\n        try { \n            throw new IOException();\n        } catch (IOException io) { \t\t\n            throw io;\n        }\n    }\n\n    public List<Player> loadAllPlayersRethrowing(String playersFile) throws PlayerLoadException {\n        try { \n            throw new IOException();\n        } catch (IOException io) { \t\t\n            throw new PlayerLoadException(io);\n        }\n    }\n\n    public List<Player> loadAllPlayersThrowable(String playersFile) {\n        try {\n            throw new NullPointerException();\n        } catch ( Throwable t ) {\n            throw t;\n        }\n    }\n\n    class FewerExceptions extends Exceptions {\n        @Override\n        public List<Player> loadAllPlayers(String playersFile) {  //can't add \"throws MyCheckedException \n            return null;\n            // overridden\n        }\n    }\n\n    public void throwAsGotoAntiPattern() throws MyException {\n        try {\n            // bunch of code\n            throw new MyException();\n            // second bunch of code\n        } catch ( MyException e ) {\n            // third bunch of code\n        }\n    }\n\n    public int getPlayerScoreSwallowingExceptionAntiPattern(String playerFile) {\n        try {\n        // ...\n        } catch (Exception e) {} // <== catch and swallow\n            return 0;\n    }\n\n    public int getPlayerScoreSwallowingExceptionAntiPatternAlternative(String playerFile) {\n        try {\n            // ...\n        } catch (Exception e) {\n             e.printStackTrace();\n        }\n      return 0;\n    }\n\n    public int getPlayerScoreSwallowingExceptionAntiPatternAlternative2(String playerFile) throws PlayerScoreException {\n        try {\n            throw new IOException();\n        } catch (IOException e) {\n            throw new PlayerScoreException(e);\n        }\n    }\n\n    public int getPlayerScoreReturnInFinallyAntiPattern(String playerFile) {\n        int score = 0;\n        try {\n            throw new IOException();\n        } finally {\n            return score; // <== the IOException is dropped\n        }\n    }\n\n    private boolean isFilenameValid(String name) {\n        return false;\n    }\n}\n", "test_case": "package com.baeldung.exceptions.exceptionhandling;\n\nimport org.junit.Test;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.nio.file.NoSuchFileException;\n\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\n\npublic class ExceptionsUnitTest {\n\n    Exceptions exceptions = new Exceptions();\n\n    @Test\n    public void getPlayers() {\n        assertThatThrownBy(() -> exceptions.getPlayers())\n            .isInstanceOf(NoSuchFileException.class);\n    }\n\n    @Test\n    public void loadAllPlayers() {\n        assertThatThrownBy(() -> exceptions.loadAllPlayers(\"\"))\n            .isInstanceOf(IllegalStateException.class);\n    }\n\n    @Test\n    public void getPlayerScoreThrows() {\n        assertThatThrownBy(() -> exceptions.getPlayerScoreThrows(\"\"))\n            .isInstanceOf(FileNotFoundException.class);\n    }\n    \n    @Test\n    public void getPlayerScoreTryCatch() {\n        assertThatThrownBy(() -> exceptions.getPlayerScoreTryCatch(\"\"))\n            .isInstanceOf(IllegalArgumentException.class);\n    }\n    \n    @Test\n    public void getPlayerScoreFinally() {\n        assertThatThrownBy(() -> exceptions.getPlayerScoreFinally(\"\"))\n            .isInstanceOf(FileNotFoundException.class);\n    }\n    \n    @Test\n    public void loadAllPlayersThrowingChecked() {\n        assertThatThrownBy(() -> exceptions.loadAllPlayersThrowingChecked(\"\"))\n            .isInstanceOf(TimeoutException.class);\n    }\n    \n    @Test\n    public void loadAllPlayersThrowingUnchecked() {\n        assertThatThrownBy(() -> exceptions.loadAllPlayersThrowingUnchecked(\"\"))\n            .isInstanceOf(IllegalArgumentException.class);\n    }\n    \n    @Test\n    public void loadAllPlayersWrapping() {\n        assertThatThrownBy(() -> exceptions.loadAllPlayersWrapping(\"\"))\n            .isInstanceOf(IOException.class);\n    }\n    \n    @Test\n    public void loadAllPlayersRethrowing() {\n        assertThatThrownBy(() -> exceptions.loadAllPlayersRethrowing(\"\"))\n            .isInstanceOf(PlayerLoadException.class);\n    }\n    \n    @Test\n    public void loadAllPlayersThrowable() {\n        assertThatThrownBy(() -> exceptions.loadAllPlayersThrowable(\"\"))\n            .isInstanceOf(NullPointerException.class);\n    }\n    \n    @Test\n    public void getPlayerScoreSwallowingExceptionAntiPatternAlternative2() {\n        assertThatThrownBy(() -> exceptions.getPlayerScoreSwallowingExceptionAntiPatternAlternative2(\"\"))\n            .isInstanceOf(PlayerScoreException.class);\n    }\n}\n"}
{"code_source": "package com.baeldung.exceptions.stackoverflowerror;\n\npublic class AccountHolder {\n    private String firstName;\n    private String lastName;\n\n    AccountHolder jointAccountHolder = new AccountHolder();\n}\n", "test_case": "package com.baeldung.exceptions.stackoverflowerror;\n\nimport org.junit.Test;\n\npublic class AccountHolderManualTest {\n    @Test(expected = StackOverflowError.class)\n    public void whenInstanciatingAccountHolder_thenThrowsException() {\n        AccountHolder holder = new AccountHolder();\n    }\n}\n"}
{"code_source": "package com.baeldung.exceptions.stackoverflowerror;\n\npublic class InfiniteRecursionWithTerminationCondition {\n    public int calculateFactorial(final int number) {\n        return number == 1 ? 1 : number * calculateFactorial(number - 1);\n    }\n}\n", "test_case": "package com.baeldung.exceptions.stackoverflowerror;\n\nimport org.junit.Test;\n\nimport static junit.framework.TestCase.assertEquals;\n\npublic class InfiniteRecursionWithTerminationConditionManualTest {\n    @Test\n    public void givenPositiveIntNoOne_whenCalcFact_thenCorrectlyCalc() {\n        int numToCalcFactorial = 1;\n        InfiniteRecursionWithTerminationCondition irtc = new InfiniteRecursionWithTerminationCondition();\n\n        assertEquals(1, irtc.calculateFactorial(numToCalcFactorial));\n    }\n\n    @Test\n    public void givenPositiveIntGtOne_whenCalcFact_thenCorrectlyCalc() {\n        int numToCalcFactorial = 5;\n        InfiniteRecursionWithTerminationCondition irtc = new InfiniteRecursionWithTerminationCondition();\n\n        assertEquals(120, irtc.calculateFactorial(numToCalcFactorial));\n    }\n\n    @Test(expected = StackOverflowError.class)\n    public void givenNegativeInt_whenCalcFact_thenThrowsException() {\n        int numToCalcFactorial = -1;\n        InfiniteRecursionWithTerminationCondition irtc = new InfiniteRecursionWithTerminationCondition();\n\n        irtc.calculateFactorial(numToCalcFactorial);\n    }\n}\n"}
{"code_source": "package com.baeldung.exceptions.stackoverflowerror;\n\npublic class RecursionWithCorrectTerminationCondition {\n    public int calculateFactorial(final int number) {\n        return number <= 1 ? 1 : number * calculateFactorial(number - 1);\n    }\n}\n", "test_case": "package com.baeldung.exceptions.stackoverflowerror;\n\nimport org.junit.Test;\n\nimport static junit.framework.TestCase.assertEquals;\n\npublic class RecursionWithCorrectTerminationConditionManualTest {\n    @Test\n    public void givenNegativeInt_whenCalcFact_thenCorrectlyCalc() {\n        int numToCalcFactorial = -1;\n        RecursionWithCorrectTerminationCondition rctc = new RecursionWithCorrectTerminationCondition();\n\n        assertEquals(1, rctc.calculateFactorial(numToCalcFactorial));\n    }\n}\n"}
{"code_source": "package com.baeldung.exceptions.stackoverflowerror;\n\npublic class UnintendedInfiniteRecursion {\n    public int calculateFactorial(int number) {\n        return number * calculateFactorial(number - 1);\n    }\n}\n", "test_case": "package com.baeldung.exceptions.stackoverflowerror;\n\n\nimport org.junit.Test;\n\npublic class UnintendedInfiniteRecursionManualTest {\n    @Test(expected = StackOverflowError.class)\n    public void givenPositiveIntNoOne_whenCalFact_thenThrowsException() {\n        int numToCalcFactorial = 1;\n        UnintendedInfiniteRecursion uir = new UnintendedInfiniteRecursion();\n\n        uir.calculateFactorial(numToCalcFactorial);\n    }\n\n    @Test(expected = StackOverflowError.class)\n    public void givenPositiveIntGtOne_whenCalcFact_thenThrowsException() {\n        int numToCalcFactorial = 2;\n        UnintendedInfiniteRecursion uir = new UnintendedInfiniteRecursion();\n\n        uir.calculateFactorial(numToCalcFactorial);\n    }\n\n    @Test(expected = StackOverflowError.class)\n    public void givenNegativeInt_whenCalcFact_thenThrowsException() {\n        int numToCalcFactorial = -1;\n        UnintendedInfiniteRecursion uir = new UnintendedInfiniteRecursion();\n\n        uir.calculateFactorial(numToCalcFactorial);\n    }\n}\n"}
{"code_source": "package com.baeldung.exceptions.throwvsthrows;\n\nimport java.sql.SQLException;\n\npublic class SimpleService {\n\n    private PersonRepository personRepository = new PersonRepository();\n\n    public void wrappingException() {\n        try {\n            personRepository.findAll();\n        } catch (SQLException e) {\n            throw new DataAccessException(\"SQL Exception\", e);\n        }\n    }\n\n    public void runtimeNullPointerException() {\n        String a = null;\n        a.length();\n    }\n\n}\n", "test_case": "package com.baeldung.exceptions.throwvsthrows;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SimpleServiceUnitTest {\n\n    SimpleService simpleService = new SimpleService();\n\n    @Test\n    void whenSQLExceptionIsThrown_thenShouldBeRethrownWithWrappedException() {\n        assertThrows(DataAccessException.class,\n                () -> simpleService.wrappingException());\n    }\n\n    @Test\n    void whenCalled_thenNullPointerExceptionIsThrown() {\n        assertThrows(NullPointerException.class,\n                () -> simpleService.runtimeNullPointerException());\n    }\n}"}
{"code_source": "package com.baeldung.exceptions;\n\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.UnknownHostException;\n\npublic class UnknownHostExceptionHandling {\n\n    public static int getResponseCode(String hostname) throws IOException {\n        URL url = new URL(hostname.trim());\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        int resCode = -1;\n        try {\n            resCode = con.getResponseCode();\n        } catch (UnknownHostException e){\n            con.disconnect();\n        }\n        return resCode;\n    }\n    \n    public static int getResponseCodeUnhandled(String hostname) throws IOException {\n        URL url = new URL(hostname.trim());\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        int resCode = con.getResponseCode();\n        return resCode;\n    }\n}\n", "test_case": "package com.baeldung.exceptions;\n\nimport java.io.IOException;\nimport java.net.UnknownHostException;\n\nimport org.junit.Test;\n\npublic class UnknownHostExceptionHandlingUnitTest {\n\n    @Test(expected = UnknownHostException.class)\n    public void givenUnknownHost_whenResolve_thenUnknownHostException() throws IOException {\n        UnknownHostExceptionHandling.getResponseCodeUnhandled(\"http://locaihost\");\n    }\n    \n}\n"}
{"code_source": "package com.baeldung.globalexceptionhandler;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class GlobalExceptionHandler {\n\n    public static void main(String[] args) {\n\n        Handler globalExceptionHandler = new Handler();\n        Thread.setDefaultUncaughtExceptionHandler(globalExceptionHandler);\n        new GlobalExceptionHandler().performArithmeticOperation(10, 0);\n    }\n\n    public int performArithmeticOperation(int num1, int num2) {\n        return num1/num2;\n    }\n\n}\n\nclass Handler implements Thread.UncaughtExceptionHandler {\n\n    private static Logger LOGGER = LoggerFactory.getLogger(Handler.class);\n\n    public void uncaughtException(Thread t, Throwable e) {\n        LOGGER.info(\"Unhandled exception caught!\");\n    }\n}\n", "test_case": "package com.baeldung.globalexceptionhandler;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.Captor;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\nimport org.slf4j.LoggerFactory;\nimport ch.qos.logback.classic.Level;\nimport ch.qos.logback.classic.Logger;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport ch.qos.logback.classic.spi.LoggingEvent;\nimport ch.qos.logback.core.Appender;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.verify;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class GlobalExceptionHandlerUnitTest {\n\n    @Mock\n    private Appender<ILoggingEvent> mockAppender;\n\n    @Captor\n    private ArgumentCaptor<LoggingEvent> captorLoggingEvent;\n\n    @Before\n    public void setup() {\n        final Logger logger = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\n        logger.addAppender(mockAppender);\n\n        Handler globalExceptionHandler = new Handler();\n        Thread.setDefaultUncaughtExceptionHandler(globalExceptionHandler);\n    }\n\n    @After\n    public void teardown() {\n        final Logger logger = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\n        logger.detachAppender(mockAppender);\n    }\n\n    @Test\n    public void whenArithmeticException_thenUseUncaughtExceptionHandler() throws InterruptedException {\n\n        Thread globalExceptionHandlerThread = new Thread() {\n            public void run() {\n                GlobalExceptionHandler globalExceptionHandlerObj = new GlobalExceptionHandler();\n                globalExceptionHandlerObj.performArithmeticOperation(99, 0);\n            }\n        };\n\n        globalExceptionHandlerThread.start();\n        globalExceptionHandlerThread.join();\n\n        verify(mockAppender).doAppend(captorLoggingEvent.capture());\n        LoggingEvent loggingEvent = captorLoggingEvent.getValue();\n\n        assertThat(loggingEvent.getLevel()).isEqualTo(Level.INFO);\n        assertThat(loggingEvent.getFormattedMessage()).isEqualTo(\"Unhandled exception caught!\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.rootcausefinder;\n\nimport java.time.LocalDate;\nimport java.time.Period;\nimport java.time.format.DateTimeParseException;\nimport java.util.Objects;\n\n/**\n * Utility class to find root cause exceptions.\n */\npublic class RootCauseFinder {\n\n    public static Throwable findCauseUsingPlainJava(Throwable throwable) {\n        Objects.requireNonNull(throwable);\n        Throwable rootCause = throwable;\n        while (rootCause.getCause() != null) {\n            rootCause = rootCause.getCause();\n        }\n        return rootCause;\n    }\n\n    /**\n     *  Calculates the age of a person from a given date.\n     */\n    static class AgeCalculator {\n\n        private AgeCalculator() {\n        }\n\n        public static int calculateAge(String birthDate) throws CalculationException {\n            if (birthDate == null || birthDate.isEmpty()) {\n                throw new IllegalArgumentException();\n            }\n\n            try {\n                return Period\n                  .between(parseDate(birthDate), LocalDate.now())\n                  .getYears();\n            } catch (DateParseException ex) {\n                throw new CalculationException(ex);\n            }\n        }\n\n        private static LocalDate parseDate(String birthDateAsString) throws DateParseException {\n\n            LocalDate birthDate;\n            try {\n                birthDate = LocalDate.parse(birthDateAsString);\n            } catch (DateTimeParseException ex) {\n                throw new InvalidFormatException(birthDateAsString, ex);\n            }\n\n            if (birthDate.isAfter(LocalDate.now())) {\n                throw new DateOutOfRangeException(birthDateAsString);\n            }\n\n            return birthDate;\n        }\n\n    }\n\n    static class CalculationException extends Exception {\n\n        CalculationException(DateParseException ex) {\n            super(ex);\n        }\n    }\n\n    static class DateParseException extends Exception {\n\n        DateParseException(String input) {\n            super(input);\n        }\n\n        DateParseException(String input, Throwable thr) {\n            super(input, thr);\n        }\n    }\n\n    static class InvalidFormatException extends DateParseException {\n\n        InvalidFormatException(String input, Throwable thr) {\n            super(\"Invalid date format: \" + input, thr);\n        }\n    }\n\n    static class DateOutOfRangeException extends DateParseException {\n\n        DateOutOfRangeException(String date) {\n            super(\"Date out of range: \" + date);\n        }\n\n    }\n\n}\n", "test_case": "package com.baeldung.rootcausefinder;\n\nimport com.baeldung.rootcausefinder.RootCauseFinder.CalculationException;\nimport com.baeldung.rootcausefinder.RootCauseFinder.DateOutOfRangeException;\nimport com.google.common.base.Throwables;\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDate;\nimport java.time.format.DateTimeParseException;\nimport java.time.temporal.ChronoUnit;\n\nimport static com.baeldung.rootcausefinder.RootCauseFinder.AgeCalculator;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Tests the {@link RootCauseFinder}.\n */\npublic class RootCauseFinderUnitTest {\n\n    @Test\n    public void givenBirthDate_whenCalculatingAge_thenAgeReturned() {\n        try {\n            int age = AgeCalculator.calculateAge(\"1990-01-01\");\n            Assertions.assertEquals(1990, LocalDate\n              .now()\n              .minus(age, ChronoUnit.YEARS)\n              .getYear());\n        } catch (CalculationException e) {\n            Assertions.fail(e.getMessage());\n        }\n    }\n\n    @Test\n    public void givenWrongFormatDate_whenFindingRootCauseUsingJava_thenRootCauseFound() {\n        try {\n            AgeCalculator.calculateAge(\"010102\");\n        } catch (CalculationException ex) {\n            assertTrue(RootCauseFinder.findCauseUsingPlainJava(ex) instanceof DateTimeParseException);\n        }\n    }\n\n    @Test\n    public void givenOutOfRangeDate_whenFindingRootCauseUsingJava_thenRootCauseFound() {\n        try {\n            AgeCalculator.calculateAge(\"2020-04-04\");\n        } catch (CalculationException ex) {\n            assertTrue(RootCauseFinder.findCauseUsingPlainJava(ex) instanceof DateOutOfRangeException);\n        }\n    }\n\n    @Test\n    public void givenNullDate_whenFindingRootCauseUsingJava_thenRootCauseFound() {\n        try {\n            AgeCalculator.calculateAge(null);\n        } catch (Exception ex) {\n            assertTrue(RootCauseFinder.findCauseUsingPlainJava(ex) instanceof IllegalArgumentException);\n        }\n    }\n\n    @Test\n    public void givenWrongFormatDate_whenFindingRootCauseUsingApacheCommons_thenRootCauseFound() {\n        try {\n            AgeCalculator.calculateAge(\"010102\");\n        } catch (CalculationException ex) {\n            assertTrue(ExceptionUtils.getRootCause(ex) instanceof DateTimeParseException);\n        }\n    }\n\n    @Test\n    public void givenOutOfRangeDate_whenFindingRootCauseUsingApacheCommons_thenRootCauseFound() {\n        try {\n            AgeCalculator.calculateAge(\"2020-04-04\");\n        } catch (CalculationException ex) {\n            assertTrue(ExceptionUtils.getRootCause(ex) instanceof DateOutOfRangeException);\n        }\n    }\n\n    @Test\n    public void givenWrongFormatDate_whenFindingRootCauseUsingGuava_thenRootCauseFound() {\n        try {\n            AgeCalculator.calculateAge(\"010102\");\n        } catch (CalculationException ex) {\n            assertTrue(Throwables.getRootCause(ex) instanceof DateTimeParseException);\n        }\n    }\n\n    @Test\n    public void givenOutOfRangeDate_whenFindingRootCauseUsingGuava_thenRootCauseFound() {\n        try {\n            AgeCalculator.calculateAge(\"2020-04-04\");\n        } catch (CalculationException ex) {\n            assertTrue(Throwables.getRootCause(ex) instanceof DateOutOfRangeException);\n        }\n    }\n\n}\n"}
{"code_source": "package com.baeldung.exception.indexoutofbounds;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CopyListUsingAddAllMethodDemo {\n    static List<Integer> copyList(List<Integer> source) {\n        List<Integer> destination =  new ArrayList<>();\n\n        destination.addAll(source);\n\n        return destination;\n    }\n}\n", "test_case": "package com.baeldung.exception.indexoutofbounds;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass CopyListUsingAddAllMethodDemoUnitTest {\n\n    @Test\n    void whenPassValidArrayList_thenCopyListUsingAddAllMethod() {\n        List<Integer> source = Arrays.asList(11, 22, 33);\n\n        assertEquals(source, CopyListUsingAddAllMethodDemo.copyList(source));\n    }\n}"}
{"code_source": "package com.baeldung.exception.indexoutofbounds;\n\nimport java.util.Collections;\nimport java.util.List;\n\npublic class CopyListUsingCollectionsCopyMethodDemo {\n    static void copyList(List<Integer> source, List<Integer> destination) {\n        Collections.copy(destination, source);\n    }\n}\n", "test_case": "package com.baeldung.exception.indexoutofbounds;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CopyListUsingCollectionsCopyMethodDemoUnitTest {\n    @Test\n    void whenCopyListUsingCollectionsCopy_thenOverrideAllDestinationListValues() {\n        List<Integer> source = Arrays.asList(11, 22, 33);\n        List<Integer> destination = Arrays.asList(1, 2, 3);\n\n        CopyListUsingCollectionsCopyMethodDemo.copyList(source, destination);\n\n        assertEquals(source, destination);\n    }\n\n    @Test\n    void whenCopyListUsingCollectionsCopy_thenOverrideInitialDestinationValuesAndOthersShouldBeUnchanged(){\n        List<Integer> source = Arrays.asList(11, 22, 33);\n        List<Integer> destination = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> expectedList = Arrays.asList(11, 22, 33, 4, 5);\n\n        CopyListUsingCollectionsCopyMethodDemo.copyList(source, destination);\n\n        assertEquals(expectedList, destination);\n    }\n}\n"}
{"code_source": "package com.baeldung.exception.indexoutofbounds;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CopyListUsingConstructorDemo {\n    static List<Integer> copyList(List<Integer> source) {\n        return new ArrayList<>(source);\n    }\n}\n", "test_case": "package com.baeldung.exception.indexoutofbounds;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass CopyListUsingConstructorDemoUnitTest {\n\n    @Test\n    void whenCopyListUsingConstructor_thenMakeACopyOfList() {\n        List<Integer> source = Arrays.asList(11, 22, 33);\n\n        assertEquals(source, CopyListUsingConstructorDemo.copyList(source));\n    }\n}\n"}
{"code_source": "package com.baeldung.exception.indexoutofbounds;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class CopyListUsingJava8StreamDemo {\n    static List<Integer> copyList(List<Integer> source) {\n        return source\n                .stream()\n                .collect(Collectors.toList());\n    }\n}\n", "test_case": "package com.baeldung.exception.indexoutofbounds;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass CopyListUsingJava8StreamDemoUnitTest {\n\n    @Test\n    void whenCopyListUsingStream_thenMakeACopyOfArrayList() {\n        List<Integer> source = Arrays.asList(11, 22, 33);\n\n        assertEquals(source, CopyListUsingJava8StreamDemo.copyList(source));\n    }\n}\n"}
{"code_source": "package com.baeldung.exception.indexoutofbounds;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class IndexOutOfBoundsExceptionDemo {\n    static List<Integer> copyList(List<Integer> source) {\n        List<Integer> destination = new ArrayList<>(source.size());\n        Collections.copy(destination, source);\n        return destination;\n    }\n}\n", "test_case": "package com.baeldung.exception.indexoutofbounds;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\n\nclass IndexOutOfBoundsExceptionDemoUnitTest {\n\n    @Test\n    void givenDestinationArrayListSizeIsZero_whenCopySourceArrayListToDestination_thenShouldThrowIndexOutOfBoundsException() {\n        List<Integer> source = Arrays.asList(1, 2, 3, 4, 5);\n\n        assertThrows(IndexOutOfBoundsException.class, () -> IndexOutOfBoundsExceptionDemo.copyList(source));\n    }\n\n    @Test\n    void givenSourceAndDestinationListSizeIsEqual_whenCopySourceArrayListToDestination_thenShouldNotThrowIndexOutOfBoundsException() {\n        List<Integer> source = Collections.emptyList();\n\n        assertEquals(source, IndexOutOfBoundsExceptionDemo.copyList(source));\n    }\n}\n"}
{"code_source": "package com.baeldung.exceptions.illegalaccesserror;\n\npublic class IllegalAccessErrorExample {\n\n    interface Baeldung {\n        public default void foobar() {\n            System.out.println(\"This is a default method.\");\n        }\n    }\n\n    class Super {\n        private void foobar() {\n            System.out.println(\"SuperClass method foobar\");\n        }\n    }\n\n    class MySubClass extends Super implements Baeldung {\n\n    }\n}", "test_case": "package com.baeldung.exceptions.illegalaccesserror;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class IllegalAccessErrorExampleUnitTest {\n\n    @Test()\n    public void givenInterfaceDefaultMethOverriddenPrivateAccess_whenInvoked_thenIllegalAccessError() {\n        Assertions.assertThrows(IllegalAccessError.class, () -> {\n            new IllegalAccessErrorExample().new MySubClass().foobar();\n        });\n    }\n\n    @Test()\n    public void givenClass1Class2_whenSameClassDefintion_thenNoIllegalAccessError() {\n        Assertions.assertDoesNotThrow(() -> {\n            new Class2().foo();\n        });\n    }\n}\n"}
{"code_source": "package com.baeldung.exceptions.illegalaccesserror;\n\npublic class IllegalAccessErrorSolved {\n\n    interface BaeldungSolved {\n        public default void foobar() {\n            System.out.println(\"This is a default method.\");\n        }\n    }\n\n    class SuperSolved {\n        public void foobar() {\n            System.out.println(\"SuperClass method foobar\");\n        }\n    }\n\n    class MySubClassSolved extends SuperSolved implements BaeldungSolved {\n\n    }\n}", "test_case": "package com.baeldung.exceptions.illegalaccesserror;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class IllegalAccessErrorSolvedUnitTest {\n\n    @Test()\n    public void givenInterfaceDefaultMethOverriddenNonPrivateAccess_whenInvoked_thenNoIllegalAccessError() {\n        Assertions.assertDoesNotThrow(() -> {\n            new IllegalAccessErrorSolved().new MySubClassSolved().foobar();\n        });\n    }\n}\n"}
{"code_source": "package com.baeldung.exceptions.localization;\n\nimport java.util.Locale;\n\npublic class LocalizedException extends Exception {\n    \n    private static final long serialVersionUID = 1L;\n\n    private final String messageKey;\n    private final Locale locale;\n\n    public LocalizedException(String messageKey) {\n        this(messageKey, Locale.getDefault());\n    }\n\n    public LocalizedException(String messageKey, Locale locale) {\n        this.messageKey = messageKey;\n        this.locale = locale;\n    }\n\n    /**\n     * @return a localized message based on the messageKey provided at instantiation.\n     */\n    public String getMessage() {\n\n        /*\n         * This is a deliberate role reversal of the default implementation of getLocalizedMessage.\n         * some logging frameworks like Log4J 1 & 2 and Logback will use getMessage instead of\n         * getLocalizedMessage when logging Throwables. If we want to use these frameworks in client\n         * applications to log localized messages, then we'll need to override getMessage in a\n         * similar fashion to return the appropriate content.  Or, you can call getLocalizedMessage\n         * on your own to create the log content.\n         */\n        return getLocalizedMessage();\n    }\n\n    /**\n     * @return a localized message based on the messageKey provided at instantiation.\n     */\n    public String getLocalizedMessage() {\n\n        /*\n         * java.util.logging uses getLocalizedMessage when logging Throwables.\n         */\n        return Messages.getMessageForLocale(messageKey, locale);\n    }\n}\n", "test_case": "package com.baeldung.exceptions.localization;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.util.Locale;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class LocalizedExceptionUnitTest {\n\n    private Locale originalDefaultLocale;\n\n    @Before\n    public void saveOriginalDefaultLocale() {\n        originalDefaultLocale = Locale.getDefault();\n    }\n\n    @After\n    public void restoreOriginalDefaultLocale() {\n        Locale.setDefault(originalDefaultLocale);\n    }\n\n    @Test\n    public void givenUsEnglishDefaultLocale_whenLocalizingMessage_thenMessageComesFromDefaultMessages() {\n        Locale.setDefault(Locale.US);\n\n        LocalizedException localizedException = new LocalizedException(\"message.exception\");\n        String usEnglishLocalizedExceptionMessage = localizedException.getLocalizedMessage();\n\n        assertThat(usEnglishLocalizedExceptionMessage).isEqualTo(\"I am an exception.\");\n    }\n\n    @Test\n    public void givenFranceFrenchDefaultLocale_whenLocalizingMessage_thenMessageComesFromFrenchTranslationMessages() {\n        Locale.setDefault(Locale.FRANCE);\n\n        LocalizedException localizedException = new LocalizedException(\"message.exception\");\n        String franceFrenchLocalizedExceptionMessage = localizedException.getLocalizedMessage();\n\n        assertThat(franceFrenchLocalizedExceptionMessage).isEqualTo(\"Je suis une exception.\");\n    }\n\n    @Test\n    public void givenUsEnglishProvidedLocale_whenLocalizingMessage_thenMessageComesFromDefaultMessage() {\n        LocalizedException localizedException = new LocalizedException(\"message.exception\", Locale.US);\n        String usEnglishLocalizedExceptionMessage = localizedException.getLocalizedMessage();\n\n        assertThat(usEnglishLocalizedExceptionMessage).isEqualTo(\"I am an exception.\");\n    }\n\n    @Test\n    public void givenFranceFrenchProvidedLocale_whenLocalizingMessage_thenMessageComesFromFrenchTranslationMessages() {\n        LocalizedException localizedException = new LocalizedException(\"message.exception\", Locale.FRANCE);\n        String franceFrenchLocalizedExceptionMessage = localizedException.getLocalizedMessage();\n\n        assertThat(franceFrenchLocalizedExceptionMessage).isEqualTo(\"Je suis une exception.\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.exceptions.localization;\n\nimport java.util.Locale;\nimport java.util.ResourceBundle;\n\npublic class Messages {\n\n    /**\n     * Retrieves the value for the messageKey from the locale-specific messages.properties, or from\n     * the base messages.properties for unsupported locales.\n     *\n     * @param messageKey The key for the message in the messages.properties ResourceBundle.\n     * @param locale The locale to search the message key.\n     * @return The value defined for the messageKey in the provided locale.\n     */\n    public static String getMessageForLocale(String messageKey, Locale locale) {\n\n        /*\n         * For more complex implementations, you will want a var-args parameter for MessageFormat\n         * substitutions. Then we can read the value from the bundle and pass the value with the\n         * substitutions to MessageFormat to create the final message value.\n         */\n        return ResourceBundle.getBundle(\"messages\", locale)\n            .getString(messageKey);\n    }\n\n}\n", "test_case": "package com.baeldung.exceptions.localization;\n\nimport org.junit.Test;\n\nimport java.util.Locale;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class MessagesUnitTest {\n\n    @Test\n    public void givenUsEnglishLocale_whenRetrievingMessage_thenEnglishTranslationIsReturned() {\n        String translatedMessage = Messages.getMessageForLocale(\"message.exception\", Locale.US);\n\n        assertThat(translatedMessage).isEqualTo(\"I am an exception.\");\n    }\n\n    @Test\n    public void givenFranceFrenchLocale_whenRetrievingMessage_thenFrenchTranslationIsReturned() {\n        String translatedMessage = Messages.getMessageForLocale(\"message.exception\", Locale.FRANCE);\n\n        assertThat(translatedMessage).isEqualTo(\"Je suis une exception.\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.exceptions.nosuchfielderror;\n\npublic class FieldErrorExample {\n\n    public static void main(String... args) {\n\n        fetchAndPrint();\n    }\n\n    public static String getDependentMessage() {\n\n        return Dependency.message;\n    }\n\n    public static void fetchAndPrint() {\n\n        System.out.println(getDependentMessage());\n    }\n\n}", "test_case": "package com.baeldung.exceptions.nosuchfielderror;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class FieldErrorExampleUnitTest {\n    \n    @Test\n    public void whenDependentMessage_returnMessage() {\n        \n        String dependentMessage = FieldErrorExample.getDependentMessage();\n        assertTrue(\"Hello Baeldung!!\".equals(dependentMessage));\n    }\n    \n}"}
{"code_source": "package com.baeldung.nullmethodparameter;\n\npublic class NullParameterExample {\n    public void processSomethingNotNull(Object myParameter) {\n        if (myParameter == null) {\n            throw new IllegalArgumentException(\"Parameter 'myParameter' cannot be null\");\n        }\n        //Do something with the parameter\n    }\n    \n    public void processSomethingElseNotNull(Object myParameter) {\n        if (myParameter == null) {\n            throw new NullPointerException(\"Parameter 'myParameter' cannot be null\");\n        }\n        //Do something with the parameter\n    }\n}\n", "test_case": "package com.baeldung.nullmethodparameter;\n\nimport org.junit.Test;\n\npublic class NullParameterExampleUnitTest {\n    @Test(expected = IllegalArgumentException.class)\n    public void givenNullParameter_whenProcessSomethingNotNull_thenIllegalArgumentException() {\n        NullParameterExample example = new NullParameterExample();\n        example.processSomethingNotNull(null);\n    }\n    \n    @Test(expected = NullPointerException.class)\n    public void givenNullParameter_whenProcessSomethingElseNotNull_thenNullPointerException() {\n        NullParameterExample example = new NullParameterExample();\n        example.processSomethingElseNotNull(null);\n    }\n}\n"}
{"code_source": "package com.baeldung.exception.arrayindexoutofbounds;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class ArrayIndexOutOfBoundsExceptionDemo {\n\n    public static void main(String[] args) {\n        int[] numbers = new int[] { 1, 2, 3, 4, 5 };\n        \n        getArrayElementAtIndex(numbers, 5);\n        getListElementAtIndex(5);\n        addArrayElementsUsingLoop(numbers);\n    }\n\n    public static void addArrayElementsUsingLoop(int[] numbers) {\n        int sum = 0;\n        for (int i = 0; i <= numbers.length; i++) {\n            sum += numbers[i];\n        }\n    }\n\n    public static int getListElementAtIndex(int index) {\n        List<Integer> numbersList = Arrays.asList(1, 2, 3, 4, 5);\n        return numbersList.get(index);\n    }\n\n    public static int getArrayElementAtIndex(int[] numbers, int index) {\n        return numbers[index];\n    }\n}\n", "test_case": "package com.baeldung.exception.arrayindexoutofbounds;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\n\npublic class ArrayIndexOutOfBoundsExceptionDemoUnitTest {\n\n    private static int[] numbers;\n\n    @BeforeAll\n    public static void setUp() {\n        numbers = new int[] { 1, 2, 3, 4, 5 };\n    }\n\n    @Test\n    void givenAnArrayOfSizeFive_whenAccessedElementBeyondRange_thenShouldThrowArrayIndexOutOfBoundsException() {\n        assertThrows(ArrayIndexOutOfBoundsException.class,\n          () -> ArrayIndexOutOfBoundsExceptionDemo.addArrayElementsUsingLoop(numbers));\n    }\n\n    @Test\n    void givenAnArrayOfSizeFive_whenAccessedAnElementAtIndexEqualToSize_thenShouldThrowArrayIndexOutOfBoundsException() {\n        assertThrows(ArrayIndexOutOfBoundsException.class,\n          () -> ArrayIndexOutOfBoundsExceptionDemo.getArrayElementAtIndex(numbers, 5));\n    }\n\n    @Test\n    void givenAListReturnedByArraysAsListMethod_whenAccessedAnElementAtIndexEqualToSize_thenShouldThrowArrayIndexOutOfBoundsException() {\n        assertThrows(ArrayIndexOutOfBoundsException.class,\n          () -> ArrayIndexOutOfBoundsExceptionDemo.getListElementAtIndex(5));\n    }\n}\n"}
{"code_source": "package com.baeldung.exception.exceptions_vs_errors;\n\npublic class ErrorExample {\n\n    public static void main(String[] args) {\n        throw new AssertionError();\n    }\n\n}\n", "test_case": "package com.baeldung.exception.exceptions_vs_errors;\n\nimport org.junit.Test;\nimport org.junit.jupiter.api.Assertions;\n\npublic class ErrorExampleUnitTest {\n\n    @Test\n    public void whenMainMethodIsRun_thenStackOverflowError() {\n        Assertions.assertThrows(AssertionError.class,\n          () -> ErrorExample.main(null));\n    }\n}\n"}
{"code_source": "package com.baeldung.exception.exceptions_vs_errors;\n\npublic class RuntimeExceptionExample {\n    public static void main(String[] args) {\n        int[] arr = new int[20];\n\n        arr[20] = 20;\n\n        System.out.println(arr[20]);\n    }\n}\n", "test_case": "package com.baeldung.exception.exceptions_vs_errors;\n\nimport org.junit.Test;\nimport org.junit.jupiter.api.Assertions;\n\n// Unit test for the RuntimeExceptionExample class.\npublic class RuntimeExceptionExampleUnitTest {\n    @Test\n    public void whenMainMethodIsRun_thenArrayIndexOutOfBoundsExceptionIsThrown() {\n        Assertions.assertThrows(ArrayIndexOutOfBoundsException.class, \n            () -> RuntimeExceptionExample.main(null));\n    }\n}\n"}
{"code_source": "package com.baeldung.exception.missingreturnstatement;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class MissingReturnStatement {\n    public static void main(String[] args) {\n        int a = -12;\n        int result = pow(a);\n        System.out.println(result);\n        Map<String, Integer> dictionary = createDictionary();\n        dictionary.forEach((s, integer) -> System.out.println(s + \" \" + integer));\n    }\n\n    public static int pow(int number) {\n        int pow = number * number;\n        return pow;\n    }\n\n    public static String checkNumber(int number) {\n        if (number == 0) {\n            return \"It's equals to zero\";\n        }\n\n        for (int i = 0; i < number; i++) {\n            if (i > 100) {\n                return \"It's a big number\";\n            }\n        }\n        return \"It's a negative number\";\n    }\n\n    public static Map<String, Integer> createDictionary() {\n        List<String> words = Arrays.asList(\"Hello\", \"World\");\n        return words.stream()\n            .collect(Collectors.toMap(s -> s, s -> 1));\n    }\n\n}\n", "test_case": "package com.baeldung.exception.missingreturnstatement;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.Map;\n\nimport org.junit.Test;\n\npublic class MissingReturnStatementUnitTest {\n\n    @Test\n    public void givenANumber_thenReturnItsPow() {\n        int number = 10;\n        int pow = MissingReturnStatement.pow(number);\n        assertEquals(100, pow);\n    }\n\n    @Test\n    public void givenABigNumber_thenReturnItsType() {\n        int number = 200;\n        String type = MissingReturnStatement.checkNumber(number);\n        assertEquals(\"It's a big number\", type);\n    }\n\n    @Test\n    public void givenANegativeNumber_thenReturnItsType() {\n        int number = -10;\n        String type = MissingReturnStatement.checkNumber(number);\n        assertEquals(\"It's a negative number\", type);\n    }\n\n    @Test\n    public void getStringDictionary_thenPrintValues() {\n        Map<String, Integer> dictionary = MissingReturnStatement.createDictionary();\n        assertEquals(2, dictionary.size());\n        dictionary.forEach((s, integer) -> System.out.println(s + \" - \" + integer));\n    }\n}"}
{"code_source": "package com.baeldung.exception.noenumconst;\n\npublic class PriorityUtils {\n\n    public static Priority getByName(String name) {\n        return Priority.valueOf(name);\n    }\n\n    public static Priority getByUpperCaseName(String name) {\n        if (name == null || name.isEmpty()) {\n            return null;\n        }\n\n        return Priority.valueOf(name.toUpperCase());\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getByName(\"Low\"));\n    }\n\n}\n", "test_case": "package com.baeldung.exception.noenumconst;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport org.junit.jupiter.api.Test;\n\nclass PriorityUtilsUnitTest {\n\n    @Test\n    void givenCustomName_whenUsingGetByName_thenThrowIllegalArgumentException() {\n        assertThrows(IllegalArgumentException.class, () -> PriorityUtils.getByName(\"Low\"));\n    }\n\n    @Test\n    void givenCustomName_whenUsingGetByUpperCaseName_thenReturnEnumConstant() {\n        assertEquals(Priority.HIGH, PriorityUtils.getByUpperCaseName(\"High\"));\n    }\n\n    @Test\n    void givenInvalidCustomName_whenUsingGetByUpperCaseName_thenThrowIllegalArgumentException() {\n        assertThrows(IllegalArgumentException.class, () -> PriorityUtils.getByUpperCaseName(\"invalid\"));\n    }\n\n    @Test\n    void givenEmptyName_whenUsingGetByUpperCaseName_thenReturnNull() {\n        assertNull(PriorityUtils.getByUpperCaseName(\"\"));\n    }\n\n    @Test\n    void givenNull_whenUsingGetByUpperCaseName_thenReturnNull() {\n        assertNull(PriorityUtils.getByUpperCaseName(null));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.exception.sneakythrows;\n\nimport lombok.SneakyThrows;\n\nimport java.io.IOException;\n\npublic class SneakyThrowsExamples {\n\n    public static <E extends Throwable> void sneakyThrow(Throwable e) throws E {\n        throw (E) e;\n    }\n\n    public static void throwSneakyIOException() {\n        sneakyThrow(new IOException(\"sneaky\"));\n    }\n\n    @SneakyThrows\n    public static void throwSneakyIOExceptionUsingLombok() {\n        throw new IOException(\"lombok sneaky\");\n    }\n\n}\n", "test_case": "package com.baeldung.exception.sneakythrows;\n\nimport org.junit.Test;\n\nimport java.io.IOException;\n\nimport static com.baeldung.exception.sneakythrows.SneakyThrowsExamples.throwSneakyIOException;\nimport static com.baeldung.exception.sneakythrows.SneakyThrowsExamples.throwSneakyIOExceptionUsingLombok;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\n\npublic class SneakyThrowsExamplesUnitTest {\n\n    @Test\n    public void throwSneakyIOException_IOExceptionShouldBeThrown() {\n        assertThatThrownBy(() -> throwSneakyIOException())\n            .isInstanceOf(IOException.class)\n            .hasMessage(\"sneaky\")\n            .hasStackTraceContaining(\"SneakyThrowsExamples.throwSneakyIOException\");\n    }\n\n    @Test\n    public void throwSneakyIOExceptionUsingLombok_IOExceptionShouldBeThrown() {\n        assertThatThrownBy(() -> throwSneakyIOExceptionUsingLombok())\n            .isInstanceOf(IOException.class)\n            .hasMessage(\"lombok sneaky\")\n            .hasStackTraceContaining(\"SneakyThrowsExamples.throwSneakyIOExceptionUsingLombok\");\n    }\n}\n"}
{"code_source": "package com.baeldung.staticmethods;\n\npublic final class CustomStringUtils {\n\n    private CustomStringUtils() {}\n\n    public static boolean isEmpty(CharSequence cs) { return cs == null || cs.length() == 0; }\n\n}\n", "test_case": "package com.baeldung.staticmethods;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass CustomStringUtilsUnitTest {\n\n    @Test\n    void givenNonEmptyString_whenIsEmptyMethodIsCalled_thenFalseIsReturned() {\n        boolean empty = CustomStringUtils.isEmpty(\"baeldung\");\n        assertThat(empty).isFalse();\n    }\n\n    @Test\n    void givenEmptyString_whenIsEmptyMethodIsCalled_thenTrueIsReturned() {\n        boolean empty = CustomStringUtils.isEmpty(\"\");\n        assertThat(empty).isTrue();\n    }\n\n}\n"}
{"code_source": "package com.baeldung.staticmethods;\n\npublic class StaticCounter {\n\n    private static int counter = 0;\n\n    public static int incrementCounter() {\n        return ++counter;\n    }\n\n    public static int getCounterValue() {\n        return counter;\n    }\n\n}\n", "test_case": "package com.baeldung.staticmethods;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass StaticCounterUnitTest {\n\n    @Test\n    void givenStaticCounter_whenIncrementCounterIsCalled_thenValueIsIncresedByOne() {\n        int oldValue = StaticCounter.getCounterValue();\n        int newValue = StaticCounter.incrementCounter();\n        assertThat(newValue).isEqualTo(oldValue + 1);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.trifunction;\n\npublic class TriFunctionExample {\n\n    public static TriFunction<Integer, Integer, Integer, Integer> multiplyThenAdd = (x, y, z) -> x * y + z;\n\n    public static TriFunction<Integer, Integer, Integer, Integer> multiplyThenAddThenDivideByTen = multiplyThenAdd.andThen(x -> x / 10);\n\n    public static TriFunction<Integer, String, Boolean, String> convertIntegerOrReturnStringDependingOnCondition = (myInt, myStr, myBool) -> {\n        if (Boolean.TRUE.equals(myBool)) {\n            return myInt != null ? myInt.toString() : \"\";\n        } else {\n            return myStr;\n        }\n    };\n\n}\n", "test_case": "package com.baeldung.trifunction;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass TriFunctionExampleUnitTest {\n\n    private static final String BAELDUNG = \"baeldung\";\n\n    @Test\n    void whenMultiplyThenAdd_ThenReturnsCorrectResult() {\n        assertEquals(25, TriFunctionExample.multiplyThenAdd.apply(2, 10, 5));\n    }\n\n    @Test\n    void whenMultiplyThenAddThenDivideByTen_ThenReturnsCorrectResult() {\n        assertEquals(2, TriFunctionExample.multiplyThenAddThenDivideByTen.apply(2, 10, 5));\n    }\n\n    @Test\n    void givenTrueBooleanAndNullInteger_WhenConvertIntegerOrReturnStringDependingOnCondition_ThenEmptyString() {\n        assertEquals(\"\", TriFunctionExample.convertIntegerOrReturnStringDependingOnCondition.apply(null, BAELDUNG, true));\n    }\n\n    @Test\n    void givenTrueBooleanAndNonNullInteger_WhenConvertIntegerOrReturnStringDependingOnCondition_ThenConvertIntegerToString() {\n        assertEquals(\"88\", TriFunctionExample.convertIntegerOrReturnStringDependingOnCondition.apply(88, BAELDUNG, true));\n    }\n\n    @Test\n    void givenFalseBoolean_WhenConvertIntegerOrReturnStringDependingOnCondition_ThenReturnTheString() {\n        assertEquals(BAELDUNG, TriFunctionExample.convertIntegerOrReturnStringDependingOnCondition.apply(null, BAELDUNG, false));\n    }\n\n    @Test\n    void givenNullBoolean_WhenConvertIntegerOrReturnStringDependingOnCondition_ThenReturnTheString() {\n        assertEquals(BAELDUNG, TriFunctionExample.convertIntegerOrReturnStringDependingOnCondition.apply(null, BAELDUNG, null));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.trifunction;\n\nimport io.vavr.Function3;\n\npublic class VavrFunction3Example {\n\n    public static Function3<Integer, Integer, Integer, Integer> multiplyThenAdd = (x, y, z) -> x * y + z;\n\n    public static Function3<Integer, Integer, Integer, Integer> multiplyThenAddThenDivideByTen = multiplyThenAdd.andThen(x -> x / 10);\n\n}\n", "test_case": "package com.baeldung.trifunction;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class VavrFunction3ExampleUnitTest {\n\n    @Test\n    void whenMultiplyThenAdd_ThenReturnsCorrectResult() {\n        assertEquals(25, VavrFunction3Example.multiplyThenAdd.apply(2, 10, 5));\n    }\n\n    @Test\n    void whenMultiplyThenAddThenDivideByTen_ThenReturnsCorrectResult() {\n        assertEquals(2, VavrFunction3Example.multiplyThenAddThenDivideByTen.apply(2, 10, 5));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.callbackfunctions;\n\nimport java.util.function.Consumer;\n\npublic class ConsumerCallback {\n    public void getAge(int initialAge, Consumer<Integer> callback) {\n        callback.accept(initialAge);\n    }\n\n    public void increaseAge(int initialAge, int ageDifference, Consumer<Integer> callback) {\n        System.out.println(\"===== Increase age ====\");\n\n        int newAge = initialAge + ageDifference;\n        callback.accept(newAge);\n\n    }\n}\n", "test_case": "package com.baeldung.callbackfunctions;\n\nimport org.junit.jupiter.api.Test;\nimport com.baeldung.callbackfunctions.ConsumerCallback;\n\nimport java.util.concurrent.atomic.AtomicInteger;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class ConsumerCallbackUnitTest {\n\n    @Test\n    void whenIncreasingInitialAgeByGivenValueThroughCallback_shouldIncreaseAge(){\n        ConsumerCallback consumerCallback = new ConsumerCallback();\n        int ageDifference = 10;\n        AtomicInteger newAge1 = new AtomicInteger();\n        int initialAge = 20;\n        consumerCallback.getAge(initialAge, (initialAge1) -> {\n            consumerCallback.increaseAge(initialAge, ageDifference, (newAge) -> {\n                System.out.printf(\"New age ==> %s\", newAge);\n                newAge1.set(newAge);\n\n            });\n        });\n        assertEquals(initialAge + ageDifference, newAge1.get());\n    }\n}\n"}
{"code_source": "package com.baeldung.functional;\n\nimport java.util.function.Function;\n\npublic class Currying {\n\n    private static Function<Double, Function<Double, Double>> weight = mass -> gravity -> mass * gravity;\n\n    private static Function<Double, Double> weightOnEarth = weight.apply(9.81);\n\n    private static Function<Double, Double> weightOnMars = weight.apply(3.75);\n\n    public static Double weightOnEarth(Double mass) {\n        return weightOnEarth.apply(mass);\n    }\n\n    public static Double weightOnMars(Double mass) {\n        return weightOnMars.apply(mass);\n    }\n\n    public static Function<Double, Double> weightOnEarth() {\n        final double gravity = 9.81;\n        return mass -> mass * gravity;\n    }\n\n}\n", "test_case": "package com.baeldung.functional;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.Test;\n\npublic class CurryingUnitTest {\n\n    @Test\n    public void testWeightOnEarth() {\n\n        assertEquals(588.6, Currying.weightOnEarth(60.0), 0.1);\n\n    }\n\n    @Test\n    public void testWeightOnMars() {\n\n        assertEquals(225.0, Currying.weightOnMars(60.0), 0.1);\n\n    }\n}\n"}
{"code_source": "package com.baeldung.functional;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class FirstClassFunctions {\n\n    public static List<Integer> sortWithoutLambda(List<Integer> numbers) {\n        Collections.sort(numbers, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer n1, Integer n2) {\n                return n1.compareTo(n2);\n            }\n        });\n        return numbers;\n    }\n\n    public static List<Integer> sortWithLambda(List<Integer> numbers) {\n        Collections.sort(numbers, (n1, n2) -> n1.compareTo(n2));\n        return numbers;\n    }\n\n}\n", "test_case": "package com.baeldung.functional;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.Arrays;\n\nimport org.junit.Test;\n\npublic class FirstClassFunctionsUnitTest {\n\n    @Test\n    public void testSortingWithoutLambda() {\n\n        assertEquals(new Integer(8), FirstClassFunctions.sortWithoutLambda(Arrays.asList(new Integer(10), new Integer(8)))\n            .get(0));\n\n    }\n\n    @Test\n    public void testSortingWithLambda() {\n\n        assertEquals(new Integer(8), FirstClassFunctions.sortWithLambda(Arrays.asList(new Integer(10), new Integer(8)))\n            .get(0));\n\n    }\n\n}\n"}
{"code_source": "package com.baeldung.functional;\n\nimport java.util.function.Function;\n\npublic class FunctionComposition {\n\n    private static Function<Double, Double> log = (value) -> Math.log(value);\n    private static Function<Double, Double> sqrt = (value) -> Math.sqrt(value);\n\n    public static Double logThenSqrt(Double number) {\n        Function<Double, Double> logThenSqrt = sqrt.compose(log);\n        return (logThenSqrt.apply(3.14));\n    }\n\n    public static Double sqrtThenLog(Double number) {\n        Function<Double, Double> sqrtThenLog = sqrt.andThen(log);\n        return (sqrtThenLog.apply(3.14));\n    }\n\n}\n", "test_case": "package com.baeldung.functional;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.Test;\n\npublic class FunctionCompositionUnitTest {\n\n    @Test\n    public void testLogThenSqrt() {\n\n        assertEquals(1.07, FunctionComposition.logThenSqrt(3.14), 0.01);\n\n    }\n\n    @Test\n    public void testSqrtThenLog() {\n\n        assertEquals(0.57, FunctionComposition.sqrtThenLog(3.14), 0.01);\n\n    }\n\n}\n"}
{"code_source": "package com.baeldung.functional;\n\nimport java.util.Optional;\n\npublic class Monads {\n\n    public static Optional<Integer> add(Optional<Integer> val1, Optional<Integer> val2) {\n        return val1.flatMap(first -> val2.flatMap(second -> Optional.of(first + second)));\n    }\n\n}\n", "test_case": "package com.baeldung.functional;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.Optional;\n\nimport org.junit.Test;\n\npublic class MonadsUnitTest {\n\n    @Test\n    public void testOptionalAdd() {\n\n        assertEquals(5, Monads.add(Optional.of(new Integer(2)), Optional.of(new Integer(3)))\n            .get());\n\n    }\n\n}\n"}
{"code_source": "package com.baeldung.functional;\n\npublic class Recursion {\n\n    public static Integer headRecursion(Integer number) {\n\n        return (number == 1) ? 1 : number * headRecursion(number - 1);\n\n    }\n\n    public static Integer tailRecursion(Integer number, Integer result) {\n\n        return (number == 1) ? result : tailRecursion(number - 1, result * number);\n\n    }\n\n}\n", "test_case": "package com.baeldung.functional;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.Test;\n\npublic class RecursionUnitTest {\n\n    @Test\n    public void testHeadRecursion() {\n\n        assertEquals(120, Recursion.headRecursion(5));\n\n    }\n\n    @Test\n    public void testTailRecursion() {\n\n        assertEquals(120, Recursion.tailRecursion(5, 1));\n\n    }\n\n}\n"}
{"code_source": "package com.baeldung.functional.functors;\n\nimport java.util.function.Function;\n\npublic class Functor<T> {\n    private final T value;\n\n    public Functor(T value) {\n        this.value = value;\n    }\n\n    public <R> Functor<R> map(Function<T, R> mapper) {\n        return new Functor<>(mapper.apply(value));\n    }\n\n    boolean eq(T other) {\n        return value.equals(other);\n    }\n\n    public T getValue() {\n        return value;\n    }\n}", "test_case": "package com.baeldung.functional.functors;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.function.Function;\n\nimport org.junit.jupiter.api.Test;\n\nclass FunctorsUnitTest {\n    @Test\n    public void whenProvideAValue_ShouldMapTheValue() {\n        Functor<Integer> functor = new Functor<>(5);\n        Function<Integer, Integer> addThree = (num) -> num + 3;\n        Functor<Integer> mappedFunctor = functor.map(addThree);\n        assertEquals(8, mappedFunctor.getValue());\n    }\n\n    @Test\n    public void whenApplyAnIdentityToAFunctor_thenResultIsEqualsToInitialValue() {\n        String value = \"baeldung\";\n        //Identity\n        Functor<String> identity = new Functor<>(value).map(Function.identity());\n        assertTrue(identity.eq(value));\n    }\n\n    @Test\n    public void whenApplyAFunctionToOtherFunction_thenResultIsEqualsBetweenBoth() {\n        int value = 100;\n        long expected = 100;\n        // Composition/Associativity\n        Function<Integer, String> f = Object::toString;\n        Function<String, Long> g = Long::valueOf;\n\n        Functor<Long> left = new Functor<>(value).map(f)\n            .map(g);\n        Functor<Long> right = new Functor<>(value).map(f.andThen(g));\n\n        assertTrue(left.eq(expected));\n        assertTrue(right.eq(expected));\n    }\n\n    @Test\n    public void whenApplyOperationsToEnumFunctors_thenGetTheProperResult() {\n        assertEquals(15, EnumFunctor.PLUS.apply(10, 5));\n        assertEquals(5, EnumFunctor.MINUS.apply(10, 5));\n        assertEquals(50, EnumFunctor.MULTIPLY.apply(10, 5));\n        assertEquals(2, EnumFunctor.DIVIDE.apply(10, 5));\n    }\n}"}
{"code_source": "package com.baeldung.httpclient;\n\nimport java.io.IOException;\nimport java.net.Authenticator;\nimport java.net.PasswordAuthentication;\nimport java.net.URI;\nimport java.net.URLEncoder;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Path;\nimport java.util.Base64;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.stream.Collectors;\n\npublic class HttpClientPost {\n\n    public static HttpResponse<String> sendSynchronousPost(String serviceUrl) throws IOException, InterruptedException {\n        HttpClient client = HttpClient.newHttpClient();\n\n        HttpRequest request = HttpRequest.newBuilder()\n          .uri(URI.create(serviceUrl))\n          .POST(HttpRequest.BodyPublishers.noBody())\n          .build();\n\n        HttpResponse<String> response = client\n          .send(request, HttpResponse.BodyHandlers.ofString());\n\n        return response;\n    }\n\n    public static CompletableFuture<HttpResponse<String>> sendAsynchronousPost(String serviceUrl) {\n        HttpClient client = HttpClient.newHttpClient();\n\n        HttpRequest request = HttpRequest.newBuilder()\n          .uri(URI.create(serviceUrl))\n          .POST(HttpRequest.BodyPublishers.noBody())\n          .build();\n\n        CompletableFuture<HttpResponse<String>> futureResponse = client\n          .sendAsync(request, HttpResponse.BodyHandlers.ofString());\n\n        return futureResponse;\n    }\n\n    public static List<CompletableFuture<HttpResponse<String>>> sendConcurrentPost(List<String> serviceUrls) {\n        HttpClient client = HttpClient.newHttpClient();\n\n        List<CompletableFuture<HttpResponse<String>>> completableFutures = serviceUrls.stream()\n          .map(URI::create)\n          .map(HttpRequest::newBuilder)\n          .map(builder -> builder.POST(HttpRequest.BodyPublishers.noBody()))\n          .map(HttpRequest.Builder::build)\n          .map(request -> client.sendAsync(request, HttpResponse.BodyHandlers.ofString()))\n          .collect(Collectors.toList());\n\n        return completableFutures;\n    }\n\n    public static HttpResponse<String> sendPostWithAuthHeader(String serviceUrl) throws IOException, InterruptedException {\n        HttpClient client = HttpClient.newHttpClient();\n\n        HttpRequest request = HttpRequest.newBuilder()\n          .uri(URI.create(serviceUrl))\n          .POST(HttpRequest.BodyPublishers.noBody())\n          .header(\"Authorization\", \"Basic \" + Base64.getEncoder()\n            .encodeToString((\"baeldung:123456\").getBytes()))\n          .build();\n\n        HttpResponse<String> response = client\n          .send(request, HttpResponse.BodyHandlers.ofString());\n\n        return response;\n    }\n\n    public static HttpResponse<String> sendPostWithAuthClient(String serviceUrl) throws IOException, InterruptedException {\n        HttpClient client = HttpClient.newBuilder()\n          .authenticator(new Authenticator() {\n              @Override\n              protected PasswordAuthentication getPasswordAuthentication() {\n                  return new PasswordAuthentication(\n                    \"baeldung\",\n                    \"123456\".toCharArray());\n              }\n          })\n          .build();\n\n        HttpRequest request = HttpRequest.newBuilder()\n          .uri(URI.create(serviceUrl))\n          .POST(HttpRequest.BodyPublishers.noBody())\n          .build();\n\n        HttpResponse<String> response = client\n          .send(request, HttpResponse.BodyHandlers.ofString());\n\n        return response;\n    }\n\n    public static HttpResponse<String> sendPostWithJsonBody(String serviceUrl) throws IOException, InterruptedException {\n        HttpClient client = HttpClient.newHttpClient();\n\n        HttpRequest request = HttpRequest.newBuilder()\n          .uri(URI.create(serviceUrl))\n          .POST(HttpRequest.BodyPublishers.ofString(\"{\\\"action\\\":\\\"hello\\\"}\"))\n          .build();\n\n        HttpResponse<String> response = client\n          .send(request, HttpResponse.BodyHandlers.ofString());\n\n        return response;\n    }\n\n    public static HttpResponse<String> sendPostWithFormData(String serviceUrl) throws IOException, InterruptedException {\n        HttpClient client = HttpClient.newHttpClient();\n\n        Map<String, String> formData = new HashMap<>();\n        formData.put(\"username\", \"baeldung\");\n        formData.put(\"message\", \"hello\");\n\n        HttpRequest request = HttpRequest.newBuilder()\n          .uri(URI.create(serviceUrl))\n          .POST(HttpRequest.BodyPublishers.ofString(getFormDataAsString(formData)))\n          .build();\n\n        HttpResponse<String> response = client\n          .send(request, HttpResponse.BodyHandlers.ofString());\n\n        return response;\n    }\n\n    public static HttpResponse<String> sendPostWithFileData(String serviceUrl, Path file) throws IOException, InterruptedException {\n        HttpClient client = HttpClient.newHttpClient();\n\n        HttpRequest request = HttpRequest.newBuilder()\n          .uri(URI.create(serviceUrl))\n          .POST(HttpRequest.BodyPublishers.ofFile(file))\n          .build();\n\n        HttpResponse<String> response = client\n          .send(request, HttpResponse.BodyHandlers.ofString());\n\n        return response;\n    }\n\n    private static String getFormDataAsString(Map<String, String> formData) {\n        StringBuilder formBodyBuilder = new StringBuilder();\n        for (Map.Entry<String, String> singleEntry : formData.entrySet()) {\n            if (formBodyBuilder.length() > 0) {\n                formBodyBuilder.append(\"&\");\n            }\n            formBodyBuilder.append(URLEncoder.encode(singleEntry.getKey(), StandardCharsets.UTF_8));\n            formBodyBuilder.append(\"=\");\n            formBodyBuilder.append(URLEncoder.encode(singleEntry.getValue(), StandardCharsets.UTF_8));\n        }\n        return formBodyBuilder.toString();\n    }\n\n}\n", "test_case": "package com.baeldung.httpclient;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.io.TempDir;\n\nimport java.io.IOException;\nimport java.net.http.HttpResponse;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\nimport java.util.stream.Collectors;\n\nimport static org.assertj.core.api.Assertions.*;\n\nclass HttpClientPostUnitTest extends PostRequestMockServer {\n\n    @Test\n    void givenSyncPostRequest_whenServerIsAvailable_thenOkStatusIsReceived() throws IOException, InterruptedException {\n        HttpResponse<String> response = HttpClientPost.sendSynchronousPost(serviceUrl);\n        assertThat(response.statusCode()).isEqualTo(200);\n        assertThat(response.body()).isEqualTo(\"{\\\"message\\\":\\\"ok\\\"}\");\n    }\n\n    @Test\n    void givenAsyncPostRequest_whenServerIsAvailable_thenOkStatusIsReceived() throws ExecutionException, InterruptedException {\n        CompletableFuture<HttpResponse<String>> futureResponse = HttpClientPost.sendAsynchronousPost(serviceUrl);\n        HttpResponse<String> response = futureResponse.get();\n\n        assertThat(response.statusCode()).isEqualTo(200);\n        assertThat(response.body()).isEqualTo(\"{\\\"message\\\":\\\"ok\\\"}\");\n    }\n\n    @Test\n    void givenConcurrentPostRequests_whenServerIsAvailable_thenOkStatusIsReceived() throws ExecutionException, InterruptedException {\n        List<CompletableFuture<HttpResponse<String>>> completableFutures = HttpClientPost\n          .sendConcurrentPost(List.of(serviceUrl, serviceUrl));\n\n        CompletableFuture<List<HttpResponse<String>>> combinedFutures = CompletableFuture\n          .allOf(completableFutures.toArray(new CompletableFuture[0]))\n          .thenApply(future ->\n            completableFutures.stream()\n              .map(CompletableFuture::join)\n              .collect(Collectors.toList()));\n\n        List<HttpResponse<String>> responses = combinedFutures.get();\n        responses.forEach((response) -> {\n            assertThat(response.statusCode()).isEqualTo(200);\n            assertThat(response.body()).isEqualTo(\"{\\\"message\\\":\\\"ok\\\"}\");\n        });\n    }\n\n    @Test\n    void givenPostRequestWithAuthClient_whenServerIsAvailable_thenOkStatusIsReceived() throws IOException, InterruptedException {\n        HttpResponse<String> response = HttpClientPost.sendPostWithAuthClient(serviceUrl);\n\n        assertThat(response.statusCode()).isEqualTo(200);\n        assertThat(response.body()).isEqualTo(\"{\\\"message\\\":\\\"ok\\\"}\");\n    }\n\n    @Test\n    void givenPostRequestWithAuthHeader_whenServerIsAvailable_thenOkStatusIsReceived() throws IOException, InterruptedException {\n        HttpResponse<String> response = HttpClientPost.sendPostWithAuthHeader(serviceUrl);\n\n        assertThat(response.statusCode()).isEqualTo(200);\n        assertThat(response.body()).isEqualTo(\"{\\\"message\\\":\\\"ok\\\"}\");\n    }\n\n    @Test\n    void givenPostRequestWithJsonBody_whenServerIsAvailable_thenOkStatusIsReceived() throws IOException, InterruptedException {\n        HttpResponse<String> response = HttpClientPost.sendPostWithJsonBody(serviceUrl);\n\n        assertThat(response.statusCode()).isEqualTo(200);\n        assertThat(response.body()).isEqualTo(\"{\\\"message\\\":\\\"ok\\\"}\");\n    }\n\n    @Test\n    void givenPostRequestWithFormData_whenServerIsAvailable_thenOkStatusIsReceived() throws IOException, InterruptedException {\n        HttpResponse<String> response = HttpClientPost.sendPostWithFormData(serviceUrl);\n\n        assertThat(response.statusCode()).isEqualTo(200);\n        assertThat(response.body()).isEqualTo(\"{\\\"message\\\":\\\"ok\\\"}\");\n    }\n\n    @Test\n    void givenPostRequestWithFileData_whenServerIsAvailable_thenOkStatusIsReceived(@TempDir Path tempDir) throws IOException, InterruptedException {\n        Path file = tempDir.resolve(\"temp.txt\");\n        List<String> lines = Arrays.asList(\"1\", \"2\", \"3\");\n        Files.write(file, lines);\n\n        HttpResponse<String> response = HttpClientPost.sendPostWithFileData(serviceUrl, file);\n\n        assertThat(response.statusCode()).isEqualTo(200);\n        assertThat(response.body()).isEqualTo(\"{\\\"message\\\":\\\"ok\\\"}\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.extension;\n\nimport com.google.common.io.Files;\nimport org.apache.commons.io.FilenameUtils;\n\nimport java.util.Optional;\n\npublic class Extension {\n    //Instead of file name we can also specify full path of a file eg. /baeldung/com/demo/abc.java\n    public String getExtensionByApacheCommonLib(String filename) {\n        return FilenameUtils.getExtension(filename);\n    }\n\n    public Optional<String> getExtensionByStringHandling(String filename) {\n        return Optional.ofNullable(filename)\n                       .filter(f -> f.contains(\".\"))\n                      .map(f -> f.substring(filename.lastIndexOf(\".\") + 1));\n    }\n\n    public String getExtensionByGuava(String filename) {\n        return Files.getFileExtension(filename);\n    }\n}\n", "test_case": "package com.baeldung.extension;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.Optional;\n\npublic class ExtensionUnitTest {\n    private Extension extension = new Extension();\n\n    @Test\n    public void getExtension_whenApacheCommonIO_thenExtensionIsTrue() {\n        String expectedExtension = \"txt\";\n        String actualExtension = extension.getExtensionByApacheCommonLib(\"jarvis.txt\");\n        Assert.assertEquals(expectedExtension, actualExtension);\n    }\n\n    @Test\n    public void getExtension_whenStringHandle_thenExtensionIsTrue() {\n        String expectedExtension = \"java\";\n        Optional<String> actualExtension = extension.getExtensionByStringHandling(\"Demo.java\");\n        Assert.assertEquals(expectedExtension, actualExtension.get());\n    }\n\n    @Test\n    public void getExtension_whenGuava_thenExtensionIsTrue() {\n        String expectedExtension = \"class\";\n        String actualExtension = extension.getExtensionByGuava(\"baeldung/Demo.class\");\n        Assert.assertEquals(expectedExtension, actualExtension);\n    }\n}\n"}
{"code_source": "package com.baeldung.filesystem.jndi;\n\nimport java.io.File;\nimport java.util.Hashtable;\n\nimport javax.naming.Context;\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\n\npublic class LookupFSJNDI {\n    private InitialContext ctx = null;\n\n    public LookupFSJNDI() throws NamingException {\n        super();\n        init();\n    }\n\n    private void init() throws NamingException {\n        Hashtable<String, String> env = new Hashtable<String, String>();\n\n        env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.fscontext.RefFSContextFactory\");\n        // URI to namespace (actual directory)\n        env.put(Context.PROVIDER_URL, \"file:./src/test/resources\");\n\n        ctx = new InitialContext(env);\n    }\n\n    public InitialContext getCtx() {\n        return ctx;\n    }\n\n    public File getFile(String fileName) {\n        File file;\n        try {\n            file = (File) getCtx().lookup(fileName);\n        } catch (NamingException e) {\n            file = null;\n        }\n        return file;\n    }\n\n}\n", "test_case": "package com.baeldung.filesystem.jndi;\n\nimport com.baeldung.filesystem.jndi.LookupFSJNDI;\nimport org.junit.Test;\n\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport java.io.File;\n\nimport static org.junit.Assert.assertNotNull;\n\npublic class LookupFSJNDIIntegrationTest {\n    LookupFSJNDI fsjndi;\n    InitialContext ctx = null;\n    final String FILENAME = \"test.find\";\n\n    public LookupFSJNDIIntegrationTest() {\n        try {\n            fsjndi = new LookupFSJNDI();\n        } catch (NamingException e) {\n            fsjndi = null;\n        }\n    }\n\n    @Test\n    public void whenInitializationLookupFSJNDIIsNotNull_thenSuccess() {\n        assertNotNull(\"Class LookupFSJNDI has instance\", fsjndi);\n    }\n\n    @Test\n    public void givenLookupFSJNDI_whengetInitialContextIsNotNull_thenSuccess() {\n        ctx = fsjndi.getCtx();\n        assertNotNull(\"Context exists\", ctx);\n    }\n\n    @Test\n    public void givenInitialContext_whenLokupFileExists_thenSuccess() {\n        File file = fsjndi.getFile(FILENAME);\n        assertNotNull(\"File exists\", file);\n    }\n}\n"}
{"code_source": "package com.baeldung.listfiles;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.*;\nimport java.nio.file.attribute.BasicFileAttributes;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class ListFiles {\n\n    public Set<String> listFilesUsingJavaIO(String dir) {\n        return Stream.of(new File(dir).listFiles())\n                .filter(file -> !file.isDirectory())\n                .map(File::getName)\n                .collect(Collectors.toSet());\n    }\n\n    public Set<String> listFilesUsingFilesList(String dir) throws IOException {\n        try (Stream<Path> stream = Files.list(Paths.get(dir))) {\n            return stream\n                    .filter(file -> !Files.isDirectory(file))\n                    .map(Path::getFileName)\n                    .map(Path::toString)\n                    .collect(Collectors.toSet());\n        }\n    }\n\n    public Set<String> listFilesUsingFileWalk(String dir, int depth) throws IOException {\n        try (Stream<Path> stream = Files.walk(Paths.get(dir), depth)) {\n            return stream\n                    .filter(file -> !Files.isDirectory(file))\n                    .map(Path::getFileName)\n                    .map(Path::toString)\n                    .collect(Collectors.toSet());\n        }\n    }\n\n    public Set<String> listFilesUsingFileWalkAndVisitor(String dir) throws IOException {\n        Set<String> fileList = new HashSet<>();\n        Files.walkFileTree(Paths.get(dir), new SimpleFileVisitor<Path>() {\n            @Override\n            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {\n                if (!Files.isDirectory(file)) {\n                    fileList.add(file.getFileName().toString());\n                }\n                return FileVisitResult.CONTINUE;\n            }\n        });\n        return fileList;\n    }\n\n    public Set<String> listFilesUsingDirectoryStream(String dir) throws IOException {\n        Set<String> fileSet = new HashSet<>();\n        try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(dir))) {\n            for (Path path : stream) {\n                if (!Files.isDirectory(path)) {\n                    fileSet.add(path.getFileName().toString());\n                }\n            }\n        }\n        return fileSet;\n    }\n}\n", "test_case": "package com.baeldung.listfiles;\n\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class ListFilesUnitTest {\n\n    private static final String VALID_DIRECTORY = \"src/test/resources/listFilesUnitTestFolder\";\n    private static final String INVALID_DIRECTORY = \"src/test/resources/thisDirectoryDoesNotExist\";\n    private static final Set<String> EXPECTED_FILE_SET = new HashSet<String>() {\n        {\n            add(\"test.xml\");\n            add(\"employee.json\");\n            add(\"students.json\");\n            add(\"country.txt\");\n        }\n    };\n    private static final int DEPTH = 1;\n    private final ListFiles listFiles = new ListFiles();\n\n    @Test\n    public void givenAValidDirectoryWhenUsingJavaIOThenReturnSetOfFileNames() {\n        assertThat(listFiles.listFilesUsingJavaIO(VALID_DIRECTORY))\n                .isEqualTo(EXPECTED_FILE_SET);\n    }\n\n    @Test\n    public void givenAInvalidValidDirectoryWhenUsingJavaIOThenThrowsNullPointerExceptino() {\n        assertThrows(NullPointerException.class,\n                () -> listFiles.listFilesUsingJavaIO(INVALID_DIRECTORY));\n    }\n\n    @Test\n    public void givenAValidDirectoryWhenUsingFilesListThenReturnSetOfFileNames() throws IOException {\n        assertThat(listFiles.listFilesUsingFilesList(VALID_DIRECTORY))\n                .isEqualTo(EXPECTED_FILE_SET);\n    }\n\n    @Test\n    public void givenAValidDirectoryWhenUsingFilesWalkWithDepth1ThenReturnSetOfFileNames() throws IOException {\n        assertThat(listFiles.listFilesUsingFileWalk(VALID_DIRECTORY, DEPTH))\n                .isEqualTo(EXPECTED_FILE_SET);\n    }\n\n    @Test\n    public void givenAValidDirectoryWhenUsingFilesWalkFileTreeThenReturnSetOfFileNames() throws IOException {\n        assertThat(listFiles.listFilesUsingFileWalkAndVisitor(VALID_DIRECTORY))\n                .isEqualTo(EXPECTED_FILE_SET);\n    }\n\n    @Test\n    public void givenAValidDirectoryWhenUsingDirectoryStreamThenReturnSetOfFileNames() throws IOException {\n        assertThat(listFiles.listFilesUsingDirectoryStream(VALID_DIRECTORY))\n                .isEqualTo(EXPECTED_FILE_SET);\n    }\n\n    @Test\n    public void givenAValidFileWhenUsingFilesWalkWithDepth1ThenReturnSetOfTheSameFile() throws IOException {\n        Set<String> expectedFileSet = Collections.singleton(\"test.xml\");\n        String filePathString = \"src/test/resources/listFilesUnitTestFolder/test.xml\";\n        assertEquals(expectedFileSet, listFiles.listFilesUsingFileWalk(filePathString, DEPTH));\n    }\n}\n"}
{"code_source": "package com.baeldung.copydirectory;\n\nimport java.io.File;\nimport java.io.IOException;\n\nimport org.apache.commons.io.FileUtils;\n\npublic class ApacheCommons {\n\n    public static void copyDirectory(String sourceDirectoryLocation, String destinationDirectoryLocation) throws IOException {\n        File sourceDirectory = new File(sourceDirectoryLocation);\n        File destinationDirectory = new File(destinationDirectoryLocation);\n        FileUtils.copyDirectory(sourceDirectory, destinationDirectory);\n    }\n}\n", "test_case": "package com.baeldung.copydirectory;\n\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Comparator;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ApacheCommonsUnitTest {\n\n    private final String sourceDirectoryLocation = \"src/test/resources/sourceDirectory3\";\n    private final String subDirectoryName = \"/childDirectory\";\n    private final String fileName = \"/file.txt\";\n    private final String destinationDirectoryLocation = \"src/test/resources/destinationDirectory3\";\n\n    @BeforeEach\n    public void createDirectoryWithSubdirectoryAndFile() throws IOException {\n        Files.createDirectories(Paths.get(sourceDirectoryLocation));\n        Files.createDirectories(Paths.get(sourceDirectoryLocation + subDirectoryName));\n        Files.createFile(Paths.get(sourceDirectoryLocation + subDirectoryName + fileName));\n    }\n\n    @Test\n    public void whenSourceDirectoryExists_thenDirectoryIsFullyCopied() throws IOException {\n        ApacheCommons.copyDirectory(sourceDirectoryLocation, destinationDirectoryLocation);\n\n        assertTrue(new File(destinationDirectoryLocation).exists());\n        assertTrue(new File(destinationDirectoryLocation + subDirectoryName).exists());\n        assertTrue(new File(destinationDirectoryLocation + subDirectoryName + fileName).exists());\n    }\n\n    @Test\n    public void whenSourceDirectoryDoesNotExist_thenExceptionIsThrown() {\n        assertThrows(Exception.class, () -> ApacheCommons.copyDirectory(\"nonExistingDirectory\", destinationDirectoryLocation));\n    }\n\n    @AfterEach\n    public void cleanUp() throws IOException {\n        Files.walk(Paths.get(sourceDirectoryLocation))\n            .sorted(Comparator.reverseOrder())\n            .map(Path::toFile)\n            .forEach(File::delete);\n        if (new File(destinationDirectoryLocation).exists()) {\n            Files.walk(Paths.get(destinationDirectoryLocation))\n                .sorted(Comparator.reverseOrder())\n                .map(Path::toFile)\n                .forEach(File::delete);\n        }\n    }\n\n}\n"}
{"code_source": "package com.baeldung.copydirectory;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\npublic class CoreOld {\n\n    public static void copyDirectoryJavaUnder7(File source, File destination) throws IOException {\n        if (source.isDirectory()) {\n            copyDirectory(source, destination);\n        } else {\n            copyFile(source, destination);\n        }\n    }\n\n    private static void copyDirectory(File sourceDirectory, File destinationDirectory) throws IOException {\n        if (!destinationDirectory.exists()) {\n            destinationDirectory.mkdir();\n        }\n        for (String f : sourceDirectory.list()) {\n            copyDirectoryJavaUnder7(new File(sourceDirectory, f), new File(destinationDirectory, f));\n        }\n    }\n\n    private static void copyFile(File sourceFile, File destinationFile) throws IOException {\n        try (InputStream in = new FileInputStream(sourceFile); OutputStream out = new FileOutputStream(destinationFile)) {\n            byte[] buf = new byte[1024];\n            int length;\n            while ((length = in.read(buf)) > 0) {\n                out.write(buf, 0, length);\n            }\n        }\n    }\n}\n", "test_case": "package com.baeldung.copydirectory;\n\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Comparator;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CoreOldUnitTest {\n\n    private final String sourceDirectoryLocation = \"src/test/resources/sourceDirectory1\";\n    private final String subDirectoryName = \"/childDirectory\";\n    private final String fileName = \"/file.txt\";\n    private final String destinationDirectoryLocation = \"src/test/resources/destinationDirectory1\";\n\n    @BeforeEach\n    public void createDirectoryWithSubdirectoryAndFile() throws IOException {\n        Files.createDirectories(Paths.get(sourceDirectoryLocation));\n        Files.createDirectories(Paths.get(sourceDirectoryLocation + subDirectoryName));\n        Files.createFile(Paths.get(sourceDirectoryLocation + subDirectoryName + fileName));\n    }\n\n    @Test\n    public void whenSourceDirectoryExists_thenDirectoryIsFullyCopied() throws IOException {\n        File sourceDirectory = new File(sourceDirectoryLocation);\n        File destinationDirectory = new File(destinationDirectoryLocation);\n        CoreOld.copyDirectoryJavaUnder7(sourceDirectory, destinationDirectory);\n\n        assertTrue(new File(destinationDirectoryLocation).exists());\n        assertTrue(new File(destinationDirectoryLocation + subDirectoryName).exists());\n        assertTrue(new File(destinationDirectoryLocation + subDirectoryName + fileName).exists());\n    }\n\n    @Test\n    public void whenSourceDirectoryDoesNotExist_thenExceptionIsThrown() throws IOException {\n        File sourceDirectory = new File(\"nonExistingDirectory\");\n        File destinationDirectory = new File(destinationDirectoryLocation);\n        assertThrows(IOException.class, () -> CoreOld.copyDirectoryJavaUnder7(sourceDirectory, destinationDirectory));\n    }\n\n    @AfterEach\n    public void cleanUp() throws IOException {\n        Files.walk(Paths.get(sourceDirectoryLocation))\n            .sorted(Comparator.reverseOrder())\n            .map(Path::toFile)\n            .forEach(File::delete);\n        if (new File(destinationDirectoryLocation).exists()) {\n            Files.walk(Paths.get(destinationDirectoryLocation))\n                .sorted(Comparator.reverseOrder())\n                .map(Path::toFile)\n                .forEach(File::delete);\n        }\n    }\n\n}\n"}
{"code_source": "package com.baeldung.copydirectory;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class JavaNio {\n\n    public static void copyDirectory(String sourceDirectoryLocation, String destinationDirectoryLocation) throws IOException {\n        Files.walk(Paths.get(sourceDirectoryLocation))\n          .forEach(source -> {\n              Path destination = Paths.get(destinationDirectoryLocation, source.toString()\n                .substring(sourceDirectoryLocation.length()));\n              try {\n                  Files.copy(source, destination);\n              } catch (IOException e) {\n                  e.printStackTrace();\n              }\n          });\n    }\n}\n", "test_case": "package com.baeldung.copydirectory;\n\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Comparator;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class JavaNioUnitTest {\n\n    private final String sourceDirectoryLocation = \"src/test/resources/sourceDirectory2\";\n    private final String subDirectoryName = \"/childDirectory\";\n    private final String fileName = \"/file.txt\";\n    private final String destinationDirectoryLocation = \"src/test/resources/destinationDirectory2\";\n\n    @BeforeEach\n    public void createDirectoryWithSubdirectoryAndFile() throws IOException {\n        Files.createDirectories(Paths.get(sourceDirectoryLocation));\n        Files.createDirectories(Paths.get(sourceDirectoryLocation + subDirectoryName));\n        Files.createFile(Paths.get(sourceDirectoryLocation + subDirectoryName + fileName));\n    }\n\n    @Test\n    public void whenSourceDirectoryExists_thenDirectoryIsFullyCopied() throws IOException {\n        JavaNio.copyDirectory(sourceDirectoryLocation, destinationDirectoryLocation);\n\n        assertTrue(new File(destinationDirectoryLocation).exists());\n        assertTrue(new File(destinationDirectoryLocation + subDirectoryName).exists());\n        assertTrue(new File(destinationDirectoryLocation + subDirectoryName + fileName).exists());\n    }\n\n    @Test\n    public void whenSourceDirectoryDoesNotExist_thenExceptionIsThrown() {\n        assertThrows(IOException.class, () -> JavaNio.copyDirectory(\"nonExistingDirectory\", destinationDirectoryLocation));\n    }\n\n    @AfterEach\n    public void cleanUp() throws IOException {\n        Files.walk(Paths.get(sourceDirectoryLocation))\n            .sorted(Comparator.reverseOrder())\n            .map(Path::toFile)\n            .forEach(File::delete);\n        if (new File(destinationDirectoryLocation).exists()) {\n            Files.walk(Paths.get(destinationDirectoryLocation))\n                .sorted(Comparator.reverseOrder())\n                .map(Path::toFile)\n                .forEach(File::delete);\n        }\n    }\n\n}\n"}
{"code_source": "package com.baeldung.lastmodifiedfile;\n\nimport java.io.File;\nimport java.io.FileFilter;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Arrays;\nimport java.util.Optional;\n\nimport org.apache.commons.io.comparator.LastModifiedFileComparator;\nimport org.apache.commons.io.filefilter.FileFilterUtils;\n\npublic class LastModifiedFileApp {\n\n    public static File findUsingIOApi(String sdir) {\n        File dir = new File(sdir);\n        if (dir.isDirectory()) {\n            Optional<File> opFile = Arrays.stream(dir.listFiles(File::isFile))\n              .max((f1, f2) -> Long.compare(f1.lastModified(), f2.lastModified()));\n\n            if (opFile.isPresent()) {\n                return opFile.get();\n            }\n        }\n\n        return null;\n    }\n\n    public static Path findUsingNIOApi(String sdir) throws IOException {\n        Path dir = Paths.get(sdir);\n        if (Files.isDirectory(dir)) {\n            Optional<Path> opPath = Files.list(dir)\n              .filter(p -> !Files.isDirectory(p))\n              .sorted((p1, p2) -> Long.valueOf(p2.toFile().lastModified())\n                .compareTo(p1.toFile().lastModified()))\n              .findFirst();\n\n            if (opPath.isPresent()) {\n                return opPath.get();\n            }\n        }\n\n        return null;\n    }\n\n    public static File findUsingCommonsIO(String sdir) {\n        File dir = new File(sdir);\n        if (dir.isDirectory()) {\n            File[] dirFiles = dir.listFiles((FileFilter) FileFilterUtils.fileFileFilter());\n            if (dirFiles != null && dirFiles.length > 0) {\n                Arrays.sort(dirFiles, LastModifiedFileComparator.LASTMODIFIED_REVERSE);\n                return dirFiles[0];\n            }\n        }\n\n        return null;\n    }\n\n}\n", "test_case": "package com.baeldung.lastmodifiedfile;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\nimport org.apache.commons.io.FileUtils;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\n\npublic class LastModifiedFileAppUnitTest {\n\n    private final static String SOURCEDIRECTORY = \"src/test/resources/lastmodfiles\";\n\n    @BeforeAll\n    public static void setUpFiles() throws IOException, InterruptedException {\n        File srcDir = new File(SOURCEDIRECTORY);\n        if (!srcDir.exists()) {\n            srcDir.mkdir();\n        }\n\n        FileUtils.cleanDirectory(srcDir);\n\n        File file01 = new File(SOURCEDIRECTORY + \"/file01.txt\");\n        file01.createNewFile();\n\n        Thread.sleep(2000);\n\n        File file02 = new File(SOURCEDIRECTORY + \"/file02.txt\");\n        file02.createNewFile();\n\n        Thread.sleep(2000);\n\n        File file03 = new File(SOURCEDIRECTORY + \"/file03.txt\");\n        file03.createNewFile();\n\n        Thread.sleep(2000);\n\n        Files.write(Paths.get(SOURCEDIRECTORY + \"/file02.txt\"), \"Hello File02\".getBytes());\n\n    }\n\n    @Test\n    public void givenDirectory_whenUsingIoApi_thenFindLastModfile() throws IOException {\n        File lastModFile = LastModifiedFileApp.findUsingIOApi(SOURCEDIRECTORY);\n\n        assertThat(lastModFile).isNotNull();\n        assertThat(lastModFile.getName()).isEqualTo(\"file02.txt\");\n    }\n\n    @Test\n    public void givenDirectory_whenUsingNioApi_thenFindLastModfile() throws IOException {\n        Path lastModPath = LastModifiedFileApp.findUsingNIOApi(SOURCEDIRECTORY);\n\n        assertThat(lastModPath).isNotNull();\n        assertThat(lastModPath.toFile().getName()).isEqualTo(\"file02.txt\");\n    }\n\n    @Test\n    public void givenDirectory_whenUsingApacheCommons_thenFindLastModfile() throws IOException {\n        File lastModFile = LastModifiedFileApp.findUsingCommonsIO(SOURCEDIRECTORY);\n\n        assertThat(lastModFile).isNotNull();\n        assertThat(lastModFile.getName()).isEqualTo(\"file02.txt\");\n    }\n\n    @AfterAll\n    public static void cleanUp() throws IOException {\n        File srcDir = new File(SOURCEDIRECTORY);\n        FileUtils.deleteDirectory(srcDir);\n    }\n\n}"}
{"code_source": "package com.baeldung.deserialization.vulnerabilities;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.lang.reflect.Method;\n\npublic class BadThing implements Serializable {\n    private static final long serialVersionUID = 0L;\n\n    Object looselyDefinedThing;\n    String methodName;\n\n    private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {\n        ois.defaultReadObject();\n        try {\n            Method method = looselyDefinedThing.getClass().getMethod(methodName);\n            method.invoke(looselyDefinedThing);\n        } catch (Exception e) {\n            // handle error...\n        }\n    }\n\n    private void writeObject(ObjectOutputStream oos) throws IOException {\n        oos.defaultWriteObject();\n    }\n}\n", "test_case": "package com.baeldung.deserialization.vulnerabilities;\n\nimport org.junit.Test;\nimport org.junit.jupiter.api.DisplayName;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\n\npublic class BadThingUnitTest {\n\n    @Test\n    @DisplayName(\"When a BadThing object is deserialized, then code execution in MyCustomAttackObject is run.\")\n    public void givenABadThingObject_whenItsDeserialized_thenExecutionIsRun() throws Exception {\n        BadThing bt = new BadThing();\n\n        bt.looselyDefinedThing = new MyCustomAttackObject();\n        bt.methodName = \"methodThatTriggersAttack\";\n\n        byte[] serializedObject = serialize(bt);\n\n        try (InputStream bis = new ByteArrayInputStream(serializedObject);\n             ObjectInputStream ois = new ObjectInputStream(bis)) {\n\n            ois.readObject(); // malicious code is run\n        }\n    }\n\n    private static byte[] serialize(Object object) throws Exception {\n        try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n             ObjectOutputStream oos = new ObjectOutputStream(bos)) {\n\n            oos.writeObject(object);\n            oos.flush();\n            return bos.toByteArray();\n        }\n    }\n}"}
{"code_source": "package com.baeldung.filetomap;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class FileToHashMap {\n\n    enum DupKeyOption {\n        OVERWRITE, DISCARD\n    }\n\n    public static Map<String, String> byBufferedReader(String filePath, DupKeyOption dupKeyOption) {\n        HashMap<String, String> map = new HashMap<>();\n        String line;\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            while ((line = reader.readLine()) != null) {\n                String[] keyValuePair = line.split(\":\", 2);\n                if (keyValuePair.length > 1) {\n                    String key = keyValuePair[0];\n                    String value = keyValuePair[1];\n                    if (DupKeyOption.OVERWRITE == dupKeyOption) {\n                        map.put(key, value);\n                    } else if (DupKeyOption.DISCARD == dupKeyOption) {\n                        map.putIfAbsent(key, value);\n                    }\n                } else {\n                    System.out.println(\"No Key:Value found in line, ignoring: \" + line);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return map;\n    }\n\n    public static Map<String, String> byStream(String filePath, DupKeyOption dupKeyOption) {\n        Map<String, String> map = new HashMap<>();\n        try (Stream<String> lines = Files.lines(Paths.get(filePath))) {\n            lines.filter(line -> line.contains(\":\"))\n                .forEach(line -> {\n                    String[] keyValuePair = line.split(\":\", 2);\n                    String key = keyValuePair[0];\n                    String value = keyValuePair[1];\n                    if (DupKeyOption.OVERWRITE == dupKeyOption) {\n                        map.put(key, value);\n                    } else if (DupKeyOption.DISCARD == dupKeyOption) {\n                        map.putIfAbsent(key, value);\n                    }\n                });\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return map;\n    }\n\n    public static Map<String, List<String>> aggregateByKeys(String filePath) {\n        Map<String, List<String>> map = new HashMap<>();\n        try (Stream<String> lines = Files.lines(Paths.get(filePath))) {\n            lines.filter(line -> line.contains(\":\"))\n                .forEach(line -> {\n                    String[] keyValuePair = line.split(\":\", 2);\n                    String key = keyValuePair[0];\n                    String value = keyValuePair[1];\n                    if (map.containsKey(key)) {\n                        map.get(key).add(value);\n                    } else {\n                        map.put(key, Stream.of(value).collect(Collectors.toList()));\n                    }\n                });\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return map;\n    }\n}\n", "test_case": "package com.baeldung.filetomap;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.net.URISyntaxException;\nimport java.nio.file.Paths;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class FileToHashMapUnitTest {\n\n    private String filePath;\n\n    private static final Map<String, String> EXPECTED_MAP_DISCARD = Stream.of(new String[][]{\n        {\"title\", \"The Lord of the Rings: The Return of the King\"},\n        {\"director\", \"Peter Jackson\"},\n        {\"actor\", \"Sean Astin\"}\n    }).collect(Collectors.toMap(data -> data[0], data -> data[1]));\n\n    private static final Map<String, String> EXPECTED_MAP_OVERWRITE = Stream.of(new String[][]{\n        {\"title\", \"The Lord of the Rings: The Return of the King\"},\n        {\"director\", \"Peter Jackson\"},\n        {\"actor\", \"Ian McKellen\"}\n    }).collect(Collectors.toMap(data -> data[0], data -> data[1]));\n\n    private static final Map<String, List<String>> EXPECTED_MAP_AGGREGATE = Stream.of(new String[][]{\n        {\"title\", \"The Lord of the Rings: The Return of the King\"},\n        {\"director\", \"Peter Jackson\"},\n        {\"actor\", \"Sean Astin\", \"Ian McKellen\"}\n    }).collect(Collectors.toMap(arr -> arr[0], arr -> Arrays.asList(Arrays.copyOfRange(arr, 1, arr.length))));\n\n    @Before\n    public void setPath() throws URISyntaxException {\n        if (filePath == null) {\n            filePath = Paths.get(ClassLoader.getSystemResource(\"filetomap/theLordOfRings.txt\").toURI()).toString();\n        }\n    }\n\n    @Test\n    public void givenInputFile_whenInvokeByBufferedReaderPriorToJava8_shouldGetExpectedMap() {\n        Map<String, String> mapOverwrite = FileToHashMap.byBufferedReader(filePath, FileToHashMap.DupKeyOption.OVERWRITE);\n        Map<String, String> mapDiscard = FileToHashMap.byBufferedReader(filePath, FileToHashMap.DupKeyOption.DISCARD);\n        assertThat(mapOverwrite).isEqualTo(EXPECTED_MAP_OVERWRITE);\n        assertThat(mapDiscard).isEqualTo(EXPECTED_MAP_DISCARD);\n    }\n\n    @Test\n    public void givenInputFile_whenInvokeByStream_shouldGetExpectedMap() {\n        Map<String, String> mapOverwrite = FileToHashMap.byStream(filePath, FileToHashMap.DupKeyOption.OVERWRITE);\n        Map<String, String> mapDiscard = FileToHashMap.byStream(filePath, FileToHashMap.DupKeyOption.DISCARD);\n        assertThat(mapOverwrite).isEqualTo(EXPECTED_MAP_OVERWRITE);\n        assertThat(mapDiscard).isEqualTo(EXPECTED_MAP_DISCARD);\n    }\n\n    @Test\n    public void givenInputFile_whenInvokeAggregateByKeys_shouldGetExpectedMap() {\n        Map<String, List<String>> mapAgg = FileToHashMap.aggregateByKeys(filePath);\n        assertThat(mapAgg).isEqualTo(EXPECTED_MAP_AGGREGATE);\n    }\n}\n"}
{"code_source": "package com.baeldung.iostreams;\n\nimport java.io.*;\n\npublic class DataStream {\n    public static void textDataProcessingByteStream(String fileName, String content) throws IOException {\n        PrintStream out = new PrintStream(fileName);\n        out.print(content);\n        out.flush();\n    }\n\n    public static void textDataProcessingCharStream(String fileName, String content) throws IOException {\n        PrintWriter out = new PrintWriter(fileName);\n        out.print(content);\n        out.flush();\n    }\n\n    public static void nonTextDataProcessing(String fileName, String streamOutputFile, String writerOutputFile) throws IOException {\n        FileInputStream inputStream = new FileInputStream(fileName);\n        PrintStream printStream = new PrintStream(streamOutputFile);\n\n        int b;\n        while ((b = inputStream.read()) != -1) {\n            printStream.write(b);\n        }\n        printStream.close();\n\n        FileReader reader = new FileReader(fileName);\n        PrintWriter writer = new PrintWriter(writerOutputFile);\n\n        int c;\n        while ((c = reader.read()) != -1) {\n            writer.write(c);\n        }\n        writer.close();\n    }\n}", "test_case": "package com.baeldung.iostreams;\n\nimport org.apache.commons.io.FileUtils;\nimport org.junit.Test;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\npublic class DataStreamUnitTest {\n\n    private static final String dataProcessingTextFile = \"src/test/resources/iostreams/TestFile.txt\";\n    private static final String dataProcessingImageFile = \"src/test/resources/iostreams/image.png\";\n    private static final String dataProcessingByteStreamFile = \"src/test/resources/iostreams/ps.png\";\n    private static final String dataProcessingCharStreamFile = \"src/test/resources/iostreams/pw.png\";\n\n    private static final String textFileContent = \"Hello, world!\";\n\n    @Test\n    public void whenUsingByteStream_thenWriteTextToFile() throws IOException {\n        DataStream dataStream = new DataStream();\n        dataStream.textDataProcessingByteStream(dataProcessingTextFile, textFileContent);\n\n        File file = new File(dataProcessingTextFile);\n        assertTrue(file.exists());\n        assertEquals(textFileContent, FileUtils.readFileToString(file, \"utf-8\"));\n\n        Files.delete(Paths.get(dataProcessingTextFile));\n    }\n\n    @Test\n    public void whenUsingCharStream_thenWriteTextToFile() throws IOException {\n        DataStream dataStream = new DataStream();\n        dataStream.textDataProcessingCharStream(dataProcessingTextFile, textFileContent);\n\n        File file = new File(dataProcessingTextFile);\n        assertTrue(file.exists());\n        assertEquals(textFileContent, FileUtils.readFileToString(file, \"utf-8\"));\n\n        Files.delete(Paths.get(dataProcessingTextFile));\n    }\n\n    @Test\n    public void whenUsingStreams_thenWriteNonTextData() throws IOException {\n        DataStream dataStream = new DataStream();\n        dataStream.nonTextDataProcessing(dataProcessingImageFile, dataProcessingByteStreamFile, dataProcessingCharStreamFile);\n\n        File file = new File(dataProcessingImageFile);\n        File byteStreamOutputFile = new File(dataProcessingByteStreamFile);\n        File charStreamOutputFile = new File(dataProcessingCharStreamFile);\n        assertTrue(file.exists());\n        assertTrue(byteStreamOutputFile.exists());\n        assertTrue(charStreamOutputFile.exists());\n\n        assertTrue(FileUtils.contentEquals(file, byteStreamOutputFile));\n        assertFalse(FileUtils.contentEquals(file, charStreamOutputFile));\n\n        Files.delete(Paths.get(dataProcessingByteStreamFile));\n        Files.delete(Paths.get(dataProcessingCharStreamFile));\n    }\n}\n"}
{"code_source": "package com.baeldung.userinput;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class UserInputHandler {\n\n    public static List<String> readUserInput() {\n        List<String> userData = new ArrayList<>();\n        System.out.println(\"Please enter your data below: (send 'bye' to exit) \");\n        Scanner input = new Scanner(System.in);\n        while (true) {\n            String line = input.nextLine();\n            if (\"bye\".equalsIgnoreCase(line)) {\n                break;\n            }\n            userData.add(line);\n        }\n        return userData;\n    }\n\n    public static void main(String[] args) {\n        List<String> userData = readUserInput();\n        System.out.printf(\"User Input Data:\\n%s\", String.join(\"\\n\", userData));\n    }\n}\n", "test_case": "package com.baeldung.userinput;\n\n\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class UserInputHandlerUnitTest {\n\n    @Test\n    public void givenDataInSystemIn_whenCallingReadUserInputMethod_thenHaveUserInputData() {\n        String[] inputLines = new String[]{\n            \"The first line.\",\n            \"The second line.\",\n            \"The last line.\",\n            \"bye\",\n            \"anything after 'bye' will be ignored\"\n        };\n        String[] expectedLines = Arrays.copyOf(inputLines, inputLines.length - 2);\n        List<String> expected = Arrays.stream(expectedLines).collect(Collectors.toList());\n        InputStream stdin = System.in;\n        try {\n            System.setIn(new ByteArrayInputStream(String.join(\"\\n\", inputLines).getBytes()));\n            List<String> actual = UserInputHandler.readUserInput();\n            assertThat(actual).isEqualTo(expected);\n        } finally {\n            System.setIn(stdin);\n        }\n    }\n}"}
{"code_source": "package com.baeldung.bufferedreader;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.stream.Collectors;\n\npublic class BufferedReaderExample {\n\n    public String readAllLines(BufferedReader reader) throws IOException {\n        StringBuilder content = new StringBuilder();\n        String line;\n\n        while ((line = reader.readLine()) != null) {\n            content.append(line);\n            content.append(System.lineSeparator());\n        }\n\n        return content.toString();\n    }\n\n    public String readAllLinesWithStream(BufferedReader reader) {\n        return reader\n                .lines()\n                    .collect(Collectors.joining(System.lineSeparator()));\n    }\n\n    public String readAllCharsOneByOne(BufferedReader reader) throws IOException {\n        StringBuilder content = new StringBuilder();\n\n        int value;\n        while ((value = reader.read()) != -1) {\n            content.append((char) value);\n        }\n\n        return content.toString();\n    }\n\n    public String readMultipleChars(BufferedReader reader) throws IOException {\n        int length = 5;\n        char[] chars = new char[length];\n        int charsRead = reader.read(chars, 0, length);\n\n        String result;\n        if (charsRead != -1) {\n            result = new String(chars, 0,  charsRead);\n        } else {\n            result = \"\";\n        }\n\n        return result;\n    }\n\n    public String readFile() {\n        BufferedReader reader = null;\n        try {\n            reader = new BufferedReader(new FileReader(\"src/main/resources/input.txt\"));\n            String content = readAllLines(reader);\n            return content;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        } finally {\n            try {\n                if (reader != null) {\n                    reader.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public String readFileTryWithResources() {\n        try (BufferedReader reader = new BufferedReader(new FileReader(\"src/main/resources/input.txt\"))) {\n            String content = readAllLines(reader);\n            return content;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.bufferedreader;\n\nimport org.junit.Test;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class BufferedReaderExampleUnitTest {\n\n    private static final String FILE_PATH = \"src/main/resources/input.txt\";\n\n    @Test\n    public void givenBufferedReader_whenReadAllLines_thenReturnsContent() throws IOException {\n        BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH));\n\n        BufferedReaderExample bre = new BufferedReaderExample();\n        String content = bre.readAllLines(reader);\n\n        assertThat(content).isNotEmpty();\n        assertThat(content).contains(\"Lorem ipsum\");\n    }\n\n    @Test\n    public void givenBufferedReader_whenReadAllLinesWithStream_thenReturnsContent() throws IOException {\n        BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH));\n\n        BufferedReaderExample bre = new BufferedReaderExample();\n        String content = bre.readAllLinesWithStream(reader);\n\n        assertThat(content).isNotEmpty();\n        assertThat(content).contains(\"Lorem ipsum\");\n    }\n\n    @Test\n    public void whenReadFile_thenReturnsContent() {\n        BufferedReaderExample bre = new BufferedReaderExample();\n        String content = bre.readFile();\n\n        assertThat(content.toString()).contains(\"Lorem ipsum\");\n    }\n\n    @Test\n    public void givenBufferedReader_whenReadAllCharsOneByOne_thenReturnsContent() throws IOException {\n        BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH));\n\n        BufferedReaderExample bre = new BufferedReaderExample();\n        String content = bre.readAllCharsOneByOne(reader);\n\n        assertThat(content).isNotEmpty();\n        assertThat(content).contains(\"Lorem ipsum\");\n    }\n\n    @Test\n    public void givenBufferedReader_whenReadMultipleChars_thenReturnsContent() throws IOException {\n        BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH));\n\n        BufferedReaderExample bre = new BufferedReaderExample();\n        String content = bre.readMultipleChars(reader);\n\n        assertThat(content).isNotEmpty();\n        assertThat(content).isEqualTo(\"Lorem\");\n    }\n\n    @Test\n    public void whenReadFileTryWithResources_thenReturnsContent() {\n        BufferedReaderExample bre = new BufferedReaderExample();\n        String content = bre.readFileTryWithResources();\n\n        assertThat(content.toString()).contains(\"Lorem ipsum\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.filereader;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.Reader;\n\npublic class FileReaderExample {\n\n    public static String readAllCharactersOneByOne(Reader reader) throws IOException {\n        StringBuilder content = new StringBuilder();\n        int nextChar;\n        while ((nextChar = reader.read()) != -1) {\n            content.append((char) nextChar);\n        }\n        return String.valueOf(content);\n    }\n\n    public static String readMultipleCharacters(Reader reader, int length) throws IOException {\n        char[] buffer = new char[length];\n        int charactersRead = reader.read(buffer, 0, length);\n\n\n        if (charactersRead != -1) {\n            return new String(buffer, 0, charactersRead);\n        } else {\n            return \"\";\n        }\n    }\n\n    public static String readFile(String path) {\n        FileReader fileReader = null;\n        try {\n            fileReader = new FileReader(path);\n            return readAllCharactersOneByOne(fileReader);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (fileReader != null) {\n                try {\n                    fileReader.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return null;\n    }\n\n    public static String readFileUsingTryWithResources(String path) {\n        try (FileReader fileReader = new FileReader(path)) {\n            return readAllCharactersOneByOne(fileReader);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n\n}", "test_case": "package com.baeldung.filereader;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class FileReaderExampleUnitTest {\n\n\n    private static final String FILE_PATH = \"src/test/resources/HelloWorld.txt\";\n\n\n    @Test\n    public void givenFileReader_whenReadAllCharacters_thenReturnsContent() throws IOException {\n        String expectedText = \"Hello, World!\";\n        File file = new File(FILE_PATH);\n        try (FileReader fileReader = new FileReader(file)) {\n            String content = FileReaderExample.readAllCharactersOneByOne(fileReader);\n            Assert.assertEquals(expectedText, content);\n        }\n    }\n\n    @Test\n    public void givenFileReader_whenReadMultipleCharacters_thenReturnsContent() throws IOException {\n        String expectedText = \"Hello\";\n        File file = new File(FILE_PATH);\n        try (FileReader fileReader = new FileReader(file)) {\n            String content = FileReaderExample.readMultipleCharacters(fileReader, 5);\n            Assert.assertEquals(expectedText, content);\n        }\n    }\n\n    @Test\n    public void whenReadFile_thenReturnsContent() {\n        String expectedText = \"Hello, World!\";\n        String content = FileReaderExample.readFile(FILE_PATH);\n        Assert.assertEquals(expectedText, content);\n    }\n\n    @Test\n    public void whenReadFileUsingTryWithResources_thenReturnsContent() {\n        String expectedText = \"Hello, World!\";\n        String content = FileReaderExample.readFileUsingTryWithResources(FILE_PATH);\n        Assert.assertEquals(expectedText, content);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.outputstream;\n\nimport java.io.*;\n\npublic class OutputStreamExamples {\n\n    public void fileOutputStreamByteSequence(String file, String data) throws IOException {\n        byte[] bytes = data.getBytes();\n        try (OutputStream out = new FileOutputStream(file)) {\n            out.write(bytes);\n        }\n    }\n\n    public void fileOutputStreamByteSubSequence(String file, String data) throws IOException {\n        byte[] bytes = data.getBytes();\n        try (OutputStream out = new FileOutputStream(file)) {\n            out.write(bytes, 6, 5);\n        }\n    }\n\n    public void fileOutputStreamByteSingle(String file, String data) throws IOException {\n        byte[] bytes = data.getBytes();\n        try (OutputStream out = new FileOutputStream(file)) {\n            out.write(bytes[6]);\n        }\n    }\n\n    public void bufferedOutputStream(String file, String... data) throws IOException {\n        try (BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file))) {\n            for (String s : data) {\n                out.write(s.getBytes());\n                out.write(\" \".getBytes());\n            }\n        }\n    }\n\n    public void outputStreamWriter(String file, String data) throws IOException {\n        try (OutputStream out = new FileOutputStream(file); Writer writer = new OutputStreamWriter(out, \"UTF-8\")) {\n            writer.write(data);\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.outputstream;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.File;\nimport java.io.IOException;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class OutputStreamExamplesUnitTest {\n    \n    StringBuilder filePath = new StringBuilder();\n    \n    @Before\n    public void init() {\n        filePath.append(\"src\");\n        filePath.append(File.separator);\n        filePath.append(\"test\");\n        filePath.append(File.separator);\n        filePath.append(\"resources\");\n        filePath.append(File.separator);\n        filePath.append(\"output_file.txt\");\n    }\n    \n    @Test\n    public void givenOutputStream_whenWriteSingleByteCalled_thenOutputCreated() throws IOException {\n        \n        final File file = new File(filePath.toString());    \n        OutputStreamExamples examples = new OutputStreamExamples();    \n        examples.fileOutputStreamByteSingle(filePath.toString(), \"Hello World!\");\n        assertTrue(file.exists());\n        file.delete();\n    }\n    \n    @Test\n    public void givenOutputStream_whenWriteByteSequenceCalled_thenOutputCreated() throws IOException {\n        \n        final File file = new File(filePath.toString());    \n        OutputStreamExamples examples = new OutputStreamExamples();    \n        examples.fileOutputStreamByteSequence(filePath.toString(), \"Hello World!\");\n        assertTrue(file.exists());\n        file.delete();\n    }\n    \n    @Test\n    public void givenOutputStream_whenWriteByteSubSequenceCalled_thenOutputCreated() throws IOException {\n        \n        final File file = new File(filePath.toString());    \n        OutputStreamExamples examples = new OutputStreamExamples();    \n        examples.fileOutputStreamByteSubSequence(filePath.toString(), \"Hello World!\");\n        assertTrue(file.exists());\n        file.delete();\n    }\n\n    @Test\n    public void givenBufferedOutputStream_whenCalled_thenOutputCreated() throws IOException {\n        \n        final File file = new File(filePath.toString());    \n        OutputStreamExamples examples = new OutputStreamExamples();    \n        examples.bufferedOutputStream(filePath.toString(), \"Hello\", \"World!\");\n        assertTrue(file.exists());\n        file.delete();\n    }\n    \n    @Test\n    public void givenOutputStreamWriter_whenCalled_thenOutputCreated() throws IOException {\n        \n        final File file = new File(filePath.toString());    \n        OutputStreamExamples examples = new OutputStreamExamples();    \n        examples.outputStreamWriter(filePath.toString(), \"Hello World!\");\n        assertTrue(file.exists());\n        file.delete();\n    }\n\n}\n"}
{"code_source": "package com.baeldung.csv;\n\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class WriteCsvFileExample {\n\n    public String convertToCSV(String[] data) {\n        return Stream.of(data)\n            .map(this::escapeSpecialCharacters)\n            .collect(Collectors.joining(\",\"));\n    }\n\n    public String escapeSpecialCharacters(String data) {\n        String escapedData = data.replaceAll(\"\\\\R\", \" \");\n        if (data.contains(\",\") || data.contains(\"\\\"\") || data.contains(\"'\")) {\n            data = data.replace(\"\\\"\", \"\\\"\\\"\");\n            escapedData = \"\\\"\" + data + \"\\\"\";\n        }\n        return escapedData;\n    }\n}\n", "test_case": "package com.baeldung.csv;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\npublic class WriteCsvFileExampleUnitTest {\n    private static final Logger LOG = LoggerFactory.getLogger(WriteCsvFileExampleUnitTest.class);\n\n    private WriteCsvFileExample csvExample;\n\n    @Before\n    public void setupClass() {\n        csvExample = new WriteCsvFileExample();\n    }\n\n    @Test\n    public void givenCommaContainingData_whenEscapeSpecialCharacters_stringReturnedInQuotes() {\n        String data = \"three,two,one\";\n        String escapedData = csvExample.escapeSpecialCharacters(data);\n\n        String expectedData = \"\\\"three,two,one\\\"\";\n        assertEquals(expectedData, escapedData);\n    }\n\n    @Test\n    public void givenQuoteContainingData_whenEscapeSpecialCharacters_stringReturnedFormatted() {\n        String data = \"She said \\\"Hello\\\"\";\n        String escapedData = csvExample.escapeSpecialCharacters(data);\n\n        String expectedData = \"\\\"She said \\\"\\\"Hello\\\"\\\"\\\"\";\n        assertEquals(expectedData, escapedData);\n    }\n\n    @Test\n    public void givenNewlineContainingData_whenEscapeSpecialCharacters_stringReturnedInQuotes() {\n        String dataNewline = \"This contains\\na newline\";\n        String dataCarriageReturn = \"This contains\\r\\na newline and carriage return\";\n        String escapedDataNl = csvExample.escapeSpecialCharacters(dataNewline);\n        String escapedDataCr = csvExample.escapeSpecialCharacters(dataCarriageReturn);\n\n        String expectedData = \"This contains a newline\";\n        assertEquals(expectedData, escapedDataNl);\n        String expectedDataCr = \"This contains a newline and carriage return\";\n        assertEquals(expectedDataCr, escapedDataCr);\n    }\n\n    @Test\n    public void givenNonSpecialData_whenEscapeSpecialCharacters_stringReturnedUnchanged() {\n        String data = \"This is nothing special\";\n        String returnedData = csvExample.escapeSpecialCharacters(data);\n\n        assertEquals(data, returnedData);\n    }\n\n    @Test\n    public void givenDataArray_whenConvertToCSV_thenOutputCreated() throws IOException {\n        List<String[]> dataLines = new ArrayList<String[]>();\n        dataLines.add(new String[] { \"John\", \"Doe\", \"38\", \"Comment Data\\nAnother line of comment data\" });\n        dataLines.add(new String[] { \"Jane\", \"Doe, Jr.\", \"19\", \"She said \\\"I'm being quoted\\\"\" });\n\n        File csvOutputFile = File.createTempFile(\"exampleOutput\", \".csv\");\n        try (PrintWriter pw = new PrintWriter(csvOutputFile)) {\n            dataLines.stream()\n                .map(csvExample::convertToCSV)\n                .forEach(pw::println);\n        } catch (FileNotFoundException e) {\n            LOG.error(\"IOException \" + e.getMessage());\n        }\n\n        assertTrue(csvOutputFile.exists());\n        csvOutputFile.deleteOnExit();\n    }\n}\n"}
{"code_source": "package com.baeldung.jar;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.Enumeration;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.jar.JarEntry;\nimport java.util.jar.JarFile;\n\npublic class GetClassNamesFromJar {\n\n    public static Set<String> getClassNamesFromJarFile(File givenFile) throws IOException {\n        Set<String> classNames = new HashSet<>();\n        try (JarFile jarFile = new JarFile(givenFile)) {\n            Enumeration<JarEntry> e = jarFile.entries();\n            while (e.hasMoreElements()) {\n                JarEntry jarEntry = e.nextElement();\n                if (jarEntry.getName().endsWith(\".class\")) {\n                    String className = jarEntry.getName()\n                      .replace(\"/\", \".\")\n                      .replace(\".class\", \"\");\n                    classNames.add(className);\n                }\n            }\n            return classNames;\n        }\n    }\n\n    public static Set<Class> getClassesFromJarFile(File jarFile) throws IOException, ClassNotFoundException {\n        Set<String> classNames = getClassNamesFromJarFile(jarFile);\n        Set<Class> classes = new HashSet<>(classNames.size());\n        try (URLClassLoader cl = URLClassLoader.newInstance(new URL[] { new URL(\"jar:file:\" + jarFile + \"!/\") })) {\n            for (String name : classNames) {\n                Class clazz = cl.loadClass(name); // Loading the class by its name\n                classes.add(clazz);\n            }\n        }\n        return classes;\n    }\n}\n", "test_case": "package com.baeldung.jar;\n\nimport com.google.common.collect.Sets;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URISyntaxException;\nimport java.util.Arrays;\nimport java.util.Objects;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class GetClassNamesFromJarUnitTest {\n    private static final String JAR_PATH = \"example-jar/stripe-0.0.1-SNAPSHOT.jar\";\n    private static final Set<String> EXPECTED_CLASS_NAMES = Sets.newHashSet(\n      \"com.baeldung.stripe.StripeApplication\",\n      \"com.baeldung.stripe.ChargeRequest\",\n      \"com.baeldung.stripe.StripeService\",\n      \"com.baeldung.stripe.ChargeRequest$Currency\",\n      \"com.baeldung.stripe.ChargeController\",\n      \"com.baeldung.stripe.CheckoutController\");\n\n    @Test\n    public void givenJarFilePath_whenLoadClassNames_thenGetClassNames() throws IOException, URISyntaxException {\n        File jarFile = new File(Objects.requireNonNull(getClass().getClassLoader().getResource(JAR_PATH)).toURI());\n        Set<String> classNames = GetClassNamesFromJar.getClassNamesFromJarFile(jarFile);\n        Assert.assertEquals(EXPECTED_CLASS_NAMES, classNames);\n    }\n\n    @Test\n    public void givenJarFilePath_whenLoadClass_thenGetClassObjects() throws IOException, ClassNotFoundException, URISyntaxException {\n        File jarFile = new File(Objects.requireNonNull(getClass().getClassLoader().getResource(JAR_PATH)).toURI());\n        Set<Class> classes = GetClassNamesFromJar.getClassesFromJarFile(jarFile);\n        Set<String> names = classes.stream().map(Class::getName).collect(Collectors.toSet());\n        Assert.assertEquals(EXPECTED_CLASS_NAMES, names);\n    }\n}\n"}
{"code_source": "package com.baeldung.jar;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.net.URL;\n\npublic class JarApp {\n\n    public static String findObjectMapperClass() {\n        Class<ObjectMapper> klass = ObjectMapper.class;\n        URL path = klass.getProtectionDomain().getCodeSource().getLocation();\n        return path.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(findObjectMapperClass());\n    }\n}\n", "test_case": "package com.baeldung.jar;\n\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\n\npublic class JarAppUnitTest {\n\n    @Test\n    public void findClassTest(){\n        Assert.assertTrue(JarApp.findObjectMapperClass().endsWith(\"jackson-databind-2.13.3.jar\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.jar;\n\nimport java.awt.event.*;\nimport java.awt.*;\n\nimport javax.swing.*;\n\npublic class MySampleGUIAppn extends JFrame {\n    public  MySampleGUIAppn() {\n        if (!GraphicsEnvironment.isHeadless()) {\n            setSize(300,300);\n            setTitle(\"MySampleGUIAppn\");\n            Button b = new Button(\"Click Me!\");\n            b.setBounds(30,100,80,30);\n            add(b);\n            setVisible(true);\n            addWindowListener(new WindowAdapter() {\n                public void windowClosing(WindowEvent e) {\n                    dispose();\n                    System.exit(0);\n                }\n            });\n        }\n        else {\n            System.exit(0);\n        }\n    }\n    public static void main(String[] args) {\n        MySampleGUIAppn app=new  MySampleGUIAppn();\n    }\n}\n", "test_case": "package com.baeldung.jar;\n\nimport java.io.IOException;\n\nimport org.junit.jupiter.api.Test;\n\nclass MySampleGUIAppnUnitTest {\n    @Test\n    void testMain() throws IOException {\n        System.setProperty(\"java.awt.headless\", \"true\");\n        String [] args = null;\n        System.exit(0);\n        MySampleGUIAppn.main(args);\n    }\n}"}
{"code_source": "package com.baeldung.jarfile;\n\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.nio.file.Paths;\n\npublic class JarFilePathResolver {\n\n    public String getJarFilePath(Class clazz) {\n        try {\n            return byGetProtectionDomain(clazz);\n        } catch (Exception e) {\n            // cannot get jar file path using byGetProtectionDomain\n            // Exception handling omitted\n        }\n        return byGetResource(clazz);\n    }\n\n    String byGetProtectionDomain(Class clazz) throws URISyntaxException {\n        URL url = clazz.getProtectionDomain().getCodeSource().getLocation();\n        return Paths.get(url.toURI()).toString();\n    }\n\n    String byGetResource(Class clazz) {\n        final URL classResource = clazz.getResource(clazz.getSimpleName() + \".class\");\n        if (classResource == null) {\n            throw new RuntimeException(\"class resource is null\");\n        }\n\n        final String url = classResource.toString();\n        if (url.startsWith(\"jar:file:\")) {\n            // extract 'file:......jarName.jar' part from the url string\n            String path = url.replaceAll(\"^jar:(file:.*[.]jar)!/.*\", \"$1\");\n            try {\n                return Paths.get(new URL(path).toURI()).toString();\n            } catch (Exception e) {\n                throw new RuntimeException(\"Invalid Jar File URL String\");\n            }\n        }\n        throw new RuntimeException(\"Invalid Jar File URL String\");\n    }\n}\n", "test_case": "package com.baeldung.jarfile;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport com.google.common.base.Ascii;\nimport java.io.File;\nimport java.net.URISyntaxException;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Spy;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\nclass JarFilePathResolverUnitTest {\n    @Spy\n    JarFilePathResolver jarFilePathResolver;\n\n    @Test\n    void givenClassObjectWhenCallingByGetProtectionDomainShouldGetExpectedPath() throws Exception {\n        String jarPath = jarFilePathResolver.byGetProtectionDomain(Ascii.class);\n        assertThat(jarPath).endsWith(\".jar\").contains(\"guava\");\n        assertThat(new File(jarPath)).exists();\n    }\n\n    @Test\n    void givenClassObjectWhenCallingByGetResourceShouldGetExpectedPath() {\n        String jarPath = jarFilePathResolver.byGetResource(Ascii.class);\n        assertThat(jarPath).endsWith(\".jar\").contains(\"guava\");\n        assertThat(new File(jarPath)).exists();\n    }\n\n    @Test\n    void givenClassObjectWhenNoSecurityExceptionRaisedShouldGetExpectedPath() throws URISyntaxException {\n        String jarPath = jarFilePathResolver.getJarFilePath(Ascii.class);\n        assertThat(jarPath).endsWith(\".jar\").contains(\"guava\");\n        assertThat(new File(jarPath)).exists();\n        verify(jarFilePathResolver, times(1)).byGetProtectionDomain(Ascii.class);\n        verify(jarFilePathResolver, never()).byGetResource(Ascii.class);\n    }\n\n    @Test\n    void givenClassObjectWhenSecurityExceptionRaisedShouldGetExpectedPath() throws URISyntaxException {\n        when(jarFilePathResolver.byGetProtectionDomain(Ascii.class)).thenThrow(new SecurityException(\"not allowed\"));\n        String jarPath = jarFilePathResolver.getJarFilePath(Ascii.class);\n        assertThat(jarPath).endsWith(\".jar\").contains(\"guava\");\n        assertThat(new File(jarPath)).exists();\n        verify(jarFilePathResolver, times(1)).byGetProtectionDomain(Ascii.class);\n        verify(jarFilePathResolver, times(1)).byGetResource(Ascii.class);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.manifest;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class ExecuteJarFile {\n\n    private static final String DELIMITER = \" \";\n    private static final String WORK_PATH = \"src/main/java/com/baeldung/manifest\";\n    private static final String MANIFEST_MF_PATH = WORK_PATH + \"/MANIFEST.MF\";\n    private static final String MAIN_MANIFEST_ATTRIBUTE = \"Main-Class: com.baeldung.manifest.AppExample\";\n\n    private static final String COMPILE_COMMAND = \"javac -d . AppExample.java\";\n    private static final String CREATE_JAR_WITHOUT_MF_ATT_COMMAND = \"jar cvf example.jar com/baeldung/manifest/AppExample.class\";\n    private static final String CREATE_JAR_WITH_MF_ATT_COMMAND = \"jar cvmf MANIFEST.MF example.jar com/baeldung/manifest/AppExample.class\";\n    private static final String EXECUTE_JAR_COMMAND = \"java -jar example.jar\";\n\n    public static void main(String[] args) {\n        System.out.println(executeJarWithoutManifestAttribute());\n        System.out.println(executeJarWithManifestAttribute());\n    }\n\n    public static String executeJarWithoutManifestAttribute() {\n        return executeJar(CREATE_JAR_WITHOUT_MF_ATT_COMMAND);\n    }\n\n    public static String executeJarWithManifestAttribute() {\n        createManifestFile();\n        return executeJar(CREATE_JAR_WITH_MF_ATT_COMMAND);\n    }\n\n    private static void createManifestFile() {\n        BufferedWriter writer;\n        try {\n            writer = new BufferedWriter(new FileWriter(MANIFEST_MF_PATH));\n            writer.write(MAIN_MANIFEST_ATTRIBUTE);\n            writer.newLine();\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static String executeJar(String createJarCommand) {\n        executeCommand(COMPILE_COMMAND);\n        executeCommand(createJarCommand);\n        return executeCommand(EXECUTE_JAR_COMMAND);\n    }\n\n    private static String executeCommand(String command) {\n        String output = null;\n        try {\n            output = collectOutput(runProcess(command));\n        } catch (Exception ex) {\n            System.out.println(ex);\n        }\n        return output;\n    }\n\n    private static String collectOutput(Process process) throws IOException {\n        StringBuffer output = new StringBuffer();\n        BufferedReader outputReader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        String line = \"\";\n        while ((line = outputReader.readLine()) != null) {\n            output.append(line + \"\\n\");\n        }\n        return output.toString();\n    }\n\n    private static Process runProcess(String command) throws IOException, InterruptedException {\n        ProcessBuilder builder = new ProcessBuilder(command.split(DELIMITER));\n        builder.directory(new File(WORK_PATH).getAbsoluteFile());\n        builder.redirectErrorStream(true);\n        Process process = builder.start();\n        process.waitFor();\n        return process;\n    }\n\n}\n", "test_case": "package com.baeldung.manifest;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\npublic class ExecuteJarFileUnitTest {\n\n    private static final String ERROR_MESSAGE = \"no main manifest attribute, in example.jar\\n\";\n    private static final String SUCCESS_MESSAGE = \"AppExample executed!\\n\";\n\n    @Test\n    public final void givenDefaultManifest_whenManifestAttributeIsNotPresent_thenGetErrorMessage() {\n        String output = ExecuteJarFile.executeJarWithoutManifestAttribute();\n        assertEquals(ERROR_MESSAGE, output);\n    }\n\n    @Test\n    public final void givenCustomManifest_whenManifestAttributeIsPresent_thenGetSuccessMessage() {\n        String output = ExecuteJarFile.executeJarWithManifestAttribute();\n        assertEquals(SUCCESS_MESSAGE, output);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.jndi.ldap.connection.tool;\n\nimport java.util.Hashtable;\n\nimport javax.naming.Context;\nimport javax.naming.NamingEnumeration;\nimport javax.naming.NamingException;\nimport javax.naming.directory.Attribute;\nimport javax.naming.directory.Attributes;\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.InitialDirContext;\n\npublic class LdapConnectionTool {\n    private static final boolean DEBUG_MODE = Boolean.parseBoolean(System.getProperty(\"debug.mode\", \"false\"));\n    private static final String QUERY = \"query\";\n\n    public static void main(String[] args) throws NamingException {\n        execute();\n    }\n\n    public static void execute() throws NamingException {\n        Hashtable<String, String> env = createEnvironmentFromProperties();\n\n        DirContext context = null;\n        try {\n            context = connectToServer(env);\n\n            String query = env.get(LdapConnectionTool.QUERY);\n            if (query != null) {\n                executeQuery(context, query);\n            }\n        } catch (NamingException e) {\n            showErrorMessage(e);\n        } finally {\n            close(context);\n        }\n    }\n\n    private static void close(DirContext context) throws NamingException {\n        if (context != null) {\n            try {\n                context.close();\n            } catch (NamingException e) {\n                System.out.println(e.getMessage());\n\n                if (DEBUG_MODE)\n                    throw e;\n            }\n        }\n    }\n\n    private static void showErrorMessage(NamingException e) throws NamingException {\n        System.out.println(e.getClass() + \": \" + e.getMessage());\n        Throwable cause = e.getRootCause();\n        if (cause != null) {\n            System.out.println(cause.getClass() + \": \" + cause.getMessage());\n        }\n\n        if (DEBUG_MODE)\n            throw e;\n    }\n\n    private static DirContext connectToServer(Hashtable<String, String> env) throws NamingException {\n        String url = env.get(Context.PROVIDER_URL);\n\n        System.out.println(\"connecting to \" + url + \"...\");\n        DirContext context = new InitialDirContext(env);\n        System.out.println(\"successfully connected to \" + url);\n        return context;\n    }\n\n    private static void executeQuery(DirContext context, String query) throws NamingException {\n        Attributes attributes = context.getAttributes(query);\n        NamingEnumeration<? extends Attribute> all = attributes.getAll();\n        while (all.hasMoreElements()) {\n            Attribute next = all.next();\n\n            String key = next.getID();\n            Object value = next.get();\n\n            System.out.println(key + \"=\" + value);\n        }\n    }\n\n    private static Hashtable<String, String> createEnvironmentFromProperties() {\n        String factory = System.getProperty(\"factory\", \"com.sun.jndi.ldap.LdapCtxFactory\");\n        String authType = System.getProperty(\"authType\", \"none\");\n        String url = System.getProperty(\"url\");\n        String user = System.getProperty(\"user\");\n        String password = System.getProperty(\"password\");\n        String query = System.getProperty(QUERY, user);\n\n        if (url == null) {\n            throw new IllegalArgumentException(\"please provide 'url' system property\");\n        }\n\n        Hashtable<String, String> env = new Hashtable<>();\n        env.put(Context.INITIAL_CONTEXT_FACTORY, factory);\n        env.put(\"com.sun.jndi.ldap.read.timeout\", \"5000\");\n        env.put(\"com.sun.jndi.ldap.connect.timeout\", \"5000\");\n        env.put(Context.SECURITY_AUTHENTICATION, authType);\n        env.put(Context.PROVIDER_URL, url);\n        if (query != null) {\n            env.put(LdapConnectionTool.QUERY, query);\n        }\n\n        if (user != null) {\n            if (password == null) {\n                throw new IllegalArgumentException(\"please provide 'password' system property\");\n            }\n            env.put(Context.SECURITY_PRINCIPAL, user);\n            env.put(Context.SECURITY_CREDENTIALS, password);\n        }\n        return env;\n    }\n}\n", "test_case": "package com.baeldung.jndi.ldap.connection.tool;\n\nimport static org.assertj.core.api.Assertions.assertThatCode;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n\nimport javax.naming.NamingException;\n\nimport org.apache.directory.server.annotations.CreateLdapServer;\nimport org.apache.directory.server.annotations.CreateTransport;\nimport org.apache.directory.server.core.annotations.ApplyLdifFiles;\nimport org.apache.directory.server.core.annotations.CreateDS;\nimport org.apache.directory.server.core.annotations.CreatePartition;\nimport org.apache.directory.server.core.integ.AbstractLdapTestUnit;\nimport org.apache.directory.server.core.integ.FrameworkRunner;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\n@RunWith(FrameworkRunner.class)\n@CreateLdapServer(allowAnonymousAccess = true, transports = { @CreateTransport(protocol = \"LDAP\", address = \"localhost\", port = 10389) })\n@CreateDS(allowAnonAccess = true, partitions = { @CreatePartition(name = \"ldap-connection-tool\", suffix = \"dc=baeldung,dc=com\") })\n@ApplyLdifFiles({ \"ldap-connection-tool.ldif\" })\n// class marked as manual test, as it has to run independently of other unit tests in the module\npublic class LdapConnectionToolManualTest extends AbstractLdapTestUnit {\n    @Before\n    public void init() {\n        System.setProperty(\"debug.mode\", \"true\");\n        System.clearProperty(\"url\");\n        System.clearProperty(\"user\");\n        System.clearProperty(\"password\");\n        System.clearProperty(\"query\");\n    }\n\n    @Test\n    public void whenNoUrlProvided_thenConnectionFails() throws Exception {\n        assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> LdapConnectionTool.execute());\n    }\n\n    @Test\n    public void givenUrlProvided_whenValidUrl_thenConnectionSucceeds() throws Exception {\n        System.setProperty(\"url\", \"ldap://localhost:10389\");\n\n        assertThatCode(() -> LdapConnectionTool.execute()).doesNotThrowAnyException();\n    }\n\n    @Test\n    public void givenUrlProvided_whenInvalidUrl_thenConnectionFails() throws Exception {\n        System.setProperty(\"url\", \"ldap://unkownhost:10389\");\n\n        assertThatExceptionOfType(NamingException.class).isThrownBy(() -> LdapConnectionTool.execute());\n    }\n\n    @Test\n    public void givenUserProvided_whenCorrectPassword_thenConnectionSucceeds() throws Exception {\n        System.setProperty(\"url\", \"ldap://localhost:10389\");\n        System.setProperty(\"user\", \"uid=gauss,dc=baeldung,dc=com\");\n        System.setProperty(\"password\", \"password\");\n\n        assertThatCode(() -> LdapConnectionTool.execute()).doesNotThrowAnyException();\n    }\n\n    @Test\n    public void givenUserProvided_whenPasswordIsNull_thenConnectionFails() throws Exception {\n        System.setProperty(\"url\", \"ldap://localhost:10389\");\n        System.setProperty(\"user\", \"uid=gauss,dc=baeldung,dc=com\");\n\n        assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> LdapConnectionTool.execute());\n    }\n\n    @Test\n    public void whenOnlyValidQueryProvided_thenConnectionSucceeds() throws Exception {\n        System.setProperty(\"url\", \"ldap://localhost:10389\");\n        System.setProperty(\"query\", \"uid=gauss,dc=baeldung,dc=com\");\n\n        assertThatCode(() -> LdapConnectionTool.execute()).doesNotThrowAnyException();\n    }\n\n    @Test\n    public void givenUserProvided_whenQueryProvided_thenConnectionSucceeds() throws Exception {\n        System.setProperty(\"url\", \"ldap://localhost:10389\");\n        System.setProperty(\"user\", \"uid=gauss,dc=baeldung,dc=com\");\n        System.setProperty(\"password\", \"password\");\n        System.setProperty(\"query\", \"uid=newton,dc=baeldung,dc=com\");\n\n        assertThatCode(() -> LdapConnectionTool.execute()).doesNotThrowAnyException();\n    }\n}\n"}
{"code_source": "package com.baeldung.classloader;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class CustomClassLoader extends ClassLoader {\n\n    @Override\n    public Class findClass(String name) throws ClassNotFoundException {\n        byte[] b = loadClassFromFile(name);\n        return defineClass(name, b, 0, b.length);\n    }\n\n    private byte[] loadClassFromFile(String fileName)  {\n        InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\n                fileName.replace('.', File.separatorChar) + \".class\");\n        byte[] buffer;\n        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n        int nextValue = 0;\n        try {\n            while ( (nextValue = inputStream.read()) != -1 ) {\n                byteStream.write(nextValue);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        buffer = byteStream.toByteArray();\n        return buffer;\n    }\n}\n", "test_case": "package com.baeldung.classloader;\n\nimport org.junit.Test;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\npublic class CustomClassLoaderUnitTest {\n\n    @Test\n    public void customLoader() throws ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n\n        CustomClassLoader customClassLoader = new CustomClassLoader();\n        Class<?> c = customClassLoader.findClass(PrintClassLoader.class.getName());\n\n        Object ob = c.newInstance();\n\n        Method md = c.getMethod(\"printClassLoaders\");\n        md.invoke(ob);\n\n    }\n\n}\n"}
{"code_source": "package com.baeldung.classloader;\n\nimport com.sun.javafx.util.Logging;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.ArrayList;\n\npublic class PrintClassLoader {\n\n    public void printClassLoaders() throws ClassNotFoundException {\n\n        System.out.println(\"Classloader of this class:\" + PrintClassLoader.class.getClassLoader());\n        System.out.println(\"Classloader of Logging:\" + Logging.class.getClassLoader());\n        System.out.println(\"Classloader of ArrayList:\" + ArrayList.class.getClassLoader());\n\n    }\n}\n", "test_case": "package com.baeldung.classloader;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class PrintClassLoaderUnitTest {\n    @Test(expected = ClassNotFoundException.class)\n    public void givenAppClassLoader_whenParentClassLoader_thenClassNotFoundException() throws Exception {\n        PrintClassLoader sampleClassLoader = (PrintClassLoader) Class.forName(PrintClassLoader.class.getName()).newInstance();\n        sampleClassLoader.printClassLoaders();\n        Class.forName(PrintClassLoader.class.getName(), true, PrintClassLoader.class.getClassLoader().getParent());\n    }\n}"}
{"code_source": "package com.baeldung.inlining;\n\npublic class ConsecutiveNumbersSum {\n\n    private long totalSum;\n    private int totalNumbers;\n\n    public ConsecutiveNumbersSum(int totalNumbers) {\n        this.totalNumbers = totalNumbers;\n    }\n\n    public long getTotalSum() {\n        totalSum = 0;\n        for (int i = 1; i <= totalNumbers; i++) {\n            totalSum += i;\n        }\n        return totalSum;\n    }\n}\n", "test_case": "package com.baeldung.inlining;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class ConsecutiveNumbersSumUnitTest {\n\n    private static final int TOTAL_NUMBERS = 10;\n\n    @Test\n    public void givenTotalIntegersNumber_whenSumCalculated_thenEquals() {\n        ConsecutiveNumbersSum consecutiveNumbersSum = new ConsecutiveNumbersSum(TOTAL_NUMBERS);\n        long expectedSum = calculateExpectedSum(TOTAL_NUMBERS);\n\n        assertEquals(expectedSum, consecutiveNumbersSum.getTotalSum());\n    }\n\n    private long calculateExpectedSum(int totalNumbers) {\n        return totalNumbers * (totalNumbers + 1) / 2;\n    }\n}\n"}
{"code_source": "package com.baeldung.loadedclasslisting;\n\nimport java.io.IOException;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\nimport org.reflections.Reflections;\nimport org.reflections.scanners.SubTypesScanner;\n\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.reflect.ClassPath;\nimport com.google.common.reflect.ClassPath.ClassInfo;\n\npublic class ListLoadedClass {\n\n    public ImmutableSet<ClassInfo> listClassLoaded() throws IOException {\n        return ClassPath.from(ListLoadedClass.class.getClassLoader())\n                .getAllClasses();\n    }\n\n    public Set<Class> listClassLoaded(String packageName) throws IOException {\n        return ClassPath.from(ClassLoader.getSystemClassLoader()).getAllClasses().stream()\n                .filter(clazz -> clazz.getPackageName().equals(packageName))\n                .map(ClassInfo::load)\n                .collect(Collectors.toSet());\n    }\n\n    public Set<Class> findAllClassesUsingReflectionsLibrary(String packageName) {\n        Reflections reflections = new Reflections(packageName, new SubTypesScanner(false));\n        return reflections.getSubTypesOf(Object.class)\n               .stream()\n               .collect(Collectors.toSet());\n    }\n    \n}\n", "test_case": "package com.baeldung.loadedclasslisting;\n\nimport java.io.IOException;\nimport java.util.Set;\n\nimport org.junit.Test;\nimport org.junit.jupiter.api.Assertions;\n\nimport com.baeldung.loadedclasslisting.ListLoadedClass;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.reflect.ClassPath;\nimport com.google.common.reflect.ClassPath.ClassInfo;\n\npublic class ListLoadedClassUnitTest {\n\n    private static final String PACKAGE_NAME = \"com.baeldung.loadedclasslisting\";\n\n    @Test\n    public void when_findAllClassesUsingReflectionsLibrary_thenSuccess() {\n        ListLoadedClass instance = new ListLoadedClass();\n        Set<Class> classes = instance.findAllClassesUsingReflectionsLibrary(PACKAGE_NAME);\n\n        Assertions.assertEquals(4, classes.size());\n    }\n\n    @Test\n    public void when_findAllClassesUsingGuavaLibrary_InPackage_thenSuccess() throws IOException {\n        ListLoadedClass instance = new ListLoadedClass();\n        Set<Class> classes = instance.listClassLoaded(PACKAGE_NAME);\n\n        Assertions.assertEquals(4, classes.size());\n    }\n\n    @Test\n    public void when_findAllClassesUsingGuavaLibrary_thenSuccess() throws IOException {\n        ListLoadedClass instance = new ListLoadedClass();\n        Set<ClassInfo> classes = instance.listClassLoaded();\n\n        Assertions.assertTrue(4<classes.size());\n    }\n}\n"}
{"code_source": "package com.baeldung.doublecolon;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.baeldung.doublecolon.function.ComputerPredicate;\n\npublic class ComputerUtils {\n\n    static final ComputerPredicate after2010Predicate = (c) -> (c.getAge() > 2010);\n    static final ComputerPredicate blackPredicate = (c) -> \"black\".equals(c.getColor());\n\n    public static List<Computer> filter(final List<Computer> inventory, final ComputerPredicate p) {\n\n        final List<Computer> result = new ArrayList<>();\n        inventory.stream().filter(p::filter).forEach(result::add);\n\n        return result;\n    }\n\n    static void repair(final Computer computer) {\n        if (computer.getHealty() < 50) {\n            computer.setHealty(100);\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.doublecolon;\n\nimport com.baeldung.doublecolon.function.TriFunction;\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.function.BiFunction;\n\nimport static com.baeldung.doublecolon.ComputerUtils.*;\n\npublic class ComputerUtilsUnitTest {\n\n    @Before\n    public void setup() {\n    }\n\n    @After\n    public void tearDown() {\n    }\n\n    @Test\n    public void testConstructorReference() {\n\n        Computer c1 = new Computer(2015, \"white\");\n        Computer c2 = new Computer(2009, \"black\");\n        Computer c3 = new Computer(2014, \"black\");\n\n        BiFunction<Integer, String, Computer> c4Function = Computer::new;\n        Computer c4 = c4Function.apply(2013, \"white\");\n        BiFunction<Integer, String, Computer> c5Function = Computer::new;\n        Computer c5 = c5Function.apply(2010, \"black\");\n        BiFunction<Integer, String, Computer> c6Function = Computer::new;\n        Computer c6 = c6Function.apply(2008, \"black\");\n\n        List<Computer> inventory = Arrays.asList(c1, c2, c3, c4, c5, c6);\n\n        List<Computer> blackComputer = filter(inventory, blackPredicate);\n        Assert.assertEquals(\"The black Computers are: \", blackComputer.size(), 4);\n\n        List<Computer> after2010Computer = filter(inventory, after2010Predicate);\n        Assert.assertEquals(\"The Computer bought after 2010 are: \", after2010Computer.size(), 3);\n\n        List<Computer> before2011Computer = filter(inventory, c -> c.getAge() < 2011);\n        Assert.assertEquals(\"The Computer bought before 2011 are: \", before2011Computer.size(), 3);\n\n        inventory.sort(Comparator.comparing(Computer::getAge));\n\n        Assert.assertEquals(\"Oldest Computer in inventory\", c6, inventory.get(0));\n\n    }\n\n    @Test\n    public void testStaticMethodReference() {\n\n        Computer c1 = new Computer(2015, \"white\", 35);\n        Computer c2 = new Computer(2009, \"black\", 65);\n        TriFunction<Integer, String, Integer, Computer> c6Function = Computer::new;\n        Computer c3 = c6Function.apply(2008, \"black\", 90);\n\n        List<Computer> inventory = Arrays.asList(c1, c2, c3);\n        inventory.forEach(ComputerUtils::repair);\n\n        Assert.assertEquals(\"Computer repaired\", new Integer(100), c1.getHealty());\n    }\n\n    @Test\n    public void testInstanceMethodArbitraryObjectParticularType() {\n\n        Computer c1 = new Computer(2015, \"white\", 35);\n        Computer c2 = new MacbookPro(2009, \"black\", 65);\n        List<Computer> inventory = Arrays.asList(c1, c2);\n        inventory.forEach(Computer::turnOnPc);\n\n    }\n\n    @Test\n    public void testSuperMethodReference() {\n\n        final TriFunction<Integer, String, Integer, MacbookPro> integerStringIntegerObjectTriFunction = MacbookPro::new;\n        final MacbookPro macbookPro = integerStringIntegerObjectTriFunction.apply(2010, \"black\", 100);\n        Double initialValue = 999.99;\n        final Double actualValue = macbookPro.calculateValue(initialValue);\n        Assert.assertEquals(766.659, actualValue, 0.0);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.java8.lambda.exceptions;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.function.Consumer;\n\npublic class LambdaExceptionWrappers {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(LambdaExceptionWrappers.class);\n\n    public static Consumer<Integer> lambdaWrapper(Consumer<Integer> consumer) {\n        return i -> {\n            try {\n                consumer.accept(i);\n            } catch (ArithmeticException e) {\n                LOGGER.error(\"Arithmetic Exception occurred.\", e);\n            }\n        };\n    }\n\n    static <T, E extends Exception> Consumer<T> consumerWrapper(Consumer<T> consumer, Class<E> clazz) {\n        return i -> {\n            try {\n                consumer.accept(i);\n            } catch (Exception ex) {\n                try {\n                    E exCast = clazz.cast(ex);\n                    LOGGER.error(\"Exception occurred.\", exCast);\n                } catch (ClassCastException ccEx) {\n                    throw ex;\n                }\n            }\n        };\n    }\n\n    public static <T> Consumer<T> throwingConsumerWrapper(ThrowingConsumer<T, Exception> throwingConsumer) {\n        return i -> {\n            try {\n                throwingConsumer.accept(i);\n            } catch (Exception ex) {\n                throw new RuntimeException(ex);\n            }\n        };\n    }\n\n    public static <T, E extends Exception> Consumer<T> handlingConsumerWrapper(ThrowingConsumer<T, E> throwingConsumer, Class<E> exceptionClass) {\n        return i -> {\n            try {\n                throwingConsumer.accept(i);\n            } catch (Exception ex) {\n                try {\n                    E exCast = exceptionClass.cast(ex);\n                    LOGGER.error(\"Exception occurred.\", exCast);\n                } catch (ClassCastException ccEx) {\n                    throw new RuntimeException(ex);\n                }\n            }\n        };\n    }\n\n}", "test_case": "package com.baeldung.java8.lambda.exceptions;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static com.baeldung.java8.lambda.exceptions.LambdaExceptionWrappers.*;\n\npublic class LambdaExceptionWrappersUnitTest {\n\n    private static final Logger LOG = LoggerFactory.getLogger(LambdaExceptionWrappersUnitTest.class);\n\n    private List<Integer> integers;\n\n    @Before\n    public void init() {\n        integers = Arrays.asList(3, 9, 7, 0, 10, 20);\n    }\n\n    @Test\n    public void whenNoExceptionFromLambdaWrapper_thenSuccess() {\n        integers.forEach(lambdaWrapper(i -> LOG.debug(\"{}\", 50 / i)));\n    }\n\n    @Test\n    public void whenNoExceptionFromConsumerWrapper_thenSuccess() {\n        integers.forEach(consumerWrapper(i -> LOG.debug(\"{}\", 50 / i), ArithmeticException.class));\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void whenExceptionFromThrowingConsumerWrapper_thenSuccess() {\n        integers.forEach(throwingConsumerWrapper(i -> writeToFile(i)));\n    }\n\n    @Test\n    public void whenNoExceptionFromHandlingConsumerWrapper_thenSuccess() {\n        integers.forEach(handlingConsumerWrapper(i -> writeToFile(i), IOException.class));\n    }\n\n    private void writeToFile(Integer i) throws IOException {\n        if (i == 0) {\n            throw new IOException(); // mock IOException\n        }\n    }\n}\n"}
{"code_source": "package com.baeldung.className;\n\npublic class RetrievingClassName {\n\n    public class InnerClass {\n\n    }\n\n}\n", "test_case": "package com.baeldung.className;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNull;\n\npublic class RetrievingClassNameUnitTest {\n\n    // Retrieving Simple Name\n    @Test\n    public void givenRetrievingClassName_whenGetSimpleName_thenRetrievingClassName() {\n        assertEquals(\"RetrievingClassName\", RetrievingClassName.class.getSimpleName());\n    }\n\n    @Test\n    public void givenPrimitiveInt_whenGetSimpleName_thenInt() {\n        assertEquals(\"int\", int.class.getSimpleName());\n    }\n\n    @Test\n    public void givenRetrievingClassNameArray_whenGetSimpleName_thenRetrievingClassNameWithBrackets() {\n        assertEquals(\"RetrievingClassName[]\", RetrievingClassName[].class.getSimpleName());\n        assertEquals(\"RetrievingClassName[][]\", RetrievingClassName[][].class.getSimpleName());\n    }\n\n    @Test\n    public void givenAnonymousClass_whenGetSimpleName_thenEmptyString() {\n        assertEquals(\"\", new RetrievingClassName() {}.getClass().getSimpleName());\n    }\n\n    // Retrieving Other Names\n    // - Primitive Types\n    @Test\n    public void givenPrimitiveInt_whenGetName_thenInt() {\n        assertEquals(\"int\", int.class.getName());\n    }\n\n    @Test\n    public void givenPrimitiveInt_whenGetTypeName_thenInt() {\n        assertEquals(\"int\", int.class.getTypeName());\n    }\n\n    @Test\n    public void givenPrimitiveInt_whenGetCanonicalName_thenInt() {\n        assertEquals(\"int\", int.class.getCanonicalName());\n    }\n\n    // - Object Types\n    @Test\n    public void givenRetrievingClassName_whenGetName_thenCanonicalName() {\n        assertEquals(\"com.baeldung.className.RetrievingClassName\", RetrievingClassName.class.getName());\n    }\n\n    @Test\n    public void givenRetrievingClassName_whenGetTypeName_thenCanonicalName() {\n        assertEquals(\"com.baeldung.className.RetrievingClassName\", RetrievingClassName.class.getTypeName());\n    }\n\n    @Test\n    public void givenRetrievingClassName_whenGetCanonicalName_thenCanonicalName() {\n        assertEquals(\"com.baeldung.className.RetrievingClassName\", RetrievingClassName.class.getCanonicalName());\n    }\n\n    // - Inner Classes\n    @Test\n    public void givenRetrievingClassNameInnerClass_whenGetName_thenCanonicalNameWithDollarSeparator() {\n        assertEquals(\"com.baeldung.className.RetrievingClassName$InnerClass\", RetrievingClassName.InnerClass.class.getName());\n    }\n\n    @Test\n    public void givenRetrievingClassNameInnerClass_whenGetTypeName_thenCanonicalNameWithDollarSeparator() {\n        assertEquals(\"com.baeldung.className.RetrievingClassName$InnerClass\", RetrievingClassName.InnerClass.class.getTypeName());\n    }\n\n    @Test\n    public void givenRetrievingClassNameInnerClass_whenGetCanonicalName_thenCanonicalName() {\n        assertEquals(\"com.baeldung.className.RetrievingClassName.InnerClass\", RetrievingClassName.InnerClass.class.getCanonicalName());\n    }\n\n    // - Anonymous Classes\n    @Test\n    public void givenAnonymousClass_whenGetName_thenCallingClassCanonicalNameWithDollarSeparatorAndCountNumber() {\n        // These are the second and third appearences of an anonymous class in RetrievingClassNameUnitTest, hence $2 and $3 expectations\n        assertEquals(\"com.baeldung.className.RetrievingClassNameUnitTest$2\", new RetrievingClassName() {}.getClass().getName());\n        assertEquals(\"com.baeldung.className.RetrievingClassNameUnitTest$3\", new RetrievingClassName() {}.getClass().getName());\n    }\n\n    @Test\n    public void givenAnonymousClass_whenGetTypeName_thenCallingClassCanonicalNameWithDollarSeparatorAndCountNumber() {\n        // These are the fourth and fifth appearences of an anonymous class in RetrievingClassNameUnitTest, hence $4 and $5 expectations\n        assertEquals(\"com.baeldung.className.RetrievingClassNameUnitTest$4\", new RetrievingClassName() {}.getClass().getTypeName());\n        assertEquals(\"com.baeldung.className.RetrievingClassNameUnitTest$5\", new RetrievingClassName() {}.getClass().getTypeName());\n    }\n\n    @Test\n    public void givenAnonymousClass_whenGetCanonicalName_thenNull() {\n        assertNull(new RetrievingClassName() {}.getClass().getCanonicalName());\n    }\n\n    // - Arrays\n    @Test\n    public void givenPrimitiveIntArray_whenGetName_thenOpeningBracketsAndPrimitiveIntLetter() {\n        assertEquals(\"[I\", int[].class.getName());\n        assertEquals(\"[[I\", int[][].class.getName());\n    }\n\n    @Test\n    public void givenRetrievingClassNameArray_whenGetName_thenOpeningBracketsLetterLAndRetrievingClassNameGetName() {\n        assertEquals(\"[Lcom.baeldung.className.RetrievingClassName;\", RetrievingClassName[].class.getName());\n        assertEquals(\"[[Lcom.baeldung.className.RetrievingClassName;\", RetrievingClassName[][].class.getName());\n    }\n\n    @Test\n    public void givenRetrievingClassNameInnerClassArray_whenGetName_thenOpeningBracketsLetterLAndRetrievingClassNameInnerClassGetName() {\n        assertEquals(\"[Lcom.baeldung.className.RetrievingClassName$InnerClass;\", RetrievingClassName.InnerClass[].class.getName());\n        assertEquals(\"[[Lcom.baeldung.className.RetrievingClassName$InnerClass;\", RetrievingClassName.InnerClass[][].class.getName());\n    }\n\n    @Test\n    public void givenPrimitiveIntArray_whenGetTypeName_thenPrimitiveIntGetTypeNameWithBrackets() {\n        assertEquals(\"int[]\", int[].class.getTypeName());\n        assertEquals(\"int[][]\", int[][].class.getTypeName());\n    }\n\n    @Test\n    public void givenRetrievingClassNameArray_whenGetTypeName_thenRetrievingClassNameGetTypeNameWithBrackets() {\n        assertEquals(\"com.baeldung.className.RetrievingClassName[]\", RetrievingClassName[].class.getTypeName());\n        assertEquals(\"com.baeldung.className.RetrievingClassName[][]\", RetrievingClassName[][].class.getTypeName());\n    }\n\n    @Test\n    public void givenRetrievingClassNameInnerClassArray_whenGetTypeName_thenRetrievingClassNameInnerClassGetTypeNameWithBrackets() {\n        assertEquals(\"com.baeldung.className.RetrievingClassName$InnerClass[]\", RetrievingClassName.InnerClass[].class.getTypeName());\n        assertEquals(\"com.baeldung.className.RetrievingClassName$InnerClass[][]\", RetrievingClassName.InnerClass[][].class.getTypeName());\n    }\n\n    @Test\n    public void givenPrimitiveIntArray_whenGetCanonicalName_thenPrimitiveIntGetCanonicalNameWithBrackets() {\n        assertEquals(\"int[]\", int[].class.getCanonicalName());\n        assertEquals(\"int[][]\", int[][].class.getCanonicalName());\n    }\n\n    @Test\n    public void givenRetrievingClassNameArray_whenGetCanonicalName_thenRetrievingClassNameGetCanonicalNameWithBrackets() {\n        assertEquals(\"com.baeldung.className.RetrievingClassName[]\", RetrievingClassName[].class.getCanonicalName());\n        assertEquals(\"com.baeldung.className.RetrievingClassName[][]\", RetrievingClassName[][].class.getCanonicalName());\n    }\n\n    @Test\n    public void givenRetrievingClassNameInnerClassArray_whenGetCanonicalName_thenRetrievingClassNameInnerClassGetCanonicalNameWithBrackets() {\n        assertEquals(\"com.baeldung.className.RetrievingClassName.InnerClass[]\", RetrievingClassName.InnerClass[].class.getCanonicalName());\n        assertEquals(\"com.baeldung.className.RetrievingClassName.InnerClass[][]\", RetrievingClassName.InnerClass[][].class.getCanonicalName());\n    }\n\n}"}
{"code_source": "package com.baeldung.equalshashcode.entities;\n\nimport java.util.List;\nimport java.util.Set;\n\npublic class ComplexClass {\n\n    private List<?> genericList;\n    private Set<Integer> integerSet;\n\n    public ComplexClass(List<?> genericArrayList, Set<Integer> integerHashSet) {\n        super();\n        this.genericList = genericArrayList;\n        this.integerSet = integerHashSet;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((genericList == null) ? 0 : genericList.hashCode());\n        result = prime * result + ((integerSet == null) ? 0 : integerSet.hashCode());\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (!(obj instanceof ComplexClass))\n            return false;\n        ComplexClass other = (ComplexClass) obj;\n        if (genericList == null) {\n            if (other.genericList != null)\n                return false;\n        } else if (!genericList.equals(other.genericList))\n            return false;\n        if (integerSet == null) {\n            if (other.integerSet != null)\n                return false;\n        } else if (!integerSet.equals(other.integerSet))\n            return false;\n        return true;\n    }\n\n    protected List<?> getGenericList() {\n        return genericList;\n    }\n\n    protected void setGenericArrayList(List<?> genericList) {\n        this.genericList = genericList;\n    }\n\n    protected Set<Integer> getIntegerSet() {\n        return integerSet;\n    }\n\n    protected void setIntegerSet(Set<Integer> integerSet) {\n        this.integerSet = integerSet;\n    }\n}\n", "test_case": "package com.baeldung.equalshashcode.entities;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class ComplexClassUnitTest {\n\n    @Test\n    public void testEqualsAndHashcodes() {\n        List<String> strArrayList = new ArrayList<String>();\n        strArrayList.add(\"abc\");\n        strArrayList.add(\"def\");\n        ComplexClass aObject = new ComplexClass(strArrayList, new HashSet<Integer>(45, 67));\n        ComplexClass bObject = new ComplexClass(strArrayList, new HashSet<Integer>(45, 67));\n\n        List<String> strArrayListD = new ArrayList<String>();\n        strArrayListD.add(\"lmn\");\n        strArrayListD.add(\"pqr\");\n        ComplexClass dObject = new ComplexClass(strArrayListD, new HashSet<Integer>(45, 67));\n\n        Assert.assertTrue(aObject.equals(bObject) && bObject.equals(aObject));\n\n        Assert.assertTrue(aObject.hashCode() == bObject.hashCode());\n\n        Assert.assertFalse(aObject.equals(dObject));\n        Assert.assertFalse(aObject.hashCode() == dObject.hashCode());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.equalshashcode.entities;\n\npublic class PrimitiveClass {\n\n    private boolean primitiveBoolean;\n    private int primitiveInt;\n\n    public PrimitiveClass(boolean primitiveBoolean, int primitiveInt) {\n        super();\n        this.primitiveBoolean = primitiveBoolean;\n        this.primitiveInt = primitiveInt;\n    }\n\n    protected boolean isPrimitiveBoolean() {\n        return primitiveBoolean;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + (primitiveBoolean ? 1231 : 1237);\n        result = prime * result + primitiveInt;\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        PrimitiveClass other = (PrimitiveClass) obj;\n        if (primitiveBoolean != other.primitiveBoolean)\n            return false;\n        if (primitiveInt != other.primitiveInt)\n            return false;\n        return true;\n    }\n\n    protected void setPrimitiveBoolean(boolean primitiveBoolean) {\n        this.primitiveBoolean = primitiveBoolean;\n    }\n\n    protected int getPrimitiveInt() {\n        return primitiveInt;\n    }\n\n    protected void setPrimitiveInt(int primitiveInt) {\n        this.primitiveInt = primitiveInt;\n    }\n}\n", "test_case": "package com.baeldung.equalshashcode.entities;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class PrimitiveClassUnitTest {\n\n    @Test\n    public void testTwoEqualsObjects() {\n\n        PrimitiveClass aObject = new PrimitiveClass(false, 2);\n        PrimitiveClass bObject = new PrimitiveClass(false, 2);\n        PrimitiveClass dObject = new PrimitiveClass(true, 2);\n\n        Assert.assertTrue(aObject.equals(bObject) && bObject.equals(aObject));\n\n        Assert.assertTrue(aObject.hashCode() == bObject.hashCode());\n\n        Assert.assertFalse(aObject.equals(dObject));\n        Assert.assertFalse(aObject.hashCode() == dObject.hashCode());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.equalshashcode.entities;\n\nimport java.awt.*;\n\npublic class Square extends Rectangle {\n\n    private Color color;\n\n    public Square(double width, Color color) {\n        super(width, width);\n        this.color = color;\n    }\n\n    /* (non-Javadoc)\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = super.hashCode();\n        result = prime * result + ((color == null) ? 0 : color.hashCode());\n        return result;\n    }\n\n    /* (non-Javadoc)\n     * @see java.lang.Object#equals(java.lang.Object)\n     */\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof Square)) {\n            return false;\n        }\n        Square other = (Square) obj;\n        if (color == null) {\n            if (other.color != null) {\n                return false;\n            }\n        } else if (!color.equals(other.color)) {\n            return false;\n        }\n        return true;\n    }\n\n    protected Color getColor() {\n        return color;\n    }\n\n    protected void setColor(Color color) {\n        this.color = color;\n    }\n\n}\n", "test_case": "package com.baeldung.equalshashcode.entities;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.awt.*;\n\npublic class SquareClassUnitTest {\n\n    @Test\n    public void testEqualsAndHashcodes() {\n        Square aObject = new Square(10, Color.BLUE);\n        Square bObject = new Square(10, Color.BLUE);\n\n        Square dObject = new Square(20, Color.BLUE);\n\n        Assert.assertTrue(aObject.equals(bObject) && bObject.equals(aObject));\n\n        Assert.assertTrue(aObject.hashCode() == bObject.hashCode());\n\n        Assert.assertFalse(aObject.equals(dObject));\n        Assert.assertFalse(aObject.hashCode() == dObject.hashCode());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.recursion;\n\npublic class RecursionExample {\n    \n    public int sum(int n){\n        if (n >= 1){\n            return sum(n - 1) + n;\n        }\n        return n;\n    }\n    \n    public int tailSum(int currentSum, int n){\n        if (n <= 1) {\n            return currentSum + n;\n        }\n        return tailSum(currentSum + n, n - 1);\n    }\n    \n    public int iterativeSum(int n){\n        int sum = 0;\n        if(n < 0){\n            return -1;\n        }\n        for(int i=0; i<=n; i++){\n            sum += i;\n        }\n        return sum;\n    }\n    \n    public int powerOf10(int n){\n        if (n == 0){\n            return 1;\n        }\n        return powerOf10(n-1)*10;\n    }\n    \n    public int fibonacci(int n){\n        if (n <=1 ){\n            return n;\n        }\n        return fibonacci(n-1) + fibonacci(n-2);\n    }\n    \n    public String toBinary(int n){\n        if (n <= 1 ){\n            return String.valueOf(n);\n        }\n        return toBinary(n / 2) + String.valueOf(n % 2);\n    }\n    \n    public int calculateTreeHeight(BinaryNode root){\n        if (root!= null){\n            if (root.getLeft() != null || root.getRight() != null){\n                return 1 + max(calculateTreeHeight(root.left) , calculateTreeHeight(root.right));\n            }\n        }\n        return 0;\n    }\n    \n    public int max(int a,int b){\n        return a>b ? a:b;\n    }\n    \n}\n", "test_case": "package com.baeldung.recursion;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class RecursionExampleUnitTest {\n    \n    RecursionExample recursion = new RecursionExample();\n\n    @Test\n    public void testPowerOf10() {\n        int p0 = recursion.powerOf10(0);\n        int p1 = recursion.powerOf10(1);\n        int p4 = recursion.powerOf10(4);\n        \n        Assert.assertEquals(1, p0);\n        Assert.assertEquals(10, p1);\n        Assert.assertEquals(10000, p4);\n    }\n    \n    @Test\n    public void testFibonacci() {\n        int n0 = recursion.fibonacci(0);\n        int n1 = recursion.fibonacci(1);\n        int n7 = recursion.fibonacci(7);\n        \n        Assert.assertEquals(0, n0);\n        Assert.assertEquals(1, n1);\n        Assert.assertEquals(13, n7);\n    }\n    \n    @Test\n    public void testToBinary() {\n        String b0 = recursion.toBinary(0);\n        String b1 = recursion.toBinary(1);\n        String b10 = recursion.toBinary(10);\n        \n        Assert.assertEquals(\"0\", b0);\n        Assert.assertEquals(\"1\", b1);\n        Assert.assertEquals(\"1010\", b10);\n    }\n    \n    @Test\n    public void testCalculateTreeHeight() {\n        BinaryNode root = new BinaryNode(1);\n        root.setLeft(new BinaryNode(1));\n        root.setRight(new BinaryNode(1));\n        \n        root.getLeft().setLeft(new BinaryNode(1));\n        root.getLeft().getLeft().setRight(new BinaryNode(1));\n        root.getLeft().getLeft().getRight().setLeft(new BinaryNode(1));\n        \n        root.getRight().setLeft(new BinaryNode(1));\n        root.getRight().getLeft().setRight(new BinaryNode(1));\n        \n        int height = recursion.calculateTreeHeight(root);\n        \n        Assert.assertEquals(4, height);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.system;\n\nimport java.util.Date;\n\npublic class DateTimeService {\n\n    // One hour from now\n    public long nowPlusOneHour() {\n        return System.currentTimeMillis() + 3600 * 1000L;\n    }\n\n    // Human-readable format\n    public String nowPrettyPrinted() {\n        return new Date(System.currentTimeMillis()).toString();\n    }\n}\n", "test_case": "package com.baeldung.system;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class DateTimeServiceUnitTest {\n\n    @Test\n    public void givenClass_whenCalledMethods_thenNotNullInResult() {\n        DateTimeService dateTimeService = new DateTimeService();\n\n        Assert.assertNotNull(dateTimeService.nowPlusOneHour());\n        Assert.assertNotNull(dateTimeService.nowPrettyPrinted());\n    }\n}\n"}
{"code_source": "package com.baeldung.system;\n\npublic class EnvironmentVariables {\n    public String getPath() {\n        return System.getenv(\"PATH\");\n    }\n}\n", "test_case": "package com.baeldung.system;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class EnvironmentVariablesUnitTest {\n\n    @Test\n    public void givenEnvVars_whenReadPath_thenGetValueinResult() {\n        EnvironmentVariables environmentVariables = new EnvironmentVariables();\n\n        Assert.assertNotNull(environmentVariables.getPath());\n    }\n}\n"}
{"code_source": "package com.baeldung.defaultparams;\n\npublic class Tea {\n\n    static final int DEFAULT_TEA_POWDER = 1; // add 1 tbsp tea powder by default\n\n    private String name; // mandatory\n    private int milk; // ml\n    private boolean herbs; // add herbs or don't\n    private int sugar; // tbsp\n    private int teaPowder; // tbsp\n\n    public Tea(String name, int milk, boolean herbs, int sugar, int teaPowder) {\n        this.name = name;\n        this.milk = milk;\n        this.herbs = herbs;\n        this.sugar = sugar;\n        this.teaPowder = teaPowder;\n    }\n\n    // when tea powder is not provided by client, use default value\n    public Tea(String name, int milk, boolean herbs, int sugar) {\n        this(name, milk, herbs, sugar, DEFAULT_TEA_POWDER);\n    }\n\n    // when sugar is not provided by client, don't add it\n    public Tea(String name, int milk, boolean herbs) {\n        this(name, milk, herbs, 0);\n    }\n\n    // when herbs is not provided by client, don't add it\n    public Tea(String name, int milk) {\n        this(name, milk, false);\n    }\n\n    // when milk is not provided by client, don't add it\n    public Tea(String name) {\n        this(name, 0);\n    }   \n\n    public String getName() {\n        return name;\n    }\n\n    public int getMilk() {\n        return milk;\n    }\n\n    public boolean isHerbs() {\n        return herbs;\n    }\n\n    public int getSugar() {\n        return sugar;\n    }\n\n    public int getTeaPowder() {\n        return teaPowder;\n    }\n\n}\n", "test_case": "package com.baeldung.defaultparams;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.Test;\n\n\npublic class TeaUnitTest {\n    \n    @Test\n    public void whenTeaWithOnlyName_thenCreateDefaultTea() {\n        Tea blackTea = new Tea(\"Black Tea\");\n\n        assertThat(blackTea.getName()).isEqualTo(\"Black Tea\");\n        assertThat(blackTea.getMilk()).isEqualTo(0);\n        assertThat(blackTea.isHerbs()).isFalse();\n        assertThat(blackTea.getSugar()).isEqualTo(0);\n        assertThat(blackTea.getTeaPowder()).isEqualTo(Tea.DEFAULT_TEA_POWDER);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.finallykeyword;\n\npublic class PitfallsWhenUsingFinally {\n\n    public String disregardsUnCaughtException() {\n        try {\n            System.out.println(\"Inside try\");\n            throw new RuntimeException();\n        } finally {\n            System.out.println(\"Inside finally\");\n            return \"from finally\";\n        }\n    }\n\n    public String ignoringOtherReturns() {\n        try {\n            System.out.println(\"Inside try\");\n            return \"from try\";\n        } finally {\n            System.out.println(\"Inside finally\");\n            return \"from finally\";\n        }\n    }\n\n    public String throwsException() {\n        try {\n            System.out.println(\"Inside try\");\n            return \"from try\";\n        } finally {\n            throw new RuntimeException();\n        }\n    }\n}\n", "test_case": "package com.baeldung.finallykeyword;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\npublic class PitfallsWhenUsingFinallyUnitTest {\n\n    PitfallsWhenUsingFinally instance = new PitfallsWhenUsingFinally();\n\n    @Test\n    public void testIgnoresException() {\n        String result = instance.disregardsUnCaughtException();\n        assertEquals(\"from finally\", result);\n    }\n\n    @Test\n    public void testIgnoresOtherReturns() {\n        String result = instance.ignoringOtherReturns();\n        assertEquals(\"from finally\", result);\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void testThrowsException() {\n        instance.throwsException();\n    }\n}\n"}
{"code_source": "package com.baeldung.methodmultiplereturnvalues;\n\nimport org.apache.commons.lang3.tuple.ImmutablePair;\nimport org.apache.commons.lang3.tuple.Pair;\n\nimport java.util.Comparator;\nimport java.util.List;\n\nclass MultipleReturnValuesUsingApacheCommonsPair {\n\n    static ImmutablePair<Coordinates, Double> getMostDistantPoint(\n      List<Coordinates> coordinatesList,\n      Coordinates target) {\n        return coordinatesList.stream()\n          .map(coordinates -> ImmutablePair.of(coordinates, coordinates.calculateDistance(target)))\n          .max(Comparator.comparingDouble(Pair::getRight))\n          .get();\n\n    }\n}\n", "test_case": "package com.baeldung.methodmultiplereturnvalues;\n\nimport org.apache.commons.lang3.tuple.ImmutablePair;\nimport org.junit.jupiter.api.Test;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass MultipleReturnValuesUsingApacheCommonsPairUnitTest {\n\n    @Test\n    void whenUsingPair_thenMultipleFieldsAreReturned() {\n\n        List<Coordinates> coordinatesList = new ArrayList<>();\n        coordinatesList.add(new Coordinates(1, 1, \"home\"));\n        coordinatesList.add(new Coordinates(2, 2, \"school\"));\n        coordinatesList.add(new Coordinates(3, 3, \"hotel\"));\n\n        Coordinates target = new Coordinates(5, 5, \"gym\");\n\n        ImmutablePair<Coordinates, Double> mostDistantPoint = MultipleReturnValuesUsingApacheCommonsPair.getMostDistantPoint(coordinatesList, target);\n\n        assertEquals(1, mostDistantPoint.getLeft().getLongitude());\n        assertEquals(1, mostDistantPoint.getLeft().getLatitude());\n        assertEquals(\"home\", mostDistantPoint.getLeft().getPlaceName());\n        assertEquals(5.66, BigDecimal.valueOf(mostDistantPoint.getRight()).setScale(2, RoundingMode.HALF_UP).doubleValue());\n\n    }\n\n}\n"}
{"code_source": "package com.baeldung.methodmultiplereturnvalues;\n\nimport org.apache.commons.lang3.tuple.ImmutableTriple;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nclass MultipleReturnValuesUsingApacheCommonsTriple {\n\n    static ImmutableTriple<Double, Double, Double> getMinAvgMaxTriple(\n      List<Coordinates> coordinatesList,\n      Coordinates target) {\n\n        List<Double> distanceList = coordinatesList.stream()\n          .map(coordinates -> coordinates.calculateDistance(target))\n          .collect(Collectors.toList());\n        Double minDistance = distanceList.stream().mapToDouble(Double::doubleValue).min().getAsDouble();\n        Double avgDistance = distanceList.stream().mapToDouble(Double::doubleValue).average().orElse(0.0D);\n        Double maxDistance = distanceList.stream().mapToDouble(Double::doubleValue).max().getAsDouble();\n\n        return ImmutableTriple.of(minDistance, avgDistance, maxDistance);\n    }\n}\n", "test_case": "package com.baeldung.methodmultiplereturnvalues;\n\nimport org.apache.commons.lang3.tuple.ImmutableTriple;\nimport org.junit.jupiter.api.Test;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass MultipleReturnValuesUsingApacheCommonsTripleUnitTest {\n\n    @Test\n    void whenUsingTriple_thenMultipleFieldsAreReturned() {\n\n        List<Coordinates> coordinatesList = new ArrayList<>();\n        coordinatesList.add(new Coordinates(1, 1, \"home\"));\n        coordinatesList.add(new Coordinates(2, 2, \"school\"));\n        coordinatesList.add(new Coordinates(3, 3, \"hotel\"));\n\n        Coordinates target = new Coordinates(5, 5, \"gym\");\n\n        ImmutableTriple<Double, Double, Double> minAvgMax = MultipleReturnValuesUsingApacheCommonsTriple.getMinAvgMaxTriple(coordinatesList, target);\n\n        assertEquals(2.83, scaleDouble(minAvgMax.left));   //min\n        assertEquals(4.24, scaleDouble(minAvgMax.middle)); //avg\n        assertEquals(5.66, scaleDouble(minAvgMax.right));  //max\n    }\n\n    private double scaleDouble(Double d) {\n        return BigDecimal.valueOf(d).setScale(2, RoundingMode.HALF_UP).doubleValue();\n    }\n}\n"}
{"code_source": "package com.baeldung.methodmultiplereturnvalues;\n\nclass MultipleReturnValuesUsingArrays {\n\n    \n    static double[] getCoordinatesDoubleArray() {\n        \n        double[] coordinates = new double[2];\n\n        coordinates[0] = 10;\n        coordinates[1] = 12.5;\n        \n        return coordinates;\n    }\n\n    \n    static Number[] getCoordinatesNumberArray() {\n        \n        Number[] coordinates = new Number[2];\n\n        coordinates[0] = 10; //Integer\n        coordinates[1] = 12.5; //Double\n        \n        return coordinates;\n    }\n\n}\n", "test_case": "package com.baeldung.methodmultiplereturnvalues;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\n\nclass MultipleReturnValuesUsingArraysUnitTest {\n\n    @Test\n    void whenUsingArrayOfDoubles_thenMultipleDoubleFieldsAreReturned() {\n\n        double[] coordinates = MultipleReturnValuesUsingArrays.getCoordinatesDoubleArray();\n        assertEquals(10, coordinates[0]);\n        assertEquals(12.5, coordinates[1]);\n    }\n\n    @Test\n    void whenUsingArrayOfNumbers_thenMultipleNumberFieldsAreReturned() {\n        \n        Number[] coordinates = MultipleReturnValuesUsingArrays.getCoordinatesNumberArray();\n        assertEquals(10, coordinates[0]);\n        assertEquals(12.5, coordinates[1]);\n\n    }\n    \n}\n"}
{"code_source": "package com.baeldung.methodmultiplereturnvalues;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nclass MultipleReturnValuesUsingCollections {\n\n    static List<Number> getCoordinatesList() {\n\n        List<Number> coordinates = new ArrayList<>();\n\n        coordinates.add(10);\n        coordinates.add(12.5);\n\n        return coordinates;\n    }\n\n    static Map<String, Number> getCoordinatesMap() {\n\n        Map<String, Number> coordinates = new HashMap<>();\n        \n        coordinates.put(\"longitude\", 10);\n        coordinates.put(\"latitude\", 12.5);\n\n        return coordinates;\n    }\n\n}\n", "test_case": "package com.baeldung.methodmultiplereturnvalues;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport java.util.List;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\n\nclass MultipleReturnValuesUsingCollectionsUnitTest {\n\n    @Test\n    void whenUsingList_thenMultipleFieldsAreReturned() {\n        \n        List<Number> coordinates = MultipleReturnValuesUsingCollections.getCoordinatesList();\n        assertEquals(Integer.valueOf(10), coordinates.get(0));\n        assertEquals(Double.valueOf(12.5), coordinates.get(1));\n    }\n    \n    @Test\n    void whenUsingMap_thenMultipleFieldsAreReturned() {\n        \n        Map<String, Number> coordinates = MultipleReturnValuesUsingCollections.getCoordinatesMap();\n        assertEquals(Integer.valueOf(10), coordinates.get(\"longitude\"));\n        assertEquals(Double.valueOf(12.5), coordinates.get(\"latitude\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.methodmultiplereturnvalues;\n\nclass MultipleReturnValuesUsingContainer {\n\n    static Coordinates getCoordinates() {\n        \n        double longitude = 10;\n        double latitude = 12.5;\n        String placeName = \"home\";\n        \n        return new Coordinates(longitude, latitude, placeName);\n    }\n    \n}\n", "test_case": "package com.baeldung.methodmultiplereturnvalues;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport org.junit.jupiter.api.Test;\n\nclass MultipleReturnValuesUsingContainerUnitTest {\n\n    @Test\n    void whenUsingContainerClass_thenMultipleFieldsAreReturned() {\n        \n        Coordinates coordinates = MultipleReturnValuesUsingContainer.getCoordinates();\n        \n        assertEquals(10, coordinates.getLongitude());\n        assertEquals(12.5, coordinates.getLatitude());\n        assertEquals(\"home\", coordinates.getPlaceName());\n    }\n}\n"}
{"code_source": "package com.baeldung.methodmultiplereturnvalues;\n\nimport java.util.List;\n\nclass MultipleReturnValuesUsingTuples {\n\n    static Tuple2<Coordinates, Double> getMostDistantPoint(List<Coordinates> coordinatesList,\n                                                           Coordinates target) {\n\n        return coordinatesList.stream()\n            .map(coor -> new Tuple2<>(coor, coor.calculateDistance(target)))\n            .max((d1, d2) -> Double.compare(d1.getSecond(), d2.getSecond()))\n            .get();\n\n    }\n\n}\n", "test_case": "package com.baeldung.methodmultiplereturnvalues;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\n\nclass MultipleReturnValuesUsingTuplesUnitTest {\n\n    @Test\n    void whenUsingTuple_thenMultipleFieldsAreReturned() {\n        \n        List<Coordinates> coordinatesList = new ArrayList<>();\n        coordinatesList.add(new Coordinates(1, 1, \"home\"));\n        coordinatesList.add(new Coordinates(2, 2, \"school\"));\n        coordinatesList.add(new Coordinates(3, 3, \"hotel\"));\n        \n        Coordinates target = new Coordinates(5, 5, \"gym\");\n        \n        Tuple2<Coordinates, Double> mostDistantPoint = MultipleReturnValuesUsingTuples.getMostDistantPoint(coordinatesList, target);\n        \n        assertEquals(1, mostDistantPoint.getFirst().getLongitude());\n        assertEquals(1, mostDistantPoint.getFirst().getLatitude());\n        assertEquals(\"home\", mostDistantPoint.getFirst().getPlaceName());\n        assertEquals(5.66, BigDecimal.valueOf(mostDistantPoint.getSecond()).setScale(2, RoundingMode.HALF_UP).doubleValue());\n        \n    }\n    \n}\n"}
{"code_source": "package com.baeldung.compareto;\n\npublic class BankAccountFix implements Comparable<BankAccountFix> {\n\n    private final int balance;\n\n    public BankAccountFix(int balance) {\n        this.balance = balance;\n    }\n\n    @Override\n    public int compareTo(BankAccountFix anotherAccount) {\n        return Integer.compare(this.balance, anotherAccount.balance);\n    }\n\n}\n", "test_case": "package com.baeldung.compareto;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class BankAccountFixUnitTest {\n\n    @Test\n    public void givenComparisonBasedImpl_whenUsingSmallIntegers_thenComparisonWorks() {\n        BankAccountFix accountOne = new BankAccountFix(5000);\n        BankAccountFix accountTwo = new BankAccountFix(1000);\n        int comparison = accountOne.compareTo(accountTwo);\n        assertThat(comparison).isPositive();\n    }\n\n    @Test\n    public void givenComparisonBasedImpl_whenUsingLargeIntegers_thenComparisonWorks() {\n        BankAccountFix accountOne = new BankAccountFix(1900000000);\n        BankAccountFix accountTwo = new BankAccountFix(-2000000000);\n        int comparison = accountOne.compareTo(accountTwo);\n        assertThat(comparison).isPositive();\n    }\n\n}\n"}
{"code_source": "package com.baeldung.compareto;\n\npublic class BankAccount implements Comparable<BankAccount> {\n\n    private final int balance;\n\n    public BankAccount(int balance) {\n        this.balance = balance;\n    }\n\n    @Override\n    public int compareTo(BankAccount anotherAccount) {\n        return this.balance - anotherAccount.balance;\n    }\n\n}\n", "test_case": "package com.baeldung.compareto;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.*;\n\npublic class BankAccountUnitTest {\n\n    @Test\n    public void givenSubtractionBasedImpl_whenUsingSmallIntegers_thenComparisonWorks() {\n        BankAccount accountOne = new BankAccount(5000);\n        BankAccount accountTwo = new BankAccount(1000);\n        int comparison = accountOne.compareTo(accountTwo);\n        assertThat(comparison).isPositive();\n    }\n\n    @Test\n    public void givenSubtractionBasedImpl_whenUsingLargeIntegers_thenComparisonBreaks() {\n        BankAccount accountOne = new BankAccount(1900000000);\n        BankAccount accountTwo = new BankAccount(-2000000000);\n        int comparison = accountOne.compareTo(accountTwo);\n        assertThat(comparison).isNegative();\n    }\n\n}\n"}
{"code_source": "package com.baeldung.compareto;\n\npublic class FootballPlayer implements Comparable<FootballPlayer> {\n\n    private final String name;\n    private final int goalsScored;\n\n    public FootballPlayer(String name, int goalsScored) {\n        this.name = name;\n        this.goalsScored = goalsScored;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public int compareTo(FootballPlayer anotherPlayer) {\n        return Integer.compare(this.goalsScored, anotherPlayer.goalsScored);\n    }\n\n    @Override\n    public boolean equals(Object object) {\n        if (this == object)\n            return true;\n        if (object == null || getClass() != object.getClass())\n            return false;\n        FootballPlayer player = (FootballPlayer) object;\n        return name.equals(player.name);\n    }\n\n}\n", "test_case": "package com.baeldung.compareto;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class FootballPlayerUnitTest {\n\n    @Test\n    public void givenInconsistentCompareToAndEqualsImpl_whenUsingSortedSet_thenSomeElementsAreNotAdded() {\n        FootballPlayer messi = new FootballPlayer(\"Messi\", 800);\n        FootballPlayer ronaldo = new FootballPlayer(\"Ronaldo\", 800);\n\n        TreeSet<FootballPlayer> set = new TreeSet<>();\n        set.add(messi);\n        set.add(ronaldo);\n\n        assertThat(set).hasSize(1);\n        assertThat(set).doesNotContain(ronaldo);\n    }\n\n    @Test\n    public void givenCompareToImpl_whenUsingCustomComparator_thenComparatorLogicIsApplied() {\n        FootballPlayer ronaldo = new FootballPlayer(\"Ronaldo\", 900);\n        FootballPlayer messi = new FootballPlayer(\"Messi\", 800);\n        FootballPlayer modric = new FootballPlayer(\"Modric\", 100);\n\n        List<FootballPlayer> players = Arrays.asList(ronaldo, messi, modric);\n        Comparator<FootballPlayer> nameComparator = Comparator.comparing(FootballPlayer::getName);\n        Collections.sort(players, nameComparator);\n\n        assertThat(players).containsExactly(messi, modric, ronaldo);\n    }\n\n    @Test\n    public void givenCompareToImpl_whenSavingElementsInTreeMap_thenKeysAreSortedUsingCompareTo() {\n        FootballPlayer ronaldo = new FootballPlayer(\"Ronaldo\", 900);\n        FootballPlayer messi = new FootballPlayer(\"Messi\", 800);\n        FootballPlayer modric = new FootballPlayer(\"Modric\", 100);\n\n        Map<FootballPlayer, String> players = new TreeMap<>();\n        players.put(ronaldo, \"forward\");\n        players.put(messi, \"forward\");\n        players.put(modric, \"midfielder\");\n\n        assertThat(players.keySet()).containsExactly(modric, messi, ronaldo);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.compareto;\n\npublic class HandballPlayer {\n\n    private final String name;\n    private final int height;\n\n    public HandballPlayer(String name, int height) {\n        this.name = name;\n        this.height = height;\n    }\n}\n", "test_case": "package com.baeldung.compareto;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n\npublic class HandballPlayerUnitTest {\n\n    @Test\n    public void givenComparableIsNotImplemented_whenSortingArray_thenExceptionIsThrown() {\n        HandballPlayer duvnjak = new HandballPlayer(\"Duvnjak\", 197);\n        HandballPlayer hansen = new HandballPlayer(\"Hansen\", 196);\n\n        HandballPlayer[] players = new HandballPlayer[] {duvnjak, hansen};\n\n        assertThatExceptionOfType(ClassCastException.class).isThrownBy(() -> Arrays.sort(players));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.iterationcounter;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\nimport java.util.stream.Stream;\n\npublic class IterationCounter {\n    public static final List<String> IMDB_TOP_MOVIES = Arrays.asList(\"The Shawshank Redemption\",\n      \"The Godfather\", \"The Godfather II\", \"The Dark Knight\");\n\n    public static List<String> getRankingsWithForLoop(List<String> movies) {\n        List<String> rankings = new ArrayList<>();\n        for (int i = 0; i < movies.size(); i++) {\n            String ranking = (i + 1) + \": \" + movies.get(i);\n            rankings.add(ranking);\n        }\n        return rankings;\n    }\n\n    public static List<String> getRankingsWithForEachLoop(List<String> movies) {\n        List<String> rankings = new ArrayList<>();\n        int i = 0;\n        for (String movie : movies) {\n            String ranking = (i + 1) + \": \" + movies.get(i);\n            rankings.add(ranking);\n\n            i++;\n        }\n        return rankings;\n    }\n\n    public static List<String> getRankingsWithFunctionalForEachLoop(List<String> movies) {\n        List<String> rankings = new ArrayList<>();\n        forEachWithCounter(movies, (i, movie) -> {\n            String ranking = (i + 1) + \": \" + movie;\n            rankings.add(ranking);\n        });\n\n        return rankings;\n    }\n\n    public static <T> void forEachWithCounter(Iterable<T> source, BiConsumer<Integer, T> consumer) {\n        int i = 0;\n        for (T item : source) {\n            consumer.accept(i, item);\n            i++;\n        }\n    }\n\n    public static List<String> getRankingsWithStream(Stream<String> movies) {\n        List<String> rankings = new ArrayList<>();\n        movies.forEach(withCounter((i, movie) -> {\n            String ranking = (i + 1) + \": \" + movie;\n            rankings.add(ranking);\n        }));\n\n        return rankings;\n    }\n\n    public static <T> Consumer<T> withCounter(BiConsumer<Integer, T> consumer) {\n        AtomicInteger counter = new AtomicInteger(0);\n        return item -> consumer.accept(counter.getAndIncrement(), item);\n    }\n}\n", "test_case": "package com.baeldung.iterationcounter;\n\nimport org.junit.Test;\n\nimport static com.baeldung.iterationcounter.IterationCounter.*;\nimport static org.assertj.core.api.Assertions.*;\n\npublic class IterationCounterUnitTest {\n    @Test\n    public void givenRankings_whenCalculateWithForLoop_thenRankingsCorrect() {\n        assertThat(getRankingsWithForLoop(IMDB_TOP_MOVIES))\n          .containsExactly(\"1: The Shawshank Redemption\",\n            \"2: The Godfather\", \"3: The Godfather II\", \"4: The Dark Knight\");\n    }\n\n    @Test\n    public void givenRankings_whenCalculateWithForEachLoop_thenRankingsCorrect() {\n        assertThat(getRankingsWithForEachLoop(IMDB_TOP_MOVIES))\n          .containsExactly(\"1: The Shawshank Redemption\",\n            \"2: The Godfather\", \"3: The Godfather II\", \"4: The Dark Knight\");\n    }\n\n    @Test\n    public void givenRankings_whenCalculateWithFunctionalForEach_thenRankingsCorrect() {\n        assertThat(getRankingsWithFunctionalForEachLoop(IMDB_TOP_MOVIES))\n          .containsExactly(\"1: The Shawshank Redemption\",\n            \"2: The Godfather\", \"3: The Godfather II\", \"4: The Dark Knight\");\n    }\n\n    @Test\n    public void givenRankings_whenCalculateWithStream_thenRankingsCorrect() {\n        assertThat(getRankingsWithStream(IMDB_TOP_MOVIES.stream()))\n          .containsExactly(\"1: The Shawshank Redemption\",\n            \"2: The Godfather\", \"3: The Godfather II\", \"4: The Dark Knight\");\n    }\n}\n"}
{"code_source": "package com.baeldung.hash;\n\nimport java.util.Objects;\n\npublic class Player {\n    private String firstName;\n    private String lastName;\n    private String position;\n\n    public Player() {\n\n    }\n\n    public Player(String firstName, String lastName, String position) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.position = position;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public String getPosition() {\n        return position;\n    }\n\n    public void setPosition(String position) {\n        this.position = position;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(firstName, lastName, position);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n\n        if (obj == null) {\n            return false;\n        }\n\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n\n        Player other = (Player) obj;\n\n        if (firstName == null) {\n            if (other.firstName != null) {\n                return false;\n            }\n        } else if (!firstName.equals(other.firstName)) {\n            return false;\n        }\n\n        if (lastName == null) {\n            if (other.lastName != null) {\n                return false;\n            }\n        } else if (!lastName.equals(other.lastName)) {\n            return false;\n        }\n\n        if (position == null) {\n            if (other.position != null) {\n                return false;\n            }\n        } else if (!position.equals(other.position)) {\n            return false;\n        }\n        return true;\n    }\n\n}\n", "test_case": "package com.baeldung.hash;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.Arrays;\n\nimport org.junit.Test;\n\npublic class PlayerUnitTest {\n\n    @Test\n    public void whenCallingHashCodeOnIdenticalValue_thenSameHashCodeReturned() {\n        Player player = new Player(\"Eduardo\", \"Rodriguez\", \"Pitcher\");\n        Player indenticalPlayer = new Player(\"Eduardo\", \"Rodriguez\", \"Pitcher\");\n\n        int hashCode1 = player.hashCode();\n        int hashCode2 = player.hashCode();\n        int hashCode3 = indenticalPlayer.hashCode();\n\n        assertEquals(hashCode1, hashCode2);\n        assertEquals(hashCode1, hashCode3);\n    }\n\n    @Test\n    public void whenCallingHashCodeAndArraysHashCode_thenSameHashCodeReturned() {\n        Player player = new Player(\"Bobby\", \"Dalbec\", \"First Base\");\n        int hashcode1 = player.hashCode();\n        String[] playerInfo = { \"Bobby\", \"Dalbec\", \"First Base\" };\n        int hashcode2 = Arrays.hashCode(playerInfo);\n\n        assertEquals(hashcode1, hashcode2);\n    }\n}\n"}
{"code_source": "package com.baeldung.implementsvsextends.media.player.impl;\n\nimport com.baeldung.implementsvsextends.media.player.MediaPlayer;\n\npublic class AudioMediaPlayer implements MediaPlayer {\n\n    @Override\n    public void play() {\n        System.out.println(\"AudioMediaPlayer is Playing\");\n    }\n\n    @Override\n    public void pause() {\n        System.out.println(\"AudioMediaPlayer is Paused\");\n    }\n}", "test_case": "package com.baeldung.implementsvsextends.media.player.impl;\n\nimport org.junit.Assert;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class AudioMediaPlayerUnitTest {\n\n    private final PrintStream standardOut = System.out;\n    private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();\n\n    @BeforeEach\n    public void setUp() {\n        System.setOut(new PrintStream(outputStreamCaptor));\n    }\n\n    @AfterEach\n    public void tearDown() {\n        System.setOut(standardOut);\n    }\n\n    @Test\n    public void givenAudioMediaPlayer_whenPlay_thenPrintsPlayingString() {\n        AudioMediaPlayer audioMediaPlayer = new AudioMediaPlayer();\n        audioMediaPlayer.play();\n        Assert.assertEquals(\"AudioMediaPlayer is Playing\", outputStreamCaptor.toString()\n                .trim());\n    }\n\n    @Test\n    public void givenAudioMediaPlayer_whenPause_thenPrintsPausedString() {\n        AudioMediaPlayer audioMediaPlayer = new AudioMediaPlayer();\n        audioMediaPlayer.pause();\n        Assert.assertEquals(\"AudioMediaPlayer is Paused\", outputStreamCaptor.toString()\n                .trim());\n    }\n}"}
{"code_source": "package com.baeldung.implementsvsextends.media.player.impl;\n\nimport com.baeldung.implementsvsextends.media.player.AdvancedPlayerOptions;\nimport com.baeldung.implementsvsextends.media.player.MediaPlayer;\n\npublic class MultiMediaPlayer implements MediaPlayer, AdvancedPlayerOptions {\n\n    @Override\n    public void play() {\n        System.out.println(\"MultiMediaPlayer is Playing\");\n    }\n\n    @Override\n    public void pause() {\n        System.out.println(\"MultiMediaPlayer is Paused\");\n    }\n\n    @Override\n    public void seek() {\n        System.out.println(\"MultiMediaPlayer is being seeked\");\n    }\n\n    @Override\n    public void fastForward() {\n        System.out.println(\"MultiMediaPlayer is being fast forwarded\");\n    }\n}", "test_case": "package com.baeldung.implementsvsextends.media.player.impl;\n\nimport org.junit.Assert;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class MultiMediaPlayerUnitTest {\n\n    private final PrintStream standardOut = System.out;\n    private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();\n\n    @BeforeEach\n    public void setUp() {\n        System.setOut(new PrintStream(outputStreamCaptor));\n    }\n\n    @AfterEach\n    public void tearDown() {\n        System.setOut(standardOut);\n    }\n\n    @Test\n    public void givenMultiMediaPlayer_whenPlay_thenPrintsPlayingString() {\n        MultiMediaPlayer multiMediaPlayer = new MultiMediaPlayer();\n        multiMediaPlayer.play();\n        Assert.assertEquals(\"MultiMediaPlayer is Playing\", outputStreamCaptor.toString()\n                .trim());\n    }\n\n    @Test\n    public void givenMultiMediaPlayer_whenPause_thenPrintsPausedString() {\n        MultiMediaPlayer multiMediaPlayer = new MultiMediaPlayer();\n        multiMediaPlayer.pause();\n        Assert.assertEquals(\"MultiMediaPlayer is Paused\", outputStreamCaptor.toString()\n                .trim());\n    }\n\n    @Test\n    public void givenMultiMediaPlayer_whenSeek_thenPrintsPausedString() {\n        MultiMediaPlayer multiMediaPlayer = new MultiMediaPlayer();\n        multiMediaPlayer.seek();\n        Assert.assertEquals(\"MultiMediaPlayer is being seeked\", outputStreamCaptor.toString()\n                .trim());\n    }\n\n    @Test\n    public void givenMultiMediaPlayer_whenFastForward_thenPrintsPausedString() {\n        MultiMediaPlayer multiMediaPlayer = new MultiMediaPlayer();\n        multiMediaPlayer.fastForward();\n        Assert.assertEquals(\"MultiMediaPlayer is being fast forwarded\",\n                outputStreamCaptor.toString()\n                .trim());\n    }\n}"}
{"code_source": "package com.baeldung.implementsvsextends.media.player.impl;\n\nimport com.baeldung.implementsvsextends.media.player.MediaPlayer;\n\npublic class VideoMediaPlayer implements MediaPlayer {\n\n    @Override\n    public void play() {\n        System.out.println(\"VideoMediaPlayer is Playing\");\n    }\n\n    @Override\n    public void pause() {\n        System.out.println(\"VideoMediaPlayer is Paused\");\n    }\n}", "test_case": "package com.baeldung.implementsvsextends.media.player.impl;\n\nimport org.junit.Assert;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class VideoMediaPlayerUnitTest {\n\n    private final PrintStream standardOut = System.out;\n    private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();\n\n    @BeforeEach\n    public void setUp() {\n        System.setOut(new PrintStream(outputStreamCaptor));\n    }\n\n    @AfterEach\n    public void tearDown() {\n        System.setOut(standardOut);\n    }\n\n    @Test\n    public void givenVideoMediaPlayer_whenPlay_thenPrintsPlayingString() {\n        VideoMediaPlayer videoMediaPlayer = new VideoMediaPlayer();\n        videoMediaPlayer.play();\n        Assert.assertEquals(\"VideoMediaPlayer is Playing\", outputStreamCaptor.toString()\n                .trim());\n    }\n\n    @Test\n    public void givenVideoMediaPlayer_whenPause_thenPrintsPausedString() {\n        VideoMediaPlayer videoMediaPlayer = new VideoMediaPlayer();\n        videoMediaPlayer.pause();\n        Assert.assertEquals(\"VideoMediaPlayer is Paused\", outputStreamCaptor.toString()\n                .trim());\n    }\n}"}
{"code_source": "package com.baeldung.implementsvsextends.media.model;\n\npublic class Media {\n\n    private int id;\n\n    private String title;\n\n    private String artist;\n\n    public void printTitle() {\n        System.out.println(\"Media Title\");\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getArtist() {\n        return artist;\n    }\n\n    public void setArtist(String artist) {\n        this.artist = artist;\n    }\n\n    @Override\n    public String toString() {\n        return \"Media{\" +\n                \"id=\" + id +\n                \", title='\" + title + '\\'' +\n                \", artist='\" + artist + '\\'' +\n                '}';\n    }\n}", "test_case": "package com.baeldung.implementsvsextends.media.model;\n\nimport org.hamcrest.CoreMatchers;\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class AudioMediaUnitTest {\n\n    @Test\n    public void givenAudioMediaInstance_whenCheckedType_thenIsInstanceOfMedia() {\n        AudioMedia audioMedia = new AudioMedia();\n        Assert.assertThat(audioMedia, CoreMatchers.<AudioMedia>instanceOf(Media.class));\n    }\n}"}
{"code_source": "package com.baeldung.implementsvsextends.media.model;\n\npublic class VideoMedia extends Media {\n\n    private String resolution;\n\n    private String aspectRatio;\n\n    public String getResolution() {\n        return resolution;\n    }\n\n    public void setResolution(String resolution) {\n        this.resolution = resolution;\n    }\n\n    public String getAspectRatio() {\n        return aspectRatio;\n    }\n\n    public void setAspectRatio(String aspectRatio) {\n        this.aspectRatio = aspectRatio;\n    }\n\n    @Override\n    public String toString() {\n        return \"VideoMedia{\" +\n                \"id=\" + this.getId() +\n                \", title='\" + this.getTitle() + '\\'' +\n                \", artist='\" + this.getArtist() + '\\'' +\n                \"resolution='\" + resolution + '\\'' +\n                \", aspectRatio='\" + aspectRatio + '\\'' +\n                \"} \";\n    }\n}", "test_case": "package com.baeldung.implementsvsextends.media.model;\n\nimport org.hamcrest.CoreMatchers;\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class VideoMediaUnitTest {\n\n    @Test\n    public void givenVideoMediaInstance_whenCheckedType_thenIsInstanceOfMedia() {\n        VideoMedia videoMedia = new VideoMedia();\n        Assert.assertThat(videoMedia, CoreMatchers.<VideoMedia>instanceOf(Media.class));\n    }\n}"}
{"code_source": "package com.baeldung.commandline;\n\npublic class CommandLineWithoutErrorHandling {\n\n    public static void main(String[] args) {\n\n        System.out.println(args[0]);\n    }\n}", "test_case": "package com.baeldung.commandline;\n\nimport org.junit.Test;\nimport static org.junit.Assert.fail;\n\npublic class CommandLineWithoutErrorHandlingUnitTest {\n\n    @Test(expected = NullPointerException.class)\n    public void givenNullCommandLineArgument_whenPassedToMainFunction_thenExpectNullPointerException() {\n        CommandLineWithoutErrorHandling.main(null);\n    }\n}"}
{"code_source": "package com.baeldung.date;\n\npublic class Date {\n\n    private long currentTimeMillis;\n\n    public Date() {\n        this(System.currentTimeMillis());\n    }\n\n    public Date(long currentTimeMillis) {\n        this.currentTimeMillis = currentTimeMillis;\n    }\n\n    public long getTime() {\n        return currentTimeMillis;\n    }\n}\n", "test_case": "package com.baeldung.date;\n\nimport java.util.Date;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class DateUnitTest {\n\n    @Test\n    public void whenUsingFullyQualifiedClassNames() {\n\n        java.util.Date javaDate = new java.util.Date();\n        com.baeldung.date.Date baeldungDate = new com.baeldung.date.Date(javaDate.getTime());\n\n        Assert.assertEquals(javaDate.getTime(), baeldungDate.getTime());\n    }\n\n    @Test\n    public void whenImportTheMostUsedOne() {\n\n        Date javaDate = new Date();\n        com.baeldung.date.Date baeldungDate = new com.baeldung.date.Date(javaDate.getTime());\n\n        Assert.assertEquals(javaDate.getTime(), baeldungDate.getTime());\n    }\n}\n"}
{"code_source": "package com.baeldung.deepshallowcopy;\n\npublic class StudentDeepCopy implements Cloneable{\n    public String firstName;\n    public String lastName;\n    public String level;\n    public SchoolDeepCopy school;\n\n\n    public StudentDeepCopy(String firstName, String lastName, String level, SchoolDeepCopy school){\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.level = level;\n        this.school = school;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public String getLevel() {\n        return level;\n    }\n\n    public void setLevel(String level) {\n        this.level = level;\n    }\n\n    public SchoolDeepCopy getSchool() {\n        return school;\n    }\n\n    public void setSchool(SchoolDeepCopy school) {\n        this.school = school;\n    }\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        StudentDeepCopy student = (StudentDeepCopy) super.clone();\n        student.school = (SchoolDeepCopy) school.clone();\n        return student;\n    }\n\n}\n", "test_case": "package com.baeldung.deepshallowcopy;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Test;\n\nclass StudentDeepCopyUnitTest {\n\n\n    @Test\n    void whenDeepCopying_thenCopyObjectMakesCopyOfReferencedObjectInSourceObject(){\n        SchoolDeepCopy ug = new SchoolDeepCopy(\"University of Ghana\");\n        StudentDeepCopy studentOne = new StudentDeepCopy(\"Abena\", \"Kojo\",\"200L\", ug );\n        StudentDeepCopy studentTwo = null;\n\n        try{\n            studentTwo = (StudentDeepCopy) studentOne.clone();\n        } catch (CloneNotSupportedException e){\n            e.printStackTrace();\n        }\n\n        assertNotSame(studentOne.getSchool(),studentTwo.getSchool());\n        studentTwo.getSchool().setName(\"University of Nigeria\");\n        assertNotEquals(studentOne.getSchool().getName(), studentTwo.getSchool().getName());\n\n    }\n\n}"}
{"code_source": "package com.baeldung.deepshallowcopy;\n\npublic class StudentShallowCopy implements Cloneable{\n    public String firstName;\n    public String lastName;\n    public String level;\n    public SchoolShallowCopy school;\n\n\n    public StudentShallowCopy(String firstName, String lastName, String level, SchoolShallowCopy school){\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.level = level;\n        this.school = school;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public String getLevel() {\n        return level;\n    }\n\n    public void setLevel(String level) {\n        this.level = level;\n    }\n\n    public SchoolShallowCopy getSchool() {\n        return school;\n    }\n\n    public void setSchool(SchoolShallowCopy school) {\n        this.school = school;\n    }\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n\n}\n", "test_case": "package com.baeldung.deepshallowcopy;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Test;\n\nclass StudentShallowCopyUnitTest {\n\n    @Test\n    void whenShallowCopying_thenCopyObjectAndSourceObjectShareSameReferencedObject(){\n        SchoolShallowCopy ug = new SchoolShallowCopy(\"University of Ghana\");\n        StudentShallowCopy studentOne = new StudentShallowCopy(\"Abena\", \"Kojo\",\"200L\", ug );\n        StudentShallowCopy studentTwo = null;\n\n        try{\n            studentTwo = (StudentShallowCopy) studentOne.clone();\n        } catch (CloneNotSupportedException e){\n            e.printStackTrace();\n        }\n\n        assertSame(studentOne.getSchool(),studentTwo.getSchool());\n        studentTwo.getSchool().setName(\"University of Nigeria\");\n        assertEquals(studentOne.getSchool().getName(), studentTwo.getSchool().getName());\n    }\n\n}"}
{"code_source": "package com.baeldung.variableInitialization;\n\npublic class A {\n    private B b = new B();\n\n    public A() {\n        this.b = new B();\n    }\n\n    public A(B b) {\n        this.b = b;\n    }\n}", "test_case": "package com.baeldung.variableinitialization;\n\nimport static org.mockito.Mockito.mock;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.variableInitialization.A;\nimport com.baeldung.variableInitialization.B;\n\npublic class AUnitTest {\n\n    @Test\n    public void whenCreatingTest_useDependencyInjection() {\n        // given\n        B b = mock(B.class);\n        A a = new A(b);\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.gcd;\n\npublic class GCDImplementation {\n\n    public static int gcdByBruteForce(int n1, int n2) {\n        int gcd = 1;\n        for (int i = 1; i <= n1 && i <= n2; i++) {\n            if (n1 % i == 0 && n2 % i == 0) {\n                gcd = i;\n            }\n        }\n        return gcd;\n    }\n\n    public static int gcdByEuclidsAlgorithm(int n1, int n2) {\n        if (n2 == 0) {\n            return n1;\n        }\n        return gcdByEuclidsAlgorithm(n2, n1 % n2);\n    }\n\n    public static int gcdBySteinsAlgorithm(int n1, int n2) {\n        if (n1 == 0) {\n            return n2;\n        }\n\n        if (n2 == 0) {\n            return n1;\n        }\n\n        int n;\n        for (n = 0; ((n1 | n2) & 1) == 0; n++) {\n            n1 >>= 1;\n            n2 >>= 1;\n        }\n\n        while ((n1 & 1) == 0) {\n            n1 >>= 1;\n        }\n\n        do {\n            while ((n2 & 1) == 0) {\n                n2 >>= 1;\n            }\n\n            if (n1 > n2) {\n                int temp = n1;\n                n1 = n2;\n                n2 = temp;\n            }\n            n2 = (n2 - n1);\n        } while (n2 != 0);\n        return n1 << n;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.gcd;\n\nimport org.junit.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class GCDImplementationUnitTest {\n\n    @Test\n    public void whenCalculatingGCDByBruteForceMethod_thenCorrect() {\n        int n1 = 60;\n        int n2 = 90;\n        int gcd = GCDImplementation.gcdByBruteForce(n1, n2);\n        assertThat(gcd).isEqualTo(30);\n    }\n\n    @Test\n    public void whenCalculatingGCDByEuclidsAlgorithm_thenCorrect() {\n        int n1 = 60;\n        int n2 = 90;\n        int gcd = GCDImplementation.gcdByEuclidsAlgorithm(n1, n2);\n        assertThat(gcd).isEqualTo(30);\n    }\n\n    @Test\n    public void whenCalculatingGCDBySteinsAlgorithm_thenCorrect() {\n        int n1 = 60;\n        int n2 = 90;\n        int gcd = GCDImplementation.gcdBySteinsAlgorithm(n1, n2);\n        assertThat(gcd).isEqualTo(30);\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.percentage;\n\nimport java.util.Scanner;\n\npublic class PercentageCalculator {\n\n    public double calculatePercentage(double obtained,double total){\n        return obtained*100/total;\n    }\n\n    public static void main(String[] args) {\n        PercentageCalculator pc = new PercentageCalculator();\n        Scanner in = new Scanner(System.in);\n        System.out.println(\"Enter obtained marks:\");\n        double obtained = in.nextDouble();\n        System.out.println(\"Enter total marks:\");\n         double total =in.nextDouble();\n        System.out.println(\"Percentage obtained :\"+pc.calculatePercentage(obtained,total));\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.percentage;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class PercentageCalculatorUnitTest {\n    private PercentageCalculator pc = new PercentageCalculator();\n\n    @Test\n    public void whenPass2Integers_thenShouldCalculatePercentage(){\n        Assert.assertEquals(\"Result not as expected\",\n                50.0,pc.calculatePercentage(50,100),0.1);\n    }\n\n    @Test\n    public void whenPassObtainedMarksAsDouble_thenShouldCalculatePercentage(){\n        Assert.assertEquals(\"Result not as expected\",5.05,\n                pc.calculatePercentage(50.5,1000),0.1);\n    }\n\n    @Test\n    public void whenPassTotalMarksAsDouble_thenShouldCalculatePercentage(){\n        Assert.assertEquals(\"Result not as expected\",19.6,\n                pc.calculatePercentage(5,25.5),0.1);\n    }\n\n    @Test\n    public void whenPass2DoubleNumbers_thenShouldCalculatePercentage(){\n        Assert.assertEquals(\"Result not as expected\",20,\n                pc.calculatePercentage(5.5,27.5),0.1);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.powerset;\n\nimport javax.annotation.Nullable;\nimport java.util.AbstractSet;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\n\npublic class PowerSetUtility<T> {\n\n    private Map<T, Integer> map = new HashMap<>();\n    private List<T> reverseMap = new ArrayList<>();\n\n    //Lazy Load PowerSet class\n    private static class PowerSet<E> extends AbstractSet<Set<E>> {\n        private Map<E, Integer> map = new HashMap<>();\n        private List<E> reverseMap = new ArrayList<>();\n        private Set<E> set;\n\n        public PowerSet(Set<E> set) {\n            this.set = set;\n            initializeMap();\n        }\n\n        abstract class ListIterator<K> implements Iterator<K> {\n\n            protected int position = 0;\n            private int size;\n\n            public ListIterator(int size) {\n                this.size = size;\n            }\n\n            @Override\n            public boolean hasNext() {\n                return position < size;\n            }\n        }\n\n        static class Subset<E> extends AbstractSet<E> {\n            private Map<E, Integer> map;\n            private List<E> reverseMap;\n            private int mask;\n\n            public Subset(Map<E, Integer> map, List<E> reverseMap, int mask) {\n                this.map = map;\n                this.reverseMap = reverseMap;\n                this.mask = mask;\n            }\n\n            @Override\n            public Iterator<E> iterator() {\n                return new Iterator<E>() {\n                    int remainingSetBits = mask;\n\n                    @Override\n                    public boolean hasNext() {\n                        return remainingSetBits != 0;\n                    }\n\n                    @Override\n                    public E next() {\n                        int index = Integer.numberOfTrailingZeros(remainingSetBits);\n                        if (index == 32) {\n                            throw new NoSuchElementException();\n                        }\n                        remainingSetBits &= ~(1 << index);\n                        return reverseMap.get(index);\n                    }\n                };\n            }\n\n            @Override\n            public int size() {\n                return Integer.bitCount(mask);\n            }\n\n            @Override\n            public boolean contains(@Nullable Object o) {\n                Integer index = map.get(o);\n                return index != null && (mask & (1 << index)) != 0;\n            }\n        }\n\n        @Override\n        public Iterator<Set<E>> iterator() {\n            return new ListIterator<Set<E>>(this.size()) {\n                @Override\n                public Set<E> next() {\n                    return new Subset<>(map, reverseMap, position++);\n                }\n            };\n        }\n\n        @Override\n        public int size() {\n            return (1 << this.set.size());\n        }\n\n        @Override\n        public boolean contains(@Nullable Object obj) {\n            if (obj instanceof Set) {\n                Set<?> set = (Set<?>) obj;\n                return reverseMap.containsAll(set);\n            }\n            return false;\n        }\n\n        @Override\n        public boolean equals(@Nullable Object obj) {\n            if (obj instanceof PowerSet) {\n                PowerSet<?> that = (PowerSet<?>) obj;\n                return set.equals(that.set);//Set equals check to have the same element regardless of the order of the items\n            }\n            return super.equals(obj);\n        }\n\n\n        private void initializeMap() {\n            int mapId = 0;\n            for (E c : this.set) {\n                map.put(c, mapId++);\n                reverseMap.add(c);\n            }\n        }\n    }\n\n    public Set<Set<T>> lazyLoadPowerSet(Set<T> set) {\n        return new PowerSet<>(set);\n    }\n\n    public Set<Set<T>> recursivePowerSet(Set<T> set) {\n        if (set.isEmpty()) {\n            Set<Set<T>> ret = new HashSet<>();\n            ret.add(set);\n            return ret;\n        }\n\n        T element = set.iterator().next();\n        Set<T> subSetWithoutElement = getSubSetWithoutElement(set, element);\n        Set<Set<T>> powerSetSubSetWithoutElement = recursivePowerSet(subSetWithoutElement);\n\n        Set<Set<T>> powerSetSubSetWithElement = addElementToAll(powerSetSubSetWithoutElement, element);\n\n        Set<Set<T>> powerSet = new HashSet<>();\n        powerSet.addAll(powerSetSubSetWithoutElement);\n        powerSet.addAll(powerSetSubSetWithElement);\n        return powerSet;\n    }\n\n    public Set<Set<T>> recursivePowerSetIndexRepresentation(Collection<T> set) {\n        initializeMap(set);\n        Set<Set<Integer>> powerSetIndices = recursivePowerSetIndexRepresentation(0, set.size());\n        return unMapIndex(powerSetIndices);\n    }\n\n    private List<List<Boolean>> iterativePowerSetByLoopOverNumbers(int n) {\n        List<List<Boolean>> powerSet = new ArrayList<>();\n        for (int i = 0; i < (1 << n); i++) {\n            List<Boolean> subset = new ArrayList<>(n);\n            for (int j = 0; j < n; j++)\n                subset.add(((1 << j) & i) > 0);\n            powerSet.add(subset);\n        }\n        return powerSet;\n    }\n\n    private List<List<Boolean>> iterativePowerSetByLoopOverNumbersWithMinimalChange(int n) {\n        List<List<Boolean>> powerSet = new ArrayList<>();\n        for (int i = 0; i < (1 << n); i++) {\n            List<Boolean> subset = new ArrayList<>(n);\n            for (int j = 0; j < n; j++) {\n                int grayEquivalent = i ^ (i >> 1);\n                subset.add(((1 << j) & grayEquivalent) > 0);\n            }\n            powerSet.add(subset);\n        }\n        return powerSet;\n    }\n\n    public Set<Set<T>> recursivePowerSetBinaryRepresentation(Collection<T> set) {\n        initializeMap(set);\n        Set<List<Boolean>> powerSetBoolean = recursivePowerSetBinaryRepresentation(0, set.size());\n        return unMapBinary(powerSetBoolean);\n    }\n\n    public List<List<T>> iterativePowerSetByLoopOverNumbers(Set<T> set) {\n        initializeMap(set);\n        List<List<Boolean>> sets = iterativePowerSetByLoopOverNumbers(set.size());\n        return unMapListBinary(sets);\n    }\n\n    public List<List<T>> iterativePowerSetByLoopOverNumbersMinimalChange(Set<T> set) {\n        initializeMap(set);\n        List<List<Boolean>> sets = iterativePowerSetByLoopOverNumbersWithMinimalChange(set.size());\n        return unMapListBinary(sets);\n    }\n\n    private Set<Set<Integer>> recursivePowerSetIndexRepresentation(int idx, int n) {\n        if (idx == n) {\n            Set<Set<Integer>> empty = new HashSet<>();\n            empty.add(new HashSet<>());\n            return empty;\n        }\n        Set<Set<Integer>> powerSetSubset = recursivePowerSetIndexRepresentation(idx + 1, n);\n        Set<Set<Integer>> powerSet = new HashSet<>(powerSetSubset);\n        for (Set<Integer> s : powerSetSubset) {\n            HashSet<Integer> subSetIdxInclusive = new HashSet<>(s);\n            subSetIdxInclusive.add(idx);\n            powerSet.add(subSetIdxInclusive);\n        }\n        return powerSet;\n    }\n\n    private Set<List<Boolean>> recursivePowerSetBinaryRepresentation(int idx, int n) {\n        if (idx == n) {\n            Set<List<Boolean>> powerSetOfEmptySet = new HashSet<>();\n            powerSetOfEmptySet.add(Arrays.asList(new Boolean[n]));\n            return powerSetOfEmptySet;\n        }\n        Set<List<Boolean>> powerSetSubset = recursivePowerSetBinaryRepresentation(idx + 1, n);\n        Set<List<Boolean>> powerSet = new HashSet<>();\n        for (List<Boolean> s : powerSetSubset) {\n            List<Boolean> subSetIdxExclusive = new ArrayList<>(s);\n            subSetIdxExclusive.set(idx, false);\n            powerSet.add(subSetIdxExclusive);\n            List<Boolean> subSetIdxInclusive = new ArrayList<>(s);\n            subSetIdxInclusive.set(idx, true);\n            powerSet.add(subSetIdxInclusive);\n        }\n        return powerSet;\n    }\n\n    private void initializeMap(Collection<T> collection) {\n        int mapId = 0;\n        for (T c : collection) {\n            map.put(c, mapId++);\n            reverseMap.add(c);\n        }\n    }\n\n    private Set<Set<T>> unMapIndex(Set<Set<Integer>> sets) {\n        Set<Set<T>> ret = new HashSet<>();\n        for (Set<Integer> s : sets) {\n            HashSet<T> subset = new HashSet<>();\n            for (Integer i : s)\n                subset.add(reverseMap.get(i));\n            ret.add(subset);\n        }\n        return ret;\n    }\n\n    private Set<Set<T>> unMapBinary(Collection<List<Boolean>> sets) {\n        Set<Set<T>> ret = new HashSet<>();\n        for (List<Boolean> s : sets) {\n            HashSet<T> subset = new HashSet<>();\n            for (int i = 0; i < s.size(); i++)\n                if (s.get(i))\n                    subset.add(reverseMap.get(i));\n            ret.add(subset);\n        }\n        return ret;\n    }\n\n    private List<List<T>> unMapListBinary(Collection<List<Boolean>> sets) {\n        List<List<T>> ret = new ArrayList<>();\n        for (List<Boolean> s : sets) {\n            List<T> subset = new ArrayList<>();\n            for (int i = 0; i < s.size(); i++)\n                if (s.get(i))\n                    subset.add(reverseMap.get(i));\n            ret.add(subset);\n        }\n        return ret;\n    }\n\n    private Set<Set<T>> addElementToAll(Set<Set<T>> powerSetSubSetWithoutElement, T element) {\n        Set<Set<T>> powerSetSubSetWithElement = new HashSet<>();\n        for (Set<T> subsetWithoutElement : powerSetSubSetWithoutElement) {\n            Set<T> subsetWithElement = new HashSet<>(subsetWithoutElement);\n            subsetWithElement.add(element);\n            powerSetSubSetWithElement.add(subsetWithElement);\n        }\n        return powerSetSubSetWithElement;\n    }\n\n    private Set<T> getSubSetWithoutElement(Set<T> set, T element) {\n        Set<T> subsetWithoutElement = new HashSet<>();\n        for (T s : set) {\n            if (!s.equals(element))\n                subsetWithoutElement.add(s);\n        }\n        return subsetWithoutElement;\n    }\n}\n", "test_case": "package com.baeldung.powerset;\n\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Sets;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\nimport org.hamcrest.collection.IsCollectionWithSize;\nimport org.junit.Test;\nimport org.junit.jupiter.api.Assertions;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.Set;\n\npublic class PowerSetUtilityUnitTest {\n\n    @Test\n    public void givenSet_WhenGuavaLibraryGeneratePowerSet_ThenItContainsAllSubsets() {\n        ImmutableSet<String> set = ImmutableSet.of(\"APPLE\", \"ORANGE\", \"MANGO\");\n        Set<Set<String>> powerSet = Sets.powerSet(set);\n        Assertions.assertEquals((1 << set.size()), powerSet.size());\n        MatcherAssert.assertThat(powerSet, Matchers.containsInAnyOrder(\n          ImmutableSet.of(),\n          ImmutableSet.of(\"APPLE\"),\n          ImmutableSet.of(\"ORANGE\"),\n          ImmutableSet.of(\"APPLE\", \"ORANGE\"),\n          ImmutableSet.of(\"MANGO\"),\n          ImmutableSet.of(\"APPLE\", \"MANGO\"),\n          ImmutableSet.of(\"ORANGE\", \"MANGO\"),\n          ImmutableSet.of(\"APPLE\", \"ORANGE\", \"MANGO\")\n        ));\n    }\n\n    @Test\n    public void givenSet_WhenPowerSetIsLazyLoadGenerated_ThenItContainsAllSubsets() {\n        Set<String> set = RandomSetOfStringGenerator.generateRandomSet();\n        Set<Set<String>> powerSet = new PowerSetUtility<String>().lazyLoadPowerSet(set);\n\n        //To make sure that the size of power set is (2 power n)\n        MatcherAssert.assertThat(powerSet, IsCollectionWithSize.hasSize((1 << set.size())));\n        //To make sure that number of occurrence of each element is (2 power n-1)\n        Map<String, Integer> counter = new HashMap<>();\n        for (Set<String> subset : powerSet) {\n            for (String name : subset) {\n                int num = counter.getOrDefault(name, 0);\n                counter.put(name, num + 1);\n            }\n        }\n        counter.forEach((k, v) -> Assertions.assertEquals((1 << (set.size() - 1)), v.intValue()));\n    }\n\n    @Test\n    public void givenSet_WhenPowerSetIsCalculated_ThenItContainsAllSubsets() {\n        Set<String> set = RandomSetOfStringGenerator.generateRandomSet();\n\n        Set<Set<String>> powerSet = new PowerSetUtility<String>().recursivePowerSet(set);\n\n        //To make sure that the size of power set is (2 power n)\n        MatcherAssert.assertThat(powerSet, IsCollectionWithSize.hasSize((1 << set.size())));\n        //To make sure that number of occurrence of each element is (2 power n-1)\n        Map<String, Integer> counter = new HashMap<>();\n        for (Set<String> subset : powerSet) {\n            for (String name : subset) {\n                int num = counter.getOrDefault(name, 0);\n                counter.put(name, num + 1);\n            }\n        }\n        counter.forEach((k, v) -> Assertions.assertEquals((1 << (set.size() - 1)), v.intValue()));\n    }\n\n    @Test\n    public void givenSet_WhenPowerSetIsCalculatedRecursiveByIndexRepresentation_ThenItContainsAllSubsets() {\n        Set<String> set = RandomSetOfStringGenerator.generateRandomSet();\n\n        Set<Set<String>> powerSet = new PowerSetUtility<String>().recursivePowerSetIndexRepresentation(set);\n\n        //To make sure that the size of power set is (2 power n)\n        MatcherAssert.assertThat(powerSet, IsCollectionWithSize.hasSize((1 << set.size())));\n        //To make sure that number of occurrence of each element is (2 power n-1)\n        Map<String, Integer> counter = new HashMap<>();\n        for (Set<String> subset : powerSet) {\n            for (String name : subset) {\n                int num = counter.getOrDefault(name, 0);\n                counter.put(name, num + 1);\n            }\n        }\n        counter.forEach((k, v) -> Assertions.assertEquals((1 << (set.size() - 1)), v.intValue()));\n    }\n\n    @Test\n    public void givenSet_WhenPowerSetIsCalculatedRecursiveByBinaryRepresentation_ThenItContainsAllSubsets() {\n        Set<String> set = RandomSetOfStringGenerator.generateRandomSet();\n\n        Set<Set<String>> powerSet = new PowerSetUtility<String>().recursivePowerSetBinaryRepresentation(set);\n\n        //To make sure that the size of power set is (2 power n)\n        MatcherAssert.assertThat(powerSet, IsCollectionWithSize.hasSize((1 << set.size())));\n        //To make sure that number of occurrence of each element is (2 power n-1)\n        Map<String, Integer> counter = new HashMap<>();\n        for (Set<String> subset : powerSet) {\n            for (String name : subset) {\n                int num = counter.getOrDefault(name, 0);\n                counter.put(name, num + 1);\n            }\n        }\n        counter.forEach((k, v) -> Assertions.assertEquals((1 << (set.size() - 1)), v.intValue()));\n    }\n\n    @Test\n    public void givenSet_WhenPowerSetIsCalculatedIterativePowerSetByLoopOverNumbers_ThenItContainsAllSubsets() {\n        Set<String> set = RandomSetOfStringGenerator.generateRandomSet();\n\n        List<List<String>> powerSet = new PowerSetUtility<String>().iterativePowerSetByLoopOverNumbers(set);\n\n        //To make sure that the size of power set is (2 power n)\n        MatcherAssert.assertThat(powerSet, IsCollectionWithSize.hasSize((1 << set.size())));\n        //To make sure that number of occurrence of each element is (2 power n-1)\n        Map<String, Integer> counter = new HashMap<>();\n        for (List<String> subset : powerSet) {\n            for (String name : subset) {\n                int num = counter.getOrDefault(name, 0);\n                counter.put(name, num + 1);\n            }\n        }\n        counter.forEach((k, v) -> Assertions.assertEquals((1 << (set.size() - 1)), v.intValue()));\n        //To make sure that one subset is not generated twice\n        Assertions.assertEquals(powerSet.size(), new HashSet<>(powerSet).size());\n        //To make sure that each element in each subset is occurred once\n        for (List<String> subset : powerSet) {\n            Assertions.assertEquals(subset.size(), new HashSet<>(subset).size());\n        }\n    }\n\n    @Test\n    public void givenSet_WhenPowerSetIsCalculatedIterativePowerSetByLoopOverNumbersWithMinimalChange_ThenItContainsAllSubsets() {\n\n        Set<String> set = RandomSetOfStringGenerator.generateRandomSet();\n        List<List<String>> powerSet = new PowerSetUtility<String>().iterativePowerSetByLoopOverNumbersMinimalChange(set);\n\n        //To make sure that the size of power set is (2 power n)\n        MatcherAssert.assertThat(powerSet, IsCollectionWithSize.hasSize((1 << set.size())));\n        //To make sure that number of occurrence of each element is (2 power n-1)\n        Map<String, Integer> counter = new HashMap<>();\n        for (List<String> subset : powerSet) {\n            for (String name : subset) {\n                int num = counter.getOrDefault(name, 0);\n                counter.put(name, num + 1);\n            }\n        }\n        counter.forEach((k, v) -> Assertions.assertEquals((1 << (set.size() - 1)), v.intValue()));\n        //To make sure that one subset is not generated twice\n        Assertions.assertEquals(powerSet.size(), new HashSet<>(powerSet).size());\n        //To make sure that each element in each subset is occurred once\n        for (List<String> subset : powerSet) {\n            Assertions.assertEquals(subset.size(), new HashSet<>(subset).size());\n        }\n        //To make sure that difference of consecutive subsets is exactly 1\n        for(int i=1; i<powerSet.size(); i++) {\n            int diff = 0;\n            for (String s : powerSet.get(i - 1))\n                if (!powerSet.get(i).contains(s))\n                    diff++;\n            for (String s : powerSet.get(i))\n                if (!powerSet.get(i - 1).contains(s))\n                    diff++;\n            Assertions.assertEquals(1, diff);\n        }\n    }\n\n    static class RandomSetOfStringGenerator {\n        private static List<String> fruits = Arrays.asList(\"Apples\", \"Avocados\", \"Banana\", \"Blueberry\", \"Cherry\", \"Clementine\", \"Cucumber\", \"Date\", \"Fig\",\n          \"Grapefruit\"/*, \"Grape\", \"Kiwi\", \"Lemon\", \"Mango\", \"Mulberry\", \"Melon\", \"Nectarine\", \"Olive\", \"Orange\"*/);\n\n        static Set<String> generateRandomSet() {\n            Set<String> set = new HashSet<>();\n            Random random = new Random();\n            int size = random.nextInt(fruits.size());\n            while (set.size() != size) {\n                set.add(fruits.get(random.nextInt(fruits.size())));\n            }\n            return set;\n        }\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.rectanglesoverlap;\n\npublic class Point {\n\n    private int x;\n    private int y;\n\n    public Point(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public void setX(int x) {\n        this.x = x;\n    }\n\n    public int getY() {\n        return y;\n    }\n\n    public void setY(int y) {\n        this.y = y;\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.distancebetweenpoints;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class DistanceBetweenPointsServiceUnitTest {\n\n    private DistanceBetweenPointsService service = new DistanceBetweenPointsService();\n\n    @Test\n    public void givenTwoPoints_whenCalculateDistanceByFormula_thenCorrect() {\n\n        double x1 = 3;\n        double y1 = 4;\n        double x2 = 7;\n        double y2 = 1;\n\n        double distance = service.calculateDistanceBetweenPoints(x1, y1, x2, y2);\n\n        assertEquals(distance, 5, 0.001);\n\n    }\n\n    @Test\n    public void givenTwoPoints_whenCalculateDistanceWithHypot_thenCorrect() {\n\n        double x1 = 3;\n        double y1 = 4;\n        double x2 = 7;\n        double y2 = 1;\n\n        double distance = service.calculateDistanceBetweenPointsWithHypot(x1, y1, x2, y2);\n\n        assertEquals(distance, 5, 0.001);\n\n    }\n\n    @Test\n    public void givenTwoPoints_whenCalculateDistanceWithPoint2D_thenCorrect() {\n\n        double x1 = 3;\n        double y1 = 4;\n        double x2 = 7;\n        double y2 = 1;\n\n        double distance = service.calculateDistanceBetweenPointsWithPoint2D(x1, y1, x2, y2);\n\n        assertEquals(distance, 5, 0.001);\n\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.factorial;\n\nimport java.math.BigInteger;\nimport java.util.stream.LongStream;\n\nimport org.apache.commons.math3.util.CombinatoricsUtils;\n\nimport com.google.common.math.BigIntegerMath;\n\npublic class Factorial {\n\n    public long factorialUsingForLoop(int n) {\n        long fact = 1;\n        for (int i = 2; i <= n; i++) {\n            fact = fact * i;\n        }\n        return fact;\n    }\n\n    public long factorialUsingStreams(int n) {\n        return LongStream.rangeClosed(1, n)\n            .reduce(1, (long x, long y) -> x * y);\n    }\n\n    public long factorialUsingRecursion(int n) {\n        if (n <= 2) {\n            return n;\n        }\n        return n * factorialUsingRecursion(n - 1);\n    }\n\n    private Long[] factorials = new Long[20];\n\n    public long factorialUsingMemoize(int n) {\n\n        if (factorials[n] != null) {\n            return factorials[n];\n        }\n\n        if (n <= 2) {\n            return n;\n        }\n        long nthValue = n * factorialUsingMemoize(n - 1);\n        factorials[n] = nthValue;\n        return nthValue;\n    }\n\n    public BigInteger factorialHavingLargeResult(int n) {\n        BigInteger result = BigInteger.ONE;\n        for (int i = 2; i <= n; i++)\n            result = result.multiply(BigInteger.valueOf(i));\n        return result;\n    }\n\n    public long factorialUsingApacheCommons(int n) {\n        return CombinatoricsUtils.factorial(n);\n    }\n\n    public BigInteger factorialUsingGuava(int n) {\n        return BigIntegerMath.factorial(n);\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.factorial;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.math.BigInteger;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class FactorialUnitTest {\n\n    Factorial factorial;\n\n    @Before\n    public void setup() {\n        factorial = new Factorial();\n    }\n\n    @Test\n    public void whenCalculatingFactorialUsingForLoop_thenCorrect() {\n        int n = 5;\n\n        assertThat(factorial.factorialUsingForLoop(n)).isEqualTo(120);\n    }\n\n    @Test\n    public void whenCalculatingFactorialUsingStreams_thenCorrect() {\n        int n = 5;\n\n        assertThat(factorial.factorialUsingStreams(n)).isEqualTo(120);\n    }\n\n    @Test\n    public void whenCalculatingFactorialUsingRecursion_thenCorrect() {\n        int n = 5;\n\n        assertThat(factorial.factorialUsingRecursion(n)).isEqualTo(120);\n    }\n\n    @Test\n    public void whenCalculatingFactorialUsingMemoize_thenCorrect() {\n        int n = 5;\n\n        assertThat(factorial.factorialUsingMemoize(n)).isEqualTo(120);\n\n        n = 6;\n\n        assertThat(factorial.factorialUsingMemoize(n)).isEqualTo(720);\n    }\n\n    @Test\n    public void whenCalculatingFactorialHavingLargeResult_thenCorrect() {\n        int n = 22;\n\n        assertThat(factorial.factorialHavingLargeResult(n)).isEqualTo(new BigInteger(\"1124000727777607680000\"));\n    }\n\n    @Test\n    public void whenCalculatingFactorialUsingApacheCommons_thenCorrect() {\n        int n = 5;\n\n        assertThat(factorial.factorialUsingApacheCommons(n)).isEqualTo(120);\n    }\n\n    @Test\n    public void whenCalculatingFactorialUsingGuava_thenCorrect() {\n        int n = 22;\n\n        assertThat(factorial.factorialUsingGuava(n)).isEqualTo(new BigInteger(\"1124000727777607680000\"));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.largestpowerof2;\n\nimport org.nd4j.linalg.io.Assert;\n\npublic class LargestPowerOf2 {\n    public long findLargestPowerOf2LessThanTheGivenNumber(long input) {\n        Assert.isTrue(input > 1, \"Invalid input\");\n\n        long firstPowerOf2 = 1;\n        long nextPowerOf2 = 2;\n\n        while (nextPowerOf2 < input) {\n            firstPowerOf2 = nextPowerOf2;\n            nextPowerOf2 = nextPowerOf2 * 2;\n        }\n        return firstPowerOf2;\n    }\n\n    public long findLargestPowerOf2LessThanTheGivenNumberUsingLogBase2(long input) {\n        Assert.isTrue(input > 1, \"Invalid input\");\n\n        long temp = input;\n        if (input % 2 == 0) {\n            temp = input - 1;\n        }\n\n        // Find log base 2 of a given number\n        long power = (long) (Math.log(temp) / Math.log(2));\n        long result = (long) Math.pow(2, power);\n\n        return result;\n    }\n\n    public long findLargestPowerOf2LessThanTheGivenNumberUsingBitwiseAnd(long input) {\n        Assert.isTrue(input > 1, \"Invalid input\");\n        long result = 1;\n        for (long i = input - 1; i > 1; i--) {\n            if ((i & (i - 1)) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n\n    public long findLargestPowerOf2LessThanTheGivenNumberUsingBitShiftApproach(long input) {\n        Assert.isTrue(input > 1, \"Invalid input\");\n        long result = 1;\n        long powerOf2;\n\n        for (long i = 0; i < Long.BYTES * 8; i++) {\n            powerOf2 = 1 << i;\n            if (powerOf2 >= input) {\n                break;\n            }\n            result = powerOf2;\n        }\n        return result;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.largestpowerof2;\n\nimport java.util.Arrays;\nimport java.util.Collection;\n\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\n\n@RunWith(Parameterized.class)\npublic class LargestPowerOf2UnitTest {\n    private long input;\n    private long expectedResult;\n\n    public LargestPowerOf2UnitTest(long input, long expectedResult) {\n        this.input = input;\n        this.expectedResult = expectedResult;\n    }\n\n    @Parameterized.Parameters(name = \"{index}: verifyLargestPowerOf2LessThanTheGivenNumber({0}) = {1}\")\n    public static Collection<Object[]> data() {\n        return Arrays.asList(new Object[][] { { 2, 1 }, { 4, 2 }, { 500, 256 }, { 512, 256 }, { 1050, 1024 } });\n    }\n\n    @Test\n    public void givenValidInput_verifyLargestPowerOf2LessThanTheGivenNumber() {\n        LargestPowerOf2 largestPowerOf2 = new LargestPowerOf2();\n\n        long result = largestPowerOf2.findLargestPowerOf2LessThanTheGivenNumber(input);\n\n        Assert.assertEquals(expectedResult, result);\n    }\n\n    @Test\n    public void givenValidInput_verifyLargestPowerOf2LessThanTheGivenNumberUsingLogBase2() {\n        LargestPowerOf2 largestPowerOf2 = new LargestPowerOf2();\n\n        long result = largestPowerOf2.findLargestPowerOf2LessThanTheGivenNumberUsingLogBase2(input);\n\n        Assert.assertEquals(expectedResult, result);\n    }\n\n    @Test\n    public void givenValidInput_verifyLargestPowerOf2LessThanTheGivenNumberBitwiseAnd() {\n        LargestPowerOf2 largestPowerOf2 = new LargestPowerOf2();\n\n        long result = largestPowerOf2.findLargestPowerOf2LessThanTheGivenNumberUsingBitwiseAnd(input);\n\n        Assert.assertEquals(expectedResult, result);\n    }\n\n    @Test\n    public void givenValidInput_verifyLargestPowerOf2LessThanTheGivenNumberBitShiftApproach() {\n        LargestPowerOf2 largestPowerOf2 = new LargestPowerOf2();\n\n        long result = largestPowerOf2.findLargestPowerOf2LessThanTheGivenNumberUsingBitShiftApproach(input);\n\n        Assert.assertEquals(expectedResult, result);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void givenInvalidInput_ShouldThrowException() {\n        LargestPowerOf2 largestPowerOf2 = new LargestPowerOf2();\n        largestPowerOf2.findLargestPowerOf2LessThanTheGivenNumber(1);\n    }\n}"}
{"code_source": "package com.baeldung.algorithms.linesintersection;\n\nimport java.awt.Point;\nimport java.util.Optional;\n\npublic class LinesIntersectionService {\n\n    public Optional<Point> calculateIntersectionPoint(double m1, double b1, double m2, double b2) {\n\n        if (m1 == m2) {\n            return Optional.empty();\n        }\n\n        double x = (b2 - b1) / (m1 - m2);\n        double y = m1 * x + b1;\n\n        Point point = new Point();\n        point.setLocation(x, y);\n        return Optional.of(point);\n    }\n}\n", "test_case": "package com.baeldung.algorithms.linesintersection;\n\nimport java.awt.Point;\nimport java.util.Optional;\n\nimport org.junit.Test;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertEquals;\n\npublic class LinesIntersectionServiceUnitTest {\n    private LinesIntersectionService service = new LinesIntersectionService();\n\n    @Test\n    public void givenNotParallelLines_whenCalculatePoint_thenPresent() {\n\n        double m1 = 0;\n        double b1 = 0;\n        double m2 = 1;\n        double b2 = -1;\n\n        Optional<Point> point = service.calculateIntersectionPoint(m1, b1, m2, b2);\n\n        assertTrue(point.isPresent());\n        assertEquals(point.get().getX(), 1, 0.001);\n        assertEquals(point.get().getY(), 0, 0.001);\n    }\n\n    @Test\n    public void givenParallelLines_whenCalculatePoint_thenEmpty() {\n        double m1 = 1;\n        double b1 = 0;\n        double m2 = 1;\n        double b2 = -1;\n\n        Optional<Point> point = service.calculateIntersectionPoint(m1, b1, m2, b2);\n\n        assertFalse(point.isPresent());\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.mercator;\n\nabstract class Mercator {\n    final static double RADIUS_MAJOR = 6378137.0;\n    final static double RADIUS_MINOR = 6356752.3142;\n\n    abstract double yAxisProjection(double input);\n\n    abstract double xAxisProjection(double input);\n}\n", "test_case": "package com.baeldung.algorithms.mercator;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\n\npublic class EllipticalMercatorUnitTest {\n\n    @Test\n    public void giventThatTheInputIs22_whenXAxisProjectionIsCalled_thenTheResultIsTheCorrectOne() {\n        Mercator mercator = new EllipticalMercator();\n        double result = mercator.xAxisProjection(22);\n        Assert.assertEquals(result, 2449028.7974520186, 0.0);\n    }\n\n    @Test\n    public void giventThatTheInputIs44_whenYAxisProjectionIsCalled_thenTheResultIsTheCorrectOne() {\n        Mercator mercator = new EllipticalMercator();\n        double result = mercator.yAxisProjection(44);\n        Assert.assertEquals(result, 5435749.887511954, 0.0);\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.mercator;\n\npublic class SphericalMercator extends  Mercator {\n\n    @Override\n    double xAxisProjection(double input) {\n        return Math.toRadians(input) * RADIUS_MAJOR;\n    }\n\n    @Override\n    double yAxisProjection(double input) {\n        return Math.log(Math.tan(Math.PI / 4 + Math.toRadians(input) / 2)) * RADIUS_MAJOR;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.mercator;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class SphericalMercatorUnitTest {\n\n    @Test\n    public void giventThatTheInputIs22_whenXAxisProjectionIsCalled_thenTheResultIsTheCorrectOne() {\n        Mercator mercator = new SphericalMercator();\n        double result = mercator.xAxisProjection(22);\n        Assert.assertEquals(result, 2449028.7974520186, 0.0);\n    }\n\n    @Test\n    public void giventThatTheInputIs44_whenYAxisProjectionIsCalled_thenTheResultIsTheCorrectOne() {\n        Mercator mercator = new SphericalMercator();\n        double result = mercator.yAxisProjection(44);\n        Assert.assertEquals(result, 5465442.183322753, 0.0);\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.rectanglesoverlap;\n\npublic class Rectangle {\n\n    private Point bottomLeft;\n    private Point topRight;\n\n    public Rectangle(Point bottomLeft, Point topRight) {\n        this.bottomLeft = bottomLeft;\n        this.topRight = topRight;\n    }\n\n    public Point getBottomLeft() {\n        return bottomLeft;\n    }\n\n    public void setBottomLeft(Point bottomLeft) {\n        this.bottomLeft = bottomLeft;\n    }\n\n    public Point getTopRight() {\n        return topRight;\n    }\n\n    public void setTopRight(Point topRight) {\n        this.topRight = topRight;\n    }\n\n    public boolean isOverlapping(Rectangle other) {\n        // one rectangle is to the top of the other\n        if (this.topRight.getY() < other.bottomLeft.getY() || this.bottomLeft.getY() > other.topRight.getY()) {\n            return false;\n        }\n        // one rectangle is to the left of the other\n        if (this.topRight.getX() < other.bottomLeft.getX() || this.bottomLeft.getX() > other.topRight.getX()) {\n            return false;\n        }\n        return true;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.rectanglesoverlap;\n\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertFalse;\nimport org.junit.Test;\n\npublic class RectangleUnitTest {\n\n    @Test\n    public void givenTwoOverlappingRectangles_whenisOverlappingCalled_shouldReturnTrue() {\n        Rectangle rectangle1 = new Rectangle(new Point(2, 1), new Point(4, 3));\n        Rectangle rectangle2 = new Rectangle(new Point(1, 1), new Point(6, 4));\n        assertTrue(rectangle1.isOverlapping(rectangle2));\n\n        rectangle1 = new Rectangle(new Point(-5, -2), new Point(2, 3));\n        rectangle2 = new Rectangle(new Point(-2, -1), new Point(5, 2));\n        assertTrue(rectangle1.isOverlapping(rectangle2));\n\n        rectangle1 = new Rectangle(new Point(-5, 1), new Point(2, 4));\n        rectangle2 = new Rectangle(new Point(-2, -2), new Point(5, 5));\n        assertTrue(rectangle1.isOverlapping(rectangle2));\n    }\n\n    @Test\n    public void givenTwoNonOverlappingRectangles_whenisOverlappingCalled_shouldReturnFalse() {\n        Rectangle rectangle1 = new Rectangle(new Point(-5, 1), new Point(-3, 4));\n        Rectangle rectangle2 = new Rectangle(new Point(-2, -2), new Point(5, 5));\n        assertFalse(rectangle1.isOverlapping(rectangle2));\n\n        rectangle1 = new Rectangle(new Point(-5, 1), new Point(3, 4));\n        rectangle2 = new Rectangle(new Point(-2, -2), new Point(5, -1));\n        assertFalse(rectangle1.isOverlapping(rectangle2));\n\n        rectangle1 = new Rectangle(new Point(-2, 1), new Point(0, 3));\n        rectangle2 = new Rectangle(new Point(3, 1), new Point(5, 4));\n        assertFalse(rectangle1.isOverlapping(rectangle2));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.roundedup;\n\nimport java.util.Scanner;\n\npublic class RoundUpToHundred {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        double input = scanner.nextDouble();\n        scanner.close();\n\n        RoundUpToHundred.round(input);\n    }\n\n    static long round(double input) {\n        long i = (long) Math.ceil(input);\n        return ((i + 99) / 100) * 100;\n    };\n\n}\n", "test_case": "package com.baeldung.algorithms.roundedup;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\npublic class RoundUpToHundredUnitTest {\n    @Test\n    public void givenInput_whenRound_thenRoundUpToTheNearestHundred() {\n        assertEquals(\"Rounded up to hundred\", 100, RoundUpToHundred.round(99));\n        assertEquals(\"Rounded up to three hundred \", 300, RoundUpToHundred.round(200.2));\n        assertEquals(\"Returns same rounded value\", 400, RoundUpToHundred.round(400));\n    }\n}\n"}
{"code_source": "package com.baeldung.matrices;\n\npublic class HomemadeMatrix {\n    public static double[][] multiplyMatrices(double[][] firstMatrix, double[][] secondMatrix) {\n        double[][] result = new double[firstMatrix.length][secondMatrix[0].length];\n\n        for (int row = 0; row < result.length; row++) {\n            for (int col = 0; col < result[row].length; col++) {\n                result[row][col] = multiplyMatricesCell(firstMatrix, secondMatrix, row, col);\n            }\n        }\n\n        return result;\n    }\n\n    private static double multiplyMatricesCell(double[][] firstMatrix, double[][] secondMatrix, int row, int col) {\n        double cell = 0;\n        for (int i = 0; i < secondMatrix.length; i++) {\n            cell += firstMatrix[row][i] * secondMatrix[i][col];\n        }\n        return cell;\n    }\n}", "test_case": "package com.baeldung.matrices.homemade;\n\nimport org.junit.jupiter.api.Test;\nimport org.openjdk.jmh.annotations.*;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass HomemadeMatrixUnitTest {\n\n    @Test\n    void givenTwoMatrices_whenMultiply_thenMultiplicatedMatrix() {\n        double[][] firstMatrix = {\n          new double[]{1d, 5d},\n          new double[]{2d, 3d},\n          new double[]{1d, 7d}\n        };\n\n        double[][] secondMatrix = {\n          new double[]{1d, 2d, 3d, 7d},\n          new double[]{5d, 2d, 8d, 1d}\n        };\n\n        double[][] expected = {\n          new double[]{26d, 12d, 43d, 12d},\n          new double[]{17d, 10d, 30d, 17d},\n          new double[]{36d, 16d, 59d, 14d}\n        };\n\n        double[][] actual = multiplyMatrices(firstMatrix, secondMatrix);\n\n        assertThat(actual).isEqualTo(expected);\n    }\n\n    private double[][] multiplyMatrices(double[][] firstMatrix, double[][] secondMatrix) {\n        double[][] result = new double[firstMatrix.length][secondMatrix[0].length];\n\n        for (int row = 0; row < result.length; row++) {\n            for (int col = 0; col < result[row].length; col++) {\n                result[row][col] = multiplyMatricesCell(firstMatrix, secondMatrix, row, col);\n            }\n        }\n\n        return result;\n    }\n\n    private double multiplyMatricesCell(double[][] firstMatrix, double[][] secondMatrix, int row, int col) {\n        double cell = 0;\n        for (int i = 0; i < secondMatrix.length; i++) {\n            cell += firstMatrix[row][i] * secondMatrix[i][col];\n        }\n        return cell;\n    }\n\n}"}
{"code_source": "package com.baeldung.math.bmicalculator;\n\npublic class BMICalculator {\n\n    public static String calculateBMI(double weight, double height) {\n\n        double bmi = weight / (height * height);\n\n        if (bmi < 18.5)\n            return \"Underweight\";\n        else if (bmi < 25)\n            return \"Normal\";\n        else if (bmi < 30)\n            return \"Overweight\";\n        else\n            return \"Obese\";\n    }\n}\n", "test_case": "package com.baeldung.math.bmicalculator;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.jupiter.api.Test;\n\npublic class BMICalculatorUnitTest {\n\n    @Test\n    public void whenBMIIsGreaterThanThirty_thenObese() {\n\n        double weight = 100;\n        double height = 1.524;\n        String actual = BMICalculator.calculateBMI(weight, height);\n        String expected = \"Obese\";\n\n        assertThat(actual).isEqualTo(expected);\n\n    }\n}\n"}
{"code_source": "package com.baeldung.math.quadraticequationroot;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ComplexRootsCalculator {\n\n    public static List<Complex> getPolynomRoots(Polynom polynom) {\n        List<Complex> roots = new ArrayList<>();\n        double discriminant = polynom.getDiscriminant();\n        if (discriminant > 0) {\n            roots.add(Complex.ofReal((-polynom.getB() - Math.sqrt(discriminant)) / (2 * polynom.getA())));\n            roots.add(Complex.ofReal((-polynom.getB() + Math.sqrt(discriminant)) / (2 * polynom.getA())));\n        } else if (discriminant == 0) {\n            roots.add(Complex.ofReal(-polynom.getB() / (2 * polynom.getA())));\n        } else {\n            roots.add(new Complex(-polynom.getB() / (2* polynom.getA()), -Math.sqrt(-discriminant) / 2* polynom.getA()));\n            roots.add(new Complex(-polynom.getB() / (2* polynom.getA()), Math.sqrt(-discriminant) / 2* polynom.getA()));\n        }\n        return roots;\n    }\n\n}\n", "test_case": "package com.baeldung.math.quadraticequationroot;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class ComplexRootsCalculatorUnitTest {\n\n    @Test\n    void givenPolynomWithStrictlyPositiveDiscriminant_whenGetPolynomRoots_ThenReturnBothRealRoots() {\n        Polynom polynom = new Polynom(1d, 1d, -6d);\n        List<Complex> roots = ComplexRootsCalculator.getPolynomRoots(polynom);\n        assertEquals(2, roots.size());\n        assertTrue(roots.stream().anyMatch(c -> c.getRealPart() == 2d && c.getImaginaryPart() == 0));\n        assertTrue(roots.stream().anyMatch(c -> c.getRealPart() == -3d && c.getImaginaryPart() == 0));\n    }\n\n    @Test\n    void givenPolynomWithDiscriminantEqualsZero_whenGetPolynomRoots_ThenReturnRoot() {\n        Polynom polynom = new Polynom(1d, 4d, 4d);\n        List<Complex> roots = ComplexRootsCalculator.getPolynomRoots(polynom);\n        assertEquals(1, roots.size());\n        assertTrue(roots.get(0).getRealPart() == -2d && roots.get(0).getImaginaryPart() == 0d);\n    }\n\n    @Test\n    void givenPolynomWithStrictlyNegativeDiscriminant_whenGetPolynomRoots_ThenReturnBothComplexRoot() {\n        Polynom polynom = new Polynom(1d, -4d, 8d);\n        List<Complex> roots = ComplexRootsCalculator.getPolynomRoots(polynom);\n        assertEquals(2, roots.size());\n        assertTrue(roots.stream().anyMatch(c -> c.getRealPart() == 2d && c.getImaginaryPart() == 2d));\n        assertTrue(roots.stream().anyMatch(c -> c.getRealPart() == 2d && c.getImaginaryPart() == -2d));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.math.quadraticequationroot;\n\npublic class Polynom {\n\n    private double a;\n    private double b;\n    private double c;\n\n    public Polynom(double a, double b, double c) {\n        if (a == 0) {\n            throw new IllegalArgumentException(\"a can not be equal to 0\");\n        }\n        this.a = a;\n        this.b = b;\n        this.c = c;\n    }\n\n    public double getA() {\n        return a;\n    }\n\n    public double getB() {\n        return b;\n    }\n\n    public double getC() {\n        return c;\n    }\n\n    public double getDiscriminant() {\n        return b * b - 4 * a * c;\n    }\n\n}\n", "test_case": "package com.baeldung.math.quadraticequationroot;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class PolynomUnitTest {\n\n    @Test\n    void givenaEqualTo0_WhenNewPolynom_ThenThrows() {\n        assertThrows(IllegalArgumentException.class, () -> new Polynom(0, 1, 1));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.math.quadraticequationroot;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class RealRootsCalculator {\n\n    public static List<Double> getPolynomRoots(Polynom polynom) {\n        List<Double> roots = new ArrayList<>();\n        double discriminant = polynom.getDiscriminant();\n        if (discriminant > 0) {\n            roots.add((-polynom.getB() - Math.sqrt(discriminant)) / (2 * polynom.getA()));\n            roots.add((-polynom.getB() + Math.sqrt(discriminant)) / (2 * polynom.getA()));\n        } else if (discriminant == 0) {\n            roots.add(-polynom.getB() / (2 * polynom.getA()));\n        }\n        return roots;\n    }\n\n}\n", "test_case": "package com.baeldung.math.quadraticequationroot;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nclass RealRootsCalculatorUnitTest {\n\n    @Test\n    void givenPolynomWithStrictlyPositiveDiscriminant_whenGetPolynomRoots_ThenReturnBothRoots() {\n        Polynom polynom = new Polynom(1d, 1d, -6d);\n        List<Double> roots = RealRootsCalculator.getPolynomRoots(polynom);\n        assertEquals(2, roots.size());\n        assertTrue(roots.containsAll(Arrays.asList(2d, -3d)));\n    }\n\n    @Test\n    void givenPolynomWithDiscriminantEqualsZero_whenGetPolynomRoots_ThenReturnRoot() {\n        Polynom polynom = new Polynom(1d, 4d, 4d);\n        List<Double> roots = RealRootsCalculator.getPolynomRoots(polynom);\n        assertEquals(1, roots.size());\n        assertTrue(roots.get(0).equals(-2d));\n    }\n\n    @Test\n    void givenPolynomWithStrictlyNegativeDiscriminant_whenGetPolynomRoots_ThenReturnNoRoot() {\n        Polynom polynom = new Polynom(3d, 2d, 5d);\n        List<Double> roots = RealRootsCalculator.getPolynomRoots(polynom);\n        assertEquals(0, roots.size());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.abstractconstructors.noargs;\n\npublic abstract class AbstractClass {\n\n    public AbstractClass() {\n        System.out.println(\"Initializing AbstractClass\");\n    }\n}\n", "test_case": "package com.baeldung.abstractconstructors.noargs;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\nclass AbstractClassUnitTest {\n\n    @Test\n    void givenNoArgsAbstractConstructor_whenNewSubclassA_thenCalled() {\n        assertNotNull(new ConcreteClassA());\n    }\n\n    @Test\n    void givenNoArgsAbstractConstructor_whenNewSubclassB_thenCalled() {\n        assertNotNull(new ConcreteClassB());\n    }\n}\n"}
{"code_source": "package com.baeldung.copyconstructor;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Manager extends Employee {\n\n    private List<Employee> directReports;\n\n    public Manager(int id, String name, Date startDate, List<Employee> directReports) {\n        super(id, name, startDate);\n        this.directReports = directReports;\n    }\n\n    public Manager(Manager manager) {\n        super(manager.id, manager.name, manager.startDate);\n        this.directReports = manager.directReports.stream()\n          .collect(Collectors.toList());\n    }\n\n    @Override\n    public Employee copy() {\n        return new Manager(this);\n    }\n\n    List<Employee> getDirectReport() {\n        return this.directReports;\n    }\n\n}\n", "test_case": "package com.baeldung.copyconstructor;\n\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport org.junit.Test;\n\npublic class ManagerUnitTest {\n    @Test\n    public void givenCopyConstructor_whenDeepCopy_thenDistinct() {\n        Date startDate = new Date(123);\n        Employee e1 = new Employee(1, \"Baeldung\", startDate);\n        Employee e2 = new Employee(e1);\n        List<Employee> directReports = new ArrayList<Employee>();\n        directReports.add(e1);\n        directReports.add(e2);\n\n        Manager m1 = new Manager(1, \"Baeldung Manager\", startDate, directReports);\n        Manager m2 = new Manager(m1);\n        List<Employee> directReports1 = m1.getDirectReport();\n        List<Employee> directReports2 = m2.getDirectReport();\n        assertEquals(directReports1.size(), directReports2.size());\n        assertArrayEquals(directReports1.toArray(), directReports2.toArray());\n\n        // clear m1's direct reports list. m2's list should not be affected\n        directReports.clear();\n        directReports1 = m1.getDirectReport();\n        directReports2 = m2.getDirectReport();\n        assertEquals(0, directReports1.size());\n        assertEquals(2, directReports2.size());\n\n    }\n\n    @Test\n    public void givenCopyMethod_whenCopy_thenDistinct() {\n        Date startDate = new Date(123);\n        Employee e1 = new Employee(1, \"Baeldung\", startDate);\n        Employee e2 = new Employee(e1);\n        List<Employee> directReports = new ArrayList<Employee>();\n        directReports.add(e1);\n        directReports.add(e2);\n\n        // a Manager object whose declaration type is Employee.\n        Employee source = new Manager(1, \"Baeldung Manager\", startDate, directReports);\n        Employee clone = source.copy();\n\n        // after copy, clone should be still a Manager object.\n        assertTrue(clone instanceof Manager);\n        List<Employee> directReports1 = ((Manager) source).getDirectReport();\n        List<Employee> directReports2 = ((Manager) clone).getDirectReport();\n        assertEquals(directReports1.size(), directReports2.size());\n        assertArrayEquals(directReports1.toArray(), directReports2.toArray());\n\n        // clear source's direct reports list. clone's list should not be affected\n        directReports.clear();\n        directReports1 = ((Manager) source).getDirectReport();\n        directReports2 = ((Manager) clone).getDirectReport();\n        assertEquals(0, directReports1.size());\n        assertEquals(2, directReports2.size());\n\n    }\n}\n"}
{"code_source": "package com.baeldung.supertype;\n\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\n\npublic abstract class TypeReference<T> {\n\n    private final Type type;\n\n    public TypeReference() {\n        Type superclass = getClass().getGenericSuperclass();\n        type = ((ParameterizedType) superclass).getActualTypeArguments()[0];\n    }\n\n    public Type getType() {\n        return type;\n    }\n}\n", "test_case": "package com.baeldung.supertype;\n\nimport org.junit.Test;\n\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.Map;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class TypeReferenceUnitTest {\n\n    @Test\n    public void givenGenericToken_whenUsingSuperTypeToken_thenPreservesTheTypeInfo() {\n        TypeReference<Map<String, Integer>> token = new TypeReference<Map<String, Integer>>() {};\n        Type type = token.getType();\n\n        assertEquals(\"java.util.Map<java.lang.String, java.lang.Integer>\", type.getTypeName());\n\n        Type[] typeArguments = ((ParameterizedType) type).getActualTypeArguments();\n        assertEquals(\"java.lang.String\", typeArguments[0].getTypeName());\n        assertEquals(\"java.lang.Integer\", typeArguments[1].getTypeName());\n    }\n}\n"}
{"code_source": "package com.baeldung.uncheckedcast;\n\nimport java.time.LocalDate;\nimport java.time.Month;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class UncheckedCast {\n    public static Map getRawMap() {\n        Map rawMap = new HashMap();\n        rawMap.put(\"date 1\", LocalDate.of(2021, Month.FEBRUARY, 10));\n        rawMap.put(\"date 2\", LocalDate.of(1992, Month.AUGUST, 8));\n        rawMap.put(\"date 3\", LocalDate.of(1976, Month.NOVEMBER, 18));\n        return rawMap;\n    }\n\n    public static Map getRawMapWithMixedTypes() {\n        Map rawMap = new HashMap();\n        rawMap.put(\"date 1\", LocalDate.of(2021, Month.FEBRUARY, 10));\n        rawMap.put(\"date 2\", LocalDate.of(1992, Month.AUGUST, 8));\n        rawMap.put(\"date 3\", LocalDate.of(1976, Month.NOVEMBER, 18));\n        rawMap.put(\"date 4\", new Date());\n        return rawMap;\n    }\n}\n", "test_case": "package com.baeldung.uncheckedcast;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.time.LocalDate;\nimport java.time.Month;\nimport java.util.Map;\n\npublic class UncheckedCastUnitTest {\n\n    @Test\n    public void givenRawMap_whenCastToTypedMap_shouldHaveCompilerWarning() {\n        Map<String, LocalDate> castFromRawMap = (Map<String, LocalDate>) UncheckedCast.getRawMap();\n        Assert.assertEquals(3, castFromRawMap.size());\n        Assert.assertEquals(castFromRawMap.get(\"date 2\"), LocalDate.of(1992, Month.AUGUST, 8));\n    }\n\n    @Test(expected = ClassCastException.class)\n    public void givenMixTypedRawMap_whenCastToTypedMap_shouldThrowClassCastException() {\n        Map<String, LocalDate> castFromRawMap = (Map<String, LocalDate>) UncheckedCast.getRawMapWithMixedTypes();\n        Assert.assertEquals(4, castFromRawMap.size());\n        Assert.assertTrue(castFromRawMap.get(\"date 4\").isAfter(castFromRawMap.get(\"date 3\")));\n    }\n}\n"}
{"code_source": "package com.baeldung.uncheckedconversion;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Date;\nimport java.util.List;\n\npublic class UncheckedConversion {\n    public static List getRawList() {\n        List result = new ArrayList();\n        result.add(\"I am the 1st String.\");\n        result.add(\"I am the 2nd String.\");\n        result.add(\"I am the 3rd String.\");\n        return result;\n    }\n\n    public static List getRawListWithMixedTypes() {\n        List result = new ArrayList();\n        result.add(\"I am the 1st String.\");\n        result.add(\"I am the 2nd String.\");\n        result.add(\"I am the 3rd String.\");\n        result.add(new Date());\n        return result;\n    }\n\n    public static <T> List<T> castList(Class<? extends T> clazz, Collection<?> rawCollection) {\n        List<T> result = new ArrayList<>(rawCollection.size());\n        for (Object o : rawCollection) {\n            try {\n                result.add(clazz.cast(o));\n            } catch (ClassCastException e) {\n                // log the exception or other error handling\n            }\n        }\n        return result;\n    }\n\n    public static <T> List<T> castList2(Class<? extends T> clazz, Collection<?> rawCollection) throws ClassCastException {\n        List<T> result = new ArrayList<>(rawCollection.size());\n        for (Object o : rawCollection) {\n            result.add(clazz.cast(o));\n        }\n        return result;\n    }\n}\n", "test_case": "package com.baeldung.uncheckedconversion;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.List;\n\npublic class UncheckedConversionUnitTest {\n\n    @Test\n    public void givenRawList_whenAssignToTypedList_shouldHaveCompilerWarning() {\n        List<String> fromRawList = UncheckedConversion.getRawList();\n        Assert.assertEquals(3, fromRawList.size());\n        Assert.assertEquals(\"I am the 1st String.\", fromRawList.get(0));\n    }\n\n    @Test(expected = ClassCastException.class)\n    public void givenRawList_whenListHasMixedType_shouldThrowClassCastException() {\n        List<String> fromRawList = UncheckedConversion.getRawListWithMixedTypes();\n        Assert.assertEquals(4, fromRawList.size());\n        Assert.assertFalse(fromRawList.get(3).endsWith(\"String.\"));\n    }\n\n    @Test\n    public void givenRawList_whenAssignToTypedListAfterCallingCastList_shouldOnlyHaveElementsWithExpectedType() {\n        List rawList = UncheckedConversion.getRawListWithMixedTypes();\n        List<String> strList = UncheckedConversion.castList(String.class, rawList);\n        Assert.assertEquals(4, rawList.size());\n        Assert.assertEquals(\"One element with the wrong type has been filtered out.\", 3, strList.size());\n        Assert.assertTrue(strList.stream().allMatch(el -> el.endsWith(\"String.\")));\n    }\n\n    @Test(expected = ClassCastException.class)\n    public void givenRawListWithWrongType_whenAssignToTypedListAfterCallingCastList2_shouldThrowException() {\n        List rawList = UncheckedConversion.getRawListWithMixedTypes();\n        UncheckedConversion.castList2(String.class, rawList);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.abstractclasses.filereaders;\n\nimport java.nio.file.Path;\n\npublic class LowercaseFileReader extends BaseFileReader {\n\n    public LowercaseFileReader(Path filePath) {\n        super(filePath);\n    }\n\n    @Override\n    public String mapFileLine(String line) {\n        return line.toLowerCase();\n    }   \n}\n", "test_case": "package com.baeldung.abstractclasses;\n\nimport com.baeldung.abstractclasses.filereaders.BaseFileReader;\nimport com.baeldung.abstractclasses.filereaders.LowercaseFileReader;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.Test;\n\npublic class LowercaseFileReaderUnitTest {\n    \n    @Test\n    public void givenLowercaseFileReaderInstance_whenCalledreadFile_thenCorrect() throws Exception {\n        Path path = Paths.get(getClass().getClassLoader().getResource(\"files/test.txt\").toURI());\n        BaseFileReader lowercaseFileReader = new LowercaseFileReader(path);\n        \n        assertThat(lowercaseFileReader.readFile()).isInstanceOf(List.class);\n    }\n}\n"}
{"code_source": "package com.baeldung.abstractclasses.filereaders;\n\nimport java.nio.file.Path;\n\npublic class UppercaseFileReader extends BaseFileReader {\n\n    public UppercaseFileReader(Path filePath) {\n        super(filePath);\n    }\n\n    @Override\n    public String mapFileLine(String line) {\n        return line.toUpperCase();\n    }\n}\n", "test_case": "package com.baeldung.abstractclasses;\n\nimport com.baeldung.abstractclasses.filereaders.BaseFileReader;\nimport com.baeldung.abstractclasses.filereaders.UppercaseFileReader;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.List;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport org.junit.Test;\n\npublic class UppercaseFileReaderUnitTest {\n\n    @Test\n    public void givenUppercaseFileReaderInstance_whenCalledreadFile_thenCorrect() throws Exception {\n        Path path = Paths.get(getClass().getClassLoader().getResource(\"files/test.txt\").toURI());\n        BaseFileReader uppercaseFileReader = new UppercaseFileReader(path);\n        \n        assertThat(uppercaseFileReader.readFile()).isInstanceOf(List.class);\n    }    \n}\n"}
{"code_source": "package com.baeldung.covariance;\n\npublic class Producer {\n    public Object produce(String input) {\n        Object result = input.toLowerCase();\n        return result;\n    }\n}\n", "test_case": "package com.baeldung.covariance;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class CovariantProducersUnitTest {\n\n    @Test\n    public void whenInputIsArbitrary_thenProducerProducesString() {\n        String arbitraryInput = \"just a random text\";\n        Producer producer = new Producer();\n\n        Object objectOutput = producer.produce(arbitraryInput);\n\n        assertEquals(arbitraryInput, objectOutput);\n        assertEquals(String.class, objectOutput.getClass());\n    }\n\n    @Test\n    public void whenInputIsArbitrary_thenIntegerProducerFails() {\n        String arbitraryInput = \"just a random text\";\n        Producer producer = new IntegerProducer();\n\n        assertThrows(NumberFormatException.class, () -> producer.produce(arbitraryInput));\n    }\n\n    @Test\n    public void whenInputIsSupported_thenProducerCreatesInteger() {\n        String integerAsString = \"42\";\n        Producer producer = new IntegerProducer();\n\n        Object result = producer.produce(integerAsString);\n\n        assertEquals(Integer.class, result.getClass());\n        assertEquals(Integer.parseInt(integerAsString), result);\n    }\n\n    @Test\n    public void whenInputIsSupported_thenIntegerProducerCreatesIntegerWithoutCasting() {\n        String integerAsString = \"42\";\n        IntegerProducer producer = new IntegerProducer();\n\n        Integer result = producer.produce(integerAsString);\n\n        assertEquals(Integer.parseInt(integerAsString), result);\n    }\n}\n"}
{"code_source": "package com.baeldung.equalshashcode;\n\nclass Money {\n\n    int amount;\n    String currencyCode;\n\n    Money(int amount, String currencyCode) {\n        this.amount = amount;\n        this.currencyCode = currencyCode;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (o == this)\n            return true;\n        if (!(o instanceof Money))\n            return false;\n        Money other = (Money)o;\n        boolean currencyCodeEquals = (this.currencyCode == null && other.currencyCode == null)\n          || (this.currencyCode != null && this.currencyCode.equals(other.currencyCode));\n        return this.amount == other.amount\n          && currencyCodeEquals;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = 17;\n        result = 31 * result + amount;\n        if (currencyCode != null) {\n            result = 31 * result + currencyCode.hashCode();\n        }\n        return result;\n    }\n\n}\n", "test_case": "package com.baeldung.equalshashcode;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\npublic class MoneyUnitTest {\n\n    @Test\n    public void givenMoneyInstancesWithSameAmountAndCurrency_whenEquals_thenReturnsTrue() {\n        Money income = new Money(55, \"USD\");\n        Money expenses = new Money(55, \"USD\");\n\n        assertTrue(income.equals(expenses));\n    }\n\n    @Test\n    public void givenMoneyAndVoucherInstances_whenEquals_thenReturnValuesArentSymmetric() {\n        Money cash = new Money(42, \"USD\");\n        WrongVoucher voucher = new WrongVoucher(42, \"USD\", \"Amazon\");\n\n        assertFalse(voucher.equals(cash));\n        assertTrue(cash.equals(voucher));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.equalshashcode;\n\nclass Team {\n\n    final String city;\n    final String department;\n\n    Team(String city, String department) {\n        this.city = city;\n        this.department = department;\n    }\n\n    @Override\n    public final boolean equals(Object o) {\n        if (o == this)\n            return true;\n        if (!(o instanceof Team))\n            return false;\n        Team otherTeam = (Team)o;\n        boolean cityEquals = (this.city == null && otherTeam.city == null)\n          || this.city != null && this.city.equals(otherTeam.city);\n        boolean departmentEquals = (this.department == null && otherTeam.department == null)\n          || this.department != null && this.department.equals(otherTeam.department);\n        return cityEquals && departmentEquals;\n    }\n\n    @Override\n    public final int hashCode() {\n        int result = 17;\n        if (city != null) {\n            result = 31 * result + city.hashCode();\n        }\n        if (department != null) {\n            result = 31 * result + department.hashCode();\n        }\n        return result;\n    }\n\n}\n", "test_case": "package com.baeldung.equalshashcode;\n\nimport nl.jqno.equalsverifier.EqualsVerifier;\nimport org.junit.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\n\npublic class TeamUnitTest {\n\n    @Test\n    public void givenMapKeyWithHashCode_whenSearched_thenReturnsCorrectValue() {\n        Map<Team,String> leaders = new HashMap<>();\n        leaders.put(new Team(\"New York\", \"development\"), \"Anne\");\n        leaders.put(new Team(\"Boston\", \"development\"), \"Brian\");\n        leaders.put(new Team(\"Boston\", \"marketing\"), \"Charlie\");\n\n        Team myTeam = new Team(\"New York\", \"development\");\n        String myTeamleader = leaders.get(myTeam);\n\n        assertEquals(\"Anne\", myTeamleader);\n    }\n\n    @Test\n    public void givenMapKeyWithoutHashCode_whenSearched_thenReturnsWrongValue() {\n        Map<WrongTeam,String> leaders = new HashMap<>();\n        leaders.put(new WrongTeam(\"New York\", \"development\"), \"Anne\");\n        leaders.put(new WrongTeam(\"Boston\", \"development\"), \"Brian\");\n        leaders.put(new WrongTeam(\"Boston\", \"marketing\"), \"Charlie\");\n\n        WrongTeam myTeam = new WrongTeam(\"New York\", \"development\");\n        String myTeamleader = leaders.get(myTeam);\n\n        assertFalse(\"Anne\".equals(myTeamleader));\n    }\n\n    @Test\n    public void equalsHashCodeContracts() {\n        EqualsVerifier.forClass(Team.class).verify();\n    }\n\n}\n"}
{"code_source": "package com.baeldung.methodoverloadingoverriding.application;\n\nimport com.baeldung.methodoverloadingoverriding.model.Car;\nimport com.baeldung.methodoverloadingoverriding.model.Vehicle;\nimport com.baeldung.methodoverloadingoverriding.util.Multiplier;\n\npublic class Application {\n    \n    public static void main(String[] args) {\n        Multiplier multiplier = new Multiplier();\n        System.out.println(multiplier.multiply(10, 10));\n        System.out.println(multiplier.multiply(10, 10, 10));\n        System.out.println(multiplier.multiply(10, 10.5));\n        System.out.println(multiplier.multiply(10.5, 10.5));\n        \n        Vehicle vehicle = new Vehicle();\n        System.out.println(vehicle.accelerate(100));\n        System.out.println(vehicle.run());\n        System.out.println(vehicle.stop());\n        \n        Vehicle car = new Car();\n        System.out.println(car.accelerate(80));\n        System.out.println(car.run());\n        System.out.println(car.stop());\n    }\n}\n", "test_case": "package com.baeldung.hashcode.application;\n\nimport com.baeldung.hashcode.standard.User;\nimport org.junit.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class ApplicationUnitTest {\n\n    @Test\n    public void main_NoInputState_TextPrintedToConsole() throws Exception {\n        Map<User, User> users = new HashMap<>();\n        User user1 = new User(1L, \"John\", \"john@domain.com\");\n        User user2 = new User(2L, \"Jennifer\", \"jennifer@domain.com\");\n        User user3 = new User(3L, \"Mary\", \"mary@domain.com\");\n\n        users.put(user1, user1);\n        users.put(user2, user2);\n        users.put(user3, user3);\n\n        assertTrue(users.containsKey(user1));\n    }\n}"}
{"code_source": "package com.baeldung.utilities;\n\npublic final class StringUtils {\n\n    private StringUtils() {\n        throw new UnsupportedOperationException(\"This is a utility class and cannot be instantiated\");\n    }\n\n    public static boolean isEmpty(String source) {\n        return source == null || source.length() == 0;\n    }\n\n    public static String wrap(String source, String wrapWith) {\n        return isEmpty(source) ? source : wrapWith + source + wrapWith;\n    }\n\n}\n", "test_case": "package com.baeldung.utilities;\n\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.*;\n\nclass StringUtilsUnitTest {\n\n    @Test\n    void givenAnEmptyString_whenCallingIsEmpty_thenResultIsTrue() {\n        assertThat(StringUtils.isEmpty(\"\")).isTrue();\n    }\n\n    @Test\n    void givenNonEmptyString_whenCallingIsEmpty_thenResultIsFalse() {\n        assertThat(StringUtils.isEmpty(\"asd\")).isFalse();\n    }\n\n    @Test\n    void givenAnEmptyString_whenCallingWrap_thenResultIsAnEmptyString() {\n        assertThat(StringUtils.wrap(\"\", \"wrapper\")).isEmpty();\n    }\n\n    @Test\n    void givenNonEmptyString_whenCallingWrap_thenResultIsWrappedString() {\n        assertThat(StringUtils.wrap(\"asd\", \"wrapper\")).isEqualTo(\"wrapperasdwrapper\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.utilities.alternatives;\n\npublic enum StringUtilsEnum {;\n\n    public static boolean isEmpty(String source) {\n        return source == null || source.length() == 0;\n    }\n\n    public static String wrap(String source, String wrapWith) {\n        return isEmpty(source) ? source : wrapWith + source + wrapWith;\n    }\n\n}\n", "test_case": "package com.baeldung.utilities.alternatives;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass StringUtilsEnumUnitTest {\n\n    @Test\n    void givenAnEmptyString_whenCallingIsEmpty_thenResultIsTrue() {\n        assertThat(StringUtilsEnum.isEmpty(\"\")).isTrue();\n    }\n\n    @Test\n    void givenNonEmptyString_whenCallingIsEmpty_thenResultIsFalse() {\n        assertThat(StringUtilsEnum.isEmpty(\"asd\")).isFalse();\n    }\n\n    @Test\n    void givenAnEmptyString_whenCallingWrap_thenResultIsAnEmptyString() {\n        assertThat(StringUtilsEnum.wrap(\"\", \"wrapper\")).isEmpty();\n    }\n\n    @Test\n    void givenNonEmptyString_whenCallingWrap_thenResultIsWrappedString() {\n        assertThat(StringUtilsEnum.wrap(\"asd\", \"wrapper\")).isEqualTo(\"wrapperasdwrapper\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.utilities.alternatives;\n\npublic interface StringUtilsInterface {\n\n    static boolean isEmpty(String source) {\n        return source == null || source.length() == 0;\n    }\n\n    static String wrap(String source, String wrapWith) {\n        return isEmpty(source) ? source : wrapWith + source + wrapWith;\n    }\n\n}\n", "test_case": "package com.baeldung.utilities.alternatives;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass StringUtilsInterfaceUnitTest {\n\n    @Test\n    void givenAnEmptyString_whenCallingIsEmpty_thenResultIsTrue() {\n        assertThat(StringUtilsInterface.isEmpty(\"\")).isTrue();\n    }\n\n    @Test\n    void givenNonEmptyString_whenCallingIsEmpty_thenResultIsFalse() {\n        assertThat(StringUtilsInterface.isEmpty(\"asd\")).isFalse();\n    }\n\n    @Test\n    void givenAnEmptyString_whenCallingWrap_thenResultIsAnEmptyString() {\n        assertThat(StringUtilsInterface.wrap(\"\", \"wrapper\")).isEmpty();\n    }\n\n    @Test\n    void givenNonEmptyString_whenCallingWrap_thenResultIsWrappedString() {\n        assertThat(StringUtilsInterface.wrap(\"asd\", \"wrapper\")).isEqualTo(\"wrapperasdwrapper\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.utilities.lombok;\n\nimport lombok.AccessLevel;\nimport lombok.NoArgsConstructor;\n\n@NoArgsConstructor(access= AccessLevel.PRIVATE)\npublic final class StringUtilsWithNoArgsConstructor {\n\n    public static boolean isEmpty(String source) {\n        return source == null || source.length() == 0;\n    }\n\n    public static String wrap(String source, String wrapWith) {\n        return isEmpty(source) ? source : wrapWith + source + wrapWith;\n    }\n\n}\n", "test_case": "package com.baeldung.utilities.lombok;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass StringUtilsWithNoArgsConstructorUnitTest {\n\n    @Test\n    void givenAnEmptyString_whenCallingIsEmpty_thenResultIsTrue() {\n        assertThat(StringUtilsWithNoArgsConstructor.isEmpty(\"\")).isTrue();\n    }\n\n    @Test\n    void givenNonEmptyString_whenCallingIsEmpty_thenResultIsFalse() {\n        assertThat(StringUtilsWithNoArgsConstructor.isEmpty(\"asd\")).isFalse();\n    }\n\n    @Test\n    void givenAnEmptyString_whenCallingWrap_thenResultIsAnEmptyString() {\n        assertThat(StringUtilsWithNoArgsConstructor.wrap(\"\", \"wrapper\")).isEmpty();\n    }\n\n    @Test\n    void givenNonEmptyString_whenCallingWrap_thenResultIsWrappedString() {\n        assertThat(StringUtilsWithNoArgsConstructor.wrap(\"asd\", \"wrapper\")).isEqualTo(\"wrapperasdwrapper\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.utilities.lombok;\n\nimport lombok.experimental.UtilityClass;\n\n@UtilityClass\npublic class StringUtilsWithUtilityClass {\n\n    public static boolean isEmpty(String source) {\n        return source == null || source.length() == 0;\n    }\n\n    public static String wrap(String source, String wrapWith) {\n        return isEmpty(source) ? source : wrapWith + source + wrapWith;\n    }\n\n}\n", "test_case": "package com.baeldung.utilities.lombok;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass StringUtilsWithUtilityClassUnitTest {\n\n    @Test\n    void givenAnEmptyString_whenCallingIsEmpty_thenResultIsTrue() {\n        assertThat(StringUtilsWithUtilityClass.isEmpty(\"\")).isTrue();\n    }\n\n    @Test\n    void givenNonEmptyString_whenCallingIsEmpty_thenResultIsFalse() {\n        assertThat(StringUtilsWithUtilityClass.isEmpty(\"asd\")).isFalse();\n    }\n\n    @Test\n    void givenAnEmptyString_whenCallingWrap_thenResultIsAnEmptyString() {\n        assertThat(StringUtilsWithUtilityClass.wrap(\"\", \"wrapper\")).isEmpty();\n    }\n\n    @Test\n    void givenNonEmptyString_whenCallingWrap_thenResultIsWrappedString() {\n        assertThat(StringUtilsWithUtilityClass.wrap(\"asd\", \"wrapper\")).isEqualTo(\"wrapperasdwrapper\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.utilities.warning;\n\n@SuppressWarnings(\"java:S1118\")\npublic final class StringUtilsSuppressWarning {\n\n    public static boolean isEmpty(String source) {\n        return source == null || source.length() == 0;\n    }\n\n    public static String wrap(String source, String wrapWith) {\n        return isEmpty(source) ? source : wrapWith + source + wrapWith;\n    }\n\n}\n", "test_case": "package com.baeldung.utilities.warning;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass StringUtilsStringUtilsSuppressWarningUnitTest {\n\n    @Test\n    void givenAnEmptyString_whenCallingIsEmpty_thenResultIsTrue() {\n        assertThat(StringUtilsSuppressWarning.isEmpty(\"\")).isTrue();\n    }\n\n    @Test\n    void givenNonEmptyString_whenCallingIsEmpty_thenResultIsFalse() {\n        assertThat(StringUtilsSuppressWarning.isEmpty(\"asd\")).isFalse();\n    }\n\n    @Test\n    void givenAnEmptyString_whenCallingWrap_thenResultIsAnEmptyString() {\n        assertThat(StringUtilsSuppressWarning.wrap(\"\", \"wrapper\")).isEmpty();\n    }\n\n    @Test\n    void givenNonEmptyString_whenCallingWrap_thenResultIsWrappedString() {\n        assertThat(StringUtilsSuppressWarning.wrap(\"asd\", \"wrapper\")).isEqualTo(\"wrapperasdwrapper\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.accessmodifiers;\n\npublic class Public {\n    public Public() {\n        SuperPublic.publicMethod(); // Available everywhere.\n        SuperPublic.protectedMethod(); // Available in the same package or subclass.\n        SuperPublic.defaultMethod(); // Available in the same package.\n    }\n}\n", "test_case": "package com.baeldung.publicmodifier;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\nimport org.junit.jupiter.api.TestInstance.Lifecycle;\n\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n@TestInstance(Lifecycle.PER_CLASS)\npublic class PublicAccessModifierUnitTest {\n\n    @Test\n    public void whenUsingBigDecimalIntValueMethod_correspondingIntIsReturned() {\n        assertEquals(0, new BigDecimal(0).intValue()); //instance member\n    }\n    \n    @Test\n    public void whenUsingIntegerMaxValueField_maxPossibleIntValueIsReturned() {\n        assertEquals(2147483647, Integer.MAX_VALUE); //static field\n    }\n    \n    @Test\n    public void whenChangingStudentInternalRepresentation_clientCodeWillNotBreak() {\n        \n        Student student = new Student();\n        student.setGrade(100);\n        \n        assertEquals(100, student.getGrade());\n    }\n    \n    @Test\n    public void whenUsingEntrySet_keyValuePairsAreReturned() {\n        \n        Map<String, String> mapObject = new HashMap<String, String>();\n        mapObject.put(\"name\", \"Alex\");\n       \n        for(Map.Entry<String, String> entry : mapObject.entrySet()) {\n            assertEquals(\"name\", entry.getKey());\n            assertEquals(\"Alex\", entry.getValue());\n        }\n        \n    }\n    \n    @Test\n    public void whenUsingStringToLowerCase_stringTurnsToLowerCase() {\n        assertEquals(\"alex\", \"ALEX\".toLowerCase());\n    }\n\n    @Test\n    public void whenParsingStringOne_parseIntReturns1() {\n        assertEquals(1, Integer.parseInt(\"1\"));\n    }\n    \n    @Test\n    public void whenConnectingToH2_connectionInstanceIsReturned() throws SQLException {\n\n        final String url = \"jdbc:h2:~/test\";\n        Connection conn = DriverManager.getConnection(url, \"sa\", \"\");\n        assertNotNull(conn);\n    }\n\n    @Test\n    public void whenCreatingCustomList_concreteAndInheritedMethodsWork() {\n\n        String[] dataSet1 = new String[] {\"zero\", \"one\", \"two\"};\n        \n        List<String> list1 = new ListOfThree<String>(dataSet1);\n        \n        //our implemented methods\n        assertEquals(\"one\", list1.get(1));\n        assertEquals(3, list1.size());\n\n        //inherited implementations\n        assertEquals(1, list1.indexOf(\"one\"));\n        \n        String[] dataSet2 = new String[] {\"two\", \"zero\", \"one\"};\n        List<String> list2 = new ListOfThree<String>(dataSet2);\n        \n        assertTrue(list1.containsAll(list2));\n    }\n    \n}\n"}
{"code_source": "package com.baeldung.staticmodifier;\n\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class StaticBlockDemo {\n    private static List<String> ranks = new LinkedList<>();\n\n    static {\n        ranks.add(\"Lieutenant\");\n        ranks.add(\"Captain\");\n        ranks.add(\"Major\");\n    }\n    \n    static {\n        ranks.add(\"Colonel\");\n        ranks.add(\"General\");\n    }\n\n    //getters and setters\n    public static List<String> getRanks() {\n        return ranks;\n    }\n\n    public static void setRanks(List<String> ranks) {\n        StaticBlockDemo.ranks = ranks;\n    }\n}\n", "test_case": "package com.baeldung.staticmodifier;\n\nimport static org.hamcrest.collection.IsIterableContainingInOrder.contains;\nimport static org.junit.Assert.assertThat;\n\nimport java.util.List;\n\nimport org.junit.Test;\n\npublic class StaticBlockDemoUnitTest {\n\n    @Test\n    public void whenAddedListElementsThroughStaticBlock_thenEnsureCorrectOrder() {\n        List<String> actualList = StaticBlockDemo.getRanks();\n        assertThat(actualList, contains(\"Lieutenant\", \"Captain\", \"Major\", \"Colonel\", \"General\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.binding;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Created by madhumita.g on 25-07-2018.\n */\npublic class AnimalActivity {\n\n    final static Logger logger = LoggerFactory.getLogger(AnimalActivity.class);\n\n\n    public static void sleep(Animal animal) {\n        logger.info(\"Animal is sleeping\");\n    }\n\n    public static void sleep(Dog dog) {\n        logger.info(\"Cat is sleeping\");\n    }\n\n    public static void main(String[] args) {\n\n        Animal animal = new Animal();\n\n        //calling methods of animal object\n        animal.makeNoise();\n\n        animal.makeNoise(3);\n\n\n        //assigning a dog object to reference of type Animal\n        Animal catAnimal = new Dog();\n\n        catAnimal.makeNoise();\n\n        // calling static function\n        AnimalActivity.sleep(catAnimal);\n\n        return;\n\n    }\n}\n", "test_case": "package com.baeldung.binding;\n\nimport ch.qos.logback.classic.Level;\nimport ch.qos.logback.classic.Logger;\nimport ch.qos.logback.classic.spi.LoggingEvent;\nimport ch.qos.logback.core.Appender;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.Captor;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\nimport org.slf4j.LoggerFactory;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\nimport static org.mockito.Mockito.verify;\n\n/**\n *https://gist.github.com/bloodredsun/a041de13e57bf3c6c040\n */\n@RunWith(MockitoJUnitRunner.class)\n\npublic class AnimalActivityUnitTest {\n\n    @Mock\n    private Appender mockAppender;\n    @Captor\n    private ArgumentCaptor<LoggingEvent> captorLoggingEvent;\n\n    @Before\n    public void setup() {\n        final Logger logger = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\n        logger.addAppender(mockAppender);\n    }\n\n    @After\n    public void teardown() {\n        final Logger logger = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\n        logger.detachAppender(mockAppender);\n    }\n\n    @Test\n    public void givenAnimalReference__whenRefersAnimalObject_shouldCallFunctionWithAnimalParam() {\n\n        Animal animal = new Animal();\n\n        AnimalActivity.sleep(animal);\n\n        verify(mockAppender).doAppend(captorLoggingEvent.capture());\n\n        final LoggingEvent loggingEvent = captorLoggingEvent.getValue();\n\n        assertThat(loggingEvent.getLevel(), is(Level.INFO));\n\n        assertThat(loggingEvent.getFormattedMessage(),\n                is(\"Animal is sleeping\"));\n    }\n\n    @Test\n    public void givenDogReference__whenRefersCatObject_shouldCallFunctionWithAnimalParam() {\n\n        Dog dog = new Dog();\n\n        AnimalActivity.sleep(dog);\n\n        verify(mockAppender).doAppend(captorLoggingEvent.capture());\n\n        final LoggingEvent loggingEvent = captorLoggingEvent.getValue();\n\n        assertThat(loggingEvent.getLevel(), is(Level.INFO));\n\n        assertThat(loggingEvent.getFormattedMessage(),\n                is(\"Cat is sleeping\"));\n    }\n\n    @Test\n    public void givenAnimaReference__whenRefersDogObject_shouldCallFunctionWithAnimalParam() {\n\n        Animal cat = new Dog();\n\n        AnimalActivity.sleep(cat);\n\n        verify(mockAppender).doAppend(captorLoggingEvent.capture());\n\n        final LoggingEvent loggingEvent = captorLoggingEvent.getValue();\n\n        assertThat(loggingEvent.getLevel(), is(Level.INFO));\n\n        assertThat(loggingEvent.getFormattedMessage(),\n                is(\"Animal is sleeping\"));\n    }\n}"}
{"code_source": "package com.baeldung.binding;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Created by madhumita.g on 25-07-2018.\n */\npublic class Dog extends Animal {\n\n    final static Logger logger = LoggerFactory.getLogger(Dog.class);\n\n    public void makeNoise() {\n\n        logger.info(\"meow\");\n    }\n\n}\n", "test_case": "package com.baeldung.binding;\n\nimport ch.qos.logback.classic.Level;\nimport ch.qos.logback.classic.Logger;\nimport ch.qos.logback.classic.spi.LoggingEvent;\nimport ch.qos.logback.core.Appender;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.Captor;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\nimport org.slf4j.LoggerFactory;\n\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\nimport static org.mockito.Mockito.verify;\n\n/**\n * Created by madhumita.g on 01-08-2018.\n */\n@RunWith(MockitoJUnitRunner.class)\npublic class DogUnitTest {\n\n    @Mock\n    private Appender mockAppender;\n\n    @Captor\n    private ArgumentCaptor<LoggingEvent> captorLoggingEvent;\n\n    @Before\n    public void setup() {\n        final Logger logger = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\n        logger.addAppender(mockAppender);\n    }\n\n    @After\n    public void teardown() {\n        final Logger logger = (Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\n        logger.detachAppender(mockAppender);\n    }\n\n    @Test\n    public void makeNoiseTest() {\n\n        Dog dog = new Dog();\n\n        dog.makeNoise();\n\n        verify(mockAppender).doAppend(captorLoggingEvent.capture());\n\n        final LoggingEvent loggingEvent = captorLoggingEvent.getValue();\n\n        assertThat(loggingEvent.getLevel(), is(Level.INFO));\n\n        assertThat(loggingEvent.getFormattedMessage(),\n                is(\"meow\"));\n\n    }\n}\n"}
{"code_source": "package com.baeldung.inheritancecomposition.model;\n\npublic class Actress extends Person {\n    \n    public Actress(String name, String email, int age) {\n        super(name, email, age);\n    }\n    \n    public String readScript(String movie) {\n        return \"Reading the script of \" + movie;\n    }\n    \n    public String performRole() {\n        return \"Performing a role\";\n    }\n}\n", "test_case": "package com.baeldung.inheritancecomposition;\n\nimport com.baeldung.inheritancecomposition.model.Actress;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\nimport static org.assertj.core.api.Assertions.*;\n\npublic class ActressUnitTest {\n    \n    private static Actress actress;\n    \n    @BeforeClass\n    public static void setUpActressInstance() {\n        actress = new Actress(\"Susan\", \"susan@domain.com\", 30);\n    }\n    \n    @Test\n    public void givenActressInstance_whenCalledgetName_thenEqual() {\n        assertThat(actress.getName()).isEqualTo(\"Susan\");\n    }\n    \n    @Test\n    public void givenActressInstance_whenCalledgetEmail_thenEqual() {\n        assertThat(actress.getEmail()).isEqualTo(\"susan@domain.com\");\n    }\n    \n    @Test\n    public void givenActressInstance_whenCalledgetAge_thenEqual() {\n        assertThat(actress.getAge()).isEqualTo(30);\n    }\n    \n    @Test\n    public void givenActressInstance_whenCalledreadScript_thenEqual() {\n        assertThat(actress.readScript(\"Psycho\")).isEqualTo(\"Reading the script of Psycho\");\n    }\n    \n    @Test\n    public void givenActressInstance_whenCalledperfomRole_thenEqual() {\n        assertThat(actress.performRole()).isEqualTo(\"Performing a role\");\n    }\n}\n"}
{"code_source": "package com.baeldung.inheritancecomposition.model;\n\npublic class Waitress extends Person {\n    \n    public Waitress(String name, String email, int age) {\n        super(name, email, age);\n    }\n    \n    public String serveStarter(String starter) {\n        return \"Serving a \" + starter;\n    }\n    \n    public String serveMainCourse(String mainCourse) {\n        return \"Serving a \" + mainCourse;\n    }\n    \n    public String serveDessert(String dessert) {\n        return \"Serving a \" + dessert;\n    }\n}\n", "test_case": "package com.baeldung.inheritancecomposition;\n\nimport com.baeldung.inheritancecomposition.model.Waitress;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\nimport static org.assertj.core.api.Assertions.*;\n\npublic class WaitressUnitTest {\n\n    private static Waitress waitress;\n\n    @BeforeClass\n    public static void setUpWaitressInstance() {\n        waitress = new Waitress(\"Mary\", \"mary@domain.com\", 22);\n    }\n\n    @Test\n    public void givenWaitressInstance_whenCalledgetName_thenOneAssertion() {\n        assertThat(waitress.getName()).isEqualTo(\"Mary\");\n    }\n\n    @Test\n    public void givenWaitressInstance_whenCalledgetEmail_thenOneAssertion() {\n        assertThat(waitress.getEmail()).isEqualTo(\"mary@domain.com\");\n    }\n\n    @Test\n    public void givenWaitressInstance_whenCalledgetAge_thenOneAssertion() {\n        assertThat(waitress.getAge()).isEqualTo(22);\n    }\n\n    @Test\n    public void givenWaitressInstance_whenCalledserveStarter_thenOneAssertion() {\n        assertThat(waitress.serveStarter(\"mixed salad\")).isEqualTo(\"Serving a mixed salad\");\n    }\n\n    @Test\n    public void givenWaitressInstance_whenCalledserveMainCourse_thenOneAssertion() {\n        assertThat(waitress.serveMainCourse(\"steak\")).isEqualTo(\"Serving a steak\");\n    }\n\n    @Test\n    public void givenWaitressInstance_whenCalledserveDessert_thenOneAssertion() {\n        assertThat(waitress.serveDessert(\"cup of coffee\")).isEqualTo(\"Serving a cup of coffee\");\n    }\n}\n"}
{"code_source": "package com.baeldung.interfacevsabstractclass;\n\nimport java.io.File;\n\npublic interface Sender {\n\n    void send(File fileToBeSent);\n}\n", "test_case": "package com.baeldung.interfacevsabstractclass;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.interfacevsabstractclass.ImageSender;\nimport com.baeldung.interfacevsabstractclass.Sender;\n\nimport java.io.File;\n\nclass SenderUnitTest {\n\n    public final static String IMAGE_FILE_PATH = \"/sample_image_file_path/photo.jpg\";\n\n    @Test\n    void givenImageUploaded_whenButtonClicked_thenSendImage() {\n        File imageFile = new File(IMAGE_FILE_PATH);\n\n        Sender sender = new ImageSender();\n        sender.send(imageFile);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.enums.values;\n\n/**\n * This is a simple enum of periodic table elements\n */\npublic enum Element1 {\n    H,\n    HE,\n    LI,\n    BE,\n    B,\n    C,\n    N,\n    O,\n    F,\n    NE\n}\n", "test_case": "package com.baeldung.enums.values;\n\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\n/**\n *\n * @author chris\n */\npublic class Element1UnitTest {\n    \n    public Element1UnitTest() {\n    }\n    \n    @BeforeClass\n    public static void setUpClass() {\n    }\n    \n    @AfterClass\n    public static void tearDownClass() {\n    }\n    \n    @Before\n    public void setUp() {\n    }\n    \n    @After\n    public void tearDown() {\n    }\n\n    @Test\n    public void whenAccessingToString_thenItShouldEqualName() {\n        for (Element1 e1 : Element1.values()) {\n            assertEquals(e1.name(), e1.toString());\n        }\n    }\n    \n    @Test\n    public void whenCallingValueOf_thenReturnTheCorrectEnum() {\n        for (Element1 e1 : Element1.values()) {\n            assertSame(e1, Element1.valueOf(e1.name()));\n        }\n    }\n}\n"}
{"code_source": "package com.baeldung.enums.values;\n\n/**\n * The simple enum has been enhanced to add the name of the element.\n */\npublic enum Element2 {\n    H(\"Hydrogen\"),\n    HE(\"Helium\"),\n    LI(\"Lithium\"),\n    BE(\"Beryllium\"),\n    B(\"Boron\"),\n    C(\"Carbon\"),\n    N(\"Nitrogen\"),\n    O(\"Oxygen\"),\n    F(\"Flourine\"),\n    NE(\"Neon\");\n\n    /** a final variable to store the label, which can't be changed */\n    public final String label;\n\n    /**\n     * A private constructor that sets the label.\n     * @param label \n     */\n    private Element2(String label) {\n        this.label = label;\n    }\n\n    /**\n     * Look up Element2 instances by the label field. This implementation iterates through \n     * the values() list to find the label.\n     * @param label The label to look up\n     * @return The Element2 instance with the label, or null if not found.\n     */\n    public static Element2 valueOfLabel(String label) {\n        for (Element2 e2 : values()) {\n            if (e2.label.equals(label)) {\n                return e2;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Override the toString() method to return the label instead of the declared name.\n     * @return \n     */\n    @Override\n    public String toString() {\n        return this.label;\n    }\n}\n", "test_case": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage com.baeldung.enums.values;\n\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n *\n * @author chris\n */\npublic class Element2UnitTest {\n    private static final Logger LOGGER = LoggerFactory.getLogger(Element2UnitTest.class);\n    \n    public Element2UnitTest() {\n    }\n    \n    @BeforeClass\n    public static void setUpClass() {\n    }\n    \n    @AfterClass\n    public static void tearDownClass() {\n    }\n    \n    @Before\n    public void setUp() {\n    }\n    \n    @After\n    public void tearDown() {\n    }\n\n    @Test\n    public void whenLocatebyLabel_thenReturnCorrectValue() {\n        for (Element2 e2 : Element2.values()) {\n            assertSame(e2, Element2.valueOfLabel(e2.label));\n        }\n    }\n\n    /**\n     * Test of toString method, of class Element2.\n     */\n    @Test\n    public void whenCallingToString_thenReturnLabel() {\n        for (Element2 e2 : Element2.values()) {\n            assertEquals(e2.label, e2.toString());\n        }\n    }\n}\n"}
{"code_source": "package com.baeldung.enums.values;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * A Map has been added to cache labels for faster lookup.\n */\npublic enum Element3 {\n    H(\"Hydrogen\"),\n    HE(\"Helium\"),\n    LI(\"Lithium\"),\n    BE(\"Beryllium\"),\n    B(\"Boron\"),\n    C(\"Carbon\"),\n    N(\"Nitrogen\"),\n    O(\"Oxygen\"),\n    F(\"Flourine\"),\n    NE(\"Neon\");\n\n    /** \n     * A map to cache labels and their associated Element3 instances.\n     * Note that this only works if the labels are all unique!\n     */\n    private static final Map<String, Element3> BY_LABEL = new HashMap<>();\n    \n    /** populate the BY_LABEL cache */\n    static {\n        for (Element3 e3 : values()) {\n            BY_LABEL.put(e3.label, e3);\n        }\n    }\n\n    /** a final variable to store the label, which can't be changed */\n    public final String label;\n\n    /**\n     * A private constructor that sets the label.\n     * @param label \n     */\n    private Element3(String label) {\n        this.label = label;\n    }\n\n    /**\n     * Look up Element2 instances by the label field. This implementation finds the\n     * label in the BY_LABEL cache.\n     * @param label The label to look up\n     * @return The Element3 instance with the label, or null if not found.\n     */\n    public static Element3 valueOfLabel(String label) {\n        return BY_LABEL.get(label);\n    }\n\n    /**\n     * Override the toString() method to return the label instead of the declared name.\n     * @return \n     */\n    @Override\n    public String toString() {\n        return this.label;\n    }\n}\n", "test_case": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage com.baeldung.enums.values;\n\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\n/**\n *\n * @author chris\n */\npublic class Element3UnitTest {\n    \n    public Element3UnitTest() {\n    }\n    \n    @BeforeClass\n    public static void setUpClass() {\n    }\n    \n    @AfterClass\n    public static void tearDownClass() {\n    }\n    \n    @Before\n    public void setUp() {\n    }\n    \n    @After\n    public void tearDown() {\n    }\n\n    @Test\n    public void whenLocatebyLabel_thenReturnCorrectValue() {\n        for (Element3 e3 : Element3.values()) {\n            assertSame(e3, Element3.valueOfLabel(e3.label));\n        }\n    }\n\n    /**\n     * Test of toString method, of class Element3.\n     */\n    @Test\n    public void whenCallingToString_thenReturnLabel() {\n        for (Element3 e3 : Element3.values()) {\n            assertEquals(e3.label, e3.toString());\n        }\n    }\n    \n}\n"}
{"code_source": "package com.baeldung.enums.values;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Multiple fields have been added and the Labeled interface is implemented.\n */\npublic enum Element4 implements Labeled {\n    H(\"Hydrogen\", 1, 1.008f),\n    HE(\"Helium\", 2, 4.0026f),\n    LI(\"Lithium\", 3, 6.94f),\n    BE(\"Beryllium\", 4, 9.01722f),\n    B(\"Boron\", 5, 10.81f),\n    C(\"Carbon\", 6, 12.011f),\n    N(\"Nitrogen\", 7, 14.007f),\n    O(\"Oxygen\", 8, 15.999f),\n    F(\"Flourine\", 9, 18.998f),\n    NE(\"Neon\", 10, 20.180f);\n    /** \n     * Maps cache labels and their associated Element3 instances.\n     * Note that this only works if the values are all unique!\n     */\n    private static final Map<String, Element4> BY_LABEL = new HashMap<>();\n    private static final Map<Integer, Element4> BY_ATOMIC_NUMBER = new HashMap<>();\n    private static final Map<Float, Element4> BY_ATOMIC_WEIGHT = new HashMap<>();\n    \n    /** populate the caches */\n    static {\n        for (Element4 e4 : values()) {\n            BY_LABEL.put(e4.label, e4);\n            BY_ATOMIC_NUMBER.put(e4.atomicNumber, e4);\n            BY_ATOMIC_WEIGHT.put(e4.atomicWeight, e4);\n        }\n    }\n\n    /** final variables to store the values, which can't be changed */\n    public final String label;\n    public final int atomicNumber;\n    public final float atomicWeight;\n\n    private Element4(String label, int atomicNumber, float atomicWeight) {\n        this.label = label;\n        this.atomicNumber = atomicNumber;\n        this.atomicWeight = atomicWeight;\n    }\n\n    /**\n     * Implement the Labeled interface.\n     * @return the label value\n     */\n    @Override\n    public String label() {\n        return label;\n    }\n\n    /**\n     * Look up Element2 instances by the label field. This implementation finds the\n     * label in the BY_LABEL cache.\n     * @param label The label to look up\n     * @return The Element4 instance with the label, or null if not found.\n     */\n    public static Element4 valueOfLabel(String label) {\n        return BY_LABEL.get(label);\n    }\n\n    /**\n     * Look up Element2 instances by the atomicNumber field. This implementation finds the\n     * atomicNUmber in the cache.\n     * @param number The atomicNumber to look up \n     * @return The Element4 instance with the label, or null if not found.\n     */\n    public static Element4 valueOfAtomicNumber(int number) {\n        return BY_ATOMIC_NUMBER.get(number);\n    }\n\n    /**\n     * Look up Element2 instances by the atomicWeight field. This implementation finds the\n     * atomic weight in the cache.\n     * @param weight the atomic weight to look up\n     * @return The Element4 instance with the label, or null if not found.\n     */\n    public static Element4 valueOfAtomicWeight(float weight) {\n        return BY_ATOMIC_WEIGHT.get(weight);\n    }\n\n    /**\n     * Override the toString() method to return the label instead of the declared name.\n     * @return \n     */\n    @Override\n    public String toString() {\n        return this.label;\n    }\n}\n", "test_case": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage com.baeldung.enums.values;\n\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\n/**\n *\n * @author chris\n */\npublic class Element4UnitTest {\n    \n    public Element4UnitTest() {\n    }\n    \n    @BeforeClass\n    public static void setUpClass() {\n    }\n    \n    @AfterClass\n    public static void tearDownClass() {\n    }\n    \n    @Before\n    public void setUp() {\n    }\n    \n    @After\n    public void tearDown() {\n    }\n\n    @Test\n    public void whenLocatebyLabel_thenReturnCorrectValue() {\n        for (Element4 e4 : Element4.values()) {\n            assertSame(e4, Element4.valueOfLabel(e4.label));\n        }\n    }\n\n    @Test\n    public void whenLocatebyAtmNum_thenReturnCorrectValue() {\n        for (Element4 e4 : Element4.values()) {\n            assertSame(e4, Element4.valueOfAtomicNumber(e4.atomicNumber));\n        }\n    }\n\n    @Test\n    public void whenLocatebyAtmWt_thenReturnCorrectValue() {\n        for (Element4 e4 : Element4.values()) {\n            assertSame(e4, Element4.valueOfAtomicWeight(e4.atomicWeight));\n        }\n    }\n\n    /**\n     * Test of toString method, of class Element4.\n     */\n    @Test\n    public void whenCallingToString_thenReturnLabel() {\n        for (Element4 e4 : Element4.values()) {\n            assertEquals(e4.label, e4.toString());\n        }\n    }\n    \n}\n"}
{"code_source": "package com.baeldung.enums;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class EnumSearcher {\n    private static final Logger LOG = LoggerFactory.getLogger(EnumSearcher.class);\n\n    public static void main(String[] args) {\n        EnumSearcher enumSearcher = new EnumSearcher();\n        enumSearcher.printWeekdays();\n    }\n\n    private void printWeekdays() {\n        for (Weekday day: Weekday.values()) {\n            LOG.info(\"Name {}, Value {}, Stringified {}\", day.name(), day.getValue(), day);\n        }\n    }\n}\n", "test_case": "package com.baeldung.enums;\n\nimport org.assertj.core.api.Assertions;\nimport org.junit.Test;\n\nimport java.util.Optional;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\npublic class EnumSearcherUnitTest {\n\n    @Test\n    public void givenWeekdays_whenValidDirectionNameProvided_directionIsFound() {\n        Direction result = Direction.findByName(\"EAST\");\n        Assertions.assertThat(result).isEqualTo(Direction.EAST);\n    }\n\n    @Test\n    public void givenWeekdays_whenValidDirectionNameLowerCaseProvided_directionIsFound() {\n        Direction result = Direction.findByName(\"east\");\n        Assertions.assertThat(result).isEqualTo(Direction.EAST);\n    }\n\n    @Test\n    public void givenWeekdays_whenInvalidDirectionNameProvided_nullIsReturned() {\n        Direction result = Direction.findByName(\"E\");\n        Assertions.assertThat(result).isNull();\n    }\n\n    @Test\n    public void givenWeekdays_whenValidWeekdayNameProvided_weekdayIsFound() {\n        Weekday result = Weekday.findByName(\"MONDAY\");\n        Assertions.assertThat(result).isEqualTo(Weekday.MONDAY);\n    }\n\n    @Test\n    public void givenWeekdays_whenInvalidWeekdayNameProvided_nullIsReturned() {\n        Weekday result = Weekday.findByName(\"MON\");\n        Assertions.assertThat(result).isNull();\n    }\n\n    @Test\n    public void givenWeekdays_whenValidWeekdayValueProvided_weekdayIsFound() {\n        Weekday result = Weekday.findByValue(\"Monday\");\n        Assertions.assertThat(result).isEqualTo(Weekday.MONDAY);\n    }\n\n    @Test\n    public void givenWeekdays_whenInvalidWeekdayValueProvided_nullIsReturned() {\n        Weekday result = Weekday.findByValue(\"mon\");\n        Assertions.assertThat(result).isNull();\n    }\n\n    @Test\n    public void givenMonths_whenValidMonthNameProvided_optionalMonthIsReturned() {\n        Optional<Month> result = Month.findByName(\"JANUARY\");\n        Assertions.assertThat(result).isEqualTo(Optional.of(Month.JANUARY));\n    }\n\n    @Test\n    public void givenMonths_whenInvalidMonthNameProvided_optionalEmptyIsReturned() {\n        Optional<Month> result = Month.findByName(\"JAN\");\n        Assertions.assertThat(result).isEmpty();\n    }\n\n    @Test\n    public void givenMonths_whenValidMonthCodeProvided_optionalMonthIsReturned() {\n        Optional<Month> result = Month.findByCode(1);\n        Assertions.assertThat(result).isEqualTo(Optional.of(Month.JANUARY));\n    }\n\n    @Test\n    public void givenMonths_whenInvalidMonthCodeProvided_optionalEmptyIsReturned() {\n        Optional<Month> result = Month.findByCode(0);\n        Assertions.assertThat(result).isEmpty();\n    }\n\n    @Test\n    public void givenMonths_whenValidMonthValueProvided_monthIsReturned() {\n        Month result = Month.findByValue(\"January\");\n        Assertions.assertThat(result).isEqualTo(Month.JANUARY);\n    }\n\n    @Test\n    public void givenMonths_whenInvalidMonthValueProvided_illegalArgExIsThrown() {\n        assertThatIllegalArgumentException().isThrownBy(() -> Month.findByValue(\"Jan\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.threebool;\n\nimport java.util.Arrays;\n\npublic class ThreeBooleans {\n    public static boolean twoOrMoreAreTrueByLoop(boolean a, boolean b, boolean c) {\n        int count = 0;\n        for (boolean i : new Boolean[] { a, b, c }) {\n            count += i ? 1 : 0;\n            if (count >= 2)\n                return true;\n        }\n        return false;\n    }\n\n    public static boolean xOrMoreAreTrueByLoop(boolean[] booleans, int x) {\n        int count = 0;\n        for (boolean i : booleans) {\n            count += i ? 1 : 0;\n            if (count >= x)\n                return true;\n        }\n        return false;\n    }\n\n    public static boolean twoOrMoreAreTrueBySum(boolean a, boolean b, boolean c) {\n        return (a ? 1 : 0) + (b ? 1 : 0) + (c ? 1 : 0) >= 2;\n    }\n\n    public static boolean xOrMoreAreTrueBySum(Boolean[] booleans, int x) {\n        return Arrays.stream(booleans).mapToInt(b -> Boolean.TRUE.equals(b) ? 1 : 0).sum() >= x;\n    }\n\n    public static boolean twoorMoreAreTrueByKarnaughMap(boolean a, boolean b, boolean c) {\n        return (c && (a || b)) || (a && b);\n    }\n\n    public static boolean twoOrMoreAreTrueByOperators(boolean a, boolean b, boolean c) {\n        return (a && b) || (a && c) || (b && c);\n    }\n\n    public static boolean twoOrMoreAreTrueByXor(boolean a, boolean b, boolean c) {\n        return a ^ b ? c : a;\n    }\n}\n", "test_case": "package com.baeldung.threebool;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport com.google.common.collect.ImmutableMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\n\nclass ThreeBooleansUnitTest {\n    // @formatter:off\n    private static final Map<boolean[], Boolean> TEST_CASES_AND_EXPECTED = ImmutableMap.of(\n        new boolean[]{true, true, true}, true,\n        new boolean[]{true, true, false}, true,\n        new boolean[]{true, false, false}, false,\n        new boolean[]{false, false, false}, false\n        );\n    // @formatter:on\n\n    @Test\n    void given3Booleans_whenCallingTwoOrMoreAreTrueByLoop_thenGetExpectedResult() {\n        TEST_CASES_AND_EXPECTED.forEach((array, expected) -> assertThat(ThreeBooleans.twoOrMoreAreTrueByLoop(array[0], array[1], array[2])).isEqualTo(expected));\n    }\n\n    @Test\n    void given3Booleans_whenCallingTwoOrMoreAreTrueByCounting_thenGetExpectedResult() {\n        TEST_CASES_AND_EXPECTED.forEach((array, expected) -> assertThat(ThreeBooleans.twoOrMoreAreTrueBySum(array[0], array[1], array[2])).isEqualTo(expected));\n    }\n\n    @Test\n    void given3Booleans_whenCallingTwoOrMoreAreTrueByKarnaughMap_thenGetExpectedResult() {\n        TEST_CASES_AND_EXPECTED.forEach((array, expected) -> assertThat(ThreeBooleans.twoorMoreAreTrueByKarnaughMap(array[0], array[1], array[2])).isEqualTo(expected));\n    }\n\n    @Test\n    void given3Booleans_whenCallingTwoOrMoreAreTrueByOperators_thenGetExpectedResult() {\n        TEST_CASES_AND_EXPECTED.forEach((array, expected) -> assertThat(ThreeBooleans.twoOrMoreAreTrueByOperators(array[0], array[1], array[2])).isEqualTo(expected));\n    }\n\n    @Test\n    void given3Booleans_whenCallingTwoOrMoreAreTrueByXor_thenGetExpectedResult() {\n        TEST_CASES_AND_EXPECTED.forEach((array, expected) -> assertThat(ThreeBooleans.twoOrMoreAreTrueByXor(array[0], array[1], array[2])).isEqualTo(expected));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.breakcontinue;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\n/**\n * @author Santosh\n *\n */\n\npublic class BreakContinue {\n\n    public static int unlabeledBreak() {\n        String searchName = \"Wilson\";\n        int counter = 0;\n        List<String> names = Arrays.asList(\"John\", \"Peter\", \"Robert\", \"Wilson\", \"Anthony\", \"Donald\", \"Richard\");\n\n        for (String name : names) {\n            counter++;\n            if (name.equalsIgnoreCase(searchName)) {\n                break;\n            }\n        }\n\n        return counter;\n    }\n\n    public static int unlabeledBreakNestedLoops() {\n        String searchName = \"Wilson\";\n        int counter = 0;\n        Map<String, List<String>> nameMap = new HashMap<>();\n        nameMap.put(\"Grade1\", Arrays.asList(\"John\", \"Peter\", \"Robert\", \"Wilson\"));\n        nameMap.put(\"Grade2\", Arrays.asList(\"Anthony\", \"Donald\", \"Richard\", \"Arnold\"));\n        nameMap.put(\"Grade3\", Arrays.asList(\"Wilson\", \"Michael\", \"Stephen\", \"Ryan\"));\n\n        Iterator<Entry<String, List<String>>> iterator = nameMap.entrySet()\n            .iterator();\n        Entry<String, List<String>> entry = null;\n        List<String> names = null;\n        while (iterator.hasNext()) {\n            entry = iterator.next();\n            names = entry.getValue();\n            for (String name : names) {\n                if (name.equalsIgnoreCase(searchName)) {\n                    counter++;\n                    break;\n                }\n            }\n        }\n\n        return counter;\n    }\n\n    public static int labeledBreak() {\n        String searchName = \"Wilson\";\n        int counter = 0;\n        Map<String, List<String>> nameMap = new HashMap<>();\n        nameMap.put(\"Grade1\", Arrays.asList(\"John\", \"Peter\", \"Robert\", \"Wilson\"));\n        nameMap.put(\"Grade2\", Arrays.asList(\"Anthony\", \"Donald\", \"Richard\", \"Arnold\"));\n        nameMap.put(\"Grade3\", Arrays.asList(\"Wilson\", \"Michael\", \"Stephen\", \"Ryan\"));\n\n        Iterator<Entry<String, List<String>>> iterator = nameMap.entrySet()\n            .iterator();\n        Entry<String, List<String>> entry = null;\n        List<String> names = null;\n        compare: \n        while (iterator.hasNext()) {\n            entry = iterator.next();\n            names = entry.getValue();\n            for (String name : names) {\n                if (name.equalsIgnoreCase(searchName)) {\n                    counter++;\n                    break compare;\n                }\n            }\n        }\n\n        return counter;\n    }\n\n    public static int unlabeledContinue() {\n        String searchName = \"Wilson\";\n        int counter = 0;\n        Map<String, List<String>> nameMap = new HashMap<>();\n        nameMap.put(\"Grade1\", Arrays.asList(\"John\", \"Wilson\", \"Robert\", \"Wilson\"));\n        nameMap.put(\"Grade2\", Arrays.asList(\"Anthony\", \"Donald\", \"Wilson\", \"Arnold\"));\n        nameMap.put(\"Grade3\", Arrays.asList(\"Wilson\", \"Michael\", \"Wilson\", \"Ryan\"));\n\n        Iterator<Entry<String, List<String>>> iterator = nameMap.entrySet()\n            .iterator();\n        Entry<String, List<String>> entry = null;\n        List<String> names = null;\n        while (iterator.hasNext()) {\n            entry = iterator.next();\n            names = entry.getValue();\n            for (String name : names) {\n                if (!name.equalsIgnoreCase(searchName)) {\n                    continue;\n                }\n\n                counter++;\n            }\n        }\n\n        return counter;\n    }\n\n    public static int labeledContinue() {\n        String searchName = \"Wilson\";\n        int counter = 0;\n        Map<String, List<String>> nameMap = new HashMap<>();\n        nameMap.put(\"Grade1\", Arrays.asList(\"John\", \"Wilson\", \"Robert\", \"Wilson\"));\n        nameMap.put(\"Grade2\", Arrays.asList(\"Anthony\", \"Donald\", \"Wilson\", \"Arnold\"));\n        nameMap.put(\"Grade3\", Arrays.asList(\"Wilson\", \"Michael\", \"Wilson\", \"Ryan\"));\n\n        Iterator<Entry<String, List<String>>> iterator = nameMap.entrySet()\n            .iterator();\n        Entry<String, List<String>> entry = null;\n        List<String> names = null;\n        compare: \n        while (iterator.hasNext()) {\n            entry = iterator.next();\n            names = entry.getValue();\n            for (String name : names) {\n                if (name.equalsIgnoreCase(searchName)) {\n                    counter++;\n                    continue compare;\n                }\n            }\n        }\n\n        return counter;\n    }\n\n}\n", "test_case": "package com.baeldung.breakcontinue;\n\nimport static com.baeldung.breakcontinue.BreakContinue.labeledBreak;\nimport static com.baeldung.breakcontinue.BreakContinue.labeledContinue;\nimport static com.baeldung.breakcontinue.BreakContinue.unlabeledBreak;\nimport static com.baeldung.breakcontinue.BreakContinue.unlabeledBreakNestedLoops;\nimport static com.baeldung.breakcontinue.BreakContinue.unlabeledContinue;\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\npublic class BreakContinueUnitTest {\n\n    @Test\n    public void whenUnlabeledBreak_ThenEqual() {\n        assertEquals(4, unlabeledBreak());\n    }\n\n    @Test\n    public void whenUnlabeledBreakNestedLoops_ThenEqual() {\n        assertEquals(2, unlabeledBreakNestedLoops());\n    }\n\n    @Test\n    public void whenLabeledBreak_ThenEqual() {\n        assertEquals(1, labeledBreak());\n    }\n\n    @Test\n    public void whenUnlabeledContinue_ThenEqual() {\n        assertEquals(5, unlabeledContinue());\n    }\n\n    @Test\n    public void whenLabeledContinue_ThenEqual() {\n        assertEquals(3, labeledContinue());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.breakloop;\n\npublic class LoopBreaking {\n\n    public String simpleBreak() {\n        String result = \"\";\n        for (int outerCounter = 0; outerCounter < 2; outerCounter++) {\n            result += \"outer\" + outerCounter;\n            for (int innerCounter = 0; innerCounter < 2; innerCounter++) {\n                result += \"inner\" + innerCounter;\n                if (innerCounter == 0) {\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    public String labelBreak() {\n        String result = \"\";\n        myBreakLabel:\n        for (int outerCounter = 0; outerCounter < 2; outerCounter++) {\n            result += \"outer\" + outerCounter;\n            for (int innerCounter = 0; innerCounter < 2; innerCounter++) {\n                result += \"inner\" + innerCounter;\n                if (innerCounter == 0) {\n                    break myBreakLabel;\n                }\n            }\n        }\n        return result;\n    }\n\n    public String usingReturn() {\n        String result = \"\";\n        for (int outerCounter = 0; outerCounter < 2; outerCounter++) {\n            result += \"outer\" + outerCounter;\n            for (int innerCounter = 0; innerCounter < 2; innerCounter++) {\n                result += \"inner\" + innerCounter;\n                if (innerCounter == 0) {\n                    return result;\n                }\n            }\n        }\n        return \"failed\";\n    }\n}\n", "test_case": "package com.baeldung.breakloop;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass LoopBreakingUnitTest {\n\n    private LoopBreaking loopBreaking = new LoopBreaking();\n\n    @Test\n    void whenUsingBreak_shouldBreakInnerLoop() {\n        assertEquals(\"outer0inner0outer1inner0\", loopBreaking.simpleBreak());\n    }\n\n    @Test\n    void whenUsingLabeledBreak_shouldBreakInnerLoopAndOuterLoop() {\n        assertEquals(\"outer0inner0\", loopBreaking.labelBreak());\n    }\n\n    @Test\n    void whenUsingReturn_shouldBreakInnerLoopAndOuterLoop() {\n        assertEquals(\"outer0inner0\", loopBreaking.usingReturn());\n    }\n}"}
{"code_source": "package com.baeldung.generics;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class Generics {\n\n    // definition of a generic method\n    public static <T> List<T> fromArrayToList(T[] a) {\n        return Arrays.stream(a).collect(Collectors.toList());\n    }\n\n    // definition of a generic method\n    public static <T, G> List<G> fromArrayToList(T[] a, Function<T, G> mapperFunction) {\n        return Arrays.stream(a).map(mapperFunction).collect(Collectors.toList());\n    }\n\n    // example of a generic method that has Number as an upper bound for T\n    public static <T extends Number> List<T> fromArrayToListWithUpperBound(T[] a) {\n        return Arrays.stream(a).collect(Collectors.toList());\n    }\n\n    // example of a generic method with a wild card, this method can be used\n    // with a list of any subtype of Building\n    public static void paintAllBuildings(List<? extends Building> buildings) {\n        buildings.forEach(Building::paint);\n    }\n\n    public static List<Integer> createList(int a) {\n        List<Integer> list = new ArrayList<>();\n        list.add(a);\n        return list;\n    }\n\n    public <T> List<T> genericMethod(List<T> list) {\n        return list.stream().collect(Collectors.toList());\n    }\n    \n    public List<Object> withErasure(List<Object> list) {\n        return list.stream().collect(Collectors.toList());\n    }\n}", "test_case": "package com.baeldung.generics;\n\nimport org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.hamcrest.CoreMatchers.hasItems;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.junit.Assert.fail;\n\npublic class GenericsUnitTest {\n\n    // testing the generic method with Integer\n    @Test\n    public void givenArrayOfIntegers_thanListOfIntegersReturnedOK() {\n        Integer[] intArray = { 1, 2, 3, 4, 5 };\n        List<Integer> list = Generics.fromArrayToList(intArray);\n\n        assertThat(list, hasItems(intArray));\n    }\n\n    // testing the generic method with Integer and String type\n    @Test\n    public void givenArrayOfIntegers_thanListOfStringReturnedOK() {\n        Integer[] intArray = { 1, 2, 3, 4, 5 };\n        List<String> stringList = Generics.fromArrayToList(intArray, Object::toString);\n        assertThat(stringList, hasItems(\"1\", \"2\", \"3\", \"4\", \"5\"));\n    }\n\n    // testing the generic method with String\n    @Test\n    public void givenArrayOfStrings_thanListOfStringsReturnedOK() {\n        String[] stringArray = { \"hello1\", \"hello2\", \"hello3\", \"hello4\", \"hello5\" };\n        List<String> list = Generics.fromArrayToList(stringArray);\n\n        assertThat(list, hasItems(stringArray));\n    }\n\n    // testing the generic method with Number as upper bound with Integer\n    // if we test fromArrayToListWithUpperBound with any type that doesn't\n    // extend Number it will fail to compile\n    @Test\n    public void givenArrayOfIntegersAndNumberUpperBound_thanListOfIntegersReturnedOK() {\n        Integer[] intArray = { 1, 2, 3, 4, 5 };\n        List<Integer> list = Generics.fromArrayToListWithUpperBound(intArray);\n\n        assertThat(list, hasItems(intArray));\n    }\n\n    // testing paintAllBuildings method with a subtype of Building, the method\n    // will work with all subtypes of Building\n    @Test\n    public void givenSubTypeOfWildCardBoundedGenericType_thanPaintingOK() {\n        try {\n            List<Building> subBuildingsList = new ArrayList<>();\n            subBuildingsList.add(new Building());\n            subBuildingsList.add(new House());\n\n            // prints\n            // Painting Building\n            // Painting House\n            Generics.paintAllBuildings(subBuildingsList);\n        } catch (Exception e) {\n            fail();\n        }\n    }\n\n    @Test\n    public void givenAnInt_whenAddedToAGenericIntegerList_thenAListItemCanBeAssignedToAnInt() {\n        int number = 7;\n        List<Integer> list = Generics.createList(number);\n        int otherNumber = list.get(0);\n        assertThat(otherNumber, is(number));\n    }\n\n}"}
{"code_source": "package com.baeldung.switchstatement;\n\nimport com.baeldung.loops.LoopsInJava;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class SwitchStatement {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SwitchStatement.class);\n\n    public String exampleOfIF(String animal) {\n\n        String result;\n\n        if (animal.equals(\"DOG\") || animal.equals(\"CAT\")) {\n            result = \"domestic animal\";\n        } else if (animal.equals(\"TIGER\")) {\n            result = \"wild animal\";\n        } else {\n            result = \"unknown animal\";\n        }\n        return result;\n    }\n\n    public String exampleOfSwitch(String animal) {\n\n        String result;\n\n        switch (animal) {\n        case \"DOG\":\n        case \"CAT\":\n            result = \"domestic animal\";\n            break;\n        case \"TIGER\":\n            result = \"wild animal\";\n            break;\n        default:\n            result = \"unknown animal\";\n            break;\n        }\n        return result;\n    }\n\n    public String forgetBreakInSwitch(String animal) {\n\n        String result;\n\n        switch (animal) {\n\n        case \"DOG\":\n            LOGGER.debug(\"domestic animal\");\n            result = \"domestic animal\";\n\n        default:\n            LOGGER.debug(\"unknown animal\");\n            result = \"unknown animal\";\n\n        }\n        return result;\n    }\n\n    public String constantCaseValue(String animal) {\n\n        String result = \"\";\n\n        final String dog = \"DOG\";\n\n        switch (animal) {\n\n        case dog:\n            result = \"domestic animal\";\n        }\n        return result;\n    }\n\n}\n", "test_case": "package com.baeldung.switchstatement;\n\nimport org.junit.Test;\n\nimport org.junit.Assert;\n\npublic class SwitchStatementUnitTest {\n    private SwitchStatement s = new SwitchStatement();\n\n    \n    @Test\n    public void whenDog_thenDomesticAnimal() {\n        \n        String animal = \"DOG\";\n        Assert.assertEquals(\"domestic animal\", s.exampleOfSwitch(animal));\n    }\n    \n    @Test\n    public void whenNoBreaks_thenGoThroughBlocks() {\n        String animal = \"DOG\";\n        Assert.assertEquals(\"unknown animal\", s.forgetBreakInSwitch(animal));\n    }\n    \n    @Test(expected=NullPointerException.class)\n    public void whenSwitchAgumentIsNull_thenNullPointerException() {\n        String animal = null;\n        Assert.assertEquals(\"domestic animal\", s.exampleOfSwitch(animal));\n    }\n    \n       \n    @Test\n    public void whenCompareStrings_thenByEqual() {\n        String animal = new String(\"DOG\");\n        Assert.assertEquals(\"domestic animal\", s.exampleOfSwitch(animal));\n    }\n    \n  \n}\n"}
{"code_source": "package com.baeldung.core.nativekeyword;\n\npublic class DateTimeUtils {\n\n    public native String getSystemTime();\n\n    static {\n        System.loadLibrary(\"nativedatetimeutils\");\n    }\n}\n", "test_case": "package com.baeldung.core.nativekeyword;\n\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.slf4j.Logger;\n\nimport static org.junit.Assert.assertNotNull;\n\npublic class DateTimeUtilsManualTest {\n\n    private static final Logger LOG = org.slf4j.LoggerFactory.getLogger(DateTimeUtilsManualTest.class);\n\n    @BeforeClass\n    public static void setUpClass() {\n        System.loadLibrary(\"msvcr100\");\n        System.loadLibrary(\"libgcc_s_sjlj-1\");\n        System.loadLibrary(\"libstdc++-6\");\n        System.loadLibrary(\"nativedatetimeutils\");\n    }\n\n    @Test\n    public void givenNativeLibsLoaded_thenNativeMethodIsAccessible() {\n        DateTimeUtils dateTimeUtils = new DateTimeUtils();\n        LOG.info(\"System time is : \" + dateTimeUtils.getSystemTime());\n        assertNotNull(dateTimeUtils.getSystemTime());\n    }\n}\n"}
{"code_source": "package com.baeldung.networking.uriurl;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class URIDemo {\n    private final Logger logger = LoggerFactory.getLogger(URIDemo.class);\n\n    String URISTRING = \"https://wordpress.org:443/support/topic/page-jumps-within-wordpress/?replies=3#post-2278484\";\n    // parsed locator\n    String URISCHEME = \"https\";\n    String URISCHEMESPECIFIC;\n    String URIHOST = \"wordpress.org\";\n    String URIAUTHORITY = \"wordpress.org:443\";\n\n    String URIPATH = \"/support/topic/page-jumps-within-wordpress/\";\n    int URIPORT = 443;\n    String URIQUERY = \"replies=3\";\n    String URIFRAGMENT = \"post-2278484\";\n    String URIUSERINFO;\n    String URICOMPOUND = URISCHEME + \"://\" + URIHOST + \":\" + URIPORT + URIPATH + \"?\" + URIQUERY + \"#\" + URIFRAGMENT;\n\n    URI uri;\n    URL url;\n    BufferedReader in = null;\n    String URIContent = \"\";\n\n    private String getParsedPieces(URI uri) {\n        logger.info(\"*** List of parsed pieces ***\");\n        URISCHEME = uri.getScheme();\n        logger.info(\"URISCHEME: \" + URISCHEME);\n        URISCHEMESPECIFIC = uri.getSchemeSpecificPart();\n        logger.info(\"URISCHEMESPECIFIC: \" + URISCHEMESPECIFIC);\n        URIHOST = uri.getHost();\n        URIAUTHORITY = uri.getAuthority();\n        logger.info(\"URIAUTHORITY: \" + URIAUTHORITY);\n        logger.info(\"URIHOST: \" + URIHOST);\n        URIPATH = uri.getPath();\n        logger.info(\"URIPATH: \" + URIPATH);\n        URIPORT = uri.getPort();\n        logger.info(\"URIPORT: \" + URIPORT);\n        URIQUERY = uri.getQuery();\n        logger.info(\"URIQUERY: \" + URIQUERY);\n        URIFRAGMENT = uri.getFragment();\n        logger.info(\"URIFRAGMENT: \" + URIFRAGMENT);\n\n        try {\n            url = uri.toURL();\n        } catch (MalformedURLException e) {\n            logger.info(\"MalformedURLException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        } catch (IllegalArgumentException e) {\n            logger.info(\"IllegalArgumentException thrown: \" + e.getMessage());\n            e.printStackTrace();\n        }\n        return url.toString();\n    }\n\n    public String testURIAsNew(String URIString) {\n        // creating URI object\n        try {\n            uri = new URI(URIString);\n        } catch (URISyntaxException e) {\n            logger.info(\"URISyntaxException thrown: \" + e.getMessage());\n            e.printStackTrace();\n            throw new IllegalArgumentException();\n        }\n        return getParsedPieces(uri);\n    }\n\n    public String testURIAsCreate(String URIString) {\n        // creating URI object\n        uri = URI.create(URIString);\n        return getParsedPieces(uri);\n    }\n\n    public static void main(String[] args) throws Exception {\n        URIDemo demo = new URIDemo();\n        String contentCreate = demo.testURIAsCreate(demo.URICOMPOUND);\n        demo.logger.info(contentCreate);\n        String contentNew = demo.testURIAsNew(demo.URICOMPOUND);\n        demo.logger.info(contentNew);\n    }\n}\n", "test_case": "package com.baeldung.networking.uriurl;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.net.URLConnection;\n\nimport org.junit.BeforeClass;\nimport org.junit.FixMethodOrder;\nimport org.junit.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.baeldung.networking.uriurl.URLDemo;\n\n@FixMethodOrder\npublic class URIDemoLiveTest {\n    private final Logger log = LoggerFactory.getLogger(URIDemoLiveTest.class);\n    String URISTRING = \"https://wordpress.org:443/support/topic/page-jumps-within-wordpress/?replies=3#post-2278484\";\n    // parsed locator\n    static String URISCHEME = \"https\";\n    String URISCHEMESPECIFIC;\n    static String URIHOST = \"wordpress.org\";\n    static String URIAUTHORITY = \"wordpress.org:443\";\n\n    static String URIPATH = \"/support/topic/page-jumps-within-wordpress/\";\n    int URIPORT = 443;\n    static int URIDEFAULTPORT = 443;\n    static String URIQUERY = \"replies=3\";\n    static String URIFRAGMENT = \"post-2278484\";\n    static String URICOMPOUND = URISCHEME + \"://\" + URIHOST + \":\" + URIDEFAULTPORT + URIPATH + \"?\" + URIQUERY + \"#\" + URIFRAGMENT;\n\n    static URI uri;\n    URL url;\n    BufferedReader in = null;\n    String URIContent = \"\";\n\n    @BeforeClass\n    public static void givenEmplyURL_whenInitializeURL_thenSuccess() throws URISyntaxException {\n        uri = new URI(URICOMPOUND);\n    }\n\n    // check parsed URL\n    @Test\n    public void givenURI_whenURIIsParsed_thenSuccess() {\n        assertNotNull(\"URI is null\", uri);\n        assertEquals(\"URI string is not equal\", uri.toString(), URISTRING);\n        assertEquals(\"Scheme is not equal\", uri.getScheme(), URISCHEME);\n        assertEquals(\"Authority is not equal\", uri.getAuthority(), URIAUTHORITY);\n        assertEquals(\"Host string is not equal\", uri.getHost(), URIHOST);\n        assertEquals(\"Path string is not equal\", uri.getPath(), URIPATH);\n        assertEquals(\"Port number is not equal\", uri.getPort(), URIPORT);\n        assertEquals(\"Query string is not equal\", uri.getQuery(), URIQUERY);\n        assertEquals(\"Fragment string is not equal\", uri.getFragment(), URIFRAGMENT);\n    }\n}\n"}
{"code_source": "package com.baeldung.networking.uriurl;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URI;\nimport java.net.URL;\nimport java.net.URLConnection;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class URLDemo {\n    private final Logger log = LoggerFactory.getLogger(URLDemo.class);\n\n    String URLSTRING = \"https://wordpress.org:443/support/topic/page-jumps-within-wordpress/?replies=3#post-2278484\";\n    // parsed locator\n    String URLPROTOCOL = \"https\";\n    // final static String URLAUTHORITY = \"wordpress.org:443\";\n    String URLHOST = \"wordpress.org\";\n    String URLPATH = \"/support/topic/page-jumps-within-wordpress/\";\n    // final static String URLFILENAME = \"/support/topic/page-jumps-within-wordpress/?replies=3\";\n    // final static int URLPORT = 443;\n    int URLDEFAULTPORT = 443;\n    String URLQUERY = \"replies=3\";\n    String URLREFERENCE = \"post-2278484\";\n    String URLCOMPOUND = URLPROTOCOL + \"://\" + URLHOST + \":\" + URLDEFAULTPORT + URLPATH + \"?\" + URLQUERY + \"#\" + URLREFERENCE;\n\n    URL url;\n    URLConnection urlConnection = null;\n    HttpURLConnection connection = null;\n    BufferedReader in = null;\n    String urlContent = \"\";\n\n    public String testURL(String urlString) throws IOException, IllegalArgumentException {\n        String urlStringCont = \"\";\n        // comment the if clause if experiment with URL\n        /*if (!URLSTRING.equals(urlString)) {\n            throw new IllegalArgumentException(\"URL String argument is not proper: \" + urlString);\n        }*/\n        // creating URL object\n        url = new URL(urlString);\n        // get URL connection\n        urlConnection = url.openConnection();\n        connection = null;\n        // we can check, if connection is proper type\n        if (urlConnection instanceof HttpURLConnection) {\n            connection = (HttpURLConnection) urlConnection;\n        } else {\n            log.info(\"Please enter an HTTP URL\");\n            throw new IOException(\"HTTP URL is not correct\");\n        }\n        // we can check response code (200 OK is expected)\n        log.info(connection.getResponseCode() + \" \" + connection.getResponseMessage());\n        in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n        String current;\n\n        while ((current = in.readLine()) != null) {\n            urlStringCont += current;\n        }\n        return urlStringCont;\n    }\n\n    public static void main(String[] args) throws Exception {\n        URLDemo demo = new URLDemo();\n        String content = demo.testURL(demo.URLCOMPOUND);\n        demo.log.info(content);\n    }\n}\n", "test_case": "package com.baeldung.networking.uriurl;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLConnection;\n\nimport org.junit.BeforeClass;\nimport org.junit.FixMethodOrder;\nimport org.junit.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.baeldung.networking.uriurl.URLDemo;\n\n@FixMethodOrder\npublic class URLDemoLiveTest {\n    private final Logger log = LoggerFactory.getLogger(URLDemoLiveTest.class);\n    static String URLSTRING = \"https://wordpress.org:443/support/topic/page-jumps-within-wordpress/?replies=3#post-2278484\";\n    // parsed locator\n    static String URLPROTOCOL = \"https\";\n    String URLAUTHORITY = \"wordpress.org:443\";\n    static String URLHOST = \"wordpress.org\";\n    static String URLPATH = \"/support/topic/page-jumps-within-wordpress/\";\n    String URLFILENAME = \"/support/topic/page-jumps-within-wordpress/?replies=3\";\n    int URLPORT = 443;\n    static int URLDEFAULTPORT = 443;\n    static String URLQUERY = \"replies=3\";\n    static String URLREFERENCE = \"post-2278484\";\n    static String URLCOMPOUND = URLPROTOCOL + \"://\" + URLHOST + \":\" + URLDEFAULTPORT + URLPATH + \"?\" + URLQUERY + \"#\" + URLREFERENCE;\n\n    static URL url;\n    URLConnection urlConnection = null;\n    HttpURLConnection connection = null;\n    BufferedReader in = null;\n    String urlContent = \"\";\n\n    @BeforeClass\n    public static void givenEmplyURL_whenInitializeURL_thenSuccess() throws MalformedURLException {\n        url = new URL(URLCOMPOUND);\n    }\n\n    // check parsed URL\n    @Test\n    public void givenURL_whenURLIsParsed_thenSuccess() {\n        assertNotNull(\"URL is null\", url);\n        assertEquals(\"URL string is not equal\", url.toString(), URLSTRING);\n        assertEquals(\"Protocol is not equal\", url.getProtocol(), URLPROTOCOL);\n        assertEquals(\"Authority is not equal\", url.getAuthority(), URLAUTHORITY);\n        assertEquals(\"Host string is not equal\", url.getHost(), URLHOST);\n        assertEquals(\"Path string is not equal\", url.getPath(), URLPATH);\n        assertEquals(\"File string is not equal\", url.getFile(), URLFILENAME);\n        assertEquals(\"Port number is not equal\", url.getPort(), URLPORT);\n        assertEquals(\"Default port number is not equal\", url.getDefaultPort(), URLDEFAULTPORT);\n        assertEquals(\"Query string is not equal\", url.getQuery(), URLQUERY);\n        assertEquals(\"Reference string is not equal\", url.getRef(), URLREFERENCE);\n    }\n\n    // Obtain the content from location\n    @Test\n    public void givenURL_whenOpenConnectionAndContentIsNotEmpty_thenSuccess() throws IOException {\n        try {\n            urlConnection = url.openConnection();\n        } catch (IOException ex) {\n            urlConnection = null;\n            ex.printStackTrace();\n        }\n        assertNotNull(\"URL Connection is null\", urlConnection);\n\n        connection = null;\n        assertTrue(\"URLConnection is not HttpURLConnection\", urlConnection instanceof HttpURLConnection);\n        if (urlConnection instanceof HttpURLConnection) {\n            connection = (HttpURLConnection) urlConnection;\n        }\n        assertNotNull(\"Connection is null\", connection);\n\n        log.info(connection.getResponseCode() + \" \" + connection.getResponseMessage());\n\n        try {\n            in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n        } catch (IOException ex) {\n            in = null;\n            ex.printStackTrace();\n        }\n        assertNotNull(\"Input stream failed\", in);\n\n        String current;\n        try {\n            while ((current = in.readLine()) != null) {\n                urlContent += current;\n            }\n        } catch (IOException ex) {\n            urlContent = null;\n            ex.printStackTrace();\n        }\n        assertNotNull(\"Content is null\", urlContent);\n        assertTrue(\"Content is empty\", urlContent.length() > 0);\n    }\n}\n"}
{"code_source": "package com.baeldung.socket.read;\n\nimport java.net.*;\nimport java.nio.charset.StandardCharsets;\nimport java.io.*; \n\npublic class Server {\n    \n    public void runServer(int port) {\n        //Start the server and wait for connection\n        try {\n            ServerSocket server = new ServerSocket(port);\n            System.out.println(\"Server Started. Waiting for connection ...\");\n            Socket socket = server.accept();\n            System.out.println(\"Got connection from client.\");\n            //Get input stream from socket variable and convert the same to DataInputStream\n            DataInputStream in = new DataInputStream(new BufferedInputStream(socket.getInputStream()));\n            //Read type and length of data\n            char dataType = in.readChar();\n            int length = in.readInt();\n            System.out.println(\"Type : \"+dataType);\n            System.out.println(\"Lenght :\"+length);\n            if(dataType == 's') {\n                //Read String data in bytes\n                byte[] messageByte = new byte[length];\n                boolean end = false;\n                StringBuilder dataString = new StringBuilder(length);\n                int totalBytesRead = 0;\n                //We need to run while loop, to read all data in that stream\n                while(!end) {\n                    int currentBytesRead = in.read(messageByte);\n                    totalBytesRead = currentBytesRead + totalBytesRead;\n                    if(totalBytesRead <= length) {\n                        dataString.append(new String(messageByte,0,currentBytesRead,StandardCharsets.UTF_8));\n                    } else {\n                        dataString.append(new String(messageByte,0,length - totalBytesRead + currentBytesRead,StandardCharsets.UTF_8));\n                    }\n                    if(dataString.length()>=length) {\n                        end = true;\n                    }\n                }\n                System.out.println(\"Read \"+length+\" bytes of message from client. Message = \"+dataString);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}", "test_case": "package com.baeldung.socket;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.util.concurrent.Executors;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\npublic class GreetServerIntegrationTest {\n\n    private GreetClient client;\n\n    private static int port;\n\n    @BeforeClass\n    public static void start() throws InterruptedException, IOException {\n        \n        // Take an available port\n        ServerSocket s = new ServerSocket(0);\n        port = s.getLocalPort();\n        s.close();\n        \n        Executors.newSingleThreadExecutor()\n            .submit(() -> new GreetServer().start(port));\n        Thread.sleep(500);\n    }\n\n    @Before\n    public void init() {\n        client = new GreetClient();\n        client.startConnection(\"127.0.0.1\", port);\n\n    }\n\n    @Test\n    public void givenGreetingClient_whenServerRespondsWhenStarted_thenCorrect() {\n        String response = client.sendMessage(\"hello server\");\n        assertEquals(\"hello client\", response);\n    }\n\n    @After\n    public void finish() {\n        client.stopConnection();\n    }\n}\n"}
{"code_source": "package com.baeldung.curltojava;\n\nimport java.io.BufferedInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class JavaCurlExamples {\n\n    public static String inputStreamToString(InputStream inputStream) {\n        final int bufferSize = 8 * 1024;\n        byte[] buffer = new byte[bufferSize];\n        final StringBuilder builder = new StringBuilder();\n        try (BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream, bufferSize)) {\n            while (bufferedInputStream.read(buffer) != -1) {\n                builder.append(new String(buffer));\n            }\n        } catch (IOException ex) {\n            Logger.getLogger(JavaCurlExamples.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return builder.toString();\n    }\n\n    public static void consumeInputStream(InputStream inputStream) {\n        inputStreamToString(inputStream);\n    }\n\n}\n", "test_case": "package com.baeldung.curltojava;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class JavaCurlExamplesLiveTest {\n\n    @Test\n    public void givenCommand_whenCalled_thenProduceZeroExitCode() throws IOException {\n        String command = \"curl -X GET https://postman-echo.com/get?foo1=bar1&foo2=bar2\";\n        ProcessBuilder processBuilder = new ProcessBuilder(command.split(\" \"));\n        processBuilder.directory(new File(\"/home/\"));\n        Process process = processBuilder.start();\n        InputStream inputStream = process.getInputStream();\n        // Consume the inputStream so the process can exit\n        JavaCurlExamples.consumeInputStream(inputStream);\n        int exitCode = process.exitValue();\n        \n        Assert.assertEquals(0, exitCode);\n    }\n    \n    @Test\n    public void givenNewCommands_whenCalled_thenCheckIfIsAlive() throws IOException {\n        String command = \"curl -X GET https://postman-echo.com/get?foo1=bar1&foo2=bar2\";\n        ProcessBuilder processBuilder = new ProcessBuilder(command.split(\" \"));\n        processBuilder.directory(new File(\"/home/\"));\n        Process process = processBuilder.start();\n        \n        // Re-use processBuilder\n        processBuilder.command(new String[]{\"newCommand\", \"arguments\"});\n        \n        Assert.assertEquals(true, process.isAlive());\n    }\n\n    @Test\n    public void whenRequestPost_thenCheckIfReturnContent() throws IOException {\n        String command = \"curl -X POST https://postman-echo.com/post --data foo1=bar1&foo2=bar2\";\n        Process process = Runtime.getRuntime().exec(command);\n        \n        // Get the POST result\n        String content = JavaCurlExamples.inputStreamToString(process.getInputStream());\n\n        Assert.assertTrue(null != content && !content.isEmpty());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.download;\n\nimport org.apache.commons.io.FileUtils;\nimport org.asynchttpclient.*;\n\nimport java.io.*;\nimport java.net.URL;\nimport java.nio.channels.Channels;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.ReadableByteChannel;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.concurrent.ExecutionException;\n\npublic class FileDownload {\n\n    public static void downloadWithJavaIO(String url, String localFilename) {\n\n        try (BufferedInputStream in = new BufferedInputStream(new URL(url).openStream()); FileOutputStream fileOutputStream = new FileOutputStream(localFilename)) {\n\n            byte dataBuffer[] = new byte[1024];\n            int bytesRead;\n            while ((bytesRead = in.read(dataBuffer, 0, 1024)) != -1) {\n                fileOutputStream.write(dataBuffer, 0, bytesRead);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void downloadWithJava7IO(String url, String localFilename) {\n\n        try (InputStream in = new URL(url).openStream()) {\n            Files.copy(in, Paths.get(localFilename), StandardCopyOption.REPLACE_EXISTING);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void downloadWithJavaNIO(String fileURL, String localFilename) throws IOException {\n\n        URL url = new URL(fileURL);\n        try (ReadableByteChannel readableByteChannel = Channels.newChannel(url.openStream()); \n            FileOutputStream fileOutputStream = new FileOutputStream(localFilename); FileChannel fileChannel = fileOutputStream.getChannel()) {\n\n            fileChannel.transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n            fileOutputStream.close();\n        }\n    }\n\n    public static void downloadWithApacheCommons(String url, String localFilename) {\n\n        int CONNECT_TIMEOUT = 10000;\n        int READ_TIMEOUT = 10000;\n        try {\n            FileUtils.copyURLToFile(new URL(url), new File(localFilename), CONNECT_TIMEOUT, READ_TIMEOUT);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public static void downloadWithAHC(String url, String localFilename) throws ExecutionException, InterruptedException, IOException {\n\n        FileOutputStream stream = new FileOutputStream(localFilename);\n        AsyncHttpClient client = Dsl.asyncHttpClient();\n\n        client.prepareGet(url)\n            .execute(new AsyncCompletionHandler<FileOutputStream>() {\n\n                @Override\n                public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {\n                    stream.getChannel()\n                        .write(bodyPart.getBodyByteBuffer());\n                    return State.CONTINUE;\n                }\n\n                @Override\n                public FileOutputStream onCompleted(Response response) throws Exception {\n                    return stream;\n                }\n            })\n            .get();\n\n        stream.getChannel().close();\n        client.close();\n    }\n\n}\n", "test_case": "package com.baeldung.download;\n\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.IOException;\nimport java.net.URISyntaxException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.concurrent.ExecutionException;\n\nimport javax.xml.bind.DatatypeConverter;\n\nimport org.junit.After;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\npublic class FileDownloadIntegrationTest {\n    \n    static String FILE_URL = \"https://s3.amazonaws.com/baeldung.com/Do+JSON+with+Jackson.pdf?__s=vatuzcrazsqopnn7finb\";\n    static String FILE_NAME = \"file.dat\";\n    static String FILE_MD5_HASH = \"CE20E17B1E1FBF65A85E74AC00FA1FD8\";\n    \n    @Test\n    public void givenJavaIO_whenDownloadingFile_thenDownloadShouldBeCorrect() throws NoSuchAlgorithmException, IOException {\n        \n        FileDownload.downloadWithJavaIO(FILE_URL, FILE_NAME);\n        assertTrue(checkMd5Hash(FILE_NAME));\n    }\n    \n    @Test\n    public void givenJavaNIO_whenDownloadingFile_thenDownloadShouldBeCorrect() throws NoSuchAlgorithmException, IOException {\n        \n        FileDownload.downloadWithJavaNIO(FILE_URL, FILE_NAME);\n        assertTrue(checkMd5Hash(FILE_NAME));\n    }\n    \n    @Test\n    public void givenJava7IO_whenDownloadingFile_thenDownloadShouldBeCorrect() throws NoSuchAlgorithmException, IOException {\n        \n        FileDownload.downloadWithJava7IO(FILE_URL, FILE_NAME);\n        assertTrue(checkMd5Hash(FILE_NAME));\n    }\n    \n    @Test\n    public void givenAHCLibrary_whenDownloadingFile_thenDownloadShouldBeCorrect() throws NoSuchAlgorithmException, IOException, ExecutionException, InterruptedException {\n        \n        FileDownload.downloadWithAHC(FILE_URL, FILE_NAME);\n        assertTrue(checkMd5Hash(FILE_NAME));\n    }\n    \n    @Test\n    public void givenApacheCommonsIO_whenDownloadingFile_thenDownloadShouldBeCorrect() throws NoSuchAlgorithmException, IOException {\n        \n        FileDownload.downloadWithApacheCommons(FILE_URL, FILE_NAME);\n        assertTrue(checkMd5Hash(FILE_NAME));\n    }\n    \n    @Test\n    public void givenJavaIO_whenDownloadingFileStops_thenDownloadShouldBeResumedCorrectly() throws NoSuchAlgorithmException, IOException, URISyntaxException {\n        \n        ResumableDownload.downloadFileWithResume(FILE_URL, FILE_NAME);\n        assertTrue(checkMd5Hash(FILE_NAME));\n    }\n    \n    private boolean checkMd5Hash(String filename) throws IOException, NoSuchAlgorithmException {\n        \n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(Files.readAllBytes(Paths.get(filename)));\n        byte[] digest = md.digest();\n        String myChecksum = DatatypeConverter.printHexBinary(digest);\n        \n        return myChecksum.equalsIgnoreCase(FILE_MD5_HASH);\n    }\n    \n    @BeforeClass\n    public static void setup() throws IOException {\n        if (Files.exists(Paths.get(FILE_NAME))) {\n            Files.delete(Paths.get(FILE_NAME));\n        }\n    }\n    \n    @After\n    public void cleanup() throws IOException {\n        if (Files.exists(Paths.get(FILE_NAME))) {\n            Files.delete(Paths.get(FILE_NAME));\n        }\n    }\n}\n"}
{"code_source": "package com.baeldung.mail.mailwithattachment;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.util.Properties;\n\nimport jakarta.mail.Authenticator;\nimport jakarta.mail.BodyPart;\nimport jakarta.mail.Message;\nimport jakarta.mail.MessagingException;\nimport jakarta.mail.Multipart;\nimport jakarta.mail.PasswordAuthentication;\nimport jakarta.mail.Session;\nimport jakarta.mail.Transport;\nimport jakarta.mail.internet.InternetAddress;\nimport jakarta.mail.internet.MimeBodyPart;\nimport jakarta.mail.internet.MimeMessage;\nimport jakarta.mail.internet.MimeMultipart;\n\npublic class MailWithAttachmentService {\n\n    private final String username;\n    private final String password;\n    private final String host;\n    private final int port;\n\n    MailWithAttachmentService(String username, String password, String host, int port) {\n        this.username = username;\n        this.password = password;\n        this.host = host;\n        this.port = port;\n    }\n\n    public Session getSession() {\n        Properties props = new Properties();\n        props.put(\"mail.smtp.auth\", \"true\");\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.host\", this.host);\n        props.put(\"mail.smtp.port\", this.port);\n\n        return Session.getInstance(props, new Authenticator() {\n            protected PasswordAuthentication getPasswordAuthentication() {\n                return new PasswordAuthentication(username, password);\n            }\n        });\n    }\n\n    public void sendMail(Session session) throws MessagingException, IOException {\n        Message message = new MimeMessage(session);\n        message.setFrom(new InternetAddress(\"mail@gmail.com\"));\n        message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(\"mail@gmail.com\"));\n        message.setSubject(\"Testing Subject\");\n\n        BodyPart messageBodyPart = new MimeBodyPart();\n        messageBodyPart.setText(\"This is message body\");\n\n        Multipart multipart = new MimeMultipart();\n        multipart.addBodyPart(messageBodyPart);\n\n        MimeBodyPart attachmentPart = new MimeBodyPart();\n        attachmentPart.attachFile(getFile(\"attachment.txt\"));\n        multipart.addBodyPart(attachmentPart);\n\n        MimeBodyPart attachmentPart2 = new MimeBodyPart();\n        attachmentPart2.attachFile(getFile(\"attachment2.txt\"));\n        multipart.addBodyPart(attachmentPart2);\n\n        message.setContent(multipart);\n        Transport.send(message);\n    }\n\n    private File getFile(String filename) {\n        try {\n            URI uri = this.getClass()\n              .getClassLoader()\n              .getResource(filename)\n              .toURI();\n            return new File(uri);\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Unable to find file from resources: \" + filename);\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.mail.mailwithattachment;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\n\nimport com.icegreen.greenmail.configuration.GreenMailConfiguration;\nimport com.icegreen.greenmail.junit.GreenMailRule;\nimport com.icegreen.greenmail.util.GreenMailUtil;\nimport com.icegreen.greenmail.util.ServerSetupTest;\n\nimport jakarta.mail.MessagingException;\nimport jakarta.mail.Session;\nimport jakarta.mail.internet.MimeMessage;\nimport jakarta.mail.internet.MimeMultipart;\n\npublic class MailWithAttachmentServiceLiveTest {\n\n    private static final String USERNAME = \"testUser\";\n    private static final String PASSWORD = \"password\";\n    private static final String HOSTNAME = \"localhost\";\n\n    @Rule\n    public final GreenMailRule greenMail = new GreenMailRule(ServerSetupTest.SMTP)\n      .withConfiguration(\n        GreenMailConfiguration.aConfig()\n          .withUser(USERNAME, PASSWORD)\n      );\n\n    private MailWithAttachmentService emailService;\n\n    @Before\n    public void setup() {\n        emailService = new MailWithAttachmentService(\n          USERNAME, PASSWORD, HOSTNAME, greenMail.getSmtp().getPort()\n        );\n    }\n\n    @Test\n    public void givenEmailService_whenMessageSentWithAttachments_thenMessageIsReceived() throws Exception {\n\n        Session tlsSession = emailService.getSession();\n        emailService.sendMail(tlsSession);\n\n        MimeMessage[] receivedMessages = greenMail.getReceivedMessages();\n        assertEquals(1, receivedMessages.length);\n\n        MimeMessage receivedMessage = receivedMessages[0];\n        assertEquals(\"Testing Subject\", subjectFrom(receivedMessage));\n        assertEquals(\"This is message body\", emailTextFrom(receivedMessage));\n        assertEquals(\"sample attachment content\", attachment1ContentsFrom(receivedMessage));\n        assertEquals(\"sample attachment content 2\", attachment2ContentsFrom(receivedMessage));\n    }\n\n    private static String subjectFrom(MimeMessage receivedMessage) throws MessagingException {\n        return receivedMessage.getSubject();\n    }\n\n    private static String emailTextFrom(MimeMessage receivedMessage) throws Exception {\n        return GreenMailUtil.getBody(((MimeMultipart) receivedMessage.getContent())\n          .getBodyPart(0));\n    }\n\n    private static String attachment1ContentsFrom(MimeMessage receivedMessage) throws Exception {\n        return GreenMailUtil.getBody(((MimeMultipart) receivedMessage.getContent())\n          .getBodyPart(1));\n    }\n\n    private static String attachment2ContentsFrom(MimeMessage receivedMessage) throws Exception {\n        return GreenMailUtil.getBody(((MimeMultipart) receivedMessage.getContent())\n          .getBodyPart(2));\n    }\n}\n"}
{"code_source": "package com.baeldung.url;\n\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class UrlChecker {\n\n    public int getResponseCodeForURL(String address) throws IOException {\n        return getResponseCodeForURLUsing(address, \"GET\");\n    }\n\n    public int getResponseCodeForURLUsingHead(String address) throws IOException {\n        return getResponseCodeForURLUsing(address, \"HEAD\");\n    }\n\n    private int getResponseCodeForURLUsing(String address, String method) throws IOException {\n        HttpURLConnection.setFollowRedirects(false); // Set follow redirects to false\n        final URL url = new URL(address);\n        HttpURLConnection huc = (HttpURLConnection) url.openConnection();\n        huc.setRequestMethod(method);\n        return huc.getResponseCode();\n    }\n\n}\n", "test_case": "package com.baeldung.url;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.io.IOException;\n\nimport org.junit.Test;\n\npublic class UrlCheckerUnitTest {\n\n    @Test\n    public void givenValidUrl_WhenUsingHEAD_ThenReturn200() throws IOException {\n        UrlChecker tester = new UrlChecker();\n        int responseCode = tester.getResponseCodeForURLUsingHead(\"http://www.example.com\");\n        assertEquals(200, responseCode);\n    }\n    \n    @Test\n    public void givenInvalidIUrl_WhenUsingHEAD_ThenReturn404() throws IOException {\n        UrlChecker tester = new UrlChecker();\n        int responseCode = tester.getResponseCodeForURLUsingHead(\"http://www.example.com/unkownurl\");\n        assertEquals(404, responseCode);\n    }\n    \n    @Test\n    public void givenValidUrl_WhenUsingGET_ThenReturn200() throws IOException {\n        UrlChecker tester = new UrlChecker();\n        int responseCode = tester.getResponseCodeForURL(\"http://www.example.com\");\n        assertEquals(200, responseCode);\n    }\n    \n    @Test\n    public void givenInvalidIUrl_WhenUsingGET_ThenReturn404() throws IOException {\n        UrlChecker tester = new UrlChecker();\n        int responseCode = tester.getResponseCodeForURL(\"http://www.example.com/unkownurl\");\n        assertEquals(404, responseCode);\n    }\n    \n}\n"}
{"code_source": "package com.baeldung.url.auth;\n\nimport java.io.IOException;\nimport java.net.Authenticator;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.PasswordAuthentication;\nimport java.net.ProtocolException;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\n\nimport org.apache.commons.codec.binary.Base64;\n\npublic class HttpClient {\n\n    private final String user;\n    private final String password;\n\n    public HttpClient(String user, String password) {\n        this.user = user;\n        this.password = password;\n    }\n\n    public int sendRquestWithAuthHeader(String url) throws IOException {\n        HttpURLConnection connection = null;\n        try {\n            connection = createConnection(url);\n            connection.setRequestProperty(\"Authorization\", createBasicAuthHeaderValue());\n            return connection.getResponseCode();\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }\n\n    public int sendRquestWithAuthenticator(String url) throws IOException {\n        setAuthenticator();\n\n        HttpURLConnection connection = null;\n        try {\n            connection = createConnection(url);\n            return connection.getResponseCode();\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }\n\n    private HttpURLConnection createConnection(String urlString) throws MalformedURLException, IOException, ProtocolException {\n        URL url = new URL(String.format(urlString));\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n        return connection;\n    }\n\n    private String createBasicAuthHeaderValue() {\n        String auth = user + \":\" + password;\n        byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.UTF_8));\n        String authHeaderValue = \"Basic \" + new String(encodedAuth);\n        return authHeaderValue;\n    }\n\n    private void setAuthenticator() {\n        Authenticator.setDefault(new BasicAuthenticator());\n    }\n\n    private final class BasicAuthenticator extends Authenticator {\n        protected PasswordAuthentication getPasswordAuthentication() {\n            return new PasswordAuthentication(user, password.toCharArray());\n        }\n    }\n}\n", "test_case": "package com.baeldung.url.auth;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class HttpClientLiveTest {\n\n    @Test\n    public void sendRquestWithAuthHeader() throws Exception {\n        HttpClient httpClient = new HttpClient(\"user1\", \"pass1\");\n\n        int status = httpClient.sendRquestWithAuthHeader(\"https://httpbin.org/basic-auth/user1/pass1\");\n\n        assertTrue(isSuccess(status));\n    }\n\n    @Test\n    public void sendRquestWithAuthHeader_whenIncorrectCredentials_thenNotSuccessful() throws Exception {\n        HttpClient httpClient = new HttpClient(\"John\", \"Smith\");\n\n        int status = httpClient.sendRquestWithAuthHeader(\"https://httpbin.org/basic-auth/user1/pass1\");\n\n        assertTrue(isUnauthorized(status));\n    }\n\n    @Test\n    public void sendRquestWithAuthenticator() throws Exception {\n        HttpClient httpClient = new HttpClient(\"user2\", \"pass2\");\n\n        int status = httpClient.sendRquestWithAuthenticator(\"https://httpbin.org/basic-auth/user2/pass2\");\n\n        assertTrue(isSuccess(status));\n    }\n\n    @Test\n    public void sendRquestWithAuthenticator_whenIncorrectCredentials_thenNotSuccessful() throws Exception {\n        HttpClient httpClient = new HttpClient(\"John\", \"Smith\");\n\n        int status = httpClient.sendRquestWithAuthenticator(\"https://httpbin.org/basic-auth/user2/pass2\");\n\n        assertTrue(isUnauthorized(status));\n    }\n\n    private boolean isSuccess(int status) {\n        return (status >= 200) && (status < 300);\n    }\n\n    private boolean isUnauthorized(int status) {\n        return status == 401;\n    }\n}\n"}
{"code_source": "package com.baeldung.domain_name;\n\nimport com.google.common.net.InternetDomainName;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\n\npublic class DomainNameClient {\n\n    public String getHost(String url) throws URISyntaxException {\n        URI uri = new URI(url);\n        return uri.getHost();\n    }\n\n    public String getTopPrivateDomain(String url) {\n        InternetDomainName internetDomainName = InternetDomainName.from(url)\n            .topPrivateDomain();\n        return internetDomainName.toString();\n    }\n\n    public String getName(String url) {\n        InternetDomainName internetDomainName = InternetDomainName.from(url)\n            .topPrivateDomain();\n        String publicSuffix = internetDomainName.publicSuffix()\n            .toString();\n        String domainName = internetDomainName.toString();\n        return domainName.substring(0, domainName.lastIndexOf(\".\" + publicSuffix));\n    }\n\n    public String getDomainName(String url) {\n        String regex = \"http(s)?://|www\\\\.|/.*\";\n        return url.replaceAll(regex, \"\");\n    }\n}\n", "test_case": "package com.baeldung.domain_name;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass DomainNameClientUnitTest {\n\n    DomainNameClient domainNameClient = new DomainNameClient();\n\n    @Test\n    void givenUrl_whenGetHost_thenReturnSubdomainAndDomainName() {\n        Assertions.assertAll(() -> {\n            assertEquals(\"www.baeldung.com\", domainNameClient.getHost(\"https://www.baeldung.com/domain\"));\n            assertEquals(\"www.google.co.uk\", domainNameClient.getHost(\"https://www.google.co.uk/domain\"));\n            assertEquals(\"jira.baeldung.com\", domainNameClient.getHost(\"https://jira.baeldung.com/secure\"));\n        });\n    }\n\n    @Test\n    void givenUrl_whenGetTopPrivateDomain_thenReturnDomainName() {\n        assertEquals(\"baeldung.com\", domainNameClient.getTopPrivateDomain(\"www.baeldung.com\"));\n    }\n\n    @Test\n    void givenUrlWithPublicSuffix_whenGetTopPrivateDomain_thenReturnDomainName() {\n        assertEquals(\"google.co.uk\", domainNameClient.getTopPrivateDomain(\"www.google.co.uk\"));\n        assertEquals(\"baeldung.blogspot.com\", domainNameClient.getTopPrivateDomain(\"www.baeldung.blogspot.com\"));\n    }\n\n    @Test\n    void givenUrlWithPublicSuffix_whenGetName_thenReturnSecondLevelDomain() {\n        assertEquals(\"baeldung\", domainNameClient.getName(\"jira.baeldung.com\"));\n    }\n\n    @Test\n    void givenUrlWithPublicSuffix_whenGetName_thenReturnThirdLevelDomain() {\n        assertEquals(\"baeldung\", domainNameClient.getName(\"www.baeldung.co.uk\"));\n        assertEquals(\"google\", domainNameClient.getName(\"www.google.co.uk\"));\n    }\n\n    @Test\n    void givenUrl_whenGetDomainNameRegex_thenReturnDomainName() {\n        assertEquals(\"google.com\", domainNameClient.getDomainName(\"www.google.com\"));\n        assertEquals(\"google.co.uk\", domainNameClient.getDomainName(\"www.google.co.uk\"));\n        assertEquals(\"jira.baeldung.com\", domainNameClient.getDomainName(\"jira.baeldung.com\"));\n        assertEquals(\"baeldung.com\", domainNameClient.getDomainName(\"www.baeldung.com/test\"));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.downloadattachments;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Properties;\n\nimport jakarta.mail.Address;\nimport jakarta.mail.Folder;\nimport jakarta.mail.Message;\nimport jakarta.mail.MessagingException;\nimport jakarta.mail.Multipart;\nimport jakarta.mail.NoSuchProviderException;\nimport jakarta.mail.Part;\nimport jakarta.mail.Session;\nimport jakarta.mail.Store;\nimport jakarta.mail.internet.MimeBodyPart;\n\npublic class DownloadEmailAttachments {\n    private String downloadDirectory;\n\n    public void setSaveDirectory(String dir) {\n        this.downloadDirectory = dir;\n    }\n\n    public void downloadEmailAttachments(String host, String port, String userName, String password) throws MessagingException, IOException {\n        Properties properties = setMailServerProperties(host, port);\n        Store store = setSessionStoreProperties(userName, password, properties);\n        Folder inbox = store.getFolder(\"INBOX\");\n        inbox.open(Folder.READ_ONLY);\n        Message[] arrayMessages = inbox.getMessages();\n        for (int i = 0; i < arrayMessages.length; i++) {\n            Message message = arrayMessages[i];\n            Address[] fromAddress = message.getFrom();\n            String from = fromAddress[0].toString();\n            String subject = message.getSubject();\n            String sentDate = message.getSentDate().toString();\n            List<String> attachments = new ArrayList<String>();\n            if (message.getContentType().contains(\"multipart\")) {\n                attachments = downloadAttachments(message);\n            }\n\n            System.out.println(\"Message #\" + (i + 1) + \":\");\n            System.out.println(\" From: \" + from);\n            System.out.println(\" Subject: \" + subject);\n            System.out.println(\" Sent Date: \" + sentDate);\n            System.out.println(\" Attachments: \" + attachments);\n        }\n        inbox.close(false);\n        store.close();\n    }\n\n    public List<String> downloadAttachments(Message message) throws IOException, MessagingException {\n        List<String> downloadedAttachments = new ArrayList<String>();\n        Multipart multiPart = (Multipart) message.getContent();\n        int numberOfParts = multiPart.getCount();\n        for (int partCount = 0; partCount < numberOfParts; partCount++) {\n            MimeBodyPart part = (MimeBodyPart) multiPart.getBodyPart(partCount);\n            if (Part.ATTACHMENT.equalsIgnoreCase(part.getDisposition())) {\n                String file = part.getFileName();\n                part.saveFile(downloadDirectory + File.separator + part.getFileName());\n                downloadedAttachments.add(file);\n            }\n        }\n\n        return downloadedAttachments;\n    }\n\n    public Store setSessionStoreProperties(String userName, String password, Properties properties) throws MessagingException {\n        Session session = Session.getDefaultInstance(properties);\n\n        Store store = session.getStore(\"pop3\");\n        store.connect(userName, password);\n        return store;\n    }\n\n    public Properties setMailServerProperties(String host, String port) {\n        Properties properties = new Properties();\n\n        properties.put(\"mail.pop3.host\", host);\n        properties.put(\"mail.pop3.port\", port);\n\n        properties.setProperty(\"mail.pop3.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\");\n        properties.setProperty(\"mail.pop3.socketFactory.fallback\", \"false\");\n        properties.setProperty(\"mail.pop3.socketFactory.port\", String.valueOf(port));\n        return properties;\n    }\n\n    public static void main(String[] args) {\n        String host = \"pop.gmail.com\";\n        String port = \"995\";\n        String userName = \"your_email\";\n        String password = \"your_password\";\n\n        String saveDirectory = \"valid_folder_path\";\n\n        DownloadEmailAttachments receiver = new DownloadEmailAttachments();\n        receiver.setSaveDirectory(saveDirectory);\n        try {\n            receiver.downloadEmailAttachments(host, port, userName, password);\n        } catch (NoSuchProviderException ex) {\n            System.out.println(\"No provider for pop3.\");\n            ex.printStackTrace();\n        } catch (MessagingException ex) {\n            System.out.println(\"Could not connect to the message store\");\n            ex.printStackTrace();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n}\n", "test_case": "package com.baeldung.downloadattachments;\n\nimport static org.junit.Assert.fail;\nimport org.junit.Test;\n\npublic class DownloadEmailAttachmentsLiveTest {\n    @Test\n    public void when_Run_then_downloadAttachments() {\n\n        String host = \"pop.gmail.com\";\n        String port = \"995\";\n        String userName = \"your_email\";\n        String password = \"your_password\";\n\n        String saveDirectory = \"valid_folder_path\";\n\n        DownloadEmailAttachments receiver = new DownloadEmailAttachments();\n        receiver.setSaveDirectory(saveDirectory);\n        try {\n            receiver.downloadEmailAttachments(host, port, userName, password);\n        } catch (Exception ex) {\n            fail(\"Exception: \" + ex);\n        }\n    }\n}\n"}
{"code_source": "package com.baeldung.ipingivenrange;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\nimport inet.ipaddr.IPAddress;\nimport inet.ipaddr.IPAddressSeqRange;\nimport inet.ipaddr.IPAddressString;\nimport inet.ipaddr.AddressStringException;\n\nimport com.github.jgonian.ipmath.Ipv4;\nimport com.github.jgonian.ipmath.Ipv4Range;\nimport com.github.jgonian.ipmath.Ipv6;\nimport com.github.jgonian.ipmath.Ipv6Range;\nimport com.googlecode.ipv6.IPv6Address;\nimport com.googlecode.ipv6.IPv6AddressRange;\n\npublic class IPWithGivenRangeCheck {\n\n    // using IPAddress library\n    public static boolean checkIPIsInGivenRange(String inputIP, String rangeStartIP, String rangeEndIP) throws AddressStringException {\n        IPAddress startIPAddress = new IPAddressString(rangeStartIP).getAddress();\n        IPAddress endIPAddress = new IPAddressString(rangeEndIP).getAddress();\n        IPAddressSeqRange ipRange = startIPAddress.toSequentialRange(endIPAddress);\n        IPAddress inputIPAddress = new IPAddressString(inputIP).toAddress();\n\n        return ipRange.contains(inputIPAddress);\n    }\n\n    // using Commons IP Math library for IPv4\n    public static boolean checkIPv4IsInRange(String inputIP, String rangeStartIP, String rangeEndIP) {\n        Ipv4 startIPAddress = Ipv4.of(rangeStartIP);\n        Ipv4 endIPAddress = Ipv4.of(rangeEndIP);\n        Ipv4Range ipRange = Ipv4Range.from(startIPAddress)\n            .to(endIPAddress);\n        Ipv4 inputIPAddress = Ipv4.of(inputIP);\n\n        return ipRange.contains(inputIPAddress);\n    }\n\n    // using Commons IP Math library for IPv6\n    public static boolean checkIPv6IsInRange(String inputIP, String rangeStartIP, String rangeEndIP) {\n        Ipv6 startIPAddress = Ipv6.of(rangeStartIP);\n        Ipv6 endIPAddress = Ipv6.of(rangeEndIP);\n        Ipv6Range ipRange = Ipv6Range.from(startIPAddress)\n            .to(endIPAddress);\n        Ipv6 inputIPAddress = Ipv6.of(inputIP);\n\n        return ipRange.contains(inputIPAddress);\n    }\n\n    // checking IP is in range by converting it to an integer\n    public static boolean checkIPv4IsInRangeByConvertingToInt(String inputIP, String rangeStartIP, String rangeEndIP) throws UnknownHostException {\n        long startIPAddress = ipToLongInt(InetAddress.getByName(rangeStartIP));\n        long endIPAddress = ipToLongInt(InetAddress.getByName(rangeEndIP));\n        long inputIPAddress = ipToLongInt(InetAddress.getByName(inputIP));\n\n        return (inputIPAddress >= startIPAddress && inputIPAddress <= endIPAddress);\n    }\n\n    private static long ipToLongInt(InetAddress ipAddress) {\n        long resultIP = 0;\n        byte[] ipAddressOctets = ipAddress.getAddress();\n\n        for (byte octet : ipAddressOctets) {\n            resultIP <<= 8;\n            resultIP |= octet & 0xFF;\n        }\n        return resultIP;\n    }\n\n    // using Java IPv6 library (which internally uses two long integers to store ip address)\n    public static boolean checkIPv6IsInRangeByIPv6library(String inputIP, String rangeStartIP, String rangeEndIP) {\n        IPv6Address startIPAddress = IPv6Address.fromString(rangeStartIP);\n        IPv6Address endIPAddress = IPv6Address.fromString(rangeEndIP);\n        IPv6AddressRange ipRange = IPv6AddressRange.fromFirstAndLast(startIPAddress, endIPAddress);\n        IPv6Address inputIPAddress = IPv6Address.fromString(inputIP);\n\n        return ipRange.contains(inputIPAddress);\n    }\n}\n", "test_case": "package com.baeldung.ipingivenrange;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.ipingivenrange.IPWithGivenRangeCheck;\n\nclass IPWithGivenRangeCheckUnitTest {\n\n    @Test\n    void givenIPv4Addresses_whenIsInRange_thenReturnsTrue() throws Exception {\n        // test for IPAddress library\n        assertTrue(IPWithGivenRangeCheck.checkIPIsInGivenRange(\"192.220.3.0\", \"192.210.0.0\", \"192.255.0.0\"));\n\n        // test for Common IP Math library\n        assertTrue(IPWithGivenRangeCheck.checkIPv4IsInRange(\"192.220.3.0\", \"192.210.0.0\", \"192.255.0.0\"));\n\n        // test for IPv4 by converting it to an integer and checking if it falls under the specified range.\n        assertTrue(IPWithGivenRangeCheck.checkIPv4IsInRangeByConvertingToInt(\"192.220.3.0\", \"192.210.0.0\", \"192.255.0.0\"));\n    }\n\n    @Test\n    void givenIPv4Addresses_whenIsNotInRange_thenReturnsFalse() throws Exception {\n        // test for IPAddress library\n        assertFalse(IPWithGivenRangeCheck.checkIPIsInGivenRange(\"192.200.0.0\", \"192.210.0.0\", \"192.255.0.0\"));\n\n        // test for Common IP Math library\n        assertFalse(IPWithGivenRangeCheck.checkIPv4IsInRange(\"192.200.0.0\", \"192.210.0.0\", \"192.255.0.0\"));\n\n        // test for IPv4 by converting it to an integer and checking if it falls under the specified range.\n        assertFalse(IPWithGivenRangeCheck.checkIPv4IsInRangeByConvertingToInt(\"192.200.0.0\", \"192.210.0.0\", \"192.255.0.0\"));\n    }\n\n    @Test\n    void givenIPv6Addresses_whenIsInRange_thenReturnsTrue() throws Exception {\n        // test for IPAddress library\n        assertTrue(IPWithGivenRangeCheck.checkIPIsInGivenRange(\"2001:db8:85a3::8a03:a:b\", \"2001:db8:85a3::8a00:ff:ffff\", \"2001:db8:85a3::8a2e:370:7334\"));\n\n        // test for Common IP Math library\n        assertTrue(IPWithGivenRangeCheck.checkIPv6IsInRange(\"2001:db8:85a3::8a03:a:b\", \"2001:db8:85a3::8a00:ff:ffff\", \"2001:db8:85a3::8a2e:370:7334\"));\n\n        // test for Java IPv6 library\n        assertTrue(IPWithGivenRangeCheck.checkIPv6IsInRangeByIPv6library(\"fe80::226:2dff:fefa:dcba\", \"fe80::226:2dff:fefa:cd1f\", \"fe80::226:2dff:fefa:ffff\"));\n    }\n\n    @Test\n    void givenIPv6Addresses_whenIsNotInRange_thenReturnsFalse() throws Exception {\n        // test for IPAddress library\n        assertFalse(IPWithGivenRangeCheck.checkIPIsInGivenRange(\"2002:db8:85a3::8a03:a:b\", \"2001:db8:85a3::8a00:ff:ffff\", \"2001:db8:85a3::8a2e:370:7334\"));\n\n        // test for Common IP Math library\n        assertFalse(IPWithGivenRangeCheck.checkIPv6IsInRange(\"2002:db8:85a3::8a03:a:b\", \"2001:db8:85a3::8a00:ff:ffff\", \"2001:db8:85a3::8a2e:370:7334\"));\n\n        // test for Java IPv6 library\n        assertFalse(IPWithGivenRangeCheck.checkIPv6IsInRangeByIPv6library(\"2002:db8:85a3::8a03:a:b\", \"2001:db8:85a3::8a00:ff:ffff\", \"2001:db8:85a3::8a2e:370:7334\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.portscanner;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.ConcurrentLinkedQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class PortScanner {\n    private static final int poolSize = 10;\n    private static final int timeOut = 200;\n\n    public void runPortScan(String ip, int nbrPortMaxToScan) throws IOException {\n        ConcurrentLinkedQueue openPorts = new ConcurrentLinkedQueue<>();\n        ExecutorService executorService = Executors.newFixedThreadPool(poolSize);\n        AtomicInteger port = new AtomicInteger(0);\n        while (port.get() < nbrPortMaxToScan) {\n            final int currentPort = port.getAndIncrement();\n            executorService.submit(() -> {\n                try {\n                    Socket socket = new Socket();\n                    socket.connect(new InetSocketAddress(ip, currentPort), timeOut);\n                    socket.close();\n                    openPorts.add(currentPort);\n                    System.out.println(ip + \" ,port open: \" + currentPort);\n                } catch (IOException e) {\n                    System.err.println(e);\n                }\n            });\n        }\n        executorService.shutdown();\n        try {\n            executorService.awaitTermination(10, TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n\n        List openPortList = new ArrayList<>();\n        System.out.println(\"openPortsQueue: \" + openPorts.size());\n        while (!openPorts.isEmpty()) {\n            openPortList.add(openPorts.poll());\n        }\n        \n        openPortList.forEach(p -> System.out.println(\"port \" + p + \" is open\"));\n    }\n}\n", "test_case": "package com.baeldung.portScanner;\n\nimport com.baeldung.portscanner.PortScanner;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.IOException;\n\nclass PortScannerUnitTest {\n\n    private static final int nbrPortMax = 1000; // Max is 65535, number of available ports\n    private static final String ip = \"127.0.0.1\";\n    PortScanner portScanner = new PortScanner();\n\n    @Test public void when_Run_then_lunchPortScan() throws IOException {\n        portScanner.runPortScan(ip, nbrPortMax);\n    }\n}\n"}
{"code_source": "package com.baeldung.socket;\n\nimport java.io.IOException;\nimport java.net.StandardProtocolFamily;\nimport java.net.UnixDomainSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SocketChannel;\nimport java.nio.file.Path;\n\nclass UnixDomainSocketClient {\n\n    public static void main(String[] args) throws Exception {\n        new UnixDomainSocketClient().runClient();\n    }\n\n    void runClient() throws IOException {\n        Path socketPath = Path.of(System.getProperty(\"user.home\"))\n          .resolve(\"baeldung.socket\");\n        UnixDomainSocketAddress socketAddress = getAddress(socketPath);\n\n        SocketChannel channel = openSocketChannel(socketAddress);\n\n        String message = \"Hello from Baeldung Unix domain socket article\";\n        writeMessage(channel, message);\n    }\n\n    UnixDomainSocketAddress getAddress(Path socketPath) {\n        return UnixDomainSocketAddress.of(socketPath);\n    }\n\n    SocketChannel openSocketChannel(UnixDomainSocketAddress socketAddress) throws IOException {\n        SocketChannel channel = SocketChannel\n          .open(StandardProtocolFamily.UNIX);\n        channel.connect(socketAddress);\n        return channel;\n    }\n\n    void writeMessage(SocketChannel socketChannel, String message) throws IOException {\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        buffer.clear();\n        buffer.put(message.getBytes());\n        buffer.flip();\n\n        while (buffer.hasRemaining()) {\n            socketChannel.write(buffer);\n        }\n    }\n\n}", "test_case": "package com.baeldung.socket;\n\nimport org.junit.Test;\nimport org.mockito.Mockito;\nimport org.mockito.stubbing.Answer;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.StandardProtocolFamily;\nimport java.net.UnixDomainSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.file.Path;\nimport java.util.UUID;\n\nimport static java.nio.file.Files.deleteIfExists;\nimport static org.assertj.core.util.Files.newTemporaryFile;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\npublic class UnixDomainSocketClientUnitTest {\n\n    @Test\n    public void givenSocketPath_shouldCreateUnixDomainSocketAddress() {\n        // given\n        File tempFile = newTemporaryFile();\n        Path socketPath = tempFile.toPath();\n\n        // when\n        UnixDomainSocketAddress address = new UnixDomainSocketClient().getAddress(socketPath);\n\n        // then\n        assertEquals(address.getPath(), socketPath);\n\n        // cleanup\n        tempFile.delete();\n    }\n\n    @Test\n    public void givenUnixDomainSocketAddress_shouldOpenSocketChannel() throws IOException {\n        // given\n        File tempFile = newTemporaryFile();\n        Path socketPath = tempFile.toPath();\n        deleteIfExists(socketPath);\n        UnixDomainSocketAddress address = UnixDomainSocketAddress.of(socketPath);\n\n        // bind address as a unix domain socket\n        ServerSocketChannel serverChannel = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n        serverChannel.bind(address);\n\n        // when\n        SocketChannel socketChannel = new UnixDomainSocketClient().openSocketChannel(address);\n\n        // then\n        assertTrue(socketChannel.isOpen());\n        assertEquals(socketChannel.getRemoteAddress(), address);\n\n        // cleanup\n        tempFile.delete();\n    }\n\n    @Test\n    public void givenSocketChannelAndMessage_shouldWriteMessage() throws IOException {\n        // given\n        SocketChannel socketChannel = Mockito.mock(SocketChannel.class);\n        String message = UUID.randomUUID().toString();\n        Mockito.when(socketChannel.write(Mockito.any(ByteBuffer.class)))\n          .thenAnswer(\n            (Answer<Integer>) invocationOnMock -> {\n              ((ByteBuffer) invocationOnMock.getArguments()[0]).position(message.getBytes().length);\n              return -1;\n            }\n          );\n\n        // when\n        new UnixDomainSocketClient().writeMessage(socketChannel, message);\n\n        // then\n        Mockito.verify(socketChannel, Mockito.times(1)).write(Mockito.any(ByteBuffer.class));\n    }\n}\n"}
{"code_source": "package com.baeldung.socket;\n\nimport java.io.IOException;\nimport java.net.StandardProtocolFamily;\nimport java.net.UnixDomainSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Optional;\n\nclass UnixDomainSocketServer {\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n        new UnixDomainSocketServer().runServer();\n    }\n\n    void runServer() throws IOException, InterruptedException {\n        Path socketPath = Path.of(System.getProperty(\"user.home\"))\n          .resolve(\"baeldung.socket\");\n        Files.deleteIfExists(socketPath);\n        UnixDomainSocketAddress socketAddress = getAddress(socketPath);\n\n        ServerSocketChannel serverChannel = createServerSocketChannel(socketAddress);\n\n        SocketChannel channel = serverChannel.accept();\n\n        while (true) {\n            readSocketMessage(channel)\n              .ifPresent(message -> System.out.printf(\"[Client message] %s%n\", message));\n            Thread.sleep(100);\n        }\n    }\n\n    UnixDomainSocketAddress getAddress(Path socketPath) {\n        return UnixDomainSocketAddress.of(socketPath);\n    }\n\n    ServerSocketChannel createServerSocketChannel(UnixDomainSocketAddress socketAddress) throws IOException {\n        ServerSocketChannel serverChannel = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n        serverChannel.bind(socketAddress);\n        return serverChannel;\n    }\n\n    Optional<String> readSocketMessage(SocketChannel channel) throws IOException {\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        int bytesRead = channel.read(buffer);\n        if (bytesRead < 0) return Optional.empty();\n        byte[] bytes = new byte[bytesRead];\n        buffer.flip();\n        buffer.get(bytes);\n        String message = new String(bytes);\n        return Optional.of(message);\n    }\n\n}", "test_case": "package com.baeldung.socket;\n\nimport org.junit.Test;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.UnixDomainSocketAddress;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.file.Path;\n\nimport static java.nio.file.Files.deleteIfExists;\nimport static org.assertj.core.util.Files.newTemporaryFile;\nimport static org.junit.Assert.assertEquals;\n\npublic class UnixDomainSocketServerUnitTest {\n\n    @Test\n    public void givenSocketPath_shouldCreateUnixDomainSocketAddress() {\n        // given\n        File tempFile = newTemporaryFile();\n        Path socketPath = tempFile.toPath();\n\n        // when\n        UnixDomainSocketAddress address = new UnixDomainSocketServer().getAddress(socketPath);\n\n        // then\n        assertEquals(address.getPath(), socketPath);\n\n        // cleanup\n        tempFile.delete();\n    }\n\n    @Test\n    public void givenUnixDomainSocketAddress_shouldCreateServerSocketChannel() throws IOException {\n        // given\n        File tempFile = newTemporaryFile();\n        Path socketPath = tempFile.toPath();\n        deleteIfExists(socketPath);\n        UnixDomainSocketAddress address = UnixDomainSocketAddress.of(socketPath);\n\n        // when\n        ServerSocketChannel serverSocketChannel = new UnixDomainSocketServer().createServerSocketChannel(address);\n\n        // then\n        assertEquals(serverSocketChannel.getLocalAddress(), address);\n\n        // cleanup\n        tempFile.delete();\n    }\n}\n"}
{"code_source": "package com.baeldung.urlvalidation;\n\nimport com.google.common.net.InetAddresses;\nimport org.apache.commons.validator.routines.InetAddressValidator;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class IPv4Validation {\n\n    public static boolean validateWithApacheCommons(String ip) {\n        InetAddressValidator validator = InetAddressValidator.getInstance();\n        return validator.isValid(ip);\n    }\n\n    public static boolean validateWithGuava(String ip) {\n        return InetAddresses.isInetAddress(ip);\n    }\n\n    public static boolean validateWithRegex(String ip) {\n        String regex = \"^((25[0-5]|(2[0-4]|1\\\\d|[1-9]|)\\\\d)\\\\.?\\\\b){4}$\";\n        Pattern pattern = Pattern.compile(regex);\n        Matcher matcher = pattern.matcher(ip);\n        return matcher.matches();\n    }\n\n}\n", "test_case": "package com.baeldung.ipv4validation;\n\nimport org.junit.Test;\n\nimport static com.baeldung.urlvalidation.IPv4Validation.*;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\npublic class IPv4ValidationUnitTest {\n\n    @Test\n    public void givenValidIPv4_whenValidate_thenReturnsTrue() {\n        String ip = \"192.168.0.1\";\n        assertTrue(validateWithApacheCommons(ip));\n        assertTrue(validateWithGuava(ip));\n        assertTrue(validateWithRegex(ip));\n    }\n\n    @Test\n    public void givenIPv4WithThreeOctets_whenValidate_thenReturnsFalse() {\n        String ip = \"192.168.0\";\n        assertFalse(validateWithApacheCommons(ip));\n        assertFalse(validateWithGuava(ip));\n        assertFalse(validateWithRegex(ip));\n    }\n\n    @Test\n    public void givenIPv4WithLeadingZero_whenValidate_thenReturnsFalse() {\n        String ip = \"192.168.0.01\";\n        assertFalse(validateWithApacheCommons(ip));\n        assertFalse(validateWithGuava(ip));\n        assertFalse(validateWithRegex(ip));\n    }\n\n    @Test\n    public void givenIPv4WithInvalidCharacter_whenValidate_thenReturnsFalse() {\n        String ip = \"a.168.0.01\";\n        assertFalse(validateWithApacheCommons(ip));\n        assertFalse(validateWithGuava(ip));\n        assertFalse(validateWithRegex(ip));\n    }\n\n    @Test\n    public void givenIPv4HaveValueAbove255_whenValidate_thenReturnsFalse() {\n        String ip = \"192.168.256.1\";\n        assertFalse(validateWithApacheCommons(ip));\n        assertFalse(validateWithGuava(ip));\n        assertFalse(validateWithRegex(ip));\n    }\n\n    @Test\n    public void givenValidIPv4WithTwoDigitOctet_whenValidate_thenReturnsTrue() {\n        String ip = \"192.168.42.1\";\n        assertTrue(validateWithApacheCommons(ip));\n        assertTrue(validateWithGuava(ip));\n        assertTrue(validateWithRegex(ip));\n    }\n    @Test\n    public void givenValidIPv4WithNumberInRange200And249_whenValidate_thenReturnsTrue() {\n        String ip = \"192.168.42.222\";\n        assertTrue(validateWithApacheCommons(ip));\n        assertTrue(validateWithGuava(ip));\n        assertTrue(validateWithRegex(ip));\n    }\n\n    @Test\n    public void givenIPv4WithFourDigitOctet_whenValidate_thenReturnsFalse() {\n        String ip = \"1921.168.42.222\";\n        assertFalse(validateWithApacheCommons(ip));\n        assertFalse(validateWithGuava(ip));\n        assertFalse(validateWithRegex(ip));\n    }\n\n    @Test\n    public void givenIPv4WithFiveOctets_whenValidate_thenReturnsFalse() {\n        String ip = \"192.168.42.222.10\";\n        assertFalse(validateWithApacheCommons(ip));\n        assertFalse(validateWithGuava(ip));\n        assertFalse(validateWithRegex(ip));\n    }\n\n    @Test\n    public void givenIPv4WithTwoConsecutiveDots_whenValidate_thenReturnsFalse() {\n        String ip = \"192.168..1\";\n        assertFalse(validateWithApacheCommons(ip));\n        assertFalse(validateWithGuava(ip));\n        assertFalse(validateWithRegex(ip));\n    }\n\n    @Test\n    public void givenOnlyDots_whenValidate_thenReturnsFalse() {\n        String ip = \"...\";\n        assertFalse(validateWithApacheCommons(ip));\n        assertFalse(validateWithGuava(ip));\n        assertFalse(validateWithRegex(ip));\n    }\n\n    @Test\n    public void givenBlankString_whenValidate_thenReturnsFalse() {\n        String ip = \"  \";\n        assertFalse(validateWithApacheCommons(ip));\n        assertFalse(validateWithGuava(ip));\n        assertFalse(validateWithRegex(ip));\n    }\n\n    @Test\n    public void givenIPv4StartWithDot_whenValidate_thenReturnsFalse() {\n        String ip = \".192.168.0.1\";\n        assertFalse(validateWithApacheCommons(ip));\n        assertFalse(validateWithGuava(ip));\n        assertFalse(validateWithRegex(ip));\n    }\n    @Test\n    public void givenIPv4EndWithDot_whenValidate_thenReturnsFalse() {\n        String ip = \"192.168.0.1.\";\n        assertFalse(validateWithApacheCommons(ip));\n        assertFalse(validateWithGuava(ip));\n        assertFalse(validateWithRegex(ip));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.creationdate;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.attribute.BasicFileAttributes;\nimport java.nio.file.attribute.FileTime;\nimport java.time.Instant;\nimport java.util.Optional;\n\npublic class CreationDateResolver {\n\n    public Instant resolveCreationTimeWithBasicAttributes(Path path) {\n        try {\n            final BasicFileAttributes attr = Files.readAttributes(path, BasicFileAttributes.class);\n            final FileTime fileTime = attr.creationTime();\n\n            return fileTime.toInstant();\n        } catch (IOException ex) {\n            throw new RuntimeException(\"An issue occured went wrong when resolving creation time\", ex);\n        }\n    }\n\n    public Optional<Instant> resolveCreationTimeWithAttribute(Path path) {\n        try {\n            final FileTime creationTime = (FileTime) Files.getAttribute(path, \"creationTime\");\n\n            return Optional\n              .ofNullable(creationTime)\n              .map((FileTime::toInstant));\n        } catch (IOException ex) {\n            throw new RuntimeException(\"An issue occured went wrong when resolving creation time\", ex);\n        }\n    }\n}\n", "test_case": "package com.baeldung.creationdate;\n\nimport org.junit.Test;\n\nimport java.io.File;\nimport java.nio.file.Path;\nimport java.time.Instant;\nimport java.util.Optional;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class CreationDateResolverUnitTest {\n\n    private final CreationDateResolver creationDateResolver = new CreationDateResolver();\n\n    @Test\n    public void givenFile_whenGettingCreationDateTimeFromBasicAttributes_thenReturnDate() throws Exception {\n\n        final File file = File.createTempFile(\"createdFile\", \".txt\");\n        final Path path = file.toPath();\n\n        final Instant response = creationDateResolver.resolveCreationTimeWithBasicAttributes(path);\n\n        assertTrue(Instant\n          .now()\n          .isAfter(response));\n\n    }\n\n    @Test\n    public void givenFile_whenGettingCreationDateTimeFromAttribute_thenReturnDate() throws Exception {\n\n        final File file = File.createTempFile(\"createdFile\", \".txt\");\n        final Path path = file.toPath();\n\n        final Optional<Instant> response = creationDateResolver.resolveCreationTimeWithAttribute(path);\n\n        response.ifPresent((value) -> {\n            assertTrue(Instant\n              .now()\n              .isAfter(value));\n        });\n\n    }\n}\n"}
{"code_source": "package com.baeldung.lines;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.LineNumberReader;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.FileChannel.MapMode;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Stream;\n\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.LineIterator;\n\npublic class NumberOfLineFinder {\n\n    public static int getTotalNumberOfLinesUsingBufferedReader(String fileName) {\n        int lines = 0;\n        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {\n            while (reader.readLine() != null) {\n                lines++;\n            }\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n        return lines;\n    }\n\n    public static int getTotalNumberOfLinesUsingLineNumberReader(String fileName) {\n        int lines = 0;\n        try (LineNumberReader reader = new LineNumberReader(new FileReader(fileName))) {\n            reader.skip(Integer.MAX_VALUE);\n            lines = reader.getLineNumber() + 1;\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n        return lines;\n    }\n\n    public static int getTotalNumberOfLinesUsingScanner(String fileName) {\n        int lines = 0;\n        try (Scanner scanner = new Scanner(new FileReader(fileName))) {\n            while (scanner.hasNextLine()) {\n                scanner.nextLine();\n                lines++;\n            }\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n        return lines;\n    }\n\n    public static int getTotalNumberOfLinesUsingNIOFiles(String fileName) {\n        int lines = 0;\n        try (Stream<String> fileStream = Files.lines(Paths.get(fileName))) {\n            lines = (int) fileStream.count();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n        return lines;\n    }\n\n    public static int getTotalNumberOfLinesUsingNIOFilesReadAllLines(String fileName) {\n        int lines = 0;\n        try {\n            List<String> fileStream = Files.readAllLines(Paths.get(fileName));\n            lines = fileStream.size();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n        return lines;\n    }\n\n    public static int getTotalNumberOfLinesUsingNIOFileChannel(String fileName) {\n        int lines = 1;\n        try (FileChannel channel = FileChannel.open(Paths.get(fileName), StandardOpenOption.READ)) {\n            ByteBuffer byteBuffer = channel.map(MapMode.READ_ONLY, 0, channel.size());\n            while (byteBuffer.hasRemaining()) {\n                byte currentChar = byteBuffer.get();\n                if (currentChar == '\\n') {\n                    lines++;\n                }\n            }\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n        return lines;\n    }\n\n    public static int getTotalNumberOfLinesUsingApacheCommonsIO(String fileName) {\n        int lines = 0;\n        try {\n            LineIterator lineIterator = FileUtils.lineIterator(new File(fileName));\n            while (lineIterator.hasNext()) {\n                lineIterator.nextLine();\n                lines++;\n            }\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n        return lines;\n    }\n\n    public static int getTotalNumberOfLinesUsingGoogleGuava(String fileName) {\n        int lines = 0;\n        try {\n            List<String> lineItems = com.google.common.io.Files.readLines(Paths.get(fileName)\n                .toFile(), Charset.defaultCharset());\n            lines = lineItems.size();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n        return lines;\n    }\n\n}\n", "test_case": "package com.baeldung.lines;\n\nimport static com.baeldung.lines.NumberOfLineFinder.getTotalNumberOfLinesUsingApacheCommonsIO;\nimport static com.baeldung.lines.NumberOfLineFinder.getTotalNumberOfLinesUsingBufferedReader;\nimport static com.baeldung.lines.NumberOfLineFinder.getTotalNumberOfLinesUsingGoogleGuava;\nimport static com.baeldung.lines.NumberOfLineFinder.getTotalNumberOfLinesUsingLineNumberReader;\nimport static com.baeldung.lines.NumberOfLineFinder.getTotalNumberOfLinesUsingNIOFileChannel;\nimport static com.baeldung.lines.NumberOfLineFinder.getTotalNumberOfLinesUsingNIOFiles;\nimport static com.baeldung.lines.NumberOfLineFinder.getTotalNumberOfLinesUsingNIOFilesReadAllLines;\nimport static com.baeldung.lines.NumberOfLineFinder.getTotalNumberOfLinesUsingScanner;\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\npublic class NumberOfLineFinderUnitTest {\n    private static final String INPUT_FILE_NAME = \"src/main/resources/input.txt\";\n    private static final int ACTUAL_LINE_COUNT = 45;\n\n    @Test\n    public void whenUsingBufferedReader_thenReturnTotalNumberOfLines() {\n        int lines = getTotalNumberOfLinesUsingBufferedReader(INPUT_FILE_NAME);\n        assertEquals(ACTUAL_LINE_COUNT, lines);\n    }\n\n    @Test\n    public void whenUsingLineNumberReader_thenReturnTotalNumberOfLines() {\n        int lines = getTotalNumberOfLinesUsingLineNumberReader(INPUT_FILE_NAME);\n        assertEquals(ACTUAL_LINE_COUNT, lines);\n    }\n\n    @Test\n    public void whenUsingScanner_thenReturnTotalNumberOfLines() {\n        int lines = getTotalNumberOfLinesUsingScanner(INPUT_FILE_NAME);\n        assertEquals(ACTUAL_LINE_COUNT, lines);\n    }\n\n    @Test\n    public void whenUsingNIOFiles_thenReturnTotalNumberOfLines() {\n        int lines = getTotalNumberOfLinesUsingNIOFiles(INPUT_FILE_NAME);\n        assertEquals(ACTUAL_LINE_COUNT, lines);\n    }\n\n    @Test\n    public void whenUsingNIOFilesReadAllLines_thenReturnTotalNumberOfLines() {\n        int lines = getTotalNumberOfLinesUsingNIOFilesReadAllLines(INPUT_FILE_NAME);\n        assertEquals(ACTUAL_LINE_COUNT, lines);\n    }\n\n    @Test\n    public void whenUsingNIOFileChannel_thenReturnTotalNumberOfLines() {\n        int lines = getTotalNumberOfLinesUsingNIOFileChannel(INPUT_FILE_NAME);\n        assertEquals(ACTUAL_LINE_COUNT, lines);\n    }\n\n    @Test\n    public void whenUsingApacheCommonsIO_thenReturnTotalNumberOfLines() {\n        int lines = getTotalNumberOfLinesUsingApacheCommonsIO(INPUT_FILE_NAME);\n        assertEquals(ACTUAL_LINE_COUNT, lines);\n    }\n\n    @Test\n    public void whenUsingGoogleGuava_thenReturnTotalNumberOfLines() {\n        int lines = getTotalNumberOfLinesUsingGoogleGuava(INPUT_FILE_NAME);\n        assertEquals(ACTUAL_LINE_COUNT, lines);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.lock;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.FileLock;\nimport java.nio.channels.NonReadableChannelException;\nimport java.nio.channels.NonWritableChannelException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class FileLocks {\n\n    private static final Logger LOG = LoggerFactory.getLogger(FileLocks.class);\n\n    // Write locks\n\n    /**\n     * Trying to get an exclusive lock on a read-only FileChannel won't work.\n     */\n    static void getExclusiveLockFromInputStream() throws IOException {\n        Path path = Files.createTempFile(\"foo\", \"txt\");\n        try (FileInputStream fis = new FileInputStream(path.toFile());\n            FileLock lock = fis.getChannel()\n                .lock()) {\n            LOG.debug(\"This won't happen\");\n        } catch (NonWritableChannelException e) {\n            LOG.error(\"The channel obtained through a FileInputStream isn't writable. You can't obtain an exclusive lock on it!\");\n            throw e;\n        }\n    }\n\n    /**\n     * Gets an exclusive lock from a RandomAccessFile. Works because the file is writable.\n     * @param from beginning of the locked region\n     * @param size how many bytes to lock\n     * @return A lock object representing the newly-acquired lock\n     * @throws IOException if there is a problem creating the temporary file\n     */\n    static FileLock getExclusiveLockFromRandomAccessFile(long from, long size) throws IOException {\n        Path path = Files.createTempFile(\"foo\", \"txt\");\n        try (RandomAccessFile file = new RandomAccessFile(path.toFile(), \"rw\");\n            FileLock lock = file.getChannel()\n                .lock(from, size, false)) {\n            if (lock.isValid()) {\n                LOG.debug(\"This is a valid exclusive lock\");\n                return lock;\n            }\n            return null;\n        } catch (Exception e) {\n            LOG.error(e.getMessage());\n        }\n        return null;\n    }\n\n    /**\n     * Acquires an exclusive lock on a file region.\n     * @param from beginning of the locked region\n     * @param size how many bytes to lock\n     * @return A lock object representing the newly-acquired lock\n     * @throws IOException if there is a problem creating the temporary file\n     */\n    static FileLock getExclusiveLockFromFileChannelOpen(long from, long size) throws IOException {\n        Path path = Files.createTempFile(\"foo\", \"txt\");\n        try (FileChannel channel = FileChannel.open(path, StandardOpenOption.APPEND); FileLock lock = channel.lock(from, size, false)) {\n            String text = \"Hello, world.\";\n            ByteBuffer buffer = ByteBuffer.allocate(text.length() + System.lineSeparator()\n                .length());\n            buffer.put((text + System.lineSeparator()).getBytes(StandardCharsets.UTF_8));\n            buffer.flip();\n            while (buffer.hasRemaining()) {\n                channel.write(buffer, channel.size());\n            }\n            \n            return lock;\n        }\n    }\n\n    // Read locks\n\n    /**\n     * Trying to get a shared lock on a write-only FileChannel won't work.\n     */\n    static void getReadLockFromOutputStream() throws IOException {\n        Path path = Files.createTempFile(\"foo\", \"txt\");\n        try (FileOutputStream fis = new FileOutputStream(path.toFile());\n            FileLock lock = fis.getChannel()\n                .lock(0, Long.MAX_VALUE, true)) {\n            LOG.debug(\"This won't happen\");\n        } catch (NonReadableChannelException e) {\n            LOG.error(\"The channel obtained through a FileOutputStream isn't readable. \" + \"You can't obtain an shared lock on it!\");\n            throw e;\n        }\n    }\n\n    /**\n     * Gets a lock from an <tt>InputStream</tt>.\n     * @param from beginning of the locked region\n     * @param size how many bytes to lock\n     * @return A lock object representing the newly-acquired lock\n     * @throws IOException if there is a problem creating the temporary file\n     */\n    static FileLock getReadLockFromInputStream(long from, long size) throws IOException {\n        Path path = Files.createTempFile(\"foo\", \"txt\");\n        try (FileInputStream fis = new FileInputStream(path.toFile());\n            FileLock lock = fis.getChannel()\n                .lock(from, size, true)) {\n            if (lock.isValid()) {\n                LOG.debug(\"This is a valid shared lock\");\n                return lock;\n            }\n            return null;\n        }\n    }\n\n    /**\n     * Gets an exclusive lock from a RandomAccessFile. Works because the file is readable.\n     * @param from beginning of the locked region\n     * @param size how many bytes to lock\n     * @return A lock object representing the newly-acquired lock\n     * @throws IOException if there is a problem creating the temporary file\n     */\n    static FileLock getReadLockFromRandomAccessFile(long from, long size) throws IOException {\n        Path path = Files.createTempFile(\"foo\", \"txt\");\n        try (RandomAccessFile file = new RandomAccessFile(path.toFile(), \"r\"); // could also be \"rw\", but \"r\" is sufficient for reading\n            FileLock lock = file.getChannel()\n                .lock(from, size, true)) {\n            if (lock.isValid()) {\n                LOG.debug(\"This is a valid shared lock\");\n                return lock;\n            }\n        } catch (Exception e) {\n            LOG.error(e.getMessage());\n        }\n        return null;\n    }\n\n}\n", "test_case": "package com.baeldung.lock;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.io.IOException;\nimport java.nio.channels.FileLock;\nimport java.nio.channels.NonReadableChannelException;\nimport java.nio.channels.NonWritableChannelException;\n\nimport org.junit.jupiter.api.Test;\n\nclass FileLocksUnitTest {\n\n    @Test\n    void givenAnInputStream_whenGetWriteLock_thenThrowNonWritableChannelException() {\n        assertThrows(NonWritableChannelException.class, () -> FileLocks.getExclusiveLockFromInputStream());\n    }\n\n    @Test\n    void givenARandomAccessFileWithReadWriteAccess_whenGetWriteLock_thenLock() throws IOException {\n        FileLock lock = FileLocks.getExclusiveLockFromRandomAccessFile(0, 10);\n        assertNotNull(lock);\n        assertFalse(lock.isShared());\n    }\n\n    @Test\n    void givenAPath_whenGetExclusiveLock_thenLock() throws IOException {\n        FileLock lock = FileLocks.getExclusiveLockFromFileChannelOpen(0, 10);\n        assertNotNull(lock);\n        assertFalse(lock.isShared());\n    }\n\n    @Test\n    void givenAFileOutputStream_whenGetSharedLock_thenThrowNonReadableChannelException() {\n        assertThrows(NonReadableChannelException.class, FileLocks::getReadLockFromOutputStream);\n    }\n\n    @Test\n    void givenAnInputStream_whenGetSharedLock_thenLock() throws IOException {\n        FileLock lock = FileLocks.getReadLockFromInputStream(0, 10);\n        assertNotNull(lock);\n        assertTrue(lock.isShared());\n    }\n\n    @Test\n    void givenARandomAccessFile_whenGetSharedLock_thenLock() throws IOException {\n        FileLock lock = FileLocks.getReadLockFromRandomAccessFile(0, 10);\n        assertNotNull(lock);\n        assertTrue(lock.isShared());\n    }\n}\n"}
{"code_source": "package com.baeldung.searchfilesbywildcards;\n\nimport java.io.IOException;\n\nimport java.nio.file.FileSystem;\nimport java.nio.file.FileSystems;\nimport java.nio.file.FileVisitResult;\nimport java.nio.file.FileVisitor;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.PathMatcher;\nimport java.nio.file.SimpleFileVisitor;\nimport java.nio.file.attribute.BasicFileAttributes;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SearchFileByWildcard {\n    public static List<String> matchesList = new ArrayList<String>();\n    public List<String> searchWithWc(Path rootDir, String pattern) throws IOException {\n        matchesList.clear();\n        FileVisitor<Path> matcherVisitor = new SimpleFileVisitor<Path>() {\n            @Override\n            public FileVisitResult visitFile(Path file, BasicFileAttributes attribs) throws IOException {\n                FileSystem fs = FileSystems.getDefault();\n                PathMatcher matcher = fs.getPathMatcher(pattern);\n                Path name = file.getFileName();\n                if (matcher.matches(name)) {\n                    matchesList.add(name.toString());\n                }\n                return FileVisitResult.CONTINUE;\n            }\n        };\n        Files.walkFileTree(rootDir, matcherVisitor);\n        return matchesList;\n    }\n}", "test_case": "package com.baeldung.searchfilesbywildcards;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.IOException;\n\nimport java.nio.file.Paths;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\npublic class SearchFileByWildcardUnitTest {\n    @Test\n    public void whenFourFilenameMatch_thenListOfFour() throws IOException {\n        SearchFileByWildcard sfbw = new SearchFileByWildcard();\n        List<String> actual = sfbw.searchWithWc(Paths.get(\"src/test/resources/sfbw\"), \"glob:*.{txt,docx}\");\n        \n        assertEquals(new HashSet<>(Arrays.asList(\"six.txt\", \"three.txt\", \"two.docx\", \"one.txt\")), new HashSet<>(actual));\n    }\n    @Test\n    public void whenOneFilenameMatch_thenListOfOne() throws IOException {\n        SearchFileByWildcard sfbw = new SearchFileByWildcard();\n        List<String> actual = sfbw.searchWithWc(Paths.get(\"src/test/resources/sfbw\"), \"glob:????.{csv}\");\n        \n        assertEquals(new HashSet<>(Arrays.asList(\"five.csv\")), new HashSet<>(actual));\n    }\n}"}
{"code_source": "package com.baeldung.symlink;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.DirectoryStream;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.stream.IntStream;\n\nimport static java.nio.file.StandardOpenOption.CREATE;\nimport static java.nio.file.StandardOpenOption.TRUNCATE_EXISTING;\n\npublic class SymLinkExample {\n\n    public void createSymbolicLink(Path link, Path target) throws IOException {\n        if (Files.exists(link)) {\n            Files.delete(link);\n        }\n        Files.createSymbolicLink(link, target);\n    }\n\n    public void createHardLink(Path link, Path target) throws IOException {\n        if (Files.exists(link)) {\n            Files.delete(link);\n        }\n        Files.createLink(link, target);\n    }\n\n    public Path createTextFile() throws IOException {\n        byte[] content = IntStream.range(0, 10000)\n            .mapToObj(i -> i + System.lineSeparator())\n            .reduce(\"\", String::concat)\n            .getBytes(StandardCharsets.UTF_8);\n        Path filePath = Paths.get(\".\", \"target_link.txt\");\n        Files.write(filePath, content, CREATE, TRUNCATE_EXISTING);\n        return filePath;\n    }\n\n    public void printLinkFiles(Path path) throws IOException {\n        try (DirectoryStream<Path> stream = Files.newDirectoryStream(path)) {\n            for (Path file : stream) {\n                if (Files.isDirectory(file)) {\n                    printLinkFiles(file);\n                } else if (Files.isSymbolicLink(file)) {\n                    System.out.format(\"File link '%s' with target '%s'%n\", file, Files.readSymbolicLink(file));\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        new SymLinkExample().printLinkFiles(Paths.get(\".\"));\n    }\n\n}\n", "test_case": "package com.baeldung.symlink;\n\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\nimport static org.junit.Assert.*;\n\npublic class SymLinkExampleManualTest {\n\n    @Test\n    public void whenUsingFiles_thenCreateSymbolicLink() throws IOException {\n        SymLinkExample example = new SymLinkExample();\n        Path filePath = example.createTextFile();\n        Path linkPath = Paths.get(\".\", \"symbolic_link.txt\");\n        example.createSymbolicLink(linkPath, filePath);\n        assertTrue(Files.isSymbolicLink(linkPath));\n    }\n\n    @Test\n    public void whenUsingFiles_thenCreateHardLink() throws IOException {\n        SymLinkExample example = new SymLinkExample();\n        Path filePath = example.createTextFile();\n        Path linkPath = Paths.get(\".\", \"hard_link.txt\");\n        example.createHardLink(linkPath, filePath);\n        assertFalse(Files.isSymbolicLink(linkPath));\n        assertEquals(filePath.toFile()\n            .length(),\n            linkPath.toFile()\n                .length());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.maths;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\n\npublic class BigDecimalDemo {\n\n    /** Calculate total amount to be paid for an item rounded to cents..\n     * @param quantity\n     * @param unitPrice\n     * @param discountRate\n     * @param taxRate\n     * @return\n     */\n    public static BigDecimal calculateTotalAmount(BigDecimal quantity,\n        BigDecimal unitPrice, BigDecimal discountRate, BigDecimal taxRate) {\n        BigDecimal amount = quantity.multiply(unitPrice);\n        BigDecimal discount = amount.multiply(discountRate);\n        BigDecimal discountedAmount = amount.subtract(discount);\n        BigDecimal tax = discountedAmount.multiply(taxRate);\n        BigDecimal total = discountedAmount.add(tax);\n\n        // round to 2 decimal places using HALF_EVEN\n        BigDecimal roundedTotal = total.setScale(2, RoundingMode.HALF_EVEN);\n\n        return roundedTotal;\n    }\n\n}\n", "test_case": "package com.baeldung.maths;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotEquals;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.math.MathContext;\nimport java.math.RoundingMode;\nimport java.util.Random;\n\nimport org.junit.jupiter.api.Test;\n\npublic class BigDecimalDemoUnitTest {\n\n    @Test\n    public void whenBigDecimalCreated_thenValueMatches() {\n        BigDecimal bdFromString = new BigDecimal(\"0.1\");\n        BigDecimal bdFromCharArray = new BigDecimal(\n            new char[] { '3', '.', '1', '6', '1', '5' });\n        BigDecimal bdlFromInt = new BigDecimal(42);\n        BigDecimal bdFromLong = new BigDecimal(123412345678901L);\n        BigInteger bigInteger = BigInteger.probablePrime(100, new Random());\n        BigDecimal bdFromBigInteger = new BigDecimal(bigInteger);\n\n        assertEquals(\"0.1\", bdFromString.toString());\n        assertEquals(\"3.1615\", bdFromCharArray.toString());\n        assertEquals(\"42\", bdlFromInt.toString());\n        assertEquals(\"123412345678901\", bdFromLong.toString());\n        assertEquals(bigInteger.toString(), bdFromBigInteger.toString());\n    }\n\n    @Test\n    public void whenBigDecimalCreatedFromDouble_thenValueMayNotMatch() {\n        BigDecimal bdFromDouble = new BigDecimal(0.1d);\n        assertNotEquals(\"0.1\", bdFromDouble.toString());\n    }\n\n    @Test\n    public void whenBigDecimalCreatedUsingValueOf_thenValueMatches() {\n        BigDecimal bdFromLong1 = BigDecimal.valueOf(123412345678901L);\n        BigDecimal bdFromLong2 = BigDecimal.valueOf(123412345678901L, 2);\n        BigDecimal bdFromDouble = BigDecimal.valueOf(0.1d);\n\n        assertEquals(\"123412345678901\", bdFromLong1.toString());\n        assertEquals(\"1234123456789.01\", bdFromLong2.toString());\n        assertEquals(\"0.1\", bdFromDouble.toString());\n    }\n\n    @Test\n    public void whenEqualsCalled_thenSizeAndScaleMatched() {\n        BigDecimal bd1 = new BigDecimal(\"1.0\");\n        BigDecimal bd2 = new BigDecimal(\"1.00\");\n\n        assertFalse(bd1.equals(bd2));\n    }\n\n    @Test\n    public void whenComparingBigDecimals_thenExpectedResult() {\n        BigDecimal bd1 = new BigDecimal(\"1.0\");\n        BigDecimal bd2 = new BigDecimal(\"1.00\");\n        BigDecimal bd3 = new BigDecimal(\"2.0\");\n\n        assertTrue(bd1.compareTo(bd3) < 0);\n        assertTrue(bd3.compareTo(bd1) > 0);\n        assertTrue(bd1.compareTo(bd2) == 0);\n        assertTrue(bd1.compareTo(bd3) <= 0);\n        assertTrue(bd1.compareTo(bd2) >= 0);\n        assertTrue(bd1.compareTo(bd3) != 0);\n    }\n\n    @Test\n    public void whenPerformingArithmetic_thenExpectedResult() {\n        BigDecimal bd1 = new BigDecimal(\"4.0\");\n        BigDecimal bd2 = new BigDecimal(\"2.0\");\n\n        BigDecimal sum = bd1.add(bd2);\n        BigDecimal difference = bd1.subtract(bd2);\n        BigDecimal quotient = bd1.divide(bd2);\n        BigDecimal product = bd1.multiply(bd2);\n\n        assertTrue(sum.compareTo(new BigDecimal(\"6.0\")) == 0);\n        assertTrue(difference.compareTo(new BigDecimal(\"2.0\")) == 0);\n        assertTrue(quotient.compareTo(new BigDecimal(\"2.0\")) == 0);\n        assertTrue(product.compareTo(new BigDecimal(\"8.0\")) == 0);\n    }\n\n    @Test\n    public void whenGettingAttributes_thenExpectedResult() {\n        BigDecimal bd = new BigDecimal(\"-12345.6789\");\n\n        assertEquals(9, bd.precision());\n        assertEquals(4, bd.scale());\n        assertEquals(-1, bd.signum());\n    }\n\n    @Test\n    public void whenRoundingDecimal_thenExpectedResult() {\n        BigDecimal bd = new BigDecimal(\"2.5\");\n        // Round to 1 digit using HALF_EVEN\n        BigDecimal rounded = bd\n            .round(new MathContext(1, RoundingMode.HALF_EVEN));\n\n        assertEquals(\"2\", rounded.toString());\n    }\n\n    @Test\n    public void givenPurchaseTxn_whenCalculatingTotalAmount_thenExpectedResult() {\n        BigDecimal quantity = new BigDecimal(\"4.5\");\n        BigDecimal unitPrice = new BigDecimal(\"2.69\");\n        BigDecimal discountRate = new BigDecimal(\"0.10\");\n        BigDecimal taxRate = new BigDecimal(\"0.0725\");\n\n        BigDecimal amountToBePaid = BigDecimalDemo\n            .calculateTotalAmount(quantity, unitPrice, discountRate, taxRate);\n        assertEquals(\"11.68\", amountToBePaid.toString());\n    }\n}\n"}
{"code_source": "package com.baeldung.maths;\n\nimport java.math.BigDecimal;\n\npublic class FloatingPointArithmetic {\n    public static void main(String[] args) {\n        \n        double a = 13.22;\n        double b = 4.88;\n        double c = 21.45;\n        \n        System.out.println(\"a =         \" + a);\n        System.out.println(\"b =         \" + b);\n        System.out.println(\"c =         \" + c);\n        \n        double sum_ab = a + b;\n        System.out.println(\"a + b =     \" + sum_ab);\n        \n        double abc =  a + b + c;\n        System.out.println(\"a + b + c = \" + abc);\n        \n        double ab_c = sum_ab + c;\n        System.out.println(\"ab + c =    \" + ab_c);\n        \n        double sum_ac = a + c;\n        System.out.println(\"a + c =     \" + sum_ac);\n        \n        double acb = a + c + b;\n        System.out.println(\"a + c + b = \" + acb);\n        \n        double ac_b = sum_ac + b;\n        System.out.println(\"ac + b =    \" + ac_b);\n        \n        double ab = 18.1;\n        double ac = 34.67;\n        double sum_ab_c = ab + c;\n        double sum_ac_b = ac + b;\n        System.out.println(\"ab + c =    \" + sum_ab_c);\n        System.out.println(\"ac + b =    \" + sum_ac_b);\n        \n        BigDecimal d = new BigDecimal(String.valueOf(a));\n        BigDecimal e = new BigDecimal(String.valueOf(b));\n        BigDecimal f = new BigDecimal(String.valueOf(c));\n        \n        BigDecimal def = d.add(e).add(f);\n        BigDecimal dfe = d.add(f).add(e);\n        \n        System.out.println(\"d + e + f = \" + def);\n        System.out.println(\"d + f + e = \" + dfe);\n    }\n}\n", "test_case": "package com.baeldung.maths;\n\nimport java.math.BigDecimal;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class FloatingPointArithmeticUnitTest {\n\n    @Test\n    public void givenDecimalNumbers_whenAddedTogether_thenGetExpectedResult() {\n        double a = 13.22;\n        double b = 4.88;\n        double c = 21.45;\n        double result = 39.55;\n        \n        double abc = a + b + c;\n        double acb = a + c + b;\n        \n        Assert.assertEquals(result, abc, 0);\n        Assert.assertNotEquals(result, acb, 0);\n        \n        double ab = 18.1;\n        double ac = 34.67;\n        \n        double ab_c = ab + c;\n        double ac_b = ac + b;\n        \n        Assert.assertEquals(result, ab_c, 0);\n        Assert.assertNotEquals(result, ac_b, 0);\n        \n        BigDecimal d = new BigDecimal(String.valueOf(a));\n        BigDecimal e = new BigDecimal(String.valueOf(b));\n        BigDecimal f = new BigDecimal(String.valueOf(c));\n        BigDecimal sum = new BigDecimal(\"39.55\");\n        \n        BigDecimal def = d.add(e).add(f);\n        BigDecimal dfe = d.add(f).add(e);\n        \n        Assert.assertEquals(0, def.compareTo(sum));\n        Assert.assertEquals(0, dfe.compareTo(sum));\n        \n        Assert.assertNotEquals(0, sum.compareTo(new BigDecimal(String.valueOf(acb))));\n    }\n}\n"}
{"code_source": "package com.baeldung.maths;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\n\nimport org.apache.commons.math3.util.Precision;\nimport org.decimal4j.util.DoubleRounder;\n\npublic class Round {\n    private static final double PI = 3.1415d;\n    \n    public static void main (String args[]) {\n        System.out.println(\"PI: \" + PI);\n        System.out.printf(\"Value with 3 digits after decimal point %.3f %n\", PI);\n        // OUTPUTS: Value with 3 digits after decimal point 3.142\n        DecimalFormat df = new DecimalFormat(\"###.###\");\n        System.out.println(df.format(PI));\n        System.out.println(round(PI, 3));\n        System.out.println(roundNotPrecise(PI, 3));\n        System.out.println(roundAvoid(PI, 3));\n        System.out.println(Precision.round(PI, 3));\n        System.out.println(DoubleRounder.round(PI, 3));\n    }\n    \n    public static double round(double value, int places) {\n        if (places < 0) throw new IllegalArgumentException();\n        \n        BigDecimal bd = new BigDecimal(Double.toString(value));\n        bd = bd.setScale(places, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n    \n    public static double roundNotPrecise(double value, int places) {\n        if (places < 0) throw new IllegalArgumentException();\n\n        BigDecimal bd = new BigDecimal(value);\n        bd = bd.setScale(places, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n    \n    public static double roundAvoid(double value, int places) {\n        double scale = Math.pow(10, places);\n        double rounded = Math.round(value * scale) / scale;\n        return rounded;\n    }\n}\n", "test_case": "package com.baeldung.maths;\n\nimport org.apache.commons.math3.util.Precision;\nimport org.decimal4j.util.DoubleRounder;\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class RoundUnitTest {\n    private double value = 2.03456d;\n    private int places = 2;\n    private double delta = 0.0d;\n    private double expected = 2.03d;\n\n    @Test\n    public void givenDecimalNumber_whenRoundToNDecimalPlaces_thenGetExpectedResult() {   \n        Assert.assertEquals(expected, Round.round(value, places), delta);\n        Assert.assertEquals(expected, Round.roundNotPrecise(value, places), delta);\n        Assert.assertEquals(expected, Round.roundAvoid(value, places), delta);\n        Assert.assertEquals(expected, Precision.round(value, places), delta);\n        Assert.assertEquals(expected, DoubleRounder.round(value, places), delta);\n        \n        places = 3;\n        expected = 2.035d;\n        \n        Assert.assertEquals(expected, Round.round(value, places), delta);\n        Assert.assertEquals(expected, Round.roundNotPrecise(value, places), delta);\n        Assert.assertEquals(expected, Round.roundAvoid(value, places), delta);\n        Assert.assertEquals(expected, Precision.round(value, places), delta);\n        Assert.assertEquals(expected, DoubleRounder.round(value, places), delta);\n        \n        value = 1000.0d;\n        places = 17;\n        expected = 1000.0d;\n        \n        Assert.assertEquals(expected, Round.round(value, places), delta);\n        Assert.assertEquals(expected, Round.roundNotPrecise(value, places), delta);\n        Assert.assertNotEquals(expected, Round.roundAvoid(value, places), delta); // Returns: 92.23372036854776 !\n        Assert.assertEquals(expected, Precision.round(value, places), delta);\n        Assert.assertEquals(expected, DoubleRounder.round(value, places), delta);\n        \n        value = 256.025d;\n        places = 2;\n        expected = 256.03d;\n        \n        Assert.assertEquals(expected, Round.round(value, places), delta);\n        Assert.assertNotEquals(expected, Round.roundNotPrecise(value, places), delta); // Returns: 256.02 !\n        Assert.assertNotEquals(expected, Round.roundAvoid(value, places), delta); // Returns: 256.02 !\n        Assert.assertEquals(expected, Precision.round(value, places), delta);\n        Assert.assertNotEquals(expected, DoubleRounder.round(value, places), delta); // Returns: 256.02 !\n        \n        value = 260.775d; \n        places = 2;\n        expected = 260.78d;\n        \n        Assert.assertEquals(expected, Round.round(value, places), delta);\n        Assert.assertNotEquals(expected, Round.roundNotPrecise(value, places), delta); // Returns: 260.77 !\n        Assert.assertNotEquals(expected, Round.roundAvoid(value, places), delta); // Returns: 260.77 !\n        Assert.assertEquals(expected, Precision.round(value, places), delta);\n        Assert.assertNotEquals(expected, DoubleRounder.round(value, places), delta); // Returns: 260.77 !\n        \n        value = 90080070060.1d;\n        places = 9;\n        expected = 90080070060.1d;\n        \n        Assert.assertEquals(expected, Round.round(value, places), delta);\n        Assert.assertEquals(expected, Round.roundNotPrecise(value, places), delta);\n        Assert.assertNotEquals(expected, Round.roundAvoid(value, places), delta); // Returns: 9.223372036854776E9 !\n        Assert.assertEquals(expected, Precision.round(value, places), delta);\n        Assert.assertEquals(expected, DoubleRounder.round(value, places), delta);\n    }\n}\n"}
{"code_source": "package com.baeldung.nth.root.calculator;\n\npublic class NthRootCalculator {\n\n    public double calculateWithRound(double base, double n) {\n        return Math.round(calculate(base, n));\n    }\n\n    public double calculate(double base, double n) {\n        return Math.pow(base, 1.0 / n);\n    }\n}\n", "test_case": "package com.baeldung.nth.root.calculator;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class NthRootCalculatorUnitTest {\n\n    private NthRootCalculator nthRootCalculator = new NthRootCalculator();\n\n    @Test\n    public void whenBaseIs125AndNIs3_thenNthIs5() {\n        double nth = nthRootCalculator.calculateWithRound(125,3);\n        assertEquals(5, nth, 0);\n    }\n\n    @Test\n    public void whenBaseIs625AndNIs4_thenNthIs5() {\n        double nth = nthRootCalculator.calculate(625,4);\n        assertEquals(5, nth, 0.00001);\n    }\n}\n"}
{"code_source": "package com.baeldung.numberofdigits;\n\npublic class NumberOfDigits {\n    public int stringBasedSolution(int number) {\n        int length = String.valueOf(number).length();\n        return length;\n    }\n    \n    public int logarithmicApproach(int number) {\n        int length = (int) Math.log10(number) + 1;\n        return length;\n    }\n    \n    public int repeatedMultiplication(int number) {\n        int length = 0;\n        long temp = 1;\n        while(temp <= number) {\n            length++;\n            temp *= 10;\n        }\n        return length;\n    }\n\n    public int shiftOperators(int number) {\n        int length = 0;\n        long temp = 1;\n        while(temp <= number) {\n            length++;\n            temp = (temp << 3) + (temp << 1);\n        }\n        return length;\n    }\n    \n    public int dividingWithPowersOf2(int number) {\n        int length = 1;\n        if (number >= 100000000) {\n            length += 8;\n            number /= 100000000;\n        }\n        if (number >= 10000) {\n            length += 4;\n            number /= 10000;\n        }\n        if (number >= 100) {\n            length += 2;\n            number /= 100;\n        }\n        if (number >= 10) {\n            length += 1;\n        }\n        return length;\n    }\n    \n    public int divideAndConquer(int number) {\n        if (number < 100000){\n            // 5 digits or less\n            if (number < 100){\n                // 1 or 2\n                if (number < 10)\n                    return 1;\n                else\n                    return 2;\n            }else{\n                // 3 to 5 digits\n                if (number < 1000)\n                    return 3;\n                else{\n                    // 4 or 5 digits\n                    if (number < 10000)\n                        return 4;\n                    else\n                        return 5;\n                }\n            }\n        } else {\n            // 6 digits or more\n            if (number < 10000000) {\n                // 6 or 7 digits\n                if (number < 1000000)\n                    return 6;\n                else\n                    return 7;\n            } else {\n                // 8 to 10 digits\n                if (number < 100000000)\n                    return 8;\n                else {\n                    // 9 or 10 digits\n                    if (number < 1000000000)\n                        return 9;\n                    else\n                        return 10;\n                }\n            }\n        }\n    }\n}\n", "test_case": "package com.baeldung.numberofdigits;\n\nimport org.junit.Assert;\nimport org.junit.Assume;\nimport org.junit.experimental.theories.DataPoints;\nimport org.junit.experimental.theories.Theories;\nimport org.junit.experimental.theories.Theory;\nimport org.junit.runner.RunWith;\n\n@RunWith(Theories.class)\npublic class NumberOfDigitsIntegrationTest {\n    \n    private static NumberOfDigits numberOfDigits;\n    \n    static {\n        numberOfDigits = new NumberOfDigits();\n    }\n    \n    @DataPoints\n    public static int[][] lowestIntegers()\n    {\n      return new int[][]{\n          {1, 1}, \n          {2, 10}, \n          {3, 100}, \n          {4, 1000}, \n          {5, 10000}, \n          {6, 100000}, \n          {7, 1000000}, \n          {8, 10000000}, \n          {9, 100000000}, \n          {10, 1000000000}\n      };\n    }\n    \n    @DataPoints\n    public static int[][] highestIntegers()\n    {\n      return new int[][]{\n          {1, 9}, \n          {2, 99}, \n          {3, 999}, \n          {4, 9999}, \n          {5, 99999}, \n          {6, 999999}, \n          {7, 9999999}, \n          {8, 99999999}, \n          {9, 999999999}, \n          {10, Integer.MAX_VALUE}\n      };\n    }\n    \n    @DataPoints\n    public static int[][] randomIntegers()\n    {\n      return new int[][]{\n          {1, 1}, \n          {2, 14}, \n          {3, 549}, \n          {4, 1136}, \n          {5, 25340}, \n          {6, 134321}, \n          {7, 1435432}, \n          {8, 54234129}, \n          {9, 113683912}, \n          {10, 1534031982}\n      };\n    }\n\n    @Theory\n    public void givenDataPoints_whenStringBasedSolutionInvoked_thenAllPointsMatch(final int[] entry) {\n        Assume.assumeTrue(entry[0] > 0 && entry[1] > 0);\n        Assert.assertEquals(entry[0], numberOfDigits.stringBasedSolution(entry[1]));\n    }\n\n    @Theory\n    public void givenDataPoints_whenLogarithmicApproachInvoked_thenAllPointsMatch(final int[] entry) {\n        Assume.assumeTrue(entry[0] > 0 && entry[1] > 0);\n        Assert.assertEquals(entry[0], numberOfDigits.logarithmicApproach(entry[1]));\n    }\n\n    @Theory\n    public void givenDataPoints_whenRepeatedMultiplicationInvoked_thenAllPointsMatch(final int[] entry) {\n        Assume.assumeTrue(entry[0] > 0 && entry[1] > 0);\n        Assert.assertEquals(entry[0], numberOfDigits.repeatedMultiplication(entry[1]));\n    }\n\n    @Theory\n    public void givenDataPoints_whenShiftOperatorsInvoked_thenAllPointsMatch(final int[] entry) {\n        Assume.assumeTrue(entry[0] > 0 && entry[1] > 0);\n        Assert.assertEquals(entry[0], numberOfDigits.shiftOperators(entry[1]));\n    }\n\n    @Theory\n    public void givenDataPoints_whenDividingWithPowersOf2Invoked_thenAllPointsMatch(final int[] entry) {\n        Assume.assumeTrue(entry[0] > 0 && entry[1] > 0);\n        Assert.assertEquals(entry[0], numberOfDigits.dividingWithPowersOf2(entry[1]));\n    }\n\n    @Theory\n    public void givenDataPoints_whenDivideAndConquerInvoked_thenAllPointsMatch(final int[] entry) {\n        Assume.assumeTrue(entry[0] > 0 && entry[1] > 0);\n        Assert.assertEquals(entry[0], numberOfDigits.divideAndConquer(entry[1]));\n    }\n    \n}"}
{"code_source": "package com.baeldung.pairsaddupnumber;\n\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.IntStream;\n\n/**\n * Find all different pairs of numbers in an array that add up to a given sum - Complexity O(n)\n */\npublic class DifferentPairs {\n\n    /**\n     * Show all different pairs using traditional \"for\" loop\n     *\n     * @param input - number's array\n     * @param sum   - given sum\n     * @return - number's array with all existing pairs. This list will contain just one pair's element because\n     * the other one can be calculated with SUM - element_1 = element_2\n     */\n    public static List<Integer> findPairsWithForLoop(int[] input, int sum) {\n        final List<Integer> allDifferentPairs = new ArrayList<>();\n        // Aux. hash map\n        final Map<Integer, Integer> pairs = new HashMap<>();\n        for (int i : input) {\n            if (pairs.containsKey(i)) {\n                if (pairs.get(i) != null) {\n                    // Add pair to returned list\n                    allDifferentPairs.add(i);\n                }\n                // Mark pair as added to prevent duplicates\n                pairs.put(sum - i, null);\n            } else if (!pairs.containsValue(i)) {\n                // Add pair to aux. hash map\n                pairs.put(sum - i, i);\n            }\n        }\n        return allDifferentPairs;\n    }\n\n    /**\n     * Show all different pairs using Java 8 stream API\n     *\n     * @param input - number's array\n     * @param sum   - given sum\n     * @return - number's array with all existing pairs. This list will contain just one pair's element because\n     * the other one can be calculated with SUM - element_1 = element_2\n     */\n    public static List<Integer> findPairsWithStreamApi(int[] input, int sum) {\n        final List<Integer> allDifferentPairs = new ArrayList<>();\n        // Aux. hash map\n        final Map<Integer, Integer> pairs = new HashMap<>();\n        IntStream.range(0, input.length).forEach(i -> {\n                    if (pairs.containsKey(input[i])) {\n                        if (pairs.get(input[i]) != null) {\n                            // Add pair to returned list\n                            allDifferentPairs.add(input[i]);\n                        }\n                        // Mark pair as added to prevent duplicates\n                        pairs.put(sum - input[i], null);\n                    } else if (!pairs.containsValue(input[i])) {\n                        // Add pair to aux. hash map\n                        pairs.put(sum - input[i], input[i]);\n                    }\n                }\n        );\n        return allDifferentPairs;\n    }\n}\n\n", "test_case": "package com.baeldung.pairsaddupnumber;\n\nimport org.junit.Test;\n\nimport java.util.List;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\npublic class DifferentPairsUnitTest {\n\n    /* All different pairs */\n\n    @Test\n    public void whenTraditionalLoop_thenReturnAllDifferentPairs() {\n        /* Data */\n        final int[] input = {2, 4, 3, 3, 8};\n        final int sum = 6;\n        /* Call service */\n        final List<Integer> pairs = DifferentPairs.findPairsWithForLoop(input, sum);\n        /* Check results */\n        assertThat(pairs).hasSize(2).contains(4,3).doesNotContain(8);\n    }\n\n    @Test\n    public void whenStreamApi_thenReturnAllDifferentPairs() {\n        /* Data */\n        final int[] input = {2, 4, 3, 3, 8};\n        final int sum = 6;\n        /* Call service */\n        final List<Integer> pairs = DifferentPairs.findPairsWithStreamApi(input, sum);\n        /* Check results */\n        assertNotNull(pairs);\n        assertEquals(pairs.size(),2);\n        assertEquals(pairs.get(0), new Integer(4));\n        assertThat(pairs).hasSize(2).contains(4,3).doesNotContain(8);\n    }\n}\n"}
{"code_source": "package com.baeldung.pairsaddupnumber;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.IntStream;\n\n/**\n * Find all existing pairs of numbers in an array that add up to a given sum - Complexity O(n^2) \"Brute force\"\n */\npublic class ExistingPairs {\n\n    /**\n     * Show all existing pairs using traditional \"for\" loop\n     *\n     * @param input - number's array\n     * @param sum   - given sum\n     * @return - number's array with all existing pairs. This list will contain just one pair's element because\n     * the other one can be calculated with SUM - element_1 = element_2\n     */\n    public static List<Integer> findPairsWithForLoop(int[] input, int sum) {\n        final List<Integer> allExistingPairs = new ArrayList<>();\n        for (int i = 0; i < input.length; i++) {\n            for (int j = 0; j < input.length; j++) {\n                if (j != i && (input[i] + input[j]) == sum) {\n                    allExistingPairs.add(input[i]);\n                }\n            }\n        }\n        return allExistingPairs;\n    }\n\n    /**\n     * Show all existing pairs using Java 8 stream API\n     *\n     * @param input - number's array\n     * @param sum   - given sum\n     * @return - number's array with all existing pairs. This list will contain just one pair's element because\n     * the other one can be calculated with SUM - element_1 = element_2\n     */\n    public static List<Integer> findPairsWithStreamApi(int[] input, int sum) {\n        final List<Integer> allExistingPairs = new ArrayList<>();\n        IntStream.range(0, input.length).forEach(i ->\n                IntStream.range(0, input.length)\n                        .filter(j -> i != j && input[i] + input[j] == sum)\n                        .forEach(j -> allExistingPairs.add(input[i]))\n        );\n        return allExistingPairs;\n    }\n}\n\n", "test_case": "package com.baeldung.pairsaddupnumber;\n\nimport org.junit.Test;\nimport java.util.List;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n\npublic class ExistingPairsUnitTest {\n\n    /* All existing pairs */\n\n    @Test\n    public void whenTraditionalLoop_thenReturnAllExistingPairs() {\n        /* Data */\n        final int[] input = {2, 4, 3, 3, 8};\n        final int sum = 6;\n        /* Call service */\n        final List<Integer> pairs = ExistingPairs.findPairsWithForLoop(input, sum);\n        /* Check results */\n        assertThat(pairs).hasSize(4).contains(2,4,3,3).doesNotContain(8);\n    }\n\n    @Test\n    public void whenStreamApi_thenReturnAllExistingPairs() {\n        /* Data */\n        final int[] input = {2, 4, 3, 3, 8};\n        final int sum = 6;\n        /* Call service */\n        final List<Integer> pairs = ExistingPairs.findPairsWithStreamApi(input, sum);\n        /* Check results */\n        assertThat(pairs).hasSize(4).contains(2,4,3,3).doesNotContain(8);\n    }\n}\n"}
{"code_source": "package com.baeldung.string;\n\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.NumberFormat;\n\npublic class DoubleToString {\n\n    public static String truncateByCast(double d) {\n        return String.valueOf((int) d);\n    }\n\n    public static String roundWithStringFormat(double d) {\n        return String.format(\"%.0f\", d);\n    }\n\n    public static String truncateWithNumberFormat(double d) {\n        NumberFormat nf = NumberFormat.getInstance();\n        nf.setMaximumFractionDigits(0);\n        nf.setRoundingMode(RoundingMode.FLOOR);\n        return nf.format(d);\n    }\n\n    public static String roundWithNumberFormat(double d) {\n        NumberFormat nf = NumberFormat.getInstance();\n        nf.setMaximumFractionDigits(0);\n        return nf.format(d);\n    }\n\n    public static String truncateWithDecimalFormat(double d) {\n        DecimalFormat df = new DecimalFormat(\"#,###\");\n        df.setRoundingMode(RoundingMode.FLOOR);\n        return df.format(d);\n    }\n\n    public static String roundWithDecimalFormat(double d) {\n        DecimalFormat df = new DecimalFormat(\"#,###\");\n        return df.format(d);\n    }\n\n    \n}\n", "test_case": "package com.baeldung.string;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.Test;\n\npublic class DoubleToStringUnitTest {\n    \n    private static final double DOUBLE_VALUE = 3.56;\n    private static final String TRUNCATED_DOUBLE = \"3\";\n    private static final String ROUNDED_UP_DOUBLE = \"4\";\n    \n    \n    @Test\n    public void truncateByCastTest() {\n        assertThat(DoubleToString.truncateByCast(DOUBLE_VALUE)).isEqualTo(TRUNCATED_DOUBLE);\n    }\n    \n    @Test\n    public void roundingWithStringFormatTest() {\n        assertThat(DoubleToString.roundWithStringFormat(DOUBLE_VALUE)).isEqualTo(ROUNDED_UP_DOUBLE);\n    }\n\n    @Test\n    public void truncateWithNumberFormatTest() {\n        assertThat(DoubleToString.truncateWithNumberFormat(DOUBLE_VALUE)).isEqualTo(TRUNCATED_DOUBLE);\n    }\n    \n    @Test\n    public void roundWithNumberFormatTest() {\n        assertThat(DoubleToString.roundWithNumberFormat(DOUBLE_VALUE)).isEqualTo(ROUNDED_UP_DOUBLE);\n    }\n\n    @Test\n    public void truncateWithDecimalFormatTest() {\n        assertThat(DoubleToString.truncateWithDecimalFormat(DOUBLE_VALUE)).isEqualTo(TRUNCATED_DOUBLE);\n    }\n    \n    @Test\n    public void roundWithDecimalFormatTest() {\n        assertThat(DoubleToString.roundWithDecimalFormat(DOUBLE_VALUE)).isEqualTo(ROUNDED_UP_DOUBLE);\n    }\n\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.primechecker;\n\npublic interface PrimeChecker <T> {\n    \n    public boolean isPrime( T number );\n}\n", "test_case": "package com.baeldung.algorithms.primechecker;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\npublic class PrimeCheckerUnitTest {\n\n    private final BigIntegerPrimeChecker primeChecker = new BigIntegerPrimeChecker();\n\n    @Test\n    public void whenCheckIsPrime_thenTrue() {\n        assertTrue(primeChecker.isPrime(2L));\n        assertTrue(primeChecker.isPrime(13L));\n        assertTrue(primeChecker.isPrime(1009L));\n        assertTrue(primeChecker.isPrime(74207281L));\n    }\n\n    @Test\n    public void whenCheckIsPrime_thenFalse() {\n        assertFalse(primeChecker.isPrime(50L));\n        assertFalse(primeChecker.isPrime(1001L));\n        assertFalse(primeChecker.isPrime(74207282L));\n    }\n\n    private final BruteForcePrimeChecker bfPrimeChecker = new BruteForcePrimeChecker();\n\n    @Test\n    public void whenBFCheckIsPrime_thenTrue() {\n        assertTrue(bfPrimeChecker.isPrime(2));\n        assertTrue(bfPrimeChecker.isPrime(13));\n        assertTrue(bfPrimeChecker.isPrime(1009));\n    }\n\n    @Test\n    public void whenBFCheckIsPrime_thenFalse() {\n        assertFalse(bfPrimeChecker.isPrime(50));\n        assertFalse(bfPrimeChecker.isPrime(1001));\n    }\n\n    private final OptimisedPrimeChecker optimisedPrimeChecker = new OptimisedPrimeChecker();\n\n    @Test\n    public void whenOptCheckIsPrime_thenTrue() {\n        assertTrue(optimisedPrimeChecker.isPrime(2));\n        assertTrue(optimisedPrimeChecker.isPrime(13));\n        assertTrue(optimisedPrimeChecker.isPrime(1009));\n    }\n\n    @Test\n    public void whenOptCheckIsPrime_thenFalse() {\n        assertFalse(optimisedPrimeChecker.isPrime(50));\n        assertFalse(optimisedPrimeChecker.isPrime(1001));\n    }\n\n    private final PrimesPrimeChecker primesPrimeChecker = new PrimesPrimeChecker();\n\n    @Test\n    public void whenPrimesCheckIsPrime_thenTrue() {\n        assertTrue(primesPrimeChecker.isPrime(2));\n        assertTrue(primesPrimeChecker.isPrime(13));\n        assertTrue(primesPrimeChecker.isPrime(1009));\n    }\n\n    @Test\n    public void whenPrimesCheckIsPrime_thenFalse() {\n        assertFalse(primesPrimeChecker.isPrime(50));\n        assertFalse(primesPrimeChecker.isPrime(1001));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.binarynumbers;\n\npublic class BinaryNumbers {\n\n    /**\n     * This method takes a decimal number and convert it into a binary number.\n     * example:- input:10, output:1010\n     *\n     * @param decimalNumber\n     * @return binary number\n     */\n    public Integer convertDecimalToBinary(Integer decimalNumber) {\n\n        if (decimalNumber == 0) {\n            return decimalNumber;\n        }\n\n        StringBuilder binaryNumber = new StringBuilder();\n        Integer quotient = decimalNumber;\n\n        while (quotient > 0) {\n\n            int remainder = quotient % 2;\n            binaryNumber.append(remainder);\n            quotient /= 2;\n        }\n\n        binaryNumber = binaryNumber.reverse();\n        return Integer.valueOf(binaryNumber.toString());\n    }\n\n    /**\n     * This method takes a binary number and convert it into a decimal number.\n     * example:- input:101, output:5\n     *\n     * @param binary number\n     * @return decimal Number\n     */\n    public Integer convertBinaryToDecimal(Integer binaryNumber) {\n\n        Integer decimalNumber = 0;\n        Integer base = 1;\n\n        while (binaryNumber > 0) {\n\n            int lastDigit = binaryNumber % 10;\n            binaryNumber = binaryNumber / 10;\n\n            decimalNumber += lastDigit * base;\n            base = base * 2;\n        }\n        return decimalNumber;\n    }\n\n    /**\n     * This method accepts two binary numbers and returns sum of input numbers.\n     * Example:- firstNum: 101, secondNum: 100, output: 1001\n     *\n     * @param firstNum\n     * @param secondNum\n     * @return addition of input numbers\n     */\n    public Integer addBinaryNumber(Integer firstNum, Integer secondNum) {\n\n        StringBuilder output = new StringBuilder();\n\n        int carry = 0;\n        int temp;\n\n        while (firstNum != 0 || secondNum != 0) {\n\n            temp = (firstNum % 10 + secondNum % 10 + carry) % 2;\n            output.append(temp);\n\n            carry = (firstNum % 10 + secondNum % 10 + carry) / 2;\n\n            firstNum = firstNum / 10;\n            secondNum = secondNum / 10;\n        }\n\n        if (carry != 0) {\n            output.append(carry);\n        }\n\n        return Integer.valueOf(output.reverse()\n            .toString());\n    }\n\n    /**\n    * This method takes two binary number as input and subtract second number from the first number.\n    * example:- firstNum: 1000, secondNum: 11, output: 101\n    * @param firstNum\n    * @param secondNum\n    * @return Result of subtraction of secondNum from first\n    */\n    public Integer substractBinaryNumber(Integer firstNum, Integer secondNum) {\n\n        int onesComplement = Integer.valueOf(getOnesComplement(secondNum));\n        StringBuilder output = new StringBuilder();\n        int carry = 0;\n        int temp;\n\n        while (firstNum != 0 || onesComplement != 0) {\n\n            temp = (firstNum % 10 + onesComplement % 10 + carry) % 2;\n            output.append(temp);\n\n            carry = (firstNum % 10 + onesComplement % 10 + carry) / 2;\n\n            firstNum = firstNum / 10;\n            onesComplement = onesComplement / 10;\n        }\n\n        String additionOfFirstNumAndOnesComplement = output.reverse()\n            .toString();\n\n        if (carry == 1) {\n            return addBinaryNumber(Integer.valueOf(additionOfFirstNumAndOnesComplement), carry);\n        } else {\n            return getOnesComplement(Integer.valueOf(additionOfFirstNumAndOnesComplement));\n        }\n    }\n\n    public Integer getOnesComplement(Integer num) {\n\n        StringBuilder onesComplement = new StringBuilder();\n        while (num > 0) {\n            int lastDigit = num % 10;\n            if (lastDigit == 0) {\n                onesComplement.append(1);\n            } else {\n                onesComplement.append(0);\n            }\n            num = num / 10;\n        }\n        return Integer.valueOf(onesComplement.reverse()\n            .toString());\n    }\n\n}", "test_case": "package com.baeldung.binarynumbers;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\npublic class BinaryNumbersUnitTest {\n\n    private BinaryNumbers binaryNumbers = new BinaryNumbers();\n\n    @Test\n    public void given_decimalNumber_then_returnBinaryNumber() {\n        assertEquals(Integer.valueOf(1000), binaryNumbers.convertDecimalToBinary(8));\n        assertEquals(Integer.valueOf(10100), binaryNumbers.convertDecimalToBinary(20));\n    }\n\n    @Test\n    public void given_decimalNumber_then_convertToBinaryNumber() {\n        assertEquals(\"1000\", Integer.toBinaryString(8));\n        assertEquals(\"10100\", Integer.toBinaryString(20));\n    }\n\n    @Test\n    public void given_binaryNumber_then_ConvertToDecimalNumber() {\n        assertEquals(8, Integer.parseInt(\"1000\", 2));\n        assertEquals(20, Integer.parseInt(\"10100\", 2));\n    }\n\n    @Test\n    public void given_binaryNumber_then_returnDecimalNumber() {\n        assertEquals(Integer.valueOf(8), binaryNumbers.convertBinaryToDecimal(1000));\n        assertEquals(Integer.valueOf(20), binaryNumbers.convertBinaryToDecimal(10100));\n    }\n\n    @Test\n    public void given_twoBinaryNumber_then_returnAddition() {\n        // adding 4 and 10\n        assertEquals(Integer.valueOf(1110), binaryNumbers.addBinaryNumber(100, 1010));\n\n        // adding 26 and 14\n        assertEquals(Integer.valueOf(101000), binaryNumbers.addBinaryNumber(11010, 1110));\n    }\n\n    @Test\n    public void given_twoBinaryNumber_then_returnSubtraction() {\n        // subtracting 16 from 25\n        assertEquals(Integer.valueOf(1001), binaryNumbers.substractBinaryNumber(11001, 10000));\n\n        // subtracting 29 from 16, the output here is negative\n        assertEquals(Integer.valueOf(1101), binaryNumbers.substractBinaryNumber(10000, 11101));\n    }\n\n    @Test\n    public void given_binaryLiteral_thenReturnDecimalValue() {\n\n        byte five = 0b101;\n        assertEquals((byte) 5, five);\n\n        short three = 0b11;\n        assertEquals((short) 3, three);\n\n        int nine = 0B1001;\n        assertEquals(9, nine);\n\n        long twentyNine = 0B11101;\n        assertEquals(29, twentyNine);\n\n        int minusThirtySeven = -0B100101;\n        assertEquals(-37, minusThirtySeven);\n\n    }\n\n}\n"}
{"code_source": "package com.baeldung.lcm;\n\nimport java.math.BigInteger;\n\npublic class BigIntegerLCM {\n\n    public static BigInteger lcm(BigInteger number1, BigInteger number2) {\n        BigInteger gcd = number1.gcd(number2);\n        BigInteger absProduct = number1.multiply(number2).abs();\n        return absProduct.divide(gcd);\n    }\n\n}\n", "test_case": "package com.baeldung.lcm;\n\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.math.BigInteger;\n\npublic class BigIntegerLCMUnitTest {\n\n    @Test\n    public void testLCM() {\n        BigInteger number1 = new BigInteger(\"12\");\n        BigInteger number2 = new BigInteger(\"18\");\n        BigInteger expectedLCM = new BigInteger(\"36\");\n        Assert.assertEquals(expectedLCM, BigIntegerLCM.lcm(number1, number2));\n    }\n}\n"}
{"code_source": "package com.baeldung.lcm;\n\nimport java.util.Arrays;\n\npublic class EuclideanAlgorithm {\n\n    public static int gcd(int number1, int number2) {\n        if (number1 == 0 || number2 == 0) {\n            return number1 + number2;\n        } else {\n            int absNumber1 = Math.abs(number1);\n            int absNumber2 = Math.abs(number2);\n            int biggerValue = Math.max(absNumber1, absNumber2);\n            int smallerValue = Math.min(absNumber1, absNumber2);\n            return gcd(biggerValue % smallerValue, smallerValue);\n        }\n    }\n\n    public static int lcm(int number1, int number2) {\n        if (number1 == 0 || number2 == 0)\n            return 0;\n        else {\n            int gcd = gcd(number1, number2);\n            return Math.abs(number1 * number2) / gcd;\n        }\n    }\n\n    public static int lcmForArray(int[] numbers) {\n        int lcm = numbers[0];\n        for (int i = 1; i <= numbers.length - 1; i++) {\n            lcm = lcm(lcm, numbers[i]);\n        }\n        return lcm;\n    }\n\n    public static int lcmByLambda(int... numbers) {\n        return Arrays.stream(numbers).reduce(1, (lcmSoFar, currentNumber) -> Math.abs(lcmSoFar * currentNumber) / gcd(lcmSoFar, currentNumber));\n    }\n\n}\n", "test_case": "package com.baeldung.lcm;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class EuclideanAlgorithmUnitTest {\n\n    @Test\n    public void testGCD() {\n        Assert.assertEquals(6, EuclideanAlgorithm.gcd(12, 18));\n    }\n\n    @Test\n    public void testLCM() {\n        Assert.assertEquals(36, EuclideanAlgorithm.lcm(12, 18));\n    }\n\n    @Test\n    public void testLCMForArray() {\n        Assert.assertEquals(15, EuclideanAlgorithm.lcmForArray(new int[]{3, 5, 15}));\n    }\n\n    @Test\n    public void testLCMByLambdaForArray() {\n        Assert.assertEquals(15, EuclideanAlgorithm.lcmByLambda(new int[]{3, 5, 15}));\n    }\n}\n"}
{"code_source": "package com.baeldung.lcm;\n\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class PrimeFactorizationAlgorithm {\n\n    public static Map<Integer, Integer> getPrimeFactors(int number) {\n        int absNumber = Math.abs(number);\n        Map<Integer, Integer> primeFactorsMap = new HashMap<Integer, Integer>();\n        for (int factor = 2; factor <= absNumber; factor++) {\n            while (absNumber % factor == 0) {\n                Integer power = primeFactorsMap.get(factor);\n                if (power == null) {\n                    power = 0;\n                }\n                primeFactorsMap.put(factor, power + 1);\n                absNumber /= factor;\n            }\n        }\n        return primeFactorsMap;\n    }\n\n    public static int lcm(int number1, int number2) {\n        if (number1 == 0 || number2 == 0) {\n            return 0;\n        }\n        Map<Integer, Integer> primeFactorsForNum1 = getPrimeFactors(number1);\n        Map<Integer, Integer> primeFactorsForNum2 = getPrimeFactors(number2);\n        Set<Integer> primeFactorsUnionSet = new HashSet<Integer>(primeFactorsForNum1.keySet());\n        primeFactorsUnionSet.addAll(primeFactorsForNum2.keySet());\n        int lcm = 1;\n        for (Integer primeFactor : primeFactorsUnionSet) {\n            lcm *= Math.pow(primeFactor, Math.max(primeFactorsForNum1.getOrDefault(primeFactor, 0),\n                    primeFactorsForNum2.getOrDefault(primeFactor, 0)));\n        }\n        return lcm;\n    }\n\n}\n", "test_case": "package com.baeldung.lcm;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.baeldung.lcm.PrimeFactorizationAlgorithm.*;\n\n\npublic class PrimeFactorizationAlgorithmUnitTest {\n\n    @Test\n    public void testGetPrimeFactors() {\n        Map<Integer, Integer> expectedPrimeFactorsMapForTwelve = new HashMap<>();\n        expectedPrimeFactorsMapForTwelve.put(2, 2);\n        expectedPrimeFactorsMapForTwelve.put(3, 1);\n        Map<Integer, Integer> expectedPrimeFactorsMapForEighteen = new HashMap<>();\n        expectedPrimeFactorsMapForEighteen.put(2, 1);\n        expectedPrimeFactorsMapForEighteen.put(3, 2);\n        Assert.assertEquals(expectedPrimeFactorsMapForTwelve, getPrimeFactors(12));\n        Assert.assertEquals(expectedPrimeFactorsMapForEighteen, getPrimeFactors(18));\n    }\n\n    @Test\n    public void testLCM() {\n        Assert.assertEquals(36, PrimeFactorizationAlgorithm.lcm(12, 18));\n    }\n}\n"}
{"code_source": "package com.baeldung.lcm;\n\npublic class SimpleAlgorithm {\n    public static int lcm(int number1, int number2) {\n        if (number1 == 0 || number2 == 0) {\n            return 0;\n        }\n        int absNumber1 = Math.abs(number1);\n        int absNumber2 = Math.abs(number2);\n        int absHigherNumber = Math.max(absNumber1, absNumber2);\n        int absLowerNumber = Math.min(absNumber1, absNumber2);\n        int lcm = absHigherNumber;\n        while (lcm % absLowerNumber != 0) {\n            lcm += absHigherNumber;\n        }\n        return lcm;\n    }\n}\n", "test_case": "package com.baeldung.lcm;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport static com.baeldung.lcm.SimpleAlgorithm.*;\n\npublic class SimpleAlgorithmUnitTest {\n\n    @Test\n    public void testLCM() {\n        Assert.assertEquals(36, lcm(12, 18));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.prime;\n\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class PrimeGenerator {\n    public static List<Integer> sieveOfEratosthenes(int n) {\n        final boolean prime[] = new boolean[n + 1];\n        Arrays.fill(prime, true);\n\n        for (int p = 2; p * p <= n; p++) {\n            if (prime[p]) {\n                for (int i = p * 2; i <= n; i += p)\n                    prime[i] = false;\n            }\n        }\n\n        final List<Integer> primes = new LinkedList<>();\n        for (int i = 2; i <= n; i++) {\n            if (prime[i])\n                primes.add(i);\n        }\n        return primes;\n    }\n\n    public static List<Integer> primeNumbersBruteForce(int max) {\n        final List<Integer> primeNumbers = new LinkedList<Integer>();\n        for (int i = 2; i <= max; i++) {\n            if (isPrimeBruteForce(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    private static boolean isPrimeBruteForce(int x) {\n        for (int i = 2; i < x; i++) {\n            if (x % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static List<Integer> primeNumbersTill(int max) {\n        return IntStream.rangeClosed(2, max)\n            .filter(x -> isPrime(x))\n            .boxed()\n            .collect(Collectors.toList());\n    }\n\n    private static boolean isPrime(int x) {\n        return IntStream.rangeClosed(2, (int) (Math.sqrt(x)))\n            .allMatch(n -> x % n != 0);\n    }\n}\n", "test_case": "package com.baeldung.prime;\n\nimport org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static com.baeldung.prime.PrimeGenerator.*;\nimport static org.junit.Assert.*;\n\npublic class PrimeGeneratorUnitTest {\n    @Test\n    public void whenBruteForced_returnsSuccessfully() {\n        final List<Integer> primeNumbers = primeNumbersBruteForce(20);\n        assertEquals(Arrays.asList(new Integer[] { 2, 3, 5, 7, 11, 13, 17, 19 }), primeNumbers);\n    }\n\n    @Test\n    public void whenOptimized_returnsSuccessfully() {\n        final List<Integer> primeNumbers = primeNumbersTill(20);\n        assertEquals(Arrays.asList(new Integer[] { 2, 3, 5, 7, 11, 13, 17, 19 }), primeNumbers);\n    }\n\n    @Test\n    public void whenSieveOfEratosthenes_returnsSuccessfully() {\n        final List<Integer> primeNumbers = sieveOfEratosthenes(20);\n        assertEquals(Arrays.asList(new Integer[] { 2, 3, 5, 7, 11, 13, 17, 19 }), primeNumbers);\n    }\n}\n"}
{"code_source": "package com.baeldung.fibonacci;\n\npublic class FibonacciSeriesUtils {\n\n    public static int nthFibonacciTermRecursiveMethod(int n) {\n        if (n == 0 || n == 1) {\n            return n;\n        }\n        return nthFibonacciTermRecursiveMethod(n - 1) + nthFibonacciTermRecursiveMethod(n - 2);\n    }\n\n    public static int nthFibonacciTermIterativeMethod(int n) {\n        if (n == 0 || n == 1) {\n            return n;\n        }\n        int n0 = 0, n1 = 1;\n        int tempNthTerm;\n        for (int i = 2; i <= n; i++) {\n            tempNthTerm = n0 + n1;\n            n0 = n1;\n            n1 = tempNthTerm;\n        }\n        return n1;\n    }\n\n    public static int nthFibonacciTermUsingBinetsFormula(int n) {\n        final double squareRootOf5 = Math.sqrt(5);\n        final double phi = (1 + squareRootOf5)/2;\n        int nthTerm = (int) ((Math.pow(phi, n) - Math.pow(-phi, -n))/squareRootOf5);\n        return nthTerm;\n    }\n}\n", "test_case": "package com.baeldung.fibonacci;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\npublic class FibonacciSeriesUtilsUnitTest {\n\n    @Test\n    public void givenTermToCalculate_thenReturnThatTermUsingRecursion() {\n        int term = 10;\n        int expectedValue = 55;\n        assertEquals(FibonacciSeriesUtils.nthFibonacciTermRecursiveMethod(term), expectedValue);\n    }\n\n    @Test\n    public void givenTermToCalculate_thenReturnThatTermUsingIteration() {\n        int term = 10;\n        int expectedValue = 55;\n        assertEquals(FibonacciSeriesUtils.nthFibonacciTermIterativeMethod(term), expectedValue);\n    }\n\n    @Test\n    public void givenTermToCalculate_thenReturnThatTermUsingBinetsFormula() {\n        int term = 10;\n        int expectedValue = 55;\n        assertEquals(FibonacciSeriesUtils.nthFibonacciTermUsingBinetsFormula(term), expectedValue);\n    }\n}\n"}
{"code_source": "package com.baeldung.formatNumber;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.text.NumberFormat;\nimport java.util.Locale;\n\npublic class FormatNumber {\n    public static double withBigDecimal(double value, int places) {\n        if (places < 0)\n            throw new IllegalArgumentException();\n\n        BigDecimal bigDecimal = new BigDecimal(value);\n        bigDecimal = bigDecimal.setScale(places, RoundingMode.HALF_UP);\n        return bigDecimal.doubleValue();\n    }\n\n    public static double withMathRound(double value, int places) {\n        double scale = Math.pow(10, places);\n        return Math.round(value * scale) / scale;\n    }\n\n    public static double withDecimalFormatPattern(double value, int places) {\n        DecimalFormat df2 = new DecimalFormat(\"#,###,###,##0.00\");\n        DecimalFormat df3 = new DecimalFormat(\"#,###,###,##0.000\");\n        if (places == 2)\n            return new Double(df2.format(value));\n        else if (places == 3)\n            return new Double(df3.format(value));\n        else\n            throw new IllegalArgumentException();\n    }\n\n    public static double withDecimalFormatLocal(double value) {\n        DecimalFormat df = (DecimalFormat) NumberFormat.getNumberInstance(Locale.getDefault());\n        return new Double(df.format(value));\n    }\n\n    public static String withStringFormat(double value, int places) {\n        return String.format(\"%.\" + places + \"f\", value);\n    }\n\n    public static String byPaddingZeros(int value, int paddingLength) {\n        return String.format(\"%0\" + paddingLength + \"d\", value);\n    }\n\n    public static double withTwoDecimalPlaces(double value) {\n        DecimalFormat df = new DecimalFormat(\"#.00\");\n        return new Double(df.format(value));\n    }\n\n    public static String withLargeIntegers(double value) {\n        DecimalFormat df = new DecimalFormat(\"###,###,###\");\n        return df.format(value);\n    }\n\n    public static String forPercentages(double value, Locale localisation) {\n        NumberFormat nf = NumberFormat.getPercentInstance(localisation);\n        return nf.format(value);\n    }\n\n    public static String currencyWithChosenLocalisation(double value, Locale localisation) {\n        NumberFormat nf = NumberFormat.getCurrencyInstance(localisation);\n        return nf.format(value);\n    }\n\n    public static String currencyWithDefaultLocalisation(double value) {\n        NumberFormat nf = NumberFormat.getCurrencyInstance();\n        return nf.format(value);\n    }\n}\n\n", "test_case": "package com.baeldung.formatNumber;\n\nimport org.junit.Test;\n\nimport java.util.Locale;\n\nimport static com.baeldung.formatNumber.FormatNumber.*;\nimport static org.assertj.core.api.Assertions.*;\n\npublic class FormatNumberUnitTest {\n    private static final double D = 4.2352989244d;\n    private static final double F = 8.6994540927d;\n\n    @Test\n    public void givenDecimalNumber_whenFormatNumberWithBigDecimal_thenGetExpectedResult() {\n        assertThat(withBigDecimal(D, 2)).isEqualTo(4.24);\n        assertThat(withBigDecimal(D, 3)).isEqualTo(4.235);\n        assertThat(withBigDecimal(F, 2)).isEqualTo(8.7);\n        assertThat(withBigDecimal(F, 3)).isEqualTo(8.699);\n    }\n\n    @Test\n    public void givenDecimalNumber_whenFormatNumberWithDecimalFormat_thenGetExpectedResult() {\n        assertThat(withDecimalFormatLocal(D)).isEqualTo(4.235);\n        assertThat(withDecimalFormatLocal(F)).isEqualTo(8.699);\n\n        assertThat(withDecimalFormatPattern(D, 2)).isEqualTo(4.24);\n        assertThat(withDecimalFormatPattern(D, 3)).isEqualTo(4.235);\n        assertThat(withDecimalFormatPattern(F, 2)).isEqualTo(8.7);\n        assertThat(withDecimalFormatPattern(F, 3)).isEqualTo(8.699);\n    }\n\n    @Test\n    public void givenDecimalNumber_whenFormatNumberWithStringFormat_thenGetExpectedResult() {\n        assertThat(withStringFormat(D, 2)).isEqualTo(\"4.24\");\n        assertThat(withStringFormat(D, 3)).isEqualTo(\"4.235\");\n        assertThat(withStringFormat(F, 2)).isEqualTo(\"8.70\");\n        assertThat(withStringFormat(F, 3)).isEqualTo(\"8.699\");\n    }\n\n    @Test\n    public void givenDecimalNumber_whenFormatNumberWithMathRound_thenGetExpectedResult() {\n        assertThat(withMathRound(D, 2)).isEqualTo(4.24);\n        assertThat(withMathRound(D, 3)).isEqualTo(4.235);\n        assertThat(withMathRound(F, 2)).isEqualTo(8.7);\n        assertThat(withMathRound(F, 3)).isEqualTo(8.699);\n    }\n\n    @Test\n    public void givenIntegerNumber_whenFormatNumberByPaddingOutZeros_thenGetExpectedResult() {\n        int value = 1;\n        assertThat(byPaddingZeros(value, 3)).isEqualTo(\"001\");\n    }\n\n    @Test\n    public void givenIntegerNumber_whenFormatNumberWithTwoDecimalPlaces_thenGetExpectedResult() {\n        int value = 12;\n        assertThat(withTwoDecimalPlaces(value)).isEqualTo(12.00);\n    }\n\n    @Test\n    public void givenIntegerNumber_whenFormatNumberWithLargeIntegers_thenGetExpectedResult() {\n        int value = 123456789;\n        assertThat(withLargeIntegers(value)).isEqualTo(\"123,456,789\");\n    }\n\n    @Test\n    public void givenDecimalNumber_whenFormatNumberForPercentages_thenGetExpectedResult() {\n        double value = 25f / 100f;\n        assertThat(forPercentages(value, new Locale(\"en\", \"US\"))).isEqualTo(\"25%\");\n        assertThat(forPercentages(value, new Locale(\"pl\", \"PL\"))).isEqualTo(\"25%\");\n    }\n\n    @Test\n    public void givenCurrency_whenFormatNumberCurrencyWithChosenLocalisation_thenGetExpectedResult() {\n        double value = 23_500;\n        assertThat(currencyWithChosenLocalisation(value, new Locale(\"en\", \"US\"))).isEqualTo(\"$23,500.00\");\n        assertThat(currencyWithChosenLocalisation(value, new Locale(\"zh\", \"CN\"))).isEqualTo(\"\uffe523,500.00\");\n        assertThat(currencyWithChosenLocalisation(value, new Locale(\"pl\", \"PL\"))).isEqualTo(\"23\u00a0500 z\u0142\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.integerToBinary;\n\npublic class IntegerToBinary {\n    public static String convertIntegerToBinary(int n) {\n        if(n == 0) {\n            return \"0\";\n        }\n        StringBuilder binaryNumber = new StringBuilder();\n        while (n > 0) {\n            int remainder = n % 2;\n            binaryNumber.append(remainder);\n            n /= 2;\n        }\n        binaryNumber = binaryNumber.reverse();\n        return binaryNumber.toString();\n    }\n}\n", "test_case": "package com.baeldung.integerToBinary;\n\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class IntegerToBinaryUnitTest {\n    @Test\n    public void givenAnInteger_whenConvertToBinary_thenGetBinaryString() {\n        int n = 7;\n        String binaryString = IntegerToBinary.convertIntegerToBinary(n);\n        assertEquals(\"111\", binaryString);\n    }\n\n    @Test\n    public void givenAnInteger_whenToBinaryStringCalled_thenGetBinaryString() {\n        int n = 7;\n        String binaryString = Integer.toBinaryString(n);\n        assertEquals(\"111\", binaryString);\n    }\n\n    @Test\n    public void givenAnInteger_whenToStringCalled_thenGetBinaryString() {\n        int n = 7;\n        String binaryString = Integer.toString(n, 2);\n        assertEquals(\"111\", binaryString);\n    }\n}\n"}
{"code_source": "package com.baeldung.numbersinrange;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class NumbersInARange {\n\n    public List<Integer> getNumbersInRange(int start, int end) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = start; i < end; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public List<Integer> getNumbersUsingIntStreamRange(int start, int end) {\n        return IntStream.range(start, end)\n          .boxed()\n          .collect(Collectors.toList());\n    }\n\n    public List<Integer> getNumbersUsingIntStreamRangeClosed(int start, int end) {\n        return IntStream.rangeClosed(start, end)\n          .boxed()\n          .collect(Collectors.toList());\n    }\n\n    public List<Integer> getNumbersUsingIntStreamIterate(int start, int limit) {\n        return IntStream.iterate(start, i -> i + 1)\n          .limit(limit)\n          .boxed()\n          .collect(Collectors.toList());\n    }\n}\n", "test_case": "package com.baeldung.numbersinrange;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.Test;\n\npublic class NumbersInARangeUnitTest {\n\n    @Test\n    public void givenTheRange1To10_andUsingForLoop_thenExpectCorrectResult() {\n        NumbersInARange numbersInARange = new NumbersInARange();\n        List<Integer> numbers = numbersInARange.getNumbersInRange(1, 10);\n        \n        assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9), numbers);\n    }\n    \n    @Test\n    public void givenTheRange1To10_andUsingIntStreamRange_thenExpectCorrectResult() {\n        NumbersInARange numbersInARange = new NumbersInARange();\n        List<Integer> numbers = numbersInARange.getNumbersUsingIntStreamRange(1, 10);\n        \n        assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9), numbers);\n    }\n    \n    @Test\n    public void givenTheRange1To10_andUsingIntStreamRangeClosed_thenExpectCorrectResult() {\n        NumbersInARange numbersInARange = new NumbersInARange();\n        List<Integer> numbers = numbersInARange.getNumbersUsingIntStreamRangeClosed(1, 10);\n        \n        assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9,10), numbers);\n    }\n    \n    @Test\n    public void givenTheRange1To10_andUsingIntStreamIterate_thenExpectCorrectResult() {\n        NumbersInARange numbersInARange = new NumbersInARange();\n        List<Integer> numbers = numbersInARange.getNumbersUsingIntStreamIterate(1, 10);\n        \n        assertEquals(Arrays.asList(1,2,3,4,5,6,7,8,9,10), numbers);\n    }\n}\n"}
{"code_source": "package com.baeldung.numbersinrange;\n\nimport java.util.Random;\n\npublic class RandomNumbersInARange {\n\n    public int getRandomNumber(int min, int max) {\n        return (int) ((Math.random() * (max - min)) + min);\n    }\n\n    public int getRandomNumberUsingNextInt(int min, int max) {\n        Random random = new Random();\n        return random.nextInt(max - min) + min;\n    }\n\n    public int getRandomNumberUsingInts(int min, int max) {\n        Random random = new Random();\n        return random.ints(min, max)\n          .findFirst()\n          .getAsInt();\n    }\n}\n", "test_case": "package com.baeldung.numbersinrange;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class RandomNumbersInARangeUnitTest {\n\n    @Test\n    public void givenTheRange1To10_andUsingMathRandom_thenExpectCorrectResult() {\n        RandomNumbersInARange randomNumbersInARange = new RandomNumbersInARange();\n        int number = randomNumbersInARange.getRandomNumber(1, 10);\n\n        assertTrue(number >= 1);\n        assertTrue(number < 10);\n    }\n\n    @Test\n    public void givenTheRange1To10_andUsingRandomInts_thenExpectCorrectResult() {\n        RandomNumbersInARange randomNumbersInARange = new RandomNumbersInARange();\n        int number = randomNumbersInARange.getRandomNumberUsingInts(1, 10);\n\n        assertTrue(number >= 1);\n        assertTrue(number < 10);\n    }\n\n    @Test\n    public void givenTheRange1To10_andUsingRandomNextInt_thenExpectCorrectResult() {\n        RandomNumbersInARange randomNumbersInARange = new RandomNumbersInARange();\n        int number = randomNumbersInARange.getRandomNumberUsingNextInt(1, 10);\n\n        assertTrue(number >= 1);\n        assertTrue(number < 10);\n    }\n}\n"}
{"code_source": "package com.baeldung.randomnumbers;\n\nimport java.security.SecureRandom;\nimport java.util.Random;\nimport java.util.SplittableRandom;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.stream.IntStream;\n\nimport org.apache.commons.math3.random.RandomDataGenerator;\n\nimport it.unimi.dsi.util.XoRoShiRo128PlusRandom;\n\npublic class RandomNumbersGenerator {\n\n    public Integer generateRandomWithMathRandom(int max, int min) {\n        return (int) ((Math.random() * (max - min)) + min);\n    }\n\n    public Integer generateRandomWithNextInt() {\n        Random random = new Random();\n        int randomWithNextInt = random.nextInt();\n        return randomWithNextInt;\n    }\n\n    public Integer generateRandomWithNextIntWithinARange(int min, int max) {\n        Random random = new Random();\n        int randomWintNextIntWithinARange = random.nextInt(max - min) + min;\n        return randomWintNextIntWithinARange;\n    }\n\n    public IntStream generateRandomUnlimitedIntStream() {\n        Random random = new Random();\n        IntStream unlimitedIntStream = random.ints();\n        return unlimitedIntStream;\n    }\n\n    public IntStream generateRandomLimitedIntStream(long streamSize) {\n        Random random = new Random();\n        IntStream limitedIntStream = random.ints(streamSize);\n        return limitedIntStream;\n    }\n\n    public IntStream generateRandomLimitedIntStreamWithinARange(int min, int max, long streamSize) {\n        Random random = new Random();\n        IntStream limitedIntStreamWithinARange = random.ints(streamSize, min, max);\n        return limitedIntStreamWithinARange;\n    }\n\n    public Integer generateRandomWithThreadLocalRandom() {\n        int randomWithThreadLocalRandom = ThreadLocalRandom.current()\n            .nextInt();\n        return randomWithThreadLocalRandom;\n    }\n\n    public Integer generateRandomWithThreadLocalRandomInARange(int min, int max) {\n        int randomWithThreadLocalRandomInARange = ThreadLocalRandom.current()\n            .nextInt(min, max);\n        return randomWithThreadLocalRandomInARange;\n    }\n\n    public Integer generateRandomWithThreadLocalRandomFromZero(int max) {\n        int randomWithThreadLocalRandomFromZero = ThreadLocalRandom.current()\n            .nextInt(max);\n        return randomWithThreadLocalRandomFromZero;\n    }\n\n    public Integer generateRandomWithSplittableRandom(int min, int max) {\n        SplittableRandom splittableRandom = new SplittableRandom();\n        int randomWithSplittableRandom = splittableRandom.nextInt(min, max);\n        return randomWithSplittableRandom;\n    }\n\n    public IntStream generateRandomWithSplittableRandomLimitedIntStreamWithinARange(int min, int max, long streamSize) {\n        SplittableRandom splittableRandom = new SplittableRandom();\n        IntStream limitedIntStreamWithinARangeWithSplittableRandom = splittableRandom.ints(streamSize, min, max);\n        return limitedIntStreamWithinARangeWithSplittableRandom;\n    }\n\n    public Integer generateRandomWithSecureRandom() {\n        SecureRandom secureRandom = new SecureRandom();\n        int randomWithSecureRandom = secureRandom.nextInt();\n        return randomWithSecureRandom;\n    }\n\n    public Integer generateRandomWithSecureRandomWithinARange(int min, int max) {\n        SecureRandom secureRandom = new SecureRandom();\n        int randomWithSecureRandomWithinARange = secureRandom.nextInt(max - min) + min;\n        return randomWithSecureRandomWithinARange;\n    }\n\n    public Integer generateRandomWithRandomDataGenerator(int min, int max) {\n        RandomDataGenerator randomDataGenerator = new RandomDataGenerator();\n        int randomWithRandomDataGenerator = randomDataGenerator.nextInt(min, max);\n        return randomWithRandomDataGenerator;\n    }\n\n    public Integer generateRandomWithXoRoShiRo128PlusRandom(int min, int max) {\n        XoRoShiRo128PlusRandom xoroRandom = new XoRoShiRo128PlusRandom();\n        int randomWithXoRoShiRo128PlusRandom = xoroRandom.nextInt(max - min) + min;\n        return randomWithXoRoShiRo128PlusRandom;\n    }\n\n}\n", "test_case": "package com.baeldung.randomnumbers;\n\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.stream.IntStream;\n\nimport org.junit.Test;\n\npublic class RandomNumbersGeneratorUnitTest {\n\n    private static final int MIN_RANGE = 1;\n    private static final int MAX_RANGE = 10;\n    private static final int MIN_RANGE_NEGATIVE = -10;    \n    private static final int ITERATIONS = 50;\n    private static final long STREAM_SIZE = 50;\n\n    @Test\n    public void whenGenerateRandomWithMathRandom_returnsSuccessfully() {\n        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n        for (int i = 0; i < ITERATIONS; i++) {\n            int randomNumer = generator.generateRandomWithMathRandom(MIN_RANGE, MAX_RANGE);\n            assertTrue(isInRange(randomNumer, MIN_RANGE, MAX_RANGE));\n        }\n    }\n\n    @Test\n    public void whenGenerateRandomWithNextInt_returnsSuccessfully() {\n        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n        for (int i = 0; i < ITERATIONS; i++) {\n            int randomNumber = generator.generateRandomWithNextInt();\n            assertTrue(isInRange(randomNumber, Integer.MIN_VALUE, Integer.MAX_VALUE));\n        }\n    }\n\n    @Test\n    public void whenGenerateRandomWithNextIntWithinARange_returnsSuccessfully() {\n        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n        for (int i = 0; i < ITERATIONS; i++) {\n            int randomNumber = generator.generateRandomWithNextIntWithinARange(MIN_RANGE, MAX_RANGE);\n            assertTrue(isInRange(randomNumber, MIN_RANGE, MAX_RANGE));\n        }\n    }\n\n    @Test\n    public void whenGenerateRandomUnlimitedIntStream_returnsSuccessfully() {\n        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n        IntStream stream = generator.generateRandomUnlimitedIntStream();\n        assertNotNull(stream);\n        Integer randomNumber = stream.findFirst()\n            .getAsInt();\n        assertNotNull(randomNumber);\n        assertTrue(isInRange(randomNumber, Integer.MIN_VALUE, Integer.MAX_VALUE));\n    }\n\n    @Test\n    public void whenGenerateRandomLimitedIntStream_returnsSuccessfully() {\n        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n        generator.generateRandomLimitedIntStream(STREAM_SIZE)\n            .forEach(randomNumber -> assertTrue(isInRange(randomNumber, Integer.MIN_VALUE, Integer.MAX_VALUE)));\n    }\n\n    @Test\n    public void whenGenerateRandomLimitedIntStreamWithinARange_returnsSuccessfully() {\n        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n        generator.generateRandomLimitedIntStreamWithinARange(MIN_RANGE, MAX_RANGE, STREAM_SIZE)\n            .forEach(randomNumber -> assertTrue(isInRange(randomNumber, MIN_RANGE, MAX_RANGE)));\n    }\n\n    @Test\n    public void whenGenerateRandomWithThreadLocalRandom_returnsSuccessfully() {\n        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n        for (int i = 0; i < ITERATIONS; i++) {\n            int randomNumber = generator.generateRandomWithThreadLocalRandom();\n            assertTrue(isInRange(randomNumber, Integer.MIN_VALUE, Integer.MAX_VALUE));\n        }\n    }\n\n    @Test\n    public void whenGenerateRandomWithThreadLocalRandomInARange_returnsSuccessfully() {\n        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n        for (int i = 0; i < ITERATIONS; i++) {\n            int randomNumber = generator.generateRandomWithThreadLocalRandomInARange(MIN_RANGE, MAX_RANGE);\n            assertTrue(isInRange(randomNumber, MIN_RANGE, MAX_RANGE));\n        }\n    }\n\n    @Test\n    public void whenGenerateRandomWithThreadLocalRandomFromZero_returnsSuccessfully() {\n        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n        for (int i = 0; i < ITERATIONS; i++) {\n            int randomNumber = generator.generateRandomWithThreadLocalRandomFromZero(MAX_RANGE);\n            assertTrue(isInRange(randomNumber, 0, MAX_RANGE));\n        }\n    }\n\n    @Test\n    public void whenGenerateRandomWithSplittableRandom_returnsSuccessfully() {\n        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n        for (int i = 0; i < ITERATIONS; i++) {\n            int randomNumber = generator.generateRandomWithSplittableRandom(MIN_RANGE_NEGATIVE, MAX_RANGE);\n            assertTrue(isInRange(randomNumber, MIN_RANGE_NEGATIVE, MAX_RANGE));\n        }\n    }\n    \n    @Test\n    public void whenGenerateRandomWithSplittableRandomLimitedIntStreamWithinARange_returnsSuccessfully() {\n        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n        generator.generateRandomWithSplittableRandomLimitedIntStreamWithinARange(MIN_RANGE, MAX_RANGE, STREAM_SIZE)\n            .forEach(randomNumber -> assertTrue(isInRange(randomNumber, MIN_RANGE, MAX_RANGE)));\n    }        \n\n    @Test\n    public void whenGenerateRandomWithSecureRandom_returnsSuccessfully() {\n        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n        for (int i = 0; i < ITERATIONS; i++) {\n            int randomNumber = generator.generateRandomWithSecureRandom();\n            assertTrue(isInRange(randomNumber, Integer.MIN_VALUE, Integer.MAX_VALUE));\n        }\n    }\n    \n    @Test\n    public void whenGenerateRandomWithSecureRandomWithinARange_returnsSuccessfully() {\n        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n        for (int i = 0; i < ITERATIONS; i++) {\n            int randomNumber = generator.generateRandomWithSecureRandomWithinARange(MIN_RANGE, MAX_RANGE);\n            assertTrue(isInRange(randomNumber, MIN_RANGE, MAX_RANGE));\n        }\n    }\n\n    @Test\n    public void whenGenerateRandomWithRandomDataGenerator_returnsSuccessfully() {\n        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n        for (int i = 0; i < ITERATIONS; i++) {\n            int randomNumber = generator.generateRandomWithRandomDataGenerator(MIN_RANGE, MAX_RANGE);\n            // RandomDataGenerator top is inclusive\n            assertTrue(isInRange(randomNumber, MIN_RANGE, MAX_RANGE + 1));\n        }\n    }\n\n    @Test\n    public void whenGenerateRandomWithXoRoShiRo128PlusRandom_returnsSuccessfully() {\n        RandomNumbersGenerator generator = new RandomNumbersGenerator();\n        for (int i = 0; i < ITERATIONS; i++) {\n            int randomNumber = generator.generateRandomWithXoRoShiRo128PlusRandom(MIN_RANGE, MAX_RANGE);\n            assertTrue(isInRange(randomNumber, MIN_RANGE, MAX_RANGE));\n        }\n    }\n\n    private boolean isInRange(int number, int min, int max) {\n        return min <= number && number < max;\n    }\n\n}\n"}
{"code_source": "package com.baeldung.automorphicnumber;\n\npublic class AutomorphicNumber {\n\n    public static void main(String[] args) {\n        System.out.println(isAutomorphicUsingLoop(76));\n        System.out.println(isAutomorphicUsingMath(76));\n    }\n\n    public static boolean isAutomorphicUsingMath(int number) {\n        int square = number * number;\n\n        int numberOfDigits = (int) Math.floor(Math.log10(number) + 1);\n        int lastDigits = (int) (square % (Math.pow(10, numberOfDigits)));\n\n        return number == lastDigits;\n    }\n\n    public static boolean isAutomorphicUsingLoop(int number) {\n        int square = number * number;\n\n        while (number > 0) {\n            if (number % 10 != square % 10) {\n                return false;\n            }\n            number /= 10;\n            square /= 10;\n        }\n        return true;\n    }\n}", "test_case": "package com.baeldung.automorphicnumber;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\npublic class AutomorphicNumberUnitTest {\n\n    @Test\n    void givenANumber_whenPassed_thenShouldDetermineAutomorphicOrNot() {\n        int number1 = 76; // automorphic\n        int number2 = 16; // not automorphic \n        assertTrue(AutomorphicNumber.isAutomorphicUsingLoop(number1));\n        assertFalse(AutomorphicNumber.isAutomorphicUsingLoop(number2));\n        assertTrue(AutomorphicNumber.isAutomorphicUsingMath(number1));\n        assertFalse(AutomorphicNumber.isAutomorphicUsingMath(number2));\n    }\n}\n"}
{"code_source": "package com.baeldung.booleantoint;\n\nimport org.apache.commons.lang3.BooleanUtils;\n\npublic class BooleanToInt {\n    public static int booleanPrimitiveToInt(boolean foo) {\n        int bar = 0;\n        if (foo) {\n            bar = 1;\n        }\n        return bar;\n    }\n\n    public static int booleanPrimitiveToIntTernary(boolean foo) {\n        return (foo) ? 1 : 0;\n    }\n\n    public static int booleanObjectToInt(boolean foo) {\n        return Boolean.compare(foo, false);\n    }\n\n    public static int booleanObjectToIntInverse(boolean foo) {\n        return Boolean.compare(foo, true) + 1;\n    }\n\n    public static int booleanObjectMethodToInt(Boolean foo) {\n        return foo.compareTo(false);\n    }\n\n    public static int booleanObjectMethodToIntInverse(Boolean foo) {\n        return foo.compareTo(true) + 1;\n    }\n\n    public static int booleanUtilsToInt(Boolean foo) {\n        return BooleanUtils.toInteger(foo);\n    }\n\n    public static int bitwiseBooleanToInt(Boolean foo) {\n        return (Boolean.hashCode(foo) >> 1) & 1;\n    }\n}\n\n", "test_case": "package com.baeldung.booleantoint;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class BooleanToIntUnitTest {\n    @Test\n    void givenBooleanPrimitiveValue_ThenReturnInt() {\n        assertEquals(1, BooleanToInt.booleanPrimitiveToInt(true));\n        assertEquals(0, BooleanToInt.booleanPrimitiveToInt(false));\n    }\n\n    @Test\n    void givenBooleanPrimitiveValue_ThenReturnIntTernary() {\n        assertEquals(1, BooleanToInt.booleanPrimitiveToIntTernary(true));\n        assertEquals(0, BooleanToInt.booleanPrimitiveToIntTernary(false));\n    }\n\n    @Test\n    void givenBooleanObject_ThenReturnInt() {\n        assertEquals(0, BooleanToInt.booleanObjectToInt(false));\n        assertEquals(1, BooleanToInt.booleanObjectToInt(true));\n    }\n\n    @Test\n    void givenBooleanObject_ThenReturnIntInverse() {\n        assertEquals(0, BooleanToInt.booleanObjectToIntInverse(false));\n        assertEquals(1, BooleanToInt.booleanObjectToIntInverse(true));\n    }\n\n    @Test\n    void givenBooleanObject_ThenReturnIntUsingClassMethod() {\n        assertEquals(0, BooleanToInt.booleanObjectMethodToInt(false));\n        assertEquals(1, BooleanToInt.booleanObjectMethodToInt(true));\n    }\n\n    @Test\n    void givenBooleanObject_ThenReturnIntUsingClassMethodInverse() {\n        assertEquals(0, BooleanToInt.booleanObjectMethodToIntInverse(false));\n        assertEquals(1, BooleanToInt.booleanObjectMethodToIntInverse(true));\n    }\n\n    @Test\n    void givenBoolean_ThenReturnIntUsingBooleanUtils() {\n        assertEquals(0, BooleanToInt.booleanUtilsToInt(false));\n        assertEquals(1, BooleanToInt.booleanUtilsToInt(true));\n    }\n\n    @Test\n    void givenBoolean_ThenReturnIntUsingBitwiseOperators() {\n        assertEquals(0, BooleanToInt.bitwiseBooleanToInt(false));\n        assertEquals(1, BooleanToInt.bitwiseBooleanToInt(true));\n    }\n}\n"}
{"code_source": "package com.baeldung.convertLongToInt;\n\nimport java.math.BigDecimal;\nimport java.util.Optional;\nimport java.util.function.Function;\n\nimport com.google.common.primitives.Ints;\n\npublic class ConvertLongToInt {\n\n    static Function<Long, Integer> convert = val -> Optional.ofNullable(val)\n        .map(Long::intValue)\n        .orElse(null);\n\n    public static int longToIntCast(long number) {\n        return (int) number;\n    }\n\n    public static int longToIntJavaWithMath(long number) {\n        return Math.toIntExact(number);\n    }\n\n    public static int longToIntJavaWithLambda(long number) {\n        return convert.apply(number);\n    }\n\n    public static int longToIntBoxingValues(long number) {\n        return Long.valueOf(number)\n            .intValue();\n    }\n\n    public static int longToIntGuava(long number) {\n        return Ints.checkedCast(number);\n    }\n\n    public static int longToIntGuavaSaturated(long number) {\n        return Ints.saturatedCast(number);\n    }\n\n    public static int longToIntWithBigDecimal(long number) {\n        return new BigDecimal(number).intValueExact();\n    }\n\n}\n", "test_case": "package com.baeldung.convertLongToInt;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass ConvertLongToIntUnitTest {\n\n    @Test\n    void longToInt() {\n        long number = 186762L;\n        int expected = 186762;\n\n        assertEquals(expected, ConvertLongToInt.longToIntCast(number));\n        assertEquals(expected, ConvertLongToInt.longToIntJavaWithMath(number));\n        assertEquals(expected, ConvertLongToInt.longToIntJavaWithLambda(number));\n        assertEquals(expected, ConvertLongToInt.longToIntBoxingValues(number));\n        assertEquals(expected, ConvertLongToInt.longToIntGuava(number));\n        assertEquals(expected, ConvertLongToInt.longToIntGuavaSaturated(number));\n        assertEquals(expected, ConvertLongToInt.longToIntWithBigDecimal(number));\n    }\n\n}"}
{"code_source": "package com.baeldung.humanreadablebytes;\n\nimport java.text.DecimalFormat;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class FileSizeFormatUtil {\n    private static final long BYTE = 1L;\n    private static final long KiB = BYTE << 10;\n    private static final long MiB = KiB << 10;\n    private static final long GiB = MiB << 10;\n    private static final long TiB = GiB << 10;\n    private static final long PiB = TiB << 10;\n    private static final long EiB = PiB << 10;\n    \n    private static final long KB = BYTE * 1000;\n    private static final long MB = KB * 1000;\n    private static final long GB = MB * 1000;\n    private static final long TB = GB * 1000;\n    private static final long PB = TB * 1000;\n    private static final long EB = PB * 1000;\n    \n    private static final DecimalFormat DEC_FORMAT = new DecimalFormat(\"#.##\");\n\n    public static String toHumanReadableBinaryPrefixes(long size) {\n        if (size < 0)\n            throw new IllegalArgumentException(\"Invalid file size: \" + size);\n        if (size >= EiB) return formatSize(size, EiB, \"EiB\");\n        if (size >= PiB) return formatSize(size, PiB, \"PiB\");\n        if (size >= TiB) return formatSize(size, TiB, \"TiB\");\n        if (size >= GiB) return formatSize(size, GiB, \"GiB\");\n        if (size >= MiB) return formatSize(size, MiB, \"MiB\");\n        if (size >= KiB) return formatSize(size, KiB, \"KiB\");\n        return formatSize(size, BYTE, \"Bytes\");\n    }\n\n    public static String toHumanReadableSIPrefixes(long size) {\n        if (size < 0)\n            throw new IllegalArgumentException(\"Invalid file size: \" + size);\n        if (size >= EB) return formatSize(size, EB, \"EB\");\n        if (size >= PB) return formatSize(size, PB, \"PB\");\n        if (size >= TB) return formatSize(size, TB, \"TB\");\n        if (size >= GB) return formatSize(size, GB, \"GB\");\n        if (size >= MB) return formatSize(size, MB, \"MB\");\n        if (size >= KB) return formatSize(size, KB, \"KB\");\n        return formatSize(size, BYTE, \"Bytes\");\n    }\n    \n    private static String formatSize(long size, long divider, String unitName) {\n        return DEC_FORMAT.format((double) size / divider) + \" \" + unitName;\n    }\n\n    public static String toHumanReadableBinaryPrefixesWithEnum(long size) {\n        final List<SizeUnitBinaryPrefixes> units = SizeUnitBinaryPrefixes.unitsInDescending();\n        if (size < 0)\n            throw new IllegalArgumentException(\"Invalid file size: \" + size);\n        String result = null;\n        for (SizeUnitBinaryPrefixes unit : units) {\n            if (size >= unit.getUnitBase()) {\n                result = formatSize(size, unit.getUnitBase(), unit.name());\n                break;\n            }\n        }\n        return result == null ? formatSize(size, SizeUnitBinaryPrefixes.Bytes.getUnitBase(), SizeUnitBinaryPrefixes.Bytes.name()) : result;\n    }\n    \n    public static String toHumanReadableSIPrefixesWithEnum(long size) {\n        final List<SizeUnitSIPrefixes> units = SizeUnitSIPrefixes.unitsInDescending();\n        if (size < 0)\n            throw new IllegalArgumentException(\"Invalid file size: \" + size);\n        String result = null;\n        for (SizeUnitSIPrefixes unit : units) {\n            if (size >= unit.getUnitBase()) {\n                result = formatSize(size, unit.getUnitBase(), unit.name());\n                break;\n            }\n        }\n        return result == null ? formatSize(size, SizeUnitSIPrefixes.Bytes.getUnitBase(), SizeUnitSIPrefixes.Bytes.name()) : result;\n    }\n\n    public static String toHumanReadableByNumOfLeadingZeros(long size) {\n        if (size < 0)\n            throw new IllegalArgumentException(\"Invalid file size: \" + size);\n        if (size < 1024) return size + \" Bytes\";\n        int unitIdx = (63 - Long.numberOfLeadingZeros(size)) / 10;\n        return formatSize(size, 1L << (unitIdx * 10), \" KMGTPE\".charAt(unitIdx) + \"iB\");\n    }\n    \n    enum SizeUnitBinaryPrefixes {\n        Bytes(1L),\n        KiB(Bytes.unitBase << 10),\n        MiB(KiB.unitBase << 10),\n        GiB(MiB.unitBase << 10),\n        TiB(GiB.unitBase << 10),\n        PiB(TiB.unitBase << 10),\n        EiB(PiB.unitBase << 10);\n\n        private final Long unitBase;\n\n        public static List<SizeUnitBinaryPrefixes> unitsInDescending() {\n            List<SizeUnitBinaryPrefixes> list = Arrays.asList(values());\n            Collections.reverse(list);\n            return list;\n        }\n\n        public Long getUnitBase() {\n            return unitBase;\n        }\n\n        SizeUnitBinaryPrefixes(long unitBase) {\n            this.unitBase = unitBase;\n        }\n    }\n    \n    enum SizeUnitSIPrefixes {\n        Bytes(1L),\n        KB(Bytes.unitBase * 1000),\n        MB(KB.unitBase * 1000),\n        GB(MB.unitBase * 1000),\n        TB(GB.unitBase * 1000),\n        PB(TB.unitBase * 1000),\n        EB(PB.unitBase * 1000);\n\n        private final Long unitBase;\n\n        public static List<SizeUnitSIPrefixes> unitsInDescending() {\n            List<SizeUnitSIPrefixes> list = Arrays.asList(values());\n            Collections.reverse(list);\n            return list;\n        }\n\n        public Long getUnitBase() {\n            return unitBase;\n        }\n\n        SizeUnitSIPrefixes(long unitBase) {\n            this.unitBase = unitBase;\n        }\n    }\n}\n", "test_case": "package com.baeldung.humanreadablebytes;\n\nimport org.apache.commons.io.FileUtils;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class FileSizeFormatUtilUnitTest {\n    private final static Map<Long, String> DATA_MAP_BINARY_PREFIXES = new HashMap<Long, String>() {{\n        put(0L, \"0 Bytes\");\n        put(1023L, \"1023 Bytes\");\n        put(1024L, \"1 KiB\");\n        put(12_345L, \"12.06 KiB\");\n        put(10_123_456L, \"9.65 MiB\");\n        put(10_123_456_798L, \"9.43 GiB\");\n        put(1_777_777_777_777_777_777L, \"1.54 EiB\");\n    }};\n\n    private final static Map<Long, String> DATA_MAP_SI_PREFIXES = new HashMap<Long, String>() {{\n        put(0L, \"0 Bytes\");\n        put(999L, \"999 Bytes\");\n        put(1000L, \"1 KB\");\n        put(12_345L, \"12.35 KB\");\n        put(10_123_456L, \"10.12 MB\");\n        put(10_123_456_798L, \"10.12 GB\");\n        put(1_777_777_777_777_777_777L, \"1.78 EB\");\n    }};\n    \n    @Test\n    public void givenBytes_whenCalltoHumanReadableBinaryPrefixesMethod_thenGetExpectedResults() {\n        DATA_MAP_BINARY_PREFIXES.forEach((in, expected) -> Assert.assertEquals(expected, FileSizeFormatUtil.toHumanReadableBinaryPrefixes(in)));\n    }\n    \n    @Test\n    public void givenBytes_whenCalltoHumanReadableSIPrefixesMethod_thenGetExpectedResults() {\n    \tDATA_MAP_SI_PREFIXES.forEach((in, expected) -> Assert.assertEquals(expected, FileSizeFormatUtil.toHumanReadableSIPrefixes(in)));\n    }\n\n    @Test\n    public void givenBytes_whenCalltoHumanReadableBinaryPrefixesWithEnumMethod_thenGetExpectedResults() {\n        DATA_MAP_BINARY_PREFIXES.forEach((in, expected) -> Assert.assertEquals(expected, FileSizeFormatUtil.toHumanReadableBinaryPrefixesWithEnum(in)));\n    }\n\n    @Test\n    public void givenBytes_whenCalltoHumanReadableSIPrefixesWithEnumMethod_thenGetExpectedResults() {\n    \tDATA_MAP_SI_PREFIXES.forEach((in, expected) -> Assert.assertEquals(expected, FileSizeFormatUtil.toHumanReadableSIPrefixesWithEnum(in)));\n    }\n    \n    @Test\n    public void givenBytes_whenCalltoHumanReadableByLeadingZeros_thenGetExpectedResults() {\n        DATA_MAP_BINARY_PREFIXES.forEach((in, expected) -> Assert.assertEquals(expected, FileSizeFormatUtil.toHumanReadableByNumOfLeadingZeros(in)));\n    }\n    \n    @Test\n    public void givenBytes_whenCalltoHumanReadableByFileUtils_thenOutputExpectedResults() {\n        DATA_MAP_BINARY_PREFIXES.forEach((in, expected) -> System.out.println(in + \" bytes -> \" + FileUtils.byteCountToDisplaySize(in)));\n    }\n}\n"}
{"code_source": "package com.baeldung.number_0xff;\n\npublic class Number0xff {\n\n    public static int getRedColor(int rgba) {\n        return rgba >> 24 & 0xff;\n    }\n\n    public static int getGreenColor(int rgba) {\n        return rgba >> 16 & 0xff;\n    }\n\n    public static int getBlueColor(int rgba) {\n        return rgba >> 8 & 0xff;\n    }\n\n    public static int getAlfa(int rgba) {\n        return rgba & 0xff;\n    }\n}\n", "test_case": "package com.baeldung.number_0xff;\n\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class Number0xffUnitTest {\n\n    @Test\n    public void test0xFFAssignedToInteger() {\n        int x = 0xff;\n        int expectedValue = 255;\n        assertEquals(expectedValue, x);\n    }\n\n    @Test\n    public void test0xFFAssignedToByte() {\n        byte y = (byte) 0xff;\n        int expectedValue = -1;\n        assertEquals(expectedValue, y);\n    }\n\n    @Test\n    public void givenColor_whenGetRedColor_thenExtractRedColor() {\n        int rgba = 272214023;\n        int expectedValue = 16;\n        assertEquals(expectedValue, Number0xff.getRedColor(rgba));\n    }\n\n    @Test\n    public void givenColor_whenGetGreenColor_thenExtractGreenColor() {\n        int rgba = 272214023;\n        int expectedValue = 57;\n        assertEquals(expectedValue, Number0xff.getGreenColor(rgba));\n    }\n\n    @Test\n    public void givenColor_whenGetBlueColor_thenExtractBlueColor() {\n        int rgba = 272214023;\n        int expectedValue = 168;\n        assertEquals(expectedValue, Number0xff.getBlueColor(rgba));\n    }\n\n    @Test\n    public void givenColor_whenGetAlfa_thenExtractAlfa() {\n        int rgba = 272214023;\n        int expectedValue = 7;\n        assertEquals(expectedValue, Number0xff.getAlfa(rgba));\n    }\n}\n"}
{"code_source": "package com.baeldung.probability;\n\nimport io.vavr.Lazy;\n\nimport java.util.SplittableRandom;\nimport java.util.function.Supplier;\n\npublic class RandomInvoker {\n    private final Lazy<SplittableRandom> random = Lazy.of(SplittableRandom::new);\n\n    public <T> T withProbability(Supplier<T> positiveCase, Supplier<T> negativeCase, int probability) {\n        SplittableRandom random = this.random.get();\n        if (random.nextInt(1, 101) <= probability) {\n            return positiveCase.get();\n        } else {\n            return negativeCase.get();\n        }\n    }\n}\n", "test_case": "package com.baeldung.probability;\n\nimport org.assertj.core.data.Offset;\nimport org.junit.Test;\n\nimport java.util.stream.Stream;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class RandomInvokerUnitTest {\n    @Test\n    public void givenProbability_whenInvoked_invokeWithProbability() {\n        RandomInvoker randomInvoker = new RandomInvoker();\n\n        int numberOfSamples = 1_000_000;\n        int probability = 10;\n        int howManyTimesInvoked = Stream.generate(() -> randomInvoker.withProbability(() -> 1, () -> 0, probability))\n                .limit(numberOfSamples)\n                .mapToInt(e -> e).sum();\n        int monteCarloProbability = (howManyTimesInvoked * 100) / numberOfSamples;\n\n        assertThat(monteCarloProbability).isCloseTo(probability, Offset.offset(1));\n    }\n}\n"}
{"code_source": "package com.baeldung.reversenumber;\n\npublic class ReverseNumber {\n\n    public static int reverseNumberWhileLoop(int number) {\n        int reversedNumber = 0;\n        int numberToReverse = Math.abs(number);\n\n        while (numberToReverse > 0) {\n            int mod = numberToReverse % 10;\n            reversedNumber = reversedNumber * 10 + mod;\n            numberToReverse /= 10;\n        }\n\n        return number < 0 ? reversedNumber * -1 : reversedNumber;\n    }\n\n    public static int reverseNumberForLoop(int number) {\n        int reversedNumber = 0;\n        int numberToReverse = Math.abs(number);\n\n        for (; numberToReverse > 0; numberToReverse /= 10) {\n            int mod = numberToReverse % 10;\n            reversedNumber = reversedNumber * 10 + mod;\n        }\n\n        return number < 0 ? reversedNumber * -1 : reversedNumber;\n    }\n\n    public static int reverseNumberRecWrapper(int number) {\n        int output = reverseNumberRec(Math.abs(number), 0);\n        return number < 0 ? output * -1 : output;\n    }\n    private static int reverseNumberRec(int numberToReverse, int recursiveReversedNumber) {\n\n        if (numberToReverse > 0) {\n            int mod = numberToReverse % 10;\n            recursiveReversedNumber = recursiveReversedNumber * 10 + mod;\n            numberToReverse /= 10;\n            return reverseNumberRec(numberToReverse, recursiveReversedNumber);\n        }\n\n        return recursiveReversedNumber;\n    }\n}\n", "test_case": "package com.baeldung.reversenumber;\n\nimport org.assertj.core.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ReverseNumberUnitTest {\n\n    private static final int ORIGINAL_NUMBER = 123456789;\n    private static final int REVERSED_NUMBER = 987654321;\n\n    @Test\n    void whenReverseNumberWhileLoop_thenOriginalEqualToReverse() {\n        Assertions.assertThat(ReverseNumber.reverseNumberWhileLoop(ORIGINAL_NUMBER)).isEqualTo(REVERSED_NUMBER);\n    }\n\n    @Test\n    void whenReverseNumberForLoop_thenOriginalEqualToReverse() {\n        Assertions.assertThat(ReverseNumber.reverseNumberForLoop(ORIGINAL_NUMBER)).isEqualTo(REVERSED_NUMBER);\n    }\n\n    @Test\n    void whenReverseNumberRec_thenOriginalEqualToReverse() {\n        Assertions.assertThat(ReverseNumber.reverseNumberRecWrapper(ORIGINAL_NUMBER)).isEqualTo(REVERSED_NUMBER);\n    }\n\n    @Test\n    void whenReverseNegativeNumber_thenNumberShouldReverse() {\n        Assertions.assertThat(ReverseNumber.reverseNumberWhileLoop(ORIGINAL_NUMBER * -1)).isEqualTo(REVERSED_NUMBER * -1);\n        Assertions.assertThat(ReverseNumber.reverseNumberForLoop(ORIGINAL_NUMBER * -1)).isEqualTo(REVERSED_NUMBER * -1);\n        Assertions.assertThat(ReverseNumber.reverseNumberRecWrapper(ORIGINAL_NUMBER * -1)).isEqualTo(REVERSED_NUMBER * -1);\n    }\n}"}
{"code_source": "package com.baeldung;\n\nimport java.util.Optional;\nimport org.apache.commons.lang3.ObjectUtils;\n\npublic class IntegerNullOrZero {\n    private IntegerNullOrZero() {\n        throw new RuntimeException(\"This class cannot be instantiated.\");\n    }\n\n    public static boolean usingStandardWay(Integer num) {\n        return num == null || num == 0;\n    }\n\n    public static boolean usingTernaryOperator(Integer num) {\n        return 0 == (num == null ? 0 : num);\n    }\n\n    public static boolean usingOptional(Integer num) {\n        return Optional.ofNullable(num).orElse(0) == 0;\n    }\n\n    public static boolean usingObjectUtils(Integer num) {\n        return ObjectUtils.defaultIfNull(num, 0) == 0;\n    }\n}", "test_case": "package com.baeldung.intnullorzero;\n\nimport static com.baeldung.IntegerNullOrZero.usingObjectUtils;\nimport static com.baeldung.IntegerNullOrZero.usingOptional;\nimport static com.baeldung.IntegerNullOrZero.usingStandardWay;\nimport static com.baeldung.IntegerNullOrZero.usingTernaryOperator;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\npublic class IntegerNullOrZeroUnitTest {\n\n    @Test\n    void givenInts_whenUsingStandardWay_thenGetExpectedResult() {\n        int n0 = 0;\n        boolean result0 = usingStandardWay(n0);\n        assertTrue(result0);\n\n        boolean resultNull = usingStandardWay(null);\n        assertTrue(resultNull);\n\n        int n42 = 42;\n        boolean result42 = usingStandardWay(n42);\n        assertFalse(result42);\n    }\n\n    @Test\n    void givenInts_whenUsingTernaryOperator_thenGetExpectedResult() {\n        int n0 = 0;\n        boolean result0 = usingTernaryOperator(n0);\n        assertTrue(result0);\n\n        boolean resultNull = usingTernaryOperator(null);\n        assertTrue(resultNull);\n\n        int n42 = 42;\n        boolean result42 = usingTernaryOperator(n42);\n        assertFalse(result42);\n    }\n\n    @Test\n    void givenInts_whenUsingOptional_thenGetExpectedResult() {\n        int n0 = 0;\n        boolean result0 = usingOptional(n0);\n        assertTrue(result0);\n\n        boolean resultNull = usingOptional(null);\n        assertTrue(resultNull);\n\n        int n42 = 42;\n        boolean result42 = usingOptional(n42);\n        assertFalse(result42);\n    }\n\n    @Test\n    void givenInts_whenUsingObjectUtils_thenGetExpectedResult() {\n        int n0 = 0;\n        boolean result0 = usingObjectUtils(n0);\n        assertTrue(result0);\n\n        boolean resultNull = usingObjectUtils(null);\n        assertTrue(resultNull);\n\n        int n42 = 42;\n        boolean result42 = usingObjectUtils(n42);\n        assertFalse(result42);\n    }\n}"}
{"code_source": "package com.baeldung.armstrong;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class ArmstrongNumberUtil {\n\n    public static boolean isArmstrong(int n) {\n        if (n < 0) {\n            return false;\n        }\n        List<Integer> digitsList = digitsInList(n);\n        int len = digitsList.size();\n        int sum = digitsList.stream()\n            .mapToInt(d -> (int) Math.pow(d, len))\n            .sum();\n        // alternatively, we can use the reduce() method:\n        // int sum = digits.stream()\n        //     .reduce(0, (subtotal, digit) -> subtotal + (int) Math.pow(digit, len));\n        return n == sum;\n    }\n\n    private static List<Integer> digitsInList(int n) {\n        List<Integer> list = new ArrayList<>();\n        while (n > 0) {\n            list.add(n % 10);\n            n = n / 10;\n        }\n        return list;\n    }\n\n    public static List<Integer> getA005188Sequence(int limit) {\n        if (limit < 0) {\n            throw new IllegalArgumentException(\"The limit cannot be a negative number.\");\n        }\n        return IntStream.range(0, limit)\n            .boxed()\n            .filter(ArmstrongNumberUtil::isArmstrong)\n            .collect(Collectors.toList());\n\n    }\n}\n", "test_case": "package com.baeldung.armstrong;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\n\nclass ArmstrongNumberUtilUnitTest {\n    // @formatter:off\nprivate static final Map<Integer, Boolean> ARMSTRONG_MAP = ImmutableMap.of(\n    0, true,\n    1, true,\n    2, true,\n    153, true,\n    370, true,\n    407, true,\n    42, false,\n    777, false,\n    12345, false);\n    // @formatter:on\n\n    private static final List<Integer> A005188_SEQ_1K = ImmutableList.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407);\n    private static final List<Integer> A005188_SEQ_10K = ImmutableList.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407, 1634, 8208, 9474);\n\n    @Test\n    void givenIntegers_whenCheckArmstrong_shouldReturnExpectedResult() {\n        ARMSTRONG_MAP.forEach((number, result) -> assertEquals(result, ArmstrongNumberUtil.isArmstrong(number)));\n    }\n\n    @Test\n    void givenALimit_whenFindArmstrong_shouldReturnExpectedResult() {\n        assertEquals(A005188_SEQ_1K, ArmstrongNumberUtil.getA005188Sequence(1000));\n        assertEquals(A005188_SEQ_10K, ArmstrongNumberUtil.getA005188Sequence(10000));\n    }\n}\n"}
{"code_source": "package com.baeldung.evenodd;\n\npublic class EvenOdd {\n\n    static boolean isEven(int x) {\n        return x % 2 == 0;\n    }\n\n    static boolean isOdd(int x) {\n        return x % 2 != 0;\n    }\n\n    static boolean isOrEven(int x) {\n        return (x | 1) > x;\n    }\n\n    static boolean isOrOdd(int x) {\n        return (x | 1) == x;\n    }\n\n    static boolean isAndEven(int x) {\n        return (x & 1) == 0;\n    }\n\n    static boolean isAndOdd(int x) {\n        return (x & 1) == 1;\n    }\n\n    static boolean isXorEven(int x) {\n        return (x ^ 1) > x;\n    }\n\n    static boolean isXorOdd(int x) {\n        return (x ^ 1) < x;\n    }\n\n    static boolean isLsbEven(int x) {\n        return Integer.toBinaryString(x)\n            .endsWith(\"0\");\n    }\n\n    static boolean isLsbOdd(int x) {\n        return Integer.toBinaryString(x)\n            .endsWith(\"1\");\n    }\n}\n", "test_case": "package com.baeldung.evenodd;\n\nimport static com.baeldung.evenodd.EvenOdd.isAndEven;\nimport static com.baeldung.evenodd.EvenOdd.isAndOdd;\nimport static com.baeldung.evenodd.EvenOdd.isEven;\nimport static com.baeldung.evenodd.EvenOdd.isLsbEven;\nimport static com.baeldung.evenodd.EvenOdd.isLsbOdd;\nimport static com.baeldung.evenodd.EvenOdd.isOdd;\nimport static com.baeldung.evenodd.EvenOdd.isOrEven;\nimport static com.baeldung.evenodd.EvenOdd.isOrOdd;\nimport static com.baeldung.evenodd.EvenOdd.isXorEven;\nimport static com.baeldung.evenodd.EvenOdd.isXorOdd;\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\npublic class EvenOddUnitTest {\n\n    @Test\n    public void whenNumberIsEven_thenReturnTrue() {\n        assertEquals(true, isEven(2));\n    }\n\n    @Test\n    public void whenNumberIsOdd_thenReturnTrue() {\n        assertEquals(true, isOdd(3));\n    }\n\n    @Test\n    public void whenNumberIsEven_thenReturnTrueWithOr() {\n        assertEquals(true, isOrEven(4));\n    }\n\n    @Test\n    public void whenNumberIsOdd_thenReturnTrueOr() {\n        assertEquals(true, isOrOdd(5));\n    }\n\n    @Test\n    public void whenNumberIsEven_thenReturnTrueAnd() {\n        assertEquals(true, isAndEven(6));\n    }\n\n    @Test\n    public void whenNumberIsOdd_thenReturnTrueAnd() {\n        assertEquals(true, isAndOdd(7));\n    }\n\n    @Test\n    public void whenNumberIsEven_thenReturnTrueXor() {\n        assertEquals(true, isXorEven(8));\n    }\n\n    @Test\n    public void whenNumberIsOdd_thenReturnTrueXor() {\n        assertEquals(true, isXorOdd(9));\n    }\n\n    @Test\n    public void whenNumberIsEven_thenReturnTrueLsb() {\n        assertEquals(true, isLsbEven(10));\n    }\n\n    @Test\n    public void whenNumberIsOdd_thenReturnTrueLsb() {\n        assertEquals(true, isLsbOdd(11));\n    }\n}\n"}
{"code_source": "package com.baeldung.factors;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class FactorsOfInteger {\n    public static Set<Integer> getAllFactorsVer1(int n) {\n        Set<Integer> factors = new HashSet<>();\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n            }\n        }\n        return factors;\n    }\n\n    public static Set<Integer> getAllFactorsVer2(int n) {\n        Set<Integer> factors = new HashSet<>();\n        for (int i = 1; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                factors.add(n / i);\n            }\n        }\n        return factors;\n    }\n\n    public static Set<Integer> getAllFactorsVer3(int n) {\n        Set<Integer> factors = new HashSet<>();\n        int step = n % 2 == 0 ? 1 : 2;\n        for (int i = 1; i <= Math.sqrt(n); i += step) {\n            if (n % i == 0) {\n                factors.add(i);\n                factors.add(n / i);\n            }\n        }\n        return factors;\n    }\n}\n", "test_case": "package com.baeldung.factors;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableSet;\n\nclass FactorsOfIntegerUnitTest {\n    //@formatter:off\n    private final static Map<Integer, Set<Integer>> FACTOR_MAP = ImmutableMap.of(\n    0, ImmutableSet.of(),\n    1, ImmutableSet.of(1),\n    20, ImmutableSet.of(1, 2, 4, 5, 10, 20),\n    24, ImmutableSet.of(1, 2, 3, 4, 6, 8, 12, 24),\n    97, ImmutableSet.of(1, 97),\n    99, ImmutableSet.of(1, 3, 9, 11, 33, 99),\n    100, ImmutableSet.of(1, 2, 4, 5, 10, 20, 25, 50, 100)\n    );\n    //@formatter:on\n\n    @Test\n    void givenAnInteger_whenCallingFindAllFactorsTheDraftVersion_shouldGetExpectedResult() {\n        FACTOR_MAP.forEach((number, expected) -> assertEquals(expected, FactorsOfInteger.getAllFactorsVer1(number)));\n    }\n\n    @Test\n    void givenAnInteger_whenCallingFindAllFactorsVer2_shouldGetExpectedResult() {\n        FACTOR_MAP.forEach((number, expected) -> assertEquals(expected, FactorsOfInteger.getAllFactorsVer2(number)));\n    }\n\n    @Test\n    void givenAnInteger_whenCallingFindAllFactorsVer3_shouldGetExpectedResult() {\n        FACTOR_MAP.forEach((number, expected) -> assertEquals(expected, FactorsOfInteger.getAllFactorsVer3(number)));\n    }\n}\n"}
{"code_source": "package com.baeldung.intrange;\n\nimport org.apache.commons.lang3.Range;\n\npublic class IntRangeApacheCommons {\n\n    public static boolean isInClosedRange(Integer number, Integer lowerBound, Integer upperBound) {\n        final Range<Integer> range = Range.between(lowerBound, upperBound);\n        return range.contains(number);\n    }\n\n    public static boolean isInOpenRange(Integer number, Integer lowerBound, Integer upperBound) {\n        final Range<Integer> range = Range.between(lowerBound + 1, upperBound - 1);\n        return range.contains(number);\n    }\n\n    public static boolean isInOpenClosedRange(Integer number, Integer lowerBound, Integer upperBound) {\n        final Range<Integer> range = Range.between(lowerBound + 1, upperBound);\n        return range.contains(number);\n    }\n\n    public static boolean isInClosedOpenRange(Integer number, Integer lowerBound, Integer upperBound) {\n        final Range<Integer> range = Range.between(lowerBound, upperBound - 1);\n        return range.contains(number);\n    }\n}\n", "test_case": "package com.baeldung.intrange;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\npublic class IntRangeApacheCommonsUnitTest {\n\n    @Test\n    void givenIntRangeApacheCommons_whenIsInClosedRange_thenSuccess() {\n        // when\n        boolean resultLowerBound = IntRangeApacheCommons.isInClosedRange(10, 10, 20);\n        boolean resultUpperBound = IntRangeApacheCommons.isInClosedRange(20, 10, 20);\n\n        // then\n        assertTrue(resultLowerBound);\n        assertTrue(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeApacheCommons_whenIsNotInClosedRange_thenFailure() {\n        // when\n        boolean resultLowerBound = IntRangeApacheCommons.isInClosedRange(8, 10, 20);\n        boolean resultUpperBound = IntRangeApacheCommons.isInClosedRange(22, 10, 20);\n\n        // then\n        assertFalse(resultLowerBound);\n        assertFalse(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeApacheCommons_whenIsInOpenRange_thenSuccess() {\n        // when\n        boolean resultLowerBound = IntRangeApacheCommons.isInOpenRange(11, 10, 20);\n        boolean resultUpperBound = IntRangeApacheCommons.isInOpenRange(19, 10, 20);\n\n        // then\n        assertTrue(resultLowerBound);\n        assertTrue(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeApacheCommons_whenIsNotInOpenRange_thenFailure() {\n        // when\n        boolean resultLowerBound = IntRangeApacheCommons.isInOpenRange(10, 10, 20);\n        boolean resultUpperBound = IntRangeApacheCommons.isInOpenRange(20, 10, 20);\n\n        // then\n        assertFalse(resultLowerBound);\n        assertFalse(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeApacheCommons_whenIsInOpenClosedRange_thenSuccess() {\n        // when\n        boolean resultLowerBound = IntRangeApacheCommons.isInOpenClosedRange(11, 10, 20);\n        boolean resultUpperBound = IntRangeApacheCommons.isInOpenClosedRange(20, 10, 20);\n\n        // then\n        assertTrue(resultLowerBound);\n        assertTrue(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeApacheCommons_whenIsNotInOpenClosedRange_thenFailure() {\n        // when\n        boolean resultLowerBound = IntRangeApacheCommons.isInOpenClosedRange(10, 10, 20);\n        boolean resultUpperBound = IntRangeApacheCommons.isInOpenClosedRange(21, 10, 20);\n\n        // then\n        assertFalse(resultLowerBound);\n        assertFalse(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeApacheCommons_whenIsInClosedOpenRange_thenSuccess() {\n        // when\n        boolean resultLowerBound = IntRangeApacheCommons.isInClosedOpenRange(10, 10, 20);\n        boolean resultUpperBound = IntRangeApacheCommons.isInClosedOpenRange(19, 10, 20);\n\n        // then\n        assertTrue(resultLowerBound);\n        assertTrue(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeApacheCommons_whenIsNotInClosedOpenRange_thenFailure() {\n        // when\n        boolean resultLowerBound = IntRangeApacheCommons.isInClosedOpenRange(9, 10, 20);\n        boolean resultUpperBound = IntRangeApacheCommons.isInClosedOpenRange(20, 10, 20);\n\n        // then\n        assertFalse(resultLowerBound);\n        assertFalse(resultUpperBound);\n    }\n}\n"}
{"code_source": "package com.baeldung.intrange;\n\nimport com.google.common.collect.Range;\n\npublic class IntRangeGoogleGuava {\n\n    public static boolean isInClosedRange(Integer number, Integer lowerBound, Integer upperBound) {\n        final Range<Integer> range = Range.closed(lowerBound, upperBound);\n        return range.contains(number);\n    }\n\n    public static boolean isInOpenRange(Integer number, Integer lowerBound, Integer upperBound) {\n        final Range<Integer> range = Range.open(lowerBound, upperBound);\n        return range.contains(number);\n    }\n\n    public static boolean isInOpenClosedRange(Integer number, Integer lowerBound, Integer upperBound) {\n        final Range<Integer> range = Range.openClosed(lowerBound, upperBound);\n        return range.contains(number);\n    }\n\n    public static boolean isInClosedOpenRange(Integer number, Integer lowerBound, Integer upperBound) {\n        final Range<Integer> range = Range.closedOpen(lowerBound, upperBound);\n        return range.contains(number);\n    }\n}\n", "test_case": "package com.baeldung.intrange;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\npublic class IntRangeGoogleGuavaUnitTest {\n\n    @Test\n    void givenIntRangeGoogleGuava_whenIsInOpenRange_thenSuccess() {\n        // when\n        boolean result = IntRangeGoogleGuava.isInOpenRange(14, 10, 20);\n\n        //then\n        assertTrue(result);\n    }\n\n    @Test\n    void givenIntRangeGoogleGuava_whenIsNotInOpenRange_thenFailure() {\n        // when\n        boolean resultLowerBound = IntRangeGoogleGuava.isInOpenRange(10, 10, 20);\n        boolean resultUpperBound = IntRangeGoogleGuava.isInOpenRange(20, 10, 20);\n\n        // then\n        assertFalse(resultLowerBound);\n        assertFalse(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeGoogleGuava_whenIsInClosedRange_thenSuccess() {\n        // when\n        boolean resultLowerBound = IntRangeGoogleGuava.isInClosedRange(-10, -10, 5);\n        boolean resultUpperBound = IntRangeGoogleGuava.isInClosedRange(5, -10, 5);\n\n        // then\n        assertTrue(resultLowerBound);\n        assertTrue(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeGoogleGuava_whenIsNotInClosedRange_thenFailure() {\n        // when\n        boolean resultLowerBound = IntRangeGoogleGuava.isInClosedRange(-11, -10, 5);\n        boolean resultUpperBound = IntRangeGoogleGuava.isInClosedRange(6, -10, 5);\n\n        //then\n        assertFalse(resultLowerBound);\n        assertFalse(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeGoogleGuava_whenIsInOpenClosedRange_thenSuccess() {\n        // when\n        boolean result = IntRangeGoogleGuava.isInOpenClosedRange(20, 10, 20);\n\n        // then\n        assertTrue(result);\n    }\n\n    @Test\n    void givenIntRangeGoogleGuava_whenIsNotInOpenClosedRange_thenFailure() {\n        // when\n        boolean result = IntRangeGoogleGuava.isInOpenClosedRange(10, 10, 20);\n\n        // then\n        assertFalse(result);\n    }\n\n    @Test\n    void givenIntRangeGoogleGuava_whenIsInClosedOpenRange_thenSuccess() {\n        // when\n        boolean result = IntRangeGoogleGuava.isInClosedOpenRange(10, 10, 20);\n\n        // then\n        assertTrue(result);\n    }\n\n    @Test\n    void givenIntRangeGoogleGuava_whenIsNotInClosedOpenRange_thenFailure() {\n        // when\n        boolean result = IntRangeGoogleGuava.isInClosedOpenRange(20, 10, 20);\n\n        // then\n        assertFalse(result);\n    }\n}\n"}
{"code_source": "package com.baeldung.intrange;\n\npublic class IntRangeOperators {\n\n    public static boolean isInClosedRange(Integer number, Integer lowerBound, Integer upperBound) {\n        return (lowerBound <= number && number <= upperBound);\n    }\n\n    public static boolean isInOpenRange(Integer number, Integer lowerBound, Integer upperBound) {\n        return (lowerBound < number && number < upperBound);\n    }\n\n    public static boolean isInOpenClosedRange(Integer number, Integer lowerBound, Integer upperBound) {\n        return (lowerBound < number && number <= upperBound);\n    }\n\n    public static boolean isInClosedOpenRange(Integer number, Integer lowerBound, Integer upperBound) {\n        return (lowerBound <= number && number < upperBound);\n    }\n}", "test_case": "package com.baeldung.intrange;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\npublic class IntRangeOperatorsUnitTest {\n\n    @Test\n    void givenIntRangeOperators_whenIsInOpenRange_thenSuccess() {\n        // when\n        boolean result = IntRangeOperators.isInOpenRange(11, 10, 20);\n\n        //then\n        assertTrue(result);\n    }\n\n    @Test\n    void givenIntRangeOperators_whenIsNotInOpenRange_thenFailure() {\n        // when\n        boolean resultLowerBound = IntRangeOperators.isInOpenRange(10, 10, 20);\n        boolean resultUpperBound = IntRangeOperators.isInOpenRange(20, 10, 20);\n\n        // then\n        assertFalse(resultLowerBound);\n        assertFalse(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeOperators_whenIsInClosedRange_thenSuccess() {\n        // when\n        boolean resultLowerBound = IntRangeOperators.isInClosedRange(-10, -10, 5);\n        boolean resultUpperBound = IntRangeOperators.isInClosedRange(5, -10, 5);\n\n        // then\n        assertTrue(resultUpperBound);\n        assertTrue(resultLowerBound);\n    }\n\n    @Test\n    void givenIntRangeOperators_whenIsNotInClosedRange_thenFailure() {\n        // when\n        boolean resultLowerBound = IntRangeOperators.isInClosedRange(-11, -10, 5);\n        boolean resultUpperBound = IntRangeOperators.isInClosedRange(6, -10, 5);\n\n        // then\n        assertFalse(resultLowerBound);\n        assertFalse(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeOperators_whenIsInOpenClosedRange_thenSuccess() {\n        // when\n        boolean result = IntRangeOperators.isInOpenClosedRange(20, 10, 20);\n\n        // then\n        assertTrue(result);\n    }\n\n    @Test\n    void givenIntRangeOperators_whenIsNotInOpenClosedRange_thenFailure() {\n        // when\n        boolean result = IntRangeOperators.isInOpenClosedRange(10, 10, 20);\n\n        // then\n        assertFalse(result);\n    }\n\n    @Test\n    void givenIntRangeOperators_whenIsInClosedOpenRange_thenSuccess() {\n        // when\n        boolean result = IntRangeOperators.isInClosedOpenRange(10, 10, 20);\n\n        // then\n        assertTrue(result);\n    }\n\n    @Test\n    void givenIntRangeOperators_whenIsNotInClosedOpenRange_thenFailure() {\n        // when\n        boolean result = IntRangeOperators.isInClosedOpenRange(20, 10, 20);\n\n        // then\n        assertFalse(result);\n    }\n}\n"}
{"code_source": "package com.baeldung.intrange;\n\nimport java.time.temporal.ValueRange;\n\npublic class IntRangeValueRange {\n\n    public static boolean isInClosedRange(Integer number, Integer lowerBound, Integer upperBound) {\n        final ValueRange range = ValueRange.of(lowerBound, upperBound);\n        return range.isValidIntValue(number);\n    }\n\n    public static boolean isInOpenRange(Integer number, Integer lowerBound, Integer upperBound) {\n        final ValueRange range = ValueRange.of(lowerBound + 1, upperBound - 1);\n        return range.isValidIntValue(number);\n    }\n\n    public static boolean isInOpenClosedRange(Integer number, Integer lowerBound, Integer upperBound) {\n        final ValueRange range = ValueRange.of(lowerBound + 1, upperBound);\n        return range.isValidIntValue(number);\n    }\n\n    public static boolean isInClosedOpenRange(Integer number, Integer lowerBound, Integer upperBound) {\n        final ValueRange range = ValueRange.of(lowerBound, upperBound - 1);\n        return range.isValidIntValue(number);\n    }\n}\n", "test_case": "package com.baeldung.intrange;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\npublic class IntRangeValueRangeUnitTest {\n\n    @Test\n    void givenIntRangeValueRange_whenIsInClosedRange_thenSuccess() {\n        // when\n        boolean resultLowerBound = IntRangeValueRange.isInClosedRange(10, 10, 20);\n        boolean resultUpperBound = IntRangeValueRange.isInClosedRange(20, 10, 20);\n\n        // then\n        assertTrue(resultLowerBound);\n        assertTrue(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeValueRange_whenIsNotInClosedRange_thenFailure() {\n        // when\n        boolean resultLowerBound = IntRangeValueRange.isInClosedRange(9, 10, 20);\n        boolean resultUpperBound = IntRangeValueRange.isInClosedRange(21, 10, 20);\n\n        // then\n        assertFalse(resultLowerBound);\n        assertFalse(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeValueRange_whenIsInOpenRange_thenSuccess() {\n        // when\n        boolean resultLowerBound = IntRangeValueRange.isInOpenRange(11, 10, 20);\n        boolean resultUpperBound = IntRangeValueRange.isInOpenRange(19, 10, 20);\n\n        // then\n        assertTrue(resultLowerBound);\n        assertTrue(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeValueRange_whenIsNotInOpenRange_thenFailure() {\n        // when\n        boolean resultLowerBound = IntRangeValueRange.isInOpenRange(10, 10, 20);\n        boolean resultUpperBound = IntRangeValueRange.isInOpenRange(20, 10, 20);\n\n        // then\n        assertFalse(resultLowerBound);\n        assertFalse(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeValueRange_whenIsInOpenClosedRange_thenSuccess() {\n        // when\n        boolean resultLowerBound = IntRangeValueRange.isInOpenClosedRange(11, 10, 20);\n        boolean resultUpperBound = IntRangeValueRange.isInOpenClosedRange(20, 10, 20);\n\n        // then\n        assertTrue(resultLowerBound);\n        assertTrue(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeValueRange_whenIsNotInOpenClosedRange_thenFailure() {\n        // when\n        boolean resultLowerBound = IntRangeValueRange.isInOpenClosedRange(10, 10, 20);\n        boolean resultUpperBound = IntRangeValueRange.isInOpenClosedRange(21, 10, 20);\n\n        // then\n        assertFalse(resultLowerBound);\n        assertFalse(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeValueRange_whenIsInClosedOpenRange_thenSuccess() {\n        // when\n        boolean resultLowerBound = IntRangeValueRange.isInClosedOpenRange(10, 10, 20);\n        boolean resultUpperBound = IntRangeValueRange.isInClosedOpenRange(19, 10, 20);\n\n        // then\n        assertTrue(resultLowerBound);\n        assertTrue(resultUpperBound);\n    }\n\n    @Test\n    void givenIntRangeValueRange_whenIsNotInClosedOpenRange_thenFailure() {\n        // when\n        boolean resultLowerBound = IntRangeValueRange.isInClosedOpenRange(9, 10, 20);\n        boolean resultUpperBound = IntRangeValueRange.isInClosedOpenRange(20, 10, 20);\n\n        // then\n        assertFalse(resultLowerBound);\n        assertFalse(resultUpperBound);\n    }\n}\n"}
{"code_source": "package com.baeldung.positivenegative;\n\npublic class PositiveOrNegative {\n    enum Result {\n        POSITIVE, NEGATIVE, ZERO\n    }\n\n    public static Result byOperator(Integer integer) {\n        if (integer > 0) {\n            return Result.POSITIVE;\n        } else if (integer < 0) {\n            return Result.NEGATIVE;\n        }\n        return Result.ZERO;\n    }\n\n    public static Result bySignum(Integer integer) {\n        int result = Integer.signum(integer);\n\n        if (result == 1) {\n            return Result.POSITIVE;\n        } else if (result == -1) {\n            return Result.NEGATIVE;\n        }\n        return Result.ZERO;\n    }\n\n    public static Result bySignum(Float floatNumber) {\n        Float result = Math.signum(floatNumber);\n\n        if (result.compareTo(1.0f) == 0) {\n            return Result.POSITIVE;\n        } else if (result.compareTo(-1.0f) == 0) {\n            return Result.NEGATIVE;\n        }\n        return Result.ZERO;\n    }\n}\n", "test_case": "package com.baeldung.positivenegative;\n\nimport static com.baeldung.positivenegative.PositiveOrNegative.Result.NEGATIVE;\nimport static com.baeldung.positivenegative.PositiveOrNegative.Result.POSITIVE;\nimport static com.baeldung.positivenegative.PositiveOrNegative.Result.ZERO;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass PositiveOrNegativeUnitTest {\n    @Test\n    void givenIntegers_whenChkPositiveOrNegativeByOperator_thenReturnExpectedResult() {\n        assertEquals(POSITIVE, PositiveOrNegative.byOperator(42));\n        assertEquals(ZERO, PositiveOrNegative.byOperator(0));\n        assertEquals(NEGATIVE, PositiveOrNegative.byOperator(-700));\n    }\n\n    @Test\n    void givenIntegers_whenChkPositiveOrNegativeBySignum_thenReturnExpectedResult() {\n        assertEquals(POSITIVE, PositiveOrNegative.bySignum(42));\n        assertEquals(ZERO, PositiveOrNegative.bySignum(0));\n        assertEquals(NEGATIVE, PositiveOrNegative.bySignum(-700));\n    }\n\n    @Test\n    void givenFloats_whenChkPositiveOrNegativeBySignum_thenReturnExpectedResult() {\n        assertEquals(POSITIVE, PositiveOrNegative.bySignum(4.2f));\n        assertEquals(ZERO, PositiveOrNegative.bySignum(0f));\n        assertEquals(NEGATIVE, PositiveOrNegative.bySignum(-7.7f));\n    }\n}\n"}
{"code_source": "package com.baeldung.optional.orelse;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.Random;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class OrElseAndOrElseGet {\n\n    public static List<String> names = Arrays.asList(\"John\", \"Jones\", \"Kelly\", \"Cristina\", \"Raven\");\n\n    private static final Logger LOG = LoggerFactory.getLogger(OrElseAndOrElseGet.class);\n\n    public String getRandomName() {\n        LOG.info(\"getRandomName() method - start\");\n        Random random = new Random();\n        int index = random.nextInt(5);\n        LOG.info(\"getRandomName() method - end\");\n        return names.get(index);\n    }\n\n    public String getNameUsingOrElse(String name) {\n        return Optional.ofNullable(name)\n            .orElse(getRandomName());\n    }\n\n    public String getNameUsingOrElseGet(String name) {\n        return Optional.ofNullable(name)\n            .orElseGet(() -> getRandomName());\n    }\n}\n", "test_case": "package com.baeldung.optional.orelse;\n\nimport org.junit.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport static org.junit.Assert.*;\n\npublic class OrElseAndOrElseGetUnitTest {\n\n    private OrElseAndOrElseGet orElsevsOrElseGet = new OrElseAndOrElseGet();\n\n    private static final Logger LOG = LoggerFactory.getLogger(OrElseAndOrElseGetUnitTest.class);\n\n    @Test\n    public void givenNonEmptyOptional_whenOrElseUsed_thenGivenStringReturned() {\n        LOG.info(\"In givenNonEmptyOptional_whenOrElseUsed_thenGivenStringReturned()\");\n        String name = orElsevsOrElseGet.getNameUsingOrElse(\"baeldung\");\n        assertEquals(name, \"baeldung\");\n    }\n\n    @Test\n    public void givenEmptyOptional_whenOrElseUsed_thenRandomStringReturned() {\n        LOG.info(\"In givenEmptyOptional_whenOrElseUsed_thenRandomStringReturned()\");\n        String name = orElsevsOrElseGet.getNameUsingOrElse(null);\n        assertTrue(orElsevsOrElseGet.names.contains(name));\n    }\n\n    @Test\n    public void givenNonEmptyOptional_whenOrElseGetUsed_thenGivenStringReturned() {\n        LOG.info(\"In givenNonEmptyOptional_whenOrElseGetUsed_thenGivenStringReturned()\");\n        String name = orElsevsOrElseGet.getNameUsingOrElseGet(\"baeldung\");\n        assertEquals(name, \"baeldung\");\n    }\n\n    @Test\n    public void givenEmptyOptional_whenOrElseGetUsed_thenRandomStringReturned() {\n        LOG.info(\"In givenEmptyOptional_whenOrElseGetUsed_thenRandomStringReturned()\");\n        String name = orElsevsOrElseGet.getNameUsingOrElseGet(null);\n        assertTrue(orElsevsOrElseGet.names.contains(name));\n    }\n}\n"}
{"code_source": "package com.baeldung.core.pwd;\n\nimport java.io.File;\nimport java.nio.file.FileSystems;\nimport java.nio.file.Paths;\n\npublic final class CurrentDirectoryFetcher {\n\n    public static void main(String[] args) {\n        System.out.printf(\"Current Directory Using Java System API: %s%n\", currentDirectoryUsingSystemProperties());\n\n        System.out.printf(\"Current Directory Using Java IO File API: %s%n\", currentDirectoryUsingFile());\n\n        System.out.printf(\"Current Directory Using Java NIO FileSystems API: %s%n\", currentDirectoryUsingFileSystems());\n\n        System.out.printf(\"Current Directory Using Java NIO Paths API: %s%n\", currentDirectoryUsingPaths());\n    }\n\n    public static String currentDirectoryUsingSystemProperties() {\n        return System.getProperty(\"user.dir\");\n    }\n\n    public static String currentDirectoryUsingPaths() {\n        return Paths.get(\"\")\n            .toAbsolutePath()\n            .toString();\n    }\n\n    public static String currentDirectoryUsingFileSystems() {\n        return FileSystems.getDefault()\n            .getPath(\"\")\n            .toAbsolutePath()\n            .toString();\n    }\n\n    public static String currentDirectoryUsingFile() {\n        return new File(\"\").getAbsolutePath();\n    }\n\n}\n", "test_case": "package com.baeldung.core.pwd;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class CurrentDirectoryFetcherUnitTest {\n\n    private static final String CURRENT_DIR = \"core-java-os\";\n\n    @Test\n    public void whenUsingSystemProperties_thenReturnCurrentDirectory() {\n        assertTrue(CurrentDirectoryFetcher.currentDirectoryUsingSystemProperties()\n            .endsWith(CURRENT_DIR));\n    }\n\n    @Test\n    public void whenUsingJavaNioPaths_thenReturnCurrentDirectory() {\n        assertTrue(CurrentDirectoryFetcher.currentDirectoryUsingPaths()\n            .endsWith(CURRENT_DIR));\n    }\n\n    @Test\n    public void whenUsingJavaNioFileSystems_thenReturnCurrentDirectory() {\n        assertTrue(CurrentDirectoryFetcher.currentDirectoryUsingFileSystems()\n            .endsWith(CURRENT_DIR));\n    }\n\n    @Test\n    public void whenUsingJavaIoFile_thenReturnCurrentDirectory() {\n        assertTrue(CurrentDirectoryFetcher.currentDirectoryUsingFile()\n            .endsWith(CURRENT_DIR));\n    }\n}"}
{"code_source": "package com.baeldung.java9.process;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.util.Optional;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class ProcessUnderstanding {\n\n    public static int compileAndRunJavaProgram() throws IOException {\n        Process process = Runtime.getRuntime()\n            .exec(\"javac -cp src src\\\\main\\\\java\\\\com\\\\baeldung\\\\java9\\\\process\\\\OutputStreamExample.java\");\n        process = Runtime.getRuntime()\n            .exec(\"java -cp  src/main/java com.baeldung.java9.process.OutputStreamExample\");\n        BufferedReader output = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        int value = Integer.parseInt(output.readLine());\n        return value;\n    }\n\n    public static String getErrorStreamExample() throws IOException {\n        Process process = Runtime.getRuntime()\n            .exec(\"javac -cp src src\\\\main\\\\java\\\\com\\\\baeldung\\\\java9\\\\process\\\\ProcessCompilationError.java\");\n        BufferedReader error = new BufferedReader(new InputStreamReader(process.getErrorStream()));\n        String errorString = error.readLine();\n        return errorString;\n    }\n\n    public static void creatingNewProcess() throws IOException {\n        ProcessBuilder builder = new ProcessBuilder(\"notepad.exe\");\n        Process process = builder.start();\n    }\n\n    public static int filterProcessWithStreamsInSpecificRangeReturnCount() {\n        return (int) ProcessHandle.allProcesses()\n            .filter(ph -> (ph.pid() > 10000 && ph.pid() < 50000))\n            .count();\n    }\n\n    public static void destroyingProcessCreatedBySameProcess() throws IOException, InterruptedException {\n        ProcessBuilder builder = new ProcessBuilder(\"notepad.exe\");\n        Process process = builder.start();\n        Thread.sleep(10000);\n        process.destroy();\n    }\n\n    public static void destroyingProcessCreatedByDifferentProcess() {\n        // find out the process id of current running task by checking\n        // task manager in windows and enter the integer value\n        Optional<ProcessHandle> optionalProcessHandle = ProcessHandle.of(5232);\n        ProcessHandle processHandle = optionalProcessHandle.get();\n        processHandle.destroy();\n    }\n\n    public static int waitForExample() throws IOException, InterruptedException {\n        ProcessBuilder builder = new ProcessBuilder(\"notepad.exe\");\n        Process process = builder.start();\n        return process.waitFor();\n    }\n\n    public static int exitValueExample() throws IOException {\n        ProcessBuilder builder = new ProcessBuilder(\"notepad.exe\");\n        Process process = builder.start();\n        process.destroy();\n        return process.exitValue();\n    }\n\n    public static void destroyExample() throws IOException, InterruptedException {\n        ProcessBuilder builder = new ProcessBuilder(\"notepad.exe\");\n        Process process = builder.start();\n        Thread.sleep(10000);\n        process.destroy();\n    }\n\n    public static void destroyForciblyExample() throws IOException, InterruptedException {\n        ProcessBuilder builder = new ProcessBuilder(\"notepad.exe\");\n        Process process = builder.start();\n        Thread.sleep(10000);\n        process.destroy();\n        if (process.isAlive()) {\n            process.destroyForcibly();\n        }\n    }\n\n    public static void outputStreamDemo() throws IOException, InterruptedException {\n        Logger log = Logger.getLogger(ProcessUnderstanding.class.getName());\n        Process pr = Runtime.getRuntime()\n            .exec(\"javac -cp src src\\\\main\\\\java\\\\com\\\\baeldung\\\\java9\\\\process\\\\ChildProcess.java\");\n        final Process process = Runtime.getRuntime()\n            .exec(\"java -cp  src/main/java com.baeldung.java9.process.ChildProcess\");\n        try (Writer w = new OutputStreamWriter(process.getOutputStream(), \"UTF-8\")) {\n            w.write(\"send to child\\n\");\n        }\n        new Thread(() -> {\n            try {\n                int c;\n                while ((c = process.getInputStream()\n                    .read()) != -1)\n                    System.out.write((byte) c);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }).start();\n        // send to child\n        log.log(Level.INFO, \"rc=\" + process.waitFor());\n    }\n}\n", "test_case": "package com.baeldung.java9.process;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.lang.String;\nimport java.util.concurrent.TimeUnit;\nimport java.lang.Integer;\n\nimport org.junit.jupiter.api.Test;\n\nclass ProcessUnderstandingUnitTest {\n\n    @Test\n    public void givenSubProcess_whenEncounteringError_thenErrorStreamNotNull() throws IOException {\n        Process process = Runtime.getRuntime()\n            .exec(\"javac -cp src src\\\\main\\\\java\\\\com\\\\baeldung\\\\java9\\\\process\\\\ProcessCompilationError.java\");\n        BufferedReader error = new BufferedReader(new InputStreamReader(process.getErrorStream()));\n        String errorString = error.readLine();\n        assertNotNull(errorString);\n    }\n\n    //@Test - windows specific\n    public void givenSubProcess_whenStarted_thenStartSuccessIsAlive() throws IOException {\n        ProcessBuilder builder = new ProcessBuilder(\"notepad.exe\");\n        assertTrue(builder.start().isAlive());\n    }\n\n    //@Test - windows specific\n    public void givenSubProcess_whenDestroying_thenProcessNotAlive() throws IOException, InterruptedException {\n        ProcessBuilder builder = new ProcessBuilder(\"notepad.exe\");\n        Process process = builder.start();\n        Thread.sleep(10000);\n        process.destroy();\n        assertFalse(process.isAlive());\n    }\n\n    //@Test - windows specific\n    public void givenSubProcess_whenAlive_thenDestroyForcibly() throws IOException, InterruptedException {\n        ProcessBuilder builder = new ProcessBuilder(\"notepad.exe\");\n        Process process = builder.start();\n        Thread.sleep(10000);\n        process.destroy();\n        if (process.isAlive()) {\n            process.destroyForcibly();\n        }\n        assertFalse(process.isAlive());\n    }\n\n    //@Test - windows specific\n    public void givenSubProcess_whenDestroyed_thenCheckIfAlive() throws IOException, InterruptedException {\n        ProcessBuilder builder = new ProcessBuilder(\"notepad.exe\");\n        Process process = builder.start();\n        Thread.sleep(10000);\n        process.destroy();\n        assertFalse(process.isAlive());\n    }\n\n    //@Test - windows specific\n    public void givenSubProcess_whenCurrentThreadWaitsIndefinitelyuntilSubProcessEnds_thenProcessWaitForReturnsGrt0() throws IOException, InterruptedException {\n        ProcessBuilder builder = new ProcessBuilder(\"notepad.exe\");\n        Process process = builder.start();\n        assertThat(process.waitFor() >= 0);\n    }\n\n    //@Test - windows specific\n    public void givenSubProcess_whenCurrentThreadWaitsAndSubProcessNotTerminated_thenProcessWaitForReturnsFalse() throws IOException, InterruptedException {\n        ProcessBuilder builder = new ProcessBuilder(\"notepad.exe\");\n        Process process = builder.start();\n        assertFalse(process.waitFor(1, TimeUnit.SECONDS));\n    }\n\n    //@Test - windows specific\n    public void givenSubProcess_whenCurrentThreadWillNotWaitIndefinitelyforSubProcessToEnd_thenProcessExitValueReturnsGrt0() throws IOException {\n        ProcessBuilder builder = new ProcessBuilder(\"notepad.exe\");\n        Process process = builder.start();\n        assertThat(process.exitValue() >= 0);\n    }\n\n    @Test\n    public void givenRunningProcesses_whenFilterOnProcessIdRange_thenGetSelectedProcessPid() {\n        assertThat(((int) ProcessHandle.allProcesses()\n            .filter(ph -> (ph.pid() > 10000 && ph.pid() < 50000))\n            .count()) > 0);\n    }\n\n    @Test\n    public void givenSourceProgram_whenReadingInputStream_thenFirstLineEquals3() throws IOException, InterruptedException {\n\n        Runtime.getRuntime()\n                .exec(\"javac -cp src src/main/java/com/baeldung/java9/process/OutputStreamExample.java\"\n                        .replace(\"/\", File.separator))\n                .waitFor(5, TimeUnit.SECONDS);\n\n        Process process = Runtime.getRuntime()\n                .exec(\"java -cp src/main/java com.baeldung.java9.process.OutputStreamExample\"\n                .replace(\"/\", File.separator));\n\n        process.waitFor(5, TimeUnit.SECONDS);\n\n        BufferedReader output = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        String line = output.readLine();\n        int value = Integer.parseInt(line);\n\n        assertEquals(3, value);\n    }\n}\n"}
{"code_source": "package com.baeldung.jmxshell.custom;\n\npublic class JmxInvoker {\n\n    public static void main(String... args) throws Exception {\n        String serviceURL = args[0];\n        String name = args[1];\n        String operation = args[2];\n        String attributeValue = null;\n        if (args.length > 3) {\n            attributeValue = args[3];\n        }\n\n        String result = execute(serviceURL, name, operation, attributeValue);\n        System.out.println(result);\n    }\n\n    public static String execute(String url, String mBeanName, String operation, String attributeValue) {\n        try {\n            JmxConnectionWrapper connection = new JmxConnectionWrapper(url, mBeanName);\n\n            if (connection.hasAttribute(operation)) {\n                Object value = connection.attributeValue(operation, attributeValue);\n                return operation + \"=\" + value;\n            } else {\n                Object result = connection.invoke(operation);\n                return operation + \"(): \" + result;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return e.getClass() + \": \" + e.getMessage();\n        }\n    }\n}\n", "test_case": "package com.baeldung.jmxshell.custom;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\nimport org.junit.jupiter.api.Order;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestMethodOrder;\n\n@TestMethodOrder(OrderAnnotation.class)\nclass JmxInvokerLiveTest {\n\n    private static final String JMX_URL = \"service:jmx:rmi:///jndi/rmi://localhost:11234/jmxrmi\";\n    private static final String JMX_MBEAN_NAME = \"com.baeldung.jxmshell:name=calculator,type=basic\";\n    private static final String ATTRIBUTE_A = \"A\";\n    private static final String ATTRIBUTE_B = \"B\";\n    private static final String SUM_OPERATION = \"sum\";\n    private static final Integer ATTRIBUTE_VALUE = 1;\n\n    @Test\n    @Order(1)\n    void givenAttributeValue_whenSetAttributeA_thenResultMatches() {\n        String attributeValue = ATTRIBUTE_VALUE.toString();\n\n        String result = JmxInvoker.execute(JMX_URL, JMX_MBEAN_NAME, ATTRIBUTE_A, attributeValue);\n\n        assertEquals(ATTRIBUTE_A + \"=\" + attributeValue, result);\n    }\n\n    @Test\n    @Order(2)\n    void givenAttributeValue_whenSetAttributeB_thenResultMatches() {\n        String attributeValue = ATTRIBUTE_VALUE.toString();\n\n        String result = JmxInvoker.execute(JMX_URL, JMX_MBEAN_NAME, ATTRIBUTE_B, attributeValue);\n\n        assertEquals(ATTRIBUTE_B + \"=\" + attributeValue, result);\n    }\n\n    @Test\n    @Order(3)\n    void whenSumOperation_thenSumIsCorrect() {\n        String result = JmxInvoker.execute(JMX_URL, JMX_MBEAN_NAME, SUM_OPERATION, null);\n\n        assertEquals(SUM_OPERATION + \"(): \" + (ATTRIBUTE_VALUE + ATTRIBUTE_VALUE), result);\n    }\n}\n"}
{"code_source": "package com.baeldung.reflection;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.beans.Introspector;\nimport java.beans.PropertyDescriptor;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\nclass BaeldungReflectionUtils {\n\n    private static final Logger LOG = LoggerFactory.getLogger(BaeldungReflectionUtils.class);\n\n    static List<String> getNullPropertiesList(Customer customer) throws Exception {\n        PropertyDescriptor[] propDescArr = Introspector.getBeanInfo(Customer.class, Object.class).getPropertyDescriptors();\n\n        return Arrays.stream(propDescArr)\n          .filter(nulls(customer))\n          .map(PropertyDescriptor::getName)\n          .collect(Collectors.toList());\n    }\n\n    private static Predicate<PropertyDescriptor> nulls(Customer customer) {\n        return pd -> {\n            boolean result = false;\n            try {\n                Method getterMethod = pd.getReadMethod();\n                result = (getterMethod != null && getterMethod.invoke(customer) == null);\n            } catch (Exception e) {\n                LOG.error(\"error invoking getter method\");\n            }\n            return result;\n        };\n    }\n}\n", "test_case": "package com.baeldung.reflection;\n\nimport org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class BaeldungReflectionUtilsUnitTest {\n\n    @Test\n    public void givenCustomer_whenAFieldIsNull_thenFieldNameInResult() throws Exception {\n        Customer customer = new Customer(1, \"Himanshu\", null, null);\n\n        List<String> result = BaeldungReflectionUtils.getNullPropertiesList(customer);\n        List<String> expectedFieldNames = Arrays.asList(\"emailId\", \"phoneNumber\");\n\n        assertTrue(result.size() == expectedFieldNames.size());\n        assertTrue(result.containsAll(expectedFieldNames));\n\n    }\n\n}\n"}
{"code_source": "package com.baeldung.reflection.voidtype;\n\nimport java.util.concurrent.Callable;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\n\npublic class Defer {\n    public static <V> V defer(Callable<V> callable) throws Exception {\n        return callable.call();\n    }\n\n    public static void defer(Runnable runnable) {\n        runnable.run();\n    }\n\n    public static <T, R> R defer(Function<T, R> function, T arg) {\n        return function.apply(arg);\n    }\n\n    public static <T> void defer(Consumer<T> consumer, T arg) {\n        consumer.accept(arg);\n    }\n\n    public static void defer(Action action) {\n        action.execute();\n    }\n}\n", "test_case": "package com.baeldung.reflection.voidtype;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass DeferUnitTest {\n    @Test\n    void givenVoidCallable_whenDiffer_thenReturnNull() throws Exception {\n        Callable<Void> callable = new Callable<Void>() {\n            @Override\n            public Void call() {\n                System.out.println(\"Hello!\");\n                return null;\n            }\n        };\n\n        assertThat(Defer.defer(callable)).isNull();\n    }\n\n    @Test\n    void givenVoidRunnable_whenDiffer_thenNoReturn() {\n        AtomicBoolean run = new AtomicBoolean(false);\n\n        Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"Hello!\");\n                run.set(true);\n            }\n        };\n\n        Defer.defer(runnable);\n\n        assertTrue(run.get());\n    }\n\n    @Test\n    void givenVoidFunction_whenDiffer_thenReturnNull() {\n        Function<String, Void> function = s -> {\n            System.out.println(\"Hello \" + s + \"!\");\n            return null;\n        };\n\n        assertThat(Defer.defer(function, \"World\")).isNull();\n    }\n\n    @Test\n    void givenVoidConsumer_whenDiffer_thenReturnNull() {\n        AtomicBoolean run = new AtomicBoolean(false);\n\n        Consumer<String> function = s -> {\n            System.out.println(\"Hello \" + s + \"!\");\n            run.set(true);\n        };\n\n        Defer.defer(function, \"World\");\n\n        assertTrue(run.get());\n    }\n\n    @Test\n    void givenAction_whenDiffer_thenNoReturn() {\n        AtomicBoolean run = new AtomicBoolean(false);\n\n        Action action = () -> {\n            System.out.println(\"Hello!\");\n            run.set(true);\n        };\n\n        Defer.defer(action);\n\n        assertTrue(run.get());\n    }\n}"}
{"code_source": "package com.baeldung.reflection.voidtype;\n\nimport java.util.concurrent.Callable;\n\npublic class MyOwnDefer {\n    public static void defer(Runnable runnable) throws Exception {\n        Defer.defer(new Callable<Void>() {\n            @Override\n            public Void call() {\n                runnable.run();\n                return null;\n            }\n        });\n    }\n}\n", "test_case": "package com.baeldung.reflection.voidtype;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass MyOwnDeferUnitTest {\n    @Test\n    void defer() throws Exception {\n        AtomicBoolean run = new AtomicBoolean(false);\n        Runnable runnable = () -> {\n            System.out.println(\"Hello!\");\n            run.set(true);\n        };\n\n        MyOwnDefer.defer(runnable);\n\n        assertTrue(run.get());\n    }\n}"}
{"code_source": "package com.baeldung.reflection.access.packages;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\nimport org.reflections.Reflections;\nimport org.reflections.scanners.SubTypesScanner;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.common.reflect.ClassPath;\n\n@SuppressWarnings(\"rawtypes\")\npublic class AccessingAllClassesInPackage {\n\n    private static final Logger LOG = LoggerFactory.getLogger(AccessingAllClassesInPackage.class);\n\n    public Set<Class> findAllClassesUsingClassLoader(String packageName) {\n        InputStream stream = ClassLoader.getSystemClassLoader()\n            .getResourceAsStream(packageName.replaceAll(\"[.]\", \"/\"));\n        BufferedReader reader = new BufferedReader(new InputStreamReader(stream));\n        return reader.lines()\n            .filter(line -> line.endsWith(\".class\"))\n            .map(line -> getClass(line, packageName))\n            .collect(Collectors.toSet());\n    }\n\n    private Class getClass(String className, String packageName) {\n        try {\n            return Class.forName(packageName + \".\" + className.substring(0, className.lastIndexOf('.')));\n        } catch (ClassNotFoundException e) {\n            LOG.error(\"<<Class not found>>\");\n        }\n        return null;\n    }\n\n    public Set<Class> findAllClassesUsingReflectionsLibrary(String packageName) {\n        Reflections reflections = new Reflections(packageName, new SubTypesScanner(false));\n        return reflections.getSubTypesOf(Object.class)\n            .stream()\n            .collect(Collectors.toSet());\n    }\n\n    public Set<Class> findAllClassesUsingGoogleGuice(String packageName) throws IOException {\n        return ClassPath.from(ClassLoader.getSystemClassLoader())\n            .getAllClasses()\n            .stream()\n            .filter(clazz -> clazz.getPackageName()\n                .equalsIgnoreCase(packageName))\n            .map(clazz -> clazz.load())\n            .collect(Collectors.toSet());\n    }\n\n}\n", "test_case": "package com.baeldung.reflection.access.packages;\n\nimport java.io.IOException;\nimport java.util.Set;\n\nimport org.junit.Rule;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.junit.rules.ExpectedException;\n\n@SuppressWarnings(\"rawtypes\")\npublic class AccessingAllClassesInPackageUnitTest {\n    @Rule\n    public final ExpectedException exception = ExpectedException.none();\n\n    private static final String PACKAGE_NAME = \"com.baeldung.reflection.access.packages.search\";\n\n    @Test\n    public void when_findAllClassesUsingClassLoader_thenSuccess() {\n        AccessingAllClassesInPackage instance = new AccessingAllClassesInPackage();\n        Set<Class> classes = instance.findAllClassesUsingClassLoader(PACKAGE_NAME);\n        Assertions.assertEquals(5, classes.size());\n    }\n\n    @Test\n    public void when_findAllClassesUsingReflectionsLibrary_thenSuccess() {\n        AccessingAllClassesInPackage instance = new AccessingAllClassesInPackage();\n        Set<Class> classes = instance.findAllClassesUsingReflectionsLibrary(PACKAGE_NAME);\n        Assertions.assertEquals(5, classes.size());\n    }\n\n    @Test\n    public void when_findAllClassesUsingGoogleGuice_thenSuccess() throws IOException {\n        AccessingAllClassesInPackage instance = new AccessingAllClassesInPackage();\n        Set<Class> classes = instance.findAllClassesUsingGoogleGuice(PACKAGE_NAME);\n        Assertions.assertEquals(5, classes.size());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.reflection.access.staticmethods;\n\npublic class GreetingAndBye {\n\n    public static String greeting(String name) {\n        return String.format(\"Hey %s, nice to meet you!\", name);\n    }\n\n    private static String goodBye(String name) {\n        return String.format(\"Bye %s, see you next time.\", name);\n    }\n}\n", "test_case": "package com.baeldung.reflection.check.abstractclass;\n\nimport com.baeldung.reflection.access.staticmethods.GreetingAndBye;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nclass GreetingAndByeUnitTest {\n\n    @Test\n    void givenPublicStaticMethod_whenCallWithReflection_thenReturnExpectedResult() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        Class<GreetingAndBye> clazz = GreetingAndBye.class;\n        Method method = clazz.getMethod(\"greeting\", String.class);\n        Object result = method.invoke(null, \"Eric\");\n        Assertions.assertEquals(\"Hey Eric, nice to meet you!\", result);\n    }\n\n    @Test\n    void givenPrivateStaticMethod_whenCallWithReflection_thenReturnExpectedResult() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        Class<GreetingAndBye> clazz = GreetingAndBye.class;\n        Method method = clazz.getDeclaredMethod(\"goodBye\", String.class);\n        method.setAccessible(true);\n        Object result = method.invoke(null, \"Eric\");\n        Assertions.assertEquals(\"Bye Eric, see you next time.\", result);\n    }\n}\n"}
{"code_source": "package com.baeldung.reflection.check.abstractclass;\n\nimport java.time.LocalDate;\nimport java.time.LocalTime;\n\npublic abstract class AbstractExample {\n\n    public static String getAuthorName() {\n        return \"Umang Budhwar\";\n    }\n\n    public abstract LocalDate getLocalDate();\n\n    public abstract LocalTime getLocalTime();\n}\n", "test_case": "package com.baeldung.reflection.check.abstractclass;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.lang.reflect.Modifier;\nimport java.util.Date;\n\nclass AbstractExampleUnitTest {\n\n    @Test\n    void givenAbstractClass_whenCheckModifierIsAbstract_thenTrue() {\n        Class<AbstractExample> clazz = AbstractExample.class;\n        Assertions.assertTrue(Modifier.isAbstract(clazz.getModifiers()));\n    }\n\n    @Test\n    void givenInterface_whenCheckModifierIsAbstract_thenTrue() {\n        Class<InterfaceExample> clazz = InterfaceExample.class;\n        Assertions.assertTrue(Modifier.isAbstract(clazz.getModifiers()));\n    }\n\n    @Test\n    void givenAbstractClass_whenCheckIsAbstractClass_thenTrue() {\n        Class<AbstractExample> clazz = AbstractExample.class;\n        int mod = clazz.getModifiers();\n        Assertions.assertTrue(Modifier.isAbstract(mod) && !Modifier.isInterface(mod));\n    }\n\n    @Test\n    void givenConcreteClass_whenCheckIsAbstractClass_thenFalse() {\n        Class<Date> clazz = Date.class;\n        int mod = clazz.getModifiers();\n        Assertions.assertFalse(Modifier.isAbstract(mod) && !Modifier.isInterface(mod));\n    }\n}\n"}
{"code_source": "package com.baeldung.reflection.check.staticmethods;\n\nimport java.time.LocalDate;\nimport java.time.LocalTime;\n\npublic class StaticUtility {\n\n    public static String getAuthorName() {\n        return \"Umang Budhwar\";\n    }\n\n    public static LocalDate getLocalDate() {\n        return LocalDate.now();\n    }\n\n    public static LocalTime getLocalTime() {\n        return LocalTime.now();\n    }\n}\n", "test_case": "package com.baeldung.reflection.check.staticmethods;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nclass StaticUtilityUnitTest {\n\n    @Test\n    void whenCheckStaticMethod_ThenSuccess() throws Exception {\n        Method method = StaticUtility.class.getMethod(\"getAuthorName\", null);\n        Assertions.assertTrue(Modifier.isStatic(method.getModifiers()));\n    }\n\n    @Test\n    void whenCheckAllStaticMethods_thenSuccess() {\n        List<Method> methodList = Arrays.asList(StaticUtility.class.getMethods())\n          .stream()\n          .filter(method -> Modifier.isStatic(method.getModifiers()))\n          .collect(Collectors.toList());\n        Assertions.assertEquals(3, methodList.size());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.reflection.privatemethods;\n\npublic class Utils {\n\n    public static Integer validateAndDouble(Integer input) {\n        if (input == null) {\n            throw new IllegalArgumentException(\"input should not be null\");\n        }\n        return doubleInteger(input);\n    }\n\n    private static Integer doubleInteger(Integer input) {\n        if (input == null) {\n            return null;\n        }\n        return 2 * input;\n    }\n\n}\n", "test_case": "package com.baeldung.reflection.privatemethods;\n\nimport static com.baeldung.reflection.privatemethods.Utils.validateAndDouble;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport org.junit.jupiter.api.Test;\n\npublic class UtilsUnitTest {\n\n    // Let's start with the tests of the public API\n    @Test\n    void givenNull_WhenValidateAndDouble_ThenThrows() {\n        assertThrows(IllegalArgumentException.class, () -> validateAndDouble(null));\n    }\n\n    @Test\n    void givenANonNullInteger_WhenValidateAndDouble_ThenDoublesIt() {\n        assertEquals(4, validateAndDouble(2));\n    }\n\n    // Further on, let's test the private method\n    @Test\n    void givenNull_WhenDoubleInteger_ThenNull() throws InvocationTargetException, IllegalAccessException, NoSuchMethodException {\n        assertEquals(null, getDoubleIntegerMethod().invoke(null, new Integer[] { null }));\n    }\n\n    @Test\n    void givenANonNullInteger_WhenDoubleInteger_ThenDoubleIt() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n        assertEquals(74, getDoubleIntegerMethod().invoke(null, 37));\n    }\n\n    private Method getDoubleIntegerMethod() throws NoSuchMethodException {\n        Method method = Utils.class.getDeclaredMethod(\"doubleInteger\", Integer.class);\n        method.setAccessible(true);\n        return method;\n    }\n\n}\n"}
{"code_source": "package com.baeldung.regex.array;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.*;\n\t\nclass RegexMatches {\n\t\n    String[] regexMatch(String strSearch)\n\t{\n\t    List<String> matchesList = new ArrayList<String>();\n\t    String stringToSearch = strSearch;\n\t    Pattern p1 = Pattern.compile(\"780{1}\\\\d{7}\");\n\t    Matcher m1 = p1.matcher(stringToSearch);\n\t    while (m1.find()) \n\t    {\n\t    \tmatchesList.add(m1.group());\n\t    }\n\t    int sizeOfNewArray = matchesList.size();\n\t    String newArrayOfMatches[] = new String[sizeOfNewArray];\n\t    matchesList.toArray(newArrayOfMatches);\n\t    return newArrayOfMatches;\n\t}\n}\n", "test_case": "package com.baeldung.regex.array;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass RegexMatchesUnitTest {\n\n\t@Test\n\tvoid whenFourNums_thenFourMatches() {\n\t\tRegexMatches rm = new RegexMatches();\n\t\tString actual[] = rm.regexMatch(\"7801111211fsdafasdfa  7802222222  sadfsadfsda7803333333 sadfdasfasd 7804444444\");\n\t\t\n\t\tassertArrayEquals(new String[] {\"7801111211\", \"7802222222\", \"7803333333\", \"7804444444\"}, actual, \"success\");\n\t}\n\n\t@Test\n\tvoid whenThreeNums_thenThreeMatches() {\n\t\tRegexMatches rm = new RegexMatches();\n\t\tString actual[] = rm.regexMatch(\"7801111211fsdafasdfa  780222222  sadfsadfsda7803333333 sadfdasfasd 7804444444\");\n\t\t\n\t\tassertArrayEquals(new String[] {\"7801111211\", \"7803333333\", \"7804444444\"}, actual, \"success\");\n\t}\n\n\t@Test\n\tvoid whenZeroNums_thenZeroMatches() {\n\t\tRegexMatches rm = new RegexMatches();\n\t\tString actual[] = rm.regexMatch(\"78011111fsdafasdfa  780222222  sadfsadfsda78033333 sadfdasfasd 7804444\");\n\t\t\n\t\tassertArrayEquals(new String[] {}, actual, \"success\");\n\t}\n}\n"}
{"code_source": "package com.baeldung.regex.camelcasetowords;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Convert a string in camelCase or TitleCase into a list of words\n */\npublic class CamelCaseToWords {\n    private static final Pattern WORD_FINDER = Pattern.compile(\"(([A-Z]?[a-z]+)|([A-Z]))\");\n\n    /**\n     * Find the words in mixed case string like ThisIsText or HereIsSomeText\n     * @param text the text to parse\n     * @return the list of words to process\n     */\n    public static List<String> findWordsInMixedCase(String text) {\n        Matcher matcher = WORD_FINDER.matcher(text);\n        List<String> words = new ArrayList<>();\n        while (matcher.find()) {\n            words.add(matcher.group(0));\n        }\n        return words;\n    }\n}\n", "test_case": "package com.baeldung.regex.camelcasetowords;\n\nimport org.junit.jupiter.api.Test;\n\nimport static com.baeldung.regex.camelcasetowords.CamelCaseToWords.findWordsInMixedCase;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass CamelCaseToWordsUnitTest {\n\n    @Test\n    void givenPlainStringWithNonLetters_thenFindsWords() {\n        assertThat(findWordsInMixedCase(\"some words\"))\n          .containsExactly(\"some\", \"words\");\n    }\n\n    @Test\n    void givenWordsInCamelCase_thenFindsWords() {\n        assertThat(findWordsInMixedCase(\"thisIsCamelCaseText\"))\n          .containsExactly(\"this\", \"Is\", \"Camel\", \"Case\", \"Text\");\n    }\n\n    @Test\n    void givenWordsInTitleCase_thenFindsWords() {\n        assertThat(findWordsInMixedCase(\"ThisIsTitleCaseText\"))\n          .containsExactly(\"This\", \"Is\", \"Title\", \"Case\", \"Text\");\n    }\n\n    @Test\n    void givenWordsAcrossMultipleTexts_thenFindsWords() {\n        assertThat(findWordsInMixedCase(\"ThisIsTitleCaseText --- andSoIsThis\"))\n          .containsExactly(\"This\", \"Is\", \"Title\", \"Case\", \"Text\", \"and\", \"So\", \"Is\", \"This\");\n    }\n\n    @Test\n    void givenCamelCaseHasASingleLetterWord_thenItCanBeSplit() {\n        assertThat(findWordsInMixedCase(\"thisHasASingleLetterWord\"))\n          .containsExactly(\"this\", \"Has\", \"A\", \"Single\", \"Letter\", \"Word\");\n    }\n}"}
{"code_source": "package com.baeldung.regex.camelcasetowords;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class Recapitalize {\n    private static final Set<String> STOP_WORDS = Stream.of(\"a\", \"an\", \"the\", \"and\",\n      \"but\", \"for\", \"at\", \"by\", \"to\", \"or\")\n      .collect(Collectors.toSet());\n\n    public static String sentenceCase(List<String> words) {\n        List<String> capitalized = new ArrayList<>();\n        for (int i = 0; i < words.size(); i++) {\n            String currentWord = words.get(i);\n            if (i == 0) {\n                capitalized.add(capitalizeFirst(currentWord));\n            } else {\n                capitalized.add(currentWord.toLowerCase());\n            }\n        }\n        return String.join(\" \", capitalized) + \".\";\n    }\n\n    public static String capitalizeMyTitle(List<String> words) {\n        List<String> capitalized = new ArrayList<>();\n        for (int i = 0; i < words.size(); i++) {\n            String currentWord = words.get(i);\n            if (i == 0 || !STOP_WORDS.contains(currentWord.toLowerCase())) {\n                capitalized.add(capitalizeFirst(currentWord));\n            } else {\n                capitalized.add(currentWord.toLowerCase());\n            }\n        }\n        return String.join(\" \", capitalized);\n    }\n\n    private static String capitalizeFirst(String word) {\n        return word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase();\n    }\n}\n", "test_case": "package com.baeldung.regex.camelcasetowords;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\n\nimport static com.baeldung.regex.camelcasetowords.Recapitalize.*;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass RecapitalizeUnitTest {\n\n    @Test\n    void givenWords_thenCanComposeSentence() {\n        assertThat(sentenceCase(Arrays.asList(\"these\", \"Words\", \"Form\", \"A\", \"Sentence\")))\n          .isEqualTo(\"These words form a sentence.\");\n    }\n\n    @Test\n    void givenNonStopWords_thenTitleIsComposed() {\n        assertThat(capitalizeMyTitle(Arrays.asList(\"title\", \"words\", \"capitalize\")))\n          .isEqualTo(\"Title Words Capitalize\");\n    }\n\n    @Test\n    void givenStopWords_thenTitleHasThemInLowerCase() {\n        assertThat(capitalizeMyTitle(Arrays.asList(\"this\", \"is\", \"A\", \"title\", \"with\", \"a\", \"stop\", \"word\", \"or\", \"two\")))\n          .isEqualTo(\"This Is a Title With a Stop Word or Two\");\n    }\n\n    @Test\n    void givenStopWordIsFirstWord_thenTitleHasItCapitalized() {\n        assertThat(capitalizeMyTitle(Arrays.asList(\"a\", \"stop\", \"word\", \"first\")))\n          .isEqualTo(\"A Stop Word First\");\n    }\n}"}
{"code_source": "package com.baeldung.replacetokens;\n\nimport java.util.function.Function;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class ReplacingTokens {\n    public static final Pattern TITLE_CASE_PATTERN = Pattern.compile(\"(?<=^|[^A-Za-z])([A-Z][a-z]*)(?=[^A-Za-z]|$)\");\n\n    /**\n     * Iterate over the title case tokens in the input and replace them with lowercase\n     * @param original the original string\n     * @return a string with words replaced with their lowercase equivalents\n     */\n    public static String replaceTitleCaseWithLowerCase(String original) {\n        int lastIndex = 0;\n        StringBuilder output = new StringBuilder();\n        Matcher matcher = TITLE_CASE_PATTERN.matcher(original);\n        while (matcher.find()) {\n            output.append(original, lastIndex, matcher.start())\n                    .append(convert(matcher.group(1)));\n\n            lastIndex = matcher.end();\n        }\n        if (lastIndex < original.length()) {\n            output.append(original, lastIndex, original.length());\n        }\n        return output.toString();\n    }\n\n    /**\n     * Convert a token found into its desired lowercase\n     * @param token the token to convert\n     * @return the converted token\n     */\n    private static String convert(String token) {\n        return token.toLowerCase();\n    }\n\n    /**\n     * Replace all the tokens in an input using the algorithm provided for each\n     * @param original original string\n     * @param tokenPattern the pattern to match with\n     * @param converter the conversion to apply\n     * @return the substituted string\n     */\n    public static String replaceTokens(String original, Pattern tokenPattern,\n                                       Function<Matcher, String> converter) {\n        int lastIndex = 0;\n        StringBuilder output = new StringBuilder();\n        Matcher matcher = tokenPattern.matcher(original);\n        while (matcher.find()) {\n            output.append(original, lastIndex, matcher.start())\n                    .append(converter.apply(matcher));\n\n            lastIndex = matcher.end();\n        }\n        if (lastIndex < original.length()) {\n            output.append(original, lastIndex, original.length());\n        }\n        return output.toString();\n    }\n}\n", "test_case": "package com.baeldung.replacetokens;\n\nimport org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static com.baeldung.replacetokens.ReplacingTokens.TITLE_CASE_PATTERN;\nimport static com.baeldung.replacetokens.ReplacingTokens.replaceTokens;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class ReplacingTokensUnitTest {\n    private static final String EXAMPLE_INPUT = \"First 3 Capital Words! then 10 TLAs, I Found\";\n    private static final String EXAMPLE_INPUT_PROCESSED = \"first 3 capital words! then 10 TLAs, i found\";\n\n    @Test\n    public void whenFindMatches_thenTitleWordsFound() {\n        Matcher matcher = TITLE_CASE_PATTERN.matcher(EXAMPLE_INPUT);\n        List<String> matches = new ArrayList<>();\n        while (matcher.find()) {\n            matches.add(matcher.group(1));\n        }\n\n        assertThat(matches)\n          .containsExactly(\"First\", \"Capital\", \"Words\", \"I\", \"Found\");\n    }\n\n    @Test\n    public void exploreMatches() {\n        Matcher matcher = TITLE_CASE_PATTERN.matcher(EXAMPLE_INPUT);\n        while (matcher.find()) {\n            System.out.println(\"Match: \" + matcher.group(0));\n            System.out.println(\"Start: \" + matcher.start());\n            System.out.println(\"End: \" + matcher.end());\n        }\n    }\n\n    @Test\n    public void whenReplaceTokensWithLowerCase() {\n        assertThat(ReplacingTokens.replaceTitleCaseWithLowerCase(EXAMPLE_INPUT))\n          .isEqualTo(EXAMPLE_INPUT_PROCESSED);\n    }\n\n    @Test\n    public void whenReplaceTokensWithLowerCaseUsingGeneralPurpose() {\n        assertThat(replaceTokens(\"First 3 Capital Words! then 10 TLAs, I Found\",\n          TITLE_CASE_PATTERN,\n          match -> match.group(1).toLowerCase()))\n          .isEqualTo(\"first 3 capital words! then 10 TLAs, i found\");\n    }\n\n    @Test\n    public void escapeRegexCharacters() {\n        Pattern regexCharacters = Pattern.compile(\"[<(\\\\[{\\\\\\\\^\\\\-=$!|\\\\]})?*+.>]\");\n\n        assertThat(replaceTokens(\"A regex character like [\",\n          regexCharacters,\n          match -> \"\\\\\" + match.group()))\n          .isEqualTo(\"A regex character like \\\\[\");\n    }\n\n    @Test\n    public void replacePlaceholders() {\n        Pattern placeholderPattern = Pattern.compile(\"\\\\$\\\\{(?<placeholder>[A-Za-z0-9-_]+)}\");\n\n        Map<String, String> placeholderValues = new HashMap<>();\n        placeholderValues.put(\"name\", \"Bill\");\n        placeholderValues.put(\"company\", \"Baeldung\");\n\n        assertThat(replaceTokens(\"Hi ${name} at ${company}\",\n          placeholderPattern,\n          match -> placeholderValues.get(match.group(\"placeholder\"))))\n          .isEqualTo(\"Hi Bill at Baeldung\");\n    }\n}\n"}
{"code_source": "package com.baeldung.cipher;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.cert.Certificate;\n\npublic class Encryptor {\n\n    public byte[] encryptMessage(byte[] message, byte[] keyBytes) throws InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, BadPaddingException, IllegalBlockSizeException {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        SecretKey secretKey = new SecretKeySpec(keyBytes, \"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        byte[] encryptedMessage = cipher.doFinal(message);\n        return encryptedMessage;\n    }\n\n    public byte[] encryptMessage(byte[] message, Certificate publicKeyCertificate) throws InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, BadPaddingException, IllegalBlockSizeException {\n        Cipher cipher = Cipher.getInstance(\"RSA/ECB/PKCS1Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, publicKeyCertificate);\n        byte[] encryptedMessage = cipher.doFinal(message);\n        return encryptedMessage;\n    }\n\n    public byte[] decryptMessage(byte[] encryptedMessage, byte[] keyBytes) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        SecretKey secretKey = new SecretKeySpec(keyBytes, \"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n        byte[] clearMessage = cipher.doFinal(encryptedMessage);\n        return clearMessage;\n    }\n\n\n}\n", "test_case": "package com.baeldung.cipher;\n\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class EncryptorUnitTest {\n    private String encKeyString;\n    private String message;\n    private String  certificateString;\n    private Encryptor encryptor;\n\n    @Before\n    public void init(){\n        encKeyString =  \"1234567890123456\";\n        message = \"This is a secret message\";\n        encryptor =  new Encryptor();\n        certificateString = \"-----BEGIN CERTIFICATE-----\\n\" +\n                \"MIICVjCCAb8CAg37MA0GCSqGSIb3DQEBBQUAMIGbMQswCQYDVQQGEwJKUDEOMAwG\\n\" +\n                \"A1UECBMFVG9reW8xEDAOBgNVBAcTB0NodW8ta3UxETAPBgNVBAoTCEZyYW5rNERE\\n\" +\n                \"MRgwFgYDVQQLEw9XZWJDZXJ0IFN1cHBvcnQxGDAWBgNVBAMTD0ZyYW5rNEREIFdl\\n\" +\n                \"YiBDQTEjMCEGCSqGSIb3DQEJARYUc3VwcG9ydEBmcmFuazRkZC5jb20wHhcNMTIw\\n\" +\n                \"ODIyMDUyNzIzWhcNMTcwODIxMDUyNzIzWjBKMQswCQYDVQQGEwJKUDEOMAwGA1UE\\n\" +\n                \"CAwFVG9reW8xETAPBgNVBAoMCEZyYW5rNEREMRgwFgYDVQQDDA93d3cuZXhhbXBs\\n\" +\n                \"ZS5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMYBBrx5PlP0WNI/ZdzD\\n\" +\n                \"+6Pktmurn+F2kQYbtc7XQh8/LTBvCo+P6iZoLEmUA9e7EXLRxgU1CVqeAi7QcAn9\\n\" +\n                \"MwBlc8ksFJHB0rtf9pmf8Oza9E0Bynlq/4/Kb1x+d+AyhL7oK9tQwB24uHOueHi1\\n\" +\n                \"C/iVv8CSWKiYe6hzN1txYe8rAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAASPdjigJ\\n\" +\n                \"kXCqKWpnZ/Oc75EUcMi6HztaW8abUMlYXPIgkV2F7YanHOB7K4f7OOLjiz8DTPFf\\n\" +\n                \"jC9UeuErhaA/zzWi8ewMTFZW/WshOrm3fNvcMrMLKtH534JKvcdMg6qIdjTFINIr\\n\" +\n                \"evnAhf0cwULaebn+lMs8Pdl7y37+sfluVok=\\n\" +\n                \"-----END CERTIFICATE-----\";\n    }\n\n    @Test\n    public void givenEncryptionKey_whenMessageIsPassedToEncryptor_thenMessageIsEncrypted() throws Exception {\n        byte[] encryptedMessage = encryptor.encryptMessage(message.getBytes(),encKeyString.getBytes());\n\n        assertThat(encryptedMessage).isNotNull();\n        assertThat(encryptedMessage.length  % 32).isEqualTo(0);\n    }\n\n    @Test\n    public void givenCertificateWithPublicKey_whenMessageIsPassedToEncryptor_thenMessageIsEncrypted() throws Exception {\n        CertificateFactory factory = CertificateFactory.getInstance(\"X.509\");\n        InputStream is = new ByteArrayInputStream(certificateString.getBytes());\n        X509Certificate certificate = (X509Certificate) factory.generateCertificate(is);\n\n        byte[] encryptedMessage = encryptor.encryptMessage(message.getBytes(),certificate);\n\n        assertThat(encryptedMessage).isNotNull();\n        assertThat(encryptedMessage.length  % 128).isEqualTo(0);\n    }\n\n    @Test\n    public void givenEncryptionKey_whenMessageIsEncrypted_thenDecryptMessage() throws Exception{\n        byte[] encryptedMessageBytes = encryptor.encryptMessage(message.getBytes(),encKeyString.getBytes());\n\n        byte[] clearMessageBytes = encryptor.decryptMessage(encryptedMessageBytes, encKeyString.getBytes());\n\n        assertThat(message).isEqualTo(new String(clearMessageBytes));\n    }\n}\n"}
{"code_source": "package com.baeldung.encrypt;\n\nimport javax.crypto.*;\nimport javax.crypto.spec.IvParameterSpec;\nimport java.io.*;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nclass FileEncrypterDecrypter {\n\n    private SecretKey secretKey;\n    private Cipher cipher;\n\n    FileEncrypterDecrypter(SecretKey secretKey, String cipher) throws NoSuchPaddingException, NoSuchAlgorithmException {\n        this.secretKey = secretKey;\n        this.cipher = Cipher.getInstance(cipher);\n    }\n\n    void encrypt(String content, String fileName) throws InvalidKeyException, IOException {\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        byte[] iv = cipher.getIV();\n\n        try (\n                FileOutputStream fileOut = new FileOutputStream(fileName);\n                CipherOutputStream cipherOut = new CipherOutputStream(fileOut, cipher)\n        ) {\n            fileOut.write(iv);\n            cipherOut.write(content.getBytes());\n        }\n\n    }\n\n    String decrypt(String fileName) throws InvalidAlgorithmParameterException, InvalidKeyException, IOException {\n\n        String content;\n\n        try (FileInputStream fileIn = new FileInputStream(fileName)) {\n            byte[] fileIv = new byte[16];\n            fileIn.read(fileIv);\n            cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(fileIv));\n\n            try (\n                    CipherInputStream cipherIn = new CipherInputStream(fileIn, cipher);\n                    InputStreamReader inputReader = new InputStreamReader(cipherIn);\n                    BufferedReader reader = new BufferedReader(inputReader)\n                ) {\n\n                StringBuilder sb = new StringBuilder();\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    sb.append(line);\n                }\n                content = sb.toString();\n            }\n\n        }\n        return content;\n    }\n}\n", "test_case": "package com.baeldung.encrypt;\n\nimport org.junit.Test;\n\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport java.io.File;\nimport java.io.IOException;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.assertThat;\n\npublic class FileEncrypterDecrypterIntegrationTest {\n\n    @Test\n    public void givenStringAndFilename_whenEncryptingIntoFile_andDecryptingFileAgain_thenOriginalStringIsReturned() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IOException, InvalidAlgorithmParameterException {\n        String originalContent = \"foobar\";\n        SecretKey secretKey = KeyGenerator.getInstance(\"AES\").generateKey();\n\n        FileEncrypterDecrypter fileEncrypterDecrypter = new FileEncrypterDecrypter(secretKey, \"AES/CBC/PKCS5Padding\");\n        fileEncrypterDecrypter.encrypt(originalContent, \"baz.enc\");\n\n        String decryptedContent = fileEncrypterDecrypter.decrypt(\"baz.enc\");\n        assertThat(decryptedContent, is(originalContent));\n\n        new File(\"baz.enc\").delete(); // cleanup\n    }\n}\n"}
{"code_source": "package com.baeldung.keystore;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.PrivateKey;\nimport java.security.UnrecoverableEntryException;\nimport java.security.cert.Certificate;\nimport java.security.cert.CertificateException;\nimport java.util.Enumeration;\n\n/**\n * Created by adi on 3/7/18.\n */\npublic class JavaKeyStore {\n\n    private KeyStore keyStore;\n\n    private String keyStoreName;\n    private String keyStoreType;\n    private String keyStorePassword;\n\n    JavaKeyStore(String keyStoreType, String keyStorePassword, String keyStoreName) throws CertificateException, NoSuchAlgorithmException, KeyStoreException, IOException {\n        this.keyStoreName = keyStoreName;\n        this.keyStoreType = keyStoreType;\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    void createEmptyKeyStore() throws KeyStoreException, CertificateException, NoSuchAlgorithmException, IOException {\n        if(keyStoreType ==null || keyStoreType.isEmpty()){\n            keyStoreType = KeyStore.getDefaultType();\n        }\n        keyStore = KeyStore.getInstance(keyStoreType);\n        //load\n        char[] pwdArray = keyStorePassword.toCharArray();\n        keyStore.load(null, pwdArray);\n\n        // Save the keyStore\n        FileOutputStream fos = new FileOutputStream(keyStoreName);\n        keyStore.store(fos, pwdArray);\n        fos.close();\n    }\n\n    void loadKeyStore() throws IOException, KeyStoreException, CertificateException, NoSuchAlgorithmException {\n        char[] pwdArray = keyStorePassword.toCharArray();\n        FileInputStream fis = new FileInputStream(keyStoreName);\n        keyStore.load(fis, pwdArray);\n        fis.close();\n    }\n\n    void setEntry(String alias, KeyStore.SecretKeyEntry secretKeyEntry, KeyStore.ProtectionParameter protectionParameter) throws KeyStoreException {\n        keyStore.setEntry(alias, secretKeyEntry, protectionParameter);\n    }\n\n    KeyStore.Entry getEntry(String alias) throws UnrecoverableEntryException, NoSuchAlgorithmException, KeyStoreException {\n        KeyStore.ProtectionParameter protParam = new KeyStore.PasswordProtection(keyStorePassword.toCharArray());\n        return keyStore.getEntry(alias, protParam);\n    }\n\n    void setKeyEntry(String alias, PrivateKey privateKey, String keyPassword, Certificate[] certificateChain) throws KeyStoreException {\n        keyStore.setKeyEntry(alias, privateKey, keyPassword.toCharArray(), certificateChain);\n    }\n\n    void setCertificateEntry(String alias, Certificate certificate) throws KeyStoreException {\n        keyStore.setCertificateEntry(alias, certificate);\n    }\n\n    Certificate getCertificate(String alias) throws KeyStoreException {\n        return keyStore.getCertificate(alias);\n    }\n\n    void deleteEntry(String alias) throws KeyStoreException {\n        keyStore.deleteEntry(alias);\n    }\n\n    void deleteKeyStore() throws KeyStoreException, IOException {\n        Enumeration<String> aliases = keyStore.aliases();\n        while (aliases.hasMoreElements()) {\n            String alias = aliases.nextElement();\n            keyStore.deleteEntry(alias);\n        }\n        keyStore = null;\n        \n        Path keyStoreFile = Paths.get(keyStoreName);\n        Files.delete(keyStoreFile);\n    }\n\n    KeyStore getKeyStore() {\n        return this.keyStore;\n    }\n}\n", "test_case": "package com.baeldung.keystore;\n\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport sun.security.x509.AlgorithmId;\nimport sun.security.x509.CertificateAlgorithmId;\nimport sun.security.x509.CertificateSerialNumber;\nimport sun.security.x509.CertificateValidity;\nimport sun.security.x509.CertificateVersion;\nimport sun.security.x509.CertificateX509Key;\nimport sun.security.x509.SubjectAlternativeNameExtension;\nimport sun.security.x509.X500Name;\nimport sun.security.x509.X509CertImpl;\nimport sun.security.x509.X509CertInfo;\nimport sun.security.x509.CertificateExtensions;\nimport sun.security.x509.GeneralNames;\nimport sun.security.x509.GeneralName;\nimport sun.security.x509.GeneralNameInterface;\nimport sun.security.x509.DNSName;\nimport sun.security.x509.IPAddressName;\nimport sun.security.util.DerOutputStream;\n\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.security.InvalidKeyException;\nimport java.security.KeyPair;\nimport java.security.KeyPairGenerator;\nimport java.security.KeyStore;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.NoSuchProviderException;\nimport java.security.SecureRandom;\nimport java.security.SignatureException;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.Date;\n\n/**\n * Created by adi on 4/14/18.\n */\npublic class JavaKeyStoreUnitTest {\n\n    private JavaKeyStore keyStore;\n\n    private static final String KEYSTORE_PWD = \"abc123\";\n    private static final String KEYSTORE_NAME = \"myKeyStore\";\n    private static final String KEY_STORE_TYPE = \"JCEKS\";\n\n    private static final String MY_SECRET_ENTRY = \"mySecretEntry\";\n    private static final String DN_NAME = \"CN=test, OU=test, O=test, L=test, ST=test, C=CY\";\n    private static final String SHA1WITHRSA = \"SHA1withRSA\";\n    private static final String MY_PRIVATE_KEY = \"myPrivateKey\";\n    private static final String MY_CERTIFICATE = \"myCertificate\";\n\n    @Before\n    public void setUp() throws Exception {\n        //using java cryptography extension keyStore instead of Keystore.getDefaultType\n        keyStore = new JavaKeyStore(KEY_STORE_TYPE, KEYSTORE_PWD, KEYSTORE_NAME);\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        if (keyStore.getKeyStore() != null) {\n            keyStore.deleteKeyStore();\n        }\n    }\n\n    @Test\n    public void givenNoKeyStore_whenCreateEmptyKeyStore_thenGetKeyStoreNotNull() throws Exception {\n        keyStore.createEmptyKeyStore();\n        KeyStore result = keyStore.getKeyStore();\n        Assert.assertNotNull(result);\n    }\n\n    @Test\n    public void givenEmptyKeystore_whenLoadKeyStore_thenKeyStoreLoadedAndSizeZero() throws Exception {\n        keyStore.createEmptyKeyStore();\n        keyStore.loadKeyStore();\n        KeyStore result = keyStore.getKeyStore();\n        Assert.assertNotNull(result);\n        Assert.assertTrue(result.size() == 0);\n    }\n\n    @Test\n    public void givenLoadedKeyStore_whenSetEntry_thenSizeIsOneAndGetKeyNotNull() throws Exception {\n        keyStore.createEmptyKeyStore();\n        keyStore.loadKeyStore();\n\n        KeyGenerator keygen = KeyGenerator.getInstance(\"HmacSHA256\");\n        SecretKey secretKey = keygen.generateKey();\n        //ideally, password should be different for every key\n        KeyStore.ProtectionParameter protParam = new KeyStore.PasswordProtection(KEYSTORE_PWD.toCharArray());\n        KeyStore.SecretKeyEntry secretKeyEntry = new KeyStore.SecretKeyEntry(secretKey);\n        keyStore.setEntry(MY_SECRET_ENTRY, secretKeyEntry, protParam);\n\n        KeyStore result = keyStore.getKeyStore();\n        Assert.assertTrue(result.size() == 1);\n        KeyStore.Entry entry = keyStore.getEntry(MY_SECRET_ENTRY);\n        Assert.assertTrue(entry != null);\n    }\n\n    @Test\n    public void givenLoadedKeyStore_whenSetKeyEntry_thenSizeIsOneAndGetEntryNotNull() throws Exception {\n        keyStore.createEmptyKeyStore();\n        keyStore.loadKeyStore();\n\n        // Generate the key pair\n        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n        keyPairGenerator.initialize(1024);\n        KeyPair keyPair = keyPairGenerator.generateKeyPair();\n\n        // Generate a self signed certificate\n        X509Certificate certificate = generateSelfSignedCertificate(keyPair);\n\n        X509Certificate[] certificateChain = new X509Certificate[1];\n        certificateChain[0] = certificate;\n        keyStore.setKeyEntry(MY_PRIVATE_KEY, keyPair.getPrivate(), KEYSTORE_PWD, certificateChain);\n\n        KeyStore result = keyStore.getKeyStore();\n        Assert.assertTrue(result.size() == 1);\n        KeyStore.Entry entry = keyStore.getEntry(MY_PRIVATE_KEY);\n        Assert.assertTrue(entry != null);\n    }\n\n    @Test\n    public void givenLoadedKeyStore_whenSetCertificateEntry_thenSizeIsOneAndGetCertificateEntryNotNull() throws Exception {\n        keyStore.createEmptyKeyStore();\n        keyStore.loadKeyStore();\n\n        // Generate the key pair\n        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n        keyPairGenerator.initialize(1024);\n        KeyPair keyPair = keyPairGenerator.generateKeyPair();\n\n        // Generate a self signed certificate\n        X509Certificate certificate = generateSelfSignedCertificate(keyPair);\n\n        keyStore.setCertificateEntry(MY_CERTIFICATE, certificate);\n\n        KeyStore result = this.keyStore.getKeyStore();\n        Assert.assertTrue(result.size() == 1);\n        java.security.cert.Certificate resultCertificate = keyStore.getCertificate(MY_CERTIFICATE);\n        Assert.assertNotNull(resultCertificate);\n    }\n\n    @Test\n    public void givenLoadedKeyStoreWithOneEntry_whenDeleteEntry_thenKeyStoreSizeIsZero() throws Exception {\n        keyStore.createEmptyKeyStore();\n        keyStore.loadKeyStore();\n\n        KeyGenerator keygen = KeyGenerator.getInstance(\"HmacSHA256\");\n        SecretKey secretKey = keygen.generateKey();\n        //ideally, password should be different for every key\n        KeyStore.ProtectionParameter protParam = new KeyStore.PasswordProtection(KEYSTORE_PWD.toCharArray());\n        KeyStore.SecretKeyEntry secretKeyEntry = new KeyStore.SecretKeyEntry(secretKey);\n        keyStore.setEntry(MY_SECRET_ENTRY, secretKeyEntry, protParam);\n\n        keyStore.deleteEntry(MY_SECRET_ENTRY);\n\n        KeyStore result = this.keyStore.getKeyStore();\n        Assert.assertTrue(result.size() == 0);\n    }\n\n    @Test\n    public void givenLoadedKeystore_whenDeleteKeyStore_thenKeyStoreIsNull() throws Exception {\n        keyStore.createEmptyKeyStore();\n        keyStore.loadKeyStore();\n\n        keyStore.deleteKeyStore();\n\n        KeyStore result = this.keyStore.getKeyStore();\n        Assert.assertTrue(result == null);\n    }\n\n    private X509Certificate generateSelfSignedCertificate(KeyPair keyPair) throws CertificateException, IOException, NoSuchProviderException, NoSuchAlgorithmException, InvalidKeyException, SignatureException {\n        X509CertInfo certInfo = new X509CertInfo();\n        // Serial number and version\n        certInfo.set(X509CertInfo.SERIAL_NUMBER, new CertificateSerialNumber(new BigInteger(64, new SecureRandom())));\n        certInfo.set(X509CertInfo.VERSION, new CertificateVersion(CertificateVersion.V3));\n\n        // Subject & Issuer\n        X500Name owner = new X500Name(DN_NAME);\n        certInfo.set(X509CertInfo.SUBJECT, owner);\n        certInfo.set(X509CertInfo.ISSUER, owner);\n\n        // Key and algorithm\n        certInfo.set(X509CertInfo.KEY, new CertificateX509Key(keyPair.getPublic()));\n        AlgorithmId algorithm = new AlgorithmId(AlgorithmId.sha1WithRSAEncryption_oid);\n        certInfo.set(X509CertInfo.ALGORITHM_ID, new CertificateAlgorithmId(algorithm));\n\n        // Validity\n        Date validFrom = new Date();\n        Date validTo = new Date(validFrom.getTime() + 50L * 365L * 24L * 60L * 60L * 1000L); //50 years\n        CertificateValidity validity = new CertificateValidity(validFrom, validTo);\n        certInfo.set(X509CertInfo.VALIDITY, validity);\n        \n        GeneralNameInterface dnsName = new DNSName(\"baeldung.com\");\n        DerOutputStream dnsNameOutputStream = new DerOutputStream();\n        dnsName.encode(dnsNameOutputStream);\n        \n        GeneralNameInterface ipAddress = new IPAddressName(\"127.0.0.1\");\n        DerOutputStream ipAddressOutputStream = new DerOutputStream();\n        ipAddress.encode(ipAddressOutputStream);\n        \n        GeneralNames generalNames = new GeneralNames();\n        generalNames.add(new GeneralName(dnsName));\n        generalNames.add(new GeneralName(ipAddress));\n        \n        CertificateExtensions ext = new CertificateExtensions();\n        ext.set(SubjectAlternativeNameExtension.NAME, new SubjectAlternativeNameExtension(generalNames));\n\n        certInfo.set(X509CertInfo.EXTENSIONS, ext);        \n\n        // Create certificate and sign it\n        X509CertImpl cert = new X509CertImpl(certInfo);\n        cert.sign(keyPair.getPrivate(), SHA1WITHRSA);\n\n        // Since the SHA1withRSA provider may have a different algorithm ID to what we think it should be,\n        // we need to reset the algorithm ID, and resign the certificate\n        AlgorithmId actualAlgorithm = (AlgorithmId) cert.get(X509CertImpl.SIG_ALG);\n        certInfo.set(CertificateAlgorithmId.NAME + \".\" + CertificateAlgorithmId.ALGORITHM, actualAlgorithm);\n        X509CertImpl newCert = new X509CertImpl(certInfo);\n        newCert.sign(keyPair.getPrivate(), SHA1WITHRSA);\n\n        return newCert;\n    }\n\n}"}
{"code_source": "package com.baeldung.checksums;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.zip.CRC32;\nimport java.util.zip.CheckedInputStream;\nimport java.util.zip.Checksum;\n\npublic class ChecksumUtils {\n\n    public static long getChecksumCRC32(byte[] bytes) {\n        Checksum crc32 = new CRC32();\n        crc32.update(bytes, 0, bytes.length);\n        return crc32.getValue();\n    }\n\n    public static long getChecksumCRC32(InputStream stream, int bufferSize) throws IOException {\n        CheckedInputStream checkedInputStream = new CheckedInputStream(stream, new CRC32());\n        byte[] buffer = new byte[bufferSize];\n        while (checkedInputStream.read(buffer, 0, buffer.length) >= 0) {}\n        return checkedInputStream.getChecksum().getValue();\n    }\n}\n", "test_case": "package com.baeldung.checksums;\n\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ChecksumUtilsUnitTest {\n\n    byte[] arr;\n\n    @Before\n    void setUp() {\n        arr =  new byte[]{0,10,21,20,35,40,120,56,72,22};\n    }\n\n    @Test\n    void givenByteArray_whenChecksumCreated_checkCorrect() {\n\n        long checksum = ChecksumUtils.getChecksumCRC32(arr);\n\n        assertEquals(3915397664L, checksum);\n    }\n\n    @Test\n    void givenTwoDifferentStrings_whenChecksumCreated_checkCollision() {\n\n        String plumless = \"plumless\";\n        String buckeroo = \"buckeroo\";\n\n        long plumlessChecksum = ChecksumUtils.getChecksumCRC32(plumless.getBytes());\n        long buckerooChecksum = ChecksumUtils.getChecksumCRC32(buckeroo.getBytes());\n\n        assertEquals(plumlessChecksum, buckerooChecksum);\n    }\n\n    @Test\n    void givenInputString_whenChecksumCreated_checkCorrect() throws IOException {\n\n        InputStream inputStream = new ByteArrayInputStream(arr);\n        long checksum = ChecksumUtils.getChecksumCRC32(inputStream, 10);\n\n        assertEquals(3915397664L, checksum);\n\n    }\n}"}
{"code_source": "package com.baeldung.hashing;\n\nimport org.bouncycastle.jcajce.provider.digest.Keccak;\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\nimport org.bouncycastle.util.encoders.Hex;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.Security;\n\nimport static com.baeldung.hashing.DigestAlgorithms.KECCAK_256;\nimport static com.baeldung.hashing.SHACommonUtils.bytesToHex;\n\npublic class Keccak256Hashing {\n\n    public static String hashWithJavaMessageDigest(final String originalString) throws NoSuchAlgorithmException {\n        Security.addProvider(new BouncyCastleProvider());\n        final MessageDigest digest = MessageDigest.getInstance(KECCAK_256);\n        final byte[] encodedhash = digest.digest(originalString.getBytes(StandardCharsets.UTF_8));\n        return bytesToHex(encodedhash);\n    }\n\n    public static String hashWithBouncyCastle(final String originalString) {\n        Keccak.Digest256 digest256 = new Keccak.Digest256();\n        byte[] hashbytes = digest256.digest(originalString.getBytes(StandardCharsets.UTF_8));\n        return new String(Hex.encode(hashbytes));\n    }\n\n}\n", "test_case": "package com.baeldung.hashing;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class Keccak256HashingUnitTest {\n\n    private static String originalValue = \"abc123\";\n    private static String hashedValue = \"719accc61a9cc126830e5906f9d672d06eab6f8597287095a2c55a8b775e7016\";\n\n    @Test public void testHashWithJavaMessageDigest() throws Exception {\n        final String currentHashedValue = Keccak256Hashing.hashWithJavaMessageDigest(originalValue);\n        assertEquals(hashedValue, currentHashedValue);\n    }\n\n    @Test public void testHashWithBouncyCastle() {\n        final String currentHashedValue = Keccak256Hashing.hashWithBouncyCastle(originalValue);\n        assertEquals(hashedValue, currentHashedValue);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.hashing;\n\nimport com.google.common.hash.Hashing;\nimport org.apache.commons.codec.digest.DigestUtils;\nimport org.bouncycastle.util.encoders.Hex;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\nimport static com.baeldung.hashing.DigestAlgorithms.SHA_256;\nimport static com.baeldung.hashing.SHACommonUtils.bytesToHex;\n\npublic class SHA256Hashing {\n\n    public static String HashWithJavaMessageDigest(final String originalString) throws NoSuchAlgorithmException {\n        final MessageDigest digest = MessageDigest.getInstance(SHA_256);\n        final byte[] encodedhash = digest.digest(originalString.getBytes(StandardCharsets.UTF_8));\n        return bytesToHex(encodedhash);\n    }\n\n    public static String hashWithGuava(final String originalString) {\n        final String sha256hex = Hashing.sha256().hashString(originalString, StandardCharsets.UTF_8).toString();\n        return sha256hex;\n    }\n\n    public static String HashWithApacheCommons(final String originalString) {\n        final String sha256hex = DigestUtils.sha256Hex(originalString);\n        return sha256hex;\n    }\n\n    public static String HashWithBouncyCastle(final String originalString) throws NoSuchAlgorithmException {\n        final MessageDigest digest = MessageDigest.getInstance(SHA_256);\n        final byte[] hash = digest.digest(originalString.getBytes(StandardCharsets.UTF_8));\n        final String sha256hex = new String(Hex.encode(hash));\n        return sha256hex;\n    }\n\n}\n", "test_case": "package com.baeldung.hashing;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class SHA256HashingUnitTest {\n\n    private static String originalValue = \"abc123\";\n    private static String hashedValue = \"6ca13d52ca70c883e0f0bb101e425a89e8624de51db2d2392593af6a84118090\";\n\n    @Test\n    public void testHashWithJavaMessageDigest() throws Exception {\n        final String currentHashedValue = SHA256Hashing.HashWithJavaMessageDigest(originalValue);\n        assertEquals(hashedValue, currentHashedValue);\n    }\n\n    @Test\n    public void testHashWithGuava() throws Exception {\n        final String currentHashedValue = SHA256Hashing.hashWithGuava(originalValue);\n        assertEquals(hashedValue, currentHashedValue);\n    }\n\n    @Test\n    public void testHashWithApacheCommans() throws Exception {\n        final String currentHashedValue = SHA256Hashing.HashWithApacheCommons(originalValue);\n        assertEquals(hashedValue, currentHashedValue);\n    }\n\n    @Test\n    public void testHashWithBouncyCastle() throws Exception {\n        final String currentHashedValue = SHA256Hashing.HashWithBouncyCastle(originalValue);\n        assertEquals(hashedValue, currentHashedValue);\n    }\n}"}
{"code_source": "package com.baeldung.hashing;\n\nimport com.google.common.hash.Hashing;\nimport org.apache.commons.codec.digest.DigestUtils;\nimport org.bouncycastle.crypto.digests.SHA3Digest;\nimport org.bouncycastle.jcajce.provider.digest.SHA3;\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\nimport org.bouncycastle.util.encoders.Hex;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.Security;\n\nimport static com.baeldung.hashing.DigestAlgorithms.SHA3_256;\nimport static com.baeldung.hashing.SHACommonUtils.bytesToHex;\n\npublic class SHA3Hashing {\n\n    /* works with JDK9+ only */\n    public static String hashWithJavaMessageDigestJDK9(final String originalString) throws NoSuchAlgorithmException {\n        final MessageDigest digest = MessageDigest.getInstance(SHA3_256);\n        final byte[] hashbytes = digest.digest(originalString.getBytes(StandardCharsets.UTF_8));\n        return bytesToHex(hashbytes);\n    }\n\n    public static String hashWithJavaMessageDigest(final String originalString) throws NoSuchAlgorithmException {\n        Security.addProvider(new BouncyCastleProvider());\n        final MessageDigest digest = MessageDigest.getInstance(SHA3_256);\n        final byte[] hashbytes = digest.digest(originalString.getBytes(StandardCharsets.UTF_8));\n        return bytesToHex(hashbytes);\n    }\n\n    /* works with JDK9+ only */\n    public static String hashWithApacheCommonsJDK9(final String originalString) {\n        return new DigestUtils(SHA3_256).digestAsHex(originalString);\n    }\n\n    public static String hashWithBouncyCastle(final String originalString) {\n        SHA3.Digest256 digest256 = new SHA3.Digest256();\n        byte[] hashbytes = digest256.digest(originalString.getBytes(StandardCharsets.UTF_8));\n        return new String(Hex.encode(hashbytes));\n    }\n\n}\n", "test_case": "package com.baeldung.hashing;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class SHA3HashingUnitTest {\n\n    private static String originalValue = \"abc123\";\n    private static String hashedValue = \"f58fa3df820114f56e1544354379820cff464c9c41cb3ca0ad0b0843c9bb67ee\";\n\n    /* works with JDK9+ only */\n    //@Test\n    public void testHashWithJavaMessageDigestJDK9() throws Exception {\n        final String currentHashedValue = SHA3Hashing.hashWithJavaMessageDigestJDK9(originalValue);\n        assertEquals(hashedValue, currentHashedValue);\n    }\n\n    @Test\n    public void testHashWithJavaMessageDigest() throws Exception {\n        final String currentHashedValue = SHA3Hashing.hashWithJavaMessageDigest(originalValue);\n        assertEquals(hashedValue, currentHashedValue);\n    }\n\n    /* works with JDK9+ only */\n    //@Test\n    public void testHashWithApacheCommonsJDK9() {\n        final String currentHashedValue = SHA3Hashing.hashWithApacheCommonsJDK9(originalValue);\n        assertEquals(hashedValue, currentHashedValue);\n    }\n\n    @Test\n    public void testHashWithBouncyCastle() {\n        final String currentHashedValue = SHA3Hashing.hashWithBouncyCastle(originalValue);\n        assertEquals(hashedValue, currentHashedValue);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.passwordhashing;\n\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.spec.InvalidKeySpecException;\nimport java.security.spec.KeySpec;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\n\n/**\n * Hash passwords for storage, and test passwords against password tokens.\n *\n * Instances of this class can be used concurrently by multiple threads.\n *\n * @author erickson\n * @see <a href=\"http://stackoverflow.com/a/2861125/3474\">StackOverflow</a>\n */\npublic final class PBKDF2Hasher\n{\n\n  /**\n   * Each token produced by this class uses this identifier as a prefix.\n   */\n  public static final String ID = \"$31$\";\n\n  /**\n   * The minimum recommended cost, used by default\n   */\n  public static final int DEFAULT_COST = 16;\n\n  private static final String ALGORITHM = \"PBKDF2WithHmacSHA1\";\n\n  private static final int SIZE = 128;\n\n  private static final Pattern layout = Pattern.compile(\"\\\\$31\\\\$(\\\\d\\\\d?)\\\\$(.{43})\");\n\n  private final SecureRandom random;\n\n  private final int cost;\n\n  public PBKDF2Hasher()\n  {\n    this(DEFAULT_COST);\n  }\n\n  /**\n   * Create a password manager with a specified cost\n   *\n   * @param cost the exponential computational cost of hashing a password, 0 to 30\n   */\n  public PBKDF2Hasher(int cost)\n  {\n    iterations(cost); /* Validate cost */\n    this.cost = cost;\n    this.random = new SecureRandom();\n  }\n\n  private static int iterations(int cost)\n  {\n    if ((cost < 0) || (cost > 30))\n      throw new IllegalArgumentException(\"cost: \" + cost);\n    return 1 << cost;\n  }\n\n  /**\n   * Hash a password for storage.\n   *\n   * @return a secure authentication token to be stored for later authentication\n   */\n  public String hash(char[] password)\n  {\n    byte[] salt = new byte[SIZE / 8];\n    random.nextBytes(salt);\n    byte[] dk = pbkdf2(password, salt, 1 << cost);\n    byte[] hash = new byte[salt.length + dk.length];\n    System.arraycopy(salt, 0, hash, 0, salt.length);\n    System.arraycopy(dk, 0, hash, salt.length, dk.length);\n    Base64.Encoder enc = Base64.getUrlEncoder().withoutPadding();\n    return ID + cost + '$' + enc.encodeToString(hash);\n  }\n\n  /**\n   * Authenticate with a password and a stored password token.\n   *\n   * @return true if the password and token match\n   */\n  public boolean checkPassword(char[] password, String token)\n  {\n    Matcher m = layout.matcher(token);\n    if (!m.matches())\n      throw new IllegalArgumentException(\"Invalid token format\");\n    int iterations = iterations(Integer.parseInt(m.group(1)));\n    byte[] hash = Base64.getUrlDecoder().decode(m.group(2));\n    byte[] salt = Arrays.copyOfRange(hash, 0, SIZE / 8);\n    byte[] check = pbkdf2(password, salt, iterations);\n    int zero = 0;\n    for (int idx = 0; idx < check.length; ++idx)\n      zero |= hash[salt.length + idx] ^ check[idx];\n    return zero == 0;\n  }\n\n  private static byte[] pbkdf2(char[] password, byte[] salt, int iterations)\n  {\n    KeySpec spec = new PBEKeySpec(password, salt, iterations, SIZE);\n    try {\n      SecretKeyFactory f = SecretKeyFactory.getInstance(ALGORITHM);\n      return f.generateSecret(spec).getEncoded();\n    }\n    catch (NoSuchAlgorithmException ex) {\n      throw new IllegalStateException(\"Missing algorithm: \" + ALGORITHM, ex);\n    }\n    catch (InvalidKeySpecException ex) {\n      throw new IllegalStateException(\"Invalid SecretKeyFactory\", ex);\n    }\n  }\n\n  /**\n   * Hash a password in an immutable {@code String}.\n   *\n   * <p>Passwords should be stored in a {@code char[]} so that it can be filled\n   * with zeros after use instead of lingering on the heap and elsewhere.\n   *\n   * @deprecated Use {@link #hash(char[])} instead\n   */\n  @Deprecated\n  public String hash(String password)\n  {\n    return hash(password.toCharArray());\n  }\n\n  /**\n   * Authenticate with a password in an immutable {@code String} and a stored\n   * password token.\n   *\n   * @deprecated Use {@link #checkPassword(char[],String)} instead.\n   * @see #hash(String)\n   */\n  @Deprecated\n  public boolean checkPassword(String password, String token)\n  {\n    return checkPassword(password.toCharArray(), token);\n  }\n\n}\n", "test_case": "package com.baeldung.passwordhashing;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\n\npublic class PBKDF2HasherUnitTest {\n\n  private PBKDF2Hasher mPBKDF2Hasher;\n\n  @Before\n  public void setUp() throws Exception {\n    mPBKDF2Hasher = new PBKDF2Hasher();\n  }\n\n  @Test\n  public void givenCorrectMessageAndHash_whenAuthenticated_checkAuthenticationSucceeds() throws Exception {\n    String message1 = \"password123\";\n\n    String hash1 = mPBKDF2Hasher.hash(message1.toCharArray());\n\n    assertTrue(mPBKDF2Hasher.checkPassword(message1.toCharArray(), hash1));\n\n  }\n\n  @Test\n  public void givenWrongMessage_whenAuthenticated_checkAuthenticationFails() throws Exception {\n    String message1 = \"password123\";\n\n    String hash1 = mPBKDF2Hasher.hash(message1.toCharArray());\n\n    String wrongPasswordAttempt = \"IamWrong\";\n\n    assertFalse(mPBKDF2Hasher.checkPassword(wrongPasswordAttempt.toCharArray(), hash1));\n\n  }\n\n\n}"}
{"code_source": "package com.baeldung.passwordhashing;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\n\n/** A really simple SHA_512 Encryption example.\n *\n */\npublic class SHA512Hasher {\n\n  public String hash(String passwordToHash, byte[] salt){\n    String generatedPassword = null;\n    try {\n      MessageDigest md = MessageDigest.getInstance(\"SHA-512\");\n      md.update(salt);\n      byte[] bytes = md.digest(passwordToHash.getBytes(StandardCharsets.UTF_8));\n      StringBuilder sb = new StringBuilder();\n      for(int i=0; i< bytes.length ;i++){\n        sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n      }\n      generatedPassword = sb.toString();\n    }\n    catch (NoSuchAlgorithmException e){\n      e.printStackTrace();\n    }\n    return generatedPassword;\n  }\n\n  public boolean checkPassword(String hash, String attempt, byte[] salt){\n    String generatedHash = hash(attempt, salt);\n    return hash.equals(generatedHash);\n  }\n}\n", "test_case": "package com.baeldung.passwordhashing;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.security.SecureRandom;\n\nimport static org.junit.Assert.*;\n\n/**\n * Created by PhysicsSam on 06-Sep-18.\n */\npublic class SHA512HasherUnitTest {\n\n  private SHA512Hasher hasher;\n  private SecureRandom secureRandom;\n\n  @Before\n  public void setUp() throws Exception {\n    hasher = new SHA512Hasher();\n    secureRandom = new SecureRandom();\n  }\n\n  @Test\n  public void givenSamePasswordAndSalt_whenHashed_checkResultingHashesAreEqual() throws Exception {\n\n    byte[] salt = new byte[16];\n    secureRandom.nextBytes(salt);\n\n    String hash1 = hasher.hash(\"password\", salt);\n    String hash2 = hasher.hash(\"password\", salt);\n\n    assertEquals(hash1, hash2);\n\n  }\n\n  @Test\n  public void givenSamePasswordAndDifferentSalt_whenHashed_checkResultingHashesNotEqual() throws Exception {\n\n    byte[] salt = new byte[16];\n    secureRandom.nextBytes(salt);\n    String hash1 = hasher.hash(\"password\", salt);\n    //generate a second salt\n    byte[] secondSalt = new byte[16];\n    String hash2 = hasher.hash(\"password\", secondSalt);\n\n    assertNotEquals(hash1, hash2);\n\n  }\n\n  @Test\n  public void givenPredefinedHash_whenCorrectAttemptGiven_checkAuthenticationSucceeds() throws Exception {\n    byte[] salt = new byte[16];\n    secureRandom.nextBytes(salt);\n\n    String originalHash = hasher.hash(\"password123\", salt);\n\n    assertTrue(hasher.checkPassword(originalHash, \"password123\", salt));\n  }\n\n  @Test\n  public void givenPredefinedHash_whenIncorrectAttemptGiven_checkAuthenticationFails() throws Exception {\n    byte[] salt = new byte[16];\n    secureRandom.nextBytes(salt);\n\n    String originalHash = hasher.hash(\"password123\", salt);\n\n    assertFalse(hasher.checkPassword(originalHash, \"password124\", salt));\n  }\n}"}
{"code_source": "package com.baeldung.pem;\n\nimport org.apache.commons.codec.binary.Base64;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.security.GeneralSecurityException;\nimport java.security.KeyFactory;\nimport java.security.interfaces.RSAPrivateKey;\nimport java.security.interfaces.RSAPublicKey;\nimport java.security.spec.PKCS8EncodedKeySpec;\nimport java.security.spec.X509EncodedKeySpec;\n\npublic class JavaSecurityPemUtils {\n\n    public static RSAPrivateKey readPKCS8PrivateKey(File file) throws GeneralSecurityException, IOException {\n        String key = new String(Files.readAllBytes(file.toPath()), Charset.defaultCharset());\n\n        String privateKeyPEM = key\n                .replace(\"-----BEGIN PRIVATE KEY-----\", \"\")\n                .replaceAll(System.lineSeparator(), \"\")\n                .replace(\"-----END PRIVATE KEY-----\", \"\");\n\n        byte[] encoded = Base64.decodeBase64(privateKeyPEM);\n\n        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(encoded);\n        return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);\n    }\n\n    public static RSAPublicKey readX509PublicKey(File file) throws GeneralSecurityException, IOException {\n        String key = new String(Files.readAllBytes(file.toPath()), Charset.defaultCharset());\n\n        String publicKeyPEM = key\n                .replace(\"-----BEGIN PUBLIC KEY-----\", \"\")\n                .replaceAll(System.lineSeparator(), \"\")\n                .replace(\"-----END PUBLIC KEY-----\", \"\");\n\n        byte[] encoded = Base64.decodeBase64(publicKeyPEM);\n\n        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n        X509EncodedKeySpec keySpec = new X509EncodedKeySpec(encoded);\n        return (RSAPublicKey) keyFactory.generatePublic(keySpec);\n    }\n\n}\n", "test_case": "package com.baeldung.pem;\n\n\nimport org.junit.jupiter.api.Test;\n\nimport java.io.File;\nimport java.security.interfaces.RSAPrivateKey;\nimport java.security.interfaces.RSAPublicKey;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class JavaSecurityPemUtilsUnitTest {\n\n    @Test\n    public void whenReadPublicKeyFromPEMFile_thenSuccess() throws Exception {\n        File pemFile = new File(JavaSecurityPemUtilsUnitTest.class.getResource(\"/pem/public-key.pem\").getFile());\n\n        RSAPublicKey publicKey = JavaSecurityPemUtils.readX509PublicKey(pemFile);\n\n        assertEquals(\"X.509\", publicKey.getFormat());\n        assertEquals(\"RSA\", publicKey.getAlgorithm());\n    }\n\n    @Test\n    public void whenReadPrivateKeyFromPEMFile_thenSuccess() throws Exception {\n        File pemFile = new File(JavaSecurityPemUtilsUnitTest.class.getResource(\"/pem/private-key-pkcs8.pem\").getFile());\n\n        RSAPrivateKey privateKey = JavaSecurityPemUtils.readPKCS8PrivateKey(pemFile);\n\n        assertEquals(\"PKCS#8\", privateKey.getFormat());\n        assertEquals(\"RSA\", privateKey.getAlgorithm());\n    }\n}\n"}
{"code_source": "package com.baeldung.crypto;\n\nimport java.security.GeneralSecurityException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.GCMParameterSpec;\nimport javax.crypto.spec.IvParameterSpec;\n\npublic class CryptoDriver {\n\n    public byte[] ecbEncrypt(SecretKey key, byte[] data) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        return cipher.doFinal(data);\n    }\n\n    public byte[] ecbDecrypt(SecretKey key, byte[] cipherText) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        return cipher.doFinal(cipherText);\n    }\n\n    public byte[] cbcEncrypt(SecretKey key, IvParameterSpec iv, byte[] data) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n        return cipher.doFinal(data);\n    }\n\n    public byte[] cbcDecrypt(SecretKey key, IvParameterSpec iv, byte[] cipherText) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key, iv);\n        return cipher.doFinal(cipherText);\n    }\n\n    public byte[] cfbEncrypt(SecretKey key, IvParameterSpec iv, byte[] data) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/CFB/NoPadding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n        return cipher.doFinal(data);\n    }\n\n    public byte[] cfbDecrypt(SecretKey key, IvParameterSpec iv, byte[] cipherText) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/CFB/NoPadding\");\n        cipher.init(Cipher.DECRYPT_MODE, key, iv);\n        return cipher.doFinal(cipherText);\n    }\n\n    public byte[] ofbEncrypt(SecretKey key, IvParameterSpec iv, byte[] data) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/OFB32/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n        return cipher.doFinal(data);\n    }\n\n    public byte[] ofbDecrypt(SecretKey key, IvParameterSpec iv, byte[] cipherText) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/OFB32/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key, iv);\n        return cipher.doFinal(cipherText);\n    }\n\n    public byte[][] ctrEncrypt(SecretKey key, IvParameterSpec iv, byte[] data) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/CTR/NoPadding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n        return new byte[][] { cipher.getIV(), cipher.doFinal(data) };\n    }\n\n    public byte[] ctrDecrypt(SecretKey key, byte[] iv, byte[] cipherText) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/CTR/NoPadding\");\n        cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));\n        return cipher.doFinal(cipherText);\n    }\n\n    public byte[][] gcmEncrypt(SecretKey key, byte[] iv, byte[] data) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, new GCMParameterSpec(128, iv));\n        byte[] ciphertext = cipher.doFinal(data);\n        return new byte[][] { iv, ciphertext };\n    }\n\n    public byte[] gcmDecrypt(SecretKey key, byte[] iv, byte[] ciphertext) throws GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n        cipher.init(Cipher.DECRYPT_MODE, key, new GCMParameterSpec(128, iv));\n        byte[] plaintext = cipher.doFinal(ciphertext);\n        return plaintext;\n    }\n}\n", "test_case": "package com.baeldung.crypto;\n\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport java.security.GeneralSecurityException;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.crypto.utils.CryptoUtils;\n\npublic class CryptoDriverIVUnitTest{\n    private CryptoDriver driver = new CryptoDriver();\n    private String TEST_DATA = \"Encrypt this for testing\";\n\n    @Test\n    public void givenString_whenAesEcb_thenSuccess() throws GeneralSecurityException {\n        SecretKey key = CryptoUtils.generateKey();\n        byte[] plaintext = TEST_DATA.getBytes();\n\n        byte[] ciphertext = driver.ecbEncrypt(key, plaintext);\n        byte[] decryptedtext = driver.ecbDecrypt(key, ciphertext);\n\n        Assertions.assertEquals(new String(decryptedtext), TEST_DATA);\n    }\n\n    @Test\n    public void givenString_whenAesCbc_thenSuccess() throws GeneralSecurityException {\n        SecretKey key = CryptoUtils.generateKey();\n        IvParameterSpec iv = CryptoUtils.getIVSecureRandom(\"AES\");\n        byte[] plaintext = TEST_DATA.getBytes();\n\n        byte[] ciphertext = driver.cbcEncrypt(key, iv, plaintext);\n        byte[] decryptedtext = driver.cbcDecrypt(key, iv, ciphertext);\n\n        Assertions.assertEquals(new String(decryptedtext), TEST_DATA);\n    }\n\n    @Test\n    public void givenString_whenAesCfb_thenSuccess() throws GeneralSecurityException {\n        SecretKey key = CryptoUtils.generateKey();\n        IvParameterSpec iv = CryptoUtils.getIVSecureRandom(\"AES/CFB/NoPadding\");\n        byte[] plaintext = TEST_DATA.getBytes();\n\n        byte[] ciphertext = driver.cfbEncrypt(key, iv, plaintext);\n        byte[] decryptedtext = driver.cfbDecrypt(key, iv, ciphertext);\n\n        Assertions.assertEquals(new String(decryptedtext), TEST_DATA);\n    }\n\n    @Test\n    public void givenString_whenAesOfb_thenSuccess() throws GeneralSecurityException {\n        SecretKey key = CryptoUtils.generateKey();\n        IvParameterSpec iv = CryptoUtils.getIVSecureRandom(\"AES/OFB32/PKCS5Padding\");\n        byte[] plaintext = TEST_DATA.getBytes();\n\n        byte[] ciphertext = driver.ofbEncrypt(key, iv, plaintext);\n        byte[] decryptedtext = driver.ofbDecrypt(key, iv, ciphertext);\n\n        Assertions.assertEquals(new String(decryptedtext), TEST_DATA);\n    }\n\n    @Test\n    public void givenString_whenAesCtr_thenSuccess() throws GeneralSecurityException {\n        SecretKey key = CryptoUtils.generateKey();\n        IvParameterSpec iv = CryptoUtils.getIVSecureRandom(\"AES/CTR/NoPadding\");\n        byte[] plaintext = TEST_DATA.getBytes();\n\n        byte[][] ciphertext = driver.ctrEncrypt(key, iv, plaintext);\n        byte[] decryptedtext = driver.ctrDecrypt(key, ciphertext[0], ciphertext[1]);\n\n        Assertions.assertEquals(new String(decryptedtext), TEST_DATA);\n    }\n\n    @Test\n    void givenString_whenAesGcm_thenSuccess() throws GeneralSecurityException {\n        SecretKey key = CryptoUtils.generateKey();\n        byte[] iv = CryptoUtils.getRandomIVWithSize(12);\n        byte[] plaintext = (TEST_DATA).getBytes();\n\n        byte[][] ciphertext = driver.gcmEncrypt(key, iv, plaintext);\n        byte[] decryptedtext = driver.gcmDecrypt(key, ciphertext[0], ciphertext[1]);\n\n        Assertions.assertEquals(new String(decryptedtext), TEST_DATA);\n    }\n}\n"}
{"code_source": "package com.baeldung.crypto.exception;\n\nimport java.security.GeneralSecurityException;\nimport java.security.InvalidKeyException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\n\nimport com.baeldung.crypto.utils.CryptoUtils;\n\npublic class BadPaddingExamples {\n\n    public static byte[] encryptAndDecryptUsingDifferentKeys(byte[] plainTextBytes)\n            throws InvalidKeyException, GeneralSecurityException {\n        SecretKey encryptionKey = CryptoUtils.getKeyForText(\"BaeldungIsASuperCoolSite\");\n        SecretKey differentKey = CryptoUtils.getKeyForText(\"ThisGivesUsAnAlternative\");\n\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/ISO10126Padding\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, encryptionKey);\n        byte[] cipherTextBytes = cipher.doFinal(plainTextBytes);\n\n        cipher.init(Cipher.DECRYPT_MODE, differentKey);\n\n        return cipher.doFinal(cipherTextBytes);\n    }\n\n    public static byte[] encryptAndDecryptUsingDifferentAlgorithms(SecretKey key, IvParameterSpec ivParameterSpec,\n            byte[] plainTextBytes) throws InvalidKeyException, GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/ISO10126Padding\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, key, ivParameterSpec);\n        byte[] cipherTextBytes = cipher.doFinal(plainTextBytes);\n\n        cipher = Cipher.getInstance(\"AES/ECB/ISO10126Padding\");\n\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n        return cipher.doFinal(cipherTextBytes);\n    }\n\n    public static byte[] encryptAndDecryptUsingDifferentPaddings(SecretKey key, byte[] plainTextBytes)\n            throws InvalidKeyException, GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/ISO10126Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] cipherTextBytes = cipher.doFinal(plainTextBytes);\n\n        cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n        return cipher.doFinal(cipherTextBytes);\n    }\n\n    public static byte[] encryptAndDecryptUsingSamePaddingKeyAndAlgorithm(SecretKey key, byte[] plainTextBytes)\n            throws InvalidKeyException, GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        byte[] cipherTextBytes = cipher.doFinal(plainTextBytes);\n\n        cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n        return cipher.doFinal(cipherTextBytes);\n    }\n}\n", "test_case": "package com.baeldung.crypto.exception;\n\nimport java.security.GeneralSecurityException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.baeldung.crypto.utils.CryptoUtils;\n\npublic class BadPaddingExamplesUnitTest {\n\n    private SecretKey key;\n    private IvParameterSpec ivParameterSpec;\n    private String plainText;\n    private byte[] plainTextBytes;\n\n    @Before\n    public void before() throws GeneralSecurityException {\n        key = CryptoUtils.getFixedKey();\n\n        byte[] ivBytes = new byte[] { 'B', 'a', 'e', 'l', 'd', 'u', 'n', 'g', 'I', 's', 'G', 'r', 'e', 'a', 't', '!' };\n        ivParameterSpec = new IvParameterSpec(ivBytes);\n\n        plainText = \"https://www.baeldung.com/\";\n        plainTextBytes = plainText.getBytes();\n    }\n\n    @Test\n    public void givenTwoDifferentAlgorithmPaddings_whenDecrypting_thenBadPaddingExceptionIsThrown()\n            throws GeneralSecurityException {\n        Assert.assertThrows(BadPaddingException.class,\n                () -> BadPaddingExamples.encryptAndDecryptUsingDifferentPaddings(key, plainTextBytes));\n    }\n\n    @Test\n    public void givenTwoDifferentKeys_whenDecrypting_thenBadPaddingExceptionIsThrown() throws GeneralSecurityException {\n        Assert.assertThrows(BadPaddingException.class,\n                () -> BadPaddingExamples.encryptAndDecryptUsingDifferentKeys(plainTextBytes));\n    }\n\n    @Test\n    public void givenTwoDifferentAlgorithms_whenDecrypting_thenBadPaddingExceptionIsThrown()\n            throws GeneralSecurityException {\n        Assert.assertThrows(BadPaddingException.class, () -> BadPaddingExamples\n                .encryptAndDecryptUsingDifferentAlgorithms(key, ivParameterSpec, plainTextBytes));\n    }\n\n    @Test\n    public void givenSameVariablesUsedForEncryptingAndDecrypting_whenDecrypting_thenNoExceptionIsThrown()\n            throws GeneralSecurityException {\n        byte[] decryptedBytes = BadPaddingExamples.encryptAndDecryptUsingSamePaddingKeyAndAlgorithm(key,\n                plainTextBytes);\n\n        Assert.assertEquals(plainText, new String(decryptedBytes));\n    }\n}\n"}
{"code_source": "package com.baeldung.crypto.exception;\n\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\n\nimport com.baeldung.crypto.utils.CryptoUtils;\n\npublic class IllegalBlockSizeExamples {\n\n    public static byte[] encryptWithoutPadding(SecretKey key, byte[] plainTextBytes) throws NoSuchAlgorithmException,\n            NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n\n        return cipher.doFinal(plainTextBytes);\n    }\n\n    public static byte[] decryptTextThatIsNotEncrypted(SecretKey key) throws NoSuchAlgorithmException,\n            NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n        // note that this text is not encrypted at any point in this method.\n        String sampleText = \"https://www.baeldung.com/\";\n        byte[] unencryptedCipherTextBytes = sampleText.getBytes();\n\n        return CryptoUtils.decryptWithPadding(key, unencryptedCipherTextBytes);\n    }\n}\n", "test_case": "package com.baeldung.crypto.exception;\n\nimport java.security.GeneralSecurityException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.baeldung.crypto.utils.CryptoUtils;\n\npublic class IllegalBlockSizeExamplesUnitTest {\n\n    private SecretKey key;\n    private byte[] plainTextBytes;\n    private String plainText;\n\n    @Before\n    public void before() throws GeneralSecurityException {\n        key = CryptoUtils.getFixedKey();\n\n        plainText = \"https://www.baeldung.com/\";\n        plainTextBytes = plainText.getBytes();\n    }\n\n    @Test\n    public void whenEncryptingPlainTextWithoutPadding_thenIllegalBlockSizeExceptionIsThrown()\n            throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException,\n            BadPaddingException {\n        Assert.assertThrows(IllegalBlockSizeException.class,\n                () -> IllegalBlockSizeExamples.encryptWithoutPadding(key, plainTextBytes));\n    }\n\n    @Test\n    public void whenDecryptingCipherTextThatWasNotEncrypted_thenIllegalBlockSizeExceptionIsThrown()\n            throws GeneralSecurityException {\n        Assert.assertThrows(IllegalBlockSizeException.class,\n                () -> IllegalBlockSizeExamples.decryptTextThatIsNotEncrypted(key));\n    }\n\n    @Test\n    public void whenEncryptingAndDecryptingWithPadding_thenNoExceptionThrown() throws NoSuchAlgorithmException,\n            NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {\n        byte[] cipherTextBytes = CryptoUtils.encryptWithPadding(key, plainTextBytes);\n\n        byte[] decryptedBytes = CryptoUtils.decryptWithPadding(key, cipherTextBytes);\n\n        Assert.assertEquals(plainText, new String(decryptedBytes));\n    }\n}\n"}
{"code_source": "package com.baeldung.crypto.exception;\n\nimport java.security.GeneralSecurityException;\nimport java.security.InvalidKeyException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\n\npublic class InvalidAlgorithmParameterExamples {\n\n    public static byte[] encryptUsingIv(SecretKey key, byte[] ivBytes, String plainText)\n            throws InvalidKeyException, GeneralSecurityException {\n        IvParameterSpec ivParameterSpec = new IvParameterSpec(ivBytes);\n\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, ivParameterSpec);\n\n        byte[] bytes = plainText.getBytes();\n\n        return cipher.doFinal(bytes);\n    }\n}\n", "test_case": "package com.baeldung.crypto.exception;\n\nimport java.security.GeneralSecurityException;\nimport java.security.InvalidAlgorithmParameterException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.baeldung.crypto.utils.CryptoUtils;\n\npublic class InvalidAlgorithmParameterExamplesUnitTest {\n\n    private SecretKey key;\n    private String plainText;\n\n    @Before\n    public void before() throws GeneralSecurityException {\n        key = CryptoUtils.getFixedKey();\n\n        plainText = \"https://www.baeldung.com/\";\n    }\n\n    @Test\n    public void givenIvIsTooShort_whenEncryptingUsingCBC_thenInvalidAlgorithmParameterExceptionIsThrown()\n            throws GeneralSecurityException {\n        byte[] ivBytes = new byte[] { 'B', 'a', 'e', 'l', 'd', 'u', 'n', 'g', 'I', 's', 'G', 'r', 'e', 'a', 't' };\n        Assert.assertThrows(InvalidAlgorithmParameterException.class,\n                () -> InvalidAlgorithmParameterExamples.encryptUsingIv(key, ivBytes, plainText));\n    }\n\n    @Test\n    public void givenIvIsTooLong_whenEncryptingUsingCBC_thenInvalidAlgorithmParameterExceptionIsThrown()\n            throws GeneralSecurityException {\n        byte[] ivBytes = new byte[] { 'B', 'a', 'e', 'l', 'd', 'u', 'n', 'g', 'I', 's', 'G', 'r', 'e', 'a', 't', '!',\n                '?' };\n        Assert.assertThrows(InvalidAlgorithmParameterException.class,\n                () -> InvalidAlgorithmParameterExamples.encryptUsingIv(key, ivBytes, plainText));\n    }\n\n    @Test\n    public void givenIvIsCorrectSize_whenEncryptingUsingCBC_thenNoExceptionIsThrown() throws GeneralSecurityException {\n        byte[] ivBytes = new byte[] { 'B', 'a', 'e', 'l', 'd', 'u', 'n', 'g', 'I', 's', 'G', 'r', 'e', 'a', 't', '!' };\n        byte[] cipherTextBytes = InvalidAlgorithmParameterExamples.encryptUsingIv(key, ivBytes, plainText);\n\n        IvParameterSpec ivParameterSpec = new IvParameterSpec(ivBytes);\n\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key, ivParameterSpec);\n\n        byte[] decryptedBytes = cipher.doFinal(cipherTextBytes);\n\n        Assert.assertEquals(plainText, new String(decryptedBytes));\n    }\n}\n"}
{"code_source": "package com.baeldung.crypto.exception;\n\nimport java.security.GeneralSecurityException;\nimport java.security.InvalidKeyException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\n\nimport com.baeldung.crypto.utils.CryptoUtils;\n\npublic class InvalidKeyExamples {\n\n    public static byte[] decryptUsingCBCWithNoIV(SecretKey key, byte[] cipherTextBytes)\n            throws InvalidKeyException, GeneralSecurityException {\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key);\n\n        return cipher.doFinal(cipherTextBytes);\n    }\n\n    public static byte[] decryptUsingCBCWithIV(SecretKey key, byte[] cipherTextBytes)\n            throws InvalidKeyException, GeneralSecurityException {\n        byte[] ivBytes = new byte[] { 'B', 'a', 'e', 'l', 'd', 'u', 'n', 'g', 'I', 's', 'G', 'r', 'e', 'a', 't', '!' };\n        IvParameterSpec ivParameterSpec = new IvParameterSpec(ivBytes);\n\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, key, ivParameterSpec);\n\n        return cipher.doFinal(cipherTextBytes);\n    }\n\n    public static byte[] encryptWithKeyTooShort() throws InvalidKeyException, GeneralSecurityException {\n        SecretKey encryptionKey = CryptoUtils.getKeyForText(\"ThisIsTooShort\");\n\n        String plainText = \"https://www.baeldung.com/\";\n        byte[] bytes = plainText.getBytes();\n\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, encryptionKey);\n        return cipher.doFinal(bytes);\n    }\n\n    public static byte[] encryptWithKeyTooLong() throws InvalidKeyException, GeneralSecurityException {\n        SecretKey encryptionKey = CryptoUtils.getKeyForText(\"ThisTextIsTooLong\");\n\n        String plainText = \"https://www.baeldung.com/\";\n        byte[] bytes = plainText.getBytes();\n\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n\n        cipher.init(Cipher.ENCRYPT_MODE, encryptionKey);\n        return cipher.doFinal(bytes);\n    }\n}\n", "test_case": "package com.baeldung.crypto.exception;\n\nimport java.security.GeneralSecurityException;\nimport java.security.InvalidKeyException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.baeldung.crypto.utils.CryptoUtils;\n\npublic class InvalidKeyExamplesUnitTest {\n\n    private SecretKey key;\n    private String plainText;\n    private byte[] cipherTextBytes;\n\n    @Before\n    public void before() throws GeneralSecurityException {\n        key = CryptoUtils.getFixedKey();\n\n        byte[] ivBytes = new byte[] { 'B', 'a', 'e', 'l', 'd', 'u', 'n', 'g', 'I', 's', 'G', 'r', 'e', 'a', 't', '!' };\n        IvParameterSpec ivParameterSpec = new IvParameterSpec(ivBytes);\n\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, ivParameterSpec);\n\n        plainText = \"https://www.baeldung.com/\";\n        byte[] plainTextBytes = plainText.getBytes();\n\n        cipherTextBytes = cipher.doFinal(plainTextBytes);\n    }\n\n    @Test\n    public void givenTextEncryptedWithCBC_whenDecryptingWithNoIv_thenInvalidKeyExceptionIsThrown() {\n        Assert.assertThrows(InvalidKeyException.class,\n                () -> InvalidKeyExamples.decryptUsingCBCWithNoIV(key, cipherTextBytes));\n    }\n\n    @Test\n    public void givenTextEncryptedWithCBC_whenDecryptingWithIv_thenTextIsDecrypted()\n            throws InvalidKeyException, GeneralSecurityException {\n        byte[] decryptedBytes = InvalidKeyExamples.decryptUsingCBCWithIV(key, cipherTextBytes);\n\n        Assert.assertEquals(plainText, new String(decryptedBytes));\n    }\n\n    @Test\n    public void whenKeyIsTooShort_thenInvalidKeyExceptionIsThrown() {\n        Assert.assertThrows(InvalidKeyException.class, () -> InvalidKeyExamples.encryptWithKeyTooShort());\n    }\n\n    @Test\n    public void whenKeyIsTooLong_thenInvalidKeyExceptionIsThrown() {\n        Assert.assertThrows(InvalidKeyException.class, () -> InvalidKeyExamples.encryptWithKeyTooLong());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.crypto.exception;\n\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.NoSuchPaddingException;\n\npublic class NoSuchAlgorithmExamples {\n\n    public static Cipher getCipherInstanceWithBadAlgorithm()\n            throws NoSuchAlgorithmException, NoSuchPaddingException {\n        return Cipher.getInstance(\"ABC\");\n    }\n\n    public static Cipher getCipherInstanceWithBadAlgorithmMode()\n            throws NoSuchAlgorithmException, NoSuchPaddingException {\n        return Cipher.getInstance(\"AES/ABC\");\n    }\n\n    public static Cipher getCipherInstanceWithBadPadding()\n            throws NoSuchAlgorithmException, NoSuchPaddingException {\n        return Cipher.getInstance(\"AES/CBC/ABC\");\n    }\n\n    public static Cipher getCipherInstanceWithValidAlgorithm()\n            throws NoSuchAlgorithmException, NoSuchPaddingException {\n        return Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n    }\n}\n", "test_case": "package com.baeldung.crypto.exception;\n\nimport java.security.GeneralSecurityException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.Cipher;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class NoSuchAlgorithmExamplesUnitTest {\n\n    @Test\n    public void whenInitingCipherWithUnknownAlgorithm_thenNoSuchAlgorithmExceptionIsThrown()\n            throws GeneralSecurityException {\n        Assert.assertThrows(NoSuchAlgorithmException.class,\n                () -> NoSuchAlgorithmExamples.getCipherInstanceWithBadAlgorithm());\n    }\n\n    @Test\n    public void whenInitingCipherWithUnknownAlgorithmMode_thenNoSuchAlgorithmExceptionIsThrown()\n            throws GeneralSecurityException {\n        Assert.assertThrows(NoSuchAlgorithmException.class,\n                () -> NoSuchAlgorithmExamples.getCipherInstanceWithBadAlgorithmMode());\n    }\n\n    @Test\n    public void whenInitingCipherWithUnknownPadding_thenNoSuchAlgorithmExceptionIsThrown()\n            throws GeneralSecurityException {\n        Assert.assertThrows(NoSuchAlgorithmException.class,\n                () -> NoSuchAlgorithmExamples.getCipherInstanceWithBadPadding());\n    }\n\n    @Test\n    public void whenInitingCipherWithValidAlgorithm_thenCipherInstanceIsReturned() throws GeneralSecurityException {\n        Assert.assertTrue(NoSuchAlgorithmExamples.getCipherInstanceWithValidAlgorithm() instanceof Cipher);\n    }\n}\n"}
{"code_source": "package com.baeldung.hmac;\n\nimport org.apache.commons.codec.digest.HmacUtils;\nimport org.bouncycastle.crypto.Digest;\nimport org.bouncycastle.crypto.digests.MD5Digest;\nimport org.bouncycastle.crypto.digests.SHA256Digest;\nimport org.bouncycastle.crypto.digests.SHA384Digest;\nimport org.bouncycastle.crypto.digests.SHA512Digest;\nimport org.bouncycastle.crypto.macs.HMac;\nimport org.bouncycastle.crypto.params.KeyParameter;\n\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\n\npublic class HMACUtil {\n\n    public static String hmacWithJava(String algorithm, String data, String key)\n        throws NoSuchAlgorithmException, InvalidKeyException {\n        SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), algorithm);\n        Mac mac = Mac.getInstance(algorithm);\n        mac.init(secretKeySpec);\n        return bytesToHex(mac.doFinal(data.getBytes()));\n    }\n\n    public static String hmacWithApacheCommons(String algorithm, String data, String key) {\n        String hmac = new HmacUtils(algorithm, key).hmacHex(data);\n        return hmac;\n    }\n\n    public static String hmacWithBouncyCastle(String algorithm, String data, String key) {\n        Digest digest = getHashDigest(algorithm);\n        HMac hMac = new HMac(digest);\n        hMac.init(new KeyParameter(key.getBytes()));\n        byte[] hmacIn = data.getBytes();\n        hMac.update(hmacIn, 0, hmacIn.length);\n        byte[] hmacOut = new byte[hMac.getMacSize()];\n        hMac.doFinal(hmacOut, 0);\n        return bytesToHex(hmacOut);\n    }\n\n    private static Digest getHashDigest(String algorithm) {\n        switch (algorithm) {\n          case \"HmacMD5\":\n            return new MD5Digest();\n          case \"HmacSHA256\":\n            return new SHA256Digest();\n          case \"HmacSHA384\":\n            return new SHA384Digest();\n          case \"HmacSHA512\":\n            return new SHA512Digest();\n        }\n        return new SHA256Digest();\n    }\n\n    public static String bytesToHex(byte[] hash) {\n        StringBuilder hexString = new StringBuilder(2 * hash.length);\n        for (byte h : hash) {\n          String hex = Integer.toHexString(0xff & h);\n          if (hex.length() == 1)\n            hexString.append('0');\n          hexString.append(hex);\n        }\n        return hexString.toString();\n    }\n}\n", "test_case": "package com.baeldung.hmac;\n\nimport org.junit.Test;\n\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class HMACUtilUnitTest {\n\n    @Test\n    public void givenDataAndKeyAndAlgorithm_whenHmacWithJava_thenSuccess()\n        throws NoSuchAlgorithmException, InvalidKeyException {\n\n        //given\n        String hmacSHA256Value = \"5b50d80c7dc7ae8bb1b1433cc0b99ecd2ac8397a555c6f75cb8a619ae35a0c35\";\n        String hmacSHA256Algorithm = \"HmacSHA256\";\n        String data = \"baeldung\";\n        String key = \"123456\";\n\n        //when\n        String result = HMACUtil.hmacWithJava(hmacSHA256Algorithm, data, key);\n\n        //then\n        assertEquals(hmacSHA256Value, result);\n    }\n\n    @Test\n    public void givenDataAndKeyAndAlgorithm_whenHmacWithApacheCommons_thenSuccess() {\n\n        //given\n        String hmacMD5Value = \"621dc816b3bf670212e0c261dc9bcdb6\";\n        String hmacMD5Algorithm = \"HmacMD5\";\n        String data = \"baeldung\";\n        String key = \"123456\";\n\n        //when\n        String result = HMACUtil.hmacWithApacheCommons(hmacMD5Algorithm, data, key);\n\n        //then\n        assertEquals(hmacMD5Value, result);\n    }\n\n    @Test\n    public void givenDataAndKeyAndAlgorithm_whenHmacWithBouncyCastle_thenSuccess() {\n\n        //given\n        String hmacSHA512Value = \"b313a21908df55c9e322e3c65a4b0b7561ab1594ca806b3affbc0d769a1\" +\n          \"290c1922aa6622587bea3c0c4d871470a6d06f54dbd20dbda84250e2741eb01f08e33\";\n        String hmacSHA512Algorithm = \"HmacSHA512\";\n        String data = \"baeldung\";\n        String key = \"123456\";\n\n        //when\n        String result = HMACUtil.hmacWithBouncyCastle(hmacSHA512Algorithm, data, key);\n\n        //then\n        assertEquals(hmacSHA512Value, result);\n    }\n}\n"}
{"code_source": "package com.baeldung.secretkeyandstringconversion;\n\nimport java.security.NoSuchAlgorithmException;\nimport java.security.spec.InvalidKeySpecException;\nimport java.security.spec.KeySpec;\nimport java.util.Base64;\n\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class ConversionClassUtil {\n\n    /* Generating Secret key */\n\n    // Generating Secret Key using KeyGenerator class with 256\n    public static SecretKey generateKey(int n) throws NoSuchAlgorithmException {\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n        keyGenerator.init(n);\n        SecretKey originalKey = keyGenerator.generateKey();\n        return originalKey;\n    }\n\n    // Generating Secret Key using password and salt\n    public static SecretKey getKeyFromPassword(String password, String salt)\n            throws NoSuchAlgorithmException, InvalidKeySpecException {\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt.getBytes(), 65536, 256);\n        SecretKey originalKey = new SecretKeySpec(factory.generateSecret(spec).getEncoded(), \"AES\");\n        return originalKey;\n    }\n\n    /* Converting Secret key into String */\n    public static String convertSecretKeyToString(SecretKey secretKey) throws NoSuchAlgorithmException {\n        // Converting the Secret Key into byte array\n        byte[] rawData = secretKey.getEncoded();\n        // Getting String - Base64 encoded version of the Secret Key\n        String encodedKey = Base64.getEncoder().encodeToString(rawData);\n        return encodedKey;\n    }\n\n    /* Converting String into Secret key into */\n    public static SecretKey convertStringToSecretKeyto(String encodedKey) {\n        // Decoding the Base64 encoded string into byte array\n        byte[] decodedKey = Base64.getDecoder().decode(encodedKey);\n        // Rebuilding the Secret Key using SecretKeySpec Class\n        SecretKey originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, \"AES\");\n        return originalKey;\n    }\n\n}\n", "test_case": "package com.baeldung.secretkeyandstringconversion;\n\nimport java.security.NoSuchAlgorithmException;\nimport java.security.spec.InvalidKeySpecException;\n\nimport javax.crypto.SecretKey;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class ConversionClassUtilUnitTest {\n\n    @Test\n    void givenPasswordAndSalt_whenCreateSecreKeyCheckConversion_thenSuccess()\n            throws NoSuchAlgorithmException, InvalidKeySpecException {\n        // given\n        String password = \"Baeldung@2021\";\n        String salt = \"@$#baelDunG@#^$*\";\n\n        // when\n        SecretKey encodedKey = ConversionClassUtil.getKeyFromPassword(password, salt);\n        String encodedString = ConversionClassUtil.convertSecretKeyToString(encodedKey);\n        SecretKey decodeKey = ConversionClassUtil.convertStringToSecretKeyto(encodedString);\n\n        // then\n        Assertions.assertEquals(encodedKey, decodeKey);\n    }\n\n    @Test\n    void givenSize_whenCreateSecreKeyCheckConversion_thenSuccess()\n            throws NoSuchAlgorithmException, InvalidKeySpecException {\n        // given\n        int size = 256;\n\n        // when\n        SecretKey encodedKey = ConversionClassUtil.generateKey(size);\n        String encodedString = ConversionClassUtil.convertSecretKeyToString(encodedKey);\n        SecretKey decodeKey = ConversionClassUtil.convertStringToSecretKeyto(encodedString);\n\n        // then\n        Assertions.assertEquals(encodedKey, decodeKey);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.aes;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.SecretKey;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.SealedObject;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.PBEKeySpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.spec.InvalidKeySpecException;\nimport java.security.spec.KeySpec;\nimport java.util.Base64;\n\npublic class AESUtil {\n\n    public static String encrypt(String algorithm, String input, SecretKey key, IvParameterSpec iv)\n        throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException,\n        InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n        Cipher cipher = Cipher.getInstance(algorithm);\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n        byte[] cipherText = cipher.doFinal(input.getBytes());\n        return Base64.getEncoder()\n            .encodeToString(cipherText);\n    }\n\n    public static String decrypt(String algorithm, String cipherText, SecretKey key, IvParameterSpec iv)\n        throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException,\n        InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n        Cipher cipher = Cipher.getInstance(algorithm);\n        cipher.init(Cipher.DECRYPT_MODE, key, iv);\n        byte[] plainText = cipher.doFinal(Base64.getDecoder()\n            .decode(cipherText));\n        return new String(plainText);\n    }\n\n    public static SecretKey generateKey(int n) throws NoSuchAlgorithmException {\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n        keyGenerator.init(n);\n        SecretKey key = keyGenerator.generateKey();\n        return key;\n    }\n\n    public static SecretKey getKeyFromPassword(String password, String salt)\n        throws NoSuchAlgorithmException, InvalidKeySpecException {\n        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt.getBytes(), 65536, 256);\n        SecretKey secret = new SecretKeySpec(factory.generateSecret(spec)\n            .getEncoded(), \"AES\");\n        return secret;\n    }\n\n    public static IvParameterSpec generateIv() {\n        byte[] iv = new byte[16];\n        new SecureRandom().nextBytes(iv);\n        return new IvParameterSpec(iv);\n    }\n\n    public static void encryptFile(String algorithm, SecretKey key, IvParameterSpec iv,\n        File inputFile, File outputFile) throws IOException, NoSuchPaddingException,\n        NoSuchAlgorithmException, InvalidAlgorithmParameterException, InvalidKeyException,\n        BadPaddingException, IllegalBlockSizeException {\n        Cipher cipher = Cipher.getInstance(algorithm);\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n        FileInputStream inputStream = new FileInputStream(inputFile);\n        FileOutputStream outputStream = new FileOutputStream(outputFile);\n        byte[] buffer = new byte[64];\n        int bytesRead;\n        while ((bytesRead = inputStream.read(buffer)) != -1) {\n            byte[] output = cipher.update(buffer, 0, bytesRead);\n            if (output != null) {\n                outputStream.write(output);\n            }\n        }\n        byte[] outputBytes = cipher.doFinal();\n        if (outputBytes != null) {\n            outputStream.write(outputBytes);\n        }\n        inputStream.close();\n        outputStream.close();\n    }\n\n    public static void decryptFile(String algorithm, SecretKey key, IvParameterSpec iv,\n        File encryptedFile, File decryptedFile) throws IOException, NoSuchPaddingException,\n        NoSuchAlgorithmException, InvalidAlgorithmParameterException, InvalidKeyException,\n        BadPaddingException, IllegalBlockSizeException {\n        Cipher cipher = Cipher.getInstance(algorithm);\n        cipher.init(Cipher.DECRYPT_MODE, key, iv);\n        FileInputStream inputStream = new FileInputStream(encryptedFile);\n        FileOutputStream outputStream = new FileOutputStream(decryptedFile);\n        byte[] buffer = new byte[64];\n        int bytesRead;\n        while ((bytesRead = inputStream.read(buffer)) != -1) {\n            byte[] output = cipher.update(buffer, 0, bytesRead);\n            if (output != null) {\n                outputStream.write(output);\n            }\n        }\n        byte[] output = cipher.doFinal();\n        if (output != null) {\n            outputStream.write(output);\n        }\n        inputStream.close();\n        outputStream.close();\n    }\n\n    public static SealedObject encryptObject(String algorithm, Serializable object, SecretKey key,\n        IvParameterSpec iv) throws NoSuchPaddingException, NoSuchAlgorithmException,\n        InvalidAlgorithmParameterException, InvalidKeyException, IOException, IllegalBlockSizeException {\n        Cipher cipher = Cipher.getInstance(algorithm);\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n        SealedObject sealedObject = new SealedObject(object, cipher);\n        return sealedObject;\n    }\n\n    public static Serializable decryptObject(String algorithm, SealedObject sealedObject, SecretKey key,\n        IvParameterSpec iv) throws NoSuchPaddingException, NoSuchAlgorithmException,\n        InvalidAlgorithmParameterException, InvalidKeyException, ClassNotFoundException,\n        BadPaddingException, IllegalBlockSizeException, IOException {\n        Cipher cipher = Cipher.getInstance(algorithm);\n        cipher.init(Cipher.DECRYPT_MODE, key, iv);\n        Serializable unsealObject = (Serializable) sealedObject.getObject(cipher);\n        return unsealObject;\n    }\n\n    public static String encryptPasswordBased(String plainText, SecretKey key, IvParameterSpec iv)\n        throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException,\n        InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n        return Base64.getEncoder()\n            .encodeToString(cipher.doFinal(plainText.getBytes()));\n    }\n\n    public static String decryptPasswordBased(String cipherText, SecretKey key, IvParameterSpec iv)\n        throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException,\n        InvalidKeyException, BadPaddingException, IllegalBlockSizeException {\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");\n        cipher.init(Cipher.DECRYPT_MODE, key, iv);\n        return new String(cipher.doFinal(Base64.getDecoder()\n            .decode(cipherText)));\n    }\n\n}\n", "test_case": "package com.baeldung.aes;\n\nimport org.assertj.core.api.WithAssertions;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport javax.crypto.SealedObject;\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.BadPaddingException;\nimport javax.crypto.IllegalBlockSizeException;\nimport javax.crypto.NoSuchPaddingException;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Paths;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.spec.InvalidKeySpecException;\n\nclass AESUtilUnitTest implements WithAssertions {\n\n    @Test\n    void givenString_whenEncrypt_thenSuccess()\n        throws NoSuchAlgorithmException, IllegalBlockSizeException, InvalidKeyException,\n        BadPaddingException, InvalidAlgorithmParameterException, NoSuchPaddingException {\n        // given\n        String input = \"baeldung\";\n        SecretKey key = AESUtil.generateKey(128);\n        IvParameterSpec ivParameterSpec = AESUtil.generateIv();\n        String algorithm = \"AES/CBC/PKCS5Padding\";\n\n        // when\n        String cipherText = AESUtil.encrypt(algorithm, input, key, ivParameterSpec);\n        String plainText = AESUtil.decrypt(algorithm, cipherText, key, ivParameterSpec);\n\n        // then\n        Assertions.assertEquals(input, plainText);\n    }\n\n    @Test\n    void givenFile_whenEncrypt_thenSuccess()\n        throws NoSuchAlgorithmException, IOException, IllegalBlockSizeException, InvalidKeyException,\n        BadPaddingException, InvalidAlgorithmParameterException, NoSuchPaddingException {\n        // given\n        SecretKey key = AESUtil.generateKey(128);\n        String algorithm = \"AES/CBC/PKCS5Padding\";\n        IvParameterSpec ivParameterSpec = AESUtil.generateIv();\n        File inputFile = Paths.get(\"src/test/resources/baeldung.txt\")\n            .toFile();\n        File encryptedFile = new File(\"classpath:baeldung.encrypted\");\n        File decryptedFile = new File(\"document.decrypted\");\n\n        // when\n        AESUtil.encryptFile(algorithm, key, ivParameterSpec, inputFile, encryptedFile);\n        AESUtil.decryptFile(algorithm, key, ivParameterSpec, encryptedFile, decryptedFile);\n\n        // then\n        assertThat(inputFile).hasSameTextualContentAs(decryptedFile);\n        encryptedFile.delete();\n        decryptedFile.delete();\n    }\n\n    @Test\n    void givenObject_whenEncrypt_thenSuccess()\n        throws NoSuchAlgorithmException, IllegalBlockSizeException, InvalidKeyException,\n        InvalidAlgorithmParameterException, NoSuchPaddingException, IOException, BadPaddingException,\n        ClassNotFoundException {\n        // given\n        Student student = new Student(\"Baeldung\", 20);\n        SecretKey key = AESUtil.generateKey(128);\n        IvParameterSpec ivParameterSpec = AESUtil.generateIv();\n        String algorithm = \"AES/CBC/PKCS5Padding\";\n\n        // when\n        SealedObject sealedObject = AESUtil.encryptObject(algorithm, student, key, ivParameterSpec);\n        Student object = (Student) AESUtil.decryptObject(algorithm, sealedObject, key, ivParameterSpec);\n\n        // then\n        assertThat(student).isEqualTo(object);\n    }\n\n    @Test\n    void givenPassword_whenEncrypt_thenSuccess()\n        throws InvalidKeySpecException, NoSuchAlgorithmException, IllegalBlockSizeException,\n        InvalidKeyException, BadPaddingException, InvalidAlgorithmParameterException, NoSuchPaddingException {\n        // given\n        String plainText = \"www.baeldung.com\";\n        String password = \"baeldung\";\n        String salt = \"12345678\";\n        IvParameterSpec ivParameterSpec = AESUtil.generateIv();\n        SecretKey key = AESUtil.getKeyFromPassword(password, salt);\n\n        // when\n        String cipherText = AESUtil.encryptPasswordBased(plainText, key, ivParameterSpec);\n        String decryptedCipherText = AESUtil.decryptPasswordBased(cipherText, key, ivParameterSpec);\n\n        // then\n        Assertions.assertEquals(plainText, decryptedCipherText);\n    }\n}\n"}
{"code_source": "package com.baeldung.stream;\n\nimport java.util.List;\nimport java.util.stream.Stream;\n\npublic class StreamApi {\n\n    public static String getLastElementUsingReduce(List<String> valueList) {\n        Stream<String> stream = valueList.stream();\n        return stream.reduce((first, second) -> second).orElse(null);\n    }\n    \n    public static Integer getInfiniteStreamLastElementUsingReduce() {\n        Stream<Integer> stream = Stream.iterate(0, i -> i + 1);\n        return stream.limit(20).reduce((first, second) -> second).orElse(null);\n    }\n    \n    public static String getLastElementUsingSkip(List<String> valueList) {\n        long count = (long) valueList.size();\n        Stream<String> stream = valueList.stream();\n        return stream.skip(count - 1).findFirst().orElse(null);\n    }\n\n}\n", "test_case": "package com.baeldung.stream;\n\nimport org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class StreamApiUnitTest {\n\n    @Test\n    public void givenList_whenGetLastElementUsingReduce_thenReturnLastElement() {\n        List<String> valueList = new ArrayList<>();\n        valueList.add(\"Joe\");\n        valueList.add(\"John\");\n        valueList.add(\"Sean\");\n\n        String last = StreamApi.getLastElementUsingReduce(valueList);\n\n        assertEquals(\"Sean\", last);\n    }\n\n    @Test\n    public void givenInfiniteStream_whenGetInfiniteStreamLastElementUsingReduce_thenReturnLastElement() {\n        int last = StreamApi.getInfiniteStreamLastElementUsingReduce();\n        assertEquals(19, last);\n    }\n\n    @Test\n    public void givenListAndCount_whenGetLastElementUsingSkip_thenReturnLastElement() {\n        List<String> valueList = new ArrayList<>();\n        valueList.add(\"Joe\");\n        valueList.add(\"John\");\n        valueList.add(\"Sean\");\n\n        String last = StreamApi.getLastElementUsingSkip(valueList);\n\n        assertEquals(\"Sean\", last);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.stream;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\nimport com.codepoetics.protonpack.Indexed;\nimport com.codepoetics.protonpack.StreamUtils;\n\nimport io.vavr.collection.Stream;\nimport one.util.streamex.EntryStream;\n\npublic class StreamIndices {\n\n    public static List<String> getEvenIndexedStrings(String[] names) {\n        List<String> evenIndexedNames = IntStream.range(0, names.length)\n            .filter(i -> i % 2 == 0)\n            .mapToObj(i -> names[i])\n            .collect(Collectors.toList());\n        return evenIndexedNames;\n    }\n\n    public List<String> getEvenIndexedStringsVersionTwo(List<String> names) {\n        List<String> evenIndexedNames = EntryStream.of(names)\n            .filterKeyValue((index, name) -> index % 2 == 0)\n            .values()\n            .toList();\n        return evenIndexedNames;\n    }\n\n    public static List<Indexed<String>> getEvenIndexedStrings(List<String> names) {\n        List<Indexed<String>> list = StreamUtils.zipWithIndex(names.stream())\n            .filter(i -> i.getIndex() % 2 == 0)\n            .collect(Collectors.toList());\n        return list;\n    }\n\n    public static List<Indexed<String>> getOddIndexedStrings(List<String> names) {\n        List<Indexed<String>> list = StreamUtils.zipWithIndex(names.stream())\n            .filter(i -> i.getIndex() % 2 == 1)\n            .collect(Collectors.toList());\n        return list;\n    }\n\n    public static List<String> getOddIndexedStrings(String[] names) {\n        List<String> oddIndexedNames = IntStream.range(0, names.length)\n            .filter(i -> i % 2 == 1)\n            .mapToObj(i -> names[i])\n            .collect(Collectors.toList());\n        return oddIndexedNames;\n    }\n\n    public static List<String> getOddIndexedStringsVersionTwo(String[] names) {\n        List<String> oddIndexedNames = Stream.of(names)\n            .zipWithIndex()\n            .filter(tuple -> tuple._2 % 2 == 1)\n            .map(tuple -> tuple._1)\n            .toJavaList();\n        return oddIndexedNames;\n    }\n\n}", "test_case": "package com.baeldung.stream;\n\nimport com.codepoetics.protonpack.Indexed;\nimport org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class StreamIndicesUnitTest {\n\n    @Test\n    public void whenCalled_thenReturnListOfEvenIndexedStrings() {\n        String[] names = {\"Afrim\", \"Bashkim\", \"Besim\", \"Lulzim\", \"Durim\", \"Shpetim\"};\n        List<String> expectedResult = Arrays.asList(\"Afrim\", \"Besim\", \"Durim\");\n        List<String> actualResult = StreamIndices.getEvenIndexedStrings(names);\n\n        assertEquals(expectedResult, actualResult);\n    }\n\n    @Test\n    public void whenCalled_thenReturnListOfEvenIndexedStringsVersionTwo() {\n        String[] names = {\"Afrim\", \"Bashkim\", \"Besim\", \"Lulzim\", \"Durim\", \"Shpetim\"};\n        List<String> expectedResult = Arrays.asList(\"Afrim\", \"Besim\", \"Durim\");\n        List<String> actualResult = StreamIndices.getEvenIndexedStrings(names);\n\n        assertEquals(expectedResult, actualResult);\n    }\n\n    @Test\n    public void whenCalled_thenReturnListOfOddStrings() {\n        String[] names = {\"Afrim\", \"Bashkim\", \"Besim\", \"Lulzim\", \"Durim\", \"Shpetim\"};\n        List<String> expectedResult = Arrays.asList(\"Bashkim\", \"Lulzim\", \"Shpetim\");\n        List<String> actualResult = StreamIndices.getOddIndexedStrings(names);\n\n        assertEquals(expectedResult, actualResult);\n    }\n\n    @Test\n    public void givenList_whenCalled_thenReturnListOfEvenIndexedStrings() {\n        List<String> names = Arrays.asList(\"Afrim\", \"Bashkim\", \"Besim\", \"Lulzim\", \"Durim\", \"Shpetim\");\n        List<Indexed<String>> expectedResult = Arrays\n          .asList(Indexed.index(0, \"Afrim\"), Indexed.index(2, \"Besim\"), Indexed\n            .index(4, \"Durim\"));\n        List<Indexed<String>> actualResult = StreamIndices.getEvenIndexedStrings(names);\n\n        assertEquals(expectedResult, actualResult);\n    }\n\n    @Test\n    public void givenList_whenCalled_thenReturnListOfOddIndexedStrings() {\n        List<String> names = Arrays.asList(\"Afrim\", \"Bashkim\", \"Besim\", \"Lulzim\", \"Durim\", \"Shpetim\");\n        List<Indexed<String>> expectedResult = Arrays\n          .asList(Indexed.index(1, \"Bashkim\"), Indexed.index(3, \"Lulzim\"), Indexed\n            .index(5, \"Shpetim\"));\n        List<Indexed<String>> actualResult = StreamIndices.getOddIndexedStrings(names);\n\n        assertEquals(expectedResult, actualResult);\n    }\n\n    @Test\n    public void whenCalled_thenReturnListOfOddStringsVersionTwo() {\n        String[] names = {\"Afrim\", \"Bashkim\", \"Besim\", \"Lulzim\", \"Durim\", \"Shpetim\"};\n        List<String> expectedResult = Arrays.asList(\"Bashkim\", \"Lulzim\", \"Shpetim\");\n        List<String> actualResult = StreamIndices.getOddIndexedStringsVersionTwo(names);\n\n        assertEquals(expectedResult, actualResult);\n    }\n}"}
{"code_source": "package com.baeldung.streams.conversion;\n\nimport java.util.Enumeration;\nimport java.util.Spliterator;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\npublic class EnumerationStreamConversion {\n\n    public static <T> Stream<T> convert(Enumeration<T> enumeration) {\n        EnumerationSpliterator<T> spliterator = new EnumerationSpliterator<T>(Long.MAX_VALUE, Spliterator.ORDERED, enumeration);\n        Stream<T> stream = StreamSupport.stream(spliterator, false);\n\n        return stream;\n    }\n}\n", "test_case": "package com.baeldung.streams.conversion;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.collection.IsIterableContainingInOrder.contains;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Vector;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\n\npublic class EnumerationStreamConversionUnitTest {\n\n    @Test\n    public void givenEnumeration_whenConvertedToStream_thenNotNull() {\n        Vector<Integer> input = new Vector<>(Arrays.asList(1, 2, 3, 4, 5));\n\n        Stream<Integer> resultingStream = EnumerationStreamConversion.convert(input.elements());\n\n        Assert.assertNotNull(resultingStream);\n    }\n\n    @Test\n    public void whenConvertedToList_thenCorrect() {\n        Vector<Integer> input = new Vector<>(Arrays.asList(1, 2, 3, 4, 5));\n\n        Stream<Integer> stream = EnumerationStreamConversion.convert(input.elements());\n        List<Integer> list = stream.filter(e -> e >= 3)\n            .collect(Collectors.toList());\n        assertThat(list, contains(3, 4, 5));\n    }\n}\n"}
{"code_source": "package com.baeldung.streams.primitivestreams;\n\nimport java.util.Arrays;\nimport java.util.stream.IntStream;\n\nclass PrimitiveStreams {\n\n    int min(int[] integers) {\n        return Arrays.stream(integers).min().getAsInt();\n    }\n\n    int max(int... integers) {\n        return IntStream.of(integers).max().getAsInt();\n    }\n\n    int sum(int... integers) {\n        return IntStream.of(integers).sum();\n    }\n\n    double avg(int... integers) {\n        return IntStream.of(integers).average().getAsDouble();\n    }\n}\n", "test_case": "package com.baeldung.streams.primitivestreams;\n\nimport org.junit.Test;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\npublic class PrimitiveStreamsUnitTest {\n\n    private PrimitiveStreams streams = new PrimitiveStreams();\n\n    @Test\n    public void givenAnArrayOfIntegersWhenMinIsCalledThenCorrectMinIsReturned() {\n        int[] integers = new int[] { 20, 98, 12, 7, 35 };\n        int min = streams.min(integers); // returns 7\n\n        assertEquals(7, min);\n    }\n\n    @Test\n    public void givenAnArrayOfIntegersWhenMaxIsCalledThenCorrectMaxIsReturned() {\n        int max = streams.max(20, 98, 12, 7, 35);\n\n        assertEquals(98, max);\n    }\n\n    @Test\n    public void givenAnArrayOfIntegersWhenSumIsCalledThenCorrectSumIsReturned() {\n        int sum = streams.sum(20, 98, 12, 7, 35);\n\n        assertEquals(172, sum);\n    }\n\n    @Test\n    public void givenAnArrayOfIntegersWhenAvgIsCalledThenCorrectAvgIsReturned() {\n        double avg = streams.avg(20, 98, 12, 7, 35);\n\n        assertTrue(34.4 == avg);\n    }\n\n    @Test\n    public void givenARangeOfIntegersWhenIntStreamSumIsCalledThenCorrectSumIsReturned() {\n        int sum = IntStream.range(1, 10).sum();\n\n        assertEquals(45, sum);\n    }\n\n    @Test\n    public void givenARangeClosedOfIntegersWhenIntStreamSumIsCalledThenCorrectSumIsReturned() {\n        int sum = IntStream.rangeClosed(1, 10).sum();\n\n        assertEquals(55, sum);\n    }\n\n    @Test\n    public void givenARangeWhenForEachIsCalledThenTheIndicesWillBePrinted() {\n        IntStream.rangeClosed(1, 5).parallel().forEach(System.out::println);\n    }\n\n    @Test\n    public void givenAnArrayWhenSumIsCalledThenTheCorrectSumIsReturned() {\n\n        int sum = Stream.of(33, 45).mapToInt(i -> i).sum();\n\n        assertEquals(78, sum);\n    }\n\n    @Test\n    public void givenAnIntStreamThenGetTheEvenIntegers() {\n        List<Integer> evenInts = IntStream.rangeClosed(1, 10).filter(i -> i % 2 == 0).boxed().collect(Collectors.toList());\n\n        List<Integer> expected = IntStream.of(2, 4, 6, 8, 10).boxed().collect(Collectors.toList());\n\n        assertEquals(expected, evenInts);\n    }\n\n    class Person {\n        private int age;\n\n        Person(int age) {\n            this.age = age;\n        }\n\n        int getAge() {\n            return age;\n        }\n    }\n}"}
{"code_source": "package com.baeldung.streams.filteronlyoneelement;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class FilterUtils {\n\n    public static <T> Optional<T> findUniqueElementMatchingPredicate_WithReduction(Stream<T> elements, Predicate<T> predicate) {\n        return elements.filter(predicate)\n            .collect(Collectors.reducing((a, b) -> null));\n    }\n\n    public static <T> T getUniqueElementMatchingPredicate_WithReduction(Stream<T> elements, Predicate<T> predicate) {\n        return elements.filter(predicate)\n            .reduce((a, b) -> {\n                throw new IllegalStateException(\"Too many elements match the predicate\");\n            })\n            .orElseThrow(() -> new IllegalStateException(\"No element matches the predicate\"));\n    }\n\n    public static <T> Optional<T> findUniqueElementMatchingPredicate_WithCollectingAndThen(Stream<T> elements, Predicate<T> predicate) {\n        return elements.filter(predicate)\n            .collect(Collectors.collectingAndThen(Collectors.toList(), list -> Optional.ofNullable(findUniqueElement(list))));\n    }\n\n    private static <T> T findUniqueElement(List<T> elements) {\n        if (elements.size() == 1) {\n            return elements.get(0);\n        }\n        return null;\n    }\n\n    public static <T> T getUniqueElementMatchingPredicate_WithCollectingAndThen(Stream<T> elements, Predicate<T> predicate) {\n        return elements.filter(predicate)\n            .collect(Collectors.collectingAndThen(Collectors.toList(), FilterUtils::getUniqueElement));\n    }\n\n    private static <T> T getUniqueElement(List<T> elements) {\n        if (elements.size() > 1) {\n            throw new IllegalStateException(\"Too many elements match the predicate\");\n        } else if (elements.size() == 0) {\n            throw new IllegalStateException(\"No element matches the predicate\");\n        }\n        return elements.get(0);\n    }\n\n}\n", "test_case": "package com.baeldung.streams.filteronlyoneelement;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.function.Predicate;\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.Test;\n\npublic class FilterUtilsUnitTest {\n\n    private static final Predicate<Integer> IS_STRICTLY_GREATER_THAN5 = i -> i > 5;\n    private static final Predicate<Integer> IS_STRICTLY_GREATER_THAN4 = i -> i > 4;\n    private static final Predicate<Integer> IS_STRICTLY_GREATER_THAN3 = i -> i > 3;\n\n    private Stream getIntegers() {\n        return Stream.of(1, 2, 3, 4, 5);\n    }\n\n    @Test\n    void givenNoElementMatchingPredicate_WhenFindUniqueElementMatchingPredicateWithReduction_ThenNoneFound() {\n        assertTrue(FilterUtils.findUniqueElementMatchingPredicate_WithReduction(getIntegers(), IS_STRICTLY_GREATER_THAN5)\n            .isEmpty());\n    }\n\n    @Test\n    void givenTwoElementsMatchingPredicate_WhenFindUniqueElementMatchingPredicateWithReduction_ThenEmpty() {\n        assertTrue(FilterUtils.findUniqueElementMatchingPredicate_WithReduction(getIntegers(), IS_STRICTLY_GREATER_THAN3)\n            .isEmpty());\n    }\n\n    @Test\n    void givenOnlyOneElementMatchingPredicate_WhenFindUniqueElementMatchingPredicateWithReduction_ThenFindsIt() {\n        assertEquals(5, FilterUtils.findUniqueElementMatchingPredicate_WithReduction(getIntegers(), IS_STRICTLY_GREATER_THAN4)\n            .get());\n    }\n\n    @Test\n    void givenNoElementMatchingPredicate_WhenGetUniqueElementMatchingPredicateWithReduction_ThenThrows() {\n        assertThrows(IllegalStateException.class, () -> FilterUtils.getUniqueElementMatchingPredicate_WithReduction(getIntegers(), IS_STRICTLY_GREATER_THAN5));\n    }\n\n    @Test\n    void givenTwoElementsMatchingPredicate_WhenGetUniqueElementMatchingPredicateWithReduction_ThenThrows() {\n        assertThrows(IllegalStateException.class, () -> FilterUtils.getUniqueElementMatchingPredicate_WithReduction(getIntegers(), IS_STRICTLY_GREATER_THAN3));\n    }\n\n    @Test\n    void givenOnlyOneElementMatchingPredicate_WhenFindUniqueElementMatchingPredicateWithReduction_ThenGetIt() {\n        assertEquals(5, FilterUtils.getUniqueElementMatchingPredicate_WithReduction(getIntegers(), IS_STRICTLY_GREATER_THAN4));\n    }\n\n    @Test\n    void givenNoElementMatchingPredicate_WhenFindUniqueElementMatchingPredicateWithCollectingAndThen_ThenEmpty() {\n        assertTrue(FilterUtils.findUniqueElementMatchingPredicate_WithCollectingAndThen(getIntegers(), IS_STRICTLY_GREATER_THAN5)\n            .isEmpty());\n    }\n\n    @Test\n    void givenTwoElementsMatchingPredicate_WhenFindUniqueElementMatchingPredicateWithCollectingAndThen_ThenEmpty() {\n        assertTrue(FilterUtils.findUniqueElementMatchingPredicate_WithCollectingAndThen(getIntegers(), IS_STRICTLY_GREATER_THAN3)\n            .isEmpty());\n    }\n\n    @Test\n    void givenOnlyOneElementMatchingPredicate_WhenFindUniqueElementMatchingPredicateWithCollectingAndThen_ThenFindsIt() {\n        assertEquals(5, FilterUtils.findUniqueElementMatchingPredicate_WithCollectingAndThen(getIntegers(), IS_STRICTLY_GREATER_THAN4)\n            .get());\n    }\n\n    @Test\n    void givenNoElementMatchingPredicate_WhenGetUniqueElementMatchingPredicateWithCollectingAndThen_ThenThrows() {\n        assertThrows(IllegalStateException.class, () -> FilterUtils.getUniqueElementMatchingPredicate_WithCollectingAndThen(getIntegers(), IS_STRICTLY_GREATER_THAN5));\n    }\n\n    @Test\n    void givenTwoElementsMatchingPredicate_WhenGetUniqueElementMatchingPredicateWithCollectingAndThen_ThenThrows() {\n        assertThrows(IllegalStateException.class, () -> FilterUtils.getUniqueElementMatchingPredicate_WithCollectingAndThen(getIntegers(), IS_STRICTLY_GREATER_THAN3));\n    }\n\n    @Test\n    void givenOnlyOneElementMatchingPredicate_WhenFindUniqueElementMatchingPredicateWithCollectingAndThen_ThenGetIt() {\n        assertEquals(5, FilterUtils.getUniqueElementMatchingPredicate_WithCollectingAndThen(getIntegers(), IS_STRICTLY_GREATER_THAN4));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.streams.maxdate;\n\nimport java.time.LocalDate;\nimport java.util.Comparator;\nimport java.util.Date;\nimport java.util.List;\n\npublic class DateHelper {\n\n    static final Date findMaxDateOf(List<Event> events) {\n        if (events == null || events.isEmpty()) {\n            return null;\n        }\n        return events.stream()\n            .map(Event::getDate)\n            .max(Date::compareTo)\n            .get();\n    }\n\n    static final Date findMaxDateOfWithComparator(List<Event> events) {\n        if (events == null || events.isEmpty()) {\n            return null;\n        }\n        return events.stream()\n            .map(Event::getDate)\n            .max(Comparator.naturalOrder())\n            .get();\n    }\n\n    static final LocalDate findMaxDateOfLocalEvents(List<LocalEvent> events) {\n        if (events == null || events.isEmpty()) {\n            return null;\n        }\n        return events.stream()\n            .map(LocalEvent::getDate)\n            .max(LocalDate::compareTo)\n            .get();\n    }\n\n    static final LocalDate findMaxDateOfLocalEventsWithComparator(List<LocalEvent> events) {\n        if (events == null || events.isEmpty()) {\n            return null;\n        }\n        return events.stream()\n            .map(LocalEvent::getDate)\n            .max(Comparator.naturalOrder())\n            .get();\n    }\n\n}\n", "test_case": "package com.baeldung.streams.maxdate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\n\nimport java.time.LocalDate;\nimport java.util.Date;\nimport java.util.List;\n\nimport org.apache.commons.lang3.time.DateUtils;\nimport org.junit.jupiter.api.Test;\n\nclass DateHelperUnitTest {\n\n    Date TODAY = new Date();\n    Event TODAYS_EVENT = new Event(TODAY);\n    Date TOMORROW = DateUtils.addDays(TODAY, 1);\n    Event TOMORROWS_EVENT = new Event(TOMORROW);\n    Date NEXT_WEEK = DateUtils.addDays(TODAY, 7);\n    Event NEXT_WEEK_EVENT = new Event(NEXT_WEEK);\n\n    LocalDate TODAY_LOCAL = LocalDate.now();\n    LocalEvent TODAY_LOCAL_EVENT = new LocalEvent(TODAY_LOCAL);\n    LocalDate TOMORROW_LOCAL = TODAY_LOCAL.plusDays(1);\n    LocalEvent TOMORROW_LOCAL_EVENT = new LocalEvent(TOMORROW_LOCAL);\n    LocalDate NEXT_WEEK_LOCAL = TODAY_LOCAL.plusWeeks(1);\n    LocalEvent NEXT_WEEK_LOCAL_EVENT = new LocalEvent(NEXT_WEEK_LOCAL);\n\n    @Test\n    void givenNullEventList_WhenFindMaxDateOf_ThenNull() {\n        assertNull(DateHelper.findMaxDateOf(null));\n    }\n\n    @Test\n    void givenEmptyEventList_WhenFindMaxDateOf_ThenNull() {\n        assertNull(DateHelper.findMaxDateOf(List.of()));\n    }\n\n    @Test\n    void givenSingleElementEventList_WhenFindMaxDateOf_ThenReturnElementDate() {\n        assertEquals(TODAY, DateHelper.findMaxDateOf(List.of(TODAYS_EVENT)));\n    }\n\n    @Test\n    void givenEventList_WhenFindMaxDateOf_ThenReturnMaxDate() {\n        assertEquals(NEXT_WEEK, DateHelper.findMaxDateOf(List.of(TODAYS_EVENT, TOMORROWS_EVENT, NEXT_WEEK_EVENT)));\n    }\n\n    @Test\n    void givenNullEventList_WhenFindMaxDateOfWithComparator_ThenNull() {\n        assertNull(DateHelper.findMaxDateOfWithComparator(null));\n    }\n\n    @Test\n    void givenEmptyEventList_WhenFindMaxDateOfWithComparator_ThenNull() {\n        assertNull(DateHelper.findMaxDateOfWithComparator(List.of()));\n    }\n\n    @Test\n    void givenSingleElementEventList_WhenFindMaxDateOfWithComparator_ThenReturnElementDate() {\n        assertEquals(TODAY, DateHelper.findMaxDateOfWithComparator(List.of(TODAYS_EVENT)));\n    }\n\n    @Test\n    void givenEventList_WhenFindMaxDateOfWithComparator_ThenReturnMaxDate() {\n        assertEquals(NEXT_WEEK, DateHelper.findMaxDateOfWithComparator(List.of(TODAYS_EVENT, TOMORROWS_EVENT, NEXT_WEEK_EVENT)));\n    }\n\n    @Test\n    void givenNullLocalEventList_WhenFindMaxDateOfLocalEvents_ThenNull() {\n        assertNull(DateHelper.findMaxDateOfLocalEvents(null));\n    }\n\n    @Test\n    void givenEmptyLocalEventList_WhenFindMaxDateOfLocalEvents_ThenNull() {\n        assertNull(DateHelper.findMaxDateOfLocalEvents(List.of()));\n    }\n\n    @Test\n    void givenSingleElementLocalEventList_WhenFindMaxDateOfLocalEvents_ThenReturnElementDate() {\n        assertEquals(TODAY_LOCAL, DateHelper.findMaxDateOfLocalEvents(List.of(TODAY_LOCAL_EVENT)));\n    }\n\n    @Test\n    void givenLocalEventList_WhenFindMaxDateOfLocalEvents_ThenReturnMaxDate() {\n        assertEquals(NEXT_WEEK_LOCAL, DateHelper.findMaxDateOfLocalEvents(List.of(TODAY_LOCAL_EVENT, TOMORROW_LOCAL_EVENT, NEXT_WEEK_LOCAL_EVENT)));\n    }\n\n    @Test\n    void givenNullLocalEventList_WhenFindMaxDateOfLocalEventsWithComparator_ThenNull() {\n        assertNull(DateHelper.findMaxDateOfLocalEventsWithComparator(null));\n    }\n\n    @Test\n    void givenEmptyLocalEventList_WhenFindMaxDateOfLocalEventsWithComparator_ThenNull() {\n        assertNull(DateHelper.findMaxDateOfLocalEventsWithComparator(List.of()));\n    }\n\n    @Test\n    void givenSingleElementLocalEventList_WhenFindMaxDateOfLocalEventsWithComparator_ThenReturnElementDate() {\n        assertEquals(TODAY_LOCAL, DateHelper.findMaxDateOfLocalEventsWithComparator(List.of(TODAY_LOCAL_EVENT)));\n    }\n\n    @Test\n    void givenLocalEventList_WhenFindMaxDateOfLocalEventsWithComparator_ThenReturnMaxDate() {\n        assertEquals(NEXT_WEEK_LOCAL, DateHelper.findMaxDateOfLocalEventsWithComparator(List.of(TODAY_LOCAL_EVENT, TOMORROW_LOCAL_EVENT, NEXT_WEEK_LOCAL_EVENT)));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.streams.streamtoiterable;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport joptsimple.internal.Strings;\n\npublic class StreamToIterable {\n    public String streamToIterableLambda(List<String> listOfStrings) {\n        Stream<String> stringStream = listOfStrings.stream();\n        StringBuilder sentence = new StringBuilder();\n        for (String eachString : (Iterable<String>) () -> stringStream.iterator()) {\n            doSomethingOnString(eachString, sentence);\n        }\n        return sentence.toString();\n    }\n\n    public String streamToIterableMethodReference(List<String> listOfStrings) {\n        Stream<String> stringStream = listOfStrings.stream();\n        StringBuilder sentence = new StringBuilder();\n        for (String eachString : (Iterable<String>) stringStream::iterator) {\n            doSomethingOnString(eachString, sentence);\n        }\n        return sentence.toString();\n    }\n\n    public String streamToList(List<String> listOfStrings) {\n        Stream<String> stringStream = listOfStrings.stream();\n        StringBuilder sentence = new StringBuilder();\n        for (String eachString : stringStream.collect(Collectors.toList())) {\n            doSomethingOnString(eachString, sentence);\n        }\n        return sentence.toString();\n    }\n\n    private void doSomethingOnString(String s, StringBuilder sentence) {\n        if (!Strings.isNullOrEmpty(s)) {\n            sentence.append(s);\n        }\n    }\n}\n", "test_case": "package com.baeldung.streams.streamtoiterable;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class StreamToIterableUnitTest {\n\n    @Test\n    public void givenList_whenLambdaIsUsed_ThenStreamAsIterable(){\n        StreamToIterable streamToIterable = new StreamToIterable();\n        String actualString =  streamToIterable.streamToIterableLambda(getListOfStrings());\n        String expectedString = \"Thisisasentencewithnospaces\";\n        Assert.assertEquals(expectedString, actualString);\n    }\n\n    @Test\n    public void givenList_whenMethodReferenceIsUsed_ThenStreamAsIterable(){\n        StreamToIterable streamToIterable = new StreamToIterable();\n        String actualString =  streamToIterable.streamToIterableMethodReference(getListOfStrings());\n        String expectedString = \"Thisisasentencewithnospaces\";\n        Assert.assertEquals(expectedString, actualString);\n    }\n\n    @Test\n    public void givenList_whenCollectedToList_ThenStreamAsIterable(){\n        StreamToIterable streamToIterable = new StreamToIterable();\n        String actualString =  streamToIterable.streamToList(getListOfStrings());\n        String expectedString = \"Thisisasentencewithnospaces\";\n        Assert.assertEquals(expectedString, actualString);\n    }\n\n    private List<String> getListOfStrings(){\n        List<String> listOfStrings = new ArrayList<>();\n        listOfStrings.add(\"This\");\n        listOfStrings.add(\"is\");\n        listOfStrings.add(\"a\");\n        listOfStrings.add(null);\n        listOfStrings.add(\"sentence\");\n        listOfStrings.add(\"with\");\n        listOfStrings.add(\"no\");\n        listOfStrings.add(null);\n        listOfStrings.add(\"spaces\");\n        return listOfStrings;\n    }\n}\n"}
{"code_source": "package com.baeldung.matchwords;\n\nimport org.ahocorasick.trie.Emit;\nimport org.ahocorasick.trie.Trie;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.regex.Pattern;\n\npublic class MatchWords {\n\n    public static boolean containsWordsIndexOf(String inputString, String[] words) {\n        boolean found = true;\n        for (String word : words) {\n            if (inputString.indexOf(word) == -1) {\n                found = false;\n                break;\n            }\n        }\n        return found;\n    }\n\n    public static boolean containsWords(String inputString, String[] items) {\n        boolean found = true;\n        for (String item : items) {\n            if (!inputString.contains(item)) {\n                found = false;\n                break;\n            }\n        }\n        return found;\n    }\n\n    public static boolean containsWordsAhoCorasick(String inputString, String[] words) {\n        Trie trie = Trie.builder()\n                .onlyWholeWords()\n                .addKeywords(words)\n                .build();\n\n        Collection<Emit> emits = trie.parseText(inputString);\n        emits.forEach(System.out::println);\n\n        boolean found = true;\n        for(String word : words) {\n            boolean contains = Arrays.toString(emits.toArray()).contains(word);\n            if (!contains) {\n                found = false;\n                break;\n            }\n        }\n\n        return found;\n    }\n\n    public static boolean containsWordsPatternMatch(String inputString, String[] words) {\n\n        StringBuilder regexp = new StringBuilder();\n        for (String word : words) {\n            regexp.append(\"(?=.*\").append(word).append(\")\");\n        }\n\n        Pattern pattern = Pattern.compile(regexp.toString());\n\n        return pattern.matcher(inputString).find();\n    }\n\n    public static boolean containsWordsJava8(String inputString, String[] words) {\n        List<String> inputStringList = Arrays.asList(inputString.split(\" \"));\n        List<String> wordsList = Arrays.asList(words);\n\n        return wordsList.stream().allMatch(inputStringList::contains);\n    }\n\n    public static boolean containsWordsArray(String inputString, String[] words) {\n        List<String> inputStringList = Arrays.asList(inputString.split(\" \"));\n        List<String> wordsList = Arrays.asList(words);\n\n        return inputStringList.containsAll(wordsList);\n    }\n}\n", "test_case": "package com.baeldung.matchwords;\n\nimport org.junit.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class MatchWordsUnitTest {\n\n    private final String[] words = {\"hello\", \"Baeldung\"};\n    private final String inputString = \"hello there, Baeldung\";\n    private final String wholeInput = \"helloBaeldung\";\n\n    @Test\n    public void givenText_whenCallingStringContains_shouldMatchWords() {\n        final boolean result = MatchWords.containsWords(inputString, words);\n        assertThat(result).isTrue();\n    }\n\n    @Test\n    public void givenText_whenCallingJava8_shouldMatchWords() {\n        final boolean result = MatchWords.containsWordsJava8(inputString, words);\n        assertThat(result).isTrue();\n    }\n\n    @Test\n    public void givenText_whenCallingJava8_shouldNotMatchWords() {\n        final boolean result = MatchWords.containsWordsJava8(wholeInput, words);\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    public void givenText_whenCallingPattern_shouldMatchWords() {\n        final boolean result = MatchWords.containsWordsPatternMatch(inputString, words);\n        assertThat(result).isTrue();\n    }\n\n    @Test\n    public void givenText_whenCallingAhoCorasick_shouldMatchWords() {\n        final boolean result = MatchWords.containsWordsAhoCorasick(inputString, words);\n        assertThat(result).isTrue();\n    }\n\n    @Test\n    public void givenText_whenCallingAhoCorasick_shouldNotMatchWords() {\n        final boolean result = MatchWords.containsWordsAhoCorasick(wholeInput, words);\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    public void givenText_whenCallingIndexOf_shouldMatchWords() {\n        final boolean result = MatchWords.containsWordsIndexOf(inputString, words);\n        assertThat(result).isTrue();\n    }\n\n    @Test\n    public void givenText_whenCallingArrayList_shouldMatchWords() {\n        final boolean result = MatchWords.containsWordsArray(inputString, words);\n        assertThat(result).isTrue();\n    }\n\n    @Test\n    public void givenText_whenCallingArrayList_shouldNotMatchWords() {\n        final boolean result = MatchWords.containsWordsArray(wholeInput, words);\n        assertThat(result).isFalse();\n    }\n}\n"}
{"code_source": "package com.baeldung.palindrom;\n\nimport java.util.stream.IntStream;\n\npublic class Palindrome {\n\n    public boolean isPalindrome(String text) {\n        String clean = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\n        int length = clean.length();\n        int forward = 0;\n        int backward = length - 1;\n        while (backward > forward) {\n            char forwardChar = clean.charAt(forward++);\n            char backwardChar = clean.charAt(backward--);\n            if (forwardChar != backwardChar)\n                return false;\n        }\n        return true;\n    }\n\n    public boolean isPalindromeReverseTheString(String text) {\n        StringBuilder reverse = new StringBuilder();\n        String clean = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\n        char[] plain = clean.toCharArray();\n        for (int i = plain.length - 1; i >= 0; i--)\n            reverse.append(plain[i]);\n        return (reverse.toString()).equals(clean);\n    }\n\n    public boolean isPalindromeUsingStringBuilder(String text) {\n        String clean = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\n        StringBuilder plain = new StringBuilder(clean);\n        StringBuilder reverse = plain.reverse();\n        return (reverse.toString()).equals(clean);\n    }\n\n    public boolean isPalindromeUsingStringBuffer(String text) {\n        String clean = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\n        StringBuffer plain = new StringBuffer(clean);\n        StringBuffer reverse = plain.reverse();\n        return (reverse.toString()).equals(clean);\n    }\n\n    public boolean isPalindromeRecursive(String text) {\n        String clean = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\n        return recursivePalindrome(clean, 0, clean.length() - 1);\n    }\n\n    private boolean recursivePalindrome(String text, int forward, int backward) {\n        if (forward == backward)\n            return true;\n        if ((text.charAt(forward)) != (text.charAt(backward)))\n            return false;\n        if (forward < backward + 1) {\n            return recursivePalindrome(text, forward + 1, backward - 1);\n        }\n\n        return true;\n    }\n\n    public boolean isPalindromeUsingIntStream(String text) {\n        String temp = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\n        return IntStream.range(0, temp.length() / 2)\n            .noneMatch(i -> temp.charAt(i) != temp.charAt(temp.length() - i - 1));\n    }\n}\n", "test_case": "package com.baeldung.palindrom;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class PalindromeUnitTest {\n\n    private String[] words = {\n            \"Anna\",\n            \"Civic\",\n            \"Kayak\",\n            \"Level\",\n            \"Madam\",\n    };\n\n    private String[] sentences = {\n            \"Sore was I ere I saw Eros\",\n            \"Euston saw I was not Sue\",\n            \"Too hot to hoot\",\n            \"No mists or frost Simon\",\n            \"Stella won no wallets\"\n    };\n\n    private Palindrome palindrome = new Palindrome();\n\n    @Test\n    public void whenWord_shouldBePalindrome() {\n        for (String word : words)\n            assertTrue(palindrome.isPalindrome(word));\n    }\n\n    @Test\n    public void whenSentence_shouldBePalindrome() {\n        for (String sentence : sentences)\n            assertTrue(palindrome.isPalindrome(sentence));\n    }\n\n    @Test\n    public void whenReverseWord_shouldBePalindrome() {\n        for (String word : words)\n            assertTrue(palindrome.isPalindromeReverseTheString(word));\n    }\n\n    @Test\n    public void whenReverseSentence_shouldBePalindrome() {\n        for (String sentence : sentences)\n            assertTrue(palindrome.isPalindromeReverseTheString(sentence));\n    }\n\n    @Test\n    public void whenStringBuilderWord_shouldBePalindrome() {\n        for (String word : words)\n            assertTrue(palindrome.isPalindromeUsingStringBuilder(word));\n    }\n\n    @Test\n    public void whenStringBuilderSentence_shouldBePalindrome() {\n        for (String sentence : sentences)\n            assertTrue(palindrome.isPalindromeUsingStringBuilder(sentence));\n    }\n\n    @Test\n    public void whenStringBufferWord_shouldBePalindrome() {\n        for (String word : words)\n            assertTrue(palindrome.isPalindromeUsingStringBuffer(word));\n    }\n\n    @Test\n    public void whenStringBufferSentence_shouldBePalindrome() {\n        for (String sentence : sentences)\n            assertTrue(palindrome.isPalindromeUsingStringBuffer(sentence));\n    }\n\n    @Test\n    public void whenPalindromeRecursive_wordShouldBePalindrome() {\n        for (String word : words)\n            assertTrue(palindrome.isPalindromeRecursive(word));\n    }\n\n    @Test\n    public void whenPalindromeRecursive_sentenceShouldBePalindrome() {\n        for (String sentence : sentences)\n            assertTrue(palindrome.isPalindromeRecursive(sentence));\n    }\n\n    @Test\n    public void whenPalindromeStreams_wordShouldBePalindrome() {\n        for (String word : words)\n            assertTrue(palindrome.isPalindromeUsingIntStream(word));\n    }\n\n    @Test\n    public void whenPalindromeStreams_sentenceShouldBePalindrome() {\n        for (String sentence : sentences)\n            assertTrue(palindrome.isPalindromeUsingIntStream(sentence));\n    }\n}\n"}
{"code_source": "package com.baeldung.pangram;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class Pangram {\n    private static final int ALPHABET_COUNT = 26;\n\n    public static boolean isPangram(String str) {\n        if (str == null)\n            return false;\n        Boolean[] alphabetMarker = new Boolean[ALPHABET_COUNT];\n        Arrays.fill(alphabetMarker, false);\n        int alphabetIndex = 0;\n        String strUpper = str.toUpperCase();\n        for (int i = 0; i < str.length(); i++) {\n            if ('A' <= strUpper.charAt(i) && strUpper.charAt(i) <= 'Z') {\n                alphabetIndex = strUpper.charAt(i) - 'A';\n                alphabetMarker[alphabetIndex] = true;\n            }\n        }\n        for (boolean index : alphabetMarker) {\n            if (!index)\n                return false;\n        }\n        return true;\n    }\n\n    public static boolean isPangramWithStreams(String str) {\n        if (str == null)\n            return false;\n\n        // filtered character stream\n        String strUpper = str.toUpperCase();\n        Stream<Character> filteredCharStream = strUpper.chars()\n            .filter(item -> ((item >= 'A' && item <= 'Z')))\n            .mapToObj(c -> (char) c);\n        Map<Character, Boolean> alphabetMap = filteredCharStream.collect(Collectors.toMap(item -> item, k -> Boolean.TRUE, (p1, p2) -> p1));\n\n        return (alphabetMap.size() == ALPHABET_COUNT);\n    }\n\n    public static boolean isPerfectPangram(String str) {\n        if (str == null)\n            return false;\n\n        // filtered character stream\n        String strUpper = str.toUpperCase();\n        Stream<Character> filteredCharStream = strUpper.chars()\n            .filter(item -> ((item >= 'A' && item <= 'Z')))\n            .mapToObj(c -> (char) c);\n        Map<Character, Long> alphabetFrequencyMap = filteredCharStream.collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\n        return (alphabetFrequencyMap.size() == ALPHABET_COUNT && alphabetFrequencyMap.values()\n            .stream()\n            .allMatch(item -> item == 1));\n    }\n}\n", "test_case": "package com.baeldung.pangram;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\npublic class PangramUnitTest {\n\n    @Test\n    public void givenValidString_isPangram_shouldReturnSuccess() {\n        String input = \"Two driven jocks help fax my big quiz\";\n        assertTrue(Pangram.isPangram(input));\n        assertTrue(Pangram.isPangramWithStreams(input));\n    }\n\n    @Test\n    public void givenNullString_isPangram_shouldReturnFailure() {\n        String input = null;\n        assertFalse(Pangram.isPangram(input));\n        assertFalse(Pangram.isPangramWithStreams(input));\n        assertFalse(Pangram.isPerfectPangram(input));\n    }\n\n    @Test\n    public void givenPerfectPangramString_isPerfectPangram_shouldReturnSuccess() {\n        String input = \"abcdefghijklmNoPqrStuVwxyz\";\n        assertTrue(Pangram.isPerfectPangram(input));\n    }\n\n    @Test\n    public void givenNonPangramString_isPangram_shouldReturnFailure() {\n        String input = \"invalid pangram\";\n        assertFalse(Pangram.isPangram(input));\n        assertFalse(Pangram.isPangramWithStreams(input));\n    }\n\n    @Test\n    public void givenPangram_isPerfectPangram_shouldReturnFailure() {\n        String input = \"Two driven jocks help fax my big quiz\";\n        assertFalse(Pangram.isPerfectPangram(input));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.removeduplicates;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\npublic class RemoveDuplicateFromString {\n\n\n    String removeDuplicatesUsingCharArray(String str) {\n\n        char[] chars = str.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        int repeatedCtr;\n        for (int i = 0; i < chars.length; i++) {\n            repeatedCtr = 0;\n            for (int j = i + 1; j < chars.length; j++) {\n                if (chars[i] == chars[j]) {\n                    repeatedCtr++;\n                }\n            }\n            if (repeatedCtr == 0) {\n                sb.append(chars[i]);\n            }\n        }\n        return sb.toString();\n    }\n\n    String removeDuplicatesUsinglinkedHashSet(String str) {\n\n        StringBuilder sb = new StringBuilder();\n        Set<Character> linkedHashSet = new LinkedHashSet<>();\n\n        for (int i = 0; i < str.length(); i++) {\n            linkedHashSet.add(str.charAt(i));\n        }\n\n        for (Character c : linkedHashSet) {\n            sb.append(c);\n        }\n\n        return sb.toString();\n    }\n\n    String removeDuplicatesUsingSorting(String str) {\n        StringBuilder sb = new StringBuilder();\n        if(!str.isEmpty()) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n\n            sb.append(chars[0]);\n            for (int i = 1; i < chars.length; i++) {\n                if (chars[i] != chars[i - 1]) {\n                    sb.append(chars[i]);\n                }\n            }\n        }\n\n        return sb.toString();\n    }\n\n    String removeDuplicatesUsingHashSet(String str) {\n\n        StringBuilder sb = new StringBuilder();\n        Set<Character> hashSet = new HashSet<>();\n\n        for (int i = 0; i < str.length(); i++) {\n            hashSet.add(str.charAt(i));\n        }\n\n        for (Character c : hashSet) {\n            sb.append(c);\n        }\n\n        return sb.toString();\n    }\n\n    String removeDuplicatesUsingIndexOf(String str) {\n\n        StringBuilder sb = new StringBuilder();\n        int idx;\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            idx = str.indexOf(c, i + 1);\n            if (idx == -1) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n\n\n    String removeDuplicatesUsingDistinct(String str) {\n        StringBuilder sb = new StringBuilder();\n        str.chars().distinct().forEach(c -> sb.append((char) c));\n        return sb.toString();\n    }\n\n}\n\n\n", "test_case": "package com.baeldung.removeduplicates;\n\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class RemoveDuplicateFromStringUnitTest {\n\n    private final static String STR1 = \"racecar\";\n    private final static String STR2 = \"J2ee programming\";\n    private final static String STR_EMPTY = \"\";\n\n    private RemoveDuplicateFromString removeDuplicateFromString;\n\n    @Before\n    public void executedBeforeEach() {\n        removeDuplicateFromString = new RemoveDuplicateFromString();\n    }\n\n\n    @Test\n    public void whenUsingCharArray_DuplicatesShouldBeRemovedWithoutKeepingStringOrder() {\n        String str1 = removeDuplicateFromString.removeDuplicatesUsingCharArray(STR1);\n        String str2 = removeDuplicateFromString.removeDuplicatesUsingCharArray(STR2);\n        String strEmpty = removeDuplicateFromString.removeDuplicatesUsingCharArray(STR_EMPTY);\n        Assert.assertEquals(\"\", strEmpty);\n        Assert.assertEquals(\"ecar\", str1);\n        Assert.assertEquals(\"J2e poraming\", str2);\n    }\n\n    @Test\n    public void whenUsingLinkedHashSet_DuplicatesShouldBeRemovedAndItKeepStringOrder() {\n        String str1 = removeDuplicateFromString.removeDuplicatesUsinglinkedHashSet(STR1);\n        String str2 = removeDuplicateFromString.removeDuplicatesUsinglinkedHashSet(STR2);\n\n        String strEmpty = removeDuplicateFromString.removeDuplicatesUsinglinkedHashSet(STR_EMPTY);\n        Assert.assertEquals(\"\", strEmpty);\n        Assert.assertEquals(\"race\", str1);\n        Assert.assertEquals(\"J2e progamin\", str2);\n    }\n\n    @Test\n    public void whenUsingSorting_DuplicatesShouldBeRemovedWithoutKeepingStringOrder() {\n        String str1 = removeDuplicateFromString.removeDuplicatesUsingSorting(STR1);\n        String str2 = removeDuplicateFromString.removeDuplicatesUsingSorting(STR2);\n\n        String strEmpty = removeDuplicateFromString.removeDuplicatesUsingSorting(STR_EMPTY);\n        Assert.assertEquals(\"\", strEmpty);\n        Assert.assertEquals(\"acer\", str1);\n        Assert.assertEquals(\" 2Jaegimnopr\", str2);\n    }\n\n    @Test\n    public void whenUsingHashSet_DuplicatesShouldBeRemovedWithoutKeepingStringOrder() {\n        String str1 = removeDuplicateFromString.removeDuplicatesUsingHashSet(STR1);\n        String str2 = removeDuplicateFromString.removeDuplicatesUsingHashSet(STR2);\n        String strEmpty = removeDuplicateFromString.removeDuplicatesUsingHashSet(STR_EMPTY);\n        Assert.assertEquals(\"\", strEmpty);\n        Assert.assertEquals(\"arce\", str1);\n        Assert.assertEquals(\" pa2regiJmno\", str2);\n    }\n\n    @Test\n    public void whenUsingIndexOf_DuplicatesShouldBeRemovedWithoutKeepingStringOrder() {\n        String str1 = removeDuplicateFromString.removeDuplicatesUsingIndexOf(STR1);\n        String str2 = removeDuplicateFromString.removeDuplicatesUsingIndexOf(STR2);\n        String strEmpty = removeDuplicateFromString.removeDuplicatesUsingIndexOf(STR_EMPTY);\n        Assert.assertEquals(\"\", strEmpty);\n        Assert.assertEquals(\"ecar\", str1);\n        Assert.assertEquals(\"J2e poraming\", str2);\n    }\n\n    @Test\n    public void whenUsingJava8_DuplicatesShouldBeRemovedAndItKeepStringOrder() {\n        String str1 = removeDuplicateFromString.removeDuplicatesUsingDistinct(STR1);\n        String str2 = removeDuplicateFromString.removeDuplicatesUsingDistinct(STR2);\n        String strEmpty = removeDuplicateFromString.removeDuplicatesUsingDistinct(STR_EMPTY);\n        Assert.assertEquals(\"\", strEmpty);\n        Assert.assertEquals(\"race\", str1);\n        Assert.assertEquals(\"J2e progamin\", str2);\n    }\n}\n"}
{"code_source": "package com.baeldung.repetition;\n\npublic class SubstringRepetition {\n\n    public static boolean containsOnlySubstrings(String string) {\n\n        if (string.length() < 2) {\n            return false;\n        }\n\n        StringBuilder substr = new StringBuilder();\n        for (int i = 0; i < string.length() / 2; i++) {\n            substr.append(string.charAt(i));\n\n            String clearedFromSubstrings = string.replaceAll(substr.toString(), \"\");\n\n            if (clearedFromSubstrings.length() == 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public static boolean containsOnlySubstringsEfficient(String string) {\n\n        return ((string + string).indexOf(string, 1) != string.length());\n    }\n}\n", "test_case": "package com.baeldung.repetition;\n\nimport org.junit.Test;\n\nimport static com.baeldung.repetition.SubstringRepetition.*;\nimport static org.junit.Assert.*;\n\npublic class SubstringRepetitionUnitTest {\n\n    private String validString = \"aa\";\n    private String validStringTwo = \"ababab\";\n    private String validStringThree = \"baeldungbaeldung\";\n\n    private String invalidString = \"aca\";\n    private String invalidStringTwo = \"ababa\";\n    private String invalidStringThree = \"baeldungnonrepeatedbaeldung\";\n\n    @Test\n    public void givenValidStrings_whenCheckIfContainsOnlySubstrings_thenReturnsTrue() {\n        assertTrue(containsOnlySubstrings(validString));\n        assertTrue(containsOnlySubstrings(validStringTwo));\n        assertTrue(containsOnlySubstrings(validStringThree));\n    }\n\n    @Test\n    public void givenInvalidStrings_whenCheckIfContainsOnlySubstrings_thenReturnsFalse() {\n        assertFalse(containsOnlySubstrings(invalidString));\n        assertFalse(containsOnlySubstrings(invalidStringTwo));\n        assertFalse(containsOnlySubstrings(invalidStringThree));\n    }\n\n    @Test\n    public void givenValidStrings_whenCheckEfficientlyIfContainsOnlySubstrings_thenReturnsTrue() {\n        assertTrue(containsOnlySubstringsEfficient(validString));\n        assertTrue(containsOnlySubstringsEfficient(validStringTwo));\n        assertTrue(containsOnlySubstringsEfficient(validStringThree));\n    }\n\n    @Test\n    public void givenInvalidStrings_whenCheckEfficientlyIfContainsOnlySubstrings_thenReturnsFalse() {\n        assertFalse(containsOnlySubstringsEfficient(invalidString));\n        assertFalse(containsOnlySubstringsEfficient(invalidStringTwo));\n        assertFalse(containsOnlySubstringsEfficient(invalidStringThree));\n    }\n}\n"}
{"code_source": "package com.baeldung.reverse;\n\nimport org.apache.commons.lang3.StringUtils;\n\npublic class ReverseStringExamples {\n\n    public static String reverse(String input) {\n        if (input == null) {\n            return null;\n        }\n\n        String output = \"\";\n\n        for (int i = input.length() - 1; i >= 0; i--) {\n            output = output + input.charAt(i);\n        }\n\n        return output;\n    }\n\n    public static String reverseUsingStringBuilder(String input) {\n        if (input == null) {\n            return null;\n        }\n\n        StringBuilder output = new StringBuilder(input).reverse();\n\n        return output.toString();\n    }\n\n    public static String reverseUsingApacheCommons(String input) {\n        return StringUtils.reverse(input);\n    }\n\n    public static String reverseTheOrderOfWords(String sentence) {\n        if (sentence == null) {\n            return null;\n        }\n\n        StringBuilder output = new StringBuilder();\n        String[] words = sentence.split(\" \");\n\n        for (int i = words.length - 1; i >= 0; i--) {\n            output.append(words[i]);\n            output.append(\" \");\n        }\n\n        return output.toString()\n            .trim();\n    }\n\n    public static String reverseTheOrderOfWordsUsingApacheCommons(String sentence) {\n        return StringUtils.reverseDelimited(sentence, ' ');\n    }\n\n}\n", "test_case": "package com.baeldung.reverse;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class ReverseStringExamplesUnitTest {\n\n    private static final String STRING_INPUT = \"cat\";\n    private static final String STRING_INPUT_REVERSED = \"tac\";\n    private static final String SENTENCE = \"The quick brown fox jumps over the lazy dog\";\n    private static final String REVERSED_WORDS_SENTENCE = \"dog lazy the over jumps fox brown quick The\";\n\n    @Test\n    public void whenReverseIsCalled_ThenCorrectStringIsReturned() {\n        String reversed = ReverseStringExamples.reverse(STRING_INPUT);\n        String reversedNull = ReverseStringExamples.reverse(null);\n        String reversedEmpty = ReverseStringExamples.reverse(StringUtils.EMPTY);\n\n        assertEquals(STRING_INPUT_REVERSED, reversed);\n        assertEquals(null, reversedNull);\n        assertEquals(StringUtils.EMPTY, reversedEmpty);\n    }\n\n    @Test\n    public void whenReverseUsingStringBuilderIsCalled_ThenCorrectStringIsReturned() throws Exception {\n        String reversed = ReverseStringExamples.reverseUsingStringBuilder(STRING_INPUT);\n        String reversedNull = ReverseStringExamples.reverseUsingStringBuilder(null);\n        String reversedEmpty = ReverseStringExamples.reverseUsingStringBuilder(StringUtils.EMPTY);\n\n        assertEquals(STRING_INPUT_REVERSED, reversed);\n        assertEquals(null, reversedNull);\n        assertEquals(StringUtils.EMPTY, reversedEmpty);\n    }\n\n    @Test\n    public void whenReverseUsingApacheCommonsIsCalled_ThenCorrectStringIsReturned() throws Exception {\n        String reversed = ReverseStringExamples.reverseUsingApacheCommons(STRING_INPUT);\n        String reversedNull = ReverseStringExamples.reverseUsingApacheCommons(null);\n        String reversedEmpty = ReverseStringExamples.reverseUsingApacheCommons(StringUtils.EMPTY);\n\n        assertEquals(STRING_INPUT_REVERSED, reversed);\n        assertEquals(null, reversedNull);\n        assertEquals(StringUtils.EMPTY, reversedEmpty);\n    }\n\n    @Test\n    public void whenReverseTheOrderOfWordsIsCalled_ThenCorrectStringIsReturned() {\n        String reversed = ReverseStringExamples.reverseTheOrderOfWords(SENTENCE);\n        String reversedNull = ReverseStringExamples.reverseTheOrderOfWords(null);\n        String reversedEmpty = ReverseStringExamples.reverseTheOrderOfWords(StringUtils.EMPTY);\n\n        assertEquals(REVERSED_WORDS_SENTENCE, reversed);\n        assertEquals(null, reversedNull);\n        assertEquals(StringUtils.EMPTY, reversedEmpty);\n    }\n\n    @Test\n    public void whenReverseTheOrderOfWordsUsingApacheCommonsIsCalled_ThenCorrectStringIsReturned() {\n        String reversed = ReverseStringExamples.reverseTheOrderOfWordsUsingApacheCommons(SENTENCE);\n        String reversedNull = ReverseStringExamples.reverseTheOrderOfWordsUsingApacheCommons(null);\n        String reversedEmpty = ReverseStringExamples.reverseTheOrderOfWordsUsingApacheCommons(StringUtils.EMPTY);\n\n        assertEquals(REVERSED_WORDS_SENTENCE, reversed);\n        assertEquals(null, reversedNull);\n        assertEquals(StringUtils.EMPTY, reversedEmpty);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.searching;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class WordIndexer {\n\n    public List<Integer> findWord(String textString, String word) {\n        int index = 0;\n        List<Integer> indexes = new ArrayList<Integer>();\n        String lowerCaseTextString = textString.toLowerCase();\n        String lowerCaseWord = word.toLowerCase();\n\n        while(index != -1) {\n            index = lowerCaseTextString.indexOf(lowerCaseWord, index);\n            if (index == -1) {\n                break;\n            }\n\n            indexes.add(index);\n            index++;\n        }\n        return indexes;\n    }\n\n\n\n    public List<Integer> findWordUpgrade(String textString, String word) {\n        int index = 0;\n        List<Integer> indexes = new ArrayList<Integer>();\n        StringBuilder output = new StringBuilder();\n        String lowerCaseTextString = textString.toLowerCase();\n        String lowerCaseWord = word.toLowerCase();\n        int wordLength = 0;\n\n        while(index != -1){\n            index = lowerCaseTextString.indexOf(lowerCaseWord, index + wordLength);  // Slight improvement\n            if (index != -1) {\n                indexes.add(index);\n            }\n            wordLength = word.length();\n        }\n        return indexes;\n    }\n}\n", "test_case": "package com.baeldung.searching;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n\npublic class WordIndexerUnitTest {\n\n    String theString;\n    WordIndexer wordIndexer;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        wordIndexer = new WordIndexer();\n\n        theString = \"To be, or not to be: that is the question: \"\n          + \"Whether 'tis nobler in the mind to suffer \"\n          + \"The slings and arrows of outrageous fortune, \"\n          + \"Or to take arms against a sea of troubles, \"\n          + \"And by opposing end them? To die: to sleep; \"\n          + \"No more; and by a sleep to say we end \"\n          + \"The heart-ache and the thousand natural shocks \"\n          + \"That flesh is heir to, 'tis a consummation \"\n          + \"Devoutly to be wish'd. To die, to sleep; \"\n          + \"To sleep: perchance to dream: ay, there's the rub: \"\n          + \"For in that sleep of death what dreams may come,\";\n    }\n\n    @Test\n\n    public void givenWord_whenSearching_thenFindAllIndexedLocations() {\n        List<Integer> expectedResult = Arrays.asList(7, 122, 130, 221, 438);\n\n        List<Integer> actualResult = wordIndexer.findWord(theString, \"or\");\n\n        assertEquals(expectedResult, actualResult);\n    }\n\n    @Test\n    public void givenWordWithNoRepeatCharacters_whenImprovedSearching_thenFindAllIndexedLocations() {\n        List<Integer> expectedResult = Arrays.asList(7, 122, 130, 221, 438);\n\n        List<Integer> actualResult = wordIndexer.findWordUpgrade(theString, \"or\");\n\n        assertEquals(expectedResult, actualResult);\n    }\n\n\n    @Test\n    public void givenWord_whenSearching_thenFindAtEndOfString() {\n        List<Integer> expectedResult = Arrays.asList(480);\n\n        List<Integer> actualResult = wordIndexer.findWordUpgrade(theString, \"come,\");\n\n        assertEquals(expectedResult, actualResult);\n    }\n}\n"}
{"code_source": "/**\n * \n */\npackage com.baeldung.addchar;\n\n/**\n * @author swpraman\n *\n */\npublic class AppendCharAtPositionX {\n\n    public String addCharUsingCharArray(String str, char ch, int position) {\n        validate(str, position);\n        int len = str.length();\n        char[] updatedArr = new char[len + 1];\n        str.getChars(0, position, updatedArr, 0);\n        updatedArr[position] = ch;\n        str.getChars(position, len, updatedArr, position + 1);\n        return new String(updatedArr);\n    }\n\n    public String addCharUsingSubstring(String str, char ch, int position) {\n        validate(str, position);\n        return str.substring(0, position) + ch + str.substring(position);\n    }\n\n    public String addCharUsingStringBuilder(String str, char ch, int position) {\n        validate(str, position);\n        StringBuilder sb = new StringBuilder(str);\n        sb.insert(position, ch);\n        return sb.toString();\n    }\n\n    private void validate(String str, int position) {\n        if (str == null) {\n            throw new IllegalArgumentException(\"Str should not be null\");\n        }\n        int len = str.length();\n        if (position < 0 || position > len) {\n            throw new IllegalArgumentException(\"position[\" + position + \"] should be \" + \"in the range 0..\" + len + \" for string \" + str);\n        }\n    }\n\n}\n", "test_case": "/**\n * \n */\npackage com.baeldung.addchar;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\n/**\n * @author swpraman\n *\n */\npublic class AppendCharAtPositionXUnitTest {\n\n    private AppendCharAtPositionX appendCharAtPosition = new AppendCharAtPositionX();\n    private String word = \"Titanc\";\n    private char letter = 'i';\n\n    @Test\n    public void whenUsingCharacterArrayAndCharacterAddedAtBeginning_shouldAddCharacter() {\n        assertEquals(\"iTitanc\", appendCharAtPosition.addCharUsingCharArray(word, letter, 0));\n    }\n\n    @Test\n    public void whenUsingSubstringAndCharacterAddedAtBeginning_shouldAddCharacter() {\n        assertEquals(\"iTitanc\", appendCharAtPosition.addCharUsingSubstring(word, letter, 0));\n    }\n\n    @Test\n    public void whenUsingStringBuilderAndCharacterAddedAtBeginning_shouldAddCharacter() {\n        assertEquals(\"iTitanc\", appendCharAtPosition.addCharUsingStringBuilder(word, letter, 0));\n    }\n\n    @Test\n    public void whenUsingCharacterArrayAndCharacterAddedAtMiddle_shouldAddCharacter() {\n        assertEquals(\"Titianc\", appendCharAtPosition.addCharUsingCharArray(word, letter, 3));\n    }\n\n    @Test\n    public void whenUsingSubstringAndCharacterAddedAtMiddle_shouldAddCharacter() {\n        assertEquals(\"Titianc\", appendCharAtPosition.addCharUsingSubstring(word, letter, 3));\n    }\n\n    @Test\n    public void whenUsingStringBuilderAndCharacterAddedAtMiddle_shouldAddCharacter() {\n        assertEquals(\"Titianc\", appendCharAtPosition.addCharUsingStringBuilder(word, letter, 3));\n    }\n\n    @Test\n    public void whenUsingCharacterArrayAndCharacterAddedAtEnd_shouldAddCharacter() {\n        assertEquals(\"Titanci\", appendCharAtPosition.addCharUsingCharArray(word, letter, word.length()));\n    }\n\n    @Test\n    public void whenUsingSubstringAndCharacterAddedAtEnd_shouldAddCharacter() {\n        assertEquals(\"Titanci\", appendCharAtPosition.addCharUsingSubstring(word, letter, word.length()));\n    }\n\n    @Test\n    public void whenUsingStringBuilderAndCharacterAddedAtEnd_shouldAddCharacter() {\n        assertEquals(\"Titanci\", appendCharAtPosition.addCharUsingStringBuilder(word, letter, word.length()));\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void whenUsingCharacterArrayAndCharacterAddedAtNegativePosition_shouldThrowException() {\n        appendCharAtPosition.addCharUsingStringBuilder(word, letter, -1);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void whenUsingSubstringAndCharacterAddedAtNegativePosition_shouldThrowException() {\n        appendCharAtPosition.addCharUsingStringBuilder(word, letter, -1);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void whenUsingStringBuilderAndCharacterAddedAtNegativePosition_shouldThrowException() {\n        appendCharAtPosition.addCharUsingStringBuilder(word, letter, -1);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void whenUsingCharacterArrayAndCharacterAddedAtInvalidPosition_shouldThrowException() {\n        appendCharAtPosition.addCharUsingStringBuilder(word, letter, word.length() + 2);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void whenUsingSubstringAndCharacterAddedAtInvalidPosition_shouldThrowException() {\n        appendCharAtPosition.addCharUsingStringBuilder(word, letter, word.length() + 2);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void whenUsingStringBuilderAndCharacterAddedAtInvalidPosition_shouldThrowException() {\n        appendCharAtPosition.addCharUsingStringBuilder(word, letter, word.length() + 2);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void whenUsingCharacterArrayAndCharacterAddedAtPositionXAndStringIsNull_shouldThrowException() {\n        appendCharAtPosition.addCharUsingStringBuilder(null, letter, 3);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void whenUsingSubstringAndCharacterAddedAtPositionXAndStringIsNull_shouldThrowException() {\n        appendCharAtPosition.addCharUsingStringBuilder(null, letter, 3);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void whenUsingStringBuilderAndCharacterAddedAtPositionXAndStringIsNull_shouldThrowException() {\n        appendCharAtPosition.addCharUsingStringBuilder(null, letter, 3);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.padding;\n\npublic class StringPaddingUtil {\n\n    public static String padLeftSpaces(String inputString, int length) {\n        if (inputString.length() >= length) {\n            return inputString;\n        }\n        StringBuilder sb = new StringBuilder();\n        while (sb.length() < length - inputString.length()) {\n            sb.append(' ');\n        }\n        sb.append(inputString);\n\n        return sb.toString();\n    }\n\n    public static String padLeft(String inputString, int length) {\n        if (inputString.length() >= length) {\n            return inputString;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            sb.append(' ');\n        }\n        return sb.substring(inputString.length()) + inputString;\n    }\n\n    public static String padLeftZeros(String inputString, int length) {\n        return String\n          .format(\"%1$\" + length + \"s\", inputString)\n          .replace(' ', '0');\n    }\n}\n", "test_case": "package com.baeldung.padding;\n\nimport com.google.common.base.Strings;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class StringPaddingUtilUnitTest {\n\n    String inputString = \"123456\";\n    String expectedPaddedStringSpaces = \"    123456\";\n    String expectedPaddedStringZeros = \"0000123456\";\n    int minPaddedStringLength = 10;\n\n    @Test\n    public void givenString_whenPaddingWithSpaces_thenStringPaddedMatches() {\n        assertEquals(expectedPaddedStringSpaces, StringPaddingUtil.padLeftSpaces(inputString, minPaddedStringLength));\n    }\n\n    @Test\n    public void givenString_whenPaddingWithSpacesUsingSubstring_thenStringPaddedMatches() {\n        assertEquals(expectedPaddedStringSpaces, StringPaddingUtil.padLeft(inputString, minPaddedStringLength));\n    }\n\n    @Test\n    public void givenString_whenPaddingWithZeros_thenStringPaddedMatches() {\n        assertEquals(expectedPaddedStringZeros, StringPaddingUtil.padLeftZeros(inputString, minPaddedStringLength));\n    }\n\n    @Test\n    public void givenString_whenPaddingWithSpacesUsingStringUtils_thenStringPaddedMatches() {\n        assertEquals(expectedPaddedStringSpaces, StringUtils.leftPad(inputString, minPaddedStringLength));\n    }\n\n    @Test\n    public void givenString_whenPaddingWithZerosUsingStringUtils_thenStringPaddedMatches() {\n        assertEquals(expectedPaddedStringZeros, StringUtils.leftPad(inputString, minPaddedStringLength, \"0\"));\n    }\n\n    @Test\n    public void givenString_whenPaddingWithSpacesUsingGuavaStrings_thenStringPaddedMatches() {\n        assertEquals(expectedPaddedStringSpaces, Strings.padStart(inputString, minPaddedStringLength, ' '));\n    }\n\n    @Test\n    public void givenString_whenPaddingWithZerosUsingGuavaStrings_thenStringPaddedMatches() {\n        assertEquals(expectedPaddedStringZeros, Strings.padStart(inputString, minPaddedStringLength, '0'));\n    }\n}\n"}
{"code_source": "package com.baeldung.removeleadingtrailingchar;\n\n\nimport com.google.common.base.CharMatcher;\nimport org.apache.commons.lang3.StringUtils;\n\npublic class RemoveLeadingAndTrailingZeroes {\n\n    public static String removeLeadingZeroesWithStringBuilder(String s) {\n        StringBuilder sb = new StringBuilder(s);\n\n        while (sb.length() > 1 && sb.charAt(0) == '0') {\n            sb.deleteCharAt(0);\n        }\n\n        return sb.toString();\n    }\n\n    public static String removeTrailingZeroesWithStringBuilder(String s) {\n        StringBuilder sb = new StringBuilder(s);\n\n        while (sb.length() > 1 && sb.charAt(sb.length() - 1) == '0') {\n            sb.setLength(sb.length() - 1);\n        }\n\n        return sb.toString();\n    }\n\n    public static String removeLeadingZeroesWithSubstring(String s) {\n        int index = 0;\n\n        for (; index < s.length() - 1; index++) {\n            if (s.charAt(index) != '0') {\n                break;\n            }\n        }\n\n        return s.substring(index);\n    }\n\n    public static String removeTrailingZeroesWithSubstring(String s) {\n        int index = s.length() - 1;\n\n        for (; index > 0; index--) {\n            if (s.charAt(index) != '0') {\n                break;\n            }\n        }\n\n        return s.substring(0, index + 1);\n    }\n\n    public static String removeLeadingZeroesWithApacheCommonsStripStart(String s) {\n        String stripped = StringUtils.stripStart(s, \"0\");\n\n        if (stripped.isEmpty() && !s.isEmpty()) {\n            return \"0\";\n        }\n\n        return stripped;\n    }\n\n    public static String removeTrailingZeroesWithApacheCommonsStripEnd(String s) {\n        String stripped = StringUtils.stripEnd(s, \"0\");\n\n        if (stripped.isEmpty() && !s.isEmpty()) {\n            return \"0\";\n        }\n\n        return stripped;\n    }\n\n    public static String removeLeadingZeroesWithGuavaTrimLeadingFrom(String s) {\n        String stripped = CharMatcher.is('0')\n            .trimLeadingFrom(s);\n\n        if (stripped.isEmpty() && !s.isEmpty()) {\n            return \"0\";\n        }\n\n        return stripped;\n    }\n\n    public static String removeTrailingZeroesWithGuavaTrimTrailingFrom(String s) {\n        String stripped = CharMatcher.is('0')\n            .trimTrailingFrom(s);\n\n        if (stripped.isEmpty() && !s.isEmpty()) {\n            return \"0\";\n        }\n\n        return stripped;\n    }\n\n    public static String removeLeadingZeroesWithRegex(String s) {\n        return s.replaceAll(\"^0+(?!$)\", \"\");\n    }\n\n    public static String removeTrailingZeroesWithRegex(String s) {\n        return s.replaceAll(\"(?!^)0+$\", \"\");\n    }\n}\n", "test_case": "package com.baeldung.removeleadingtrailingchar;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport java.util.stream.Stream;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class RemoveLeadingAndTrailingZeroesUnitTest {\n\n    public static Stream<Arguments> leadingZeroTestProvider() {\n        return Stream.of(Arguments.of(\"\", \"\"), Arguments.of(\"abc\", \"abc\"), Arguments.of(\"123\", \"123\"), Arguments.of(\"0abc\", \"abc\"), Arguments.of(\"0123\", \"123\"), Arguments.of(\"0000123\", \"123\"), Arguments.of(\"1230\", \"1230\"), Arguments.of(\"01230\", \"1230\"), Arguments.of(\"01\", \"1\"),\n            Arguments.of(\"0001\", \"1\"), Arguments.of(\"0\", \"0\"), Arguments.of(\"00\", \"0\"), Arguments.of(\"0000\", \"0\"), Arguments.of(\"12034\", \"12034\"), Arguments.of(\"1200034\", \"1200034\"), Arguments.of(\"0012034\", \"12034\"), Arguments.of(\"1203400\", \"1203400\"));\n    }\n\n    public static Stream<Arguments> trailingZeroTestProvider() {\n        return Stream.of(Arguments.of(\"\", \"\"), Arguments.of(\"abc\", \"abc\"), Arguments.of(\"123\", \"123\"), Arguments.of(\"abc0\", \"abc\"), Arguments.of(\"1230\", \"123\"), Arguments.of(\"1230000\", \"123\"), Arguments.of(\"0123\", \"0123\"), Arguments.of(\"01230\", \"0123\"), Arguments.of(\"10\", \"1\"),\n            Arguments.of(\"1000\", \"1\"), Arguments.of(\"0\", \"0\"), Arguments.of(\"00\", \"0\"), Arguments.of(\"0000\", \"0\"), Arguments.of(\"12034\", \"12034\"), Arguments.of(\"1200034\", \"1200034\"), Arguments.of(\"0012034\", \"0012034\"), Arguments.of(\"1203400\", \"12034\"));\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"leadingZeroTestProvider\")\n    public void givenTestStrings_whenRemoveLeadingZeroesWithStringBuilder_thenReturnWithoutLeadingZeroes(String input, String expected) {\n        // given\n\n        // when\n        String result = RemoveLeadingAndTrailingZeroes.removeLeadingZeroesWithStringBuilder(input);\n\n        // then\n        assertThat(result).isEqualTo(expected);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"trailingZeroTestProvider\")\n    public void givenTestStrings_whenRemoveTrailingZeroesWithStringBuilder_thenReturnWithoutTrailingZeroes(String input, String expected) {\n        // given\n\n        // when\n        String result = RemoveLeadingAndTrailingZeroes.removeTrailingZeroesWithStringBuilder(input);\n\n        // then\n        assertThat(result).isEqualTo(expected);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"leadingZeroTestProvider\")\n    public void givenTestStrings_whenRemoveLeadingZeroesWithSubstring_thenReturnWithoutLeadingZeroes(String input, String expected) {\n        // given\n\n        // when\n        String result = RemoveLeadingAndTrailingZeroes.removeLeadingZeroesWithSubstring(input);\n\n        // then\n        assertThat(result).isEqualTo(expected);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"trailingZeroTestProvider\")\n    public void givenTestStrings_whenRemoveTrailingZeroesWithSubstring_thenReturnWithoutTrailingZeroes(String input, String expected) {\n        // given\n\n        // when\n        String result = RemoveLeadingAndTrailingZeroes.removeTrailingZeroesWithSubstring(input);\n\n        // then\n        assertThat(result).isEqualTo(expected);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"leadingZeroTestProvider\")\n    public void givenTestStrings_whenRemoveLeadingZeroesWithApacheCommonsStripStart_thenReturnWithoutLeadingZeroes(String input, String expected) {\n        // given\n\n        // when\n        String result = RemoveLeadingAndTrailingZeroes.removeLeadingZeroesWithApacheCommonsStripStart(input);\n\n        // then\n        assertThat(result).isEqualTo(expected);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"trailingZeroTestProvider\")\n    public void givenTestStrings_whenRemoveTrailingZeroesWithApacheCommonsStripEnd_thenReturnWithoutTrailingZeroes(String input, String expected) {\n        // given\n\n        // when\n        String result = RemoveLeadingAndTrailingZeroes.removeTrailingZeroesWithApacheCommonsStripEnd(input);\n\n        // then\n        assertThat(result).isEqualTo(expected);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"leadingZeroTestProvider\")\n    public void givenTestStrings_whenRemoveLeadingZeroesWithGuavaTrimLeadingFrom_thenReturnWithoutLeadingZeroes(String input, String expected) {\n        // given\n\n        // when\n        String result = RemoveLeadingAndTrailingZeroes.removeLeadingZeroesWithGuavaTrimLeadingFrom(input);\n\n        // then\n        assertThat(result).isEqualTo(expected);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"trailingZeroTestProvider\")\n    public void givenTestStrings_whenRemoveTrailingZeroesWithGuavaTrimTrailingFrom_thenReturnWithoutTrailingZeroes(String input, String expected) {\n        // given\n\n        // when\n        String result = RemoveLeadingAndTrailingZeroes.removeTrailingZeroesWithGuavaTrimTrailingFrom(input);\n\n        // then\n        assertThat(result).isEqualTo(expected);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"leadingZeroTestProvider\")\n    public void givenTestStrings_whenRemoveLeadingZeroesWithRegex_thenReturnWithoutLeadingZeroes(String input, String expected) {\n        // given\n\n        // when\n        String result = RemoveLeadingAndTrailingZeroes.removeLeadingZeroesWithRegex(input);\n\n        // then\n        assertThat(result).isEqualTo(expected);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"trailingZeroTestProvider\")\n    public void givenTestStrings_whenRemoveTrailingZeroesWithRegex_thenReturnWithoutTrailingZeroes(String input, String expected) {\n        // given\n\n        // when\n        String result = RemoveLeadingAndTrailingZeroes.removeTrailingZeroesWithRegex(input);\n\n        // then\n        assertThat(result).isEqualTo(expected);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.anagram;\n\nimport java.util.Arrays;\nimport com.google.common.collect.HashMultiset;\nimport com.google.common.collect.Multiset;\n\npublic class Anagram {\n    // This definition only works for single byte encoding character set.\n    // For multibyte encoding, such as UTF-8, 16, 32 etc.,\n    // we need to increase this number so that it can contain all possible characters.\n    private static int CHARACTER_RANGE = 256;\n\n    public boolean isAnagramSort(String string1, String string2) {\n        if (string1.length() != string2.length()) {\n            return false;\n        }\n        char[] a1 = string1.toCharArray();\n        char[] a2 = string2.toCharArray();\n        Arrays.sort(a1);\n        Arrays.sort(a2);\n        return Arrays.equals(a1, a2);\n    }\n\n    public boolean isAnagramCounting(String string1, String string2) {\n        if (string1.length() != string2.length()) {\n            return false;\n        }\n        int count[] = new int[CHARACTER_RANGE];\n        for (int i = 0; i < string1.length(); i++) {\n            count[string1.charAt(i)]++;\n            count[string2.charAt(i)]--;\n        }\n        for (int i = 0; i < CHARACTER_RANGE; i++) {\n            if (count[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean isAnagramMultiset(String string1, String string2) {\n        if (string1.length() != string2.length()) {\n            return false;\n        }\n        Multiset<Character> multiset1 = HashMultiset.create();\n        Multiset<Character> multiset2 = HashMultiset.create();\n        for (int i = 0; i < string1.length(); i++) {\n            multiset1.add(string1.charAt(i));\n            multiset2.add(string2.charAt(i));\n        }\n        return multiset1.equals(multiset2);\n    }\n\n    public boolean isLetterBasedAnagramMultiset(String string1, String string2) {\n        return isAnagramMultiset(preprocess(string1), preprocess(string2));\n    }\n\n    private String preprocess(String source) {\n        return source.replaceAll(\"[^a-zA-Z]\", \"\").toLowerCase();\n    }\n\n}\n", "test_case": "package com.baeldung.anagram;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class AnagramUnitTest {\n    @Test\n    public void givenAnagram_whenUsingSort_thenIdentifyAnagram() {\n        Anagram anagram = new Anagram();\n        String string1 = \"abcab\";\n        String string2 = \"cabba\";\n        assertTrue(anagram.isAnagramSort(string1, string2));\n    }\n\n    @Test\n    public void givenAnagram_whenUsingCounting_thenIdentifyAnagram() {\n        Anagram anagram = new Anagram();\n        String string1 = \"abcab\";\n        String string2 = \"cabba\";\n        assertTrue(anagram.isAnagramCounting(string1, string2));\n    }\n\n    @Test\n    public void givenAnagram_whenUsingMultiset_thenIdentifyAnagram() {\n        Anagram anagram = new Anagram();\n        String string1 = \"abcab\";\n        String string2 = \"cabba\";\n        assertTrue(anagram.isAnagramMultiset(string1, string2));\n    }\n\n    @Test\n    public void givenAnagram_whenUsingLetterBasedMultiset_thenIdentifyAnagram() {\n        Anagram anagram = new Anagram();\n        String string1 = \"A decimal point\";\n        String string2 = \"I\u2019m a dot in place.\";\n        assertTrue(anagram.isLetterBasedAnagramMultiset(string1, string2));\n    }\n\n    @Test\n    public void givenNonAnagram_whenUsingSort_thenIdentifyNotAnagram() {\n        Anagram anagram = new Anagram();\n        String string1 = \"abcaba\";\n        String string2 = \"cabbac\";\n        assertFalse(anagram.isAnagramSort(string1, string2));\n    }\n\n    @Test\n    public void givenNonAnagram_whenUsingCounting_thenIdentifyNotAnagram() {\n        Anagram anagram = new Anagram();\n        String string1 = \"abcaba\";\n        String string2 = \"cabbac\";\n        assertFalse(anagram.isAnagramCounting(string1, string2));\n    }\n\n    @Test\n    public void givenNonAnagram_whenUsingMultiset_thenIdentifyNotAnagram() {\n        Anagram anagram = new Anagram();\n        String string1 = \"abcaba\";\n        String string2 = \"cabbac\";\n        assertFalse(anagram.isAnagramMultiset(string1, string2));\n    }\n\n    @Test\n    public void ggivenNonAnagram_whenUsingLetterBasedMultiset_thenIdentifyAnagram() {\n        Anagram anagram = new Anagram();\n        String string1 = \"A decimal point\";\n        String string2 = \"I\u2019m dot in place.\";\n        assertFalse(anagram.isAnagramMultiset(string1, string2));\n    }\n}\n"}
{"code_source": "package com.baeldung.emailvalidation;\n\nimport java.util.regex.Pattern;\n\npublic class EmailValidation {\n\n    public static boolean patternMatches(String emailAddress, String regexPattern) {\n        return Pattern.compile(regexPattern)\n            .matcher(emailAddress)\n            .matches();\n    }\n}\n", "test_case": "package com.baeldung.emailvalidation;\n\nimport static org.junit.Assert.assertTrue;\nimport org.apache.commons.validator.routines.EmailValidator;\nimport org.junit.Test;\n\npublic class EmailValidationUnitTest {\n\n    private String emailAddress;\n    private String regexPattern;\n\n    @Test\n    public void testUsingEmailValidator() {\n        emailAddress = \"username@domain.com\";\n        assertTrue(EmailValidator.getInstance()\n            .isValid(emailAddress));\n    }\n\n    @Test\n    public void testUsingSimpleRegex() {\n        emailAddress = \"username@domain.com\";\n        regexPattern = \"^(.+)@(\\\\S+)$\";\n        assertTrue(EmailValidation.patternMatches(emailAddress, regexPattern));\n    }\n\n    @Test\n    public void testUsingStrictRegex() {\n        emailAddress = \"username@domain.com\";\n        regexPattern = \"^(?=.{1,64}@)[A-Za-z0-9_-]+(\\\\.[A-Za-z0-9_-]+)*@\" \n            + \"[^-][A-Za-z0-9-]+(\\\\.[A-Za-z0-9-]+)*(\\\\.[A-Za-z]{2,})$\";\n        assertTrue(EmailValidation.patternMatches(emailAddress, regexPattern));\n    }\n\n    @Test\n    public void testUsingUnicodeRegex() {\n        emailAddress = \"\u7528\u6237\u540d@\u9886\u57df.\u7535\u8111\";\n        regexPattern = \"^(?=.{1,64}@)[\\\\p{L}0-9_-]+(\\\\.[\\\\p{L}0-9_-]+)*@\" \n            + \"[^-][\\\\p{L}0-9-]+(\\\\.[\\\\p{L}0-9-]+)*(\\\\.[\\\\p{L}]{2,})$\";\n        assertTrue(EmailValidation.patternMatches(emailAddress, regexPattern));\n    }\n\n    @Test\n    public void testUsingRFC5322Regex() {\n        emailAddress = \"username@domain.com\";\n        regexPattern = \"^[a-zA-Z0-9_!#$%&'*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$\";\n        assertTrue(EmailValidation.patternMatches(emailAddress, regexPattern));\n    }\n\n    @Test\n    public void testRestrictDots() {\n        emailAddress = \"username@domain.com\";\n        regexPattern = \"^[a-zA-Z0-9_!#$%&'*+/=?`{|}~^-]+(?:\\\\.[a-zA-Z0-9_!#$%&'*+/=?`{|}~^-]+)*@\" \n            + \"[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$\";\n        assertTrue(EmailValidation.patternMatches(emailAddress, regexPattern));\n    }\n\n    @Test\n    public void testOwaspValidation() {\n        emailAddress = \"username@domain.com\";\n        regexPattern = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,7}$\";\n        assertTrue(EmailValidation.patternMatches(emailAddress, regexPattern));\n    }\n\n    @Test\n    public void testTopLevelDomain() {\n        emailAddress = \"username@domain.com\";\n        regexPattern = \"^[\\\\w!#$%&'*+/=?`{|}~^-]+(?:\\\\.[\\\\w!#$%&'*+/=?`{|}~^-]+)*\" \n            + \"@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,6}$\";\n        assertTrue(EmailValidation.patternMatches(emailAddress, regexPattern));\n    }\n    \n    @Test\n    public void testGmailSpecialCase() {\n        emailAddress = \"username+something@domain.com\";\n        regexPattern = \"^(?=.{1,64}@)[A-Za-z0-9\\\\+_-]+(\\\\.[A-Za-z0-9\\\\+_-]+)*@\" \n            + \"[^-][A-Za-z0-9\\\\+-]+(\\\\.[A-Za-z0-9\\\\+-]+)*(\\\\.[A-Za-z]{2,})$\";\n        assertTrue(EmailValidation.patternMatches(emailAddress, regexPattern));\n    }\n}\n"}
{"code_source": "package com.baeldung.firstnonrepeatingcharacter;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class FirstNonRepeatingCharacter {\n    public Character firstNonRepeatingCharBruteForce(String inputString) {\n        if (null == inputString || inputString.isEmpty()) {\n            return null;\n        }\n        for (Character c : inputString.toCharArray()) {\n            int indexOfC = inputString.indexOf(c);\n            if (indexOfC == inputString.lastIndexOf(c)) {\n                return c;\n            }\n        }\n        return null;\n    }\n\n    public Character firstNonRepeatingCharBruteForceNaive(String inputString) {\n        if (null == inputString || inputString.isEmpty()) {\n            return null;\n        }\n        for (int outer = 0; outer < inputString.length(); outer++) {\n            boolean repeat = false;\n            for (int inner = 0; inner < inputString.length(); inner++) {\n                if (inner != outer && inputString.charAt(outer) == inputString.charAt(inner)) {\n                    repeat = true;\n                    break;\n                }\n            }\n            if (!repeat) {\n                return inputString.charAt(outer);\n            }\n        }\n        return null;\n    }\n\n    public Character firstNonRepeatingCharWithMap(String inputString) {\n        if (null == inputString || inputString.isEmpty()) {\n            return null;\n        }\n        Map<Character, Integer> frequency = new HashMap<>();\n        for (int outer = 0; outer < inputString.length(); outer++) {\n            char character = inputString.charAt(outer);\n            frequency.put(character, frequency.getOrDefault(character, 0) + 1);\n        }\n        for (Character c : inputString.toCharArray()) {\n            if (frequency.get(c) == 1) {\n                return c;\n            }\n        }\n        return null;\n    }\n\n    public Character firstNonRepeatingCharWithArray(String inputString) {\n        if (null == inputString || inputString.isEmpty()) {\n            return null;\n        }\n        int[] frequency = new int[26];\n        for (int outer = 0; outer < inputString.length(); outer++) {\n            char character = inputString.charAt(outer);\n            frequency[character - 'a']++;\n        }\n        for (Character c : inputString.toCharArray()) {\n            if (frequency[c - 'a'] == 1) {\n                return c;\n            }\n        }\n        return null;\n    }\n}", "test_case": "package com.baeldung.firstnonrepeatingcharacter;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class FirstNonRepeatingCharacterUnitTest {\n\n    @Test\n    public void testNonRepeatingCharacterBruteForce() {\n        FirstNonRepeatingCharacter program = new FirstNonRepeatingCharacter();\n\n        Assert.assertEquals(program.firstNonRepeatingCharBruteForce(\"baeldung\"), Character.valueOf('b'));\n        Assert.assertEquals(program.firstNonRepeatingCharBruteForce(\"lullaby\"), Character.valueOf('u'));\n        Assert.assertEquals(program.firstNonRepeatingCharBruteForce(\"hello\"), Character.valueOf('h'));\n        Assert.assertNull(program.firstNonRepeatingCharBruteForce(\"mahimahi\"));\n        Assert.assertNull(program.firstNonRepeatingCharBruteForce(\"\"));\n        Assert.assertNull(program.firstNonRepeatingCharBruteForce(null));\n    }\n\n    @Test\n    public void testNonRepeatingCharacterBruteForceNaive() {\n        FirstNonRepeatingCharacter program = new FirstNonRepeatingCharacter();\n        Assert.assertEquals(program.firstNonRepeatingCharBruteForceNaive(\"baeldung\"), Character.valueOf('b'));\n        Assert.assertEquals(program.firstNonRepeatingCharBruteForceNaive(\"lullaby\"), Character.valueOf('u'));\n        Assert.assertEquals(program.firstNonRepeatingCharBruteForceNaive(\"hello\"), Character.valueOf('h'));\n        Assert.assertNull(program.firstNonRepeatingCharBruteForceNaive(\"mahimahi\"));\n        Assert.assertNull(program.firstNonRepeatingCharBruteForceNaive(\"\"));\n        Assert.assertNull(program.firstNonRepeatingCharBruteForceNaive(null));\n    }\n\n    @Test\n    public void testNonRepeatingCharacterWithMap() {\n        FirstNonRepeatingCharacter program = new FirstNonRepeatingCharacter();\n        Assert.assertEquals(program.firstNonRepeatingCharWithMap(\"baeldung\"), Character.valueOf('b'));\n        Assert.assertEquals(program.firstNonRepeatingCharWithMap(\"lullaby\"), Character.valueOf('u'));\n        Assert.assertEquals(program.firstNonRepeatingCharWithMap(\"hello\"), Character.valueOf('h'));\n        Assert.assertNull(program.firstNonRepeatingCharWithMap(\"mahimahi\"));\n        Assert.assertNull(program.firstNonRepeatingCharWithMap(\"\"));\n        Assert.assertNull(program.firstNonRepeatingCharWithMap(null));\n    }\n\n    @Test\n    public void testNonRepeatingCharacterWithArray() {\n        FirstNonRepeatingCharacter program = new FirstNonRepeatingCharacter();\n        Assert.assertEquals(program.firstNonRepeatingCharWithArray(\"baeldung\"), Character.valueOf('b'));\n        Assert.assertEquals(program.firstNonRepeatingCharWithArray(\"lullaby\"), Character.valueOf('u'));\n        Assert.assertEquals(program.firstNonRepeatingCharWithArray(\"hello\"), Character.valueOf('h'));\n        Assert.assertNull(program.firstNonRepeatingCharWithArray(\"mahimahi\"));\n        Assert.assertNull(program.firstNonRepeatingCharWithArray(\"\"));\n        Assert.assertNull(program.firstNonRepeatingCharWithArray(null));\n    }\n}"}
{"code_source": "package com.baeldung.firstocurrenceofaninteger;\n\npublic class FirstOccurrenceOfAnInteger {\n\n    static Integer findFirstInteger(String s) {\n        int i = 0;\n        while (i < s.length() && !Character.isDigit(s.charAt(i))) {\n            i++;\n        }\n        int j = i;\n        while (j < s.length() && Character.isDigit(s.charAt(j))) {\n            j++;\n        }\n        return Integer.parseInt(s.substring(i, j));\n    }\n\n}\n\n", "test_case": "package com.baeldung.firstocurrenceofaninteger;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\nclass FirstOccurrenceOfAnIntegerUnitTest {\n\n    @Test\n    void whenUsingPatternMatcher_findFirstInteger() {\n        String s = \"ba31dung123\";\n        Matcher matcher = Pattern.compile(\"\\\\d+\").matcher(s);\n        matcher.find();\n        int i = Integer.parseInt(matcher.group());\n        Assertions.assertEquals(31, i);\n    }\n\n    @Test\n    void whenUsingScanner_findFirstInteger() {\n        int i = new Scanner(\"ba31dung123\").useDelimiter(\"\\\\D+\").nextInt();\n        Assertions.assertEquals(31, i);\n    }\n\n    @Test\n    void whenUsingSplit_findFirstInteger() {\n        String str = \"ba31dung123\";\n        List<String> tokens = Arrays.stream(str.split(\"\\\\D+\"))\n                .filter(s -> s.length() > 0).collect(Collectors.toList());\n        Assertions.assertEquals(31, Integer.parseInt(tokens.get(0)));\n    }\n\n    @Test\n    void whenUsingCustomMethod_findFirstInteger() {\n        String str = \"ba31dung123\";\n        Integer i = FirstOccurrenceOfAnInteger.findFirstInteger(str);\n        Assertions.assertEquals(31, i);\n    }\n\n\n}\n"}
{"code_source": "package com.baeldung.streamtokenizer;\n\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class StreamTokenizerDemo {\n\n    private static final String INPUT_FILE = \"/stream-tokenizer-example.txt\";\n    private static final int QUOTE_CHARACTER = '\\'';\n    private static final int DOUBLE_QUOTE_CHARACTER = '\"';\n\n    public static List<Object> streamTokenizerWithDefaultConfiguration(Reader reader) throws IOException {\n        StreamTokenizer streamTokenizer = new StreamTokenizer(reader);\n        List<Object> tokens = new ArrayList<>();\n\n        int currentToken = streamTokenizer.nextToken();\n        while (currentToken != StreamTokenizer.TT_EOF) {\n\n            if (streamTokenizer.ttype == StreamTokenizer.TT_NUMBER) {\n                tokens.add(streamTokenizer.nval);\n            } else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD\n                    || streamTokenizer.ttype == QUOTE_CHARACTER\n                    || streamTokenizer.ttype == DOUBLE_QUOTE_CHARACTER) {\n                tokens.add(streamTokenizer.sval);\n            } else {\n                tokens.add((char) currentToken);\n            }\n\n            currentToken = streamTokenizer.nextToken();\n        }\n\n        return tokens;\n    }\n\n    public static List<Object> streamTokenizerWithCustomConfiguration(Reader reader) throws IOException {\n        StreamTokenizer streamTokenizer = new StreamTokenizer(reader);\n        List<Object> tokens = new ArrayList<>();\n\n        streamTokenizer.wordChars('!', '-');\n        streamTokenizer.ordinaryChar('/');\n        streamTokenizer.commentChar('#');\n        streamTokenizer.eolIsSignificant(true);\n\n        int currentToken = streamTokenizer.nextToken();\n        while (currentToken != StreamTokenizer.TT_EOF) {\n\n            if (streamTokenizer.ttype == StreamTokenizer.TT_NUMBER) {\n                tokens.add(streamTokenizer.nval);\n            } else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD\n                    || streamTokenizer.ttype == QUOTE_CHARACTER\n                    || streamTokenizer.ttype == DOUBLE_QUOTE_CHARACTER) {\n                tokens.add(streamTokenizer.sval);\n            } else {\n                tokens.add((char) currentToken);\n            }\n            currentToken = streamTokenizer.nextToken();\n        }\n\n        return tokens;\n    }\n\n    public static Reader createReaderFromFile() throws FileNotFoundException {\n        String inputFile = StreamTokenizerDemo.class.getResource(INPUT_FILE).getFile();\n        return new FileReader(inputFile);\n    }\n\n    public static void main(String[] args) throws IOException {\n        List<Object> tokens1 = streamTokenizerWithDefaultConfiguration(createReaderFromFile());\n        List<Object> tokens2 = streamTokenizerWithCustomConfiguration(createReaderFromFile());\n\n        System.out.println(tokens1);\n        System.out.println(tokens2);\n    }\n\n}", "test_case": "package com.baeldung.streamtokenizer;\n\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.Assert.assertArrayEquals;\n\npublic class StreamTokenizerDemoUnitTest {\n\n    @Test\n    public void whenStreamTokenizerWithDefaultConfigurationIsCalled_ThenCorrectTokensAreReturned() throws IOException {\n        Reader reader = StreamTokenizerDemo.createReaderFromFile();\n        List<Object> expectedTokens = Arrays.asList(3.0, \"quick\", \"brown\", \"foxes\", \"jump\", \"over\", \"the\", \"lazy\", \"dog\", '!', '#', \"test1\");\n\n        List<Object> actualTokens = StreamTokenizerDemo.streamTokenizerWithDefaultConfiguration(reader);\n\n        assertArrayEquals(expectedTokens.toArray(), actualTokens.toArray());\n    }\n\n    @Test\n    public void whenStreamTokenizerWithCustomConfigurationIsCalled_ThenCorrectTokensAreReturned() throws IOException {\n        Reader reader = StreamTokenizerDemo.createReaderFromFile();\n        List<Object> expectedTokens = Arrays.asList(3.0, \"quick\", \"brown\", \"foxes\", \"jump\", \"over\", \"the\", \"\\\"lazy\\\"\", \"dog!\", '\\n', '\\n', '/', '/', \"test2\");\n\n        List<Object> actualTokens = StreamTokenizerDemo.streamTokenizerWithCustomConfiguration(reader);\n\n        assertArrayEquals(expectedTokens.toArray(), actualTokens.toArray());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.titlecase;\n\nimport com.ibm.icu.lang.UCharacter;\nimport com.ibm.icu.text.BreakIterator;\nimport org.apache.commons.lang3.text.WordUtils;\n\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\n\npublic class TitleCaseConverter {\n\n    private static final String WORD_SEPARATOR = \" \";\n\n    public static String convertToTitleCaseIteratingChars(String text) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n\n        StringBuilder converted = new StringBuilder();\n\n        boolean convertNext = true;\n        for (char ch : text.toCharArray()) {\n            if (Character.isSpaceChar(ch)) {\n                convertNext = true;\n            } else if (convertNext) {\n                ch = Character.toTitleCase(ch);\n                convertNext = false;\n            } else {\n                ch = Character.toLowerCase(ch);\n            }\n            converted.append(ch);\n        }\n\n        return converted.toString();\n    }\n\n    public static String convertToTitleCaseSplitting(String text) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n\n        return Arrays\n          .stream(text.split(WORD_SEPARATOR))\n          .map(word -> word.isEmpty()\n            ? word\n            : Character.toTitleCase(word.charAt(0)) + word\n              .substring(1)\n              .toLowerCase())\n          .collect(Collectors.joining(WORD_SEPARATOR));\n    }\n\n    public static String convertToTitleCaseIcu4j(String text) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n\n        return UCharacter.toTitleCase(text, BreakIterator.getTitleInstance());\n    }\n\n    public static String convertToTileCaseWordUtilsFull(String text) {\n        return WordUtils.capitalizeFully(text);\n    }\n\n    public static String convertToTileCaseWordUtils(String text) {\n        return WordUtils.capitalize(text);\n    }\n\n}\n", "test_case": "package com.baeldung.titlecase;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class TitleCaseConverterUnitTest {\n\n    private static final String TEXT = \"tHis IS a tiTLe\";\n    private static final String TEXT_EXPECTED = \"This Is A Title\";\n    private static final String TEXT_EXPECTED_NOT_FULL = \"THis IS A TiTLe\";\n\n    private static final String TEXT_OTHER_DELIMITERS = \"tHis, IS a   tiTLe\";\n    private static final String TEXT_EXPECTED_OTHER_DELIMITERS = \"This, Is A   Title\";\n    private static final String TEXT_EXPECTED_OTHER_DELIMITERS_NOT_FULL = \"THis, IS A   TiTLe\";\n\n    @Test\n    public void whenConvertingToTitleCaseIterating_thenStringConverted() {\n        assertEquals(TEXT_EXPECTED, TitleCaseConverter.convertToTitleCaseIteratingChars(TEXT));\n    }\n\n    @Test\n    public void whenConvertingToTitleCaseSplitting_thenStringConverted() {\n        assertEquals(TEXT_EXPECTED, TitleCaseConverter.convertToTitleCaseSplitting(TEXT));\n    }\n\n    @Test\n    public void whenConvertingToTitleCaseUsingWordUtilsFull_thenStringConverted() {\n        assertEquals(TEXT_EXPECTED, TitleCaseConverter.convertToTileCaseWordUtilsFull(TEXT));\n    }\n\n    @Test\n    public void whenConvertingToTitleCaseUsingWordUtils_thenStringConvertedOnlyFirstCharacter() {\n        assertEquals(TEXT_EXPECTED_NOT_FULL, TitleCaseConverter.convertToTileCaseWordUtils(TEXT));\n    }\n\n    @Test\n    public void whenConvertingToTitleCaseUsingIcu4j_thenStringConverted() {\n        assertEquals(TEXT_EXPECTED, TitleCaseConverter.convertToTitleCaseIcu4j(TEXT));\n    }\n\n    @Test\n    public void whenConvertingToTitleCaseWithDifferentDelimiters_thenDelimitersKept() {\n        assertEquals(TEXT_EXPECTED_OTHER_DELIMITERS, TitleCaseConverter.convertToTitleCaseIteratingChars(TEXT_OTHER_DELIMITERS));\n        assertEquals(TEXT_EXPECTED_OTHER_DELIMITERS, TitleCaseConverter.convertToTitleCaseSplitting(TEXT_OTHER_DELIMITERS));\n        assertEquals(TEXT_EXPECTED_OTHER_DELIMITERS, TitleCaseConverter.convertToTileCaseWordUtilsFull(TEXT_OTHER_DELIMITERS));\n        assertEquals(TEXT_EXPECTED_OTHER_DELIMITERS_NOT_FULL, TitleCaseConverter.convertToTileCaseWordUtils(TEXT_OTHER_DELIMITERS));\n        assertEquals(TEXT_EXPECTED_OTHER_DELIMITERS, TitleCaseConverter.convertToTitleCaseIcu4j(TEXT_OTHER_DELIMITERS));\n    }\n\n    @Test\n    public void givenNull_whenConvertingToTileCase_thenReturnNull() {\n        assertEquals(null, TitleCaseConverter.convertToTitleCaseIteratingChars(null));\n        assertEquals(null, TitleCaseConverter.convertToTitleCaseSplitting(null));\n        assertEquals(null, TitleCaseConverter.convertToTileCaseWordUtilsFull(null));\n        assertEquals(null, TitleCaseConverter.convertToTileCaseWordUtils(null));\n        assertEquals(null, TitleCaseConverter.convertToTitleCaseIcu4j(null));\n    }\n\n    @Test\n    public void givenEmptyString_whenConvertingToTileCase_thenReturnEmptyString() {\n        assertEquals(\"\", TitleCaseConverter.convertToTitleCaseIteratingChars(\"\"));\n        assertEquals(\"\", TitleCaseConverter.convertToTitleCaseSplitting(\"\"));\n        assertEquals(\"\", TitleCaseConverter.convertToTileCaseWordUtilsFull(\"\"));\n        assertEquals(\"\", TitleCaseConverter.convertToTileCaseWordUtils(\"\"));\n        assertEquals(\"\", TitleCaseConverter.convertToTitleCaseIcu4j(\"\"));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.stringtocamelcase;\n\nimport com.google.common.base.CaseFormat;\nimport com.ibm.icu.lang.UCharacter;\nimport com.ibm.icu.text.BreakIterator;\nimport org.apache.commons.text.CaseUtils;\nimport org.apache.commons.text.WordUtils;\n\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\n\npublic class StringToCamelCase {\n\n    public static String toCamelCaseByIteration(String text, char delimiter) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n        boolean shouldConvertNextCharToLower = true;\n        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char currentChar = text.charAt(i);\n            if (currentChar == delimiter) {\n                shouldConvertNextCharToLower = false;\n            } else if (shouldConvertNextCharToLower) {\n                builder.append(Character.toLowerCase(currentChar));\n            } else {\n                builder.append(Character.toUpperCase(currentChar));\n                shouldConvertNextCharToLower = true;\n            }\n        }\n        return builder.toString();\n    }\n\n    public static String toCamelCaseBySplitting(String text, String delimiter) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n        String[] words = text.split(delimiter);\n        StringBuilder builder = new StringBuilder();\n        for (int i = 0, wordsLength = words.length; i < wordsLength; i++) {\n            String word = words[i];\n            if (i == 0) {\n                //Make the first word all lowercase\n                word = word.isEmpty() ? word : word.toLowerCase();\n            } else {\n                //Convert the first character to Uppercase and others to lowercase\n                // e.g sTRING =====> String\n                word = word.isEmpty() ? word : Character.toUpperCase(word.charAt(0)) + word.substring(1).toLowerCase();\n            }\n            builder.append(word);\n        }\n        return builder.toString();\n    }\n\n    public static String toCamelCaseBySplittingUsingStreams(String text, String delimiter) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n        String[] words = text.split(delimiter);\n        //Convert the first word to lowercase and then every\n        //other word to Title Case.\n        String firstWord = words[0].toLowerCase();\n        String otherWords = Arrays.stream(words, 1, words.length)\n          .filter(word -> !word.isEmpty())\n          .map(word -> Character.toUpperCase(word.charAt(0)) + word.substring(1).toLowerCase())\n          .collect(Collectors.joining(\"\"));\n\n        return firstWord + otherWords;\n    }\n\n    public static String toCamelCaseByRegex(String text) {\n        StringBuilder builder = new StringBuilder();\n        String[] words = text.split(\"[\\\\W_]+\");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            if (i == 0) {\n                word = word.isEmpty() ? word : word.toLowerCase();\n            } else {\n                word = word.isEmpty() ? word : Character.toUpperCase(word.charAt(0)) + word.substring(1).toLowerCase();\n            }\n            builder.append(word);\n        }\n        return builder.toString();\n    }\n\n    //Third-Party Libraries\n    public static String toCamelCaseUsingICU4J(String text, String delimiter) {\n        if (text == null || text.isEmpty()) {\n            return text;\n        }\n        text = UCharacter.toTitleCase(text, BreakIterator.getTitleInstance()).replaceAll(delimiter, \"\");\n        StringBuilder builder = new StringBuilder(text);\n        builder.setCharAt(0, Character.toLowerCase(text.charAt(0)));\n        return builder.toString();\n    }\n\n    public static String toCamelCaseUsingGuava(String text, String delimiter) {\n        String toUpperUnderscore = text.toUpperCase().replaceAll(delimiter, \"_\");\n        return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, toUpperUnderscore);\n    }\n\n    public static String toCamelCaseUsingApacheCommons(String text, char delimiter) {\n        text = WordUtils.capitalizeFully(text, delimiter).replaceAll(String.valueOf(delimiter), \"\");\n        StringBuilder builder = new StringBuilder(text);\n        builder.setCharAt(0, Character.toLowerCase(text.charAt(0)));\n        return builder.toString();\n    }\n\n}\n", "test_case": "package com.baeldung.stringtocamelcase;\n\n\nimport com.google.common.base.CaseFormat;\nimport org.apache.commons.text.CaseUtils;\nimport org.junit.Test;\n\nimport static com.baeldung.stringtocamelcase.StringToCamelCase.*;\nimport static org.assertj.core.api.Assertions.*;\n\n\npublic class StringToCamelCaseUnitTest {\n\n    @Test\n    public void givenStringWithWhiteSpaces_WhenToCamelCaseByIteration_ThenReturnCamelCase() {\n        assertThat(toCamelCaseByIteration(\"THIS STRING SHOULD BE IN CAMEL CASE\", ' ')).isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenStringWithUnderscores_WhenToCamelCaseByIteration_ThenReturnCamelCase() {\n        assertThat(toCamelCaseByIteration(\"THIS_STRING_SHOULD_BE_IN_CAMEL_CASE\", '_')).isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenStringWithWhiteSpaces_WhenToCamelCaseBySplitting_ThenReturnCamelCase() {\n        assertThat(toCamelCaseBySplitting(\"THIS STRING SHOULD BE IN CAMEL CASE\", \" \")).isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenStringWithUnderscores_WhenToCamelCaseBySplitting_ThenReturnCamelCase() {\n        assertThat(toCamelCaseBySplitting(\"THIS_STRING_SHOULD_BE_IN_CAMEL_CASE\", \"_\")).isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenStringWithWhiteSpaces_WhenToCamelCaseBySplittingUsingStreams_ThenReturnCamelCase() {\n        assertThat(toCamelCaseBySplittingUsingStreams(\"THIS STRING SHOULD BE IN CAMEL CASE\", \" \")).isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenStringWithUnderscores_WhenToCamelCaseBySplittingUsingStreams_ThenReturnCamelCase() {\n        assertThat(toCamelCaseBySplittingUsingStreams(\"THIS_STRING_SHOULD_BE_IN_CAMEL_CASE\", \"_\")).isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenStringWithWhiteSpaces_WhenToCamelCaseUsingApacheCommonsText_ThenReturnCamelCase() {\n        assertThat(CaseUtils.toCamelCase(\"THIS STRING SHOULD BE IN CAMEL CASE\", false, ' '))\n          .isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenStringWithUnderscores_WhenToCamelCaseUsingApacheCommonsText_ThenReturnCamelCase() {\n        assertThat(CaseUtils.toCamelCase(\"THIS_STRING_SHOULD_BE_IN_CAMEL_CASE\", false, '_'))\n          .isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenStringWithWhiteSpaces_WhenToCamelCaseUsingICU4J_ThenReturnCamelCase() {\n        assertThat(toCamelCaseUsingICU4J(\"THIS STRING SHOULD BE IN CAMEL CASE\", \" \")).isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenStringWithUnderscores_WhenToCamelCaseUsingICU4J_ThenReturnCamelCase() {\n        assertThat(toCamelCaseUsingICU4J(\"THIS_STRING_SHOULD_BE_IN_CAMEL_CASE\", \"_\")).isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenStringWithWhiteSpaces_WhenToCamelCaseUsingGuava_ThenReturnCamelCase() {\n        assertThat(toCamelCaseUsingGuava(\"THIS STRING SHOULD BE IN CAMEL CASE\", \" \")).isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenStringWithUnderscores_WhenToCamelCaseUsingGuava_ThenReturnCamelCase() {\n        assertThat(toCamelCaseUsingGuava(\"THIS_STRING_SHOULD_BE_IN_CAMEL_CASE\", \"_\")).isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenStringWithWhiteSpaces_WhenToCamelCaseUsingApacheCommons_ThenReturnCamelCase() {\n        assertThat(toCamelCaseUsingApacheCommons(\"THIS STRING SHOULD BE IN CAMEL CASE\", ' ')).isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenStringWithUnderscores_WhenToCamelCaseUsingApacheCommons_ThenReturnCamelCase() {\n        assertThat(toCamelCaseUsingApacheCommons(\"THIS_STRING_SHOULD_BE_IN_CAMEL_CASE\", '_')).isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenStringWithWhiteSpaces_WhenToCamelCaseByRegex_ThenReturnCamelCase() {\n        assertThat(toCamelCaseByRegex(\"THIS STRING SHOULD BE IN CAMEL CASE\")).isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenStringWithWhiteUnderscores_WhenToCamelCaseByRegex_ThenReturnCamelCase() {\n        assertThat(toCamelCaseByRegex(\"THIS_STRING_SHOULD_BE_IN_CAMEL_CASE\")).isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenRandomString_WhenToCamelCaseByRegex_ThenReturnCamelCase() {\n        assertThat(toCamelCaseByRegex(\"Please Turn this56738 to camel Case\")).isEqualTo(\"pleaseTurnThis56738ToCamelCase\");\n    }\n\n    @Test\n    public void givenRandomStringWithDifferentDelimiters_WhenToCamelCaseByRegex_ThenReturnCamelCase() {\n        assertThat(toCamelCaseByRegex(\"Please Turn this56738 to camel Case This should-be_in;camel-case\")).isEqualTo(\"pleaseTurnThis56738ToCamelCaseThisShouldBeInCamelCase\");\n    }\n\n    @Test\n    public void givenUppercaseWordWithUnderscores_WhenCaseFormatToLowerCamel_ThenReturnCamelCase() {\n        assertThat(CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, \"THIS_STRING_SHOULD_BE_IN_CAMEL_CASE\")).isEqualTo(\"thisStringShouldBeInCamelCase\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.streamoperations;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class JoinerSplitter {\n\n\tpublic static String join ( String[] arrayOfString ) {\n\t\treturn Arrays.asList(arrayOfString)\n\t\t\t\t.stream()\n\t\t\t\t.map(x -> x)\n\t\t\t\t.collect(Collectors.joining(\",\"));\n\t}\n\t\n\tpublic static String joinWithPrefixPostFix ( String[] arrayOfString ) {\n\t\treturn Arrays.asList(arrayOfString)\n\t\t\t\t.stream()\n\t\t\t\t.map(x -> x)\n\t\t\t\t.collect(Collectors.joining(\",\",\"[\",\"]\"));\n\t}\n\t\n\tpublic static List<String> split ( String str ) {\n\t\treturn Stream.of(str.split(\",\"))\n\t\t\t\t.map (elem -> new String(elem))\n\t\t\t\t.collect(Collectors.toList());\n\t}\n\t\n\tpublic static List<Character> splitToListOfChar ( String str ) {\n\t\treturn str.chars()\n\t\t\t\t.mapToObj(item -> (char) item)\n\t\t\t\t.collect(Collectors.toList());\n\t}\n\t\n\tpublic static Map<String, String> arrayToMap(String[] arrayOfString) {\n\t\treturn Arrays.asList(arrayOfString)\n\t\t\t\t.stream()\n\t\t\t\t.map(str -> str.split(\":\"))\n\t\t\t\t.collect(Collectors.<String[], String, String>toMap(str -> str[0], str -> str[1]));\n\t}\n\t\t\n}\n", "test_case": "package com.baeldung.streamoperations;\n\nimport org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class JoinerSplitterUnitTest {\n\n    @Test\n    public void provided_array_convert_to_stream_and_convert_to_string() {\n\n        String[] programming_languages = {\"java\", \"python\", \"nodejs\", \"ruby\"};\n\n        String expectation = \"java,python,nodejs,ruby\";\n\n        String result = JoinerSplitter.join(programming_languages);\n        assertEquals(result, expectation);\n    }\n\n    @Test\n    public void givenArray_transformedToStream_convertToPrefixPostfixString() {\n\n        String[] programming_languages = {\"java\", \"python\",\n          \"nodejs\", \"ruby\"};\n        String expectation = \"[java,python,nodejs,ruby]\";\n\n        String result = JoinerSplitter.joinWithPrefixPostFix(programming_languages);\n        assertEquals(result, expectation);\n    }\n\n    @Test\n    public void givenString_transformedToStream_convertToList() {\n\n        String programming_languages = \"java,python,nodejs,ruby\";\n\n        List<String> expectation = new ArrayList<String>();\n        expectation.add(\"java\");\n        expectation.add(\"python\");\n        expectation.add(\"nodejs\");\n        expectation.add(\"ruby\");\n\n        List<String> result = JoinerSplitter.split(programming_languages);\n\n        assertEquals(result, expectation);\n    }\n\n    @Test\n    public void givenString_transformedToStream_convertToListOfChar() {\n\n        String programming_languages = \"java,python,nodejs,ruby\";\n\n        List<Character> expectation = new ArrayList<Character>();\n        char[] charArray = programming_languages.toCharArray();\n        for (char c : charArray) {\n            expectation.add(c);\n        }\n\n        List<Character> result = JoinerSplitter.splitToListOfChar(programming_languages);\n        assertEquals(result, expectation);\n\n    }\n    \n    @Test\n    public void givenStringArray_transformedToStream_convertToMap() {\n\n        String[] programming_languages = new String[] {\"language:java\",\"os:linux\",\"editor:emacs\"};\n        \n        Map<String,String> expectation=new HashMap<>();\n        expectation.put(\"language\", \"java\");\n        expectation.put(\"os\", \"linux\");\n        expectation.put(\"editor\", \"emacs\");\n        \n        Map<String, String> result = JoinerSplitter.arrayToMap(programming_languages);\n        assertEquals(result, expectation);\n        \n    }\n\n}\n"}
{"code_source": "package com.baeldung.tostring;\n\nimport java.util.Arrays;\n\npublic class CustomerArrayToString extends Customer {\n    private Order[] orders;\n\n    public Order[] getOrders() {\n        return orders;\n    }\n\n    public void setOrders(Order[] orders) {\n        this.orders = orders;\n    }\n\n    @Override\n    public String toString() {\n        return \"Customer [orders=\" + Arrays.toString(orders) + \", getFirstName()=\" + getFirstName() + \", getLastName()=\" + getLastName() + \"]\";\n    }\n}\n", "test_case": "package com.baeldung.tostring;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class CustomerArrayToStringUnitTest {\n    private static final String CUSTOMER_ARRAY_TO_STRING = \"Customer [orders=[Order [orderId=A1111, desc=Game, value=0]], getFirstName()=Rajesh, getLastName()=Bhojwani]\";\n\n    @Test\n    public void givenArray_whenToString_thenCustomerDetails() {\n        CustomerArrayToString customer = new CustomerArrayToString();\n        customer.setFirstName(\"Rajesh\");\n        customer.setLastName(\"Bhojwani\");\n        Order[] orders = new Order[1];\n        orders[0] = new Order();\n        orders[0].setOrderId(\"A1111\");\n        orders[0].setDesc(\"Game\");\n        orders[0].setStatus(\"In-Shiping\");\n        customer.setOrders(orders);\n\n        assertEquals(CUSTOMER_ARRAY_TO_STRING, customer.toString());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.tostring;\n\npublic class CustomerComplexObjectToString extends Customer {\n    private Order order;\n\n    public Order getOrder() {\n        return order;\n    }\n\n    public void setOrder(Order order) {\n        this.order = order;\n    }\n\n    @Override\n    public String toString() {\n        return \"Customer [order=\" + order + \", getFirstName()=\" + getFirstName() + \", getLastName()=\" + getLastName() + \"]\";\n    }\n}", "test_case": "package com.baeldung.tostring;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class CustomerComplexObjectToStringUnitTest {\n    private static final String CUSTOMER_COMPLEX_TO_STRING = \"Customer [order=Order [orderId=A1111, desc=Game, value=0], getFirstName()=Rajesh, getLastName()=Bhojwani]\";\n\n    @Test\n    public void givenComplex_whenToString_thenCustomerDetails() {\n        CustomerComplexObjectToString customer = new CustomerComplexObjectToString();\n        customer.setFirstName(\"Rajesh\");\n        customer.setLastName(\"Bhojwani\");\n        Order order = new Order();\n        order.setOrderId(\"A1111\");\n        order.setDesc(\"Game\");\n        order.setStatus(\"In-Shiping\");\n        customer.setOrder(order);\n\n        assertEquals(CUSTOMER_COMPLEX_TO_STRING, customer.toString());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.tostring;\n\npublic class CustomerPrimitiveToString extends Customer {\n    private long balance;\n\n    public long getBalance() {\n        return balance;\n    }\n\n    public void setBalance(long balance) {\n        this.balance = balance;\n    }\n\n    @Override\n    public String toString() {\n        return \"Customer [balance=\" + balance + \", getFirstName()=\" + getFirstName() + \", getLastName()=\" + getLastName() + \"]\";\n    }\n}\n", "test_case": "package com.baeldung.tostring;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class CustomerPrimitiveToStringUnitTest {\n\n    private static final String CUSTOMER_PRIMITIVE_TO_STRING = \"Customer [balance=110, getFirstName()=Rajesh, getLastName()=Bhojwani]\";\n\n    @Test\n    public void givenPrimitive_whenToString_thenCustomerDetails() {\n        CustomerPrimitiveToString customer = new CustomerPrimitiveToString();\n        customer.setFirstName(\"Rajesh\");\n        customer.setLastName(\"Bhojwani\");\n        customer.setBalance(110);\n\n        assertEquals(CUSTOMER_PRIMITIVE_TO_STRING, customer.toString());\n    }\n}\n"}
{"code_source": "package com.baeldung.tostring;\n\nimport java.util.List;\n\npublic class CustomerWrapperCollectionToString extends Customer {\n    private Integer score;\n    private List<String> orders;\n    private StringBuffer fullname;\n\n    public Integer getScore() {\n        return score;\n    }\n\n    public void setScore(Integer score) {\n        this.score = score;\n    }\n\n    public List<String> getOrders() {\n        return orders;\n    }\n\n    public void setOrders(List<String> orders) {\n        this.orders = orders;\n    }\n\n    public StringBuffer getFullname() {\n        return fullname;\n    }\n\n    public void setFullname(StringBuffer fullname) {\n        this.fullname = fullname;\n    }\n\n    @Override\n    public String toString() {\n        return \"Customer [score=\" + score + \", orders=\" + orders + \", fullname=\" + fullname + \", getFirstName()=\" + getFirstName() + \", getLastName()=\" + getLastName() + \"]\";\n    }\n}\n", "test_case": "package com.baeldung.tostring;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\npublic class CustomerWrapperCollectionToStringUnitTest {\n    private static final String CUSTOMER_WRAPPER_COLLECTION_TO_STRING = \"Customer [score=8, orders=[Book, Pen], fullname=Bhojwani, Rajesh, getFirstName()=Rajesh, getLastName()=Bhojwani]\";\n\n    @Test\n    public void givenWrapperCollectionStrBuffer_whenToString_thenCustomerDetails() {\n        CustomerWrapperCollectionToString customer = new CustomerWrapperCollectionToString();\n        customer.setFirstName(\"Rajesh\");\n        customer.setLastName(\"Bhojwani\");\n        customer.setScore(8);\n\n        List<String> orders = new ArrayList<String>();\n        orders.add(\"Book\");\n        orders.add(\"Pen\");\n        customer.setOrders(orders);\n\n        StringBuffer fullname = new StringBuffer();\n        fullname.append(customer.getLastName() + \", \" + customer.getFirstName());\n        customer.setFullname(fullname);\n\n        assertEquals(CUSTOMER_WRAPPER_COLLECTION_TO_STRING, customer.toString());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.contains;\n\nimport java.util.concurrent.TimeUnit;\nimport java.util.regex.Pattern;\n\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.BenchmarkMode;\nimport org.openjdk.jmh.annotations.Fork;\nimport org.openjdk.jmh.annotations.Mode;\nimport org.openjdk.jmh.annotations.OutputTimeUnit;\nimport org.openjdk.jmh.annotations.Scope;\nimport org.openjdk.jmh.annotations.Setup;\nimport org.openjdk.jmh.annotations.State;\n\n/**\n * Based on https://github.com/tedyoung/indexof-contains-benchmark\n */\n@Fork(5)\n@State(Scope.Benchmark)\n@BenchmarkMode(Mode.AverageTime)\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\npublic class CaseInsensitiveWorkarounds {\n\n    private String src;\n    private String dest;\n    private Pattern pattern;\n\n    public static void main(String[] args) throws Exception {\n        org.openjdk.jmh.Main.main(args);\n    }\n\n    @Setup\n    public void setup() {\n        src = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\";\n        dest = \"eiusmod\";\n        pattern = Pattern.compile(Pattern.quote(dest), Pattern.CASE_INSENSITIVE);\n    }\n\n    // toLowerCase() and contains()\n    @Benchmark\n    public boolean lowerCaseContains() {\n        return src.toLowerCase()\n            .contains(dest.toLowerCase());\n    }\n\n    // matches() with Regular Expressions\n    @Benchmark\n    public boolean matchesRegularExpression() {\n        return src.matches(\"(?i).*\" + dest + \".*\");\n    }\n\n    public boolean processRegionMatches(String localSrc, String localDest) {\n        for (int i = localSrc.length() - localDest.length(); i >= 0; i--)\n            if (localSrc.regionMatches(true, i, localDest, 0, localDest.length()))\n                return true;\n        return false;        \n    }\n    \n    // String regionMatches()\n    @Benchmark\n    public boolean regionMatches() {\n        return processRegionMatches(src, dest);\n    }\n\n    // Pattern CASE_INSENSITIVE with regexp\n    @Benchmark\n    public boolean patternCaseInsensitiveRegexp() {\n        return pattern.matcher(src)\n            .find();\n    }\n\n    // Apache Commons StringUtils containsIgnoreCase\n    @Benchmark\n    public boolean apacheCommonsStringUtils() {\n        return org.apache.commons.lang3.StringUtils.containsIgnoreCase(src, dest);\n    }\n\n}\n", "test_case": "package com.baeldung.contains;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.regex.Pattern;\n\n/**\n * BAEL-3739: Different ways to solve the contains() case insensitive behavior.\n */\npublic class CaseInsensitiveWorkaroundsUnitTest {\n\n    private String src = \"Lorem ipsum dolor sit amet\";\n    private String dest = \"lorem\";\n\n    @Test\n    public void givenString_whenCallingContainsWithToLowerOrUpperCase_shouldReturnTrue() {\n        // Use toLowerCase to avoid case insensitive issues\n        Assert.assertTrue(src.toLowerCase().contains(dest.toLowerCase()));\n\n        // Use toUpperCase to avoid case insensitive issues\n        Assert.assertTrue(src.toUpperCase().contains(dest.toUpperCase()));\n    }\n    \n    @Test\n    public void givenString_whenCallingStringMatches_thenReturnsTrue() {\n        // Use String Matches to avoid case insensitive issues\n        Assert.assertTrue(src.matches(\"(?i).*\" + dest + \".*\"));\n    }\n    \n    @Test\n    public void givenString_whenCallingStringRegionMatches_thenReturnsTrue() {\n        // Use String Region Matches to avoid case insensitive issues\n        CaseInsensitiveWorkarounds comparator = new CaseInsensitiveWorkarounds();\n        Assert.assertTrue(comparator.processRegionMatches(src, dest));\n    }\n    \n    \n    @Test\n    public void givenString_whenCallingPaternCompileMatcherFind_thenReturnsTrue() {\n        // Use Pattern Compile Matcher and Find to avoid case insensitive issues\n        Assert.assertTrue(Pattern.compile(Pattern.quote(dest), \n            Pattern.CASE_INSENSITIVE) .matcher(src) .find());\n    }\n    \n    @Test\n    public void givenString_whenCallingStringUtilsContainsIgnoreCase_thenReturnsTrue() {\n        // Use StringUtils containsIgnoreCase to avoid case insensitive issues\n        Assert.assertTrue(StringUtils.containsIgnoreCase(src, dest));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.encoding;\n\nimport java.io.BufferedReader;\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.UnsupportedEncodingException;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetDecoder;\nimport java.nio.charset.CodingErrorAction;\n\npublic class CharacterEncodingExamples {\n\n    static String readFile(String filePath, String encoding) throws IOException {\n        File file = new File(filePath);\n        StringBuffer buffer = new StringBuffer();\n        try (InputStreamReader isr = new InputStreamReader(new FileInputStream(file), encoding)) {\n            int data;\n            while ((data = isr.read()) != -1) {\n                buffer.append((char) data);\n            }\n        }\n        return buffer.toString();\n    }\n\n    static String convertToBinary(String input, String encoding) throws UnsupportedEncodingException {\n        byte[] bytes = input.getBytes(encoding);\n        StringBuffer buffer = new StringBuffer();\n        for (int b : bytes) {\n            buffer.append(Integer.toBinaryString((b + 256) % 256));\n            buffer.append(\" \");\n        }\n        return buffer.toString();\n    }\n\n    static String decodeText(String input, Charset charset, CodingErrorAction codingErrorAction) throws IOException {\n        CharsetDecoder charsetDecoder = charset.newDecoder();\n        charsetDecoder.onMalformedInput(codingErrorAction);\n        return new BufferedReader(\n          new InputStreamReader(\n            new ByteArrayInputStream(input.getBytes()), charsetDecoder)).readLine();\n    }\n}\n", "test_case": "package com.baeldung.encoding;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.nio.charset.Charset;\nimport java.nio.charset.CharsetDecoder;\nimport java.nio.charset.CodingErrorAction;\nimport java.nio.charset.MalformedInputException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.jupiter.api.Assertions;\n\npublic class CharacterEncodingExamplesUnitTest {\n\n    @Test\n    public void givenTextFile_whenCalledWithEncodingASCII_thenProduceIncorrectResult() throws IOException {\n        Assert.assertEquals(\n          CharacterEncodingExamples.readFile(\n            \"src/test/resources/encoding.txt\", \"US-ASCII\"), \n            \"The fa\ufffd\ufffdade pattern is a software-design pattern commonly used with object-oriented programming.\");\n    }\n\n    @Test\n    public void givenTextFile_whenCalledWithEncodingUTF8_thenProduceCorrectResult() throws IOException {\n        Assert.assertEquals(\n          CharacterEncodingExamples.readFile(\n            \"src/test/resources/encoding.txt\", \"UTF-8\"), \n            \"The fa\u00e7ade pattern is a software-design pattern commonly used with object-oriented programming.\");\n    }\n\n    @Test\n    public void givenCharacterA_whenConvertedtoBinaryWithEncodingASCII_thenProduceResult() throws IOException {\n        Assert.assertEquals(\n          CharacterEncodingExamples.convertToBinary(\"A\", \"US-ASCII\"), \n          \"1000001 \");\n    }\n\n    @Test\n    public void givenCharacterA_whenConvertedtoBinaryWithEncodingUTF8_thenProduceResult() throws IOException {\n        Assert.assertEquals(\n          CharacterEncodingExamples.convertToBinary(\"A\", \"UTF-8\"), \n          \"1000001 \");\n    }\n\n    @Test\n    public void givenCharacterCh_whenConvertedtoBinaryWithEncodingBig5_thenProduceResult() throws IOException {\n        Assert.assertEquals(\n          CharacterEncodingExamples.convertToBinary(\"\u8a9e\", \"Big5\"), \n          \"10111011 1111001 \");\n    }\n\n    @Test\n    public void givenCharacterCh_whenConvertedtoBinaryWithEncodingUTF8_thenProduceResult() throws IOException {\n        Assert.assertEquals(\n          CharacterEncodingExamples.convertToBinary(\"\u8a9e\", \"UTF-8\"), \n          \"11101000 10101010 10011110 \");\n    }\n\n    @Test\n    public void givenCharacterCh_whenConvertedtoBinaryWithEncodingUTF32_thenProduceResult() throws IOException {\n        Assert.assertEquals(\n          CharacterEncodingExamples.convertToBinary(\"\u8a9e\", \"UTF-32\"), \n          \"0 0 10001010 10011110 \");\n    }\n\n    @Test\n    public void givenUTF8String_whenDecodeByUS_ASCII_thenIgnoreMalformedInputSequence() throws IOException {\n        Assertions.assertEquals(\"The faade pattern is a software design pattern.\", CharacterEncodingExamples.decodeText(\"The fa\u00e7ade pattern is a software design pattern.\", StandardCharsets.US_ASCII, CodingErrorAction.IGNORE));\n    }\n\n    //@Test\n    // run this manually as it's dependent on platform encoding, which has to be UTF-8\n    public void givenUTF8String_whenDecodeByUS_ASCII_thenReplaceMalformedInputSequence() throws IOException {\n        Assertions.assertEquals(\n          \"The fa\ufffd\ufffdade pattern is a software design pattern.\",\n          CharacterEncodingExamples.decodeText(\n            \"The fa\u00e7ade pattern is a software design pattern.\",\n            StandardCharsets.US_ASCII,\n            CodingErrorAction.REPLACE));\n    }\n\n    @Test\n    public void givenUTF8String_whenDecodeByUS_ASCII_thenReportMalformedInputSequence() {\n        Assertions.assertThrows(\n          MalformedInputException.class,\n          () -> CharacterEncodingExamples.decodeText(\n            \"The fa\u00e7ade pattern is a software design pattern.\",\n            StandardCharsets.US_ASCII,\n            CodingErrorAction.REPORT));\n    }\n\n    @Test\n    public void givenTextFile_whenLoopOverAllCandidateEncodings_thenProduceSuitableCandidateEncodings() {\n        Path path = Paths.get(\"src/test/resources/encoding.txt\");\n        List<Charset> allCandidateCharSets = Arrays.asList(\n          StandardCharsets.US_ASCII, StandardCharsets.UTF_8, StandardCharsets.ISO_8859_1);\n\n        List<Charset> suitableCharsets = new ArrayList<>();\n        allCandidateCharSets.forEach(charset -> {\n            try {\n                CharsetDecoder charsetDecoder = charset.newDecoder().onMalformedInput(CodingErrorAction.REPORT);\n                Reader reader = new InputStreamReader(Files.newInputStream(path), charsetDecoder);\n                BufferedReader bufferedReader = new BufferedReader(reader);\n                bufferedReader.readLine();\n                suitableCharsets.add(charset);\n            } catch (MalformedInputException ignored) {\n            } catch (IOException ex) {\n                ex.printStackTrace();\n            }\n        });\n\n        Assertions.assertEquals(suitableCharsets, Arrays.asList(StandardCharsets.UTF_8, StandardCharsets.ISO_8859_1));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.trim;\n\nimport java.util.concurrent.TimeUnit;\nimport java.util.regex.Pattern;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.annotations.BenchmarkMode;\nimport org.openjdk.jmh.annotations.Fork;\nimport org.openjdk.jmh.annotations.Mode;\nimport org.openjdk.jmh.annotations.OutputTimeUnit;\nimport org.openjdk.jmh.annotations.Scope;\nimport org.openjdk.jmh.annotations.Setup;\nimport org.openjdk.jmh.annotations.State;\n\nimport com.google.common.base.CharMatcher;\n\n/**\n * Based on https://github.com/tedyoung/indexof-contains-benchmark\n */\n@Fork(5)\n@State(Scope.Benchmark)\n@BenchmarkMode(Mode.AverageTime)\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\npublic class LTrimRTrim {\n\n    private String src;\n    private static String ltrimResult;\n    private static String rtrimResult;\n    private static Pattern LTRIM = Pattern.compile(\"^\\\\s+\");\n    private static Pattern RTRIM = Pattern.compile(\"\\\\s+$\");\n\n    public static void main(String[] args) throws Exception {\n        org.openjdk.jmh.Main.main(args);\n    }\n\n    @Setup\n    public void setup() {\n        src = \"       White spaces left and right          \";\n        ltrimResult = \"White spaces left and right          \";\n        rtrimResult = \"       White spaces left and right\";\n    }\n\n    public static String whileLtrim(String s) {\n        int i = 0;\n        while (i < s.length() && Character.isWhitespace(s.charAt(i))) {\n            i++;\n        }\n        return s.substring(i);\n    }\n\n    public static String whileRtrim(String s) {\n        int i = s.length() - 1;\n        while (i >= 0 && Character.isWhitespace(s.charAt(i))) {\n            i--;\n        }\n        return s.substring(0, i + 1);\n    }\n\n    private static boolean checkStrings(String ltrim, String rtrim) {\n        boolean result = false;\n\n        if (ltrimResult.equalsIgnoreCase(ltrim) && rtrimResult.equalsIgnoreCase(rtrim))\n            result = true;\n\n        return result;\n    }\n\n    // Going through the String detecting Whitespaces\n    @Benchmark\n    public boolean whileCharacters() {\n        String ltrim = whileLtrim(src);\n        String rtrim = whileRtrim(src);\n\n        return checkStrings(ltrim, rtrim);\n    }\n\n    // replaceAll() and Regular Expressions\n    @Benchmark\n    public boolean replaceAllRegularExpression() {\n        String ltrim = src.replaceAll(\"^\\\\s+\", \"\");\n        String rtrim = src.replaceAll(\"\\\\s+$\", \"\");\n\n        return checkStrings(ltrim, rtrim);\n    }\n\n    public static String patternLtrim(String s) {\n        return LTRIM.matcher(s)\n            .replaceAll(\"\");\n    }\n\n    public static String patternRtrim(String s) {\n        return RTRIM.matcher(s)\n            .replaceAll(\"\");\n    }\n\n    // Pattern matches() with replaceAll\n    @Benchmark\n    public boolean patternMatchesLTtrimRTrim() {\n        String ltrim = patternLtrim(src);\n        String rtrim = patternRtrim(src);\n\n        return checkStrings(ltrim, rtrim);\n    }\n\n    // Guava CharMatcher trimLeadingFrom / trimTrailingFrom\n    @Benchmark\n    public boolean guavaCharMatcher() {\n        String ltrim = CharMatcher.whitespace().trimLeadingFrom(src);\n        String rtrim = CharMatcher.whitespace().trimTrailingFrom(src);\n\n        return checkStrings(ltrim, rtrim);\n    }\n\n    // Apache Commons StringUtils containsIgnoreCase\n    @Benchmark\n    public boolean apacheCommonsStringUtils() {\n        String ltrim = StringUtils.stripStart(src, null);\n        String rtrim = StringUtils.stripEnd(src, null);\n\n        return checkStrings(ltrim, rtrim);\n    }\n\n}\n", "test_case": "package com.baeldung.trim;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport com.google.common.base.CharMatcher;\n\nimport java.util.regex.Pattern;\n\n/**\n * BAEL-3755: LTrim and RTrim examples.\n */\npublic class LTrimRTrimUnitTest {\n\n    private String src = \"        White spaces left and right            \";\n    private final static String ltrimResult = \"White spaces left and right            \";\n    private final static String rtrimResult = \"        White spaces left and right\";\n\n    @Test\n    public void givenString_whenCallingWhileCharacters_thenReturnsTrue() {\n        String ltrim = LTrimRTrim.whileLtrim(src);\n        String rtrim = LTrimRTrim.whileRtrim(src);\n\n        // Compare the Strings obtained and the expected\n        Assert.assertTrue(ltrimResult.equalsIgnoreCase(ltrim));\n\n        Assert.assertTrue(rtrimResult.equalsIgnoreCase(rtrim));\n    }\n\n    @Test\n    public void givenString_whenCallingContainsWithReplaceAll_shouldReturnTrue() {\n        // Use replaceAll with Regular Expressions\n        String ltrim = src.replaceAll(\"^\\\\s+\", \"\");\n        String rtrim = src.replaceAll(\"\\\\s+$\", \"\");\n\n        // Compare the Strings obtained and the expected\n        Assert.assertTrue(ltrimResult.equalsIgnoreCase(ltrim));\n\n        Assert.assertTrue(rtrimResult.equalsIgnoreCase(rtrim));\n    }\n\n    @Test\n    public void givenString_whenCallingPaternCompileMatcherReplaceAll_thenReturnsTrue() {\n        // Use Pattern Compile Matcher and Find to avoid case insensitive issues\n        String ltrim = LTrimRTrim.patternLtrim(src);\n        String rtrim = LTrimRTrim.patternRtrim(src);\n\n        // Compare the Strings obtained and the expected\n        Assert.assertTrue(ltrimResult.equalsIgnoreCase(ltrim));\n\n        Assert.assertTrue(rtrimResult.equalsIgnoreCase(rtrim));\n    }\n\n    @Test\n    public void givenString_whenCallingGuavaCharMatcher_thenReturnsTrue() {\n        // Use StringUtils containsIgnoreCase to avoid case insensitive issues\n        String ltrim = CharMatcher.whitespace().trimLeadingFrom(src);;\n        String rtrim = CharMatcher.whitespace().trimTrailingFrom(src);\n\n        // Compare the Strings obtained and the expected\n        Assert.assertTrue(ltrimResult.equalsIgnoreCase(ltrim));\n\n        Assert.assertTrue(rtrimResult.equalsIgnoreCase(rtrim));\n    }\n\n    @Test\n    public void givenString_whenCallingStringUtilsStripStartEnd_thenReturnsTrue() {\n        // Use StringUtils containsIgnoreCase to avoid case insensitive issues\n        String ltrim = StringUtils.stripStart(src, null);\n        String rtrim = StringUtils.stripEnd(src, null);\n\n        // Compare the Strings obtained and the expected\n        Assert.assertTrue(ltrimResult.equalsIgnoreCase(ltrim));\n        Assert.assertTrue(rtrimResult.equalsIgnoreCase(rtrim));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.accentsanddiacriticsremoval;\n\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.text.Normalizer;\nimport java.util.StringJoiner;\n\nclass StringNormalizer {\n\n    static String removeAccentsWithApacheCommons(String input) {\n        return StringUtils.stripAccents(input);\n    }\n\n    static String removeAccents(String input) {\n        return normalize(input).replaceAll(\"\\\\p{M}\", \"\");\n    }\n\n    static String unicodeValueOfNormalizedString(String input) {\n        return toUnicode(normalize(input));\n    }\n\n    private static String normalize(String input) {\n        return input == null ? null : Normalizer.normalize(input, Normalizer.Form.NFKD);\n    }\n\n    private static String toUnicode(String input) {\n        if (input.length() == 1) {\n            return toUnicode(input.charAt(0));\n        } else {\n            StringJoiner stringJoiner = new StringJoiner(\" \");\n            for (char c : input.toCharArray()) {\n                stringJoiner.add(toUnicode(c));\n            }\n            return stringJoiner.toString();\n        }\n    }\n\n    private static String toUnicode(char input) {\n\n        String hex = Integer.toHexString(input);\n        StringBuilder sb = new StringBuilder(hex);\n\n        while (sb.length() < 4) {\n            sb.insert(0, \"0\");\n        }\n        sb.insert(0, \"\\\\u\");\n        return sb.toString();\n    }\n}\n", "test_case": "package com.baeldung.accentsanddiacriticsremoval;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.text.Normalizer;\n\nimport org.junit.jupiter.api.Test;\n\nclass StringNormalizerUnitTest {\n\n    @Test\n    public void givenNotNormalizedString_whenIsNormalized_thenReturnFalse() {\n        assertFalse(Normalizer.isNormalized(\"\u0101\u0103\u0105\u0113\u00ee\u00ef\u0129\u00ed\u011d\u0121\u0144\u00f1\u0161\u015d\u015b\u00fb\u016f\u0177\", Normalizer.Form.NFKD));\n    }\n\n    @Test\n    void givenStringWithDecomposableUnicodeCharacters_whenRemoveAccents_thenReturnASCIIString() {\n        assertEquals(\"aaaeiiiiggnnsssuuy\", StringNormalizer.removeAccents(\"\u0101\u0103\u0105\u0113\u00ee\u00ef\u0129\u00ed\u011d\u0121\u0144\u00f1\u0161\u015d\u015b\u00fb\u016f\u0177\"));\n    }\n\n    @Test\n    void givenStringWithDecomposableUnicodeCharacters_whenRemoveAccentsWithApacheCommons_thenReturnASCIIString() {\n        assertEquals(\"aaaeiiiiggnnsssuuy\", StringNormalizer.removeAccentsWithApacheCommons(\"\u0101\u0103\u0105\u0113\u00ee\u00ef\u0129\u00ed\u011d\u0121\u0144\u00f1\u0161\u015d\u015b\u00fb\u016f\u0177\"));\n    }\n\n    @Test\n    void givenStringWithNondecomposableUnicodeCharacters_whenRemoveAccents_thenReturnOriginalString() {\n        assertEquals(\"\u0142\u0111\u0127\u0153\", StringNormalizer.removeAccents(\"\u0142\u0111\u0127\u0153\"));\n    }\n\n    @Test\n    void givenStringWithNondecomposableUnicodeCharacters_whenRemoveAccentsWithApacheCommons_thenReturnModifiedString() {\n        assertEquals(\"l\u0111\u0127\u0153\", StringNormalizer.removeAccentsWithApacheCommons(\"\u0142\u0111\u0127\u0153\"));\n    }\n\n    @Test\n    void givenStringWithDecomposableUnicodeCharacters_whenUnicodeValueOfNormalizedString_thenReturnUnicodeValue() {\n        assertEquals(\"\\\\u0066 \\\\u0069\", StringNormalizer.unicodeValueOfNormalizedString(\"\ufb01\"));\n        assertEquals(\"\\\\u0061 \\\\u0304\", StringNormalizer.unicodeValueOfNormalizedString(\"\u0101\"));\n        assertEquals(\"\\\\u0069 \\\\u0308\", StringNormalizer.unicodeValueOfNormalizedString(\"\u00ef\"));\n        assertEquals(\"\\\\u006e \\\\u0301\", StringNormalizer.unicodeValueOfNormalizedString(\"\u0144\"));\n    }\n\n    @Test\n    void givenStringWithNonDecomposableUnicodeCharacters_whenUnicodeValueOfNormalizedString_thenReturnOriginalValue() {\n        assertEquals(\"\\\\u0142\", StringNormalizer.unicodeValueOfNormalizedString(\"\u0142\"));\n        assertEquals(\"\\\\u0127\", StringNormalizer.unicodeValueOfNormalizedString(\"\u0127\"));\n        assertEquals(\"\\\\u0111\", StringNormalizer.unicodeValueOfNormalizedString(\"\u0111\"));\n    }\n}"}
{"code_source": "package com.baeldung.doublequotesremoval;\n\nimport com.google.common.base.CharMatcher;\n\npublic class DoubleQuotesRemovalUtils {\n    \n    public static String removeWithSubString(String input) {\n        if (input != null && input.length() >= 2 && input.charAt(0) == '\\\"' \n            && input.charAt(input.length() - 1) == '\\\"') {\n            return input.substring(1, input.length() - 1);\n        }\n\n        return input;\n    }\n\n    public static String removeWithReplaceAllSimple(String input) {\n        if (input == null || input.isEmpty())\n            return input;\n\n        return input.replaceAll(\"\\\"\", \"\");\n    }\n    \n    public static String removeWithReplaceAllAdvanced(String input) {\n        if (input == null || input.isEmpty())\n            return input;\n\n        return input.replaceAll(\"^\\\"|\\\"$\", \"\");\n    }\n    \n    public static String removeWithGuava(String input) {\n        if (input == null || input.isEmpty())\n            return input;\n        \n        return CharMatcher.is('\\\"').trimFrom(input);\n    }\n\n}\n", "test_case": "package com.baeldung.doublequotesremoval;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\npublic class DoubleQuotesRemovalUtilsUnitTest {\n    \n    @Test\n    public void given_EmptyString_ShouldReturn_EmptyString() {\n        String input = \"\";\n        \n        assertTrue(DoubleQuotesRemovalUtils.removeWithSubString(input).isEmpty());\n        assertTrue(DoubleQuotesRemovalUtils.removeWithReplaceAllSimple(input).isEmpty());\n        assertTrue(DoubleQuotesRemovalUtils.removeWithReplaceAllAdvanced(input).isEmpty());\n        assertTrue(DoubleQuotesRemovalUtils.removeWithGuava(input).isEmpty());\n    }\n    \n    @Test\n    public void given_DoubleQuotesOnly_ShouldReturn_EmptyString() {\n        String input = \"\\\"\\\"\";\n        \n        assertTrue(DoubleQuotesRemovalUtils.removeWithSubString(input).isEmpty());\n        assertTrue(DoubleQuotesRemovalUtils.removeWithReplaceAllSimple(input).isEmpty());\n        assertTrue(DoubleQuotesRemovalUtils.removeWithReplaceAllAdvanced(input).isEmpty());\n        assertTrue(DoubleQuotesRemovalUtils.removeWithGuava(input).isEmpty());\n    }\n    \n    @Test\n    public void given_TextWithDoubleQuotes_ShouldReturn_TextOnly() {\n        \n        String input = \"\\\"Example of text for this test suit\\\"\";\n        String expectedResult = \"Example of text for this test suit\";\n        \n        assertEquals(expectedResult, DoubleQuotesRemovalUtils.removeWithSubString(input));\n        assertEquals(expectedResult, DoubleQuotesRemovalUtils.removeWithReplaceAllSimple(input));\n        assertEquals(expectedResult, DoubleQuotesRemovalUtils.removeWithReplaceAllAdvanced(input));\n        assertEquals(expectedResult, DoubleQuotesRemovalUtils.removeWithGuava(input));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.firstword;\n\npublic class FirstWordGetter {\n\n    public static void main(String[] args) {\n        String input = \"Roberto \\\"I wish you a bug-free day\\\"\";\n        System.out.println(\"Using split: \" + getFirstWordUsingSplit(input));\n        System.out.println(\"Using subString: \" + getFirstWordUsingSubString(input));\n    }\n\n    public static String getFirstWordUsingSubString(String input) {\n        int index = input.contains(\" \") ? input.indexOf(\" \") : 0;\n        return input.substring(0, index);\n    }\n\n    public static String getFirstWordUsingSplit(String input) {\n        String[] tokens = input.split(\" \", 2);\n        return tokens[0];\n    }\n}\n", "test_case": "package com.baeldung.firstword;\n\nimport static com.baeldung.firstword.FirstWordGetter.getFirstWordUsingSplit;\nimport static com.baeldung.firstword.FirstWordGetter.getFirstWordUsingSubString;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class FirstWordGetterUnitTest {\n\n    @Test\n    public void givenString_whenSplit_thenFirstWordIsReturned() {\n        assertEquals(\"Roberto\", getFirstWordUsingSplit(\"Roberto \\\"I wish you a bug-free day\\\"\"));\n    }\n\n    @Test\n    public void givenStringWithNoSpace_whenSplit_thenFirstWordIsReturned() {\n        assertEquals(\"StringWithNoSpace\", getFirstWordUsingSplit(\"StringWithNoSpace\"));\n    }\n\n    @Test\n    public void givenString_whenPassedToSubstring_thenFirstWordIsReturned() {\n        assertEquals(\"Roberto\", getFirstWordUsingSubString(\"Roberto \\\"I wish you a bug-free day\\\"\"));\n    }\n\n    @Test\n    public void givenStringWithNoSpace_whenPassedToSubstring_thenFirstWordIsReturned() {\n        assertEquals(\"\", getFirstWordUsingSubString(\"StringWithNoSpace\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.checkvowels;\n\nimport java.util.regex.Pattern;\n\npublic class CheckVowels {\n    private static final String VOWELS = \"aeiouAEIOU\";\n    private static final Pattern VOWELS_PATTERN = Pattern.compile(\"[aeiou]\", Pattern.CASE_INSENSITIVE);\n\n    public static boolean isInVowelsString(char c) {\n        return VOWELS.indexOf(c) != -1;\n    }\n\n    public static boolean isInVowelsString(String c) {\n        return VOWELS.contains(c);\n    }\n\n    public static boolean isVowelBySwitch(char c) {\n        switch (c) {\n        case 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n        case 'u':\n        case 'A':\n        case 'E':\n        case 'I':\n        case 'O':\n        case 'U':\n            return true;\n        default:\n            return false;\n        }\n    }\n\n    public static boolean isVowelByRegex(String c) {\n        return VOWELS_PATTERN.matcher(c).matches();\n    }\n}\n", "test_case": "package com.baeldung.checkvowels;\n\nimport org.junit.jupiter.api.Test;\n\nimport static com.baeldung.checkvowels.CheckVowels.*;\nimport static org.assertj.core.api.Assertions.*;\n\nclass CheckVowelsUnitTest {\n\n    @Test\n    void givenAVowelCharacter_thenInVowelString() {\n        assertThat(isInVowelsString('e')).isTrue();\n    }\n\n    @Test\n    void givenAConsonantCharacter_thenNotInVowelString() {\n        assertThat(isInVowelsString('z')).isFalse();\n    }\n\n    @Test\n    void givenAVowelString_thenInVowelString() {\n        assertThat(isInVowelsString(\"e\")).isTrue();\n    }\n\n    @Test\n    void givenAConsonantString_thenNotInVowelString() {\n        assertThat(isInVowelsString(\"z\")).isFalse();\n    }\n\n    @Test\n    void givenAVowelCharacter_thenInVowelSwitch() {\n        assertThat(isVowelBySwitch('e')).isTrue();\n    }\n\n    @Test\n    void givenAConsonantCharacter_thenNotInVowelSwitch() {\n        assertThat(isVowelBySwitch('z')).isFalse();\n    }\n\n    @Test\n    void givenAVowelString_thenInVowelPattern() {\n        assertThat(isVowelByRegex(\"e\")).isTrue();\n        assertThat(isVowelByRegex(\"E\")).isTrue();\n    }\n\n    @Test\n    void givenAVowelCharacter_thenInVowelPattern() {\n        assertThat(isVowelByRegex(Character.toString('e'))).isTrue();\n        assertThat(isVowelByRegex(\"E\")).isTrue();\n    }\n}\n"}
{"code_source": "package com.baeldung.commaseparatedstring;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Pattern;\n\nimport com.google.common.base.Splitter;\nimport com.opencsv.CSVParser;\nimport com.opencsv.CSVParserBuilder;\nimport com.opencsv.CSVReader;\nimport com.opencsv.CSVReaderBuilder;\n\npublic class SplitCommaSeparatedString {\n\n    public static List<String> splitWithParser(String input) {\n\n        List<String> tokens = new ArrayList<String>();\n        int startPosition = 0;\n        boolean isInQuotes = false;\n        for (int currentPosition = 0; currentPosition < input.length(); currentPosition++) {\n            if (input.charAt(currentPosition) == '\\\"') {\n                isInQuotes = !isInQuotes;\n            } else if (input.charAt(currentPosition) == ',' && !isInQuotes) {\n                tokens.add(input.substring(startPosition, currentPosition));\n                startPosition = currentPosition + 1;\n            }\n        }\n\n        String lastToken = input.substring(startPosition);\n        if (lastToken.equals(\",\")) {\n            tokens.add(\"\");\n        } else {\n            tokens.add(lastToken);\n        }\n\n        return tokens;\n    }\n\n    public static List<String> splitWithRegex(String input) {\n        String[] tokens = input.split(\",(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\", -1);\n        return Arrays.asList(tokens);\n    }\n\n    public static List<String> splitWithGuava(String input) {\n        Pattern pattern = Pattern.compile(\",(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\");\n        Splitter splitter = Splitter.on(pattern);\n        return splitter.splitToList(input);\n    }\n\n    public static List<String[]> splitMultiLineWithOpenCSV(String input) throws IOException {\n        CSVParser parser = new CSVParserBuilder().withSeparator(',')\n            .build();\n\n        CSVReader reader = new CSVReaderBuilder(new StringReader(input)).withCSVParser(parser)\n            .build();\n\n        List<String[]> list = new ArrayList<>();\n        list = reader.readAll();\n        reader.close();\n\n        return list;\n    }\n}", "test_case": "package com.baeldung.commaseparatedstring;\n\nimport static com.baeldung.commaseparatedstring.SplitCommaSeparatedString.splitMultiLineWithOpenCSV;\nimport static com.baeldung.commaseparatedstring.SplitCommaSeparatedString.splitWithGuava;\nimport static com.baeldung.commaseparatedstring.SplitCommaSeparatedString.splitWithParser;\nimport static com.baeldung.commaseparatedstring.SplitCommaSeparatedString.splitWithRegex;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.contains;\nimport static org.hamcrest.Matchers.hasSize;\nimport static org.junit.Assert.assertArrayEquals;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.junit.Test;\n\npublic class SplitCommaSeparatedStringUnitTest {\n    \n    @Test\n    public void givenSingleLineInput_whenParsing_shouldIgnoreCommasInsideDoubleQuotes() {\n        String input = \"baeldung,tutorial,splitting,text,\\\"ignoring this comma,\\\"\";\n\n        var matcher = contains(\"baeldung\", \"tutorial\", \"splitting\", \"text\", \"\\\"ignoring this comma,\\\"\");\n        assertThat(splitWithParser(input), matcher);\n        assertThat(splitWithRegex(input), matcher);\n        assertThat(splitWithGuava(input), matcher);\n    }\n    \n    @Test\n    public void givenMultiLineInput_whenParsing_shouldIgnoreCommasInsideDoubleQuotes() throws IOException {\n        String input = \"baeldung,tutorial,splitting,text,\\\"ignoring this comma,\\\"\" + System.lineSeparator()\n        + \"splitting,a,regular,line,no double quotes\";\n\n        String[] firstLine = new String[]{\"baeldung\", \"tutorial\", \"splitting\", \"text\", \"ignoring this comma,\"};\n        String[] secondLine = new String[]{\"splitting\", \"a\", \"regular\", \"line\", \"no double quotes\"};\n        \n        List<String[]> result = splitMultiLineWithOpenCSV(input);\n        \n        assertThat(result, hasSize(2));\n        assertArrayEquals(firstLine, result.get(0));\n        assertArrayEquals(secondLine, result.get(1));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.concatenation;\n\nimport java.util.StringJoiner;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class ConcatenatingNull {\n\n    public static void main(String[] args) {\n        String[] values = { \"Java \", null, \"\", \"is \", \"great!\" };\n\n        concatenateUsingPlusOperator(values);\n        concatenateUsingHelperMethod(values);\n        concatenateUsingStringBuilder(values);\n        concatenateUsingJoin(values);\n        concatenateUsingStringJoiner(values);\n        concatenateUsingCollectorsJoining(values);\n        concatenateUsingStringConcat(values);\n    }\n\n    public static String concatenateUsingStringConcat(String[] values) {\n        String result = \"\";\n\n        for (String value : values) {\n            result = result.concat(getNonNullString(value));\n        }\n\n        return result;\n    }\n\n    public static String concatenateUsingCollectorsJoining(String[] values) {\n        String result = Stream.of(values).filter(value -> null != value).collect(Collectors.joining(\"\"));\n\n        return result;\n    }\n\n    public static String concatenateUsingStringJoiner(String[] values) {\n        StringJoiner result = new StringJoiner(\"\");\n\n        for (String value : values) {\n            result = result.add(getNonNullString(value));\n        }\n\n        return result.toString();\n    }\n\n    public static String concatenateUsingJoin(String[] values) {\n        String result = String.join(\"\", values);\n\n        return result;\n    }\n\n    public static String concatenateUsingStringBuilder(String[] values) {\n        StringBuilder result = new StringBuilder();\n\n        for (String value : values) {\n            result = result.append(getNonNullString(value));\n        }\n\n        return result.toString();\n    }\n\n    public static String concatenateUsingHelperMethod(String[] values) {\n        String result = \"\";\n\n        for (String value : values) {\n            result = result + getNonNullString(value);\n        }\n\n        return result;\n    }\n\n    public static String concatenateUsingPlusOperator(String[] values) {\n        String result = \"\";\n\n        for (String value : values) {\n            result = result + (value == null ? \"\" : value);\n        }\n\n        return result;\n    }\n\n    private static String getNonNullString(String value) {\n        return value == null ? \"\" : value;\n    }\n}\n", "test_case": "package com.baeldung.concatenation;\n\nimport static com.baeldung.concatenation.ConcatenatingNull.concatenateUsingCollectorsJoining;\nimport static com.baeldung.concatenation.ConcatenatingNull.concatenateUsingHelperMethod;\nimport static com.baeldung.concatenation.ConcatenatingNull.concatenateUsingJoin;\nimport static com.baeldung.concatenation.ConcatenatingNull.concatenateUsingPlusOperator;\nimport static com.baeldung.concatenation.ConcatenatingNull.concatenateUsingStringBuilder;\nimport static com.baeldung.concatenation.ConcatenatingNull.concatenateUsingStringConcat;\nimport static com.baeldung.concatenation.ConcatenatingNull.concatenateUsingStringJoiner;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class ConcatenatingNullUnitTest {\n\n    String[] values = { \"Java \", null, \"\", \"is \", \"great!\" };\n\n    @Test\n    public void givenStringElementsWithNull_whenConcatenatedUsingPlus_thenNullIsIgnored() {\n        String result = concatenateUsingPlusOperator(values);\n        assertEquals(\"Java is great!\", result);\n    }\n\n    @Test\n    public void givenStringElementsWithNull_whenConcatenatedUsingHelperMethod_thenNullIsIgnored() {\n        String result = concatenateUsingHelperMethod(values);\n        assertEquals(\"Java is great!\", result);\n    }\n\n    @Test\n    public void givenStringElementsWithNull_whenConcatenatedUsingStringBuilder_thenNullIsIgnored() {\n        String result = concatenateUsingStringBuilder(values);\n        assertEquals(\"Java is great!\", result);\n    }\n\n    @Test\n    public void givenStringElementsWithNull_whenConcatenatedUsingJoin_thenNullIsNotIgnored() {\n        String result = concatenateUsingJoin(values);\n        assertEquals(\"Java nullis great!\", result);\n    }\n\n    @Test\n    public void givenStringElementsWithNull_whenConcatenatedUsingStringJoiner_thenNullIsIgnored() {\n        String result = concatenateUsingStringJoiner(values);\n        assertEquals(\"Java is great!\", result);\n    }\n\n    @Test\n    public void givenStringElementsWithNull_whenConcatenatedUsingCollectorsJoining_thenNullIsIgnored() {\n        String result = concatenateUsingCollectorsJoining(values);\n        assertEquals(\"Java is great!\", result);\n    }\n\n    @Test\n    public void givenStringElementsWithNull_whenConcatenatedUsingStringConcat_thenNullIsIgnored() {\n        String result = concatenateUsingStringConcat(values);\n        assertEquals(\"Java is great!\", result);\n    }\n}\n"}
{"code_source": "package com.baeldung.endswithpattern;\n\nimport java.util.regex.Pattern;\n\nimport org.apache.commons.lang3.StringUtils;\n\npublic class StringEndsWithPattern {\n\n    public static boolean usingStringEndsWithMethod(String text, String suffix) {\n        if (text == null || suffix == null) {\n            return false;\n        }\n        return text.endsWith(suffix);\n    }\n\n    public static boolean usingStringMatchesMethod(String text, String suffix) {\n        if (text == null || suffix == null) {\n            return false;\n        }\n        String regex = \".*\" + suffix + \"$\";\n        return text.matches(regex);\n    }\n\n    public static boolean usingStringRegionMatchesMethod(String text, String suffix) {\n        if (text == null || suffix == null) {\n            return false;\n        }\n        int toffset = text.length() - suffix.length();\n        return text.regionMatches(toffset, suffix, 0, suffix.length());\n    }\n\n    public static boolean usingPatternClass(String text, String suffix) {\n        if (text == null || suffix == null) {\n            return false;\n        }\n        Pattern pattern = Pattern.compile(\".*\" + suffix + \"$\");\n        return pattern.matcher(text)\n            .find();\n    }\n\n    public static boolean usingApacheCommonsLang(String text, String suffix) {\n        return StringUtils.endsWith(text, suffix);\n    }\n\n}\n", "test_case": "package com.baeldung.endswithpattern;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\npublic class StringEndsWithPatternUnitTest {\n\n    private static final String TEXT = \"Welcome to baeldung.com\";\n    private static final String SUFFIX = \"com\";\n\n    @Test\n    public void givenStringAndSuffix_whenUsingStringEndsWith_thenCheck() {\n\n        assertTrue(StringEndsWithPattern.usingStringEndsWithMethod(TEXT, SUFFIX));\n    }\n\n    @Test\n    public void givenStringAndSuffix_whenUsingStringMatches_thenCheck() {\n\n        assertTrue(StringEndsWithPattern.usingStringMatchesMethod(TEXT, SUFFIX));\n    }\n\n    @Test\n    public void givenStringAndSuffix_whenUsingStringRegionMatches_thenCheck() {\n\n        assertTrue(StringEndsWithPattern.usingStringRegionMatchesMethod(TEXT, SUFFIX));\n    }\n\n    @Test\n    public void givenStringAndSuffix_whenUsingPatternClass_thenCheck() {\n\n        assertTrue(StringEndsWithPattern.usingPatternClass(TEXT, SUFFIX));\n    }\n\n    @Test\n    public void givenStringAndSuffix_whenUsingApacheCommonsLang_thenCheck() {\n        \n        assertTrue(StringEndsWithPattern.usingApacheCommonsLang(TEXT, SUFFIX));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.namedformatting;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class NamedFormatter {\n    private NamedFormatter() {}\n\n    public static String format(String template, Map<String, Object> parameters) {\n        StringBuilder newTemplate = new StringBuilder(template);\n        List<Object> valueList = new ArrayList<>();\n\n        Matcher matcher = Pattern.compile(\"[$][{](\\\\w+)}\").matcher(template);\n\n        while (matcher.find()) {\n            String key = matcher.group(1);\n\n            String paramName = \"${\" + key + \"}\";\n            int index = newTemplate.indexOf(paramName);\n            if (index != -1) {\n                newTemplate.replace(index, index + paramName.length(), \"%s\");\n                valueList.add(parameters.get(key));\n            }\n        }\n\n        return String.format(newTemplate.toString(), valueList.toArray());\n    }\n}\n", "test_case": "package com.baeldung.namedformatting;\n\nimport org.apache.commons.text.StrSubstitutor;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass NamedFormatterUnitTest {\n    private static final String TEMPLATE = \"Text: [${text}] Number: [${number}] Text again: [${text}]\";\n\n    @Test\n    void givenTemplateWithNamedParam_whenCallingCommonsTextStrSubstitutor_shouldGetExpectedResult() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"text\", \"It's awesome!\");\n        params.put(\"number\", 42);\n        String result = StrSubstitutor.replace(TEMPLATE, params, \"${\", \"}\");\n        assertThat(result).isEqualTo(\"Text: [It's awesome!] Number: [42] Text again: [It's awesome!]\");\n    }\n\n    @Test\n    void givenTemplateWithNamedParam_whenCallingCommonsTextStrSubstitutorWithParameterNames_shouldNotWorkAsExpected() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"text\", \"'${number}' is a placeholder.\");\n        params.put(\"number\", 42);\n        String result = StrSubstitutor.replace(TEMPLATE, params, \"${\", \"}\");\n\n        assertThat(result).isNotEqualTo(\"Text: ['${number}' is a placeholder.] Number: [42] Text again: ['${number}' is a placeholder.]\");\n\n        assertThat(result).isEqualTo(\"Text: ['42' is a placeholder.] Number: [42] Text again: ['42' is a placeholder.]\");\n    }\n\n    @Test\n    void givenTemplateWithNamedParam_whenCallingNamedFormatter_shouldGetExpectedResult() {\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"text\", \"It's awesome!\");\n        params.put(\"number\", 42);\n        String result = NamedFormatter.format(TEMPLATE, params);\n        assertThat(result).isEqualTo(\"Text: [It's awesome!] Number: [42] Text again: [It's awesome!]\");\n\n        params.put(\"text\", \"'${number}' is a placeholder.\");\n        result = NamedFormatter.format(TEMPLATE, params);\n        assertThat(result).isEqualTo(\"Text: ['${number}' is a placeholder.] Number: [42] Text again: ['${number}' is a placeholder.]\");\n    }\n}\n"}
{"code_source": "package com.baeldung.split;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.MatchResult;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\nimport com.google.common.base.Splitter;\nimport com.google.common.collect.ImmutableList;\n\npublic class SplitStringEveryNthChar {\n\n    public static List<String> usingSplitMethod(String text, int n) {\n        String[] results = text.split(\"(?<=\\\\G.{\" + n + \"})\");\n\n        return Arrays.asList(results);\n    }\n\n    public static List<String> usingSubstringMethod(String text, int n) {\n        List<String> results = new ArrayList<>();\n        int length = text.length();\n\n        for (int i = 0; i < length; i += n) {\n            results.add(text.substring(i, Math.min(length, i + n)));\n        }\n\n        return results;\n    }\n\n    public static List<String> usingPattern(String text, int n) {\n        return Pattern.compile(\".{1,\" + n + \"}\")\n            .matcher(text)\n            .results()\n            .map(MatchResult::group)\n            .collect(Collectors.toList());\n    }\n\n    public static List<String> usingGuava(String text, int n) {\n        Iterable<String> parts = Splitter.fixedLength(n)\n            .split(text);\n\n        return ImmutableList.copyOf(parts);\n    }\n\n}\n", "test_case": "package com.baeldung.split;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.collection.IsIterableContainingInOrder.contains;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\npublic class SplitStringEveryNthCharUnitTest {\n\n    public static final String TEXT = \"abcdefgh123456\";\n\n    @Test\n    public void givenString_whenUsingSplit_thenSplit() {\n        List<String> results = SplitStringEveryNthChar.usingSplitMethod(TEXT, 3);\n\n        assertThat(results, contains(\"abc\", \"def\", \"gh1\", \"234\", \"56\"));\n    }\n\n    @Test\n    public void givenString_whenUsingSubstring_thenSplit() {\n        List<String> results = SplitStringEveryNthChar.usingSubstringMethod(TEXT, 4);\n\n        assertThat(results, contains(\"abcd\", \"efgh\", \"1234\", \"56\"));\n    }\n\n    @Test\n    public void givenString_whenUsingPattern_thenSplit() {\n        List<String> results = SplitStringEveryNthChar.usingPattern(TEXT, 5);\n\n        assertThat(results, contains(\"abcde\", \"fgh12\", \"3456\"));\n    }\n\n    @Test\n    public void givenString_whenUsingGuava_thenSplit() {\n        List<String> results = SplitStringEveryNthChar.usingGuava(TEXT, 6);\n\n        assertThat(results, contains(\"abcdef\", \"gh1234\", \"56\"));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.stringbuilder;\n\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.List;\nimport java.util.StringJoiner;\n\npublic class RemoveLastChar {\n    static List<String> technologies = List.of(\"Spring Boot\", \"Quarkus\", \"Micronaut\");\n\n    public static StringBuilder joinStringsWithLastCharAsDelimiter() {\n        StringBuilder sb = new StringBuilder();\n\n        for (String tech : technologies) {\n            sb.append(tech)\n                .append(\",\");\n        }\n\n        return sb;\n    }\n\n    public static StringBuilder removeLastCharWithDeleteLastChar(StringBuilder sb) {\n\n        if (sb.length() == 0) {\n            return sb;\n        }\n\n        return sb.deleteCharAt(sb.length() - 1);\n    }\n\n    public static StringBuilder removeLastCharWithSetLength(StringBuilder sb) {\n\n        if (sb.length() == 0) {\n            return sb;\n        }\n\n        sb.setLength(sb.length() - 1);\n        return sb;\n    }\n\n    public static StringBuilder joinStringsWithoutLastCharAsDelimiter() {\n        StringBuilder sb = new StringBuilder();\n        String prefix = \"\";\n\n        for (String tech : technologies) {\n            sb.append(prefix);\n            prefix = \",\";\n            sb.append(tech);\n        }\n\n        return sb;\n    }\n\n    public static String joinStringsUsingJoin() {\n        return String.join(\",\", technologies);\n    }\n\n    public static String joinUsingStringJoiner() {\n        StringJoiner joiner = new StringJoiner(\",\");\n        technologies.forEach(joiner::add);\n        return joiner.toString();\n    }\n\n    public static String joinUsingStringUtils() {\n        return StringUtils.join(technologies, \",\");\n    }\n}\n", "test_case": "package com.baeldung.stringbuilder;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nclass RemoveLastCharUnitTest {\n\n    private static final String STRING_WITH_CHAR = \"Spring Boot,Quarkus,Micronaut,\";\n    private static final String STRING_WITHOUT_CHAR = \"Spring Boot,Quarkus,Micronaut\";\n\n    @Test\n    void givenCharAtEndOfString_whenRemoveLastCharWithDeleteLastChar_thenLastCharRemoved() {\n        StringBuilder sb = RemoveLastChar.joinStringsWithLastCharAsDelimiter();\n        Assertions.assertEquals(STRING_WITH_CHAR, sb.toString());\n\n        RemoveLastChar.removeLastCharWithDeleteLastChar(sb);\n        Assertions.assertEquals(STRING_WITHOUT_CHAR, sb.toString());\n    }\n\n    @Test\n    void givenCharAtEndOfString_whenRemoveLastCharWithSetLength_thenLastCharRemoved() {\n        StringBuilder sb = RemoveLastChar.joinStringsWithLastCharAsDelimiter();\n        Assertions.assertEquals(STRING_WITH_CHAR, sb.toString());\n\n        RemoveLastChar.removeLastCharWithSetLength(sb);\n        Assertions.assertEquals(STRING_WITHOUT_CHAR, sb.toString());\n    }\n\n    @Test\n    void whenForLoopJoinWithPrefix_thenLastCharIsNotPresent() {\n        Assertions.assertEquals(STRING_WITHOUT_CHAR, RemoveLastChar.joinStringsWithoutLastCharAsDelimiter()\n            .toString());\n    }\n\n    @Test\n    void whenJoiningStringsUsingJoin_thenLastCharIsNotPresent() {\n        Assertions.assertEquals(STRING_WITHOUT_CHAR, RemoveLastChar.joinStringsUsingJoin());\n    }\n\n    @Test\n    void whenJoiningStringsUsingStringJoiner_thenLastCharIsNotPresent() {\n        Assertions.assertEquals(STRING_WITHOUT_CHAR, RemoveLastChar.joinUsingStringJoiner());\n    }\n\n    @Test\n    void whenJoiningStringsUsingStringUtils_thenLastCharIsNotPresent() {\n        Assertions.assertEquals(STRING_WITHOUT_CHAR, RemoveLastChar.joinUsingStringUtils());\n    }\n}\n"}
{"code_source": "package com.baeldung.truncate;\n\nimport java.util.Optional;\nimport java.util.regex.MatchResult;\nimport java.util.regex.Pattern;\n\nimport org.apache.commons.lang3.StringUtils;\n\nimport com.google.common.base.Splitter;\n\npublic class TruncateString {\n\n    private static final String EMPTY = \"\";\n\n    public static String usingSubstringMethod(String text, int length) {\n        if (length < 0) {\n            throw new IllegalArgumentException(\"length cannot be negative\");\n        }\n\n        if (text == null) {\n            return EMPTY;\n        }\n\n        if (text.length() <= length) {\n            return text;\n        } else {\n            return text.substring(0, length);\n        }\n    }\n\n    public static String usingSplitMethod(String text, int length) {\n        if (length < 0) {\n            throw new IllegalArgumentException(\"length cannot be negative\");\n        }\n\n        if (text == null) {\n            return EMPTY;\n        }\n\n        String[] results = text.split(\"(?<=\\\\G.{\" + length + \"})\");\n\n        return results[0];\n    }\n\n    public static String usingPattern(String text, int length) {\n        if (length < 0) {\n            throw new IllegalArgumentException(\"length cannot be negative\");\n        }\n\n        if (text == null) {\n            return EMPTY;\n        }\n\n        Optional<String> result = Pattern.compile(\".{1,\" + length + \"}\")\n            .matcher(text)\n            .results()\n            .map(MatchResult::group)\n            .findFirst();\n\n        return result.isPresent() ? result.get() : EMPTY;\n\n    }\n\n    public static String usingCodePointsMethod(String text, int length) {\n        if (length < 0) {\n            throw new IllegalArgumentException(\"length cannot be negative\");\n        }\n\n        if (text == null) {\n            return EMPTY;\n        }\n\n        return text.codePoints()\n            .limit(length)\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();\n    }\n\n    public static String usingLeftMethod(String text, int length) {\n\n        return StringUtils.left(text, length);\n    }\n\n    public static String usingTruncateMethod(String text, int length) {\n\n        return StringUtils.truncate(text, length);\n    }\n\n    public static String usingSplitter(String text, int length) {\n        if (length < 0) {\n            throw new IllegalArgumentException(\"length cannot be negative\");\n        }\n\n        if (text == null) {\n            return EMPTY;\n        }\n\n        Iterable<String> parts = Splitter.fixedLength(length)\n            .split(text);\n\n        return parts.iterator()\n            .next();\n    }\n\n}\n", "test_case": "package com.baeldung.truncate;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class TruncateStringUnitTest {\n\n    private static final String TEXT = \"Welcome to baeldung.com\";\n\n    @Test\n    public void givenStringAndLength_whenUsingSubstringMethod_thenTruncate() {\n\n        assertEquals(TruncateString.usingSubstringMethod(TEXT, 10), \"Welcome to\");\n    }\n\n    @Test\n    public void givenStringAndLength_whenUsingSplitMethod_thenTruncate() {\n\n        assertEquals(TruncateString.usingSplitMethod(TEXT, 13), \"Welcome to ba\");\n    }\n\n    @Test\n    public void givenStringAndLength_whenUsingPattern_thenTruncate() {\n\n        assertEquals(TruncateString.usingPattern(TEXT, 19), \"Welcome to baeldung\");\n    }\n\n    @Test\n    public void givenStringAndLength_whenUsingCodePointsMethod_thenTruncate() {\n\n        assertEquals(TruncateString.usingCodePointsMethod(TEXT, 6), \"Welcom\");\n    }\n\n    @Test\n    public void givenStringAndLength_whenUsingLeftMethod_thenTruncate() {\n\n        assertEquals(TruncateString.usingLeftMethod(TEXT, 15), \"Welcome to bael\");\n    }\n\n    @Test\n    public void givenStringAndLength_whenUsingTruncateMethod_thenTruncate() {\n\n        assertEquals(TruncateString.usingTruncateMethod(TEXT, 20), \"Welcome to baeldung.\");\n    }\n\n    @Test\n    public void givenStringAndLength_whenUsingSplitter_thenTruncate() {\n\n        assertEquals(TruncateString.usingSplitter(TEXT, 3), \"Wel\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.multiline;\n\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.ImmutableList;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class MultiLineString {\n    \n    String newLine = System.getProperty(\"line.separator\");\n    \n    public String stringConcatenation() {\n        return \"Get busy living\"\n                .concat(newLine)\n                .concat(\"or\")\n                .concat(newLine)\n                .concat(\"get busy dying.\")\n                .concat(newLine)\n                .concat(\"--Stephen King\");\n    }\n    \n    public String stringJoin() {\n        return String.join(newLine,\n                           \"Get busy living\",\n                           \"or\",\n                           \"get busy dying.\",\n                           \"--Stephen King\");\n    }\n    \n    public String stringBuilder() {\n        return new StringBuilder()\n                .append(\"Get busy living\")\n                .append(newLine)\n                .append(\"or\")\n                .append(newLine)\n                .append(\"get busy dying.\")\n                .append(newLine)\n                .append(\"--Stephen King\")\n                .toString();\n    }\n    \n    public String stringWriter() {\n        StringWriter stringWriter = new StringWriter();\n        PrintWriter printWriter = new PrintWriter(stringWriter);\n        printWriter.println(\"Get busy living\");\n        printWriter.println(\"or\");\n        printWriter.println(\"get busy dying.\");\n        printWriter.println(\"--Stephen King\");\n        return stringWriter.toString();\n    }\n    \n    public String guavaJoiner() {\n        return Joiner.on(newLine).join(ImmutableList.of(\"Get busy living\",\n            \"or\",\n            \"get busy dying.\",\n            \"--Stephen King\"));\n    }\n    \n    public String loadFromFile() throws IOException {\n        return new String(Files.readAllBytes(Paths.get(\"src/main/resources/stephenking.txt\")));\n    }\n\n    public String textBlocks() {\n        return \"\"\"\n            Get busy living\n            or\n            get busy dying.\n            --Stephen King\"\"\";\n    }\n}\n", "test_case": "package com.baeldung.multiline;\n\nimport org.junit.Test;\n\nimport java.io.IOException;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class MultiLineStringUnitTest {\n\n    \n    @Test\n    public void whenCompareMultiLineStrings_thenTheyAreAllTheSame() throws IOException {\n        MultiLineString ms = new MultiLineString();\n        assertEquals(ms.stringConcatenation(), ms.stringJoin());\n        assertEquals(ms.stringJoin(), ms.stringBuilder());\n        assertEquals(ms.stringBuilder(), ms.guavaJoiner());\n        assertEquals(ms.guavaJoiner(), ms.loadFromFile());\n        assertEquals(ms.loadFromFile(), ms.textBlocks());\n    }\n    \n}\n"}
{"code_source": "package com.baeldung.javac;\n\nimport com.sun.source.tree.MethodTree;\nimport com.sun.source.tree.VariableTree;\nimport com.sun.source.util.*;\nimport com.sun.tools.javac.api.BasicJavacTask;\nimport com.sun.tools.javac.code.TypeTag;\nimport com.sun.tools.javac.tree.JCTree;\nimport com.sun.tools.javac.tree.TreeMaker;\nimport com.sun.tools.javac.util.Context;\nimport com.sun.tools.javac.util.Name;\nimport com.sun.tools.javac.util.Names;\n\nimport javax.tools.JavaCompiler;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static com.sun.tools.javac.util.List.nil;\n\n/**\n * A {@link JavaCompiler javac} plugin which inserts {@code >= 0} checks into resulting {@code *.class} files\n * for numeric method parameters marked by {@link Positive}\n */\npublic class SampleJavacPlugin implements Plugin {\n\n    public static final String NAME = \"MyPlugin\";\n\n    private static Set<String> TARGET_TYPES = new HashSet<>(Arrays.asList(\n        // Use only primitive types for simplicity\n        byte.class.getName(), short.class.getName(), char.class.getName(), \n        int.class.getName(), long.class.getName(), float.class.getName(), double.class.getName()));\n\n    @Override\n    public String getName() {\n        return NAME;\n    }\n\n    @Override\n    public void init(JavacTask task, String... args) {\n        Context context = ((BasicJavacTask) task).getContext();\n        task.addTaskListener(new TaskListener() {\n            @Override\n            public void started(TaskEvent e) {\n            }\n\n            @Override\n            public void finished(TaskEvent e) {\n                if (e.getKind() != TaskEvent.Kind.PARSE) {\n                    return;\n                }\n                e.getCompilationUnit()\n                    .accept(new TreeScanner<Void, Void>() {\n                        @Override\n                        public Void visitMethod(MethodTree method, Void v) {\n                            List<VariableTree> parametersToInstrument = method.getParameters()\n                                .stream()\n                                .filter(SampleJavacPlugin.this::shouldInstrument)\n                                .collect(Collectors.toList());\n                            if (!parametersToInstrument.isEmpty()) {\n                                // There is a possible case that more than one argument is marked by @Positive,\n                                // as the checks are added to the method's body beginning, we process parameters RTL\n                                // to ensure correct order.\n                                Collections.reverse(parametersToInstrument);\n                                parametersToInstrument.forEach(p -> addCheck(method, p, context));\n                            }\n                            // There is a possible case that there is a nested class declared in a method's body,\n                            // hence, we want to proceed with method body AST as well.\n                            return super.visitMethod(method, v);\n                        }\n                    }, null);\n            }\n        });\n    }\n\n    private boolean shouldInstrument(VariableTree parameter) {\n        return TARGET_TYPES.contains(parameter.getType().toString())\n          && parameter.getModifiers().getAnnotations()\n            .stream()\n            .anyMatch(a -> Positive.class.getSimpleName().equals(a.getAnnotationType().toString()));\n    }\n\n    private void addCheck(MethodTree method, VariableTree parameter, Context context) {\n        JCTree.JCIf check = createCheck(parameter, context);\n        JCTree.JCBlock body = (JCTree.JCBlock) method.getBody();\n        body.stats = body.stats.prepend(check);\n    }\n\n    private static JCTree.JCIf createCheck(VariableTree parameter, Context context) {\n        TreeMaker factory = TreeMaker.instance(context);\n        Names symbolsTable = Names.instance(context);\n        \n        return factory.at(((JCTree) parameter).pos)\n          .If(factory.Parens(createIfCondition(factory, symbolsTable, parameter)),\n            createIfBlock(factory, symbolsTable, parameter),\n            null);\n    }\n\n    private static JCTree.JCBinary createIfCondition(TreeMaker factory, Names symbolsTable, VariableTree parameter) {\n        Name parameterId = symbolsTable.fromString(parameter.getName().toString());\n        return factory.Binary(JCTree.Tag.LE, \n          factory.Ident(parameterId), \n          factory.Literal(TypeTag.INT, 0));\n    }\n\n    private static JCTree.JCBlock createIfBlock(TreeMaker factory, Names symbolsTable, VariableTree parameter) {\n        String parameterName = parameter.getName().toString();\n        Name parameterId = symbolsTable.fromString(parameterName);\n        \n        String errorMessagePrefix = String.format(\"Argument '%s' of type %s is marked by @%s but got '\", \n          parameterName, parameter.getType(), Positive.class.getSimpleName());\n        String errorMessageSuffix = \"' for it\";\n        \n        return factory.Block(0, com.sun.tools.javac.util.List.of(\n          factory.Throw(\n            factory.NewClass(null, nil(), \n              factory.Ident(symbolsTable.fromString(IllegalArgumentException.class.getSimpleName())),\n                com.sun.tools.javac.util.List.of(factory.Binary(JCTree.Tag.PLUS, \n                  factory.Binary(JCTree.Tag.PLUS, factory.Literal(TypeTag.CLASS, errorMessagePrefix), \n                    factory.Ident(parameterId)), \n                    factory.Literal(TypeTag.CLASS, errorMessageSuffix))), null))));\n    }\n\n}\n", "test_case": "package com.baeldung.javac;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class SampleJavacPluginIntegrationTest {\n\n    private static final String CLASS_TEMPLATE =\n            \"package com.baeldung.javac;\\n\" +\n            \"\\n\" +\n            \"public class Test {\\n\" +\n            \"    public static %1$s service(@Positive %1$s i) {\\n\" +\n            \"        return i;\\n\" +\n            \"    }\\n\" +\n            \"}\\n\" +\n            \"\";\n\n    private TestCompiler compiler = new TestCompiler();\n    private TestRunner   runner   = new TestRunner();\n\n    @Test(expected = IllegalArgumentException.class)\n    public void givenInt_whenNegative_thenThrowsException() throws Throwable {\n        compileAndRun(double.class,-1);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void givenInt_whenZero_thenThrowsException() throws Throwable {\n        compileAndRun(int.class,0);\n    }\n\n    @Test\n    public void givenInt_whenPositive_thenSuccess() throws Throwable {\n        assertEquals(1, compileAndRun(int.class, 1));\n    }\n\n    private Object compileAndRun(Class<?> argumentType, Object argument) throws Throwable {\n        String qualifiedClassName = \"com.baeldung.javac.Test\";\n        byte[] byteCode = compiler.compile(qualifiedClassName, String.format(CLASS_TEMPLATE, argumentType.getName()));\n        return runner.run(byteCode, qualifiedClassName, \"service\", new Class[] {argumentType}, argument);\n    }\n}\n"}
{"code_source": "package com.baeldung.timer;\n\nimport java.util.List;\nimport java.util.TimerTask;\n\npublic class DatabaseMigrationTask extends TimerTask {\n    private List<String> oldDatabase;\n    private List<String> newDatabase;\n\n    public DatabaseMigrationTask(List<String> oldDatabase, List<String> newDatabase) {\n        this.oldDatabase = oldDatabase;\n        this.newDatabase = newDatabase;\n    }\n\n    @Override\n    public void run() {\n        newDatabase.addAll(oldDatabase);\n    }\n}\n", "test_case": "package com.baeldung.timer;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.util.*;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass DatabaseMigrationTaskUnitTest {\n    @Test\n    void givenDatabaseMigrationTask_whenTimerScheduledForNowPlusTwoSeconds_thenDataMigratedAfterTwoSeconds() throws Exception {\n        List<String> oldDatabase = Arrays.asList(\"Harrison Ford\", \"Carrie Fisher\", \"Mark Hamill\");\n        List<String> newDatabase = new ArrayList<>();\n\n        LocalDateTime twoSecondsLater = LocalDateTime.now().plusSeconds(2);\n        Date twoSecondsLaterAsDate = Date.from(twoSecondsLater.atZone(ZoneId.systemDefault()).toInstant());\n\n        new Timer().schedule(new DatabaseMigrationTask(oldDatabase, newDatabase), twoSecondsLaterAsDate);\n\n        while (LocalDateTime.now().isBefore(twoSecondsLater)) {\n            assertThat(newDatabase).isEmpty();\n            Thread.sleep(500);\n        }\n        assertThat(newDatabase).containsExactlyElementsOf(oldDatabase);\n    }\n\n    @Test\n    void givenDatabaseMigrationTask_whenTimerScheduledInTwoSeconds_thenDataMigratedAfterTwoSeconds() throws Exception {\n        List<String> oldDatabase = Arrays.asList(\"Harrison Ford\", \"Carrie Fisher\", \"Mark Hamill\");\n        List<String> newDatabase = new ArrayList<>();\n\n        new Timer().schedule(new DatabaseMigrationTask(oldDatabase, newDatabase), 2000);\n\n        LocalDateTime twoSecondsLater = LocalDateTime.now().plusSeconds(2);\n\n        while (LocalDateTime.now().isBefore(twoSecondsLater)) {\n            assertThat(newDatabase).isEmpty();\n            Thread.sleep(500);\n        }\n        assertThat(newDatabase).containsExactlyElementsOf(oldDatabase);\n    }\n}"}
{"code_source": "package com.baeldung.timer;\n\nimport java.time.Instant;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.util.Random;\nimport java.util.TimerTask;\nimport java.util.concurrent.TimeUnit;\n\npublic class NewsletterTask extends TimerTask {\n    @Override\n    public void run() {\n        System.out.println(\"Email sent at: \"\n          + LocalDateTime.ofInstant(Instant.ofEpochMilli(scheduledExecutionTime()), ZoneId.systemDefault()));\n        Random random = new Random();\n        int value = random.ints(1, 7)\n                .findFirst()\n                .getAsInt();\n        System.out.println(\"The duration of sending the mail will took: \" + value);\n        try {\n            TimeUnit.SECONDS.sleep(value);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n", "test_case": "package com.baeldung.timer;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Timer;\n\nclass NewsletterTaskUnitManualTest {\n    private final Timer timer = new Timer();\n\n    @AfterEach\n    void afterEach() {\n        timer.cancel();\n    }\n\n    @Test\n    void givenNewsletterTask_whenTimerScheduledEachSecondFixedDelay_thenNewsletterSentEachSecond() throws Exception {\n        timer.schedule(new NewsletterTask(), 0, 1000);\n\n        Thread.sleep(20000);\n    }\n\n    @Test\n    void givenNewsletterTask_whenTimerScheduledEachSecondFixedRate_thenNewsletterSentEachSecond() throws Exception {\n        timer.scheduleAtFixedRate(new NewsletterTask(), 0, 1000);\n\n        Thread.sleep(20000);\n    }\n}"}
{"code_source": "package com.baeldung.uuid;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Arrays;\nimport java.util.Random;\nimport java.util.UUID;\n\npublic final class UUIDGenerator {\n\n    private static final char[] hexArray = \"0123456789ABCDEF\".toCharArray();\n\n    private UUIDGenerator() {\n    }\n\n    /**\n     * Type 1 UUID Generation\n     */\n    public static UUID generateType1UUID() {\n\n        final long most64SigBits = get64MostSignificantBitsForVersion1();\n        final long least64SigBits = get64LeastSignificantBitsForVersion1();\n\n        return new UUID(most64SigBits, least64SigBits);\n    }\n\n    private static long get64LeastSignificantBitsForVersion1() {\n        final long random63BitLong = new Random().nextLong() & 0x3FFFFFFFFFFFFFFFL;\n        long variant3BitFlag = 0x8000000000000000L;\n        return random63BitLong | variant3BitFlag;\n    }\n\n    private static long get64MostSignificantBitsForVersion1() {\n        final long currentTimeMillis = System.currentTimeMillis();\n        final long time_low = (currentTimeMillis & 0x0000_0000_FFFF_FFFFL) << 32;\n        final long time_mid = ((currentTimeMillis >> 32) & 0xFFFF) << 16;\n        final long version = 1 << 12;\n        final long time_high = ((currentTimeMillis >> 48) & 0x0FFF);\n        return time_low | time_mid | version | time_high;\n    }\n\n    /**\n     * Type 3 UUID Generation\n     */\n    public static UUID generateType3UUID(String namespace, String name) {\n\n        final byte[] nameSpaceBytes = bytesFromUUID(namespace);\n        final byte[] nameBytes = name.getBytes(StandardCharsets.UTF_8);\n        final byte[] result = joinBytes(nameSpaceBytes, nameBytes);\n\n        return UUID.nameUUIDFromBytes(result);\n    }\n\n    /**\n     * Type 4 UUID Generation\n     */\n    public static UUID generateType4UUID() {\n        return UUID.randomUUID();\n    }\n\n    /**\n     * Type 5 UUID Generation\n     */\n    public static UUID generateType5UUID(String namespace, String name) {\n\n        final byte[] nameSpaceBytes = bytesFromUUID(namespace);\n        final byte[] nameBytes = name.getBytes(StandardCharsets.UTF_8);\n        final byte[] result = joinBytes(nameSpaceBytes, nameBytes);\n\n        return type5UUIDFromBytes(result);\n    }\n\n    public static UUID type5UUIDFromBytes(byte[] name) {\n        final MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(\"SHA-1\");\n        } catch (NoSuchAlgorithmException exception) {\n            throw new InternalError(\"SHA-1 not supported\", exception);\n        }\n        final byte[] bytes = Arrays.copyOfRange(md.digest(name), 0, 16);\n        bytes[6] &= 0x0f; /* clear version        */\n        bytes[6] |= 0x50; /* set to version 5     */\n        bytes[8] &= 0x3f; /* clear variant        */\n        bytes[8] |= 0x80; /* set to IETF variant  */\n        return constructType5UUID(bytes);\n    }\n\n    private static UUID constructType5UUID(byte[] data) {\n        long msb = 0;\n        long lsb = 0;\n        assert data.length == 16 : \"data must be 16 bytes in length\";\n\n        for (int i = 0; i < 8; i++) {\n            msb = (msb << 8) | (data[i] & 0xff);\n        }\n\n        for (int i = 8; i < 16; i++) {\n            lsb = (lsb << 8) | (data[i] & 0xff);\n        }\n        return new UUID(msb, lsb);\n    }\n\n    private static byte[] bytesFromUUID(String uuidHexString) {\n        final String normalizedUUIDHexString = uuidHexString.replace(\"-\", \"\");\n\n        assert normalizedUUIDHexString.length() == 32;\n\n        final byte[] bytes = new byte[16];\n        for (int i = 0; i < 16; i++) {\n            final byte b = hexToByte(normalizedUUIDHexString.substring(i * 2, i * 2 + 2));\n            bytes[i] = b;\n        }\n        return bytes;\n    }\n\n    public static byte hexToByte(String hexString) {\n        final int firstDigit = Character.digit(hexString.charAt(0), 16);\n        final int secondDigit = Character.digit(hexString.charAt(1), 16);\n        return (byte) ((firstDigit << 4) + secondDigit);\n    }\n\n    public static byte[] joinBytes(byte[] byteArray1, byte[] byteArray2) {\n        final int finalLength = byteArray1.length + byteArray2.length;\n        final byte[] result = new byte[finalLength];\n\n        System.arraycopy(byteArray1, 0, result, 0, byteArray1.length);\n        System.arraycopy(byteArray2, 0, result, byteArray1.length, byteArray2.length);\n        return result;\n    }\n\n    public static UUID generateType5UUID(String name) {\n\n        try {\n\n            final byte[] bytes = name.getBytes(StandardCharsets.UTF_8);\n            final MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n\n            final byte[] hash = md.digest(bytes);\n\n            long msb = getLeastAndMostSignificantBitsVersion5(hash, 0);\n            long lsb = getLeastAndMostSignificantBitsVersion5(hash, 8);\n            // Set the version field\n            msb &= ~(0xfL << 12);\n            msb |= 5L << 12;\n            // Set the variant field to 2\n            lsb &= ~(0x3L << 62);\n            lsb |= 2L << 62;\n            return new UUID(msb, lsb);\n\n        } catch (NoSuchAlgorithmException e) {\n            throw new AssertionError(e);\n        }\n    }\n\n    private static long getLeastAndMostSignificantBitsVersion5(final byte[] src, final int offset) {\n        long ans = 0;\n        for (int i = offset + 7; i >= offset; i -= 1) {\n            ans <<= 8;\n            ans |= src[i] & 0xffL;\n        }\n        return ans;\n    }\n}", "test_case": "package com.baeldung.uuid;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.io.UnsupportedEncodingException;\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.util.UUID;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass UUIDGeneratorUnitTest {\n\n    private static final String NAMESPACE_URL = \"6ba7b811-9dad-11d1-80b4-00c04fd430c8\";\n    private static final String NAMESPACE_DNS = \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\";\n\n    @Test\n    void shouldGenerateType1UUIDWithCorrectVersionAndVariant() {\n        UUID uuid = UUIDGenerator.generateType1UUID();\n        assertEquals(36, uuid.toString().length());\n        assertEquals(1, uuid.version());\n        assertEquals(2, uuid.variant());\n    }\n\n    @Test\n    void shouldGenerateType1UUIDWithTheCurrentDate() {\n        UUID uuid = UUIDGenerator.generateType1UUID();\n        long time = uuid.timestamp();\n        LocalDateTime dateTime = LocalDateTime.ofInstant(Instant.ofEpochMilli(time), ZoneId.systemDefault());\n        assertEquals(LocalDate.now(), dateTime.toLocalDate());\n    }\n\n    @Test\n    void version_3_UUID_is_correctly_generated_for_domain_baeldung_com() {\n\n        UUID uuid = UUIDGenerator.generateType3UUID(NAMESPACE_DNS, \"baeldung.com\");\n\n        assertEquals(\"23785b78-0132-3ac6-aff6-cfd5be162139\", uuid.toString());\n        assertEquals(3, uuid.version());\n        assertEquals(2, uuid.variant());\n    }\n\n    @Test\n    void version_3_UUID_is_correctly_generated_for_domain_d() {\n\n        UUID uuid = UUIDGenerator.generateType3UUID(NAMESPACE_DNS, \"d\");\n\n        assertEquals(\"dbd41ecb-f466-33de-b309-1468addfc63b\", uuid.toString());\n        assertEquals(3, uuid.version());\n        assertEquals(2, uuid.variant());\n    }\n\n    @Test\n    public void version_4_UUID_is_generated_with_correct_length_version_and_variant() {\n\n        UUID uuid = UUIDGenerator.generateType4UUID();\n\n        assertEquals(36, uuid.toString().length());\n        assertEquals(4, uuid.version());\n        assertEquals(2, uuid.variant());\n    }\n\n    @Test\n    public void version_5_UUID_is_correctly_generated_for_domain_baeldung_com() throws UnsupportedEncodingException {\n\n        UUID uuid = UUIDGenerator.generateType5UUID(NAMESPACE_URL, \"baeldung.com\");\n\n        assertEquals(\"aeff44a5-8a61-52b6-bcbe-c8e5bd7d0300\", uuid.toString());\n        assertEquals(5, uuid.version());\n        assertEquals(2, uuid.variant());\n    }\n\n    @Test\n    public void version_5_UUID_is_correctly_generated_for_domain_baeldung_name() {\n\n        UUID uuid = UUIDGenerator.generateType5UUID(\"baeldung.com\");\n\n        assertEquals(\"efd5462b-b07a-52a3-94ea-bf575c0e0e75\", uuid.toString());\n        assertEquals(5, uuid.version());\n        assertEquals(2, uuid.variant());\n    }\n}"}
{"code_source": "package com.baeldung.cucumber.tags.service;\n\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class RandomNumberGeneratorService {\n\n    public int generateRandomNumber(int min, int max) {\n        return ThreadLocalRandom.current().nextInt(min, max + 1);\n    }\n}", "test_case": "package com.baeldung.cucumber.tags.service;\n\nimport org.junit.jupiter.api.Test;\n\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class RandomNumberGeneratorServiceUnitTest {\n\n    private final RandomNumberGeneratorService tested = new RandomNumberGeneratorService();\n\n    @Test\n    public void generateRandomNumberReturnsOK() {\n\n        int actual = tested.generateRandomNumber(1,5);\n        assertTrue(actual>=1 && actual<=5);\n    }\n}"}
{"code_source": "package com.baeldung.avltree;\n\npublic class AVLTree {\n\n    public class Node {\n        int key;\n        int height;\n        Node left;\n        Node right;\n\n        Node(int key) {\n            this.key = key;\n        }\n    }\n\n    private Node root;\n\n    public Node find(int key) {\n        Node current = root;\n        while (current != null) {\n            if (current.key == key) {\n               break;\n            }\n            current = current.key < key ? current.right : current.left;\n        }\n        return current;\n    }\n\n    public void insert(int key) {\n        root = insert(root, key);\n    }\n\n    public void delete(int key) {\n        root = delete(root, key);\n    }\n\n    public Node getRoot() {\n        return root;\n    }\n\n    public int height() {\n        return root == null ? -1 : root.height;\n    }\n\n    private Node insert(Node node, int key) {\n        if (node == null) {\n            return new Node(key);\n        } else if (node.key > key) {\n            node.left = insert(node.left, key);\n        } else if (node.key < key) {\n            node.right = insert(node.right, key);\n        } else {\n            throw new RuntimeException(\"duplicate Key!\");\n        }\n        return rebalance(node);\n    }\n\n    private Node delete(Node node, int key) {\n        if (node == null) {\n            return node;\n        } else if (node.key > key) {\n            node.left = delete(node.left, key);\n        } else if (node.key < key) {\n            node.right = delete(node.right, key);\n        } else {\n            if (node.left == null || node.right == null) {\n                node = (node.left == null) ? node.right : node.left;\n            } else {\n                Node mostLeftChild = mostLeftChild(node.right);\n                node.key = mostLeftChild.key;\n                node.right = delete(node.right, node.key);\n            }\n        }\n        if (node != null) {\n            node = rebalance(node);\n        }\n        return node;\n    }\n\n    private Node mostLeftChild(Node node) {\n        Node current = node;\n        /* loop down to find the leftmost leaf */\n        while (current.left != null) {\n            current = current.left;\n        }\n        return current;\n    }\n\n    private Node rebalance(Node z) {\n        updateHeight(z);\n        int balance = getBalance(z);\n        if (balance > 1) {\n            if (height(z.right.right) > height(z.right.left)) {\n                z = rotateLeft(z);\n            } else {\n                z.right = rotateRight(z.right);\n                z = rotateLeft(z);\n            }\n        } else if (balance < -1) {\n            if (height(z.left.left) > height(z.left.right)) {\n                z = rotateRight(z);\n            } else {\n                z.left = rotateLeft(z.left);\n                z = rotateRight(z);\n            }\n        }\n        return z;\n    }\n\n    private Node rotateRight(Node y) {\n        Node x = y.left;\n        Node z = x.right;\n        x.right = y;\n        y.left = z;\n        updateHeight(y);\n        updateHeight(x);\n        return x;\n    }\n\n    private Node rotateLeft(Node y) {\n        Node x = y.right;\n        Node z = x.left;\n        x.left = y;\n        y.right = z;\n        updateHeight(y);\n        updateHeight(x);\n        return x;\n    }\n\n    private void updateHeight(Node n) {\n        n.height = 1 + Math.max(height(n.left), height(n.right));\n    }\n\n    private int height(Node n) {\n        return n == null ? -1 : n.height;\n    }\n\n    public int getBalance(Node n) {\n        return (n == null) ? 0 : height(n.right) - height(n.left);\n    }\n}\n", "test_case": "package com.baeldung.avltree;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class AVLTreeUnitTest {\n\n    @Test\n    public void givenEmptyTree_whenHeightCalled_shouldReturnMinus1() {\n        AVLTree tree = new AVLTree();\n        Assert.assertEquals(-1, tree.height());\n    }\n\n    @Test\n    public void givenEmptyTree_whenInsertCalled_heightShouldBeZero() {\n        AVLTree tree = new AVLTree();\n        tree.insert(1);\n        Assert.assertEquals(0, tree.height());\n    }\n\n    @Test\n    public void givenEmptyTree_whenInsertCalled_treeShouldBeAvl() {\n        AVLTree tree = new AVLTree();\n        tree.insert(1);\n        Assert.assertTrue(isAVL(tree));\n    }\n\n    @Test\n    public void givenSampleTree_whenInsertCalled_treeShouldBeAvl() {\n        AVLTree tree = getSampleAVLTree();\n        int newKey = 11;\n        tree.insert(newKey);\n        Assert.assertTrue(isAVL(tree));\n    }\n\n    @Test\n    public void givenSampleTree_whenFindExistingKeyCalled_shouldReturnMatchedNode() {\n        AVLTree tree = getSampleAVLTree();\n        int existingKey = 2;\n        AVLTree.Node result = tree.find(existingKey);\n        Assert.assertEquals(result.key, existingKey);\n    }\n\n    @Test\n    public void givenSampleTree_whenFindNotExistingKeyCalled_shouldReturnNull() {\n        AVLTree tree = getSampleAVLTree();\n        int notExistingKey = 11;\n        AVLTree.Node result = tree.find(notExistingKey);\n        Assert.assertNull(result);\n    }\n\n    @Test\n    public void givenEmptyTree_whenDeleteCalled_treeShouldBeAvl() {\n        AVLTree tree = new AVLTree();\n        tree.delete(1);\n        Assert.assertTrue(isAVL(tree));\n    }\n\n    @Test\n    public void givenSampleTree_whenDeleteCalled_treeShouldBeAvl() {\n        AVLTree tree = getSampleAVLTree();\n        tree.delete(1);\n        Assert.assertTrue(isAVL(tree, tree.getRoot()));\n    }\n\n    private boolean isAVL(AVLTree tree) {\n       return isAVL(tree, tree.getRoot());\n    }\n\n    private boolean isAVL(AVLTree tree, AVLTree.Node node) {\n        if ( node == null )\n            return true;\n        int balance = tree.getBalance(node);\n        return (balance <= 1 && balance >= -1) && isAVL(tree, node.left) && isAVL(tree, node.right);\n    }\n\n    private AVLTree getSampleAVLTree() {\n        AVLTree avlTree = new AVLTree();\n        for (int i = 0; i < 10; i++)\n            avlTree.insert(i);\n        return avlTree;\n    }\n}\n"}
{"code_source": "package com.baeldung.circularbuffer;\n\npublic class CircularBuffer<E> {\n\n    private static final int DEFAULT_CAPACITY = 8;\n\n    private final int capacity;\n    private final E[] data;\n    private volatile int writeSequence, readSequence;\n\n    @SuppressWarnings(\"unchecked\")\n    public CircularBuffer(int capacity) {\n        this.capacity = (capacity < 1) ? DEFAULT_CAPACITY : capacity;\n        this.data = (E[]) new Object[this.capacity];\n        this.readSequence = 0;\n        this.writeSequence = -1;\n    }\n\n    public boolean offer(E element) {\n\n        if (isNotFull()) {\n\n            int nextWriteSeq = writeSequence + 1;\n            data[nextWriteSeq % capacity] = element;\n\n            writeSequence++;\n            return true;\n        }\n\n        return false;\n    }\n\n    public E poll() {\n\n        if (isNotEmpty()) {\n\n            E nextValue = data[readSequence % capacity];\n            readSequence++;\n            return nextValue;\n        }\n\n        return null;\n    }\n\n    public int capacity() {\n        return capacity;\n    }\n\n    public int size() {\n\n        return (writeSequence - readSequence) + 1;\n    }\n\n    public boolean isEmpty() {\n\n        return writeSequence < readSequence;\n    }\n\n    public boolean isFull() {\n\n        return size() >= capacity;\n    }\n    \n    private boolean isNotEmpty() {\n\n        return !isEmpty();\n    }\n\n    private boolean isNotFull() {\n\n        return !isFull();\n    }\n}\n", "test_case": "package com.baeldung.circularbuffer;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class CircularBufferUnitTest {\n\n    private final String[] shapes = { \"Circle\", \"Triangle\", \"Rectangle\", \"Square\", \"Rhombus\", \"Trapezoid\", \"Pentagon\", \"Pentagram\", \"Hexagon\", \"Hexagram\" };\n    private final int defaultCapacity = shapes.length;\n\n    @Test\n    public void givenCircularBuffer_whenAnElementIsEnqueued_thenSizeIsOne() {\n        CircularBuffer<String> buffer = new CircularBuffer<>(defaultCapacity);\n\n        assertTrue(buffer.offer(\"Square\"));\n        assertEquals(1, buffer.size());\n    }\n\n    @Test\n    public void givenCircularBuffer_whenAnElementIsDequeued_thenElementMatchesEnqueuedElement() {\n        CircularBuffer<String> buffer = new CircularBuffer<>(defaultCapacity);\n\n        buffer.offer(\"Triangle\");\n\n        String shape = buffer.poll();\n        assertEquals(\"Triangle\", shape);\n    }\n\n    @Test\n    public void givenCircularBuffer_whenAnElementIsEnqueuedAndDeququed_thenBufferIsEmpty() {\n\n        CircularBuffer<String> buffer = new CircularBuffer<>(defaultCapacity);\n\n        buffer.offer(\"Rectangle\");\n\n        assertFalse(buffer.isEmpty());\n        assertEquals(1, buffer.size());\n\n        buffer.poll();\n\n        assertTrue(buffer.isEmpty());\n    }\n\n    @Test\n    public void givenCircularBuffer_whenFilledToCapacity_thenNoMoreElementsCanBeEnqueued() {\n\n        int capacity = shapes.length;\n        CircularBuffer<String> buffer = new CircularBuffer<>(capacity);\n\n        assertTrue(buffer.isEmpty());\n\n        for (String shape : shapes) {\n            buffer.offer(shape);\n        }\n\n        assertTrue(buffer.isFull());\n        assertFalse(buffer.offer(\"Octagon\"));\n    }\n\n    @Test\n    public void givenCircularBuffer_whenBufferIsEmpty_thenReturnsNull() {\n\n        CircularBuffer<String> buffer = new CircularBuffer<>(1);\n\n        assertTrue(buffer.isEmpty());\n        assertNull(buffer.poll());\n    }\n}\n"}
{"code_source": "package com.baeldung.circularlinkedlist;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class CircularLinkedList {\n\n    final Logger logger = LoggerFactory.getLogger(CircularLinkedList.class);\n\n    private Node head = null;\n    private Node tail = null;\n\n    public void addNode(int value) {\n\n        Node newNode = new Node(value);\n\n        if (head == null) {\n            head = newNode;\n        } else {\n            tail.nextNode = newNode;\n        }\n\n        tail = newNode;\n        tail.nextNode = head;\n    }\n\n    public boolean containsNode(int searchValue) {\n\n        Node currentNode = head;\n\n        if (head == null) {\n            return false;\n        } else {\n            do {\n                if (currentNode.value == searchValue) {\n                    return true;\n                }\n                currentNode = currentNode.nextNode;\n            } while (currentNode != head);\n            return false;\n        }\n    }\n\n    public void deleteNode(int valueToDelete) {\n        Node currentNode = head;\n        if (head == null) {\n            return;\n        }\n        do {\n            Node nextNode = currentNode.nextNode;\n            if (nextNode.value == valueToDelete) {\n                if (tail == head) {\n                    head = null;\n                    tail = null;\n                } else {\n                    currentNode.nextNode = nextNode.nextNode;\n                    if (head == nextNode) {\n                        head = head.nextNode;\n                    }\n                    if (tail == nextNode) {\n                        tail = currentNode;\n                    }\n                }\n                break;\n            }\n            currentNode = nextNode;\n        } while (currentNode != head);\n    }\n\n    public void traverseList() {\n\n        Node currentNode = head;\n\n        if (head != null) {\n            do {\n                logger.info(currentNode.value + \" \");\n                currentNode = currentNode.nextNode;\n            } while (currentNode != head);\n        }\n    }\n\n}\n\nclass Node {\n\n    int value;\n    Node nextNode;\n\n    public Node(int value) {\n        this.value = value;\n    }\n\n}\n", "test_case": "package com.baeldung.circularlinkedlist;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\npublic class CircularLinkedListUnitTest {\n\n    @Test\n    public void givenACircularLinkedList_WhenAddingElements_ThenListContainsThoseElements() {\n        CircularLinkedList cll = createCircularLinkedList();\n\n        assertTrue(cll.containsNode(8));\n        assertTrue(cll.containsNode(37));\n    }\n\n    @Test\n    public void givenACircularLinkedList_WhenLookingForNonExistingElement_ThenReturnsFalse() {\n        CircularLinkedList cll = createCircularLinkedList();\n\n        assertFalse(cll.containsNode(11));\n    }\n\n    @Test\n    public void givenACircularLinkedList_WhenDeletingInOrderHeadMiddleTail_ThenListDoesNotContainThoseElements() {\n        CircularLinkedList cll = createCircularLinkedList();\n\n        assertTrue(cll.containsNode(13));\n        cll.deleteNode(13);\n        assertFalse(cll.containsNode(13));\n\n        assertTrue(cll.containsNode(1));\n        cll.deleteNode(1);\n        assertFalse(cll.containsNode(1));\n\n        assertTrue(cll.containsNode(46));\n        cll.deleteNode(46);\n        assertFalse(cll.containsNode(46));\n    }\n\n    @Test\n    public void givenACircularLinkedList_WhenDeletingInOrderTailMiddleHead_ThenListDoesNotContainThoseElements() {\n        CircularLinkedList cll = createCircularLinkedList();\n\n        assertTrue(cll.containsNode(46));\n        cll.deleteNode(46);\n        assertFalse(cll.containsNode(46));\n\n        assertTrue(cll.containsNode(1));\n        cll.deleteNode(1);\n        assertFalse(cll.containsNode(1));\n\n        assertTrue(cll.containsNode(13));\n        cll.deleteNode(13);\n        assertFalse(cll.containsNode(13));\n    }\n\n    @Test\n    public void givenACircularLinkedListWithOneNode_WhenDeletingElement_ThenListDoesNotContainTheElement() {\n        CircularLinkedList cll = new CircularLinkedList();\n        cll.addNode(1);\n        cll.deleteNode(1);\n        assertFalse(cll.containsNode(1));\n    }\n\n\n    private CircularLinkedList createCircularLinkedList() {\n        CircularLinkedList cll = new CircularLinkedList();\n\n        cll.addNode(13);\n        cll.addNode(7);\n        cll.addNode(24);\n        cll.addNode(1);\n        cll.addNode(8);\n        cll.addNode(37);\n        cll.addNode(46);\n\n        return cll;\n    }\n\n}\n"}
{"code_source": "package com.baeldung.lrucache;\n\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\n\npublic class LRUCache<K, V> implements Cache<K, V> {\n    private int size;\n    private Map<K, LinkedListNode<CacheElement<K, V>>> linkedListNodeMap;\n    private DoublyLinkedList<CacheElement<K, V>> doublyLinkedList;\n    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n\n    public LRUCache(int size) {\n        this.size = size;\n        this.linkedListNodeMap = new ConcurrentHashMap<>(size);\n        this.doublyLinkedList = new DoublyLinkedList<>();\n    }\n\n    @Override\n    public boolean put(K key, V value) {\n        this.lock.writeLock().lock();\n        try {\n            CacheElement<K, V> item = new CacheElement<K, V>(key, value);\n            LinkedListNode<CacheElement<K, V>> newNode;\n            if (this.linkedListNodeMap.containsKey(key)) {\n                LinkedListNode<CacheElement<K, V>> node = this.linkedListNodeMap.get(key);\n                newNode = doublyLinkedList.updateAndMoveToFront(node, item);\n            } else {\n                if (this.size() >= this.size) {\n                    this.evictElement();\n                }\n                newNode = this.doublyLinkedList.add(item);\n            }\n            if (newNode.isEmpty()) {\n                return false;\n            }\n            this.linkedListNodeMap.put(key, newNode);\n            return true;\n        } finally {\n            this.lock.writeLock().unlock();\n        }\n    }\n\n    @Override\n    public Optional<V> get(K key) {\n        this.lock.readLock().lock();\n        try {\n            LinkedListNode<CacheElement<K, V>> linkedListNode = this.linkedListNodeMap.get(key);\n            if (linkedListNode != null && !linkedListNode.isEmpty()) {\n                linkedListNodeMap.put(key, this.doublyLinkedList.moveToFront(linkedListNode));\n                return Optional.of(linkedListNode.getElement().getValue());\n            }\n            return Optional.empty();\n        } finally {\n            this.lock.readLock().unlock();\n        }\n    }\n\n    @Override\n    public int size() {\n        this.lock.readLock().lock();\n        try {\n            return doublyLinkedList.size();\n        } finally {\n            this.lock.readLock().unlock();\n        }\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return size() == 0;\n    }\n\n    @Override\n    public void clear() {\n        this.lock.writeLock().lock();\n        try {\n            linkedListNodeMap.clear();\n            doublyLinkedList.clear();\n        } finally {\n            this.lock.writeLock().unlock();\n        }\n    }\n\n\n    private boolean evictElement() {\n        this.lock.writeLock().lock();\n        try {\n            LinkedListNode<CacheElement<K, V>> linkedListNode = doublyLinkedList.removeTail();\n            if (linkedListNode.isEmpty()) {\n                return false;\n            }\n            linkedListNodeMap.remove(linkedListNode.getElement().getKey());\n            return true;\n        } finally {\n            this.lock.writeLock().unlock();\n        }\n    }\n}\n", "test_case": "package com.baeldung.lrucache;\n\nimport org.junit.Test;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.stream.IntStream;\nimport static org.junit.Assert.*;\n\npublic class LRUCacheUnitTest {\n\n    @Test\n    public void addSomeDataToCache_WhenGetData_ThenIsEqualWithCacheElement() {\n        LRUCache<String, String> lruCache = new LRUCache<>(3);\n        lruCache.put(\"1\", \"test1\");\n        lruCache.put(\"2\", \"test2\");\n        lruCache.put(\"3\", \"test3\");\n        assertEquals(\"test1\", lruCache.get(\"1\").get());\n        assertEquals(\"test2\", lruCache.get(\"2\").get());\n        assertEquals(\"test3\", lruCache.get(\"3\").get());\n    }\n\n    @Test\n    public void addDataToCacheToTheNumberOfSize_WhenAddOneMoreData_ThenLeastRecentlyDataWillEvict() {\n        LRUCache<String, String> lruCache = new LRUCache<>(3);\n        lruCache.put(\"1\", \"test1\");\n        lruCache.put(\"2\", \"test2\");\n        lruCache.put(\"3\", \"test3\");\n        lruCache.put(\"4\", \"test4\");\n        assertFalse(lruCache.get(\"1\").isPresent());\n    }\n\n    @Test\n    public void runMultiThreadTask_WhenPutDataInConcurrentToCache_ThenNoDataLost() throws Exception {\n        final int size = 50;\n        final ExecutorService executorService = Executors.newFixedThreadPool(5);\n        Cache<Integer, String> cache = new LRUCache<>(size);\n        CountDownLatch countDownLatch = new CountDownLatch(size);\n        try {\n            IntStream.range(0, size).<Runnable>mapToObj(key -> () -> {\n                cache.put(key, \"value\" + key);\n                countDownLatch.countDown();\n            }).forEach(executorService::submit);\n            countDownLatch.await();\n        } finally {\n            executorService.shutdown();\n        }\n        assertEquals(cache.size(), size);\n        IntStream.range(0, size).forEach(i -> assertEquals(\"value\" + i, cache.get(i).get()));\n    }\n}\n"}
{"code_source": "package com.baeldung.minmaxheap;\n\nimport java.util.*;\n\n/**\n * Created by arash on 15.06.21.\n */\n\npublic class MinMaxHeap<T extends Comparable<T>> {\n    private List<T> array;\n    private int capacity;\n    private int indicator;\n\n    MinMaxHeap(int capacity) {\n        array = new ArrayList<>();\n        this.capacity = capacity;\n        indicator = 1;\n    }\n\n    MinMaxHeap(List<T> array) {\n        this.array = array;\n        this.capacity = array.size();\n        this.indicator = array.size() + 1;\n    }\n\n    public List<T> getMinMaxHeap() {\n        return array;\n    }\n\n    public List<T> create() {\n        for (int i = Math.floorDiv(array.size(), 2); i >= 1; i--) {\n            pushDown(array, i);\n        }\n        return array;\n    }\n\n    private void pushDown(List<T> array, int i) {\n        if (isEvenLevel(i)) {\n            pushDownMin(array, i);\n        } else {\n            pushDownMax(array, i);\n        }\n    }\n\n    private void pushDownMin(List<T> h, int i) {\n        while (getLeftChildIndex(i) < indicator) {\n            int indexOfSmallest = getIndexOfSmallestChildOrGrandChild(h, i);\n            if (h.get(indexOfSmallest - 1).compareTo(h.get(i - 1)) < 0) {\n                if (getParentIndex(getParentIndex(indexOfSmallest)) == i) {\n                    if (h.get(indexOfSmallest - 1).compareTo(h.get(i - 1)) < 0) {\n                        swap(indexOfSmallest - 1, i - 1, h);\n                        if (h.get(indexOfSmallest - 1).compareTo(h.get(getParentIndex(indexOfSmallest) - 1)) > 0) {\n                            swap(indexOfSmallest - 1, getParentIndex(indexOfSmallest) - 1, h);\n                        }\n                    }\n                } else if (h.get(indexOfSmallest - 1).compareTo(h.get(i - 1)) < 0) {\n                    swap(indexOfSmallest - 1, i - 1, h);\n                }\n            } else {\n                break;\n            }\n            i = indexOfSmallest;\n        }\n    }\n\n    private void pushDownMax(List<T> h, int i) {\n        while (getLeftChildIndex(i) < indicator) {\n            int indexOfGreatest = getIndexOfGreatestChildOrGrandChild(h, i);\n            if (h.get(indexOfGreatest - 1).compareTo(h.get(i - 1)) > 0) {\n                if (getParentIndex(getParentIndex(indexOfGreatest)) == i) {\n                    if (h.get(indexOfGreatest - 1).compareTo(h.get(i - 1)) > 0) {\n                        swap(indexOfGreatest - 1, i - 1, h);\n                        if (h.get(indexOfGreatest - 1).compareTo(h.get(getParentIndex(indexOfGreatest) - 1)) < 0) {\n                            swap(indexOfGreatest - 1, getParentIndex(indexOfGreatest) - 1, h);\n                        }\n                    }\n                } else if (h.get(indexOfGreatest - 1).compareTo(h.get(i - 1)) > 0) {\n                    swap(indexOfGreatest - 1, i - 1, h);\n                }\n            } else {\n                break;\n            }\n            i = indexOfGreatest;\n        }\n    }\n\n    private void swap(int i, int j, List<T> h) {    //switch data at x with data at y\n        T temp = h.get(i);\n        h.set(i, h.get(j));\n        h.set(j, temp);\n    }\n\n    private int getLeftChildIndex(int i) {\n        return 2 * i;\n    }\n\n    private int getRightChildIndex(int i) {\n        return ((2 * i) + 1);\n    }\n\n    private int getParentIndex(int i) {\n        return i / 2;\n    }\n\n    private int getGrandparentIndex(int i) {\n        return i / 4;\n    }\n\n    private boolean isEvenLevel(int i) {\n        return logBase2(i) % 2 == 0;\n    }\n\n    private int logBase2(int num) {\n        return (int) (Math.log(num) / Math.log(2));\n    }\n\n    private int getMinChildIndex(int i) {\n        return array.get(getLeftChildIndex(i)).compareTo(array.get(getRightChildIndex(i))) < 0 ? getLeftChildIndex(i) : getRightChildIndex(i);\n    }\n\n    private int getMaxChildIndex(int i) {\n        return array.get(getLeftChildIndex(i)).compareTo(array.get(getRightChildIndex(i))) > 0 ? getLeftChildIndex(i) : getRightChildIndex(i);\n    }\n\n    private int getIndexOfSmallestChildOrGrandChild(List<T> h, int i) {\n        int minIndex = getLeftChildIndex(i);\n        T minValue = h.get(minIndex - 1);\n\n        if (getRightChildIndex(i) < indicator) {\n            if (h.get(getRightChildIndex(i) - 1).compareTo(minValue) < 0) {\n                minValue = h.get(getRightChildIndex(i));\n                minIndex = getRightChildIndex(i);\n            }\n        } else {\n            return minIndex;\n        }\n\n        if (getLeftChildIndex(getLeftChildIndex(i)) < indicator) {\n            if (h.get(getLeftChildIndex(getLeftChildIndex(i)) - 1).compareTo(minValue) < 0) {\n                minValue = h.get(getLeftChildIndex(getLeftChildIndex(i)) - 1);\n                minIndex = getLeftChildIndex(getLeftChildIndex(i));\n            }\n        } else {\n            return minIndex;    //if no leftmost grandchild\n        }\n\n        if (getRightChildIndex(getLeftChildIndex(i)) < indicator) {\n            if (h.get(getRightChildIndex(getLeftChildIndex(i)) - 1).compareTo(minValue) < 0) {\n                minValue = h.get(getRightChildIndex(getLeftChildIndex(i)) - 1);\n                minIndex = getRightChildIndex(getLeftChildIndex(i));\n            }\n        } else {\n            return minIndex; //if no left-right grandchild\n        }\n\n        if (getLeftChildIndex(getRightChildIndex(i)) < indicator) {\n            if (h.get(getLeftChildIndex(getRightChildIndex(i)) - 1).compareTo(minValue) < 0) {\n                minValue = h.get(getLeftChildIndex(getRightChildIndex(i)) - 1);\n                minIndex = getLeftChildIndex(getRightChildIndex(i));\n            }\n        } else {\n            return minIndex; //if no right-left grandchild\n        }\n\n        if (getRightChildIndex(getRightChildIndex(i)) < indicator) {\n            if (h.get(getRightChildIndex(getRightChildIndex(i)) - 1).compareTo(minValue) < 0) {\n                minValue = h.get(getRightChildIndex(getRightChildIndex(i)) - 1);\n                minIndex = getRightChildIndex(getRightChildIndex(i));\n            }\n        } else {\n            return minIndex;\n        }\n\n        return minIndex;\n    }\n\n    private int getIndexOfGreatestChildOrGrandChild(List<T> h, int i) {\n        int maxIndex = getLeftChildIndex(i);    //we know left child exists\n        T maxValue = h.get(maxIndex - 1);\n\n        if (getRightChildIndex(i) < indicator) {\n            if (h.get(getRightChildIndex(i) - 1).compareTo(maxValue) > 0) {\n                maxValue = h.get(getRightChildIndex(i) - 1);\n                maxIndex = getRightChildIndex(i);\n            }\n        } else {\n            return maxIndex;\n        }\n\n        if (getLeftChildIndex(getLeftChildIndex(i)) < indicator) {\n            if (h.get(getLeftChildIndex(getLeftChildIndex(i)) - 1).compareTo(maxValue) > 0) {\n                maxValue = h.get(getLeftChildIndex(getLeftChildIndex(i)) - 1);\n                maxIndex = getLeftChildIndex(getLeftChildIndex(i));\n            }\n        } else {\n            return maxIndex; //if no leftmost grandchild\n        }\n\n        if (getRightChildIndex(getLeftChildIndex(i)) < indicator) {\n            if (h.get(getRightChildIndex(getLeftChildIndex(i)) - 1).compareTo(maxValue) > 0) {\n                maxValue = h.get(getRightChildIndex(getLeftChildIndex(i)) - 1);\n                maxIndex = getRightChildIndex(getLeftChildIndex(i));\n            }\n        } else {\n            return maxIndex; //if no left-right grandchild\n        }\n\n        if (getLeftChildIndex(getRightChildIndex(i)) < indicator) {\n            if (h.get(getLeftChildIndex(getRightChildIndex(i)) - 1).compareTo(maxValue) > 0) {\n                maxValue = h.get(getLeftChildIndex(getRightChildIndex(i)) - 1);\n                maxIndex = getLeftChildIndex(getRightChildIndex(i));\n            }\n        } else {\n            return maxIndex;\n        }\n\n        if (getRightChildIndex(getRightChildIndex(i)) < indicator) {\n            if (h.get(getRightChildIndex(getRightChildIndex(i)) - 1).compareTo(maxValue) > 0) {\n                maxValue = h.get(getRightChildIndex(getRightChildIndex(i)) - 1);\n                maxIndex = getRightChildIndex(getRightChildIndex(i));\n            }\n        } else {\n            return maxIndex;\n        }\n\n        return maxIndex;\n    }\n\n\n    public boolean isFull() {\n        return indicator == this.capacity + 1;\n    }\n\n    public boolean isEmpty() {\n        return indicator == 1;\n    }\n\n    public void insert(T item) {\n        if (isEmpty()) {\n            array.add(item);\n            indicator++;\n        } else if (!isFull()) {\n            array.add(item);\n            pushUp(array, indicator);\n            indicator++;\n        } else {\n            throw new RuntimeException(\"invalid operation !!!\");\n        }\n    }\n\n    private void pushUpMin(List<T> h, int i) {\n        while (hasGrandparent(i) && h.get(i - 1).compareTo(h.get(getGrandparentIndex(i) - 1)) < 0) {\n            swap(i - 1, getGrandparentIndex(i) - 1, h);\n            i = getGrandparentIndex(i);\n        }\n    }\n\n    private void pushUpMax(List<T> h, int i) {\n        while (hasGrandparent(i) && h.get(i - 1).compareTo(h.get(getGrandparentIndex(i) - 1)) > 0) {\n            swap(i - 1, getGrandparentIndex(i) - 1, h);\n            i = getGrandparentIndex(i);\n        }\n    }\n\n    private boolean hasGrandparent(int i) {\n        return getParentIndex(i) > 1;\n    }\n\n    private void pushUp(List<T> h, int i) {\n        if (i != 1) {\n            if (isEvenLevel(i)) {\n                if (h.get(i - 1).compareTo(h.get(getParentIndex(i) - 1)) < 0) {\n                    pushUpMin(h, i);\n                } else {\n                    swap(i - 1, getParentIndex(i) - 1, h);\n                    i = getParentIndex(i);\n                    pushUpMax(h, i);\n                }\n            } else if (h.get(i - 1).compareTo(h.get(getParentIndex(i) - 1)) > 0) {\n                pushUpMax(h, i);\n            } else {\n                swap(i - 1, getParentIndex(i) - 1, h);\n                i = getParentIndex(i);\n                pushUpMin(h, i);\n            }\n        }\n    }\n\n    public T min() {\n        if (!isEmpty()) {\n            return array.get(0);\n        }\n        return null;\n    }\n\n    public T max() {\n        if (!isEmpty()) {\n            if (indicator == 2) {\n                return array.get(0);\n            }\n            if (indicator == 3) {\n                return array.get(1);\n            }\n            return array.get(1).compareTo(array.get(2)) < 0 ? array.get(2) : array.get(1);\n        }\n        return null;\n    }\n\n    public T removeMin() {\n        T min = min();\n        if (min != null) {\n            if (indicator == 2) {\n                array.remove(indicator--);\n                return min;\n            }\n            array.set(0, array.get(--indicator - 1));\n            array.remove(indicator - 1);\n            pushDown(array, 1);\n        }\n        return min;\n    }\n\n    public T removeMax() {\n        T max = max();\n        if (max != null) {\n            int maxIndex;\n            if (indicator == 2) {\n                maxIndex = 0;\n                array.remove(--indicator - 1);\n                return max;\n            } else if (indicator == 3) {\n                maxIndex = 1;\n                array.remove(--indicator - 1);\n                return max;\n            } else {\n                maxIndex = array.get(1).compareTo(array.get(2)) < 0 ? 2 : 1;\n            }\n            array.set(maxIndex, array.get(--indicator - 1));\n            array.remove(indicator - 1);\n            pushDown(array, maxIndex + 1);\n        }\n        return max;\n    }\n}\n", "test_case": "package com.baeldung.minmaxheap;\n\nimport org.junit.Assert;\nimport org.junit.Test;\nimport java.util.Arrays;\nimport java.util.List;\n\n\npublic class MinMaxHeapUnitTest {\n\n    @Test\n    public void givenUnOrderedArray_WhenCreateMinMaxHeap_ThenIsEqualWithMinMaxHeapOrdered() {\n        List<Integer> list = Arrays.asList(34, 12, 28, 9, 30, 19, 1, 40);\n        MinMaxHeap<Integer> minMaxHeap = new MinMaxHeap<>(list);\n        minMaxHeap.create();\n        Assert.assertEquals(Arrays.asList(1, 40, 34, 9, 30, 19, 28, 12), list);\n    }\n\n    @Test\n    public void givenNewElement_WhenInserted_ThenIsEqualWithMinMaxHeapOrdered() {\n        MinMaxHeap<Integer> minMaxHeap = new MinMaxHeap(8);\n        minMaxHeap.insert(34);\n        minMaxHeap.insert(12);\n        minMaxHeap.insert(28);\n        minMaxHeap.insert(9);\n        minMaxHeap.insert(30);\n        minMaxHeap.insert(19);\n        minMaxHeap.insert(1);\n        minMaxHeap.insert(40);\n        Assert.assertEquals(Arrays.asList(1, 40, 28, 12, 30, 19, 9, 34), minMaxHeap.getMinMaxHeap());\n    }\n}\n"}
{"code_source": "package com.baeldung.trie;\n\nclass Trie {\n    private TrieNode root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(String word) {\n        TrieNode current = root;\n\n        for (char l : word.toCharArray()) {\n            current = current.getChildren().computeIfAbsent(l, c -> new TrieNode());\n        }\n        current.setEndOfWord(true);\n    }\n\n    boolean delete(String word) {\n        return delete(root, word, 0);\n    }\n\n    boolean containsNode(String word) {\n        TrieNode current = root;\n\n        for (int i = 0; i < word.length(); i++) {\n            char ch = word.charAt(i);\n            TrieNode node = current.getChildren().get(ch);\n            if (node == null) {\n                return false;\n            }\n            current = node;\n        }\n        return current.isEndOfWord();\n    }\n\n    boolean isEmpty() {\n        return root == null;\n    }\n\n    private boolean delete(TrieNode current, String word, int index) {\n        if (index == word.length()) {\n            if (!current.isEndOfWord()) {\n                return false;\n            }\n            current.setEndOfWord(false);\n            return current.getChildren().isEmpty();\n        }\n        char ch = word.charAt(index);\n        TrieNode node = current.getChildren().get(ch);\n        if (node == null) {\n            return false;\n        }\n        boolean shouldDeleteCurrentNode = delete(node, word, index + 1) && !node.isEndOfWord();\n\n        if (shouldDeleteCurrentNode) {\n            current.getChildren().remove(ch);\n            return current.getChildren().isEmpty();\n        }\n        return false;\n    }\n}\n", "test_case": "package com.baeldung.trie;\n\nimport org.junit.Test;\nimport org.junit.jupiter.api.Assertions;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\npublic class TrieUnitTest {\n\n    @Test\n    public void whenEmptyTrie_thenNoElements() {\n        Trie trie = new Trie();\n\n        assertFalse(trie.isEmpty());\n    }\n\n    @Test\n    public void givenATrie_whenAddingElements_thenTrieNotEmpty() {\n        Trie trie = createExampleTrie();\n\n        assertFalse(trie.isEmpty());\n    }\n\n    @Test\n    public void givenATrie_whenAddingElements_thenTrieHasThoseElements() {\n        Trie trie = createExampleTrie();\n\n        assertFalse(trie.containsNode(\"3\"));\n        assertFalse(trie.containsNode(\"vida\"));\n\n        assertTrue(trie.containsNode(\"Programming\"));\n        assertTrue(trie.containsNode(\"is\"));\n        assertTrue(trie.containsNode(\"a\"));\n        assertTrue(trie.containsNode(\"way\"));\n        assertTrue(trie.containsNode(\"of\"));\n        assertTrue(trie.containsNode(\"life\"));\n    }\n\n    @Test\n    public void givenATrie_whenLookingForNonExistingElement_thenReturnsFalse() {\n        Trie trie = createExampleTrie();\n\n        assertFalse(trie.containsNode(\"99\"));\n    }\n\n    @Test\n    public void givenATrie_whenDeletingElements_thenTreeDoesNotContainThoseElements() {\n\n        Trie trie = createExampleTrie();\n\n        assertTrue(trie.containsNode(\"Programming\"));\n        trie.delete(\"Programming\");\n        assertFalse(trie.containsNode(\"Programming\"));\n    }\n\n    @Test\n    public void givenATrie_whenDeletingOverlappingElements_thenDontDeleteSubElement() {\n\n        Trie trie1 = new Trie();\n\n        trie1.insert(\"pie\");\n        trie1.insert(\"pies\");\n\n        trie1.delete(\"pies\");\n\n        Assertions.assertTrue(trie1.containsNode(\"pie\"));\n    }\n\n    private Trie createExampleTrie() {\n        Trie trie = new Trie();\n\n        trie.insert(\"Programming\");\n        trie.insert(\"is\");\n        trie.insert(\"a\");\n        trie.insert(\"way\");\n        trie.insert(\"of\");\n        trie.insert(\"life\");\n\n        return trie;\n    }\n}\n"}
{"code_source": "package com.baeldung.dddhexagonalspring.domain.service;\n\nimport com.baeldung.dddhexagonalspring.domain.Product;\n\nimport java.util.UUID;\n\npublic interface OrderService {\n    UUID createOrder(Product product);\n\n    void addProduct(UUID id, Product product);\n\n    void completeOrder(UUID id);\n\n    void deleteProduct(UUID id, UUID productId);\n}\n", "test_case": "package com.baeldung.dddhexagonalspring.domain.service;\n\nimport com.baeldung.dddhexagonalspring.domain.Order;\nimport com.baeldung.dddhexagonalspring.domain.OrderProvider;\nimport com.baeldung.dddhexagonalspring.domain.Product;\nimport com.baeldung.dddhexagonalspring.domain.repository.OrderRepository;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.function.Executable;\n\nimport java.math.BigDecimal;\nimport java.util.Optional;\nimport java.util.UUID;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\nclass DomainOrderServiceUnitTest {\n\n    private OrderRepository orderRepository;\n    private DomainOrderService tested;\n\n    @BeforeEach\n    void setUp() {\n        orderRepository = mock(OrderRepository.class);\n        tested = new DomainOrderService(orderRepository);\n    }\n\n    @Test\n    void shouldCreateOrder_thenSaveIt() {\n        final Product product = new Product(UUID.randomUUID(), BigDecimal.TEN, \"productName\");\n\n        final UUID id = tested.createOrder(product);\n\n        verify(orderRepository).save(any(Order.class));\n        assertNotNull(id);\n    }\n\n    @Test\n    void shouldAddProduct_thenSaveOrder() {\n        final Order order = spy(OrderProvider.getCreatedOrder());\n        final Product product = new Product(UUID.randomUUID(), BigDecimal.TEN, \"test\");\n        when(orderRepository.findById(order.getId())).thenReturn(Optional.of(order));\n\n        tested.addProduct(order.getId(), product);\n\n        verify(orderRepository).save(order);\n        verify(order).addOrder(product);\n    }\n\n    @Test\n    void shouldAddProduct_thenThrowException() {\n        final Product product = new Product(UUID.randomUUID(), BigDecimal.TEN, \"test\");\n        final UUID id = UUID.randomUUID();\n        when(orderRepository.findById(id)).thenReturn(Optional.empty());\n\n        final Executable executable = () -> tested.addProduct(id, product);\n\n        verify(orderRepository, times(0)).save(any(Order.class));\n        assertThrows(RuntimeException.class, executable);\n    }\n\n    @Test\n    void shouldCompleteOrder_thenSaveIt() {\n        final Order order = spy(OrderProvider.getCreatedOrder());\n        when(orderRepository.findById(order.getId())).thenReturn(Optional.of(order));\n\n        tested.completeOrder(order.getId());\n\n        verify(orderRepository).save(any(Order.class));\n        verify(order).complete();\n    }\n\n    @Test\n    void shouldDeleteProduct_thenSaveOrder() {\n        final Order order = spy(OrderProvider.getCreatedOrder());\n        final UUID productId = order\n          .getOrderItems()\n          .get(0)\n          .getProductId();\n\n        when(orderRepository.findById(order.getId())).thenReturn(Optional.of(order));\n\n        tested.deleteProduct(order.getId(), productId);\n\n        verify(orderRepository).save(order);\n        verify(order).removeOrder(productId);\n    }\n}"}
{"code_source": "package com.baeldung.dddhexagonalspring.infrastracture.repository.cassandra;\n\nimport java.util.Optional;\nimport java.util.UUID;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport com.baeldung.dddhexagonalspring.domain.Order;\nimport com.baeldung.dddhexagonalspring.domain.repository.OrderRepository;\n\n@Component\npublic class CassandraDbOrderRepository implements OrderRepository {\n\n    private final SpringDataCassandraOrderRepository orderRepository;\n\n    @Autowired\n    public CassandraDbOrderRepository(SpringDataCassandraOrderRepository orderRepository) {\n        this.orderRepository = orderRepository;\n    }\n\n    @Override\n    public Optional<Order> findById(UUID id) {\n        Optional<OrderEntity> orderEntity = orderRepository.findById(id);\n        if (orderEntity.isPresent()) {\n            return Optional.of(orderEntity.get()\n                .toOrder());\n        } else {\n            return Optional.empty();\n        }\n    }\n\n    @Override\n    public void save(Order order) {\n        orderRepository.save(new OrderEntity(order));\n    }\n\n}\n", "test_case": "package com.baeldung.dddhexagonalspring.infrastracture.repository;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.math.BigDecimal;\nimport java.util.Optional;\nimport java.util.UUID;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.TestPropertySource;\nimport org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n\nimport com.baeldung.dddhexagonalspring.domain.Order;\nimport com.baeldung.dddhexagonalspring.domain.Product;\nimport com.baeldung.dddhexagonalspring.domain.repository.OrderRepository;\nimport com.baeldung.dddhexagonalspring.infrastracture.repository.cassandra.SpringDataCassandraOrderRepository;\n\n/*\n To run this test we need to run the databases first.\n A dedicated docker-compose.yml file is located under the resources directory.\n We can run it by simple executing `docker-compose up`.\n */\n@SpringJUnitConfig\n@SpringBootTest\n@TestPropertySource(\"classpath:ddd-layers-test.properties\")\nclass CassandraDbOrderRepositoryLiveTest {\n\n    @Autowired\n    private SpringDataCassandraOrderRepository cassandraOrderRepository;\n\n    @Autowired\n    private OrderRepository orderRepository;\n\n    @AfterEach\n    void cleanUp() {\n        cassandraOrderRepository.deleteAll();\n    }\n\n    @Test\n    void shouldFindById_thenReturnOrder() {\n\n        // given\n        final UUID id = UUID.randomUUID();\n        final Order order = createOrder(id);\n        order.addOrder(new Product(UUID.randomUUID(), BigDecimal.TEN, \"second\"));\n        order.complete();\n\n        // when\n        orderRepository.save(order);\n\n        final Optional<Order> result = orderRepository.findById(id);\n\n        assertEquals(order, result.get());\n    }\n\n    private Order createOrder(UUID id) {\n        return new Order(id, new Product(UUID.randomUUID(), BigDecimal.TEN, \"product\"));\n    }\n}"}
{"code_source": "package com.baeldung.testing.easymock;\n\nimport java.math.BigDecimal;\n\npublic class ForecastProcessor {\n    private WeatherService weatherService;\n    \n    public BigDecimal getMaximumTemperature(String locationName) {\n        \n        Location location = new Location(locationName);\n        \n        try {\n            weatherService.populateTemperature(location);\n        } catch (ServiceUnavailableException e) {\n           return null;\n        }\n        \n        return location.getMaximumTemparature();\n    }\n\n    public WeatherService getWeatherService() {\n        return weatherService;\n    }\n\n    public void setWeatherService(WeatherService weatherService) {\n        this.weatherService = weatherService;\n    }    \n}\n", "test_case": "package com.baeldung.testing.easymock;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.junit.Assert.assertThat;\n\nimport java.math.BigDecimal;\n\nimport org.easymock.EasyMock;\nimport org.easymock.EasyMockRule;\nimport org.easymock.Mock;\nimport org.easymock.TestSubject;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\n\npublic class ForecastProcessorUnitTest {\n    private static int MAX_TEMP = 90;\n    \n    @Rule\n    public EasyMockRule rule = new EasyMockRule(this);\n\n    @TestSubject\n    private ForecastProcessor forecastProcessor = new ForecastProcessor();\n\n    @Mock\n    private WeatherService mockWeatherService;\n\n    @Before\n    public void setUp() {\n        forecastProcessor.setWeatherService(mockWeatherService);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void givenLocationName_whenWeatherServicePopulatesTemperatures_thenMaxTempReturned() throws ServiceUnavailableException {\n        mockWeatherService.populateTemperature(EasyMock.anyObject(Location.class));\n        EasyMock.expectLastCall()\n            .andAnswer(() -> {\n                Location passedLocation = (Location) EasyMock.getCurrentArguments()[0]; \n                passedLocation.setMaximumTemparature(new BigDecimal(MAX_TEMP)); \n                passedLocation.setMinimumTemperature(new BigDecimal(MAX_TEMP - 10));\n                return null;\n            });\n        EasyMock.replay(mockWeatherService);\n        BigDecimal maxTemperature = forecastProcessor.getMaximumTemperature(\"New York\");\n        EasyMock.verify(mockWeatherService);\n        assertThat(maxTemperature, equalTo(new BigDecimal(MAX_TEMP)));\n    }\n}\n"}
{"code_source": "package com.baeldung.guava;\n\nimport com.google.common.base.Function;\n\nimport java.util.*;\n\npublic class GuavaMapFromSet<K, V> extends AbstractMap<K, V> {\n\n    private class SingleEntry implements Entry<K, V> {\n        private K key;\n\n        public SingleEntry(K key) {\n            this.key = key;\n        }\n\n        @Override\n        public K getKey() {\n            return this.key;\n        }\n\n        @Override\n        public V getValue() {\n            V value = GuavaMapFromSet.this.cache.get(this.key);\n            if (value == null) {\n                value = GuavaMapFromSet.this.function.apply(this.key);\n                GuavaMapFromSet.this.cache.put(this.key, value);\n            }\n            return value;\n        }\n\n        @Override\n        public V setValue(V value) {\n            throw new UnsupportedOperationException();\n        }\n    }\n\n    private class MyEntrySet extends AbstractSet<Entry<K, V>> {\n\n        public class EntryIterator implements Iterator<Entry<K, V>> {\n            private Iterator<K> inner;\n\n            public EntryIterator() {\n                this.inner = MyEntrySet.this.keys.iterator();\n            }\n\n            @Override\n            public boolean hasNext() {\n                return this.inner.hasNext();\n            }\n\n            @Override\n            public Map.Entry<K, V> next() {\n                K key = this.inner.next();\n                return new SingleEntry(key);\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        }\n\n        private Set<K> keys;\n\n        public MyEntrySet(Set<K> keys) {\n            this.keys = keys;\n        }\n\n        @Override\n        public Iterator<Map.Entry<K, V>> iterator() {\n            return new EntryIterator();\n        }\n\n        @Override\n        public int size() {\n            return this.keys.size();\n        }\n\n    }\n\n    private WeakHashMap<K, V> cache;\n    private Set<Entry<K, V>> entries;\n    private Function<? super K, ? extends V> function;\n\n    public GuavaMapFromSet(Set<K> keys, Function<? super K, ? extends V> function) {\n        this.function = function;\n        this.cache = new WeakHashMap<K, V>();\n        this.entries = new MyEntrySet(keys);\n    }\n\n    @Override\n    public Set<Map.Entry<K, V>> entrySet() {\n        return this.entries;\n    }\n\n}\n", "test_case": "package com.baeldung.guava;\n\nimport com.google.common.base.Function;\nimport org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.TreeSet;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class GuavaMapFromSetUnitTest {\n\n    @Test\n    public void givenStringSet_whenMapsToElementLength_thenCorrect() {\n        Function<Integer, String> function = new Function<Integer, String>() {\n            @Override\n            public String apply(Integer from) {\n                return Integer.toBinaryString(from);\n            }\n        };\n        Set<Integer> set = new TreeSet<>(Arrays.asList(32, 64, 128));\n        Map<Integer, String> map = new GuavaMapFromSet<Integer, String>(set, function);\n        assertTrue(map.get(32).equals(\"100000\")\n                && map.get(64).equals(\"1000000\")\n                && map.get(128).equals(\"10000000\"));\n    }\n\n    @Test\n    public void givenIntSet_whenMapsToElementBinaryValue_thenCorrect() {\n        Function<String, Integer> function = new Function<String, Integer>() {\n\n            @Override\n            public Integer apply(String from) {\n                return from.length();\n            }\n        };\n        Set<String> set = new TreeSet<>(Arrays.asList(\n                \"four\", \"three\", \"twelve\"));\n        Map<String, Integer> map = new GuavaMapFromSet<String, Integer>(set,\n                function);\n        assertTrue(map.get(\"four\") == 4 && map.get(\"three\") == 5\n                && map.get(\"twelve\") == 6);\n    }\n\n    @Test\n    public void givenSet_whenNewSetElementAddedAndMappedLive_thenCorrect() {\n        Function<String, Integer> function = new Function<String, Integer>() {\n\n            @Override\n            public Integer apply(String from) {\n                return from.length();\n            }\n        };\n        Set<String> set = new TreeSet<>(Arrays.asList(\n                \"four\", \"three\", \"twelve\"));\n        Map<String, Integer> map = new GuavaMapFromSet<String, Integer>(set,\n                function);\n        set.add(\"one\");\n        assertTrue(map.get(\"one\") == 3 && map.size() == 4);\n    }\n}\n"}
{"code_source": "package com.baeldung.hazelcast.jet;\n\nimport com.hazelcast.jet.Jet;\nimport com.hazelcast.jet.JetInstance;\nimport com.hazelcast.jet.pipeline.Pipeline;\nimport com.hazelcast.jet.pipeline.Sinks;\nimport com.hazelcast.jet.pipeline.Sources;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport static com.hazelcast.function.Functions.wholeItem;\nimport static com.hazelcast.jet.Traversers.traverseArray;\nimport static com.hazelcast.jet.aggregate.AggregateOperations.counting;\n\npublic class WordCounter {\n\n    private static final String LIST_NAME = \"textList\";\n    private static final String MAP_NAME = \"countMap\";\n\n    private Pipeline createPipeLine() {\n        Pipeline p = Pipeline.create();\n        p.readFrom(Sources.<String>list(LIST_NAME))\n            .flatMap(word -> traverseArray(word.toLowerCase().split(\"\\\\W+\")))\n            .filter(word -> !word.isEmpty())\n            .groupingKey(wholeItem())\n            .aggregate(counting())\n            .writeTo(Sinks.map(MAP_NAME));\n        return p;\n    }\n\n    public Long countWord(List<String> sentences, String word) {\n        long count = 0;\n        JetInstance jet = Jet.newJetInstance();\n        try {\n            List<String> textList = jet.getList(LIST_NAME);\n            textList.addAll(sentences);\n            Pipeline p = createPipeLine();\n            jet.newJob(p).join();\n            Map<String, Long> counts = jet.getMap(MAP_NAME);\n            count = counts.get(word);\n        } finally {\n            Jet.shutdownAll();\n        }\n        return count;\n    }\n\n}\n", "test_case": "package com.baeldung.hazelcast.jet;\n\nimport org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class WordCounterUnitTest {\n\n    @Test\n    public void whenGivenSentencesAndWord_ThenReturnCountOfWord() {\n        List<String> sentences = new ArrayList<>();\n        sentences.add(\"The first second was alright, but the second second was tough.\");\n        WordCounter wordCounter = new WordCounter();\n        long countSecond = wordCounter.countWord(sentences, \"second\");\n        assertEquals(3, countSecond);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.image.resize.core;\n\nimport java.awt.Graphics2D;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\n\nimport javax.imageio.ImageIO;\n\npublic class Graphics2DExample {\n\n    static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) {\n        BufferedImage resizedImage = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_RGB);\n        Graphics2D graphics2D = resizedImage.createGraphics();\n        graphics2D.drawImage(originalImage, 0, 0, targetWidth, targetHeight, null);\n        graphics2D.dispose();\n        return resizedImage;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = resizeImage(originalImage, 200, 200);\n        ImageIO.write(outputImage, \"jpg\", new File(\"src/main/resources/images/sampleImage-resized-graphics2d.jpg\"));\n    }\n}\n", "test_case": "package com.baeldung.image.resize.core;\n\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotEquals;\n\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\n\nimport javax.imageio.ImageIO;\n\nimport org.junit.Test;\n\npublic class Graphics2DExampleUnitTest {\n\n    @Test(expected = Test.None.class)\n    public void whenOriginalImageExistsAndTargetSizesAreNotZero_thenImageGeneratedWithoutError() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 200;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = Graphics2DExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertNotNull(outputImage);\n    }\n\n    @Test(expected = Test.None.class)\n    public void whenOriginalImageExistsAndTargetSizesAreNotZero_thenOutputImageSizeIsValid() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 200;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        assertNotEquals(originalImage.getWidth(), targetWidth);\n        assertNotEquals(originalImage.getHeight(), targetHeight);\n        BufferedImage outputImage = Graphics2DExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertEquals(outputImage.getWidth(), targetWidth);\n        assertEquals(outputImage.getHeight(), targetHeight);\n    }\n\n    @Test(expected = Exception.class)\n    public void whenTargetWidthIsZero_thenErrorIsThrown() throws IOException {\n        int targetWidth = 0;\n        int targetHeight = 200;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = Graphics2DExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertNull(outputImage);\n    }\n\n    @Test(expected = Exception.class)\n    public void whenTargetHeightIsZero_thenErrorIsThrown() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 0;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = Graphics2DExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertNull(outputImage);\n    }\n\n    @Test(expected = Test.None.class)\n    public void whenOriginalImageDoesNotExist_thenErrorIsNotThrownAndImageIsGenerated() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 200;\n        BufferedImage outputImage = Graphics2DExample.resizeImage(null, targetWidth, targetHeight);\n\n        assertNotNull(outputImage);\n        assertEquals(outputImage.getWidth(), targetWidth);\n        assertEquals(outputImage.getHeight(), targetHeight);\n    }\n}\n"}
{"code_source": "package com.baeldung.image.resize.core;\n\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\n\nimport javax.imageio.ImageIO;\n\npublic class ImageScaledInstanceExample {\n    static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) {\n        Image resultingImage = originalImage.getScaledInstance(targetWidth, targetHeight, Image.SCALE_DEFAULT);\n        BufferedImage bufferedImage = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_RGB);\n        bufferedImage.getGraphics()\n            .drawImage(resultingImage, 0, 0, null);\n        return bufferedImage;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = resizeImage(originalImage, 200, 200);\n        ImageIO.write(outputImage, \"jpg\", new File(\"src/main/resources/images/sampleImage-resized-scaledinstance.jpg\"));\n    }\n}\n", "test_case": "package com.baeldung.image.resize.core;\n\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotEquals;\n\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\n\nimport javax.imageio.ImageIO;\n\nimport org.junit.Test;\n\npublic class ImageScaledInstanceExampleUnitTest {\n\n    @Test(expected = Test.None.class)\n    public void whenOriginalImageExistsAndTargetSizesAreNotZero_thenImageGeneratedWithoutError() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 200;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = ImageScaledInstanceExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertNotNull(outputImage);\n    }\n\n    @Test(expected = Test.None.class)\n    public void whenOriginalImageExistsAndTargetSizesAreNotZero_thenOutputImageSizeIsValid() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 200;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        assertNotEquals(originalImage.getWidth(), targetWidth);\n        assertNotEquals(originalImage.getHeight(), targetHeight);\n        BufferedImage outputImage = ImageScaledInstanceExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertEquals(outputImage.getWidth(), targetWidth);\n        assertEquals(outputImage.getHeight(), targetHeight);\n    }\n\n    @Test(expected = Exception.class)\n    public void whenTargetWidthIsZero_thenErrorIsThrown() throws IOException {\n        int targetWidth = 0;\n        int targetHeight = 200;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = ImageScaledInstanceExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertNull(outputImage);\n    }\n\n    @Test(expected = Exception.class)\n    public void whenTargetHeightIsZero_thenErrorIsThrown() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 0;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = ImageScaledInstanceExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertNull(outputImage);\n    }\n\n    @Test(expected = Exception.class)\n    public void whenOriginalImageDoesNotExist_thenErrorIsThrown() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 200;\n        BufferedImage outputImage = ImageScaledInstanceExample.resizeImage(null, targetWidth, targetHeight);\n\n        assertNull(outputImage);\n    }\n}\n"}
{"code_source": "package com.baeldung.image.resize.imgscalr;\n\nimport java.awt.image.BufferedImage;\nimport java.io.File;\n\nimport javax.imageio.ImageIO;\n\nimport org.imgscalr.Scalr;\n\npublic class ImgscalrExample {\n    public static BufferedImage simpleResizeImage(BufferedImage originalImage, int targetWidth) {\n        return Scalr.resize(originalImage, targetWidth);\n    }\n\n    public static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) {\n        return Scalr.resize(originalImage, Scalr.Method.AUTOMATIC, Scalr.Mode.AUTOMATIC, targetWidth, targetHeight, Scalr.OP_ANTIALIAS);\n    }\n\n    public static void main(String[] args) throws Exception {\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = resizeImage(originalImage, 200, 200);\n        ImageIO.write(outputImage, \"jpg\", new File(\"src/main/resources/images/sampleImage-resized-imgscalr.jpg\"));\n    }\n}\n", "test_case": "package com.baeldung.image.resize.imgscalr;\n\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotEquals;\n\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\n\nimport javax.imageio.ImageIO;\n\nimport org.junit.Test;\n\npublic class ImgscalrExampleUnitTest {\n\n    @Test(expected = Test.None.class)\n    public void whenOriginalImageExistsAndTargetSizesAreNotZero_thenImageGeneratedWithoutError() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 200;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = ImgscalrExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertNotNull(outputImage);\n    }\n\n    @Test(expected = Test.None.class)\n    public void whenOriginalImageExistsAndTargetSizesAreNotZero_thenOutputImageSizeIsValid() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 200;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        assertNotEquals(originalImage.getWidth(), targetWidth);\n        assertNotEquals(originalImage.getHeight(), targetHeight);\n        BufferedImage outputImage = ImgscalrExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertEquals(outputImage.getWidth(), targetWidth);\n        assertEquals(outputImage.getHeight(), targetHeight);\n    }\n\n    @Test(expected = Test.None.class)\n    public void whenTargetWidthIsZero_thenImageIsCreated() throws IOException {\n        int targetWidth = 0;\n        int targetHeight = 200;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = ImgscalrExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertNotNull(outputImage);\n    }\n\n    @Test(expected = Test.None.class)\n    public void whenTargetHeightIsZero_thenImageIsCreated() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 0;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = ImgscalrExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertNotNull(outputImage);\n    }\n\n    @Test(expected = Exception.class)\n    public void whenOriginalImageDoesNotExist_thenErrorIsThrown() {\n        int targetWidth = 200;\n        int targetHeight = 200;\n        BufferedImage outputImage = ImgscalrExample.resizeImage(null, targetWidth, targetHeight);\n\n        assertNull(outputImage);\n    }\n}\n"}
{"code_source": "package com.baeldung.imagefromwebcam;\n\nimport marvin.gui.MarvinImagePanel;\nimport marvin.image.MarvinImage;\nimport marvin.io.MarvinImageIO;\nimport marvin.video.MarvinJavaCVAdapter;\nimport marvin.video.MarvinVideoInterface;\nimport marvin.video.MarvinVideoInterfaceException;\n\npublic class MarvinExample {\n\n    public static void main(String[] args) throws MarvinVideoInterfaceException {\n        MarvinVideoInterface videoAdapter = new MarvinJavaCVAdapter();\n        videoAdapter.connect(0);\n        MarvinImage image = videoAdapter.getFrame();\n        MarvinImageIO.saveImage(image, \"selfie.jpg\");\n    }\n\n    public void captureWithPanel() throws MarvinVideoInterfaceException {\n        MarvinVideoInterface videoAdapter = new MarvinJavaCVAdapter();\n        videoAdapter.connect(0);\n        MarvinImage image = videoAdapter.getFrame();\n\n        MarvinImagePanel imagePanel = new MarvinImagePanel();\n        imagePanel.setImage(image);\n\n        imagePanel.setSize(800,600);\n        imagePanel.setVisible(true);\n    }\n\n}\n", "test_case": "package com.baeldung.image.resize.marvin;\n\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotEquals;\n\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\n\nimport javax.imageio.ImageIO;\n\nimport org.junit.Test;\n\npublic class MarvinExampleUnitTest {\n    @Test(expected = Test.None.class)\n    public void whenOriginalImageExistsAndTargetSizesAreNotZero_thenImageGeneratedWithoutError() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 200;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = MarvinExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertNotNull(outputImage);\n    }\n\n    @Test(expected = Test.None.class)\n    public void whenOriginalImageExistsAndTargetSizesAreNotZero_thenOutputImageSizeIsValid() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 200;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        assertNotEquals(originalImage.getWidth(), targetWidth);\n        assertNotEquals(originalImage.getHeight(), targetHeight);\n        BufferedImage outputImage = MarvinExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertEquals(outputImage.getWidth(), targetWidth);\n        assertEquals(outputImage.getHeight(), targetHeight);\n    }\n\n    @Test(expected = Exception.class)\n    public void whenTargetWidthIsZero_thenErrorIsThrown() throws IOException {\n        int targetWidth = 0;\n        int targetHeight = 200;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = MarvinExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertNull(outputImage);\n    }\n\n    @Test(expected = Exception.class)\n    public void whenTargetHeightIsZero_thenErrorIsThrown() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 0;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = MarvinExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertNull(outputImage);\n    }\n\n    @Test(expected = Exception.class)\n    public void whenOriginalImageDoesNotExist_thenErrorIsThrown() {\n        int targetWidth = 200;\n        int targetHeight = 200;\n        BufferedImage outputImage = MarvinExample.resizeImage(null, targetWidth, targetHeight);\n\n        assertNull(outputImage);\n    }\n}\n"}
{"code_source": "package com.baeldung.image.resize.thumbnailator;\n\nimport java.awt.image.BufferedImage;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\n\nimport javax.imageio.ImageIO;\n\nimport net.coobird.thumbnailator.Thumbnails;\n\npublic class ThumbnailatorExample {\n    static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) throws IOException {\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        Thumbnails.of(originalImage)\n            .size(targetWidth, targetHeight)\n            .outputFormat(\"JPEG\")\n            .outputQuality(0.90)\n            .toOutputStream(outputStream);\n        byte[] data = outputStream.toByteArray();\n        ByteArrayInputStream inputStream = new ByteArrayInputStream(data);\n        return ImageIO.read(inputStream);\n    }\n\n    public static void main(String[] args) throws Exception {\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = resizeImage(originalImage, 200, 200);\n        ImageIO.write(outputImage, \"jpg\", new File(\"src/main/resources/images/sampleImage-resized-thumbnailator.jpg\"));\n    }\n}\n", "test_case": "package com.baeldung.image.resize.thumbnailator;\n\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotEquals;\n\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\n\nimport javax.imageio.ImageIO;\n\nimport org.junit.Test;\n\npublic class ThumbnailatorExampleUnitTest {\n    @Test(expected = Test.None.class)\n    public void whenOriginalImageExistsAndTargetSizesAreNotZero_thenImageGeneratedWithoutError() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 200;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = ThumbnailatorExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertNotNull(outputImage);\n    }\n\n    @Test(expected = Test.None.class)\n    public void whenOriginalImageExistsAndTargetSizesAreNotZero_thenOutputImageSizeIsValid() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 200;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        assertNotEquals(originalImage.getWidth(), targetWidth);\n        assertNotEquals(originalImage.getHeight(), targetHeight);\n        BufferedImage outputImage = ThumbnailatorExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertEquals(outputImage.getWidth(), targetWidth);\n        assertEquals(outputImage.getHeight(), targetHeight);\n    }\n\n    @Test(expected = Exception.class)\n    public void whenTargetWidthIsZero_thenErrorIsThrown() throws IOException {\n        int targetWidth = 0;\n        int targetHeight = 200;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = ThumbnailatorExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertNull(outputImage);\n    }\n\n    @Test(expected = Exception.class)\n    public void whenTargetHeightIsZero_thenErrorIsThrown() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 0;\n        BufferedImage originalImage = ImageIO.read(new File(\"src/main/resources/images/sampleImage.jpg\"));\n        BufferedImage outputImage = ThumbnailatorExample.resizeImage(originalImage, targetWidth, targetHeight);\n\n        assertNull(outputImage);\n    }\n\n    @Test(expected = Exception.class)\n    public void whenOriginalImageDoesNotExist_thenErrorIsThrown() throws IOException {\n        int targetWidth = 200;\n        int targetHeight = 200;\n        BufferedImage outputImage = ThumbnailatorExample.resizeImage(null, targetWidth, targetHeight);\n\n        assertNull(outputImage);\n    }\n}\n"}
{"code_source": "package com.baeldung.instancio.student.model;\n\n\nimport com.baeldung.instancio.util.PrettyToString;\n\nimport java.time.LocalDate;\nimport java.time.Year;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class Student {\n    private UUID id;\n    private String firstName;\n    private String lastName;\n    private LocalDate dateOfBirth;\n    private ContactInfo contactInfo;\n    private EmergencyContact emergencyContact;\n    private Year enrollmentYear;\n    private Map<Course, Grade> courseGrades;\n\n    public UUID getId() {\n        return id;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public LocalDate getDateOfBirth() {\n        return dateOfBirth;\n    }\n\n    public ContactInfo getContactInfo() {\n        return contactInfo;\n    }\n\n    public EmergencyContact getEmergencyContact() {\n        return emergencyContact;\n    }\n\n    public Year getEnrollmentYear() {\n        return enrollmentYear;\n    }\n\n    public Map<Course, Grade> getCourseGrades() {\n        return courseGrades;\n    }\n\n    @Override\n    public String toString() {\n        return PrettyToString.toPrettyString(this);\n    }\n}\n", "test_case": "package com.baeldung.instancio.basics;\n\nimport com.baeldung.instancio.student.model.Address;\nimport com.baeldung.instancio.student.model.ContactInfo;\nimport com.baeldung.instancio.student.model.Course;\nimport com.baeldung.instancio.student.model.Grade;\nimport com.baeldung.instancio.student.model.Phone;\nimport com.baeldung.instancio.student.model.Student;\nimport org.instancio.Instancio;\nimport org.instancio.Model;\nimport org.instancio.junit.InstancioExtension;\nimport org.instancio.junit.InstancioSource;\nimport org.instancio.junit.Seed;\nimport org.instancio.junit.WithSettings;\nimport org.instancio.settings.Keys;\nimport org.instancio.settings.Settings;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.junit.jupiter.params.ParameterizedTest;\n\nimport java.time.LocalDate;\nimport java.time.Year;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.instancio.Select.all;\nimport static org.instancio.Select.field;\n\n/**\n * Sample test class using Instancio to generate test objects.\n *\n * <p>Note: using {@link InstancioExtension} is optional. The extension adds support for:\n * <p>\n * - reporting seed value if a test fails\n * - {@link Seed} annotation for reproducing failed tests\n * - {@link WithSettings} for injecting custom settings, if needed\n */\n@ExtendWith(InstancioExtension.class)\nclass CreateStudentUnitTest {\n\n    /**\n     * Common settings to be used by all test methods.\n     */\n    @WithSettings\n    private static final Settings settings = Settings.create()\n            .set(Keys.COLLECTION_MAX_SIZE, 3);\n\n    /**\n     * A {@link Model} is a template for creating objects.\n     * Objects created from a model can be created as is, or customized, if needed.\n     */\n    private static Model<Student> studentModel() {\n        return Instancio.of(Student.class)\n                .generate(field(Student::getDateOfBirth), gen -> gen.temporal().localDate().past())\n                .generate(field(Student::getEnrollmentYear), gen -> gen.temporal().year().past())\n                .generate(field(ContactInfo::getEmail), gen -> gen.text().pattern(\"#a#a#a#a#a#a@example.com\"))\n                .generate(field(Phone::getCountryCode), gen -> gen.string().prefix(\"+\").digits().maxLength(2))\n                .withNullable(field(Student::getEmergencyContact))\n                .toModel();\n    }\n\n    private static void assertModelProperties(Student student) {\n        assertThat(student.getDateOfBirth()).isBefore(LocalDate.now());\n        assertThat(student.getEnrollmentYear()).isLessThan(Year.now());\n        assertThat(student.getContactInfo().getEmail()).matches(\"^[a-zA-Z0-9]+@example.com$\");\n        assertThat(student.getContactInfo().getPhones())\n                .extracting(Phone::getCountryCode)\n                .allSatisfy(countryCode -> assertThat(countryCode).matches(\"^\\\\+\\\\d\\\\d?$\"));\n    }\n\n    /**\n     * Generates random Student objects based on the Model.\n     */\n    @Test\n    void whenGivenAModel_thenShouldCreateAStudentBasedOnModel() {\n        Student student = Instancio.create(studentModel());\n\n        assertModelProperties(student);\n    }\n\n    /**\n     * Generate a list of international students based on the Model.\n     */\n    @Test\n    void whenGivenAModel_thenShouldCreateAListOfStudents() {\n        // Given\n        final int numberOfStudents = 100;\n        final List<String> countries = Arrays.asList(\n                \"China\", \"Germany\", \"India\", \"Poland\", \"Romania\", \"Sweden\", \"Switzerland\");\n\n        // When\n        List<Student> studentList = Instancio.ofList(studentModel())\n                .size(numberOfStudents)\n                .generate(field(Address::getCountry), gen -> gen.oneOf(countries))\n                .create();\n\n        // Then\n        assertThat(studentList).hasSize(numberOfStudents)\n                .allSatisfy(CreateStudentUnitTest::assertModelProperties)\n                .extracting(student -> student.getContactInfo().getAddress().getCountry())\n                .allSatisfy(country -> assertThat(country).isIn(countries));\n    }\n\n    /**\n     * Use the Model to create a student with a failed course.\n     * This test also demonstrates how Instancio can provide\n     * arguments to parameterized tests.\n     *\n     * @param failedCourse provided by Instancio\n     */\n    @InstancioSource\n    @ParameterizedTest\n    void whenGivenFailingGrade_thenStudentShouldHaveAFailedCourse(final Course failedCourse) {\n        // Given\n        final Model<Student> model = studentModel();\n        final Grade failingGrade = Grade.F;\n\n        // When\n        Student student = Instancio.of(model)\n                .generate(field(Student::getCourseGrades), gen -> gen.map().with(failedCourse, failingGrade))\n                .create();\n\n        // Then\n        Map<Course, Grade> courseGrades = student.getCourseGrades();\n        assertModelProperties(student);\n        assertThat(courseGrades).containsEntry(failedCourse, failingGrade);\n    }\n\n    /**\n     * Generate a student with only Grades A and/or B.\n     */\n    @Test\n    void whenGivenGoodGrades_thenCreatedStudentShouldHaveExpectedGrades() {\n        // Given\n        final int numOfCourses = 10;\n        final Grade[] grades = {Grade.A, Grade.B};\n\n        // When\n        Student student = Instancio.of(studentModel())\n                .generate(all(Grade.class), gen -> gen.oneOf(grades))\n                .generate(field(Student::getCourseGrades), gen -> gen.map().size(numOfCourses))\n                .create();\n\n        // Then\n        Map<Course, Grade> courseGrades = student.getCourseGrades();\n        assertModelProperties(student);\n        assertThat(courseGrades.values())\n                .hasSize(numOfCourses)\n                .containsAnyOf(grades)\n                .doesNotContain(Grade.C, Grade.D, Grade.F);\n    }\n\n    /**\n     * Generate String fields prefixed with the field's name.\n     */\n    @Test\n    void whenGivenCustomSettings_thenStudentShouldBeCreatedUsingTheSettings() {\n        // Given\n        Settings customSettings = Settings.create()\n                .set(Keys.STRING_FIELD_PREFIX_ENABLED, true);\n\n        // When\n        Student student = Instancio.of(studentModel())\n                .withSettings(customSettings)\n                .create();\n\n        // Then\n        assertThat(student.getFirstName()).startsWith(\"firstName_\");\n        assertThat(student.getLastName()).startsWith(\"lastName_\");\n        assertThat(student.getContactInfo().getAddress().getCity()).startsWith(\"city_\");\n    }\n}\n"}
{"code_source": "package com.baeldung.jackson.jsonurlreader;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.nio.charset.Charset;\n\nimport org.apache.commons.io.IOUtils;\nimport org.json.JSONObject;\n\nimport com.fasterxml.jackson.core.exc.StreamReadException;\nimport com.fasterxml.jackson.databind.DatabindException;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class JsonUrlReader {\n\n    public static void main(String[] args) throws StreamReadException, DatabindException, MalformedURLException, IOException {\n        String url = args[0];\n\n        JsonNode node = JsonUrlReader.get(url);\n        System.out.println(node.toPrettyString());\n    }\n\n    public static String stream(String url) throws IOException {\n        try (InputStream input = new URL(url).openStream()) {\n            InputStreamReader isr = new InputStreamReader(input, Charset.forName(\"UTF-8\"));\n            BufferedReader reader = new BufferedReader(isr);\n            StringBuilder json = new StringBuilder();\n            int c;\n            while ((c = reader.read()) != -1) {\n                json.append((char) c);\n            }\n            return json.toString();\n        }\n    }\n\n    public static JsonNode get(String url) throws StreamReadException, DatabindException, MalformedURLException, IOException {\n        ObjectMapper mapper = new ObjectMapper();\n        JsonNode json = mapper.readTree(new URL(url));\n        return json;\n    }\n\n    public static <T> T get(String url, Class<T> type) throws StreamReadException, DatabindException, MalformedURLException, IOException {\n        ObjectMapper mapper = new ObjectMapper();\n        T entity = mapper.readValue(new URL(url), type);\n        return entity;\n    }\n\n    public static String getString(String url) throws StreamReadException, DatabindException, MalformedURLException, IOException {\n        return get(url).toPrettyString();\n    }\n\n    public static JSONObject getJson(String url) throws MalformedURLException, IOException {\n        String json = IOUtils.toString(new URL(url), Charset.forName(\"UTF-8\"));\n        JSONObject object = new JSONObject(json);\n        return object;\n    }\n}\n", "test_case": "package com.baeldung.jackson.jsonurlreader;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.json.JSONObject;\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.jackson.jsonurlreader.data.Example;\nimport com.fasterxml.jackson.databind.JsonNode;\n\npublic class JsonUrlReaderIntegrationTest extends JsonMockServer {\n\n    @Test\n    public void whenStreamUrl_thenJsonStringReturned() throws Exception {\n        String jsonNode = JsonUrlReader.stream(serviceUrl);\n\n        assertEquals(jsonNode, JSON_RESPONSE);\n    }\n\n    @Test\n    public void whenGetUrl_thenJsonNodeReturned() throws Exception {\n        JsonNode jsonNode = JsonUrlReader.get(serviceUrl);\n\n        assertEquals(jsonNode.get(\"name\")\n            .textValue(), \"A\");\n        assertEquals(jsonNode.get(\"n\")\n            .intValue(), 1);\n        assertEquals(jsonNode.get(\"real\")\n            .booleanValue(), true);\n    }\n\n    @Test\n    public void givenType_whenGetUrl_thenTypeReturned() throws Exception {\n        Example object = JsonUrlReader.get(serviceUrl, Example.class);\n\n        Integer n = 1;\n        assertEquals(object.getName(), \"A\");\n        assertEquals(object.getN(), n);\n        assertEquals(object.getReal(), true);\n    }\n\n    @Test\n    public void whenGetJsonUrl_thenJsonObjectReturned() throws Exception {\n        JSONObject jsonObject = JsonUrlReader.getJson(serviceUrl);\n\n        assertEquals(jsonObject.getString(\"name\"), \"A\");\n        assertEquals(jsonObject.getInt(\"n\"), 1);\n        assertEquals(jsonObject.getBoolean(\"real\"), true);\n    }\n}\n"}
{"code_source": "package com.baeldung.jackson.tocollection;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.type.CollectionType;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class JsonToCollectionUtil {\n\n    private JsonToCollectionUtil(){}\n\n    public static <T> List<T> jsonArrayToList(String json, Class<T> elementClass) throws IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        CollectionType listType = objectMapper.getTypeFactory().constructCollectionType(ArrayList.class, elementClass);\n        return objectMapper.readValue(json, listType);\n    }\n\n    public static <T> List<T> jsonArrayToList2(String json, Class<T> elementClass) throws IOException {\n        return new ObjectMapper().readValue(json, new TypeReference<List<T>>() {});\n    }\n}\n", "test_case": "package com.baeldung.jackson.tocollection;\n\nimport org.assertj.core.util.Lists;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Scanner;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n\nclass JsonToCollectionUtilUnitTest {\n\n    private List<Book> expectedBookList;\n\n\n    @BeforeEach\n    void setup() {\n        expectedBookList = Lists.newArrayList(\n          new Book(1, \"A Song of Ice and Fire\", \"George R. R. Martin\"),\n          new Book(2, \"The Hitchhiker's Guide to the Galaxy\", \"Douglas Adams\"),\n          new Book(3, \"Hackers And Painters\", \"Paul Graham\"));\n    }\n\n    private String readFile(String path) {\n        try (Scanner scanner = new Scanner(getClass().getResourceAsStream(path), \"UTF-8\")) {\n            return scanner.useDelimiter(\"\\\\A\").next();\n        }\n    }\n\n    @Test\n    void givenJsonString_whenCalljsonArrayToList_thenGetExpectedList() throws IOException {\n        String jsonString = readFile(\"/to-java-collection/books.json\");\n        List<Book> bookList = JsonToCollectionUtil.jsonArrayToList(jsonString, Book.class);\n        assertThat(bookList.get(0)).isInstanceOf(Book.class);\n        assertThat(bookList).isEqualTo(expectedBookList);\n    }\n\n    @Test\n    void givenJsonString_whenCalljsonArrayToList2_thenGetException() throws IOException {\n        String jsonString = readFile(\"/to-java-collection/books.json\");\n        List<Book> bookList = JsonToCollectionUtil.jsonArrayToList2(jsonString, Book.class);\n        assertThat(bookList).size().isEqualTo(3);\n        assertThatExceptionOfType(ClassCastException.class)\n          .isThrownBy(() -> bookList.get(0).getBookId())\n          .withMessageMatching(\".*java.util.LinkedHashMap cannot be cast to .*com.baeldung.jackson.tocollection.Book.*\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.jackson.jsonnode;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonParseException;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.JsonToken;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\n\npublic class GetAllKeysFromJSON {\n\n    public List<String> getKeysInJsonUsingMaps(String json, ObjectMapper mapper) throws JsonMappingException, JsonProcessingException {\n        List<String> keys = new ArrayList<>();\n        Map<String, Object> jsonElements = mapper.readValue(json, new TypeReference<Map<String, Object>>() {\n        });\n        getAllKeys(jsonElements, keys);\n        return keys;\n    }\n\n    private void getAllKeys(Map<String, Object> jsonElements, List<String> keys) {\n\n        jsonElements.entrySet()\n            .forEach(entry -> {\n                keys.add(entry.getKey());\n                if (entry.getValue() instanceof Map) {\n                    Map<String, Object> map = (Map<String, Object>) entry.getValue();\n                    getAllKeys(map, keys);\n                } else if (entry.getValue() instanceof List) {\n                    List<?> list = (List<?>) entry.getValue();\n                    list.forEach(listEntry -> {\n                        if (listEntry instanceof Map) {\n                            Map<String, Object> map = (Map<String, Object>) listEntry;\n                            getAllKeys(map, keys);\n                        }\n                    });\n                }\n            });\n    }\n\n    public List<String> getKeysInJsonUsingJsonNodeFieldNames(String json, ObjectMapper mapper) throws JsonMappingException, JsonProcessingException {\n\n        List<String> keys = new ArrayList<>();\n        JsonNode jsonNode = mapper.readTree(json);\n        Iterator<String> iterator = jsonNode.fieldNames();\n        iterator.forEachRemaining(e -> keys.add(e));\n        return keys;\n    }\n\n    public List<String> getAllKeysInJsonUsingJsonNodeFieldNames(String json, ObjectMapper mapper) throws JsonMappingException, JsonProcessingException {\n\n        List<String> keys = new ArrayList<>();\n        JsonNode jsonNode = mapper.readTree(json);\n        getAllKeysUsingJsonNodeFieldNames(jsonNode, keys);\n        return keys;\n    }\n\n    public List<String> getAllKeysInJsonUsingJsonNodeFields(String json, ObjectMapper mapper) throws JsonMappingException, JsonProcessingException {\n\n        List<String> keys = new ArrayList<>();\n        JsonNode jsonNode = mapper.readTree(json);\n        getAllKeysUsingJsonNodeFields(jsonNode, keys);\n        return keys;\n    }\n\n    private void getAllKeysUsingJsonNodeFields(JsonNode jsonNode, List<String> keys) {\n\n        if (jsonNode.isObject()) {\n            Iterator<Entry<String, JsonNode>> fields = jsonNode.fields();\n            fields.forEachRemaining(field -> {\n                keys.add(field.getKey());\n                getAllKeysUsingJsonNodeFieldNames((JsonNode) field.getValue(), keys);\n            });\n        } else if (jsonNode.isArray()) {\n            ArrayNode arrayField = (ArrayNode) jsonNode;\n            arrayField.forEach(node -> {\n                getAllKeysUsingJsonNodeFieldNames(node, keys);\n            });\n        }\n\n    }\n\n    private void getAllKeysUsingJsonNodeFieldNames(JsonNode jsonNode, List<String> keys) {\n\n        if (jsonNode.isObject()) {\n            Iterator<String> fieldNames = jsonNode.fieldNames();\n            fieldNames.forEachRemaining(fieldName -> {\n                keys.add(fieldName);\n                getAllKeysUsingJsonNodeFieldNames(jsonNode.get(fieldName), keys);\n            });\n        } else if (jsonNode.isArray()) {\n            ArrayNode arrayField = (ArrayNode) jsonNode;\n            arrayField.forEach(node -> {\n                getAllKeysUsingJsonNodeFieldNames(node, keys);\n            });\n        }\n\n    }\n\n    public List<String> getKeysInJsonUsingJsonParser(String json, ObjectMapper mapper) throws IOException {\n\n        List<String> keys = new ArrayList<>();\n        JsonNode jsonNode = mapper.readTree(json);\n        JsonParser jsonParser = jsonNode.traverse();\n        while (!jsonParser.isClosed()) {\n            if (jsonParser.nextToken() == JsonToken.FIELD_NAME) {\n                keys.add((jsonParser.getCurrentName()));\n            }\n        }\n        return keys;\n    }\n\n    public List<String> getKeysInJsonUsingJsonParser(String json) throws JsonParseException, IOException {\n\n        List<String> keys = new ArrayList<>();\n        JsonFactory factory = new JsonFactory();\n        JsonParser jsonParser = factory.createParser(json);\n        while (!jsonParser.isClosed()) {\n            if (jsonParser.nextToken() == JsonToken.FIELD_NAME) {\n                keys.add((jsonParser.getCurrentName()));\n            }\n        }\n        return keys;\n    }\n}\n", "test_case": "package com.baeldung.jackson.jsonnode;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class GetAllKeysFromJSONUnitTest {\n\n    private static String json = \"{\\r\\n\" + \"   \\\"Name\\\":\\\"Craig\\\",\\r\\n\" + \"   \\\"Age\\\":10,\\r\\n\" + \"   \\\"BookInterests\\\":[\\r\\n\" + \"      {\\r\\n\" + \"         \\\"Book\\\":\\\"The Kite Runner\\\",\\r\\n\" + \"         \\\"Author\\\":\\\"Khaled Hosseini\\\"\\r\\n\" + \"      },\\r\\n\"\n        + \"      {\\r\\n\" + \"         \\\"Book\\\":\\\"Harry Potter\\\",\\r\\n\" + \"         \\\"Author\\\":\\\"J. K. Rowling\\\"\\r\\n\" + \"      }\\r\\n\" + \"   ],\\r\\n\" + \"   \\\"FoodInterests\\\":{\\r\\n\" + \"      \\\"Breakfast\\\":[\\r\\n\" + \"         {\\r\\n\"\n        + \"            \\\"Bread\\\":\\\"Whole wheat\\\",\\r\\n\" + \"            \\\"Beverage\\\":\\\"Fruit juice\\\"\\r\\n\" + \"         },\\r\\n\" + \"         {\\r\\n\" + \"            \\\"Sandwich\\\":\\\"Vegetable Sandwich\\\",\\r\\n\" + \"            \\\"Beverage\\\":\\\"Coffee\\\"\\r\\n\"\n        + \"         }\\r\\n\" + \"      ]\\r\\n\" + \"   }\\r\\n\" + \"}\";\n\n    private static ObjectMapper mapper = new ObjectMapper();\n    private static GetAllKeysFromJSON getAllKeysFromJSONUtil = new GetAllKeysFromJSON();\n\n    // Top level keys : [Name, Age, BookInterests, FoodInterests]\n    // All keys: [Name, Age, BookInterests, Book, Author, Book, Author, FoodInterests, Breakfast, Bread, Beverage, Sandwich, Beverage]\n\n    @Test\n    public void givenAJsonNode_whenUsingFieldNamesMethod_thenWeGetTopFieldNames() {\n        List<String> keys;\n        try {\n            keys = getAllKeysFromJSONUtil.getKeysInJsonUsingJsonNodeFieldNames(json, mapper);\n            assertEquals(4, keys.size());\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Test\n    public void givenAJsonNode_whenUsingFieldNamesMethodForAllNodes_thenWeGetAllFieldNames() {\n        List<String> keys;\n        try {\n            keys = getAllKeysFromJSONUtil.getAllKeysInJsonUsingJsonNodeFieldNames(json, mapper);\n            assertEquals(13, keys.size());\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Test\n    public void givenAJsonNode_whenUsingFieldsMethod_thenWeGetAllFieldNames() {\n        List<String> keys;\n        try {\n            keys = getAllKeysFromJSONUtil.getAllKeysInJsonUsingJsonNodeFields(json, mapper);\n            assertEquals(13, keys.size());\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Test\n    public void givenAJsonNode_whenUsingJsonParserMethod_thenWeGetAllFieldNames() {\n        List<String> keys;\n        try {\n            keys = getAllKeysFromJSONUtil.getKeysInJsonUsingJsonParser(json, mapper);\n            assertEquals(13, keys.size());\n\n            keys = getAllKeysFromJSONUtil.getKeysInJsonUsingJsonParser(json);\n            assertEquals(13, keys.size());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    @Test\n    public void givenAJsonNode_whenUsingMaps_thenWeGetAllFieldNames() {\n        List<String> keys;\n        try {\n            keys = getAllKeysFromJSONUtil.getKeysInJsonUsingMaps(json, mapper);\n            assertEquals(13, keys.size());\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"}
{"code_source": "package com.baeldung.jackson.node;\n\nimport java.util.Iterator;\nimport java.util.Map.Entry;\n\nimport com.fasterxml.jackson.databind.JsonNode;\n\npublic class JsonNodeIterator {\n    \n    private static final String NEW_LINE = \"\\n\";\n    private static final String FIELD_DELIMITER = \": \";\n    private static final String ARRAY_PREFIX = \"- \";\n    private static final String YAML_PREFIX = \"  \";\n    \n    public String toYaml(JsonNode root) {\n        StringBuilder yaml = new StringBuilder();\n        processNode(root, yaml, 0);\n        return yaml.toString();\n    }\n\n    private void processNode(JsonNode jsonNode, StringBuilder yaml, int depth) {\n        if (jsonNode.isValueNode()) {\n            yaml.append(jsonNode.asText());\n        }\n        else if (jsonNode.isArray()) {\n            for (JsonNode arrayItem : jsonNode) {\n                appendNodeToYaml(arrayItem, yaml, depth, true);\n            }\n        }\n        else if (jsonNode.isObject()) {\n            appendNodeToYaml(jsonNode, yaml, depth, false);\n        }\n    }\n    \n    private void appendNodeToYaml(JsonNode node, StringBuilder yaml, int depth, boolean isArrayItem) {\n        Iterator<Entry<String, JsonNode>> fields = node.fields();\n        boolean isFirst = true;\n        while (fields.hasNext()) {\n            Entry<String, JsonNode> jsonField = fields.next();\n            addFieldNameToYaml(yaml, jsonField.getKey(), depth, isArrayItem && isFirst);\n            processNode(jsonField.getValue(), yaml, depth+1);\n            isFirst = false;\n        }\n        \n    }\n\n    private void addFieldNameToYaml(StringBuilder yaml, String fieldName, int depth, boolean isFirstInArray) {\n        if (yaml.length()>0) {\n            yaml.append(NEW_LINE);\n            int requiredDepth = (isFirstInArray) ? depth-1 : depth;\n            for(int i = 0; i < requiredDepth; i++) {\n                yaml.append(YAML_PREFIX);\n            }\n            if (isFirstInArray) {\n                yaml.append(ARRAY_PREFIX);\n            }\n        }\n        yaml.append(fieldName);\n        yaml.append(FIELD_DELIMITER);\n    }\n\n}\n", "test_case": "package com.baeldung.jackson.node;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.io.IOException;\n\nimport org.junit.Test;\n\nimport com.fasterxml.jackson.databind.JsonNode;\n\npublic class JsonNodeIteratorUnitTest {\n\n    private JsonNodeIterator onTest = new JsonNodeIterator();\n    private static String expectedYaml = \"name: \\n\" + \n        \"  first: Tatu\\n\" + \n        \"  last: Saloranta\\n\" + \n        \"title: Jackson founder\\n\" + \n        \"company: FasterXML\\n\" + \n        \"pets: \\n\" + \n        \"- type: dog\\n\" + \n        \"  number: 1\\n\" + \n        \"- type: fish\\n\" + \n        \"  number: 50\";\n    \n@Test\npublic void givenANodeTree_whenIteratingSubNodes_thenWeFindExpected() throws IOException {\n    final JsonNode rootNode = ExampleStructure.getExampleRoot();\n    \n    String yaml = onTest.toYaml(rootNode);\n    System.out.println(yaml.toString());\n\n    assertEquals(expectedYaml, yaml);\n    \n}\n\n\n}\n"}
{"code_source": "package com.baeldung.blockchain;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class Block {\n\n    private static Logger logger = Logger.getLogger(Block.class.getName());\n\n    private String hash;\n    private String previousHash;\n    private String data;\n    private long timeStamp;\n    private int nonce;\n\n    public Block(String data, String previousHash, long timeStamp) {\n        this.data = data;\n        this.previousHash = previousHash;\n        this.timeStamp = timeStamp;\n        this.hash = calculateBlockHash();\n    }\n\n    public String mineBlock(int prefix) {\n        String prefixString = new String(new char[prefix]).replace('\\0', '0');\n        while (!hash.substring(0, prefix)\n            .equals(prefixString)) {\n            nonce++;\n            hash = calculateBlockHash();\n        }\n        return hash;\n    }\n\n    public String calculateBlockHash() {\n        String dataToHash = previousHash + Long.toString(timeStamp) + Integer.toString(nonce) + data;\n        MessageDigest digest = null;\n        byte[] bytes = null;\n        try {\n            digest = MessageDigest.getInstance(\"SHA-256\");\n            bytes = digest.digest(dataToHash.getBytes(\"UTF-8\"));\n        } catch (NoSuchAlgorithmException | UnsupportedEncodingException ex) {\n            logger.log(Level.SEVERE, ex.getMessage());\n        }\n        StringBuffer buffer = new StringBuffer();\n        for (byte b : bytes) {\n            buffer.append(String.format(\"%02x\", b));\n        }\n        return buffer.toString();\n    }\n\n    public String getHash() {\n        return this.hash;\n    }\n\n    public String getPreviousHash() {\n        return this.previousHash;\n    }\n\n    public void setData(String data) {\n        this.data = data;\n    }\n}\n", "test_case": "package com.baeldung.blockchain;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\npublic class BlockchainUnitTest {\n\n    public static List<Block> blockchain = new ArrayList<Block>();\n    public static int prefix = 4;\n    public static String prefixString = new String(new char[prefix]).replace('\\0', '0');\n\n    @BeforeClass\n    public static void setUp() {\n        Block genesisBlock = new Block(\"The is the Genesis Block.\", \"0\", new Date().getTime());\n        genesisBlock.mineBlock(prefix);\n        blockchain.add(genesisBlock);\n        Block firstBlock = new Block(\"The is the First Block.\", genesisBlock.getHash(), new Date().getTime());\n        firstBlock.mineBlock(prefix);\n        blockchain.add(firstBlock);\n    }\n\n    @Test\n    public void givenBlockchain_whenNewBlockAdded_thenSuccess() {\n        Block newBlock = new Block(\"The is a New Block.\", blockchain.get(blockchain.size() - 1)\n            .getHash(), new Date().getTime());\n        newBlock.mineBlock(prefix);\n        assertTrue(newBlock.getHash()\n            .substring(0, prefix)\n            .equals(prefixString));\n        blockchain.add(newBlock);\n    }\n\n    @Test\n    public void givenBlockchain_whenValidated_thenSuccess() {\n        boolean flag = true;\n        for (int i = 0; i < blockchain.size(); i++) {\n            String previousHash = i == 0 ? \"0\"\n                : blockchain.get(i - 1)\n                    .getHash();\n            flag = blockchain.get(i)\n                .getHash()\n                .equals(blockchain.get(i)\n                    .calculateBlockHash())\n                && previousHash.equals(blockchain.get(i)\n                    .getPreviousHash())\n                && blockchain.get(i)\n                    .getHash()\n                    .substring(0, prefix)\n                    .equals(prefixString);\n            if (!flag)\n                break;\n        }\n        assertTrue(flag);\n    }\n\n    @AfterClass\n    public static void tearDown() {\n        blockchain.clear();\n    }\n\n}\n"}
{"code_source": "package com.baeldung.jna;\n\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\nimport com.sun.jna.Platform;\n\npublic interface CMath extends Library {\n    CMath INSTANCE = Native.load(Platform.isWindows() ? \"msvcrt\" : \"c\", CMath.class);\n    double cosh(double value);\n}\n", "test_case": "package com.baeldung.jna;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.sun.jna.Native;\nimport com.sun.jna.Platform;\n\nclass CMathUnitTest {\n    @Test\n    void whenCallNative_thenSuccess() {\n        CMath lib = Native.load(Platform.isWindows() ? \"msvcrt\" : \"c\", CMath.class);\n        double result = lib.cosh(0);\n        assertEquals(1.0,result);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.jna;\n\nimport java.util.Collections;\nimport java.util.Map;\n\nimport com.sun.jna.FunctionMapper;\nimport com.sun.jna.LastErrorException;\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\nimport com.sun.jna.NativeLong;\nimport com.sun.jna.Platform;\nimport com.sun.jna.Structure;\nimport com.sun.jna.Structure.FieldOrder;\n\npublic interface NativeFS extends Library {\n    \n    FunctionMapper mapper = (library,method) -> {\n        if (Platform.isWindows()) {\n            return \"_\" + method.getName();\n        }\n        else {\n            return \"__x\" + method.getName(); // On Linux, stat is actually _xstat\n        }\n    };\n    \n    public NativeFS INSTANCE = Native.load(Platform.isWindows() ? \"msvcrt\" : \"c\",\n      NativeFS.class,\n      Collections.singletonMap(Library.OPTION_FUNCTION_MAPPER, mapper));\n\n    int stat(String path, Stat stat) throws LastErrorException;\n\n    @FieldOrder({\"st_dev\",\"st_ino\",\"st_mode\",\"st_nlink\",\"st_uid\",\"st_gid\",\"st_rdev\",\"st_size\",\"st_atime\",\"st_mtime\",\"st_ctime\"})\n    public class Stat extends Structure {\n        public int st_dev;\n        public int st_ino;\n        public short st_mode;\n        public short st_nlink;\n        public short st_uid;\n        public short st_gid;\n        public int st_rdev;\n        public NativeLong st_size;\n        public NativeLong st_atime;\n        public NativeLong st_mtime;\n        public NativeLong st_ctime;\n    }\n}\n", "test_case": "package com.baeldung.jna;\n\nimport static org.junit.Assert.fail;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.jna.NativeFS.Stat;\nimport com.sun.jna.LastErrorException;\nimport com.sun.jna.Platform;\n\npublic class NativeFSUnitTest {\n    \n\n    @Test\n    public void whenCallNative_thenSuccess() throws IOException {\n        NativeFS lib = NativeFS.INSTANCE;\n        \n        File f = Files.createTempFile(\"junit\", \".bin\").toFile(); \n        f.deleteOnExit();\n        Stat stat = new Stat();\n        try {\n            if (Platform.isWindows()) {\n                int rc = lib.stat(f.getAbsolutePath(), stat);\n                assertEquals(0, rc);\n                assertEquals(0,stat.st_size.longValue());\n            }\n        }\n        catch(LastErrorException error) {\n            fail(\"stat failed: error code=\" + error.getErrorCode());\n        }\n        \n    }\n}\n"}
{"code_source": "package com.baeldung.jna;\n\nimport com.sun.jna.LastErrorException;\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\nimport com.sun.jna.Platform;\nimport com.sun.jna.Pointer;\n\npublic interface StdC extends Library {\n    StdC INSTANCE = Native.load(Platform.isWindows() ? \"msvcrt\" : \"c\", StdC.class );\n    Pointer malloc(long n);\n    void free(Pointer p);\n    Pointer memset(Pointer p, int c, long n);\n    int open(String path, int flags) throws LastErrorException;\n    int close(int fd) throws LastErrorException;\n}\n\n", "test_case": "package com.baeldung.jna;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.BeforeClass;\nimport org.junit.jupiter.api.Test;\n\nimport com.sun.jna.Native;\nimport com.sun.jna.Platform;\nimport com.sun.jna.Pointer;\n\nclass StdCUnitTest {\n    \n    @BeforeClass\n    public static void setupProtectedMode() {\n        Native.setProtected(true);\n    }\n\n    @Test\n    public void whenMalloc_thenSuccess() {\n        StdC lib = StdC.INSTANCE;\n        Pointer p = lib.malloc(1024);\n        p.setMemory(0l, 1024l, (byte) 0);\n        lib.free(p);\n    }\n    \n    @Test\n    public void whenAccessViolation_thenShouldThrowError() {\n        // Running this test on Linux requires additional setup using libjsig.so\n        // Details here: http://java-native-access.github.io/jna/5.6.0/javadoc/overview-summary.html#crash-protection\n        // IMPORTANT NOTICE: Code for illustration purposes only. DON'T DO THIS IN YOUR OWN CODE\n        if ( Platform.isWindows()) {\n            Error e = null;\n            Pointer p = new Pointer(0l);\n            \n            try {\n                p.setMemory(0, 100*1024, (byte) 0);\n            }\n            catch(Error err) {\n                e = err;\n            }\n            \n            assertNotNull(e, \"Should throw Error\");\n        }\n    }\n\n}\n"}
{"code_source": "package com.baeldung.jvmbitversion;\n\nimport com.sun.jna.Platform;\n\npublic class JVMBitVersion {\n\n    public String getUsingSystemClass() {\n        return System.getProperty(\"sun.arch.data.model\") + \"-bit\";\n    }\n\n    public String getUsingNativeClass() {\n        if (com.sun.jna.Native.POINTER_SIZE == 8) {\n            return \"64-bit\";\n        } else if (com.sun.jna.Native.POINTER_SIZE == 4) {\n            return \"32-bit\";\n        } else\n            return \"unknown\";\n    }\n\n    public boolean getUsingPlatformClass() {\n        return (Platform.is64Bit());\n    }\n\n}\n", "test_case": "package com.baeldung.jvmbitversion;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.sun.jna.Platform;\n\npublic class JVMBitVersionUnitTest {\n\n    private JVMBitVersion jvmVersion;\n\n    @Before\n    public void setup() {\n        jvmVersion = new JVMBitVersion();\n    }\n\n    @Test\n    public void whenUsingSystemClass_thenOutputIsAsExpected() {\n        if (\"64\".equals(System.getProperty(\"sun.arch.data.model\"))) {\n            assertEquals(\"64-bit\", jvmVersion.getUsingSystemClass());\n        } else if (\"32\".equals(System.getProperty(\"sun.arch.data.model\"))) {\n            assertEquals(\"32-bit\", jvmVersion.getUsingSystemClass());\n        }\n    }\n    \n    @Test\n    public void whenUsingNativeClass_thenResultIsAsExpected() {\n        if (com.sun.jna.Native.POINTER_SIZE == 8) {\n            assertEquals(\"64-bit\", jvmVersion.getUsingNativeClass());\n        } else if (com.sun.jna.Native.POINTER_SIZE == 4) {\n            assertEquals(\"32-bit\", jvmVersion.getUsingNativeClass());\n        }\n    }\n\n    @Test\n    public void whenUsingPlatformClass_thenResultIsAsExpected() {\n        if (Platform.is64Bit() == Boolean.TRUE) {\n            assertEquals(Boolean.TRUE, jvmVersion.getUsingPlatformClass());\n        } else if (com.sun.jna.Native.POINTER_SIZE == 4) {\n            assertEquals(Boolean.FALSE, jvmVersion.getUsingPlatformClass());\n        }\n    }\n}\n"}
{"code_source": "package com.baeldung.javaxval.afterdeserialization;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.module.SimpleModule;\n\npublic class StudentDeserializerWithValidation {\n\n    public static Student readStudent(InputStream inputStream) throws IOException {\n        ObjectMapper mapper = getObjectMapperWithValidation();\n        return mapper.readValue(inputStream, Student.class);\n    }\n\n    private static ObjectMapper getObjectMapperWithValidation() {\n        SimpleModule validationModule = new SimpleModule();\n        validationModule.setDeserializerModifier(new BeanDeserializerModifierWithValidation());\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.registerModule(validationModule);\n        return mapper;\n    }\n\n}\n", "test_case": "package com.baeldung.javaxval;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport javax.validation.ConstraintViolationException;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.javaxval.afterdeserialization.Student;\nimport com.baeldung.javaxval.afterdeserialization.StudentDeserializerWithValidation;\n\npublic class StudentDeserializerWithValidationUnitTest {\n\n    private final String EXPECTED_ERROR_MESSAGE = \"name: Student's name must be between 5 and 10 characters\";\n    private final String EXPECTED_STUDENT_NAME = \"Daniel\";\n    private final String NAME_TOO_LONG_STUDENT_FILE = \"nameTooLongStudent.json\";\n    private final String NAME_TOO_SHORT_STUDENT_FILE = \"nameTooShortStudent.json\";\n    private final String SUBDIRECTORY = \"afterdeserialization/\";\n    private final String VALID_STUDENT_FILE = \"validStudent.json\";\n\n    @Test\n    void givenValidStudent_WhenReadStudent_ThenReturnStudent() throws IOException {\n        InputStream inputStream = getInputStream(VALID_STUDENT_FILE);\n        Student result = StudentDeserializerWithValidation.readStudent(inputStream);\n        assertEquals(EXPECTED_STUDENT_NAME, result.getName());\n    }\n\n    @Test\n    void givenStudentWithTooShortName_WhenReadStudent_ThenThrows() {\n        InputStream inputStream = getInputStream(NAME_TOO_SHORT_STUDENT_FILE);\n        ConstraintViolationException constraintViolationException = assertThrows(ConstraintViolationException.class, () -> StudentDeserializerWithValidation.readStudent(inputStream));\n        assertEquals(EXPECTED_ERROR_MESSAGE, constraintViolationException.getMessage());\n    }\n\n    @Test\n    void givenStudentWithTooLongName_WhenReadStudent_ThenThrows() {\n        InputStream inputStream = getInputStream(NAME_TOO_LONG_STUDENT_FILE);\n        ConstraintViolationException constraintViolationException = assertThrows(ConstraintViolationException.class, () -> StudentDeserializerWithValidation.readStudent(inputStream));\n        assertEquals(EXPECTED_ERROR_MESSAGE, constraintViolationException.getMessage());\n    }\n\n    private InputStream getInputStream(String fileName) {\n        return getClass().getClassLoader()\n            .getResourceAsStream(SUBDIRECTORY + fileName);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.javaxval.javabeanconstraints.entities;\n\nimport javax.validation.constraints.NotBlank;\n\npublic class UserNotBlank {\n\n    @NotBlank(message = \"Name is mandatory\")\n    private final String name;\n\n    public UserNotBlank(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" + \"name=\" + name + \"}\";\n    }\n}\n", "test_case": "package com.baeldung.javaxval.javabeanconstraints;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Set;\n\nimport javax.validation.ConstraintViolation;\nimport javax.validation.Validation;\nimport javax.validation.Validator;\n\nimport com.baeldung.javaxval.javabeanconstraints.entities.UserNotBlank;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\npublic class UserNotBlankUnitTest {\n\n    private static Validator validator;\n\n    @BeforeClass\n    public static void setupValidatorInstance() {\n        validator = Validation.buildDefaultValidatorFactory()\n            .getValidator();\n    }\n\n    @Test\n    public void whenNotBlankName_thenNoConstraintViolations() {\n        UserNotBlank user = new UserNotBlank(\"John\");\n\n        Set<ConstraintViolation<UserNotBlank>> violations = validator.validate(user);\n\n        assertThat(violations.size()).isEqualTo(0);\n    }\n\n    @Test\n    public void whenBlankName_thenOneConstraintViolation() {\n        UserNotBlank user = new UserNotBlank(\" \");\n\n        Set<ConstraintViolation<UserNotBlank>> violations = validator.validate(user);\n\n        assertThat(violations.size()).isEqualTo(1);\n    }\n\n    @Test\n    public void whenEmptyName_thenOneConstraintViolation() {\n        UserNotBlank user = new UserNotBlank(\"\");\n\n        Set<ConstraintViolation<UserNotBlank>> violations = validator.validate(user);\n\n        assertThat(violations.size()).isEqualTo(1);\n    }\n\n    @Test\n    public void whenNullName_thenOneConstraintViolation() {\n        UserNotBlank user = new UserNotBlank(null);\n\n        Set<ConstraintViolation<UserNotBlank>> violations = validator.validate(user);\n\n        assertThat(violations.size()).isEqualTo(1);\n    }\n\n    @Test\n    public void whenToString_thenCorrect() {\n        UserNotBlank user = new UserNotBlank(\"John\");\n\n        assertThat(user.toString()).isEqualTo(\"User{name=John}\");\n    }\n}\n"}
{"code_source": "package com.baeldung.javaxval.javabeanconstraints.entities;\n\nimport javax.validation.constraints.NotEmpty;\n\npublic class UserNotEmpty {\n\n    @NotEmpty(message = \"Name is mandatory\")\n    private final String name;\n\n    public UserNotEmpty(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" + \"name=\" + name + \"}\";\n    }\n}\n", "test_case": "package com.baeldung.javaxval.javabeanconstraints;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Set;\n\nimport javax.validation.ConstraintViolation;\nimport javax.validation.Validation;\nimport javax.validation.Validator;\n\nimport com.baeldung.javaxval.javabeanconstraints.entities.UserNotEmpty;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\npublic class UserNotEmptyUnitTest {\n\n    private static Validator validator;\n\n    @BeforeClass\n    public static void setupValidatorInstance() {\n        validator = Validation.buildDefaultValidatorFactory()\n            .getValidator();\n    }\n\n    @Test\n    public void whenNotEmptyName_thenNoConstraintViolations() {\n        UserNotEmpty user = new UserNotEmpty(\"John\");\n\n        Set<ConstraintViolation<UserNotEmpty>> violations = validator.validate(user);\n\n        assertThat(violations.size()).isEqualTo(0);\n    }\n\n    @Test\n    public void whenEmptyName_thenOneConstraintViolation() {\n        UserNotEmpty user = new UserNotEmpty(\"\");\n\n        Set<ConstraintViolation<UserNotEmpty>> violations = validator.validate(user);\n\n        assertThat(violations.size()).isEqualTo(1);\n    }\n\n    @Test\n    public void whenNullName_thenOneConstraintViolation() {\n        UserNotEmpty user = new UserNotEmpty(null);\n\n        Set<ConstraintViolation<UserNotEmpty>> violations = validator.validate(user);\n\n        assertThat(violations.size()).isEqualTo(1);\n    }\n\n    @Test\n    public void whenToString_thenCorrect() {\n        UserNotEmpty user = new UserNotEmpty(\"John\");\n\n        assertThat(user.toString()).isEqualTo(\"User{name=John}\");\n    }\n}\n"}
{"code_source": "package com.baeldung.javaxval.javabeanconstraints.entities;\n\nimport javax.validation.constraints.NotNull;\n\npublic class UserNotNull {\n\n    @NotNull(message = \"Name is mandatory\")\n    private final String name;\n\n    public UserNotNull(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" + \"name=\" + name + \"}\";\n    }\n}\n", "test_case": "package com.baeldung.javaxval.javabeanconstraints;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Set;\n\nimport javax.validation.ConstraintViolation;\nimport javax.validation.Validation;\nimport javax.validation.Validator;\n\nimport com.baeldung.javaxval.javabeanconstraints.entities.UserNotNull;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\npublic class UserNotNullUnitTest {\n\n    private static Validator validator;\n\n    @BeforeClass\n    public static void setupValidatorInstance() {\n        validator = Validation.buildDefaultValidatorFactory()\n            .getValidator();\n    }\n\n    @Test\n    public void whenNotNullName_thenNoConstraintViolations() {\n        UserNotNull user = new UserNotNull(\"John\");\n\n        Set<ConstraintViolation<UserNotNull>> violations = validator.validate(user);\n\n        assertThat(violations.size()).isEqualTo(0);\n    }\n\n    @Test\n    public void whenNullName_thenOneConstraintViolation() {\n        UserNotNull user = new UserNotNull(null);\n\n        Set<ConstraintViolation<UserNotNull>> violations = validator.validate(user);\n\n        assertThat(violations.size()).isEqualTo(1);\n    }\n\n    @Test\n    public void whenEmptyName_thenNoConstraintViolations() {\n        UserNotNull user = new UserNotNull(\"\");\n\n        Set<ConstraintViolation<UserNotNull>> violations = validator.validate(user);\n\n        assertThat(violations.size()).isEqualTo(0);\n    }\n\n    @Test\n    public void whenToString_thenCorrect() {\n        UserNotNull user = new UserNotNull(\"John\");\n\n        assertThat(user.toString()).isEqualTo(\"User{name=John}\");\n    }\n}\n"}
{"code_source": "package com.baeldung.javaxval.bigdecimal;\n\nimport java.math.BigDecimal;\n\nimport javax.validation.constraints.DecimalMin;\nimport javax.validation.constraints.Digits;\n\npublic class Invoice {\n\n    @DecimalMin(value = \"0.0\", inclusive = false)\n    @Digits(integer = 3, fraction = 2)\n    private BigDecimal price;\n    private String description;\n\n    public Invoice(BigDecimal price, String description) {\n        this.price = price;\n        this.description = description;\n    }\n}\n", "test_case": "package com.baeldung.javaxval.bigdecimal;\n\nimport com.baeldung.javaxval.LocaleAwareUnitTest;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\nimport javax.validation.ConstraintViolation;\nimport javax.validation.Validation;\nimport javax.validation.Validator;\nimport java.math.BigDecimal;\nimport java.util.Set;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class InvoiceUnitTest extends LocaleAwareUnitTest {\n\n    private static Validator validator;\n\n    @BeforeClass\n    public static void setupValidatorInstance() {\n        validator = Validation.buildDefaultValidatorFactory()\n            .getValidator();\n    }\n\n    @Test\n    public void whenLessThanThreeIntegerDigits_thenShouldNotGiveConstraintViolations() {\n        Invoice invoice = new Invoice(new BigDecimal(\"10.21\"), \"Book purchased\");\n        Set<ConstraintViolation<Invoice>> violations = validator.validate(invoice);\n        assertThat(violations).isEmpty();\n    }\n\n    @Test\n    public void whenThreeIntegerDigits_thenShouldNotGiveConstraintViolations() {\n        Invoice invoice = new Invoice(new BigDecimal(\"102.21\"), \"Book purchased\");\n        Set<ConstraintViolation<Invoice>> violations = validator.validate(invoice);\n        assertThat(violations).isEmpty();\n    }\n\n    @Test\n    public void whenMoreThanThreeIntegerDigits_thenShouldGiveConstraintViolations() {\n        Invoice invoice = new Invoice(new BigDecimal(\"1021.21\"), \"Book purchased\");\n        Set<ConstraintViolation<Invoice>> violations = validator.validate(invoice);\n        assertThat(violations).hasSize(1);\n        assertThat(violations)\n            .extracting(\"message\")\n            .containsOnly(\"numeric value out of bounds (<3 digits>.<2 digits> expected)\");\n    }\n\n    @Test\n    public void whenLessThanTwoFractionDigits_thenShouldNotGiveConstraintViolations() {\n        Invoice invoice = new Invoice(new BigDecimal(\"99.9\"), \"Book purchased\");\n        Set<ConstraintViolation<Invoice>> violations = validator.validate(invoice);\n        assertThat(violations).isEmpty();\n    }\n\n    @Test\n    public void whenTwoFractionDigits_thenShouldNotGiveConstraintViolations() {\n        Invoice invoice = new Invoice(new BigDecimal(\"99.99\"), \"Book purchased\");\n        Set<ConstraintViolation<Invoice>> violations = validator.validate(invoice);\n        assertThat(violations).isEmpty();\n    }\n\n    @Test\n    public void whenMoreThanTwoFractionDigits_thenShouldGiveConstraintViolations() {\n        Invoice invoice = new Invoice(new BigDecimal(\"99.999\"), \"Book purchased\");\n        Set<ConstraintViolation<Invoice>> violations = validator.validate(invoice);\n        assertThat(violations).hasSize(1);\n        assertThat(violations)\n            .extracting(\"message\")\n            .containsOnly(\"numeric value out of bounds (<3 digits>.<2 digits> expected)\");\n    }\n\n    @Test\n    public void whenPriceIsZero_thenShouldGiveConstraintViolations() {\n        Invoice invoice = new Invoice(new BigDecimal(\"0.00\"), \"Book purchased\");\n        Set<ConstraintViolation<Invoice>> violations = validator.validate(invoice);\n        assertThat(violations).hasSize(1);\n        assertThat(violations)\n            .extracting(\"message\")\n            .containsOnly(\"must be greater than 0.0\");\n    }\n\n    @Test\n    public void whenPriceIsGreaterThanZero_thenShouldNotGiveConstraintViolations() {\n        Invoice invoice = new Invoice(new BigDecimal(\"100.50\"), \"Book purchased\");\n        Set<ConstraintViolation<Invoice>> violations = validator.validate(invoice);\n        assertThat(violations).isEmpty();\n    }\n}\n"}
{"code_source": "package com.baeldung.javaxval.enums.demo;\n\npublic enum CustomerType {\n    NEW, OLD, DEFAULT\n}\n", "test_case": "package com.baeldung.javaxval.enums;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Set;\n\nimport javax.validation.ConstraintViolation;\nimport javax.validation.Validation;\nimport javax.validation.Validator;\n\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\nimport com.baeldung.javaxval.enums.demo.Customer;\nimport com.baeldung.javaxval.enums.demo.CustomerType;\nimport com.baeldung.javaxval.enums.demo.CustomerUnitTest;\n\npublic class CustomerTypeSubSetValidatorUnitTest {\n\n    private static Validator validator;\n\n    @BeforeClass\n    public static void setupValidatorInstance() {\n        validator = Validation.buildDefaultValidatorFactory()\n            .getValidator();\n    }\n\n    @Test\n    public void whenEnumAnyOfSubset_thenShouldNotReportConstraintViolations() {\n        Customer customer = new Customer.Builder().withCustomerTypeOfSubset(CustomerType.NEW)\n            .build();\n        Set<ConstraintViolation<Customer>> violations = validator.validate(customer);\n        assertThat(violations.isEmpty()).isTrue();\n    }\n\n    @Test\n    public void whenEnumNotAnyOfSubset_thenShouldGiveOccurrenceOfConstraintViolations() {\n        Customer customer = new Customer.Builder().withCustomerTypeOfSubset(CustomerType.DEFAULT)\n            .build();\n        Set<ConstraintViolation<Customer>> violations = validator.validate(customer);\n        assertThat(violations.size()).isEqualTo(1);\n\n        assertThat(violations).anyMatch(CustomerUnitTest.havingPropertyPath(\"customerTypeOfSubset\")\n            .and(CustomerUnitTest.havingMessage(\"must be any of [NEW, OLD]\")));\n    }\n}"}
{"code_source": "package com.baeldung.javaxval.enums.constraints;\n\nimport static java.lang.annotation.ElementType.ANNOTATION_TYPE;\nimport static java.lang.annotation.ElementType.CONSTRUCTOR;\nimport static java.lang.annotation.ElementType.FIELD;\nimport static java.lang.annotation.ElementType.METHOD;\nimport static java.lang.annotation.ElementType.PARAMETER;\nimport static java.lang.annotation.ElementType.TYPE_USE;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\nimport javax.validation.Constraint;\nimport javax.validation.Payload;\n\nimport com.baeldung.javaxval.enums.EnumNamePatternValidator;\n\n@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })\n@Retention(RUNTIME)\n@Documented\n@Constraint(validatedBy = EnumNamePatternValidator.class)\npublic @interface EnumNamePattern {\n\n    /**\n     * @return the regular expression to match\n     */\n    String regexp();\n\n    /**\n     * @return the error message template\n     */\n    String message() default \"must match \\\"{regexp}\\\"\";\n\n    /**\n     * @return the groups the constraint belongs to\n     */\n    Class<?>[] groups() default {};\n\n    /**\n     * @return the payload associated to the constraint\n     */\n    Class<? extends Payload>[] payload() default {};\n}", "test_case": "package com.baeldung.javaxval.enums;\n\nimport static com.baeldung.javaxval.enums.demo.CustomerType.DEFAULT;\nimport static com.baeldung.javaxval.enums.demo.CustomerType.OLD;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Set;\n\nimport javax.validation.ConstraintViolation;\nimport javax.validation.Validation;\nimport javax.validation.Validator;\n\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\nimport com.baeldung.javaxval.enums.demo.Customer;\nimport com.baeldung.javaxval.enums.demo.CustomerUnitTest;\n\npublic class EnumNamePatternValidatorUnitTest {\n\n    private static Validator validator;\n\n    @BeforeClass\n    public static void setupValidatorInstance() {\n        validator = Validation.buildDefaultValidatorFactory()\n            .getValidator();\n    }\n\n    @Test\n    public void whenEnumMatchesRegex_thenShouldNotReportConstraintViolations() {\n        Customer customer = new Customer.Builder().withCustomerTypeMatchesPattern(DEFAULT)\n            .build();\n        Set<ConstraintViolation<Customer>> violations = validator.validate(customer);\n        assertThat(violations.isEmpty()).isTrue();\n    }\n\n    @Test\n    public void whenEnumNull_thenShouldNotReportConstraintViolations() {\n        Customer customer = new Customer.Builder().withCustomerTypeMatchesPattern(null)\n            .build();\n        Set<ConstraintViolation<Customer>> violations = validator.validate(customer);\n        assertThat(violations.isEmpty()).isTrue();\n    }\n\n    @Test\n    public void whenEnumDoesNotMatchRegex_thenShouldGiveOccurrenceOfConstraintViolations() {\n        Customer customer = new Customer.Builder().withCustomerTypeMatchesPattern(OLD)\n            .build();\n        Set<ConstraintViolation<Customer>> violations = validator.validate(customer);\n        assertThat(violations.size()).isEqualTo(1);\n\n        assertThat(violations).anyMatch(CustomerUnitTest.havingPropertyPath(\"customerTypeMatchesPattern\")\n            .and(CustomerUnitTest.havingMessage(\"must match \\\"NEW|DEFAULT\\\"\")));\n    }\n}"}
{"code_source": "package com.baeldung.javaxval.enums.constraints;\n\nimport static java.lang.annotation.ElementType.ANNOTATION_TYPE;\nimport static java.lang.annotation.ElementType.CONSTRUCTOR;\nimport static java.lang.annotation.ElementType.FIELD;\nimport static java.lang.annotation.ElementType.METHOD;\nimport static java.lang.annotation.ElementType.PARAMETER;\nimport static java.lang.annotation.ElementType.TYPE_USE;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\nimport javax.validation.Constraint;\nimport javax.validation.Payload;\n\nimport com.baeldung.javaxval.enums.ValueOfEnumValidator;\n\n@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })\n@Retention(RUNTIME)\n@Documented\n@Constraint(validatedBy = ValueOfEnumValidator.class)\npublic @interface ValueOfEnum {\n    /**\n     * @return class containing enum values to which this String should match\n     */\n    Class<? extends Enum<?>> enumClass();\n\n    /**\n     * @return the error message template\n     */\n    String message() default \"must be any of enum {enumClass}\";\n\n    /**\n     * @return the groups the constraint belongs to\n     */\n    Class<?>[] groups() default {};\n\n    /**\n     * @return the payload associated to the constraint\n     */\n    Class<? extends Payload>[] payload() default {};\n}", "test_case": "package com.baeldung.javaxval.enums;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Set;\n\nimport javax.validation.ConstraintViolation;\nimport javax.validation.Validation;\nimport javax.validation.Validator;\n\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\nimport com.baeldung.javaxval.enums.demo.Customer;\nimport com.baeldung.javaxval.enums.demo.CustomerUnitTest;\n\npublic class ValueOfEnumValidatorUnitTest {\n\n    private static Validator validator;\n\n    @BeforeClass\n    public static void setupValidatorInstance() {\n        validator = Validation.buildDefaultValidatorFactory()\n            .getValidator();\n    }\n\n    @Test\n    public void whenStringAnyOfEnum_thenShouldNotReportConstraintViolations() {\n        Customer customer = new Customer.Builder().withCustomerTypeString(\"DEFAULT\")\n            .build();\n        Set<ConstraintViolation<Customer>> violations = validator.validate(customer);\n        assertThat(violations.isEmpty()).isTrue();\n    }\n\n    @Test\n    public void whenStringNull_thenShouldNotReportConstraintViolations() {\n        Customer customer = new Customer.Builder().withCustomerTypeString(null)\n            .build();\n        Set<ConstraintViolation<Customer>> violations = validator.validate(customer);\n        assertThat(violations.isEmpty()).isTrue();\n    }\n\n    @Test\n    public void whenStringNotAnyOfEnum_thenShouldGiveOccurrenceOfConstraintViolations() {\n        Customer customer = new Customer.Builder().withCustomerTypeString(\"test\")\n            .build();\n        Set<ConstraintViolation<Customer>> violations = validator.validate(customer);\n        assertThat(violations.size()).isEqualTo(1);\n\n        assertThat(violations).anyMatch(CustomerUnitTest.havingPropertyPath(\"customerTypeString\")\n            .and(CustomerUnitTest.havingMessage(\"must be any of enum class com.baeldung.javaxval.enums.demo.CustomerType\")));\n    }\n}"}
{"code_source": "package com.baeldung.javaxval.validationgroup;\n\nimport javax.validation.constraints.Email;\nimport javax.validation.constraints.NotBlank;\n\npublic class RegistrationForm {\n    @NotBlank(groups = BasicInfo.class)\n    private String firstName;\n    @NotBlank(groups = BasicInfo.class)\n    private String lastName;\n    @Email(groups = BasicInfo.class)\n    private String email;\n    @NotBlank(groups = BasicInfo.class)\n    private String phone;\n\n    @NotBlank(groups = { BasicInfo.class, AdvanceInfo.class })\n    private String captcha;\n\n    @NotBlank(groups = AdvanceInfo.class)\n    private String street;\n    @NotBlank(groups = AdvanceInfo.class)\n    private String houseNumber;\n    @NotBlank(groups = AdvanceInfo.class)\n    private String zipCode;\n    @NotBlank(groups = AdvanceInfo.class)\n    private String city;\n    @NotBlank(groups = AdvanceInfo.class)\n    private String country;\n\n    public String getStreet() {\n        return street;\n    }\n\n    public void setStreet(String street) {\n        this.street = street;\n    }\n\n    public String getHouseNumber() {\n        return houseNumber;\n    }\n\n    public void setHouseNumber(String houseNumber) {\n        this.houseNumber = houseNumber;\n    }\n\n    public String getZipCode() {\n        return zipCode;\n    }\n\n    public void setZipCode(String zipCode) {\n        this.zipCode = zipCode;\n    }\n\n    public String getCity() {\n        return city;\n    }\n\n    public void setCity(String city) {\n        this.city = city;\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public void setPhone(String phone) {\n        this.phone = phone;\n    }\n\n    public String getCaptcha() {\n        return captcha;\n    }\n\n    public void setCaptcha(String captcha) {\n        this.captcha = captcha;\n    }\n\n}\n", "test_case": "package com.baeldung.javaxval.validationgroup;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Set;\n\nimport javax.validation.ConstraintViolation;\nimport javax.validation.Validation;\nimport javax.validation.Validator;\n\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\nimport com.baeldung.javaxval.LocaleAwareUnitTest;\n\npublic class RegistrationFormUnitTest extends LocaleAwareUnitTest {\n    private static Validator validator;\n\n    @BeforeClass\n    public static void setupValidatorInstance() {\n        validator = Validation.buildDefaultValidatorFactory()\n            .getValidator();\n    }\n\n    @Test\n    public void whenBasicInfoIsNotComplete_thenShouldGiveConstraintViolationsOnlyForBasicInfo() {\n        RegistrationForm form = buildRegistrationFormWithBasicInfo();\n        form.setFirstName(\"\");\n        Set<ConstraintViolation<RegistrationForm>> violations = validator.validate(form, BasicInfo.class);\n        assertThat(violations.size()).isEqualTo(1);\n        violations.forEach(action -> {\n            assertThat(action.getMessage()).isEqualTo(\"must not be blank\");\n            assertThat(action.getPropertyPath()\n                .toString()).isEqualTo(\"firstName\");\n        });\n    }\n\n    @Test\n    public void whenAdvanceInfoIsNotComplete_thenShouldGiveConstraintViolationsOnlyForAdvanceInfo() {\n        RegistrationForm form = buildRegistrationFormWithAdvanceInfo();\n        form.setZipCode(\"\");\n        Set<ConstraintViolation<RegistrationForm>> violations = validator.validate(form, AdvanceInfo.class);\n        assertThat(violations.size()).isEqualTo(1);\n        violations.forEach(action -> {\n            assertThat(action.getMessage()).isEqualTo(\"must not be blank\");\n            assertThat(action.getPropertyPath()\n                .toString()).isEqualTo(\"zipCode\");\n        });\n    }\n\n    @Test\n    public void whenCaptchaIsBlank_thenShouldGiveConstraintViolationsForBasicInfo() {\n        RegistrationForm form = buildRegistrationFormWithBasicInfo();\n        form.setCaptcha(\"\");\n        Set<ConstraintViolation<RegistrationForm>> violations = validator.validate(form, BasicInfo.class);\n        assertThat(violations.size()).isEqualTo(1);\n        violations.forEach(action -> {\n            assertThat(action.getMessage()).isEqualTo(\"must not be blank\");\n            assertThat(action.getPropertyPath()\n                .toString()).isEqualTo(\"captcha\");\n        });\n    }\n\n    @Test\n    public void whenCaptchaIsBlank_thenShouldGiveConstraintViolationsForAdvanceInfo() {\n        RegistrationForm form = buildRegistrationFormWithAdvanceInfo();\n        form.setCaptcha(\"\");\n        Set<ConstraintViolation<RegistrationForm>> violations = validator.validate(form, AdvanceInfo.class);\n        assertThat(violations.size()).isEqualTo(1);\n        violations.forEach(action -> {\n            assertThat(action.getMessage()).isEqualTo(\"must not be blank\");\n            assertThat(action.getPropertyPath()\n                .toString()).isEqualTo(\"captcha\");\n        });\n    }\n\n    @Test\n    public void whenBasicInfoIsNotComplete_thenShouldGiveConstraintViolationsForBasicInfoOnly() {\n        RegistrationForm form = buildRegistrationFormWithBasicInfo();\n        form.setFirstName(\"\");\n        Set<ConstraintViolation<RegistrationForm>> violations = validator.validate(form, CompleteInfo.class);\n        assertThat(violations.size()).isEqualTo(1);\n        violations.forEach(action -> {\n            assertThat(action.getMessage()).isEqualTo(\"must not be blank\");\n            assertThat(action.getPropertyPath()\n                .toString()).isEqualTo(\"firstName\");\n        });\n    }\n\n    @Test\n    public void whenBasicInfoIsCompleteAndAdvanceInfoIsNotComplete_thenShouldGiveConstraintViolationsForAdvanceInfo() {\n        RegistrationForm form = buildRegistrationFormWithBasicAndAdvanceInfo();\n        form.setZipCode(\"\");\n        Set<ConstraintViolation<RegistrationForm>> violations = validator.validate(form, CompleteInfo.class);\n        assertThat(violations.size()).isEqualTo(1);\n        violations.forEach(action -> {\n            assertThat(action.getMessage()).isEqualTo(\"must not be blank\");\n            assertThat(action.getPropertyPath()\n                .toString()).isEqualTo(\"zipCode\");\n        });\n    }\n\n    @Test\n    public void whenBasicAndAdvanceInfoIsComplete_thenShouldNotGiveConstraintViolationsWithCompleteInfoValidationGroup() {\n        RegistrationForm form = buildRegistrationFormWithBasicAndAdvanceInfo();\n        Set<ConstraintViolation<RegistrationForm>> violations = validator.validate(form, CompleteInfo.class);\n        assertThat(violations.size()).isEqualTo(0);\n    }\n\n    @Test\n    public void whenBasicAndAdvanceInfoIsComplete_thenShouldNotGiveConstraintViolations() {\n        RegistrationForm form = buildRegistrationFormWithBasicAndAdvanceInfo();\n        Set<ConstraintViolation<RegistrationForm>> violations = validator.validate(form);\n        assertThat(violations.size()).isEqualTo(0);\n    }\n\n    private RegistrationForm buildRegistrationFormWithBasicInfo() {\n        RegistrationForm form = new RegistrationForm();\n        form.setFirstName(\"devender\");\n        form.setLastName(\"kumar\");\n        form.setEmail(\"anyemail@yopmail.com\");\n        form.setPhone(\"12345\");\n        form.setCaptcha(\"Y2HAhU5T\");\n        return form;\n    }\n\n    private RegistrationForm buildRegistrationFormWithAdvanceInfo() {\n        RegistrationForm form = new RegistrationForm();\n        return populateAdvanceInfo(form);\n    }\n\n    private RegistrationForm populateAdvanceInfo(RegistrationForm form) {\n        form.setCity(\"Berlin\");\n        form.setCountry(\"DE\");\n        form.setStreet(\"alexa str.\");\n        form.setZipCode(\"19923\");\n        form.setHouseNumber(\"2a\");\n        form.setCaptcha(\"Y2HAhU5T\");\n        return form;\n    }\n\n    private RegistrationForm buildRegistrationFormWithBasicAndAdvanceInfo() {\n        RegistrationForm form = buildRegistrationFormWithBasicInfo();\n        return populateAdvanceInfo(form);\n    }\n}\n"}
{"code_source": "package com.baeldung.javaxval.notnull;\n\nimport javax.validation.Validation;\nimport javax.validation.Validator;\nimport javax.validation.ValidatorFactory;\nimport javax.validation.constraints.NotNull;\n\npublic class NotNullMethodParameter {\n\n    ValidatorFactory factory = Validation.buildDefaultValidatorFactory();\n    Validator validator = factory.getValidator();\n\n    public int doesNotValidateNotNull(@NotNull String myString) {\n        return myString.length();\n    }\n\n    public int validateNotNull(@NotNull String myString) {\n        validator.validate(myString);\n        return myString.length();\n    }\n\n}", "test_case": "package com.baeldung.javaxval.notnull;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport org.junit.jupiter.api.Test;\n\nclass NotNullMethodParameterUnitTest {\n\n    private NotNullMethodParameter demo = new NotNullMethodParameter();\n\n    @Test\n    public void givenNull_whenInvokedwithNoValidator_thenNullPointerException() {\n        assertThrows(NullPointerException.class, () -> demo.doesNotValidateNotNull(null));\n    }\n\n    @Test\n    public void givenNull_whenInvokedWithValidator_thenIllegalArgumentException() {\n        assertThrows(IllegalArgumentException.class, () -> demo.validateNotNull(null));\n    }\n\n}"}
{"code_source": "package com.baeldung.javaxval.notnull;\n\nimport javax.validation.constraints.NotNull;\n\nimport org.springframework.stereotype.Component;\nimport org.springframework.validation.annotation.Validated;\n\n@Component\n@Validated\npublic class ValidatingComponent {\n\n    public int validateNotNull(@NotNull String data)\n    {\n        return data.length();\n    }\n\n    public int callAnnotatedMethod(String data) {\n        return validateNotNull(data);\n    }\n\n}\n", "test_case": "package com.baeldung.javaxval.notnull;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.util.Set;\n\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.constraints.NotNull;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass ValidatingComponentIntegrationTest {\n\n    @Autowired ValidatingComponent component;\n\n    @Test\n    void givenValue_whenValidate_thenSuccess() {\n        assertThat(component.validateNotNull(\"Not null!\"), is(9));\n    }\n\n    @Test\n    void givenNull_whenValidate_thenConstraintViolationException() {\n        ConstraintViolationException constraintViolationException = assertThrows(ConstraintViolationException.class, () -> component.validateNotNull(null));\n        Set<ConstraintViolation<?>> constraintViolations = constraintViolationException.getConstraintViolations();\n        assertThat(constraintViolations.iterator().next().getConstraintDescriptor().getAnnotation().annotationType(), is(NotNull.class));\n    }\n\n    @Test\n    void givenNull_whenOnlyCalledMethodHasAnnotation_thenNoValidation() {\n        assertThrows(NullPointerException.class, () -> component.callAnnotatedMethod(null));\n    }\n\n    @SpringBootApplication\n    static class TestApplication {\n    }\n\n}"}
{"code_source": "package com.baeldung.jaxb.dateunmarshalling;\n\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Unmarshaller;\nimport java.io.InputStream;\n\npublic class JaxbDateUnmarshalling {\n\n    public static final String DEFAULT_DATE_UNMARSHALLING_FILE = \"default-date-unmarshalling.xml\";\n    public static final String CUSTOM_DATE_UNMARSHALLING_FILE = \"custom-date-unmarshalling.xml\";\n\n    public static Book unmarshalDates(InputStream inputFile) throws JAXBException {\n        JAXBContext jaxbContext = JAXBContext.newInstance(Book.class);\n        Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();\n        return (Book) jaxbUnmarshaller.unmarshal(inputFile);\n    }\n\n    public static BookDateAdapter unmarshalDatesUsingCustomXmlAdapter(InputStream inputFile) throws JAXBException {\n        JAXBContext jaxbContext = JAXBContext.newInstance(BookDateAdapter.class);\n        Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();\n        return (BookDateAdapter) jaxbUnmarshaller.unmarshal(inputFile);\n    }\n\n    public static BookLocalDateTimeAdapter unmarshalDatesUsingJava8(InputStream inputFile) throws JAXBException {\n        JAXBContext jaxbContext = JAXBContext.newInstance(BookLocalDateTimeAdapter.class);\n        Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();\n        return (BookLocalDateTimeAdapter) jaxbUnmarshaller.unmarshal(inputFile);\n    }\n\n    public static InputStream getInputStream(String file) {\n        ClassLoader classLoader = JaxbDateUnmarshalling.class.getClassLoader();\n        return classLoader.getResourceAsStream(file);\n    }\n\n    public static void main(String[] args) throws JAXBException {\n        Book book = unmarshalDates(getInputStream(DEFAULT_DATE_UNMARSHALLING_FILE));\n        BookDateAdapter bookDateAdapter = unmarshalDatesUsingCustomXmlAdapter(getInputStream(CUSTOM_DATE_UNMARSHALLING_FILE));\n        BookLocalDateTimeAdapter bookLocalDateTimeAdapter = unmarshalDatesUsingJava8(getInputStream(CUSTOM_DATE_UNMARSHALLING_FILE));\n        System.out.println(book);\n        System.out.println(bookDateAdapter);\n        System.out.println(bookLocalDateTimeAdapter);\n    }\n\n}\n", "test_case": "package com.baeldung.jaxb.dateunmarshalling;\n\nimport org.junit.Test;\n\nimport javax.xml.bind.JAXBException;\nimport javax.xml.datatype.DatatypeConfigurationException;\nimport javax.xml.datatype.DatatypeFactory;\nimport javax.xml.datatype.XMLGregorianCalendar;\nimport java.io.InputStream;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Date;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class JaxbDateUnmarshallingUnitTest {\n\n    @Test\n    public void whenUnmarshalDatesIsCalled_ThenCorrectDateIsReturned() throws JAXBException, DatatypeConfigurationException {\n        InputStream inputStream = JaxbDateUnmarshalling.getInputStream(JaxbDateUnmarshalling.DEFAULT_DATE_UNMARSHALLING_FILE);\n        XMLGregorianCalendar expected = DatatypeFactory.newInstance().newXMLGregorianCalendar(\"1979-11-28T02:31:32\");\n\n        Book book = JaxbDateUnmarshalling.unmarshalDates(inputStream);\n\n        assertEquals(expected, book.getPublished());\n    }\n\n    @Test\n    public void whenUnmarshalDatesUsingCustomXmlAdapterIsCalled_ThenCorrectDateIsReturned() throws JAXBException, ParseException {\n        InputStream inputStream = JaxbDateUnmarshalling.getInputStream(JaxbDateUnmarshalling.CUSTOM_DATE_UNMARSHALLING_FILE);\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n        Date expected = format.parse(\"1979-11-28 02:31:32\");\n\n        BookDateAdapter book = JaxbDateUnmarshalling.unmarshalDatesUsingCustomXmlAdapter(inputStream);\n\n        assertEquals(expected, book.getPublished());\n    }\n\n    @Test\n    public void whenUnmarshalDatesUsingJava8IsCalled_ThenCorrectDateIsReturned() throws JAXBException {\n        InputStream inputStream = JaxbDateUnmarshalling.getInputStream(JaxbDateUnmarshalling.CUSTOM_DATE_UNMARSHALLING_FILE);\n        DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n        LocalDateTime expected = LocalDateTime.parse(\"1979-11-28 02:31:32\", dateFormat);\n\n        BookLocalDateTimeAdapter book = JaxbDateUnmarshalling.unmarshalDatesUsingJava8(inputStream);\n\n        assertEquals(expected, book.getPublished());\n    }\n\n}"}
{"code_source": "package com.baeldung.escape;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.gson.JsonObject;\nimport org.json.JSONObject;\n\nclass JsonEscape {\n\n    String escapeJson(String input) {\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"message\", input);\n        return jsonObject.toString();\n    }\n\n    String escapeGson(String input) {\n        JsonObject gsonObject = new JsonObject();\n        gsonObject.addProperty(\"message\", input);\n        return gsonObject.toString();\n    }\n\n    String escapeJackson(String input) throws JsonProcessingException {\n        return new ObjectMapper().writeValueAsString(new Payload(input));\n    }\n\n    static class Payload {\n        String message;\n\n        Payload(String message) {\n            this.message = message;\n        }\n\n        public String getMessage() {\n            return message;\n        }\n\n        public void setMessage(String message) {\n            this.message = message;\n        }\n    }\n}\n", "test_case": "package com.baeldung.escape;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass JsonEscapeUnitTest {\n\n    private JsonEscape testedInstance;\n    private static final String EXPECTED = \"{\\\"message\\\":\\\"Hello \\\\\\\"World\\\\\\\"\\\"}\";\n\n    @BeforeEach\n    void setUp() {\n        testedInstance = new JsonEscape();\n    }\n\n    @Test\n    void escapeJson() {\n        String actual = testedInstance.escapeJson(\"Hello \\\"World\\\"\");\n        assertEquals(EXPECTED, actual);\n    }\n\n    @Test\n    void escapeGson() {\n        String actual = testedInstance.escapeGson(\"Hello \\\"World\\\"\");\n        assertEquals(EXPECTED, actual);\n    }\n\n    @Test\n    void escapeJackson() throws JsonProcessingException {\n        String actual = testedInstance.escapeJackson(\"Hello \\\"World\\\"\");\n        assertEquals(EXPECTED, actual);\n    }\n}"}
{"code_source": "package com.baeldung.jsonjava;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\npublic class JSONArrayGetValueByKey {\n\n    public List<String> getValuesByKeyInJSONArray(String jsonArrayStr, String key) {\n        List<String> values = new ArrayList<>();\n        JSONArray jsonArray = new JSONArray(jsonArrayStr);\n        for (int idx = 0; idx < jsonArray.length(); idx++) {\n            JSONObject jsonObj = jsonArray.getJSONObject(idx);\n            values.add(jsonObj.optString(key));\n        }\n        return values;\n    }\n\n    public List<String> getValuesByKeyInJSONArrayUsingJava8(String jsonArrayStr, String key) {\n        JSONArray jsonArray = new JSONArray(jsonArrayStr);\n        return IntStream.range(0, jsonArray.length())\n            .mapToObj(index -> ((JSONObject) jsonArray.get(index)).optString(key))\n            .collect(Collectors.toList());\n    }\n\n}\n", "test_case": "package com.baeldung.jsonjava;\n\nimport org.junit.Test;\n\nimport java.util.List;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class JSONArrayGetValueByKeyUnitTest {\n\n    private static final JSONArrayGetValueByKey obj = new JSONArrayGetValueByKey();\n\n    @Test\n    public void givenJSONArrayAndAKey_thenReturnAllValuesForGivenKey() {\n        String jsonStr = \"[\" + \" {\" + \" \\\"name\\\": \\\"John\\\",\" + \" \\\"city\\\": \\\"chicago\\\",\" + \" \\\"age\\\": \\\"22\\\" \" + \"},\" + \" { \" + \"\\\"name\\\": \\\"Gary\\\",\" + \" \\\"city\\\": \\\"florida\\\",\" + \" \\\"age\\\": \\\"35\\\" \" + \"},\" + \" { \" + \"\\\"name\\\": \\\"Selena\\\",\"\n            + \" \\\"city\\\": \\\"vegas\\\",\" + \" \\\"age\\\": \\\"18\\\" \" + \"} \" + \"]\";\n\n        List<String> actualValues = obj.getValuesByKeyInJSONArray(jsonStr, \"name\");\n\n        assertThat(actualValues)\n          .containsExactlyInAnyOrder(\"John\", \"Gary\", \"Selena\");\n    }\n\n    @Test\n    public void givenJSONArrayAndAKey_whenUsingJava8Syntax_thenReturnAllValuesForGivenKey() {\n        String jsonStr = \"[\" + \" {\" + \" \\\"name\\\": \\\"John\\\",\" + \" \\\"city\\\": \\\"chicago\\\",\" + \" \\\"age\\\": \\\"22\\\" \" + \"},\" + \" { \" + \"\\\"name\\\": \\\"Gary\\\",\" + \" \\\"city\\\": \\\"florida\\\",\" + \" \\\"age\\\": \\\"35\\\" \" + \"},\" + \" { \" + \"\\\"name\\\": \\\"Selena\\\",\"\n            + \" \\\"city\\\": \\\"vegas\\\",\" + \" \\\"age\\\": \\\"18\\\" \" + \"} \" + \"]\";\n\n        List<String> actualValues = obj.getValuesByKeyInJSONArrayUsingJava8(jsonStr, \"name\");\n\n        assertThat(actualValues)\n          .containsExactlyInAnyOrder(\"John\", \"Gary\", \"Selena\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.jsonjava;\n\nimport org.json.JSONObject;\n\npublic class ObjectToFromJSON {\n\n\tpublic static void main(String args[]) throws Exception {\n        System.out.println(\"\\n5.1. Creating JSONObject from Java Bean: \");\n        jsonFromDemoBean();\n\t}\n    \n    public static void jsonFromDemoBean() {\n        DemoBean demo = new DemoBean();\n        demo.setId(1);\n        demo.setName(\"lorem ipsum\");\n        demo.setActive(true);\n         \n        JSONObject jo = new JSONObject(demo);\n        System.out.println(jo);\n    }\n}\n", "test_case": "package com.baeldung.jsonjava;\n\nimport org.json.JSONObject;\nimport org.junit.Test;\n\nimport static net.javacrumbs.jsonunit.assertj.JsonAssertions.assertThatJson;\n\npublic class ObjectToFromJSONIntegrationTest {\n\n    @Test\n    public void givenDemoBean_thenCreateJSONObject() {\n        DemoBean demo = new DemoBean();\n        demo.setId(1);\n        demo.setName(\"lorem ipsum\");\n        demo.setActive(true);\n\n        JSONObject jo = new JSONObject(demo);\n\n        assertThatJson(jo)\n          .isEqualTo(\"{\\\"name\\\":\\\"lorem ipsum\\\",\\\"active\\\":true,\\\"id\\\":1}\");\n    }\n}\n"}
{"code_source": "package com.baeldung.jsonobject.iterate;\n\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\n\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\npublic class JSONObjectIterator {\n\n    private Map<String, Object> keyValuePairs;\n\n    public JSONObjectIterator() {\n        keyValuePairs = new HashMap<>();\n    }\n\n    public void handleValue(String key, Object value) {\n        if (value instanceof JSONArray) {\n            handleJSONArray(key, (JSONArray) value);\n        } else if (value instanceof JSONObject) {\n            handleJSONObject((JSONObject) value);\n        }\n        keyValuePairs.put(key, value);\n    }\n\n    public void handleJSONObject(JSONObject jsonObject) {\n        Iterator<String> jsonObjectIterator = jsonObject.keys();\n        jsonObjectIterator.forEachRemaining(key -> {\n            Object value = jsonObject.get(key);\n            handleValue(key, value);\n        });\n    }\n\n    public void handleJSONArray(String key, JSONArray jsonArray) {\n        Iterator<Object> jsonArrayIterator = jsonArray.iterator();\n        jsonArrayIterator.forEachRemaining(element -> {\n            handleValue(key, element);\n        });\n    }\n\n    public Map<String, Object> getKeyValuePairs() {\n        return keyValuePairs;\n    }\n\n    public void setKeyValuePairs(Map<String, Object> keyValuePairs) {\n        this.keyValuePairs = keyValuePairs;\n    }\n\n}\n", "test_case": "package com.baeldung.jsonobject.iterate;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Map;\n\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.junit.Test;\n\npublic class JSONObjectIteratorUnitTest {\n\n    private JSONObjectIterator jsonObjectIterator = new JSONObjectIterator();\n\n    @Test\n    public void givenJSONObject_whenIterating_thenGetKeyValuePairs() {\n        JSONObject jsonObject = getJsonObject();\n\n        jsonObjectIterator.handleJSONObject(jsonObject);\n\n        Map<String, Object> keyValuePairs = jsonObjectIterator.getKeyValuePairs();\n        assertThat(keyValuePairs.get(\"rType\")).isEqualTo(\"Regular\");\n        assertThat(keyValuePairs.get(\"rId\")).isEqualTo(\"1001\");\n        assertThat(keyValuePairs.get(\"cType\")).isEqualTo(\"Chocolate\");\n        assertThat(keyValuePairs.get(\"cId\")).isEqualTo(\"1002\");\n        assertThat(keyValuePairs.get(\"bType\")).isEqualTo(\"BlueBerry\");\n        assertThat(keyValuePairs.get(\"bId\")).isEqualTo(\"1003\");\n        assertThat(keyValuePairs.get(\"name\")).isEqualTo(\"Cake\");\n        assertThat(keyValuePairs.get(\"cakeId\")).isEqualTo(\"0001\");\n        assertThat(keyValuePairs.get(\"type\")).isEqualTo(\"donut\");\n        assertThat(keyValuePairs.get(\"Type\")).isEqualTo(\"Maple\");\n        assertThat(keyValuePairs.get(\"tId\")).isEqualTo(\"5001\");\n        assertThat(keyValuePairs.get(\"batters\")\n            .toString()).isEqualTo(\"[{\\\"rType\\\":\\\"Regular\\\",\\\"rId\\\":\\\"1001\\\"},{\\\"cType\\\":\\\"Chocolate\\\",\\\"cId\\\":\\\"1002\\\"},{\\\"bType\\\":\\\"BlueBerry\\\",\\\"bId\\\":\\\"1003\\\"}]\");\n        assertThat(keyValuePairs.get(\"cakeShapes\")\n            .toString()).isEqualTo(\"[\\\"square\\\",\\\"circle\\\",\\\"heart\\\"]\");\n        assertThat(keyValuePairs.get(\"topping\")\n            .toString()).isEqualTo(\"{\\\"Type\\\":\\\"Maple\\\",\\\"tId\\\":\\\"5001\\\"}\");\n    }\n\n    private JSONObject getJsonObject() {\n        JSONObject cake = new JSONObject();\n        cake.put(\"cakeId\", \"0001\");\n        cake.put(\"type\", \"donut\");\n        cake.put(\"name\", \"Cake\");\n\n        JSONArray batters = new JSONArray();\n        JSONObject regular = new JSONObject();\n        regular.put(\"rId\", \"1001\");\n        regular.put(\"rType\", \"Regular\");\n        batters.put(regular);\n        JSONObject chocolate = new JSONObject();\n        chocolate.put(\"cId\", \"1002\");\n        chocolate.put(\"cType\", \"Chocolate\");\n        batters.put(chocolate);\n        JSONObject blueberry = new JSONObject();\n        blueberry.put(\"bId\", \"1003\");\n        blueberry.put(\"bType\", \"BlueBerry\");\n        batters.put(blueberry);\n\n        JSONArray cakeShapes = new JSONArray();\n        cakeShapes.put(\"square\");\n        cakeShapes.put(\"circle\");\n        cakeShapes.put(\"heart\");\n\n        cake.put(\"cakeShapes\", cakeShapes);\n\n        cake.put(\"batters\", batters);\n\n        JSONObject topping = new JSONObject();\n        topping.put(\"tId\", \"5001\");\n        topping.put(\"Type\", \"Maple\");\n\n        cake.put(\"topping\", topping);\n\n        return cake;\n    }\n\n}\n"}
{"code_source": "package com.baeldung.jsonpointer;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\nimport javax.json.Json;\nimport javax.json.JsonObject;\nimport javax.json.JsonPointer;\nimport javax.json.JsonReader;\nimport javax.json.JsonString;\nimport javax.json.JsonStructure;\n\npublic class JsonPointerCrud {\n\n    private JsonStructure jsonStructure = null;\n\n    public JsonPointerCrud(String fileName) throws IOException {\n\n        try (JsonReader reader = Json.createReader(Files.newBufferedReader(Paths.get(fileName)))) {\n            jsonStructure = reader.read();\n        } catch (FileNotFoundException e) {\n            System.out.println(\"Error to open json file: \" + e.getMessage());\n        }\n\n    }\n\n    public JsonPointerCrud(InputStream stream) {\n\n        JsonReader reader = Json.createReader(stream);\n        jsonStructure = reader.read();\n        reader.close();\n\n    }\n\n    public JsonStructure insert(String key, String value) {\n\n        JsonPointer jsonPointer = Json.createPointer(\"/\" + key);\n        JsonString jsonValue = Json.createValue(value);\n        jsonStructure = jsonPointer.add(jsonStructure, jsonValue);\n\n        return jsonStructure;\n\n    }\n\n    public JsonStructure update(String key, String newValue) {\n\n        JsonPointer jsonPointer = Json.createPointer(\"/\" + key);\n        JsonString jsonNewValue = Json.createValue(newValue);\n        jsonStructure = jsonPointer.replace(jsonStructure, jsonNewValue);\n\n        return jsonStructure;\n    }\n\n    public JsonStructure delete(String key) {\n\n        JsonPointer jsonPointer = Json.createPointer(\"/\" + key);\n        jsonPointer.getValue(jsonStructure);\n        jsonStructure = jsonPointer.remove(jsonStructure);\n\n        return jsonStructure;\n\n    }\n\n    public String fetchValueFromKey(String key) {\n        JsonPointer jsonPointer = Json.createPointer(\"/\" + key);\n        JsonString jsonString = (JsonString) jsonPointer.getValue(jsonStructure);\n\n        return jsonString.getString();\n    }\n\n    public String fetchListValues(String key) {\n        JsonPointer jsonPointer = Json.createPointer(\"/\" + key);\n        JsonObject jsonObject = (JsonObject) jsonPointer.getValue(jsonStructure);\n\n        return jsonObject.toString();\n    }\n\n    public String fetchFullJSON() {\n        JsonPointer jsonPointer = Json.createPointer(\"\");\n        JsonObject jsonObject = (JsonObject) jsonPointer.getValue(jsonStructure);\n\n        return jsonObject.toString();\n\n    }\n\n    public boolean check(String key) {\n        JsonPointer jsonPointer = Json.createPointer(\"/\" + key);\n        boolean found = jsonPointer.containsValue(jsonStructure);\n\n        return found;\n    }\n}\n", "test_case": "package com.baeldung.jsonpointer;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\npublic class JsonPointerCrudUnitTest {\n\n    @Test\n    public void testJsonPointerCrudForAddress() {\n\n        JsonPointerCrud jsonPointerCrud = new JsonPointerCrud(JsonPointerCrudUnitTest.class.getResourceAsStream(\"/address.json\"));\n\n        assertFalse(jsonPointerCrud.check(\"city\"));\n\n        // insert a value\n        jsonPointerCrud.insert(\"city\", \"Rio de Janeiro\");\n\n        assertTrue(jsonPointerCrud.check(\"city\"));\n\n        // fetch full json\n        String fullJSON = jsonPointerCrud.fetchFullJSON();\n\n        assertTrue(fullJSON.contains(\"name\"));\n\n        assertTrue(fullJSON.contains(\"city\"));\n\n        // fetch value\n        String cityName = jsonPointerCrud.fetchValueFromKey(\"city\");\n\n        assertEquals(cityName, \"Rio de Janeiro\");\n\n        // update value\n        jsonPointerCrud.update(\"city\", \"Sao Paulo\");\n\n        // fetch value\n        cityName = jsonPointerCrud.fetchValueFromKey(\"city\");\n\n        assertEquals(cityName, \"Sao Paulo\");\n\n        // delete\n        jsonPointerCrud.delete(\"city\");\n\n        assertFalse(jsonPointerCrud.check(\"city\"));\n\n    }\n\n    @Test\n    public void testJsonPointerCrudForBooks() {\n\n        JsonPointerCrud jsonPointerCrud = new JsonPointerCrud(JsonPointerCrudUnitTest.class.getResourceAsStream(\"/books.json\"));\n\n        // fetch value\n        String book = jsonPointerCrud.fetchListValues(\"books/1\");\n\n        assertEquals(book, \"{\\\"title\\\":\\\"Title 2\\\",\\\"author\\\":\\\"John Doe\\\"}\");\n\n    }\n}"}
{"code_source": "package com.baeldung.jsontojavaclass;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URL;\n\nimport org.jsonschema2pojo.DefaultGenerationConfig;\nimport org.jsonschema2pojo.GenerationConfig;\nimport org.jsonschema2pojo.Jackson2Annotator;\nimport org.jsonschema2pojo.SchemaGenerator;\nimport org.jsonschema2pojo.SchemaMapper;\nimport org.jsonschema2pojo.SchemaStore;\nimport org.jsonschema2pojo.SourceType;\nimport org.jsonschema2pojo.rules.RuleFactory;\n\nimport com.sun.codemodel.JCodeModel;\n\npublic class JsonToJavaClassConversion {\n\n    public static void main(String[] args) {\n        String packageName = \"com.baeldung.jsontojavaclass.pojo\";\n        String basePath = \"src/main/resources\";\n        File inputJson = new File(basePath + File.separator + \"input.json\");\n        File outputPojoDirectory = new File(basePath + File.separator + \"convertedPojo\");\n        outputPojoDirectory.mkdirs();\n        try {\n            new JsonToJavaClassConversion().convertJsonToJavaClass(inputJson.toURI().toURL(), outputPojoDirectory, packageName, inputJson.getName().replace(\".json\", \"\"));\n        } catch (IOException e) {\n            System.out.println(\"Encountered issue while converting to pojo: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n\n    public void convertJsonToJavaClass(URL inputJsonUrl, File outputJavaClassDirectory, String packageName, String javaClassName) throws IOException {\n        JCodeModel jcodeModel = new JCodeModel();\n\n        GenerationConfig config = new DefaultGenerationConfig() {\n            @Override\n            public boolean isGenerateBuilders() {\n                return true;\n            }\n\n            @Override\n            public SourceType getSourceType() {\n                return SourceType.JSON;\n            }\n        };\n\n        SchemaMapper mapper = new SchemaMapper(new RuleFactory(config, new Jackson2Annotator(config), new SchemaStore()), new SchemaGenerator());\n        mapper.generate(jcodeModel, javaClassName, packageName, inputJsonUrl);\n\n        jcodeModel.build(outputJavaClassDirectory);\n    }\n\n}\n", "test_case": "package com.baeldung.jsontojavaclass;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.util.Arrays;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nclass JsonToJavaClassConversionUnitTest {\n\n    private JsonToJavaClassConversion jsonToJavaConversion = new JsonToJavaClassConversion();\n\n    @Test\n    void whenProvideInputJSON_thenGenerateJavaClass() throws MalformedURLException, IOException {\n\n        String packageName = \"com.baeldung.jsontojavaclass.pojo\";\n\n        // load input JSON file\n        String jsonPath = \"src/test/resources/\";\n        File inputJson = new File(jsonPath + \"sample_input.json\");\n\n        // create the local directory for generating the Java Class file\n        String outputPath = \"src/test/resources/\";\n        File outputJavaClassDirectory = new File(outputPath);\n\n        String javaClassName = \"SamplePojo\";\n\n        jsonToJavaConversion.convertJsonToJavaClass(inputJson.toURI()\n                .toURL(), outputJavaClassDirectory, packageName, javaClassName);\n\n        File outputJavaClassPath = new File(outputPath + packageName.replace(\".\", \"/\"));\n        Assertions.assertTrue(Arrays.stream(outputJavaClassPath.listFiles()).peek(System.out::println).anyMatch(file -> (javaClassName+\".java\").equalsIgnoreCase(file.getName())));\n\n    }\n\n}\n"}
{"code_source": "package com.baeldung.jsonvalidation;\n\nimport java.io.IOException;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonParser;\nimport com.google.gson.JsonSyntaxException;\nimport com.google.gson.TypeAdapter;\n\npublic class GsonValidator {\n\n    final TypeAdapter<JsonElement> strictAdapter = new Gson().getAdapter(JsonElement.class);\n\n    public boolean isValid(String json) {\n        try {\n            JsonParser.parseString(json);\n        } catch (JsonSyntaxException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean isValidStrict(String json) {\n        try {\n            strictAdapter.fromJson(json);\n        } catch (JsonSyntaxException | IOException e) {\n            return false;\n        }\n        return true;\n    }\n}\n", "test_case": "package com.baeldung.jsonvalidation;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class GsonValidatorUnitTest {\n\n    private final GsonValidator validator = new GsonValidator();\n\n    @Test\n    public void givenValidObjectJson_whenValidatingNonStrict_thenValid() {\n        String json = \"{\\\"email\\\": \\\"example@com\\\", \\\"name\\\": \\\"John\\\"}\";\n        assertTrue(validator.isValid(json));\n    }\n\n    @Test\n    public void givenValidArrayJson_whenValidatingNonStrict_thenValid() {\n        String json = \"[{\\\"email\\\": \\\"example@com\\\", \\\"name\\\": \\\"John\\\"},{\\\"email\\\": \\\"example1@com\\\", \\\"name\\\": \\\"Bob\\\"}]\";\n        assertTrue(validator.isValid(json));\n    }\n\n    @Test\n    public void givenInvalidJson_whenValidatingNonStrict_thenValid() {\n        String json = \"Invalid_Json\";\n        assertTrue(validator.isValid(json));\n    }\n\n    @Test\n    public void givenInvalidJson_whenValidatingStrict_thenInvalid() {\n        String json = \"Invalid_Json\";\n        assertFalse(validator.isValidStrict(json));\n    }\n}\n"}
{"code_source": "package com.baeldung.jsonvalidation;\n\nimport com.fasterxml.jackson.core.JacksonException;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.json.JsonMapper;\n\npublic class JacksonValidator {\n\n    final ObjectMapper mapper = JsonMapper.builder()\n        .enable(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)\n        .build();\n\n    public boolean isValid(String json) {\n        try {\n            mapper.readTree(json);\n        } catch (JacksonException e) {\n            return false;\n        }\n        return true;\n    }\n}\n", "test_case": "package com.baeldung.jsonvalidation;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class JacksonValidatorUnitTest {\n\n    private final JacksonValidator validator = new JacksonValidator();\n\n    @Test\n    public void givenValidObjectJson_whenValidating_thenValid() {\n        String json = \"{\\\"email\\\": \\\"example@com\\\", \\\"name\\\": \\\"John\\\"}\";\n        assertTrue(validator.isValid(json));\n    }\n\n    @Test\n    public void givenValidArrayJson_whenValidating_thenValid() {\n        String json = \"[{\\\"email\\\": \\\"example@com\\\", \\\"name\\\": \\\"John\\\"},{\\\"email\\\": \\\"example1@com\\\", \\\"name\\\": \\\"Bob\\\"}]\";\n        assertTrue(validator.isValid(json));\n    }\n\n    @Test\n    public void givenInvalidJson_whenValidating_thenInvalid() {\n        String json = \"Invalid_Json\";\n        assertFalse(validator.isValid(json));\n    }\n}\n"}
{"code_source": "package com.baeldung.jsonvalidation;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\npublic class JsonValidator {\n\n    public boolean isValidObject(String json) {\n        try {\n            new JSONObject(json);\n        } catch (JSONException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean isValidJson(String json) {\n        try {\n            new JSONObject(json);\n        } catch (JSONException e) {\n            try {\n                new JSONArray(json);\n            } catch (JSONException ne) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "test_case": "package com.baeldung.jsonvalidation;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class JsonValidatorUnitTest {\n\n    private final JsonValidator validator = new JsonValidator();\n\n    @Test\n    public void givenValidObjectJson_whenValidatingObject_thenValid() {\n        String json = \"{\\\"email\\\": \\\"example@com\\\", \\\"name\\\": \\\"John\\\"}\";\n        assertTrue(validator.isValidObject(json));\n    }\n\n    @Test\n    public void givenInvalidJson_whenValidating_thenInvalid() {\n        String json = \"Invalid_Json\";\n        assertFalse(validator.isValidObject(json));\n    }\n\n    @Test\n    public void givenValidArrayJson_whenValidatingObject_thenInvalid() {\n        String json = \"[{\\\"email\\\": \\\"example@com\\\", \\\"name\\\": \\\"John\\\"},{\\\"email\\\": \\\"example1@com\\\", \\\"name\\\": \\\"Bob\\\"}]\";\n        assertFalse(validator.isValidObject(json));\n    }\n\n    @Test\n    public void givenValidJson_whenValidatingJson_thenValid() {\n        String json = \"[{\\\"email\\\": \\\"example@com\\\", \\\"name\\\": \\\"John\\\"},{\\\"email\\\": \\\"example1@com\\\", \\\"name\\\": \\\"Bob\\\"}]\";\n        assertTrue(validator.isValidJson(json));\n    }\n}\n"}
{"code_source": "package com.baeldung.jsonvaluegetter;\n\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class JSONObjectValueGetter {\n\n    /**\n     * Get values associated with the provided key in the given JSONObject instance\n     *\n     * @param jsonObject JSONObject instance in which to search the key\n     * @param key        Key we're interested in\n     *\n     * @return List of values associated with the given key, in the order of appearance.\n     *         If the key is absent, empty list is returned.\n     */\n    public List<String> getValuesInObject(JSONObject jsonObject, String key) {\n        List<String> accumulatedValues = new ArrayList<>();\n        for (String currentKey : jsonObject.keySet()) {\n            Object value = jsonObject.get(currentKey);\n            if (currentKey.equals(key)) {\n                accumulatedValues.add(value.toString());\n            }\n\n            if (value instanceof JSONObject) {\n                accumulatedValues.addAll(getValuesInObject((JSONObject)value, key));\n            } else if (value instanceof JSONArray) {\n                accumulatedValues.addAll(getValuesInArray((JSONArray)value, key));\n            }\n        }\n\n        return accumulatedValues;\n    }\n\n    /**\n     * Get values associated with the provided key in the given JSONArray instance\n     *\n     * @param jsonArray JSONArray instance in which to search the key\n     * @param key       Key we're interested in\n     *\n     * @return List of values associated with the given key, in the order of appearance.\n     *         If the key is absent, empty list is returned.\n     */\n    public List<String> getValuesInArray(JSONArray jsonArray, String key) {\n        List<String> accumulatedValues = new ArrayList<>();\n        for (Object obj : jsonArray) {\n            if (obj instanceof JSONArray) {\n                accumulatedValues.addAll(getValuesInArray((JSONArray)obj, key));\n            } else if (obj instanceof JSONObject) {\n                accumulatedValues.addAll(getValuesInObject((JSONObject)obj, key));\n            }\n        }\n\n        return accumulatedValues;\n    }\n\n    /**\n     * Among all the values associated with the given key, get the N-th value\n     *\n     * @param jsonObject JSONObject instance in which to search the key\n     * @param key        Key we're interested in\n     * @param N          Index of the value to get\n     *\n     * @return N-th value associated with the key, or null if the key is absent or\n     *         the number of values associated with the key is less than N\n     */\n    public String getNthValue(JSONObject jsonObject, String key, int N) {\n        List<String> values = getValuesInObject(jsonObject, key);\n        return (values.size() >= N) ? values.get(N - 1) : null;\n    }\n\n    /**\n     * Count the number of values associated with the given key\n     *\n     * @param jsonObject JSONObject instance in which to count the key\n     * @param key        Key we're interested in\n     *\n     * @return The number of values associated with the given key\n     */\n    public int getCount(JSONObject jsonObject, String key) {\n        List<String> values = getValuesInObject(jsonObject, key);\n        return values.size();\n    }\n}\n", "test_case": "package com.baeldung.jsonvaluegetter;\n\nimport org.apache.commons.io.IOUtils;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\npublic class JSONObjectValueGetterUnitTest {\n\n    private static JSONObject jsonObject;\n    private static JSONObjectValueGetter jsonObjectValueGetter = new JSONObjectValueGetter();\n\n    @BeforeAll\n    public static void loadJsonContent() throws IOException {\n        InputStream inputStream = JSONObjectValueGetterUnitTest.class.getClassLoader().getResourceAsStream(\"employee.json\");\n        String jsonString = IOUtils.toString(inputStream, \"UTF-8\");\n        jsonObject = new JSONObject(jsonString);\n    }\n\n    @Test\n    public void getValueDirectly() {\n        JSONArray family = jsonObject.getJSONArray(\"family\");\n        JSONObject sonObject = family.getJSONObject(1);\n        JSONObject sonData = sonObject.getJSONObject(\"son\");\n        String sonName = sonData.getString(\"name\");\n        Assertions.assertEquals(sonName, \"Peter\");\n    }\n\n    @Test\n    public void getAllAssociatedValuesRecursively() {\n        List<String> values = jsonObjectValueGetter.getValuesInObject(jsonObject, \"son\");\n        Assertions.assertEquals(values.size(), 1);\n\n        String sonString = values.get(0);\n        Assertions.assertTrue(sonString.contains(\"Peter\"));\n        Assertions.assertTrue(sonString.contains(\"Schoolboy\"));\n        Assertions.assertTrue(sonString.contains(\"11\"));\n\n        values = jsonObjectValueGetter.getValuesInObject(jsonObject, \"name\");\n        Assertions.assertEquals(values.size(), 3);\n\n        Assertions.assertEquals(values.get(0), \"Bob\");\n        Assertions.assertEquals(values.get(1), \"Alice\");\n        Assertions.assertEquals(values.get(2), \"Peter\");\n    }\n\n    @Test\n    public void getNthValueRecursively() {\n        Assertions.assertEquals(jsonObjectValueGetter.getNthValue(jsonObject, \"name\", 1), \"Bob\");\n        Assertions.assertEquals(jsonObjectValueGetter.getNthValue(jsonObject, \"name\", 2), \"Alice\");\n        Assertions.assertEquals(jsonObjectValueGetter.getNthValue(jsonObject, \"name\", 3), \"Peter\");\n        Assertions.assertNull(jsonObjectValueGetter.getNthValue(jsonObject, \"nonExistingKey\", 1));\n    }\n\n    @Test\n    public void getCountRecursively() {\n        Assertions.assertEquals(jsonObjectValueGetter.getCount(jsonObject, \"name\"), 3);\n        Assertions.assertEquals(jsonObjectValueGetter.getCount(jsonObject, \"age\"), 3);\n        Assertions.assertEquals(jsonObjectValueGetter.getCount(jsonObject, \"occupation\"), 1);\n        Assertions.assertEquals(jsonObjectValueGetter.getCount(jsonObject, \"nonExistingKey\"), 0);\n    }\n}\n"}
{"code_source": "/**\n * \n */\npackage com.baeldung.abstractclass.abstractmethod;\n\n/**\n * When method calls abstract method.\n */\npublic abstract class AbstractMethodCalling {\n\n    public abstract String abstractFunc();\n\n    public String defaultImpl() {\n        String res = abstractFunc();\n        return (res == null) ? \"Default\" : (res + \" Default\");\n    }\n}\n", "test_case": "package com.baeldung.abstractclass.abstractmethod;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\npublic class AbstractMethodCallingUnitTest {\n\n    private AbstractMethodCalling cls;\n\n    @BeforeEach\n    public void setup() {\n        cls = Mockito.mock(AbstractMethodCalling.class);\n    }\n\n    @Test\n    public void givenDefaultImpl_whenMockAbstractFunc_thenExpectedBehaviour() {\n        Mockito\n          .when(cls.abstractFunc())\n          .thenReturn(\"Abstract\");\n        Mockito\n          .doCallRealMethod()\n          .when(cls)\n          .defaultImpl();\n\n        // validate result by mock abstractFunc's behaviour\n        Assertions.assertEquals(\"Abstract Default\", cls.defaultImpl());\n\n        // check the value with null response from abstract method\n        Mockito\n          .doReturn(null)\n          .when(cls)\n          .abstractFunc();\n        Assertions.assertEquals(\"Default\", cls.defaultImpl());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.abstractclass.indepedentmethod;\n\n/**\n * Test Independent Method\n * \n */\npublic abstract class AbstractIndependent {\n\n    public abstract int abstractFunc();\n\n    public String defaultImpl() {\n        return \"DEFAULT-1\";\n    }\n}\n", "test_case": "/**\n * \n */\npackage com.baeldung.abstractclass.indepedentmethod;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\npublic class AbstractIndependentUnitTest {\n\n    @Test\n    public void givenNonAbstractMethod_whenConcreteImpl_testCorrectBehaviour() {\n        ConcreteImpl conClass = new ConcreteImpl();\n        String actual = conClass.defaultImpl();\n\n        Assertions.assertEquals(\"DEFAULT-1\", actual);\n    }\n\n    @Test\n    public void givenNonAbstractMethod_whenMockitoMock_testCorrectBehaviour() {\n        AbstractIndependent absCls = Mockito.mock(AbstractIndependent.class, Mockito.CALLS_REAL_METHODS);\n        Assertions.assertEquals(\"DEFAULT-1\", absCls.defaultImpl());\n    }\n}\n"}
{"code_source": "package com.baeldung.abstractclass.instancefields;\n\n/**\n * Test Independent Method\n */\npublic abstract class AbstractInstanceFields {\n\n    protected int count;\n    private boolean active = false;\n\n    public abstract int abstractFunc();\n\n    public String testFunc() {\n        String response;\n        if (count > 5) {\n            response = \"Overflow\";\n        } else {\n            response = active ? \"Added\" : \"Blocked\";\n        }\n        return response;\n    }\n}\n", "test_case": "package com.baeldung.abstractclass.instancefields;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.powermock.api.mockito.PowerMockito;\nimport org.powermock.reflect.Whitebox;\n\npublic class AbstractInstanceFieldsUnitTest {\n\n    @Test\n    public void givenProtectedInstanceField_whenMockClassCountGt5_thenTestNonAbstractMethod() {\n\n        // mock\n        AbstractInstanceFields instClass = Mockito.mock(AbstractInstanceFields.class);\n        Mockito\n          .doCallRealMethod()\n          .when(instClass)\n          .testFunc();\n\n        // set counter greater than 5\n        instClass.count = 7;\n\n        // compare the result\n        Assertions.assertEquals(\"Overflow\", instClass.testFunc());\n    }\n\n    @Test\n    public void givenNonAbstractMethodAndPrivateField_whenPowerMockitoAndActiveFieldTrue_thenCorrectBehaviour() {\n\n        AbstractInstanceFields instClass = PowerMockito.mock(AbstractInstanceFields.class);\n        PowerMockito\n          .doCallRealMethod()\n          .when(instClass)\n          .testFunc();\n        Whitebox.setInternalState(instClass, \"active\", true);\n\n        // compare the expected result with actual\n        Assertions.assertEquals(\"Added\", instClass.testFunc());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.abstractclass.privatemethod;\n\nimport java.time.LocalDateTime;\n\npublic abstract class AbstractPrivateMethods {\n\n    public abstract int abstractFunc();\n\n    public String defaultImpl() {\n        return getCurrentDateTime() + \"DEFAULT-1\";\n    }\n\n    private String getCurrentDateTime() {\n        return LocalDateTime.now()\n            .toString();\n    }\n}\n", "test_case": "/**\n *\n */\npackage com.baeldung.abstractclass.privatemethod;\n\nimport org.junit.Test;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.runner.RunWith;\nimport org.powermock.api.mockito.PowerMockito;\nimport org.powermock.core.classloader.annotations.PrepareForTest;\nimport org.powermock.modules.junit4.PowerMockRunner;\n\nimport java.time.LocalDateTime;\n\n/**\n * Providing custom values for private methods using powermock\n *\n */\n@RunWith(PowerMockRunner.class)\n@PrepareForTest(AbstractPrivateMethods.class)\npublic class AbstractPrivateMethodsUnitTest {\n\n    @Test\n    public void givenNonAbstractMethodAndCallPrivateMethod_whenMockPrivateMethod_thenVerifyBehaviour() throws Exception {\n        AbstractPrivateMethods mockClass = PowerMockito.mock(AbstractPrivateMethods.class);\n\n        String dateTime = LocalDateTime\n          .now()\n          .toString();\n        PowerMockito\n          .doCallRealMethod()\n          .when(mockClass)\n          .defaultImpl();\n        PowerMockito\n          .doReturn(dateTime)\n          .when(mockClass, \"getCurrentDateTime\");// .thenReturn(dateTime);\n        String actual = mockClass.defaultImpl();\n        Assertions.assertEquals(dateTime + \"DEFAULT-1\", actual);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.junit5.order;\n\nimport org.junit.jupiter.api.MethodDescriptor;\nimport org.junit.jupiter.api.MethodOrderer;\nimport org.junit.jupiter.api.MethodOrdererContext;\n\npublic class CustomOrder implements MethodOrderer{\n    @Override\n    public void orderMethods(MethodOrdererContext context) {\n        context.getMethodDescriptors().sort((MethodDescriptor m1, MethodDescriptor m2)->m1.getMethod().getName().compareToIgnoreCase(m2.getMethod().getName()));\n    }\n}\n", "test_case": "package com.baeldung.junit5.order;\n\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestMethodOrder;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n@TestMethodOrder(CustomOrder.class)\npublic class CustomOrderUnitTest {\n\n    private static final StringBuilder output = new StringBuilder(\"\");\n\n    @Test\n    void myATest() {\n        output.append(\"A\");\n    }\n\n    @Test\n    void myBTest() {\n        output.append(\"B\");\n    }\n\n    @Test\n    void myaTest() {\n        output.append(\"a\");\n    }\n\n    @AfterAll\n    public static void assertOutput() {\n        assertEquals(\"AaB\", output.toString());\n    }\n}\n"}
{"code_source": "package com.baeldung.param;\n\nimport java.util.Arrays;\n\n/**\n * Somewhat contrived validation class to illustrate unit test\n * concepts.\n * \n * @author J Steven Perry\n *\n */\npublic class PersonValidator {\n\n    /**\n     * Contrived checked exception to illustrate one possible\n     * way to handle validation errors (via a checked exception).\n     * \n     * @author J Steven Perry\n     *\n     */\n    public static class ValidationException extends Exception {\n\n        /**\n         * \n         */\n        private static final long serialVersionUID = -134518049431883102L;\n\n        // Probably should implement some more constructors, but don't want\n        /// to tarnish the lesson...\n\n        /**\n         * The one and only way to create this checked exception.\n         * \n         * @param message\n         *          The message accompanying the exception. Should be meaningful.\n         */\n        public ValidationException(String message) {\n            super(message);\n\n        }\n\n    }\n\n    private static final String[] ILLEGAL_NAME_CHARACTERS = { \",\", \"_\", \"{\", \"}\", \"!\" };\n\n    /**\n     * Validate the first name of the specified Person object.\n     * \n     * @param person\n     *          The Person object to validate.\n     * \n     * @return - returns true if the specified Person is valid\n     * \n     * @throws ValidationException\n     *           - this Exception is thrown if any kind of validation error occurs.\n     */\n    public static boolean validateFirstName(Person person) throws ValidationException {\n        boolean ret = true;\n        // The validation rules go here.\n        // Naive: use simple ifs\n        if (person == null) {\n            throw new ValidationException(\"Person is null (not allowed)!\");\n        }\n        if (person.getFirstName() == null) {\n            throw new ValidationException(\"Person FirstName is null (not allowed)!\");\n        }\n        if (person.getFirstName()\n            .isEmpty()) {\n            throw new ValidationException(\"Person FirstName is an empty String (not allowed)!\");\n        }\n        if (!isStringValid(person.getFirstName(), ILLEGAL_NAME_CHARACTERS)) {\n            throw new ValidationException(\"Person FirstName (\" + person.getFirstName() + \") may not contain any of the following characters: \" + Arrays.toString(ILLEGAL_NAME_CHARACTERS) + \"!\");\n        }\n        return ret;\n    }\n\n    /**\n     * Validate the last name of the specified Person object. Looks the same as first\n     * name? Look closer. Just kidding. It's the same. But real world code can (and will) diverge.\n     * \n     * @param person\n     *          The Person object to validate.\n     * \n     * @return - returns true if the specified Person is valid\n     * \n     * @throws ValidationException\n     *           - this Exception is thrown if any kind of validation error occurs.\n     */\n    public static boolean validateLastName(Person person) throws ValidationException {\n        boolean ret = true;\n        // The validation rules go here.\n        // Naive: use simple ifs\n        if (person == null) {\n            throw new ValidationException(\"Person is null (not allowed)!\");\n        }\n        if (person.getFirstName() == null) {\n            throw new ValidationException(\"Person FirstName is null (not allowed)!\");\n        }\n        if (person.getFirstName()\n            .isEmpty()) {\n            throw new ValidationException(\"Person FirstName is an empty String (not allowed)!\");\n        }\n        if (!isStringValid(person.getFirstName(), ILLEGAL_NAME_CHARACTERS)) {\n            throw new ValidationException(\"Person LastName (\" + person.getLastName() + \") may not contain any of the following characters: \" + Arrays.toString(ILLEGAL_NAME_CHARACTERS) + \"!\");\n        }\n        return ret;\n    }\n\n    /**\n     * Validates the specified name. If it contains any of the illegalCharacters,\n     * this method returns false (indicating the name is illegal). Otherwise it returns true.\n     * \n     * @param candidate\n     *          The candidate String to validate\n     * \n     * @param illegalCharacters\n     *          The characters the String is not allowed to have\n     * \n     * @return - boolean - true if the name is valid, false otherwise.\n     */\n    private static boolean isStringValid(String candidate, String[] illegalCharacters) {\n        boolean ret = true;\n        for (String illegalChar : illegalCharacters) {\n            if (candidate.contains(illegalChar)) {\n                ret = false;\n                break;\n            }\n        }\n        return ret;\n    }\n\n}\n", "test_case": "package com.baeldung.param;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.fail;\n\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.RepeatedTest;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\n@DisplayName(\"Testing PersonValidator\")\npublic class PersonValidatorUnitTest {\n\n    /**\n     * Nested class, uses ExtendWith\n     * {@link com.baeldung.param.ValidPersonParameterResolver ValidPersonParameterResolver}\n     * to feed Test methods with \"good\" data.\n     */\n    @Nested\n    @DisplayName(\"When using Valid data\")\n    @ExtendWith(ValidPersonParameterResolver.class)\n    public class ValidData {\n\n        /**\n         * Repeat the test ten times, that way we have a good shot at\n         * running all of the data through at least once.\n         * \n         * @param person\n         *          A valid Person object to validate.\n         */\n        @RepeatedTest(value = 10)\n        @DisplayName(\"All first names are valid\")\n        public void validateFirstName(Person person) {\n            try {\n                assertTrue(PersonValidator.validateFirstName(person));\n            } catch (PersonValidator.ValidationException e) {\n                fail(\"Exception not expected: \" + e.getLocalizedMessage());\n            }\n        }\n\n        /**\n         * Repeat the test ten times, that way we have a good shot at\n         * running all of the data through at least once.\n         * \n         * @param person\n         *          A valid Person object to validate.\n         */\n        @RepeatedTest(value = 10)\n        @DisplayName(\"All last names are valid\")\n        public void validateLastName(Person person) {\n            try {\n                assertTrue(PersonValidator.validateLastName(person));\n            } catch (PersonValidator.ValidationException e) {\n                fail(\"Exception not expected: \" + e.getLocalizedMessage());\n            }\n        }\n\n    }\n\n    /**\n     * Nested class, uses ExtendWith\n     * {@link com.baeldung.param.InvalidPersonParameterResolver InvalidPersonParameterResolver}\n     * to feed Test methods with \"bad\" data.\n     */\n    @Nested\n    @DisplayName(\"When using Invalid data\")\n    @ExtendWith(InvalidPersonParameterResolver.class)\n    public class InvalidData {\n\n        /**\n         * Repeat the test ten times, that way we have a good shot at\n         * running all of the data through at least once.\n         * \n         * @param person\n         *          An invalid Person object to validate.\n         */\n        @RepeatedTest(value = 10)\n        @DisplayName(\"All first names are invalid\")\n        public void validateFirstName(Person person) {\n            assertThrows(PersonValidator.ValidationException.class, () -> PersonValidator.validateFirstName(person));\n        }\n\n        /**\n         * Repeat the test ten times, that way we have a good shot at\n         * running all of the data through at least once.\n         * \n         * @param person\n         *          An invalid Person object to validate.\n         */\n        @RepeatedTest(value = 10)\n        @DisplayName(\"All first names are invalid\")\n        public void validateLastName(Person person) {\n            assertThrows(PersonValidator.ValidationException.class, () -> PersonValidator.validateLastName(person));\n        }\n\n    }\n\n}\n"}
{"code_source": "package com.baeldung.junit5.bean;\n\n/**\n * Bean that contains utility methods to work with numbers.\n * \n * @author Donato Rimenti\n *\n */\npublic class NumbersBean {\n\n    /**\n     * Returns true if a number is even, false otherwise.\n     * \n     * @param number\n     *            the number to check\n     * @return true if the argument is even, false otherwise\n     */\n    public boolean isNumberEven(int number) {\n        return number % 2 == 0;\n    }\n\n}\n", "test_case": "package com.baeldung.junit5.bean.test;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.junit5.bean.NumbersBean;\n\n/**\n * Test class for {@link NumbersBean}.\n * \n * @author Donato Rimenti\n *\n */\npublic class NumbersBeanUnitTest {\n\n\t/**\n\t * The bean to test.\n\t */\n\tprivate NumbersBean bean = new NumbersBean();\n\n\t/**\n\t * Tests that when an even number is passed to\n\t * {@link NumbersBean#isNumberEven(int)}, true is returned.\n\t */\n\t@Test\n\tvoid givenEvenNumber_whenCheckingIsNumberEven_thenTrue() {\n\t\tboolean result = bean.isNumberEven(8);\n\n\t\tAssertions.assertTrue(result);\n\t}\n\n\t/**\n\t * Tests that when an odd number is passed to\n\t * {@link NumbersBean#isNumberEven(int)}, false is returned.\n\t */\n\t@Test\n\tvoid givenOddNumber_whenCheckingIsNumberEven_thenFalse() {\n\t\tboolean result = bean.isNumberEven(3);\n\n\t\tAssertions.assertFalse(result);\n\t}\n\n}\n"}
{"code_source": "package com.baeldung.junit5.nested;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Publication {\n    private final List<Article> articles;\n\n    public Publication(List<Article> articles) {\n        this.articles = articles;\n    }\n\n    public List<String> getReadableArticles(User user) {\n        return articles.stream()\n            .filter(a -> a.getArticleLevel()\n              .compare(user.getMembership()) <= 0)\n            .map(Article::getName)\n            .collect(Collectors.toList());\n    }\n\n    public List<String> getLockedArticles(User user) {\n        return articles.stream()\n            .filter(a -> a.getArticleLevel()\n              .compare(user.getMembership()) > 0)\n            .map(Article::getName)\n            .collect(Collectors.toList());\n    }\n\n    public List<Article> getArticles() {\n        return articles;\n    }\n}", "test_case": "package com.baeldung.junit5.nested;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\n\n@DisplayName(\"given a article publication with three articles\")\nclass OnlinePublicationUnitTest {\n    private Publication publication;\n\n    @BeforeEach\n    void setupArticlesAndPublication() {\n        Article freeArticle = new Article(\"free article\", Membership.FREE);\n        Article silverArticle = new Article(\"silver level article\", Membership.SILVER);\n        Article goldArticle = new Article(\"gold level article\", Membership.GOLD);\n        publication = new Publication(Arrays.asList(freeArticle, silverArticle, goldArticle));\n    }\n\n    @Test\n    @DisplayName(\"then 3 articles are available\")\n    void shouldHaveThreeArticlesInTotal() {\n        List<Article> allArticles = publication.getArticles();\n        assertThat(allArticles).hasSize(3);\n    }\n\n    @Nested\n    @DisplayName(\"when a user with a 'free' membership logs in\")\n    class UserWithAFreeMembership {\n        User freeFreya = new User(\"Freya\", Membership.FREE);\n\n        @Test\n        @DisplayName(\"then he should be able to read the 'free' articles\")\n        void shouldOnlyReadFreeArticles() {\n            List<String> articles = publication.getReadableArticles(freeFreya);\n            assertThat(articles).containsExactly(\"free article\");\n        }\n\n        @Test\n        @DisplayName(\"then he shouldn't be able to read the 'silver' and 'gold' articles\")\n        void shouldSeeSilverAndGoldLevelArticlesAsLocked() {\n            List<String> articles = publication.getLockedArticles(freeFreya);\n            assertThat(articles).containsExactlyInAnyOrder(\"silver level article\", \"gold level article\");\n        }\n    }\n\n    @Nested\n    @DisplayName(\"when a user with a 'silver' membership logs in\")\n    class UserWithSilverMembership {\n        User silverSilvester = new User(\"Silvester\", Membership.SILVER);\n\n        @Test\n        @DisplayName(\"then he should be able to read the 'free' and 'silver' level articles\")\n        void shouldOnlyReadFreeAndSilverLevelArticles() {\n            List<String> articles = publication.getReadableArticles(silverSilvester);\n            assertThat(articles).containsExactlyInAnyOrder(\"free article\", \"silver level article\");\n        }\n\n        @Test\n        @DisplayName(\"then he should see the 'gold' level articles as locked\")\n        void shouldSeeGoldLevelArticlesAsLocked() {\n            List<String> articles = publication.getLockedArticles(silverSilvester);\n            assertThat(articles).containsExactlyInAnyOrder(\"gold level article\");\n        }\n    }\n\n    @Nested\n    @DisplayName(\"when a user with a 'gold' membership logs in\")\n    class UserWithGoldMembership {\n        User goldenGeorge = new User(\"George\", Membership.GOLD);\n\n        @Test\n        @DisplayName(\"then he should be able to read all the articles\")\n        void shouldSeeAllArticles() {\n            List<String> articles = publication.getReadableArticles(goldenGeorge);\n            assertThat(articles).containsExactlyInAnyOrder(\"free article\", \"silver level article\", \"gold level article\");\n        }\n\n        @Test\n        @DisplayName(\"then he should not see any article as locked\")\n        void shouldNotHaveHiddenArticles() {\n            List<String> articles = publication.getLockedArticles(goldenGeorge);\n            assertThat(articles).isEmpty();\n        }\n\n    }\n\n}"}
{"code_source": "package com.baeldung.junit5.templates;\n\npublic class UserIdGeneratorImpl implements UserIdGenerator {\n    private boolean isFeatureEnabled;\n\n    public UserIdGeneratorImpl(boolean isFeatureEnabled) {\n        this.isFeatureEnabled = isFeatureEnabled;\n    }\n\n    public String generate(String firstName, String lastName) {\n        String initialAndLastName = firstName.substring(0, 1)\n            .concat(lastName);\n        return isFeatureEnabled ? \"bael\".concat(initialAndLastName) : initialAndLastName;\n    }\n}\n", "test_case": "package com.baeldung.junit5.templates;\n\nimport org.junit.jupiter.api.TestTemplate;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class UserIdGeneratorImplUnitTest {\n    @TestTemplate\n    @ExtendWith(UserIdGeneratorTestInvocationContextProvider.class)\n    public void whenUserIdRequested_thenUserIdIsReturnedInCorrectFormat(UserIdGeneratorTestCase testCase) {\n        UserIdGenerator userIdGenerator = new UserIdGeneratorImpl(testCase.isFeatureEnabled());\n\n        String actualUserId = userIdGenerator.generate(testCase.getFirstName(), testCase.getLastName());\n\n        assertThat(actualUserId).isEqualTo(testCase.getExpectedUserId());\n    }\n}"}
{"code_source": "package com.baeldung.junit5.parameterized;\n\npublic class Numbers {\n\n    public static boolean isOdd(int number) {\n        return number % 2 != 0;\n    }\n}\n", "test_case": "package com.baeldung.junit5.parameterized;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.ValueSource;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nclass NumbersUnitTest {\n\n    @ParameterizedTest\n    @ValueSource(ints = {1, 3, 5, -3, 15, Integer.MAX_VALUE})\n    void isOdd_ShouldReturnTrueForOddNumbers(int number) {\n        assertTrue(Numbers.isOdd(number));\n    }\n}"}
{"code_source": "package com.baeldung.junit5.parameterized;\n\nclass Strings {\n\n    static boolean isBlank(String input) {\n        return input == null || input.trim().isEmpty();\n    }\n}\n", "test_case": "package com.baeldung.junit5.parameterized;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.*;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Stream;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nclass StringsUnitTest {\n\n    static Stream<Arguments> arguments = Stream.of(\n            Arguments.of(null, true), // null strings should be considered blank\n            Arguments.of(\"\", true),\n            Arguments.of(\"  \", true),\n            Arguments.of(\"not blank\", false)\n    );\n\n    @ParameterizedTest\n    @VariableSource(\"arguments\")\n    void isBlank_ShouldReturnTrueForNullOrBlankStringsVariableSource(String input, boolean expected) {\n        assertEquals(expected, Strings.isBlank(input));\n    }\n\n    @ParameterizedTest\n    @ValueSource(strings = {\"\", \"  \"})\n    void isBlank_ShouldReturnTrueForNullOrBlankStrings(String input) {\n        assertTrue(Strings.isBlank(input));\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"provideStringsForIsBlank\")\n    void isBlank_ShouldReturnTrueForNullOrBlankStrings(String input, boolean expected) {\n        assertEquals(expected, Strings.isBlank(input));\n    }\n\n    @ParameterizedTest\n    @MethodSource // Please note method name is not provided\n    void isBlank_ShouldReturnTrueForNullOrBlankStringsOneArgument(String input) {\n        assertTrue(Strings.isBlank(input));\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"com.baeldung.junit5.parameterized.StringParams#blankStrings\")\n    void isBlank_ShouldReturnTrueForNullOrBlankStringsExternalSource(String input) {\n        assertTrue(Strings.isBlank(input));\n    }\n\n    @ParameterizedTest\n    @ArgumentsSource(BlankStringsArgumentsProvider.class)\n    void isBlank_ShouldReturnTrueForNullOrBlankStringsArgProvider(String input) {\n        assertTrue(Strings.isBlank(input));\n    }\n\n    private static Stream<String> isBlank_ShouldReturnTrueForNullOrBlankStringsOneArgument() {\n        return Stream.of(null, \"\", \"  \");\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"provideStringsForIsBlankList\")\n    void isBlank_ShouldReturnTrueForNullOrBlankStringsList(String input, boolean expected) {\n        assertEquals(expected, Strings.isBlank(input));\n    }\n\n    @ParameterizedTest\n    @CsvSource({\"test,TEST\", \"tEst,TEST\", \"Java,JAVA\"}) // Passing a CSV pair per test execution\n    void toUpperCase_ShouldGenerateTheExpectedUppercaseValue(String input, String expected) {\n        String actualValue = input.toUpperCase();\n        assertEquals(expected, actualValue);\n    }\n\n    @ParameterizedTest\n    @CsvSource(value = {\"test:test\", \"tEst:test\", \"Java:java\"}, delimiter =':') // Using : as the column separator.\n    void toLowerCase_ShouldGenerateTheExpectedLowercaseValue(String input, String expected) {\n        String actualValue = input.toLowerCase();\n        assertEquals(expected, actualValue);\n    }\n\n    @ParameterizedTest\n    @CsvFileSource(resources = \"/data.csv\", numLinesToSkip = 1)\n    void toUpperCase_ShouldGenerateTheExpectedUppercaseValueCSVFile(String input, String expected) {\n        String actualValue = input.toUpperCase();\n        assertEquals(expected, actualValue);\n    }\n\n    @ParameterizedTest\n    @NullSource\n    void isBlank_ShouldReturnTrueForNullInputs(String input) {\n        assertTrue(Strings.isBlank(input));\n    }\n\n    @ParameterizedTest\n    @EmptySource\n    void isBlank_ShouldReturnTrueForEmptyStrings(String input) {\n        assertTrue(Strings.isBlank(input));\n    }\n\n    @ParameterizedTest\n    @NullAndEmptySource\n    void isBlank_ShouldReturnTrueForNullAndEmptyStrings(String input) {\n        assertTrue(Strings.isBlank(input));\n    }\n\n    @ParameterizedTest\n    @NullAndEmptySource\n    @ValueSource(strings = {\"  \", \"\\t\", \"\\n\"})\n    void isBlank_ShouldReturnTrueForAllTypesOfBlankStrings(String input) {\n        assertTrue(Strings.isBlank(input));\n    }\n\n    private static Stream<Arguments> provideStringsForIsBlank() {\n        return Stream.of(\n                Arguments.of(null, true), // null strings should be considered blank\n                Arguments.of(\"\", true),\n                Arguments.of(\"  \", true),\n                Arguments.of(\"not blank\", false)\n        );\n    }\n\n    private static List<Arguments> provideStringsForIsBlankList() {\n        return Arrays.asList(\n                Arguments.of(null, true), // null strings should be considered blank\n                Arguments.of(\"\", true),\n                Arguments.of(\"  \", true),\n                Arguments.of(\"not blank\", false)\n        );\n    }\n}"}
{"code_source": "package com.baeldung.chronicle.queue;\n\nimport java.io.IOException;\n\nimport net.openhft.chronicle.Chronicle;\nimport net.openhft.chronicle.ExcerptAppender;\n\npublic class ChronicleQueue {\n\n    static void writeToQueue(Chronicle chronicle, String stringValue, int intValue, long longValue, double doubleValue) throws IOException {\n        ExcerptAppender appender = chronicle.createAppender();\n        appender.startExcerpt();\n        appender.writeUTF(stringValue);\n        appender.writeInt(intValue);\n        appender.writeLong(longValue);\n        appender.writeDouble(doubleValue);\n        appender.finish();\n        appender.close();\n    }\n\n}\n", "test_case": "package com.baeldung.chronicle.queue;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\n\nimport org.junit.Test;\n\nimport net.openhft.chronicle.Chronicle;\nimport net.openhft.chronicle.ChronicleQueueBuilder;\nimport net.openhft.chronicle.ExcerptTailer;\nimport net.openhft.chronicle.tools.ChronicleTools;\n\npublic class ChronicleQueueIntegrationTest {\n\n    @Test\n    public void givenSetOfValues_whenWriteToQueue_thenWriteSuccesfully() throws IOException {\n        File queueDir = Files.createTempDirectory(\"chronicle-queue\").toFile();\n        ChronicleTools.deleteOnExit(queueDir.getPath());\n\n        Chronicle chronicle = ChronicleQueueBuilder.indexed(queueDir).build();\n        String stringVal = \"Hello World\";\n        int intVal = 101;\n        long longVal = System.currentTimeMillis();\n        double doubleVal = 90.00192091d;\n\n        ChronicleQueue.writeToQueue(chronicle, stringVal, intVal, longVal, doubleVal);\n\n        ExcerptTailer tailer = chronicle.createTailer();\n        while (tailer.nextIndex()) {\n            assertEquals(stringVal, tailer.readUTF());\n            assertEquals(intVal, tailer.readInt());\n            assertEquals(longVal, tailer.readLong());\n            assertEquals((Double) doubleVal, (Double) tailer.readDouble());\n        }\n        tailer.finish();\n        tailer.close();\n        chronicle.close();\n    }\n\n}\n"}
{"code_source": "package com.baeldung.streamutils;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.StringWriter;\n\nimport org.apache.commons.io.IOUtils;\nimport org.springframework.util.StreamUtils;\n\npublic class CopyStream {\n    public static String getStringFromInputStream(InputStream input) throws IOException {\n        StringWriter writer = new StringWriter();\n        IOUtils.copy(input, writer, \"UTF-8\");\n        return writer.toString();\n    }\n\n    public InputStream getNonClosingInputStream() throws IOException {\n        InputStream in = new FileInputStream(\"src/test/resources/input.txt\");\n        return StreamUtils.nonClosing(in);\n    }\n}\n", "test_case": "package com.baeldung.streamutils;\n\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.nio.charset.StandardCharsets;\n\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.springframework.util.StreamUtils;\n\nimport static com.baeldung.streamutils.CopyStream.getStringFromInputStream;\n\npublic class CopyStreamUnitTest {\n\n    @Test\n    public void whenCopyInputStreamToOutputStream_thenCorrect() throws IOException {\n        String inputFileName = \"src/test/resources/input.txt\";\n        String outputFileName = \"src/test/resources/output.txt\";\n        File outputFile = new File(outputFileName);\n        InputStream in = new FileInputStream(inputFileName);\n        OutputStream out = new FileOutputStream(outputFileName);\n\n        StreamUtils.copy(in, out);\n\n        assertTrue(outputFile.exists());\n        String inputFileContent = getStringFromInputStream(new FileInputStream(inputFileName));\n        String outputFileContent = getStringFromInputStream(new FileInputStream(outputFileName));\n        Assert.assertEquals(inputFileContent, outputFileContent);\n    }\n\n    @Test\n    public void whenCopyRangeOfInputStreamToOutputStream_thenCorrect() throws IOException {\n        String inputFileName = \"src/test/resources/input.txt\";\n        String outputFileName = \"src/test/resources/output.txt\";\n        File outputFile = new File(outputFileName);\n        InputStream in = new FileInputStream(inputFileName);\n        OutputStream out = new FileOutputStream(outputFileName);\n\n        StreamUtils.copyRange(in, out, 1, 10);\n\n        assertTrue(outputFile.exists());\n        String inputFileContent = getStringFromInputStream(new FileInputStream(inputFileName));\n        String outputFileContent = getStringFromInputStream(new FileInputStream(outputFileName));\n        Assert.assertEquals(inputFileContent.substring(1, 11), outputFileContent);\n    }\n\n    @Test\n    public void whenCopyStringToOutputStream_thenCorrect() throws IOException {\n        String string = \"Should be copied to OutputStream.\";\n        String outputFileName = \"src/test/resources/output.txt\";\n        File outputFile = new File(outputFileName);\n        OutputStream out = new FileOutputStream(\"src/test/resources/output.txt\");\n\n        StreamUtils.copy(string, StandardCharsets.UTF_8, out);\n\n        assertTrue(outputFile.exists());\n        String outputFileContent = getStringFromInputStream(new FileInputStream(outputFileName));\n        Assert.assertEquals(outputFileContent, string);\n    }\n\n    @Test\n    public void whenCopyInputStreamToString_thenCorrect() throws IOException {\n        String inputFileName = \"src/test/resources/input.txt\";\n        InputStream is = new FileInputStream(inputFileName);\n        String content = StreamUtils.copyToString(is, StandardCharsets.UTF_8);\n\n        String inputFileContent = getStringFromInputStream(new FileInputStream(inputFileName));\n        Assert.assertEquals(inputFileContent, content);\n    }\n\n    @Test\n    public void whenCopyByteArrayToOutputStream_thenCorrect() throws IOException {\n        String outputFileName = \"src/test/resources/output.txt\";\n        String string = \"Should be copied to OutputStream.\";\n        byte[] byteArray = string.getBytes();\n        OutputStream out = new FileOutputStream(\"src/test/resources/output.txt\");\n\n        StreamUtils.copy(byteArray, out);\n        String outputFileContent = getStringFromInputStream(new FileInputStream(outputFileName));\n        Assert.assertEquals(outputFileContent, string);\n    }\n\n    @Test\n    public void whenCopyInputStreamToByteArray_thenCorrect() throws IOException {\n        String inputFileName = \"src/test/resources/input.txt\";\n        InputStream in = new FileInputStream(inputFileName);\n        byte[] out = StreamUtils.copyToByteArray(in);\n\n        String content = new String(out);\n        String inputFileContent = getStringFromInputStream(new FileInputStream(inputFileName));\n        Assert.assertEquals(inputFileContent, content);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.jbpm.engine;\n\nimport org.kie.api.runtime.manager.Context;\nimport org.kie.api.runtime.process.ProcessInstance;\n\npublic interface WorkflowEngine {\n   \n    public ProcessInstance runjBPMEngineForProcess(String processId, Context<String> initialContext, String kbaseId, String persistenceUnit);\n    \n}\n", "test_case": "package com.baeldung.jbpm;\n\nimport org.jbpm.test.JbpmJUnitBaseTestCase;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.kie.api.runtime.KieSession;\nimport org.kie.api.runtime.manager.RuntimeEngine;\nimport org.kie.api.runtime.manager.RuntimeManager;\nimport org.kie.api.runtime.process.ProcessInstance;\nimport org.kie.internal.runtime.manager.context.ProcessInstanceIdContext;\n\npublic class WorkflowEngineIntegrationTest extends JbpmJUnitBaseTestCase {\n\n    private String[] triggeredNodesArray = { \"Start\", \"HelloWorld\", \"End\" };\n    private RuntimeManager manager = null;\n    private RuntimeEngine runtimeEngine = null;\n    private KieSession ksession = null;\n    private ProcessInstance processInstance = null;\n\n    @Before\n    public void setup() {\n        manager = createRuntimeManager(Strategy.SINGLETON, \"manager\", \"com/baeldung/process/helloworld.bpmn\");\n        runtimeEngine = getRuntimeEngine(ProcessInstanceIdContext.get());\n        ksession = runtimeEngine.getKieSession();\n        processInstance = ksession.startProcess(\"com.baeldung.bpmn.helloworld\");\n    }\n\n    @After\n    public void cleanup() {\n        manager.disposeRuntimeEngine(runtimeEngine);\n    }\n\n    @Test\n    public void givenProcessInstance_whenExecutionCompleted_thenVerifyNodesExecutionOrder() {\n        assertNodeTriggered(processInstance.getId(), triggeredNodesArray);\n    }\n\n    @Test\n    public void givenProcessInstance_whenExecutionCompleted_thenVerifyKnowledgeSessionId() {\n        int ksessionID = ksession.getId();\n        runtimeEngine = getRuntimeEngine(ProcessInstanceIdContext.get(processInstance.getId()));\n        ksession = runtimeEngine.getKieSession();\n        assertEquals(ksessionID, ksession.getId());\n    }\n\n    @Test\n    public void givenProcessInstance_whenExecutionCompleted_thenVerifyProcessInstanceStatus() {\n        assertProcessInstanceCompleted(processInstance.getId(), ksession);\n        assertTrue(\"ProcessInstance completed with status 2\", processInstance.getState() == 2);\n    }\n}\n"}
{"code_source": "package com.baeldung.cache2k;\n\nimport java.util.Objects;\n\nimport org.cache2k.Cache;\nimport org.cache2k.Cache2kBuilder;\n\npublic class ProductHelper {\n\n    private Cache<String, Integer> cachedDiscounts;\n\n    private int cacheMissCount = 0;\n\n    public ProductHelper() {\n        cachedDiscounts = Cache2kBuilder.of(String.class, Integer.class)\n            .name(\"discount\")\n            .eternal(true)\n            .entryCapacity(100)\n            .build();\n    }\n\n    public Integer getDiscount(String productType) {\n        Integer discount = cachedDiscounts.get(productType);\n        if (Objects.isNull(discount)) {\n            cacheMissCount++;\n            discount = \"Sports\".equalsIgnoreCase(productType) ? 20 : 10;\n            cachedDiscounts.put(productType, discount);\n        }\n        return discount;\n    }\n\n    public int getCacheMissCount() {\n        return cacheMissCount;\n    }\n\n}\n", "test_case": "package com.baeldung.cache2k;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class ProductHelperUnitTest {\n\n    @Test\n    public void whenInvokedGetDiscountTwice_thenGetItFromCache() {\n        ProductHelper productHelper = new ProductHelper();\n        assertTrue(productHelper.getCacheMissCount() == 0);\n        assertTrue(productHelper.getDiscount(\"Sports\") == 20);\n        assertTrue(productHelper.getDiscount(\"Sports\") == 20);\n        assertTrue(productHelper.getCacheMissCount() == 1);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.cache2k;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.cache2k.Cache;\nimport org.cache2k.Cache2kBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ProductHelperUsingLoader {\n\n    final Logger LOGGER = LoggerFactory.getLogger(ProductHelperUsingLoader.class);\n\n    private Cache<String, Integer> cachedDiscounts;\n\n    private int cacheMissCount = 0;\n\n    public ProductHelperUsingLoader() {\n        cachedDiscounts = Cache2kBuilder.of(String.class, Integer.class)\n            .name(\"discount-loader\")\n            .expireAfterWrite(10, TimeUnit.MILLISECONDS)\n            .entryCapacity(100)\n            .loader((key) -> {\n                cacheMissCount++;\n                return \"Sports\".equalsIgnoreCase(key) ? 20 : 10;\n            })\n            .build();\n    }\n\n    public Integer getDiscount(String productType) {\n        return cachedDiscounts.get(productType);\n    }\n\n    public int getCacheMissCount() {\n        return cacheMissCount;\n    }\n\n}\n", "test_case": "package com.baeldung.cache2k;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class ProductHelperUsingLoaderUnitTest {\n\n    @Test\n    public void whenInvokedGetDiscount_thenPopulateCacheUsingLoader() {\n        ProductHelperUsingLoader productHelper = new ProductHelperUsingLoader();\n        assertTrue(productHelper.getCacheMissCount() == 0);\n\n        assertTrue(productHelper.getDiscount(\"Sports\") == 20);\n        assertTrue(productHelper.getCacheMissCount() == 1);\n\n        assertTrue(productHelper.getDiscount(\"Electronics\") == 10);\n        assertTrue(productHelper.getCacheMissCount() == 2);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.cache2k;\n\nimport java.util.concurrent.TimeUnit;\n\nimport org.cache2k.Cache;\nimport org.cache2k.Cache2kBuilder;\nimport org.cache2k.CacheEntry;\nimport org.cache2k.event.CacheEntryCreatedListener;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ProductHelperWithEventListener {\n\n    final Logger LOGGER = LoggerFactory.getLogger(ProductHelperWithEventListener.class);\n\n    private Cache<String, Integer> cachedDiscounts;\n\n    private int cacheMissCount = 0;\n\n    public ProductHelperWithEventListener() {\n        cachedDiscounts = Cache2kBuilder.of(String.class, Integer.class)\n            .name(\"discount-listener\")\n            .expireAfterWrite(10, TimeUnit.MILLISECONDS)\n            .entryCapacity(100)\n            .loader((key) -> {\n                cacheMissCount++;\n                return \"Sports\".equalsIgnoreCase(key) ? 20 : 10;\n            })\n            .addListener(new CacheEntryCreatedListener<String, Integer>() {\n                @Override\n                public void onEntryCreated(Cache<String, Integer> cache, CacheEntry<String, Integer> entry) {\n                    LOGGER.info(\"Entry created: [{}, {}].\", entry.getKey(), entry.getValue());\n                }\n            })\n            .build();\n    }\n\n    public Integer getDiscount(String productType) {\n        return cachedDiscounts.get(productType);\n    }\n\n    public int getCacheMissCount() {\n        return cacheMissCount;\n    }\n\n}\n", "test_case": "package com.baeldung.cache2k;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class ProductHelperWithEventListenerUnitTest {\n\n    @Test\n    public void whenEntryAddedInCache_thenEventListenerCalled() {\n        ProductHelperWithEventListener productHelper = new ProductHelperWithEventListener();\n        assertTrue(productHelper.getDiscount(\"Sports\") == 20);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.cache2k;\n\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\nimport org.cache2k.Cache;\nimport org.cache2k.Cache2kBuilder;\n\npublic class ProductHelperWithExpiry {\n\n    private Cache<String, Integer> cachedDiscounts;\n\n    private int cacheMissCount = 0;\n\n    public ProductHelperWithExpiry() {\n        cachedDiscounts = Cache2kBuilder.of(String.class, Integer.class)\n            .name(\"discount-expiry\")\n            .expireAfterWrite(5, TimeUnit.MILLISECONDS)\n            .entryCapacity(100)\n            .build();\n\n    }\n\n    public Integer getDiscount(String productType) {\n        Integer discount = cachedDiscounts.get(productType);\n        if (Objects.isNull(discount)) {\n            cacheMissCount++;\n            discount = \"Sports\".equalsIgnoreCase(productType) ? 20 : 10;\n            cachedDiscounts.put(productType, discount);\n        }\n        return discount;\n    }\n\n    public int getCacheMissCount() {\n        return cacheMissCount;\n    }\n\n}\n", "test_case": "package com.baeldung.cache2k;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class ProductHelperWithExpiryUnitTest {\n\n    @Test\n    public void whenInvokedGetDiscountAfterExpiration_thenDiscountCalculatedAgain() throws InterruptedException {\n        ProductHelperWithExpiry productHelper = new ProductHelperWithExpiry();\n        assertTrue(productHelper.getCacheMissCount() == 0);\n        assertTrue(productHelper.getDiscount(\"Sports\") == 20);\n        assertTrue(productHelper.getCacheMissCount() == 1);\n\n        Thread.sleep(20);\n\n        assertTrue(productHelper.getDiscount(\"Sports\") == 20);\n        assertTrue(productHelper.getCacheMissCount() == 2);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.cactoos;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.cactoos.collection.Filtered;\nimport org.cactoos.iterable.IterableOf;\nimport org.cactoos.list.ListOf;\nimport org.cactoos.scalar.And;\nimport org.cactoos.text.FormattedText;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class CactoosCollectionUtils {\n\n\tfinal Logger LOGGER = LoggerFactory.getLogger(CactoosCollectionUtils.class);\n\n\tpublic void iterateCollection(List<String> strings) throws Exception {\n\t\tnew And((String input) -> LOGGER.info(new FormattedText(\"%s\\n\", input).asString()), strings).value();\n\t}\n\n\tpublic Collection<String> getFilteredList(List<String> strings) {\n\t\tCollection<String> filteredStrings = new ListOf<>(\n\t\t\t\tnew Filtered<>(string -> string.length() == 5, new IterableOf<>(strings)));\n\t\treturn filteredStrings;\n\t}\n\n}\n", "test_case": "package com.baeldung.cactoos;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.ArrayList;\n\nimport org.junit.Test;\n\npublic class CactoosCollectionUtilsUnitTest {\n\n\t@Test\n\tpublic void whenFilteredClassIsCalledWithSpecificArgs_thenCorrespondingFilteredCollectionShouldBeReturned() throws IOException {\n\n\t\tCactoosCollectionUtils obj = new CactoosCollectionUtils();\n\n\t\t// when\n\t\tList<String> strings = new ArrayList<String>() { \n            { \n                add(\"Hello\"); \n                add(\"John\"); \n                add(\"Smith\"); \n                add(\"Eric\");\n                add(\"Dizzy\");\n            } \n        }; \n\t\tint size = obj.getFilteredList(strings).size();\n\n\t\t// then\n\t\tassertEquals(3, size);\n\n\t}\n\n}\n"}
{"code_source": "package com.baeldung.cactoos;\n\nimport java.io.IOException;\n\nimport org.cactoos.text.FormattedText;\nimport org.cactoos.text.IsBlank;\nimport org.cactoos.text.Lowered;\nimport org.cactoos.text.TextOf;\nimport org.cactoos.text.Upper;\n\npublic class CactoosStringUtils {\n\n\tpublic String createString() throws IOException {\n\t\tString testString = new TextOf(\"Test String\").asString();\n\t\treturn testString;\n\t}\n\n\tpublic String createdFormattedString(String stringToFormat) throws IOException {\n\t\tString formattedString = new FormattedText(\"Hello %s\", stringToFormat).asString();\n\t\treturn formattedString;\n\t}\n\n\tpublic String toLowerCase(String testString) throws IOException {\n\t\tString lowerCaseString = new Lowered(new TextOf(testString)).asString();\n\t\treturn lowerCaseString;\n\t}\n\n\tpublic String toUpperCase(String testString) throws Exception {\n\t\tString upperCaseString = new Upper(new TextOf(testString)).asString();\n\t\treturn upperCaseString;\n\t}\n\n\tpublic boolean isBlank(String testString) throws Exception {\n\t\treturn new IsBlank(new TextOf(testString)) != null;\n\t}\n\n}\n", "test_case": "package com.baeldung.cactoos;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.io.IOException;\n\nimport org.junit.Test;\n\npublic class CactoosStringUtilsUnitTest {\n\n\t@Test\n\tpublic void whenFormattedTextIsPassedWithArgs_thenFormattedStringIsReturned() throws IOException {\n\n\t\tCactoosStringUtils obj = new CactoosStringUtils();\n\n\t\t// when\n\t\tString formattedString = obj.createdFormattedString(\"John\");\n\n\t\t// then\n\t\tassertEquals(\"Hello John\", formattedString);\n\n\t}\n\t\n\t@Test\n\tpublic void whenStringIsPassesdToLoweredOrUpperClass_thenCorrespondingStringIsReturned() throws Exception {\n\n\t\tCactoosStringUtils obj = new CactoosStringUtils();\n\n\t\t// when\n\t\tString lowerCaseString = obj.toLowerCase(\"TeSt StrIng\");\n\t\tString upperCaseString = obj.toUpperCase(\"TeSt StrIng\");\n\n\t\t// then\n\t\tassertEquals(\"test string\", lowerCaseString);\n\t\tassertEquals(\"TEST STRING\", upperCaseString);\n\n\t}\n\t\n\t@Test\n\tpublic void whenEmptyStringIsPassesd_thenIsBlankReturnsTrue() throws Exception {\n\n\t\tCactoosStringUtils obj = new CactoosStringUtils();\n\n\t\t// when\n\t\tboolean isBlankEmptyString = obj.isBlank(\"\");\n\t\tboolean isBlankNull = obj.isBlank(null);\n\n\t\t// then\n\t\tassertEquals(true, isBlankEmptyString);\n\t\tassertEquals(true, isBlankNull);\n\n\t}\n\n}\n"}
{"code_source": "package com.baeldung.jcommander.helloworld;\n\nimport com.beust.jcommander.JCommander;\nimport com.beust.jcommander.Parameter;\n\npublic class HelloWorldApp {\n\n    /*\n     * Execute:\n     * mvn exec:java -Dexec.mainClass=com.baeldung.jcommander.helloworld.HelloWorldApp -q \\\n     *   -Dexec.args=\"--name JavaWorld\"\n     */\n    public static void main(String[] args) {\n        HelloWorldArgs jArgs = new HelloWorldArgs();\n        JCommander helloCmd = JCommander\n          .newBuilder()\n          .addObject(jArgs)\n          .build();\n\n        helloCmd.parse(args);\n        System.out.println(\"Hello \" + jArgs.getName());\n    }\n}\n\nclass HelloWorldArgs {\n\n    @Parameter(\n      names = \"--name\",\n      description = \"User name\",\n      required = true\n    )\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n}\n", "test_case": "package com.baeldung.jcommander.helloworld;\n\nimport com.beust.jcommander.JCommander;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class HelloWorldAppUnitTest {\n\n    @Test\n    public void whenJCommanderInvokedWithArgs_thenArgsParsed() {\n\n        HelloWorldArgs jArgs = new HelloWorldArgs();\n        JCommander helloCmd = JCommander\n          .newBuilder()\n          .addObject(jArgs)\n          .build();\n\n        // when\n        String[] argv = new String[] {\n          \"--name\", \"JavaWorld\"\n        };\n        helloCmd.parse(argv);\n\n        // then\n        assertEquals(\"JavaWorld\", jArgs.getName());\n    }\n}\n"}
{"code_source": "package com.baeldung.jcommander.usagebilling.cli;\n\nimport com.baeldung.jcommander.usagebilling.cli.splitter.ColonParameterSplitter;\nimport com.baeldung.jcommander.usagebilling.cli.validator.UUIDValidator;\nimport com.baeldung.jcommander.usagebilling.model.CurrentChargesRequest;\nimport com.baeldung.jcommander.usagebilling.model.CurrentChargesResponse;\nimport com.baeldung.jcommander.usagebilling.service.FetchCurrentChargesService;\nimport com.beust.jcommander.Parameter;\nimport com.beust.jcommander.Parameters;\nimport lombok.Getter;\n\nimport java.util.List;\n\nimport static com.baeldung.jcommander.usagebilling.cli.UsageBasedBilling.*;\nimport static com.baeldung.jcommander.usagebilling.service.FetchCurrentChargesService.getDefault;\n\n@Parameters(\n  commandNames = { FETCH_CMD },\n  commandDescription = \"Fetch charges for a customer in the current month, can be itemized or aggregated\"\n)\n@Getter\nclass FetchCurrentChargesCommand {\n\n    FetchCurrentChargesCommand() {\n    }\n\n    private FetchCurrentChargesService service = getDefault();\n\n    @Parameter(names = \"--help\", help = true)\n    private boolean help;\n\n    @Parameter(\n      names = { \"--customer\", \"-C\" },\n      description = \"Id of the Customer who's using the services\",\n      validateWith = UUIDValidator.class,\n      order = 1,\n      required = true\n    )\n    private String customerId;\n\n    @Parameter(\n      names = { \"--subscription\", \"-S\" },\n      description = \"Filter charges for specific subscription Ids, includes all subscriptions if no value is specified\",\n      variableArity = true,\n      splitter = ColonParameterSplitter.class,\n      order = 2\n    )\n    private List<String> subscriptionIds;\n\n    @Parameter(\n      names = { \"--itemized\" },\n      description = \"Whether the response should contain breakdown by subscription, only aggregate values are returned by default\",\n      order = 3\n    )\n    private boolean itemized;\n\n    void fetch() {\n        CurrentChargesRequest req = CurrentChargesRequest.builder()\n          .customerId(customerId)\n          .subscriptionIds(subscriptionIds)\n          .itemized(itemized)\n          .build();\n\n        CurrentChargesResponse response = service.fetch(req);\n        System.out.println(response);\n    }\n}\n", "test_case": "package com.baeldung.jcommander.usagebilling.cli;\n\nimport com.beust.jcommander.JCommander;\nimport org.junit.Test;\n\nimport static org.hamcrest.collection.IsIterableContainingInOrder.contains;\nimport static org.junit.Assert.assertThat;\n\npublic class FetchCurrentChargesCommandUnitTest {\n\n    private JCommander jc = JCommander.newBuilder()\n      .addObject(new FetchCurrentChargesCommand())\n      .build();\n\n    @Test\n    public void whenParsedMultipleSubscriptionsParameter_thenParameterSubscriptionsIsPopulated() {\n        FetchCurrentChargesCommand cmd = (FetchCurrentChargesCommand) jc\n          .getObjects()\n          .get(0);\n        \n        jc.parse(new String[] {\n          \"-C\", \"cb898e7a-f2a0-46d2-9a09-531f1cee1839\",\n          \"-S\", \"subscriptionA001\",\n          \"-S\", \"subscriptionA002\",\n          \"-S\", \"subscriptionA003\",\n        });\n\n        assertThat(cmd.getSubscriptionIds(),\n          contains(\"subscriptionA001\", \"subscriptionA002\", \"subscriptionA003\"));\n    }\n\n    @Test\n    public void whenParsedSubscriptionsColonSeparatedParameter_thenParameterSubscriptionsIsPopulated() {\n        FetchCurrentChargesCommand cmd = (FetchCurrentChargesCommand) jc\n          .getObjects()\n          .get(0);\n\n        jc.parse(new String[] {\n          \"-C\", \"cb898e7a-f2a0-46d2-9a09-531f1cee1839\",\n          \"-S\", \"subscriptionA001:subscriptionA002:subscriptionA003\",\n        });\n\n        assertThat(cmd.getSubscriptionIds(), \n          contains(\"subscriptionA001\", \"subscriptionA002\", \"subscriptionA003\"));\n    }\n\n    @Test\n    public void whenParsedSubscriptionsWithVariableArity_thenParameterSubscriptionsIsPopulated() {\n        FetchCurrentChargesCommand cmd = (FetchCurrentChargesCommand) jc\n          .getObjects()\n          .get(0);\n\n        jc.parse(new String[] {\n          \"-C\", \"cb898e7a-f2a0-46d2-9a09-531f1cee1839\",\n          \"-S\", \"subscriptionA001\", \"subscriptionA002\", \"subscriptionA003\",\n        });\n\n        assertThat(cmd.getSubscriptionIds(),\n          contains(\"subscriptionA001\", \"subscriptionA002\", \"subscriptionA003\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.jcommander.usagebilling.cli;\n\nimport com.baeldung.jcommander.usagebilling.cli.converter.ISO8601TimestampConverter;\nimport com.baeldung.jcommander.usagebilling.cli.validator.UUIDValidator;\nimport com.baeldung.jcommander.usagebilling.model.UsageRequest;\nimport com.baeldung.jcommander.usagebilling.model.UsageRequest.PricingType;\nimport com.baeldung.jcommander.usagebilling.service.SubmitUsageService;\nimport com.beust.jcommander.Parameter;\nimport com.beust.jcommander.Parameters;\nimport lombok.Getter;\n\nimport java.math.BigDecimal;\nimport java.time.Instant;\n\nimport static com.baeldung.jcommander.usagebilling.cli.UsageBasedBilling.*;\nimport static com.baeldung.jcommander.usagebilling.service.SubmitUsageService.getDefault;\n\n@Parameters(\n  commandNames = { SUBMIT_CMD },\n  commandDescription = \"Submit usage for a given customer and subscription, accepts one usage item\"\n)\n@Getter\nclass SubmitUsageCommand {\n\n    SubmitUsageCommand() {\n    }\n\n    private SubmitUsageService service = getDefault();\n\n    @Parameter(names = \"--help\", help = true)\n    private boolean help;\n\n    @Parameter(\n      names = { \"--customer\", \"-C\" },\n      description = \"Id of the Customer who's using the services\",\n      validateWith = UUIDValidator.class,\n      order = 1,\n      required = true\n    )\n    private String customerId;\n\n    @Parameter(\n      names = { \"--subscription\", \"-S\" },\n      description = \"Id of the Subscription that was purchased\",\n      order = 2,\n      required = true\n    )\n    private String subscriptionId;\n\n    @Parameter(\n      names = { \"--pricing-type\", \"-P\" },\n      description = \"Pricing type of the usage reported\",\n      order = 3,\n      required = true\n    )\n    private PricingType pricingType;\n\n    @Parameter(\n      names = { \"--quantity\" },\n      description = \"Used quantity; reported quantity is added over the billing period\",\n      order = 3,\n      required = true\n    )\n    private Integer quantity;\n\n    @Parameter(\n      names = { \"--timestamp\" },\n      description = \"Timestamp of the usage event, must lie in the current billing period\",\n      converter = ISO8601TimestampConverter.class,\n      order = 4,\n      required = true\n    )\n    private Instant timestamp;\n\n    @Parameter(\n      names = { \"--price\" },\n      description = \"If PRE_RATED, unit price to be applied per unit of usage quantity reported\",\n      order = 5\n    )\n    private BigDecimal price;\n\n    void submit() {\n        \n        UsageRequest req = UsageRequest.builder()\n          .customerId(customerId)\n          .subscriptionId(subscriptionId)\n          .pricingType(pricingType)\n          .quantity(quantity)\n          .timestamp(timestamp)\n          .price(price)\n          .build();\n\n        String reqId = service.submit(req);\n        System.out.println(\"Generated Request Id for reference: \" + reqId);\n    }\n}\n", "test_case": "package com.baeldung.jcommander.usagebilling.cli;\n\nimport com.beust.jcommander.JCommander;\nimport com.beust.jcommander.ParameterException;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class SubmitUsageCommandUnitTest {\n\n    private JCommander jc = JCommander.newBuilder()\n        .addObject(new SubmitUsageCommand())\n        .build();\n\n    @Test\n    public void whenParsedCustomerParameter_thenParameterOfTypeStringIsPopulated() {\n        jc.parse(new String[] {\n            \"--customer\", \"cb898e7a-f2a0-46d2-9a09-531f1cee1839\",\n            \"--subscription\", \"subscriptionPQRMN001\",\n            \"--pricing-type\", \"PRE_RATED\",\n            \"--timestamp\", \"2019-10-03T10:58:00\",\n            \"--quantity\", \"7\",\n            \"--price\", \"24.56\"\n        });\n        \n        SubmitUsageCommand cmd = (SubmitUsageCommand) jc\n          .getObjects()\n          .get(0);\n        assertEquals(\"cb898e7a-f2a0-46d2-9a09-531f1cee1839\", cmd.getCustomerId());\n    }\n\n    @Test\n    public void whenParsedTimestampParameter_thenParameterOfTypeInstantIsPopulated() {\n        jc.parse(new String[] {\n            \"--customer\", \"cb898e7a-f2a0-46d2-9a09-531f1cee1839\",\n            \"--subscription\", \"subscriptionPQRMN001\",\n            \"--pricing-type\", \"PRE_RATED\",\n            \"--timestamp\", \"2019-10-03T10:58:00\",\n            \"--quantity\", \"7\",\n            \"--price\", \"24.56\"\n        });\n        \n        SubmitUsageCommand cmd = (SubmitUsageCommand) jc\n          .getObjects()\n          .get(0);\n        assertEquals(\"2019-10-03T10:58:00Z\", cmd\n          .getTimestamp()\n          .toString());\n    }\n\n    @Test(expected = ParameterException.class)\n    public void whenParsedCustomerIdNotUUID_thenParameterException() {\n        jc.parse(new String[] {\n          \"--customer\", \"customer001\",\n          \"--subscription\", \"subscriptionPQRMN001\",\n          \"--pricing-type\", \"PRE_RATED\",\n          \"--timestamp\", \"2019-10-03T10:58:00\",\n          \"--quantity\", \"7\",\n          \"--price\", \"24.56\"\n        });\n    }\n}\n"}
{"code_source": "package com.baeldung.takes;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport org.takes.Response;\nimport org.takes.facets.fallback.Fallback;\nimport org.takes.facets.fallback.FbChain;\nimport org.takes.facets.fallback.FbStatus;\nimport org.takes.facets.fallback.RqFallback;\nimport org.takes.facets.fallback.TkFallback;\nimport org.takes.facets.fork.FkRegex;\nimport org.takes.facets.fork.TkFork;\nimport org.takes.http.Exit;\nimport org.takes.http.FtBasic;\nimport org.takes.misc.Opt;\nimport org.takes.rs.RsText;\n\npublic final class TakesApp {\n\n    public static void main(final String... args) throws IOException, SQLException {\n        new FtBasic(\n            new TkFallback(\n                new TkFork(\n                    new FkRegex(\"/\", new TakesHelloWorld()),\n                    new FkRegex(\"/index\", new TakesIndex()),\n                    new FkRegex(\"/contact\", new TakesContact())\n                    ),\n                new FbChain(\n                    new FbStatus(404, new RsText(\"Page Not Found\")),\n                    new FbStatus(405, new RsText(\"Method Not Allowed\")),\n                    new Fallback() {\n                        @Override\n                        public Opt<Response> route(final RqFallback req) {\n                            return new Opt.Single<Response>(new RsText(req.throwable().getMessage()));\n                        }\n                    })\n                ), 6060\n            ).start(Exit.NEVER);\n    }\n\n}", "test_case": "package com.baeldung.takes;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.io.IOException;\nimport java.net.URI;\n\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\nimport org.junit.Test;\nimport org.takes.http.FtRemote;\n\npublic class TakesAppIntegrationTest {\n\n    @Test\n    public void givenTake_whenRunRemoteServer_thenRespond() throws Exception {\n        new FtRemote(new TakesContact()).exec(\n            new FtRemote.Script() {\n                @Override\n                public void exec(final URI home) throws IOException {\n                    HttpClient client = HttpClientBuilder.create().build();    \n                    HttpResponse response = client.execute(new HttpGet(home));\n                    int statusCode = response.getStatusLine().getStatusCode();\n                    HttpEntity entity = response.getEntity();\n                    String result = EntityUtils.toString(entity);\n                    \n                    assertEquals(200, statusCode);\n                    assertEquals(\"Contact us at https://www.baeldung.com\", result);\n                }\n            });\n    }\n}\n"}
{"code_source": "package com.baeldung.takes;\n\nimport java.io.IOException;\n\nimport org.takes.Request;\nimport org.takes.Response;\nimport org.takes.Take;\nimport org.takes.rs.RsWithBody;\nimport org.takes.rs.RsWithStatus;\nimport org.takes.rs.RsWithType;\n\npublic final class TakesContact implements Take {\n\n    @Override\n    public Response act(Request req) throws IOException {\n        return new RsWithStatus(\n            new RsWithType(\n                new RsWithBody(\"Contact us at https://www.baeldung.com\"), \n                \"text/html\"), 200);\n    } \n\n}\n", "test_case": "package com.baeldung.takes;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\nimport org.takes.rq.RqFake;\nimport org.takes.rs.RsPrint;\n\npublic class TakesContactUnitTest {\n\n    @Test\n    public void givenTake_whenInvokeActMethod_thenRespond() throws Exception {\n        final String resp = new RsPrint(new TakesContact().act(new RqFake())).printBody();\n        assertEquals(\"Contact us at https://www.baeldung.com\", resp);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.distinct;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\n\npublic class DistinctWithJavaFunction {\n\n    public static <T> Predicate<T> distinctByKey(Function<? super T, ?> keyExtractor) {\n        Map<Object, Boolean> seen = new ConcurrentHashMap<>();\n        return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;\n    }\n\n}\n", "test_case": "package com.baeldung.distinct;\n\nimport static org.junit.Assert.assertTrue;\nimport static com.baeldung.distinct.DistinctWithJavaFunction.distinctByKey;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class DistinctWithJavaFunctionUnitTest {\n    List<Person> personList;\n\n    @Before\n    public void init() {\n        personList = PersonDataGenerator.getPersonListWithFakeValues();\n    }\n\n    @Test\n    public void whenFilterListByName_thenSizeShouldBe4() {\n        List<Person> personListFiltered = personList.stream().filter(distinctByKey(p -> p.getName())).collect(Collectors.toList());\n        assertTrue(personListFiltered.size() == 4);\n    }\n\n    @Test\n    public void whenFilterListByAge_thenSizeShouldBe2() {\n        List<Person> personListFiltered = personList.stream().filter(distinctByKey(p -> p.getAge())).collect(Collectors.toList());\n        assertTrue(personListFiltered.size() == 2);\n    }\n\n    @Test\n    public void whenFilterListWithDefaultDistinct_thenSizeShouldBe5() {\n        List<Person> personListFiltered = personList.stream().distinct().collect(Collectors.toList());\n        assertTrue(personListFiltered.size() == 5);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.eclipsecollections;\n\nimport java.util.List;\n\nimport org.eclipse.collections.impl.set.mutable.UnifiedSet;\n\npublic class ConvertContainerToAnother {\n\n    @SuppressWarnings(\"rawtypes\")\n    public static List convertToList() {\n        UnifiedSet<String> cars = new UnifiedSet<>();\n\n        cars.add(\"Toyota\");\n        cars.add(\"Mercedes\");\n        cars.add(\"Volkswagen\");\n\n        return cars.toList();\n    }\n}\n", "test_case": "package com.baeldung.eclipsecollections;\n\nimport org.assertj.core.api.Assertions;\nimport org.eclipse.collections.api.list.MutableList;\nimport org.eclipse.collections.impl.list.mutable.FastList;\nimport org.junit.Test;\n\npublic class ConvertContainerToAnotherUnitTest {\n\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @Test\n    public void whenConvertContainerToAnother_thenCorrect() {\n        MutableList<String> cars = (MutableList) ConvertContainerToAnother.convertToList();\n\n        Assertions.assertThat(cars).containsExactlyElementsOf(FastList.newListWith(\"Volkswagen\", \"Toyota\", \"Mercedes\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.jnats;\n\nimport io.nats.client.AsyncSubscription;\nimport io.nats.client.Connection;\nimport io.nats.client.Message;\nimport io.nats.client.Nats;\nimport io.nats.client.Options;\nimport io.nats.client.Subscription;\nimport io.nats.client.SyncSubscription;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic final class NatsClient {\n\n    private final String serverURI;\n\n    private final Connection natsConnection;\n\n    private final Map<String, Subscription> subscriptions = new HashMap<>();\n\n    private final static Logger log = LoggerFactory.getLogger(NatsClient.class);\n\n    NatsClient() {\n        this.serverURI = \"jnats://localhost:4222\";\n        natsConnection = initConnection(serverURI);\n    }\n\n    public NatsClient(String serverURI) {\n        if ((serverURI != null) && (!serverURI.isEmpty())) {\n            this.serverURI = serverURI;\n        } else {\n            this.serverURI = \"jnats://localhost:4222\";\n        }\n\n        natsConnection = initConnection(serverURI);\n    }\n\n    public void closeConnection() {\n        // Close connection\n        natsConnection.close();\n    }\n\n    private Connection initConnection(String uri) {\n        try {\n            Options options = new Options.Builder()\n              .errorCb(ex -> log.error(\"Connection Exception: \", ex))\n              .disconnectedCb(event -> log.error(\"Channel disconnected: {}\", event.getConnection()))\n              .reconnectedCb(event -> log.error(\"Reconnected to server: {}\", event.getConnection()))\n              .build();\n\n            return Nats.connect(uri, options);\n        } catch (IOException ioe) {\n            log.error(\"Error connecting to NATs! \", ioe);\n            return null;\n        }\n    }\n\n    void publishMessage(String topic, String replyTo, String message) {\n        try {\n            natsConnection.publish(topic, replyTo, message.getBytes());\n        } catch (IOException ioe) {\n            log.error(\"Error publishing message: {} to {} \", message, topic, ioe);\n        }\n    }\n\n    public void subscribeAsync(String topic) {\n\n        AsyncSubscription subscription = natsConnection.subscribe(\n          topic, msg -> log.info(\"Received message on {}\", msg.getSubject()));\n\n        if (subscription == null) {\n            log.error(\"Error subscribing to {}\", topic);\n        } else {\n            subscriptions.put(topic, subscription);\n        }\n    }\n\n    SyncSubscription subscribeSync(String topic) {\n        return natsConnection.subscribe(topic);\n    }\n\n    public void unsubscribe(String topic) {\n        try {\n            Subscription subscription = subscriptions.get(topic);\n\n            if (subscription != null) {\n                subscription.unsubscribe();\n            } else {\n                log.error(\"{} not found. Unable to unsubscribe.\", topic);\n            }\n        } catch (IOException ioe) {\n            log.error(\"Error unsubscribing from {} \", topic, ioe);\n        }\n    }\n\n    Message makeRequest(String topic, String request) {\n        try {\n            return natsConnection.request(topic, request.getBytes(), 100);\n        } catch (IOException | InterruptedException ioe) {\n            log.error(\"Error making request {} to {} \", topic, request, ioe);\n            return null;\n        }\n    }\n\n    void installReply(String topic, String reply) {\n        natsConnection.subscribe(topic, message -> {\n            try {\n                natsConnection.publish(message.getReplyTo(), reply.getBytes());\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        });\n    }\n\n    SyncSubscription joinQueueGroup(String topic, String queue) {\n        return natsConnection.subscribe(topic, queue);\n    }\n}\n", "test_case": "package com.baeldung.jnats;\n\nimport io.nats.client.Message;\nimport io.nats.client.SyncSubscription;\nimport org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\n\npublic class NatsClientLiveTest {\n\n    @Test\n    public void givenMessageExchange_MessagesReceived() throws Exception {\n\n        NatsClient client = connectClient();\n\n        SyncSubscription fooSubscription = client.subscribeSync(\"foo.bar\");\n        SyncSubscription barSubscription = client.subscribeSync(\"bar.foo\");\n        client.publishMessage(\"foo.bar\", \"bar.foo\", \"hello there\");\n\n        Message message = fooSubscription.nextMessage(200);\n        assertNotNull(\"No message!\", message);\n        assertEquals(\"hello there\", new String(message.getData()));\n\n        client.publishMessage(message.getReplyTo(), message.getSubject(), \"hello back\");\n\n        message = barSubscription.nextMessage(200);\n        assertNotNull(\"No message!\", message);\n        assertEquals(\"hello back\", new String(message.getData()));\n    }\n\n\n    private NatsClient connectClient() {\n        return new NatsClient();\n    }\n\n    @Test\n    public void whenWildCardSubscription_andMatchTopic_MessageReceived() throws Exception {\n\n        NatsClient client = connectClient();\n\n        SyncSubscription fooSubscription = client.subscribeSync(\"foo.*\");\n\n        client.publishMessage(\"foo.bar\", \"bar.foo\", \"hello there\");\n\n        Message message = fooSubscription.nextMessage(200);\n        assertNotNull(\"No message!\", message);\n        assertEquals(\"hello there\", new String(message.getData()));\n    }\n\n    @Test\n    public void whenWildCardSubscription_andNotMatchTopic_NoMessageReceived() throws Exception {\n\n        NatsClient client = connectClient();\n\n        SyncSubscription fooSubscription = client.subscribeSync(\"foo.*\");\n\n        client.publishMessage(\"foo.bar.plop\", \"bar.foo\", \"hello there\");\n\n        Message message = fooSubscription.nextMessage(200);\n        assertNull(\"Got message!\", message);\n\n\n        SyncSubscription barSubscription = client.subscribeSync(\"foo.>\");\n\n        client.publishMessage(\"foo.bar.plop\", \"bar.foo\", \"hello there\");\n\n        message = barSubscription.nextMessage(200);\n        assertNotNull(\"No message!\", message);\n        assertEquals(\"hello there\", new String(message.getData()));\n\n\n    }\n\n\n    @Test\n    public void givenRequest_ReplyReceived() {\n\n        NatsClient client = connectClient();\n        client.installReply(\"salary.requests\", \"denied!\");\n\n        Message reply = client.makeRequest(\"salary.requests\", \"I need a raise.\");\n        assertNotNull(\"No message!\", reply);\n        assertEquals(\"denied!\", new String(reply.getData()));\n\n    }\n\n    @Test\n    public void givenQueueMessage_OnlyOneReceived() throws Exception {\n\n        NatsClient client = connectClient();\n\n        SyncSubscription queue1 = client.joinQueueGroup(\"foo.bar.requests\", \"queue1\");\n        SyncSubscription queue2 = client.joinQueueGroup(\"foo.bar.requests\", \"queue1\");\n\n        client.publishMessage(\"foo.bar.requests\", \"queuerequestor\", \"foobar\");\n\n        List<Message> messages = new ArrayList<>();\n\n        Message message = queue1.nextMessage(200);\n\n        if (message != null) messages.add(message);\n        message = queue2.nextMessage(200);\n\n        if (message != null) messages.add(message);\n        assertEquals(1, messages.size());\n\n    }\n\n}\n"}
{"code_source": "package com.baeldung.r;\n\n/**\n * FastR showcase.\n * \n * @author Donato Rimenti\n */\npublic class FastRMean {\n\n    /**\n     * Invokes the customMean R function passing the given values as arguments.\n     * \n     * @param values the input to the mean script\n     * @return the result of the R script\n     */\n    public double mean(int[] values) {\n        Context polyglot = Context.newBuilder()\n            .allowAllAccess(true)\n            .build();\n        String meanScriptContent = RUtils.getMeanScriptContent();\n        polyglot.eval(\"R\", meanScriptContent);\n        Value rBindings = polyglot.getBindings(\"R\");\n        Value rInput = rBindings.getMember(\"c\")\n            .execute(values);\n        return rBindings.getMember(\"customMean\")\n            .execute(rInput)\n            .asDouble();\n    }\n\n}", "test_case": "package com.baeldung.r;\n\nimport org.junit.Assert;\nimport org.junit.Ignore;\nimport org.junit.Test;\n\n/**\n * Test for {@link FastRMean}.\n * \n * @author Donato Rimenti\n */\n@Ignore\npublic class FastRMeanUnitTest {\n\n    /**\n     * Object to test.\n     */\n    private FastRMean fastrMean = new FastRMean();\n\n    /**\n     * Test for {@link FastRMeanUnitTest#mean(int[])}.\n     */\n    @Test\n    public void givenValues_whenMean_thenCorrect() {\n        int[] input = { 1, 2, 3, 4, 5 };\n        double result = fastrMean.mean(input);\n        Assert.assertEquals(3.0, result, 0.000001);\n    }\n}"}
{"code_source": "package com.baeldung.r;\n\nimport com.github.rcaller.rstuff.RCaller;\nimport com.github.rcaller.rstuff.RCallerOptions;\nimport com.github.rcaller.rstuff.RCode;\n\nimport java.io.IOException;\nimport java.net.URISyntaxException;\n\n/**\n * RCaller showcase.\n * \n * @author Donato Rimenti\n */\npublic class RCallerMean {\n\n    /**\n     * Invokes the customMean R function passing the given values as arguments.\n     * \n     * @param values the input to the mean script\n     * @return the result of the R script\n     * @throws IOException        if any error occurs\n     * @throws URISyntaxException if any error occurs\n     */\n    public double mean(int[] values) throws IOException, URISyntaxException {\n        String fileContent = RUtils.getMeanScriptContent();\n        RCode code = RCode.create();\n        code.addRCode(fileContent);\n        code.addIntArray(\"input\", values);\n        code.addRCode(\"result <- customMean(input)\");\n        RCaller caller = RCaller.create(code, RCallerOptions.create());\n        caller.runAndReturnResult(\"result\");\n        return caller.getParser()\n            .getAsDoubleArray(\"result\")[0];\n    }\n\n}", "test_case": "package com.baeldung.r;\n\nimport org.junit.Assert;\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport javax.script.ScriptException;\nimport java.io.IOException;\nimport java.net.URISyntaxException;\n\n/**\n * Test for {@link RCallerMean}.\n * \n * @author Donato Rimenti\n */\n@Ignore\npublic class RCallerMeanIntegrationTest {\n\n    /**\n     * Object to test.\n     */\n    private RCallerMean rcallerMean = new RCallerMean();\n\n    /**\n     * Test for {@link RCallerMeanIntegrationTest#mean(int[])}.\n     * \n     * @throws ScriptException    if an error occurs\n     * @throws URISyntaxException if an error occurs\n     */\n    @Test\n    public void givenValues_whenMean_thenCorrect() throws IOException, URISyntaxException {\n        int[] input = { 1, 2, 3, 4, 5 };\n        double result = rcallerMean.mean(input);\n        Assert.assertEquals(3.0, result, 0.000001);\n    }\n}"}
{"code_source": "package com.baeldung.r;\n\nimport org.renjin.script.RenjinScriptEngine;\nimport org.renjin.sexp.DoubleArrayVector;\n\nimport javax.script.ScriptException;\nimport java.io.IOException;\nimport java.net.URISyntaxException;\n\n/**\n * Renjin showcase.\n * \n * @author Donato Rimenti\n */\npublic class RenjinMean {\n\n    /**\n     * Invokes the customMean R function passing the given values as arguments.\n     * \n     * @param values the input to the mean script\n     * @return the result of the R script\n     * @throws IOException        if any error occurs\n     * @throws URISyntaxException if any error occurs\n     * @throws ScriptException    if any error occurs\n     */\n    public double mean(int[] values) throws IOException, URISyntaxException, ScriptException {\n        RenjinScriptEngine engine = new RenjinScriptEngine();\n        String meanScriptContent = RUtils.getMeanScriptContent();\n        engine.put(\"input\", values);\n        engine.eval(meanScriptContent);\n        DoubleArrayVector result = (DoubleArrayVector) engine.eval(\"customMean(input)\");\n        return result.asReal();\n    }\n\n}", "test_case": "package com.baeldung.r;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport javax.script.ScriptException;\nimport java.io.IOException;\nimport java.net.URISyntaxException;\n\n/**\n * Test for {@link RenjinMean}.\n * \n * @author Donato Rimenti\n */\npublic class RenjinMeanUnitTest {\n\n    /**\n     * Object to test.\n     */\n    private RenjinMean renjinMean = new RenjinMean();\n\n    /**\n    * Test for {@link RenjinMeanUnitTest#mean(int[])}.\n    * \n    * @throws ScriptException    if an error occurs\n    * @throws URISyntaxException if an error occurs\n    * @throws IOException        if an error occurs\n    */\n    @Test\n    public void givenValues_whenMean_thenCorrect() throws IOException, URISyntaxException, ScriptException {\n        int[] input = { 1, 2, 3, 4, 5 };\n        double result = renjinMean.mean(input);\n        Assert.assertEquals(3.0, result, 0.000001);\n    }\n}"}
{"code_source": "package com.baeldung.r;\n\nimport org.rosuda.REngine.REXPMismatchException;\nimport org.rosuda.REngine.REngineException;\nimport org.rosuda.REngine.Rserve.RConnection;\n\n/**\n * Rserve showcase.\n * \n * @author Donato Rimenti\n */\npublic class RserveMean {\n\n    /**\n     * Connects to the Rserve istance listening on 127.0.0.1:6311 and invokes the\n     * customMean R function passing the given values as arguments.\n     * \n     * @param values the input to the mean script\n     * @return the result of the R script\n     * @throws REngineException      if any error occurs\n     * @throws REXPMismatchException if any error occurs\n     */\n    public double mean(int[] values) throws REngineException, REXPMismatchException {\n        RConnection c = new RConnection();\n        c.assign(\"input\", values);\n        return c.eval(\"customMean(input)\")\n            .asDouble();\n    }\n\n}", "test_case": "package com.baeldung.r;\n\nimport org.junit.Assert;\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport org.rosuda.REngine.REXPMismatchException;\nimport org.rosuda.REngine.REngineException;\n\n/**\n * Test for {@link RserveMean}.\n * \n * @author Donato Rimenti\n */\n@Ignore\npublic class RserveMeanIntegrationTest {\n\n    /**\n     * Object to test.\n     */\n    private RserveMean rserveMean = new RserveMean();\n\n    /**\n     * Test for {@link RserveMeanIntegrationTest#mean(int[])}.\n     * \n     * @throws REXPMismatchException if an error occurs\n     * @throws REngineException      if an error occurs\n     */\n    @Test\n    public void givenValues_whenMean_thenCorrect() throws REngineException, REXPMismatchException {\n        int[] input = { 1, 2, 3, 4, 5 };\n        double result = rserveMean.mean(input);\n        Assert.assertEquals(3.0, result, 0.000001);\n    }\n}"}
{"code_source": "package com.baeldung.sbe;\n\nimport java.util.StringJoiner;\n\nimport com.baeldung.sbe.stub.Currency;\nimport com.baeldung.sbe.stub.Market;\n\npublic class MarketData {\n\n    private final int amount;\n    private final double price;\n    private final Market market;\n    private final Currency currency;\n    private final String symbol;\n\n    public MarketData(int amount, double price, Market market, Currency currency, String symbol) {\n        this.amount = amount;\n        this.price = price;\n        this.market = market;\n        this.currency = currency;\n        this.symbol = symbol;\n    }\n\n    public static class Builder {\n        private int amount;\n\n        public Builder amount(int amount) {\n            this.amount = amount;\n            return this;\n        }\n\n        private double price;\n\n        public Builder price(double price) {\n            this.price = price;\n            return this;\n        }\n\n        private Market market;\n\n        public Builder market(Market market) {\n            this.market = market;\n            return this;\n        }\n\n        private Currency currency;\n\n        public Builder currency(Currency currency) {\n            this.currency = currency;\n            return this;\n        }\n\n        private String symbol;\n\n        public Builder symbol(String symbol) {\n            this.symbol = symbol;\n            return this;\n        }\n\n        public MarketData build() {\n            return new MarketData(amount, price, market, currency, symbol);\n        }\n    }\n\n    public static Builder builder() {\n        return new Builder();\n    }\n\n    public int getAmount() {\n        return amount;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public Market getMarket() {\n        return market;\n    }\n\n    public Currency getCurrency() {\n        return currency;\n    }\n\n    public String getSymbol() {\n        return symbol;\n    }\n\n    @Override\n    public String toString() {\n        return new StringJoiner(\", \", MarketData.class.getSimpleName() + \"[\", \"]\").add(\"amount=\" + amount)\n          .add(\"price=\" + price)\n          .add(\"market=\" + market)\n          .add(\"currency=\" + currency)\n          .add(\"symbol='\" + symbol + \"'\")\n          .toString();\n    }\n}\n", "test_case": "package com.baeldung.test;\n\nimport java.math.BigDecimal;\nimport java.nio.ByteBuffer;\n\nimport org.agrona.concurrent.UnsafeBuffer;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.sbe.MarketData;\nimport com.baeldung.sbe.stub.Currency;\nimport com.baeldung.sbe.stub.Market;\nimport com.baeldung.sbe.stub.MessageHeaderDecoder;\nimport com.baeldung.sbe.stub.MessageHeaderEncoder;\nimport com.baeldung.sbe.stub.TradeDataDecoder;\nimport com.baeldung.sbe.stub.TradeDataEncoder;\n\npublic class EncodeDecodeMarketDataUnitTest {\n\n    private MarketData marketData;\n\n    @BeforeEach\n    public void setup() {\n        marketData = new MarketData(2, 128.99, Market.NYSE, Currency.USD, \"IBM\");\n    }\n\n    @Test\n    public void givenMarketData_whenEncode_thenDecodedValuesMatch() {\n        // our buffer to write encoded data, initial cap. 128 bytes\n        UnsafeBuffer buffer = new UnsafeBuffer(ByteBuffer.allocate(128));\n        // necessary encoders\n        MessageHeaderEncoder headerEncoder = new MessageHeaderEncoder();\n        TradeDataEncoder dataEncoder = new TradeDataEncoder();\n        // we parse price data (double) into two parts: mantis and exponent\n        BigDecimal priceDecimal = BigDecimal.valueOf(marketData.getPrice());\n        int priceMantissa = priceDecimal.scaleByPowerOfTen(priceDecimal.scale())\n          .intValue();\n        int priceExponent = priceDecimal.scale() * -1;\n        // encode data\n        TradeDataEncoder encoder = dataEncoder.wrapAndApplyHeader(buffer, 0, headerEncoder);\n        encoder.amount(marketData.getAmount());\n        encoder.quote()\n          .market(marketData.getMarket())\n          .currency(marketData.getCurrency())\n          .symbol(marketData.getSymbol())\n          .price()\n          .mantissa(priceMantissa)\n          .exponent((byte) priceExponent);\n\n        // necessary decoders\n        MessageHeaderDecoder headerDecoder = new MessageHeaderDecoder();\n        TradeDataDecoder dataDecoder = new TradeDataDecoder();\n        // decode data\n        dataDecoder.wrapAndApplyHeader(buffer, 0, headerDecoder);\n        // decode price data (from mantissa and exponent) into a double\n        double price = BigDecimal.valueOf(dataDecoder.quote()\n            .price()\n            .mantissa())\n          .scaleByPowerOfTen(dataDecoder.quote()\n            .price()\n            .exponent())\n          .doubleValue();\n        // ensure we have the exact same values\n        Assertions.assertEquals(2, dataDecoder.amount());\n        Assertions.assertEquals(\"IBM\", dataDecoder.quote()\n          .symbol());\n        Assertions.assertEquals(Market.NYSE, dataDecoder.quote()\n          .market());\n        Assertions.assertEquals(Currency.USD, dataDecoder.quote()\n          .currency());\n        Assertions.assertEquals(128.99, price);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.commons.beanutils;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.List;\n\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.beanutils.PropertyUtils;\n\npublic class CourseService {\n\n    public static void setValues(Course course, String name, List<String> codes) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {\n        // Setting the simple properties\n        PropertyUtils.setSimpleProperty(course, \"name\", name);\n        PropertyUtils.setSimpleProperty(course, \"codes\", codes);\n    }\n\n    public static void setIndexedValue(Course course, int codeIndex, String code) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {\n        // Setting the indexed properties\n        PropertyUtils.setIndexedProperty(course, \"codes[\" + codeIndex + \"]\", code);\n    }\n\n    public static void setMappedValue(Course course, String enrollId, Student student) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {\n        // Setting the mapped properties\n        PropertyUtils.setMappedProperty(course, \"enrolledStudent(\" + enrollId + \")\", student);\n    }\n\n    public static String getNestedValue(Course course, String enrollId, String nestedPropertyName) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {\n        return (String) PropertyUtils.getNestedProperty(course, \"enrolledStudent(\" + enrollId + \").\" + nestedPropertyName);\n    }\n\n    public static void copyProperties(Course course, CourseEntity courseEntity) throws IllegalAccessException, InvocationTargetException {\n        BeanUtils.copyProperties(courseEntity, course);\n    }\n}\n", "test_case": "package com.baeldung.commons.beanutils;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class CourseServiceUnitTest {\n\n    @Test\n    public void givenCourse_whenSetValuesUsingPropertyUtil_thenReturnSetValues() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {\n        Course course = new Course();\n        String name = \"Computer Science\";\n        List<String> codes = Arrays.asList(\"CS\", \"CS01\");\n        CourseService.setValues(course, name, codes);\n\n        Assert.assertEquals(name, course.getName());\n        Assert.assertEquals(2, course.getCodes().size());\n        Assert.assertEquals(\"CS\", course.getCodes().get(0));\n\n        CourseService.setIndexedValue(course, 1, \"CS02\");\n        Assert.assertEquals(\"CS02\", course.getCodes().get(1));\n\n        Student student = new Student();\n        String studentName = \"Joe\";\n        student.setName(studentName);\n\n        CourseService.setMappedValue(course, \"ST-1\", student);\n        Assert.assertEquals(student, course.getEnrolledStudent(\"ST-1\"));\n\n        String accessedStudentName = CourseService.getNestedValue(course, \"ST-1\", \"name\");\n        Assert.assertEquals(studentName, accessedStudentName);\n    }\n\n    @Test\n    public void givenCopyProperties_whenCopyCourseToCourseEntity_thenCopyPropertyWithSameName() throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {\n        Course course = new Course();\n        course.setName(\"Computer Science\");\n        course.setCodes(Arrays.asList(\"CS\"));\n        course.setEnrolledStudent(\"ST-1\", new Student());\n\n        CourseEntity courseEntity = new CourseEntity();\n\n        CourseService.copyProperties(course, courseEntity);\n        Assert.assertNotNull(course.getName());\n\tAssert.assertNotNull(courseEntity.getName());\n        Assert.assertEquals(course.getName(), courseEntity.getName());\n        Assert.assertEquals(course.getCodes(), courseEntity.getCodes());\n        Assert.assertNull(courseEntity.getStudent(\"ST-1\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.crunch;\n\nimport java.util.Set;\n\nimport org.apache.crunch.FilterFn;\n\nimport com.google.common.collect.ImmutableSet;\n\n/**\n * A filter that removes known stop words.\n */\npublic class StopWordFilter extends FilterFn<String> {\n\n    // English stop words, borrowed from Lucene.\n    private static final Set<String> STOP_WORDS = ImmutableSet\n        .copyOf(new String[] { \"a\", \"and\", \"are\", \"as\", \"at\", \"be\", \"but\", \"by\",\n                \"for\", \"if\", \"in\", \"into\", \"is\", \"it\", \"no\", \"not\", \"of\", \"on\",\n                \"or\", \"s\", \"such\", \"t\", \"that\", \"the\", \"their\", \"then\", \"there\",\n                \"these\", \"they\", \"this\", \"to\", \"was\", \"will\", \"with\" });\n\n    @Override\n    public boolean accept(String word) {\n        return !STOP_WORDS.contains(word);\n    }\n}\n", "test_case": "package com.baeldung.crunch;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\nimport org.apache.crunch.FilterFn;\nimport org.apache.crunch.PCollection;\nimport org.apache.crunch.impl.mem.MemPipeline;\nimport org.junit.Test;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.Lists;\n\npublic class StopWordFilterUnitTest {\n\n    @Test\n    public void givenFilter_whenStopWordPassed_thenFalseReturned() {\n        FilterFn<String> filter = new StopWordFilter();\n\n        assertFalse(filter.accept(\"the\"));\n    }\n\n    @Test\n    public void givenFilter_whenNonStopWordPassed_thenTrueReturned() {\n        FilterFn<String> filter = new StopWordFilter();\n\n        assertTrue(filter.accept(\"Hello\"));\n    }\n\n    @Test\n    public void givenWordCollection_whenFiltered_thenStopWordsRemoved() {\n        PCollection<String> words = MemPipeline.collectionOf(\"This\", \"is\", \"a\",\n            \"test\", \"sentence\");\n\n        PCollection<String> noStopWords = words.filter(new StopWordFilter());\n\n        assertEquals(ImmutableList.of(\"This\", \"test\", \"sentence\"),\n            Lists.newArrayList(noStopWords.materialize()));\n    }\n}\n"}
{"code_source": "package com.baeldung.crunch;\n\nimport org.apache.crunch.DoFn;\nimport org.apache.crunch.Emitter;\n\nimport com.google.common.base.Splitter;\n\n/**\n * Splits a line of text, filtering known stop words.\n */\npublic class Tokenizer extends DoFn<String, String> {\n    private static final Splitter SPLITTER = Splitter\n        .onPattern(\"\\\\s+\")\n        .omitEmptyStrings();\n\n    @Override\n    public void process(String line,\n        Emitter<String> emitter) {\n        for (String word : SPLITTER.split(line)) {\n            emitter.emit(word);\n        }\n    }\n}\n", "test_case": "package com.baeldung.crunch;\n\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoMoreInteractions;\n\nimport org.apache.crunch.Emitter;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class TokenizerUnitTest {\n    @Mock\n    private Emitter<String> emitter;\n\n    @Test\n    public void givenTokenizer_whenLineProcessed_thenOnlyExpectedWordsEmitted() {\n        Tokenizer splitter = new Tokenizer();\n\n        splitter.process(\"  hello  world \", emitter);\n\n        verify(emitter).emit(\"hello\");\n        verify(emitter).emit(\"world\");\n        verifyNoMoreInteractions(emitter);\n    }\n}\n"}
{"code_source": "package com.baeldung.crunch;\n\nimport org.apache.crunch.MapFn;\n\npublic class ToUpperCaseFn extends MapFn<String, String> {\n\n    @Override\n    public String map(String input) {\n        return input != null ? input.toUpperCase() : input;\n    }\n}\n", "test_case": "package com.baeldung.crunch;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.apache.crunch.impl.mem.emit.InMemoryEmitter;\nimport org.junit.Test;\n\nimport com.google.common.collect.ImmutableList;\n\npublic class ToUpperCaseFnUnitTest {\n\n    @Test\n    public void givenString_whenToUpperCaseFnCalled_UpperCaseStringReturned() {\n        InMemoryEmitter<String> emitter = new InMemoryEmitter<String>();\n\n        new ToUpperCaseFn().process(\"input\", emitter);\n\n        assertEquals(ImmutableList.of(\"INPUT\"), emitter.getOutput());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.crunch;\n\nimport org.apache.crunch.MapFn;\n\n@SuppressWarnings(\"serial\")\npublic class ToUpperCaseWithCounterFn extends MapFn<String, String> {\n\n    @Override\n    public String map(String input) {\n        if (input == null) {\n            return input;\n        } else {\n            String output = input.toUpperCase();\n            if (!input.equals(output)) {\n                increment(\"UpperCase\", \"modified\");\n            }\n            return output;\n        }\n    }\n}\n", "test_case": "package com.baeldung.crunch;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.apache.crunch.PCollection;\nimport org.apache.crunch.impl.mem.MemPipeline;\nimport org.apache.crunch.types.writable.Writables;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.Lists;\n\npublic class ToUpperCaseWithCounterFnUnitTest {\n\n    @Before\n    public void setUp() throws Exception {\n        MemPipeline.clearCounters();\n    }\n\n    @Test\n    public void whenFunctionCalled_counterIncementendForChangedValues() {\n        PCollection<String> inputStrings = MemPipeline.collectionOf(\"This\", \"is\", \"a\", \"TEST\", \"string\");\n        PCollection<String> upperCaseStrings = inputStrings.parallelDo(new ToUpperCaseWithCounterFn(), Writables.strings());\n\n        assertEquals(ImmutableList.of(\"THIS\", \"IS\", \"A\", \"TEST\", \"STRING\"), Lists.newArrayList(upperCaseStrings.materialize()));\n        assertEquals(4L, MemPipeline.getCounters()\n            .findCounter(\"UpperCase\", \"modified\")\n            .getValue());\n    }\n}\n"}
{"code_source": "package com.baeldung.derive4j.adt;\n\nimport org.derive4j.Data;\n\nimport java.util.function.Function;\n\n@Data\ninterface Either<A,B>{\n    <X> X match(Function<A, X> left, Function<B, X> right);\n}\n", "test_case": "package com.baeldung.derive4j.adt;\n\nimport org.assertj.core.api.Assertions;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mockito;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport java.util.Optional;\nimport java.util.function.Function;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class EitherUnitTest {\n    @Test\n    public void testEitherIsCreatedFromRight() {\n       Either<Exception, String> either = Eithers.right(\"Okay\");\n       Optional<Exception> leftOptional = Eithers.getLeft(either);\n       Optional<String> rightOptional = Eithers.getRight(either);\n       Assertions.assertThat(leftOptional).isEmpty();\n       Assertions.assertThat(rightOptional).hasValue(\"Okay\");\n\n    }\n\n    @Test\n    public void testEitherIsMatchedWithRight() {\n        Either<Exception, String> either = Eithers.right(\"Okay\");\n        Function<Exception, String> leftFunction = Mockito.mock(Function.class);\n        Function<String, String> rightFunction = Mockito.mock(Function.class);\n        either.match(leftFunction, rightFunction);\n        Mockito.verify(rightFunction, Mockito.times(1)).apply(\"Okay\");\n        Mockito.verify(leftFunction, Mockito.times(0)).apply(Mockito.any(Exception.class));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.derive4j.lazy;\n\nimport org.derive4j.Data;\nimport org.derive4j.Derive;\nimport org.derive4j.Make;\n\n@Data(value = @Derive(\n    inClass = \"{ClassName}Impl\",\n    make = {Make.lazyConstructor, Make.constructors, Make.getters}\n))\npublic interface LazyRequest {\n    interface Cases<R>{\n        R GET(String path);\n        R POST(String path, String body);\n        R PUT(String path, String body);\n        R DELETE(String path);\n    }\n\n    <R> R match(Cases<R> method);\n}\n\n", "test_case": "package com.baeldung.derive4j.lazy;\n\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport java.util.function.Supplier;\n\npublic class LazyRequestUnitTest {\n\n    @Test\n    public void givenLazyContstructedRequest_whenRequestIsReferenced_thenRequestIsLazilyContructed() {\n        LazyRequestSupplier mockSupplier = Mockito.spy(new LazyRequestSupplier());\n\n        LazyRequest request = LazyRequestImpl.lazy(() -> mockSupplier.get());\n        Mockito.verify(mockSupplier, Mockito.times(0)).get();\n        Assert.assertEquals(LazyRequestImpl.getPath(request), \"http://test.com/get\");\n        Mockito.verify(mockSupplier, Mockito.times(1)).get();\n\n    }\n\n    class LazyRequestSupplier implements Supplier<LazyRequest> {\n        @Override\n        public LazyRequest get() {\n            return LazyRequestImpl.GET(\"http://test.com/get\");\n        }\n    }\n}\n"}
{"code_source": "package com.baeldung.derive4j.pattern;\n\nimport org.derive4j.Data;\n\n@Data\ninterface HTTPRequest {\n    interface Cases<R>{\n        R GET(String path);\n        R POST(String path, String body);\n        R PUT(String path, String body);\n        R DELETE(String path);\n    }\n\n     <R> R match(Cases<R> method);\n}\n", "test_case": "package com.baeldung.derive4j.pattern;\n\nimport org.junit.Assert;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\npublic class HTTPRequestUnitTest {\n    public static HTTPServer server;\n\n    @BeforeClass\n    public static void setUp() {\n        server = new HTTPServer();\n    }\n\n    @Test\n    public void givenHttpGETRequest_whenRequestReachesServer_thenProperResponseIsReturned() {\n        HTTPRequest postRequest = HTTPRequests.POST(\"http://test.com/post\", \"Resource\");\n        HTTPResponse response = server.acceptRequest(postRequest);\n        Assert.assertEquals(201, response.getStatusCode());\n        Assert.assertEquals(HTTPServer.POST_RESPONSE_BODY, response.getResponseBody());\n    }\n}\n"}
{"code_source": "package com.baeldung.flink;\n\nimport org.apache.flink.api.java.DataSet;\nimport org.apache.flink.api.java.ExecutionEnvironment;\nimport org.apache.flink.api.java.aggregation.Aggregations;\nimport org.apache.flink.api.java.tuple.Tuple2;\n\nimport java.util.List;\n\npublic class WordCount {\n\n    public static DataSet<Tuple2<String, Integer>> startWordCount(ExecutionEnvironment env, List<String> lines) throws Exception {\n        DataSet<String> text = env.fromCollection(lines);\n\n        return text.flatMap(new LineSplitter()).groupBy(0).aggregate(Aggregations.SUM, 1);\n\n    }\n}", "test_case": "package com.baeldung.flink;\n\nimport org.apache.flink.api.common.operators.Order;\nimport org.apache.flink.api.java.DataSet;\nimport org.apache.flink.api.java.ExecutionEnvironment;\nimport org.apache.flink.api.java.functions.KeySelector;\nimport org.apache.flink.api.java.tuple.Tuple2;\nimport org.apache.flink.api.java.tuple.Tuple3;\nimport org.apache.flink.streaming.api.datastream.DataStream;\nimport org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;\nimport org.apache.flink.streaming.api.windowing.assigners.TumblingEventTimeWindows;\nimport org.apache.flink.streaming.api.windowing.time.Time;\nimport org.junit.Test;\n\nimport java.time.ZonedDateTime;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class WordCountIntegrationTest {\n    private final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n\n    @Test\n    public void givenDataSet_whenExecuteWordCount_thenReturnWordCount() throws Exception {\n        // given\n        List<String> lines = Arrays.asList(\"This is a first sentence\", \"This is a second sentence with a one word\");\n\n        // when\n        DataSet<Tuple2<String, Integer>> result = WordCount.startWordCount(env, lines);\n\n        // then\n        List<Tuple2<String, Integer>> collect = result.collect();\n        assertThat(collect).containsExactlyInAnyOrder(new Tuple2<>(\"a\", 3), new Tuple2<>(\"sentence\", 2), new Tuple2<>(\"word\", 1), new Tuple2<>(\"is\", 2), new Tuple2<>(\"this\", 2), new Tuple2<>(\"second\", 1), new Tuple2<>(\"first\", 1), new Tuple2<>(\"with\", 1),\n                new Tuple2<>(\"one\", 1));\n    }\n\n    @Test\n    public void givenListOfAmounts_whenUseMapReduce_thenSumAmountsThatAreOnlyAboveThreshold() throws Exception {\n        // given\n        DataSet<Integer> amounts = env.fromElements(1, 29, 40, 50);\n        int threshold = 30;\n\n        // when\n        List<Integer> collect = amounts.filter(a -> a > threshold).reduce((integer, t1) -> integer + t1).collect();\n\n        // then\n        assertThat(collect.get(0)).isEqualTo(90);\n    }\n\n    @Test\n    public void givenDataSetOfComplexObjects_whenMapToGetOneField_thenReturnedListHaveProperElements() throws Exception {\n        // given\n        DataSet<Person> personDataSource = env.fromCollection(Arrays.asList(new Person(23, \"Tom\"), new Person(75, \"Michael\")));\n\n        // when\n        List<Integer> ages = personDataSource.map(p -> p.age).collect();\n\n        // then\n        assertThat(ages).hasSize(2);\n        assertThat(ages).contains(23, 75);\n\n    }\n\n    @Test\n    public void givenDataSet_whenSortItByOneField_thenShouldReturnSortedDataSet() throws Exception {\n        // given\n        Tuple2<Integer, String> secondPerson = new Tuple2<>(4, \"Tom\");\n        Tuple2<Integer, String> thirdPerson = new Tuple2<>(5, \"Scott\");\n        Tuple2<Integer, String> fourthPerson = new Tuple2<>(200, \"Michael\");\n        Tuple2<Integer, String> firstPerson = new Tuple2<>(1, \"Jack\");\n        DataSet<Tuple2<Integer, String>> transactions = env.fromElements(fourthPerson, secondPerson, thirdPerson, firstPerson);\n\n        // when\n        List<Tuple2<Integer, String>> sorted = transactions.sortPartition(new IdKeySelectorTransaction(), Order.ASCENDING).collect();\n\n        // then\n        assertThat(sorted).containsExactly(firstPerson, secondPerson, thirdPerson, fourthPerson);\n    }\n\n    @Test\n    public void giveTwoDataSets_whenJoinUsingId_thenProduceJoinedData() throws Exception {\n        // given\n        Tuple3<Integer, String, String> address = new Tuple3<>(1, \"5th Avenue\", \"London\");\n        DataSet<Tuple3<Integer, String, String>> addresses = env.fromElements(address);\n\n        Tuple2<Integer, String> firstTransaction = new Tuple2<>(1, \"Transaction_1\");\n        DataSet<Tuple2<Integer, String>> transactions = env.fromElements(firstTransaction, new Tuple2<>(12, \"Transaction_2\"));\n\n        // when\n        List<Tuple2<Tuple2<Integer, String>, Tuple3<Integer, String, String>>> joined = transactions.join(addresses).where(new IdKeySelectorTransaction()).equalTo(new IdKeySelectorAddress()).collect();\n\n        // then\n        assertThat(joined).hasSize(1);\n        assertThat(joined).contains(new Tuple2<>(firstTransaction, address));\n\n    }\n\n    @Test\n    public void givenStreamOfEvents_whenProcessEvents_thenShouldPrintResultsOnSinkOperation() throws Exception {\n        // given\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n        DataStream<String> text = env.fromElements(\"This is a first sentence\", \"This is a second sentence with a one word\");\n\n        SingleOutputStreamOperator<String> upperCase = text.map(String::toUpperCase);\n\n        upperCase.print();\n\n        // when\n        env.execute();\n    }\n\n    @Test\n    public void givenStreamOfEvents_whenProcessEvents_thenShouldApplyWindowingOnTransformation() throws Exception {\n        // given\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n        SingleOutputStreamOperator<Tuple2<Integer, Long>> windowed = env.fromElements(new Tuple2<>(16, ZonedDateTime.now().plusMinutes(25).toInstant().getEpochSecond()), new Tuple2<>(15, ZonedDateTime.now().plusMinutes(2).toInstant().getEpochSecond()))\n                .assignTimestampsAndWatermarks(new BoundedOutOfOrdernessTimestampExtractor<Tuple2<Integer, Long>>(Time.seconds(20)) {\n                    @Override\n                    public long extractTimestamp(Tuple2<Integer, Long> element) {\n                        return element.f1 * 1000;\n                    }\n                });\n\n        SingleOutputStreamOperator<Tuple2<Integer, Long>> reduced = windowed.windowAll(TumblingEventTimeWindows.of(Time.seconds(5))).maxBy(0, true);\n\n        reduced.print();\n\n        // when\n        env.execute();\n    }\n\n    private static class IdKeySelectorTransaction implements KeySelector<Tuple2<Integer, String>, Integer> {\n        @Override\n        public Integer getKey(Tuple2<Integer, String> value) {\n            return value.f0;\n        }\n    }\n\n    private static class IdKeySelectorAddress implements KeySelector<Tuple3<Integer, String, String>, Integer> {\n        @Override\n        public Integer getKey(Tuple3<Integer, String, String> value) {\n            return value.f0;\n        }\n    }\n\n    private static class Person {\n        private final int age;\n        private final String name;\n\n        private Person(int age, String name) {\n            this.age = age;\n            this.name = name;\n        }\n    }\n\n}"}
{"code_source": "package com.baeldung.infinispan.service;\n\nimport com.baeldung.infinispan.listener.CacheListener;\nimport com.baeldung.infinispan.repository.HelloWorldRepository;\nimport org.infinispan.Cache;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class HelloWorldService {\n\n    private final HelloWorldRepository repository;\n\n    private final Cache<String, String> simpleHelloWorldCache;\n    private final Cache<String, String> expiringHelloWorldCache;\n    private final Cache<String, String> evictingHelloWorldCache;\n    private final Cache<String, String> passivatingHelloWorldCache;\n\n    public HelloWorldService(HelloWorldRepository repository, CacheListener listener, Cache<String, String> simpleHelloWorldCache, Cache<String, String> expiringHelloWorldCache, Cache<String, String> evictingHelloWorldCache,\n            Cache<String, String> passivatingHelloWorldCache) {\n\n        this.repository = repository;\n\n        this.simpleHelloWorldCache = simpleHelloWorldCache;\n        this.expiringHelloWorldCache = expiringHelloWorldCache;\n        this.evictingHelloWorldCache = evictingHelloWorldCache;\n        this.passivatingHelloWorldCache = passivatingHelloWorldCache;\n    }\n\n    public String findSimpleHelloWorld() {\n        String cacheKey = \"simple-hello\";\n        return simpleHelloWorldCache.computeIfAbsent(cacheKey, k -> repository.getHelloWorld());\n    }\n\n    public String findExpiringHelloWorld() {\n        String cacheKey = \"expiring-hello\";\n        String helloWorld = simpleHelloWorldCache.get(cacheKey);\n        if (helloWorld == null) {\n            helloWorld = repository.getHelloWorld();\n            simpleHelloWorldCache.put(cacheKey, helloWorld, 1, TimeUnit.SECONDS);\n        }\n        return helloWorld;\n    }\n\n    public String findIdleHelloWorld() {\n        String cacheKey = \"idle-hello\";\n        String helloWorld = simpleHelloWorldCache.get(cacheKey);\n        if (helloWorld == null) {\n            helloWorld = repository.getHelloWorld();\n            simpleHelloWorldCache.put(cacheKey, helloWorld, -1, TimeUnit.SECONDS, 10, TimeUnit.SECONDS);\n        }\n        return helloWorld;\n    }\n\n    public String findSimpleHelloWorldInExpiringCache() {\n        String cacheKey = \"simple-hello\";\n        String helloWorld = expiringHelloWorldCache.get(cacheKey);\n        if (helloWorld == null) {\n            helloWorld = repository.getHelloWorld();\n            expiringHelloWorldCache.put(cacheKey, helloWorld);\n        }\n        return helloWorld;\n    }\n\n    public String findEvictingHelloWorld(String key) {\n        String value = evictingHelloWorldCache.get(key);\n        if (value == null) {\n            value = repository.getHelloWorld();\n            evictingHelloWorldCache.put(key, value);\n        }\n        return value;\n    }\n\n    public String findPassivatingHelloWorld(String key) {\n        return passivatingHelloWorldCache.computeIfAbsent(key, k -> repository.getHelloWorld());\n    }\n\n}\n", "test_case": "package com.baeldung.infinispan.service;\n\nimport com.baeldung.infinispan.AbstractIntegrationTest;\nimport org.junit.Test;\n\nimport static org.assertj.core.api.Java6Assertions.assertThat;\n\npublic class HelloWorldServiceTemporaryLiveTest extends AbstractIntegrationTest {\n\n    @Test\n    public void whenGetIsCalledTwoTimes_thenTheSecondShouldHitTheCache() {\n        assertThat(timeThis(() -> helloWorldService.findSimpleHelloWorld())).isGreaterThanOrEqualTo(1000);\n\n        assertThat(timeThis(() -> helloWorldService.findSimpleHelloWorld())).isLessThan(100);\n    }\n\n    @Test\n    public void whenGetIsCalledTwoTimesQuickly_thenTheSecondShouldHitTheCache() {\n        assertThat(timeThis(() -> helloWorldService.findExpiringHelloWorld())).isGreaterThanOrEqualTo(1000);\n\n        assertThat(timeThis(() -> helloWorldService.findExpiringHelloWorld())).isLessThan(100);\n    }\n\n    @Test\n    public void whenGetIsCalledTwoTimesSparsely_thenNeitherShouldHitTheCache() throws InterruptedException {\n        assertThat(timeThis(() -> helloWorldService.findExpiringHelloWorld())).isGreaterThanOrEqualTo(1000);\n\n        Thread.sleep(1100);\n\n        assertThat(timeThis(() -> helloWorldService.findExpiringHelloWorld())).isGreaterThanOrEqualTo(1000);\n    }\n\n    @Test\n    public void givenOneEntryIsConfigured_whenTwoAreAdded_thenFirstShouldntBeAvailable() {\n        assertThat(timeThis(() -> helloWorldService.findEvictingHelloWorld(\"key 1\"))).isGreaterThanOrEqualTo(1000);\n\n        assertThat(timeThis(() -> helloWorldService.findEvictingHelloWorld(\"key 2\"))).isGreaterThanOrEqualTo(1000);\n\n        assertThat(timeThis(() -> helloWorldService.findEvictingHelloWorld(\"key 1\"))).isGreaterThanOrEqualTo(1000);\n    }\n\n    @Test\n    public void givenOneEntryIsConfigured_whenTwoAreAdded_thenTheFirstShouldBeAvailable() {\n        assertThat(timeThis(() -> helloWorldService.findPassivatingHelloWorld(\"key 1\"))).isGreaterThanOrEqualTo(1000);\n\n        assertThat(timeThis(() -> helloWorldService.findPassivatingHelloWorld(\"key 2\"))).isGreaterThanOrEqualTo(1000);\n\n        assertThat(timeThis(() -> helloWorldService.findPassivatingHelloWorld(\"key 1\"))).isLessThan(100);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.infinispan.service;\n\nimport org.infinispan.Cache;\nimport org.springframework.util.StopWatch;\n\nimport javax.transaction.TransactionManager;\n\npublic class TransactionalService {\n\n    private final Cache<String, Integer> transactionalCache;\n\n    private static final String KEY = \"key\";\n\n    public TransactionalService(Cache<String, Integer> transactionalCache) {\n        this.transactionalCache = transactionalCache;\n\n        transactionalCache.put(KEY, 0);\n    }\n\n    public Integer getQuickHowManyVisits() {\n        try {\n            TransactionManager tm = transactionalCache.getAdvancedCache().getTransactionManager();\n            tm.begin();\n            Integer howManyVisits = transactionalCache.get(KEY);\n            howManyVisits++;\n            System.out.println(\"Ill try to set HowManyVisits to \" + howManyVisits);\n            StopWatch watch = new StopWatch();\n            watch.start();\n            transactionalCache.put(KEY, howManyVisits);\n            watch.stop();\n            System.out.println(\"I was able to set HowManyVisits to \" + howManyVisits + \" after waiting \" + watch.getTotalTimeSeconds() + \" seconds\");\n\n            tm.commit();\n            return howManyVisits;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n\n    public void startBackgroundBatch() {\n        try {\n            TransactionManager tm = transactionalCache.getAdvancedCache().getTransactionManager();\n            tm.begin();\n            transactionalCache.put(KEY, 1000);\n            System.out.println(\"HowManyVisits should now be 1000, \" + \"but we are holding the transaction\");\n            Thread.sleep(1000L);\n            tm.rollback();\n            System.out.println(\"The slow batch suffered a rollback\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.infinispan.service;\n\nimport com.baeldung.infinispan.AbstractIntegrationTest;\nimport org.junit.Test;\n\nimport static org.assertj.core.api.Java6Assertions.assertThat;\n\npublic class TransactionalServiceIntegrationTest extends AbstractIntegrationTest {\n\n    @Test\n    public void whenLockingAnEntry_thenItShouldBeInaccessible() throws InterruptedException {\n        Runnable backGroundJob = () -> transactionalService.startBackgroundBatch();\n        Thread backgroundThread = new Thread(backGroundJob);\n        transactionalService.getQuickHowManyVisits();\n        backgroundThread.start();\n        Thread.sleep(100); // lets wait our thread warm up\n\n        assertThat(timeThis(() -> transactionalService.getQuickHowManyVisits())).isGreaterThan(500).isLessThan(1000);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.measurement;\n\nimport javax.measure.Quantity;\nimport javax.measure.quantity.Volume;\n\npublic class WaterTank {\n\n    private Quantity<Volume> capacityMeasure;\n    private double capacityDouble;\n\n    public void setCapacityMeasure(Quantity<Volume> capacityMeasure) {\n        this.capacityMeasure = capacityMeasure;\n    }\n\n    public void setCapacityDouble(double capacityDouble) {\n        this.capacityDouble = capacityDouble;\n    }\n\n    public Quantity<Volume> getCapacityMeasure() {\n        return capacityMeasure;\n    }\n\n    public double getCapacityDouble() {\n        return capacityDouble;\n    }\n}\n", "test_case": "package com.baeldung.measurement;\n\nimport javax.measure.Quantity;\nimport javax.measure.quantity.Area;\nimport javax.measure.quantity.Length;\nimport javax.measure.quantity.Pressure;\nimport javax.measure.quantity.Volume;\n\nimport javax.measure.Unit;\nimport javax.measure.UnitConverter;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\nimport org.junit.Test;\n\nimport com.baeldung.measurement.WaterTank;\n\nimport tec.units.ri.format.SimpleUnitFormat;\nimport tec.units.ri.quantity.Quantities;\nimport tec.units.ri.unit.MetricPrefix;\nimport static tec.units.ri.unit.Units.*;\n\npublic class WaterTankUnitTest {\n\n    @Test\n    public void givenQuantity_whenGetUnitAndConvertValue_thenSuccess() {\n        WaterTank waterTank = new WaterTank();\n        waterTank.setCapacityMeasure(Quantities.getQuantity(9.2, LITRE));\n        assertEquals(LITRE, waterTank.getCapacityMeasure().getUnit());\n\n        Quantity<Volume> waterCapacity = waterTank.getCapacityMeasure();\n        double volumeInLitre = waterCapacity.getValue().doubleValue();\n        assertEquals(9.2, volumeInLitre, 0.0f);\n\n        double volumeInMilliLitre = waterCapacity.to(MetricPrefix.MILLI(LITRE)).getValue().doubleValue();\n        assertEquals(9200.0, volumeInMilliLitre, 0.0f);\n\n        // compilation error\n        // volumeInMilliLitre = waterCapacity.to(MetricPrefix.MILLI(KILOGRAM));\n\n        Unit<Length> Kilometer = MetricPrefix.KILO(METRE);\n\n        // compilation error\n        // Unit<Length> Centimeter = MetricPrefix.CENTI(LITRE);\n    }\n\n    @Test\n    public void givenUnit_whenAlternateUnit_ThenGetAlternateUnit() {\n\n        Unit<Pressure> PASCAL = NEWTON.divide(METRE.pow(2)).alternate(\"Pa\").asType(Pressure.class);\n        assertTrue(SimpleUnitFormat.getInstance().parse(\"Pa\").equals(PASCAL));\n    }\n\n    @Test\n    public void givenUnit_whenProduct_ThenGetProductUnit() {\n        Unit<Area> squareMetre = METRE.multiply(METRE).asType(Area.class);\n        Quantity<Length> line = Quantities.getQuantity(2, METRE);\n        assertEquals(line.multiply(line).getUnit(), squareMetre);\n    }\n\n    @Test\n    public void givenMeters_whenConvertToKilometer_ThenConverted() {\n        double distanceInMeters = 50.0;\n        UnitConverter metreToKilometre = METRE.getConverterTo(MetricPrefix.KILO(METRE));\n        double distanceInKilometers = metreToKilometre.convert(distanceInMeters);\n        assertEquals(0.05, distanceInKilometers, 0.00f);\n    }\n\n    @Test\n    public void givenSymbol_WhenCompareToSystemUnit_ThenSuccess() {\n        assertTrue(SimpleUnitFormat.getInstance().parse(\"kW\").equals(MetricPrefix.KILO(WATT)));\n        assertTrue(SimpleUnitFormat.getInstance().parse(\"ms\").equals(SECOND.divide(1000)));\n    }\n\n    @Test\n    public void givenUnits_WhenAdd_ThenSuccess() {\n        Quantity<Length> total = Quantities.getQuantity(2, METRE).add(Quantities.getQuantity(3, METRE));\n        assertEquals(total.getValue().intValue(), 5);\n\n        // compilation error\n        // Quantity<Length> total = Quantities.getQuantity(2, METRE).add(Quantities.getQuantity(3, LITRE));\n\n        Quantity<Length> totalKm = Quantities.getQuantity(2, METRE).add(Quantities.getQuantity(3, MetricPrefix.KILO(METRE)));\n        assertEquals(totalKm.getValue().intValue(), 3002);\n    }\n}\n"}
{"code_source": "package com.baeldung.univocity;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.baeldung.univocity.model.Product;\nimport com.univocity.parsers.common.processor.BatchedColumnProcessor;\nimport com.univocity.parsers.common.processor.BeanListProcessor;\nimport com.univocity.parsers.csv.CsvParser;\nimport com.univocity.parsers.csv.CsvParserSettings;\nimport com.univocity.parsers.fixed.FixedWidthFields;\nimport com.univocity.parsers.fixed.FixedWidthParser;\nimport com.univocity.parsers.fixed.FixedWidthParserSettings;\n\npublic class ParsingService {\n    private Logger logger = LoggerFactory.getLogger(ParsingService.class);\n\n    public List<String[]> parseCsvFile(String relativePath) {\n        try (Reader inputReader = new InputStreamReader(new FileInputStream(new File(relativePath)), \"UTF-8\")) {\n            CsvParserSettings settings = new CsvParserSettings();\n            settings.setMaxCharsPerColumn(100);\n            settings.setMaxColumns(50);\n            CsvParser parser = new CsvParser(settings);\n            List<String[]> parsedRows = parser.parseAll(inputReader);\n            return parsedRows;\n        } catch (IOException e) {\n            logger.error(\"IOException opening file: \" + relativePath + \" \" + e.getMessage());\n            return new ArrayList<String[]>();\n        }\n    }\n\n    public List<String[]> parseFixedWidthFile(String relativePath) {\n        try (Reader inputReader = new InputStreamReader(new FileInputStream(new File(relativePath)), \"UTF-8\")) {\n            FixedWidthFields fieldLengths = new FixedWidthFields(8, 30, 10);\n            FixedWidthParserSettings settings = new FixedWidthParserSettings(fieldLengths);\n\n            FixedWidthParser parser = new FixedWidthParser(settings);\n            List<String[]> parsedRows = parser.parseAll(inputReader);\n            return parsedRows;\n        } catch (IOException e) {\n            logger.error(\"IOException opening file: \" + relativePath + \" \" + e.getMessage());\n            return new ArrayList<String[]>();\n        }\n    }\n\n    public List<Product> parseCsvFileIntoBeans(String relativePath) {\n        try (Reader inputReader = new InputStreamReader(new FileInputStream(new File(relativePath)), \"UTF-8\")) {\n            BeanListProcessor<Product> rowProcessor = new BeanListProcessor<Product>(Product.class);\n            CsvParserSettings settings = new CsvParserSettings();\n            settings.setHeaderExtractionEnabled(true);\n            settings.setProcessor(rowProcessor);\n            CsvParser parser = new CsvParser(settings);\n            parser.parse(inputReader);\n            return rowProcessor.getBeans();\n        } catch (IOException e) {\n            logger.error(\"IOException opening file: \" + relativePath + \" \" + e.getMessage());\n            return new ArrayList<Product>();\n        }\n    }\n\n    public List<String[]> parseCsvFileInBatches(String relativePath) {\n        try (Reader inputReader = new InputStreamReader(new FileInputStream(new File(relativePath)), \"UTF-8\")) {\n            CsvParserSettings settings = new CsvParserSettings();\n            settings.setProcessor(new BatchedColumnProcessor(5) {\n                @Override\n                public void batchProcessed(int rowsInThisBatch) {\n                }\n            });\n            CsvParser parser = new CsvParser(settings);\n            List<String[]> parsedRows = parser.parseAll(inputReader);\n            return parsedRows;\n        } catch (IOException e) {\n            logger.error(\"IOException opening file: \" + relativePath + \" \" + e.getMessage());\n            return new ArrayList<String[]>();\n        }\n    }\n}\n", "test_case": "package com.baeldung.univocity;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.After;\nimport org.junit.Test;\n\nimport com.baeldung.univocity.model.Product;\n\npublic class ParsingServiceUnitTest {\n\n    @After\n    public void cleanup() {\n        File csvFile = new File(\"src/test/resources/outputProductList.csv\");\n        csvFile.deleteOnExit();\n        \n        File textFile = new File(\"src/test/resources/outputProductList.txt\");\n        textFile.deleteOnExit();\n    }\n    \n    @Test\n    public void givenCsvFile_thenParsedResultsShouldBeReturned() {\n        ParsingService parsingService = new ParsingService();\n        List<String[]> productData = parsingService.parseCsvFile(\"src/test/resources/productList.csv\");\n        assertEquals(3, productData.size());\n        assertEquals(3, productData.get(0).length);\n        assertEquals(\"A8993-10\", productData.get(0)[0]);\n        assertEquals(\"Extra large widget\", productData.get(0)[1]);\n        assertEquals(\"35.42\", productData.get(0)[2]);\n        assertEquals(\"D-2938-1\", productData.get(1)[0]);\n        assertEquals(\"Winding widget \\\"Deluxe Model\\\"\", productData.get(1)[1]);\n        assertEquals(\"245.99\", productData.get(1)[2]);\n        assertEquals(\"R3212-32\", productData.get(2)[0]);\n        assertEquals(\"Standard widget\", productData.get(2)[1]);\n        assertEquals(\"2.34\", productData.get(2)[2]);\n    }\n\n    @Test\n    public void givenFixedWidthFile_thenParsedResultsShouldBeReturned() {\n        ParsingService parsingService = new ParsingService();\n        List<String[]> productData = parsingService.parseFixedWidthFile(\"src/test/resources/productList.txt\");\n        // Note: any extra spaces on the end will cause a null line to be added\n        assertEquals(3, productData.size());\n        assertEquals(3, productData.get(0).length);\n        assertEquals(\"A8993-10\", productData.get(0)[0]);\n        assertEquals(\"Extra large widget\", productData.get(0)[1]);\n        assertEquals(\"35.42\", productData.get(0)[2]);\n        assertEquals(\"D-2938-1\", productData.get(1)[0]);\n        assertEquals(\"Winding widget \\\"Deluxe Model\\\"\", productData.get(1)[1]);\n        assertEquals(\"245.99\", productData.get(1)[2]);\n        assertEquals(\"R3212-32\", productData.get(2)[0]);\n        assertEquals(\"Standard widget\", productData.get(2)[1]);\n        assertEquals(\"2.34\", productData.get(2)[2]);\n    }\n\n    @Test\n    public void givenDataAndCsvOutputType_thenCsvFileProduced() {\n        OutputService outputService = new OutputService();\n        List<Object[]> productData = new ArrayList<>();\n        productData.add(new Object[] { \"1000-3-0\", \"Widget No. 96\", \"5.67\" });\n        productData.add(new Object[] { \"G930-M-P\", \"1/4\\\" Wocket\", \".67\" });\n        productData.add(new Object[] { \"8080-0-M\", \"No. 54 Jumbo Widget\", \"35.74\" });\n        outputService.writeData(productData, OutputService.OutputType.CSV, \"src/test/resources/outputProductList.csv\");\n\n        ParsingService parsingService = new ParsingService();\n        List<String[]> writtenData = parsingService.parseCsvFile(\"src/test/resources/outputProductList.csv\");\n        assertEquals(3, writtenData.size());\n        assertEquals(3, writtenData.get(0).length);\n    }\n\n    @Test\n    public void givenDataAndFixedWidthOutputType_thenFixedWidthFileProduced() {\n        OutputService outputService = new OutputService();\n        List<Object[]> productData = new ArrayList<>();\n        productData.add(new Object[] { \"1000-3-0\", \"Widget No. 96\", \"5.67\" });\n        productData.add(new Object[] { \"G930-M-P\", \"1/4\\\" Wocket\", \".67\" });\n        productData.add(new Object[] { \"8080-0-M\", \"No. 54 Jumbo Widget\", \"35.74\" });\n        outputService.writeData(productData, OutputService.OutputType.FIXED_WIDTH, \"src/test/resources/outputProductList.txt\");\n\n        ParsingService parsingService = new ParsingService();\n        List<String[]> writtenData = parsingService.parseFixedWidthFile(\"src/test/resources/outputProductList.txt\");\n        assertEquals(3, writtenData.size());\n        assertEquals(3, writtenData.get(0).length);\n    }\n\n    @Test\n    public void givenCsvFile_thenCsvFileParsedIntoBeans() {\n        ParsingService parsingService = new ParsingService();\n        List<Product> products = parsingService.parseCsvFileIntoBeans(\"src/test/resources/productListWithHeaders.csv\");\n        assertEquals(2, products.size());\n        assertEquals(\"Product [Product Number: 99-378AG, Description: Wocket Widget #42, Unit Price: 3.56]\", products.get(0)\n            .toString());\n        assertEquals(\"Product [Product Number: TB-333-0, Description: Turbine Widget replacement kit, Unit Price: 800.99]\", products.get(1)\n            .toString());\n    }\n\n    @Test\n    public void givenLisOfProduct_thenWriteFixedWidthFile() {\n        OutputService outputService = new OutputService();\n        Product product = new Product();\n        product.setProductNumber(\"007-PPG0\");\n        product.setDescription(\"3/8\\\" x 1\\\" Wocket\");\n        product.setUnitPrice(45.99f);\n        List<Product> products = new ArrayList<>();\n        products.add(product);\n        outputService.writeBeanToFixedWidthFile(products, \"src/test/resources/productListWithHeaders.txt\");\n        ParsingService parsingService = new ParsingService();\n        List<String[]> writtenData = parsingService.parseFixedWidthFile(\"src/test/resources/productListWithHeaders.txt\");\n        assertEquals(2, writtenData.size());\n        assertEquals(3, writtenData.get(0).length);\n    }\n\n    @Test\n    public void givenLargeCsvFile_thenParsedDataShouldBeReturned() {\n        ParsingService parsingService = new ParsingService();\n        List<String[]> productData = parsingService.parseCsvFileInBatches(\"src/test/resources/largeProductList.csv\");\n        assertEquals(36, productData.size());\n    }\n}\n"}
{"code_source": "package com.baeldung.libraries.jdo;\n\nimport org.datanucleus.api.jdo.JDOPersistenceManagerFactory;\nimport org.datanucleus.metadata.PersistenceUnitMetaData;\n\nimport javax.jdo.PersistenceManager;\nimport javax.jdo.PersistenceManagerFactory;\nimport javax.jdo.Query;\nimport javax.jdo.Transaction;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class GuideToJDO {\n\n    private static final Logger LOGGER = Logger.getLogger(GuideToJDO.class.getName());\n    private Random rnd = new Random();\n    private PersistenceUnitMetaData pumd;\n    private PersistenceUnitMetaData pumdXML;\n\n    public static void main(String[] args) {\n        new GuideToJDO();\n    }\n\n    public GuideToJDO() {\n        CreateH2Properties();\n        CreateXMLProperties();\n        CreateProducts();\n        ListProducts();\n        QueryJDOQL();\n        QuerySQL();\n        QueryJPQL();\n        UpdateProducts();\n        ListProducts();\n        DeleteProducts();\n        ListProducts();\n        persistXML();\n        listXMLProducts();\n    }\n\n    public void CreateH2Properties() {\n\n        pumd = new PersistenceUnitMetaData(\"dynamic-unit\", \"RESOURCE_LOCAL\", null);\n        pumd.addClassName(\"com.baeldung.libraries.jdo.Product\");\n        pumd.setExcludeUnlistedClasses();\n        pumd.addProperty(\"javax.jdo.option.ConnectionDriverName\", \"org.h2.Driver\");\n        pumd.addProperty(\"javax.jdo.option.ConnectionURL\", \"jdbc:h2:mem:mypersistence\");\n        pumd.addProperty(\"javax.jdo.option.ConnectionUserName\", \"sa\");\n        pumd.addProperty(\"javax.jdo.option.ConnectionPassword\", \"\");\n        pumd.addProperty(\"datanucleus.autoCreateSchema\", \"true\");\n\n    }\n\n    public void CreateXMLProperties() {\n        pumdXML = new PersistenceUnitMetaData(\"dynamic-unit\", \"RESOURCE_LOCAL\", null);\n        pumdXML.addClassName(\"com.baeldung.libraries.jdo.ProductXML\");\n        pumdXML.setExcludeUnlistedClasses();\n        pumdXML.addProperty(\"javax.jdo.option.ConnectionURL\", \"xml:file:myPersistence.xml\");\n        pumdXML.addProperty(\"datanucleus.autoCreateSchema\", \"true\");\n    }\n\n    public void CreateProducts() {\n        PersistenceManagerFactory pmf = new JDOPersistenceManagerFactory(pumd, null);\n        PersistenceManager pm = pmf.getPersistenceManager();\n        Transaction tx = pm.currentTransaction();\n        try {\n            tx.begin();\n            Product product = new Product(\"Tablet\", 80.0);\n            pm.makePersistent(product);\n            Product product2 = new Product(\"Phone\", 20.0);\n            pm.makePersistent(product2);\n            Product product3 = new Product(\"Laptop\", 200.0);\n            pm.makePersistent(product3);\n            for (int i = 0; i < 100; i++) {\n                String nam = \"Product-\" + i;\n                double price = rnd.nextDouble();\n                Product productx = new Product(nam, price);\n                pm.makePersistent(productx);\n            }\n            tx.commit();\n        } finally {\n            if (tx.isActive()) {\n                tx.rollback();\n            }\n            pm.close();\n        }\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    public void UpdateProducts() {\n        PersistenceManagerFactory pmf = new JDOPersistenceManagerFactory(pumd, null);\n        PersistenceManager pm = pmf.getPersistenceManager();\n        Transaction tx = pm.currentTransaction();\n        try {\n            tx.begin();\n            Query query = pm.newQuery(Product.class, \"name == \\\"Phone\\\"\");\n            Collection result = (Collection) query.execute();\n            Product product = (Product) result.iterator().next();\n            product.setName(\"Android Phone\");\n            tx.commit();\n        } finally {\n            if (tx.isActive()) {\n                tx.rollback();\n            }\n            pm.close();\n        }\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    public void DeleteProducts() {\n        PersistenceManagerFactory pmf = new JDOPersistenceManagerFactory(pumd, null);\n        PersistenceManager pm = pmf.getPersistenceManager();\n        Transaction tx = pm.currentTransaction();\n        try {\n            tx.begin();\n            Query query = pm.newQuery(Product.class, \"name == \\\"Android Phone\\\"\");\n            Collection result = (Collection) query.execute();\n            Product product = (Product) result.iterator().next();\n            pm.deletePersistent(product);\n            tx.commit();\n        } finally {\n            if (tx.isActive()) {\n                tx.rollback();\n            }\n            pm.close();\n        }\n    }\n\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    public void ListProducts() {\n        PersistenceManagerFactory pmf = new JDOPersistenceManagerFactory(pumd, null);\n        PersistenceManager pm = pmf.getPersistenceManager();\n        Transaction tx = pm.currentTransaction();\n        try {\n            tx.begin();\n\n            Query q = pm.newQuery(\"SELECT FROM \" + Product.class.getName() + \" WHERE price > 10\");\n            List<Product> products = (List<Product>) q.execute();\n            Iterator<Product> iter = products.iterator();\n            while (iter.hasNext()) {\n                Product p = iter.next();\n                LOGGER.log(Level.WARNING, \"Product name: {0} - Price: {1}\", new Object[] { p.name, p.price });\n            }\n            LOGGER.log(Level.INFO, \"--------------------------------------------------------------\");\n            tx.commit();\n        } finally {\n            if (tx.isActive()) {\n                tx.rollback();\n            }\n\n            pm.close();\n        }\n    }\n\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    public void QueryJDOQL() {\n        PersistenceManagerFactory pmf = new JDOPersistenceManagerFactory(pumd, null);\n        PersistenceManager pm = pmf.getPersistenceManager();\n        Transaction tx = pm.currentTransaction();\n        try {\n            tx.begin();\n\n            // Declarative JDOQL :\n            LOGGER.log(Level.INFO, \"Declarative JDOQL --------------------------------------------------------------\");\n            Query qDJDOQL = pm.newQuery(Product.class);\n            qDJDOQL.setFilter(\"name == 'Tablet' && price == price_value\");\n            qDJDOQL.declareParameters(\"double price_value\");\n            List<Product> resultsqDJDOQL = qDJDOQL.setParameters(80.0).executeList();\n\n            Iterator<Product> iterDJDOQL = resultsqDJDOQL.iterator();\n            while (iterDJDOQL.hasNext()) {\n                Product p = iterDJDOQL.next();\n                LOGGER.log(Level.WARNING, \"Product name: {0} - Price: {1}\", new Object[] { p.name, p.price });\n            }\n            LOGGER.log(Level.INFO, \"--------------------------------------------------------------\");\n\n            tx.commit();\n        } finally {\n            if (tx.isActive()) {\n                tx.rollback();\n            }\n\n            pm.close();\n        }\n    }\n\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    public void QuerySQL() {\n        PersistenceManagerFactory pmf = new JDOPersistenceManagerFactory(pumd, null);\n        PersistenceManager pm = pmf.getPersistenceManager();\n        Transaction tx = pm.currentTransaction();\n        try {\n            tx.begin();\n\n            // SQL :\n            LOGGER.log(Level.INFO, \"SQL --------------------------------------------------------------\");\n            Query query = pm.newQuery(\"javax.jdo.query.SQL\", \"SELECT * FROM PRODUCT\");\n            query.setClass(Product.class);\n            List<Product> results = query.executeList();\n\n            Iterator<Product> iter = results.iterator();\n            while (iter.hasNext()) {\n                Product p = iter.next();\n                LOGGER.log(Level.WARNING, \"Product name: {0} - Price: {1}\", new Object[] { p.name, p.price });\n            }\n            LOGGER.log(Level.INFO, \"--------------------------------------------------------------\");\n\n            tx.commit();\n        } finally {\n            if (tx.isActive()) {\n                tx.rollback();\n            }\n\n            pm.close();\n        }\n    }\n\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    public void QueryJPQL() {\n        PersistenceManagerFactory pmf = new JDOPersistenceManagerFactory(pumd, null);\n        PersistenceManager pm = pmf.getPersistenceManager();\n        Transaction tx = pm.currentTransaction();\n        try {\n            tx.begin();\n\n            // JPQL :\n            LOGGER.log(Level.INFO, \"JPQL --------------------------------------------------------------\");\n            Query q = pm.newQuery(\"JPQL\", \"SELECT p FROM \" + Product.class.getName() + \" p WHERE p.name = 'Laptop'\");\n            List results = (List) q.execute();\n\n            Iterator<Product> iter = results.iterator();\n            while (iter.hasNext()) {\n                Product p = iter.next();\n                LOGGER.log(Level.WARNING, \"Product name: {0} - Price: {1}\", new Object[] { p.name, p.price });\n            }\n            LOGGER.log(Level.INFO, \"--------------------------------------------------------------\");\n\n            tx.commit();\n        } finally {\n            if (tx.isActive()) {\n                tx.rollback();\n            }\n\n            pm.close();\n        }\n    }\n\n    public void persistXML() {\n        PersistenceManagerFactory pmf = new JDOPersistenceManagerFactory(pumdXML, null);\n        PersistenceManager pm = pmf.getPersistenceManager();\n        Transaction tx = pm.currentTransaction();\n        try {\n            tx.begin();\n            ProductXML productXML = new ProductXML(0, \"Tablet\", 80.0);\n            pm.makePersistent(productXML);\n            ProductXML productXML2 = new ProductXML(1, \"Phone\", 20.0);\n            pm.makePersistent(productXML2);\n            ProductXML productXML3 = new ProductXML(2, \"Laptop\", 200.0);\n            pm.makePersistent(productXML3);\n            tx.commit();\n        } finally {\n            if (tx.isActive()) {\n                tx.rollback();\n            }\n            pm.close();\n        }\n    }\n\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    public void listXMLProducts() {\n        PersistenceManagerFactory pmf = new JDOPersistenceManagerFactory(pumdXML, null);\n        PersistenceManager pm = pmf.getPersistenceManager();\n        Transaction tx = pm.currentTransaction();\n        try {\n            tx.begin();\n\n            Query q = pm.newQuery(\"SELECT FROM \" + ProductXML.class.getName());\n            List<ProductXML> products = (List<ProductXML>) q.execute();\n            Iterator<ProductXML> iter = products.iterator();\n            while (iter.hasNext()) {\n                ProductXML p = iter.next();\n                LOGGER.log(Level.WARNING, \"Product name: {0} - Price: {1}\", new Object[] { p.getName(), p.getPrice() });\n                pm.deletePersistent(p);\n            }\n            LOGGER.log(Level.INFO, \"--------------------------------------------------------------\");\n            tx.commit();\n        } finally {\n            if (tx.isActive()) {\n                tx.rollback();\n            }\n\n            pm.close();\n        }\n    }\n}", "test_case": "package com.baeldung.libraries.jdo;\n\nimport org.datanucleus.api.jdo.JDOPersistenceManagerFactory;\nimport org.datanucleus.metadata.PersistenceUnitMetaData;\nimport org.junit.Test;\n\nimport javax.jdo.PersistenceManager;\nimport javax.jdo.PersistenceManagerFactory;\nimport javax.jdo.Query;\nimport javax.jdo.Transaction;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\n\npublic class GuideToJDOIntegrationTest {\n    @Test\n    public void givenProduct_WhenNewThenPerformTransaction() {\n        PersistenceUnitMetaData pumd = new PersistenceUnitMetaData(\"dynamic-unit\", \"RESOURCE_LOCAL\", null);\n        pumd.addClassName(\"com.baeldung.libraries.jdo.Product\");\n        pumd.setExcludeUnlistedClasses();\n        pumd.addProperty(\"javax.jdo.option.ConnectionDriverName\", \"org.h2.Driver\");\n        pumd.addProperty(\"javax.jdo.option.ConnectionURL\", \"jdbc:h2:mem:mypersistence\");\n        pumd.addProperty(\"javax.jdo.option.ConnectionUserName\", \"sa\");\n        pumd.addProperty(\"javax.jdo.option.ConnectionPassword\", \"\");\n        pumd.addProperty(\"datanucleus.autoCreateSchema\", \"true\");\n        pumd.addProperty(\"datanucleus.schema.autoCreateTables\", \"true\");\n\n        PersistenceManagerFactory pmf = new JDOPersistenceManagerFactory(pumd, null);\n        PersistenceManager pm = pmf.getPersistenceManager();\n        Transaction tx = pm.currentTransaction();\n        try {\n            tx.begin();\n            for (int i = 0; i < 100; i++) {\n                String nam = \"Product-\" + i;\n                Product productx = new Product(nam, (double) i);\n                pm.makePersistent(productx);\n            }\n            tx.commit();\n        } catch (Throwable thr) {\n            fail(\"Failed test : \" + thr.getMessage());\n        } finally {\n            if (tx.isActive()) {\n                tx.rollback();\n            }\n            pm.close();\n        }\n\n        pmf.close();\n    }\n\n    @Test\n    public void givenProduct_WhenQueryThenExist() {\n        PersistenceUnitMetaData pumd = new PersistenceUnitMetaData(\"dynamic-unit\", \"RESOURCE_LOCAL\", null);\n        pumd.addClassName(\"com.baeldung.libraries.jdo.Product\");\n        pumd.setExcludeUnlistedClasses();\n        pumd.addProperty(\"javax.jdo.option.ConnectionDriverName\", \"org.h2.Driver\");\n        pumd.addProperty(\"javax.jdo.option.ConnectionURL\", \"jdbc:h2:mem:mypersistence\");\n        pumd.addProperty(\"javax.jdo.option.ConnectionUserName\", \"sa\");\n        pumd.addProperty(\"javax.jdo.option.ConnectionPassword\", \"\");\n        pumd.addProperty(\"datanucleus.autoCreateSchema\", \"true\");\n        pumd.addProperty(\"datanucleus.schema.autoCreateTables\", \"true\");\n\n        PersistenceManagerFactory pmf = new JDOPersistenceManagerFactory(pumd, null);\n        PersistenceManager pm = pmf.getPersistenceManager();\n        Transaction tx = pm.currentTransaction();\n        try {\n            tx.begin();\n            Product product = new Product(\"Tablet\", 80.0);\n            pm.makePersistent(product);\n            Product product2 = new Product(\"Phone\", 20.0);\n            pm.makePersistent(product2);\n            Product product3 = new Product(\"Laptop\", 200.0);\n            pm.makePersistent(product3);\n            tx.commit();\n        } catch (Throwable thr) {\n            fail(\"Failed test : \" + thr.getMessage());\n        } finally {\n            if (tx.isActive()) {\n                tx.rollback();\n            }\n            pm.close();\n        }\n\n        pmf.close();\n\n        PersistenceManagerFactory pmf2 = new JDOPersistenceManagerFactory(pumd, null);\n        PersistenceManager pm2 = pmf2.getPersistenceManager();\n        Transaction tx2 = pm2.currentTransaction();\n        try {\n            tx2.begin();\n\n            @SuppressWarnings(\"rawtypes\")\n            Query q = pm2.newQuery(\"SELECT FROM \" + Product.class.getName() + \" WHERE price == 200\");\n            @SuppressWarnings(\"unchecked\")\n            List<Product> products = (List<Product>) q.execute();\n            for (Product p : products) {\n                assertEquals(\"Laptop\", p.name);\n            }\n\n            tx2.commit();\n        } finally {\n            if (tx2.isActive()) {\n                tx2.rollback();\n            }\n\n            pm2.close();\n        }\n    }\n\n}"}
{"code_source": "package com.baeldung.ini;\n\nimport org.apache.commons.configuration2.INIConfiguration;\nimport org.apache.commons.configuration2.SubnodeConfiguration;\nimport org.apache.commons.configuration2.ex.ConfigurationException;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class CommonsParser {\n    public static Map<String, Map<String, String>> parseIniFile(File fileToParse) throws IOException, ConfigurationException {\n        Map<String, Map<String, String>> iniFileContents = new HashMap<>();\n\n        INIConfiguration iniConfiguration = new INIConfiguration();\n        try (FileReader fileReader = new FileReader(fileToParse)) {\n            iniConfiguration.read(fileReader);\n        }\n\n        for (String section : iniConfiguration.getSections()) {\n            Map<String, String> subSectionMap = new HashMap<>();\n            SubnodeConfiguration confSection = iniConfiguration.getSection(section);\n            Iterator<String> keyIterator = confSection.getKeys();\n            while (keyIterator.hasNext()) {\n                String key = keyIterator.next();\n                String value = confSection.getProperty(key)\n                        .toString();\n                subSectionMap.put(key, value);\n            }\n            iniFileContents.put(section, subSectionMap);\n        }\n        return iniFileContents;\n    }\n\n    public static String readIniFileValue(File fileToParse, String section, String value) throws IOException, ConfigurationException {\n        INIConfiguration iniConfiguration = new INIConfiguration();\n        try (FileReader fileReader = new FileReader(fileToParse)) {\n            iniConfiguration.read(fileReader);\n        }\n\n        return iniConfiguration.getSection(section).getProperty(value).toString();\n    }\n}\n", "test_case": "package com.baeldung.ini;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.io.File;\nimport java.nio.file.Paths;\nimport java.util.Map;\n\nimport static com.baeldung.ini.CommonsParser.parseIniFile;\nimport static com.baeldung.ini.CommonsParser.readIniFileValue;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass CommonsParserUnitTest {\n\n    private static final File TEST_FILE = Paths.get(\"src\", \"test\", \"resources\", \"sample.ini\").toFile();\n\n    @Test\n    void givenIniFileThenCanParseWithIni4j() throws Exception {\n        Map<String, Map<String, String>> result =\n                parseIniFile(TEST_FILE);\n\n        assertThat(result.get(\"fonts\"))\n                .containsEntry(\"letter\", \"bold\")\n                .containsEntry(\"text-size\", \"28\");\n    }\n\n    @Test\n    void givenIniFileThenCanReadKeyWithIni4j() throws Exception {\n        assertThat(readIniFileValue(TEST_FILE, \"fonts\", \"letter\"))\n                .isEqualTo(\"bold\");\n    }\n}"}
{"code_source": "package com.baeldung.ini;\n\nimport org.ini4j.Ini;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.*;\n\nimport static java.util.stream.Collectors.toMap;\n\npublic class Ini4JParser {\n\n    public static Map<String, Map<String, String>> parseIniFile(File fileToParse) throws IOException {\n        Ini ini = new Ini(fileToParse);\n        return ini.entrySet().stream()\n                .collect(toMap(Map.Entry::getKey, Map.Entry::getValue));\n    }\n\n    public static String readIniFileValue(File fileToParse, String section, String key) throws IOException {\n        Ini ini = new Ini(fileToParse);\n        return ini.get(section, key);\n    }\n}\n", "test_case": "package com.baeldung.ini;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.io.File;\nimport java.nio.file.Paths;\nimport java.util.Map;\n\nimport static com.baeldung.ini.Ini4JParser.readIniFileValue;\nimport static com.baeldung.ini.Ini4JParser.parseIniFile;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass Ini4JParserUnitTest {\n\n    private static final File TEST_FILE = Paths.get(\"src\", \"test\", \"resources\", \"sample.ini\").toFile();\n\n    @Test\n    void givenIniFileThenCanParseWithIni4j() throws Exception {\n        Map<String, Map<String, String>> result =\n          parseIniFile(TEST_FILE);\n\n        assertThat(result.get(\"fonts\"))\n          .containsEntry(\"letter\", \"bold\")\n          .containsEntry(\"text-size\", \"28\");\n    }\n\n    @Test\n    void givenIniFileThenCanReadKeyFromIt() throws Exception {\n        assertThat(readIniFileValue(TEST_FILE, \"fonts\", \"letter\"))\n                .isEqualTo(\"bold\");\n    }\n}"}
{"code_source": "package com.baeldung.archunit.smurfs.persistence.domain;\n\npublic class Smurf {\n    private String name;\n    private boolean comic;\n    private boolean cartoon;\n\n    public Smurf(String name, boolean comic, boolean cartoon) {\n        this.name = name;\n        this.comic = comic;\n        this.cartoon = cartoon;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public boolean isComic() {\n        return comic;\n    }\n\n    public void setCommic(boolean comic) {\n        this.comic = comic;\n    }\n\n    public boolean isCartoon() {\n        return cartoon;\n    }\n\n    public void setCartoon(boolean cartoon) {\n        this.cartoon = cartoon;\n    }\n}\n", "test_case": "package com.baeldung.archunit.smurfs;\n\n\nimport com.tngtech.archunit.core.domain.JavaClasses;\nimport com.tngtech.archunit.core.importer.ClassFileImporter;\nimport com.tngtech.archunit.lang.ArchRule;\nimport com.tngtech.archunit.library.Architectures.LayeredArchitecture;\n\nimport static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes;\nimport static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.noClasses;\nimport static com.tngtech.archunit.library.Architectures.layeredArchitecture;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport org.junit.jupiter.api.Test;\n\npublic class SmurfsArchUnitTest {\n    \n    @Test\n    public void givenPresentationLayerClasses_thenWrongCheckFails() {        \n        JavaClasses jc = new ClassFileImporter().importPackages(\"com.baeldung.archunit.smurfs\");\n        \n        ArchRule r1 = classes()\n          .that()\n          .resideInAPackage(\"..presentation..\")\n          .should().onlyDependOnClassesThat()\n          .resideInAPackage(\"..service..\");\n    \n        assertThrows(AssertionError.class, ()-> r1.check(jc)) ;\n    }\n    \n\n    @Test\n    public void givenPresentationLayerClasses_thenCheckWithFrameworkDependenciesSuccess() {        \n        JavaClasses jc = new ClassFileImporter().importPackages(\"com.baeldung.archunit.smurfs\");\n        \n        ArchRule r1 = classes()\n          .that()\n          .resideInAPackage(\"..presentation..\")\n          .should().onlyDependOnClassesThat()\n          .resideInAnyPackage(\"..service..\", \"java..\", \"javax..\", \"org.springframework..\");\n\n        r1.check(jc);\n    }\n\n    @Test\n    public void givenPresentationLayerClasses_thenNoPersistenceLayerAccess() {        \n        JavaClasses jc = new ClassFileImporter().importPackages(\"com.baeldung.archunit.smurfs\");\n        \n        ArchRule r1 = noClasses()\n          .that()\n          .resideInAPackage(\"..presentation..\")\n          .should().dependOnClassesThat()\n          .resideInAPackage(\"..persistence..\");\n        \n        r1.check(jc);\n    }\n    \n    @Test\n    public void givenApplicationClasses_thenNoLayerViolationsShouldExist() {\n        \n        JavaClasses jc = new ClassFileImporter().importPackages(\"com.baeldung.archunit.smurfs\");\n        \n        LayeredArchitecture arch = layeredArchitecture()\n           // Define layers\n          .layer(\"Presentation\").definedBy(\"..presentation..\")\n          .layer(\"Service\").definedBy(\"..service..\")\n          .layer(\"Persistence\").definedBy(\"..persistence..\")\n          // Add constraints\n          .whereLayer(\"Presentation\").mayNotBeAccessedByAnyLayer()\n          .whereLayer(\"Service\").mayOnlyBeAccessedByLayers(\"Presentation\")\n          .whereLayer(\"Persistence\").mayOnlyBeAccessedByLayers(\"Service\");\n        \n        arch.check(jc);\n    }\n}\n"}
{"code_source": "package com.baeldung.awaitility;\n\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class AsyncService {\n    private final int DELAY = 1000;\n    private final int INIT_DELAY = 2000;\n\n    private final AtomicLong value = new AtomicLong(0);\n    private final Executor executor = Executors.newFixedThreadPool(4);\n    private volatile boolean initialized = false;\n\n    void initialize() {\n        executor.execute(() -> {\n            sleep(INIT_DELAY);\n            initialized = true;\n        });\n    }\n\n    boolean isInitialized() {\n        return initialized;\n    }\n\n    void addValue(long val) {\n        throwIfNotInitialized();\n        executor.execute(() -> {\n            sleep(DELAY);\n            value.addAndGet(val);\n        });\n    }\n\n    public long getValue() {\n        throwIfNotInitialized();\n        return value.longValue();\n    }\n\n    private void sleep(int delay) {\n        try {\n            Thread.sleep(delay);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void throwIfNotInitialized() {\n        if (!initialized) {\n            throw new IllegalStateException(\"Service is not initialized\");\n        }\n    }\n}\n", "test_case": "package com.baeldung.awaitility;\n\nimport org.awaitility.Duration;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.TimeUnit;\n\nimport static org.awaitility.Awaitility.await;\nimport static org.awaitility.Awaitility.fieldIn;\nimport static org.awaitility.Awaitility.given;\nimport static org.awaitility.Awaitility.setDefaultPollDelay;\nimport static org.awaitility.Awaitility.setDefaultPollInterval;\nimport static org.awaitility.Awaitility.setDefaultTimeout;\nimport static org.awaitility.proxy.AwaitilityClassProxy.to;\nimport static org.hamcrest.Matchers.equalTo;\n\npublic class AsyncServiceLongRunningManualTest {\n    private AsyncService asyncService;\n\n    @Before\n    public void setUp() {\n        asyncService = new AsyncService();\n    }\n\n    @Test\n    public void givenAsyncService_whenInitialize_thenInitOccurs1() {\n        asyncService.initialize();\n        Callable<Boolean> isInitialized = asyncService::isInitialized;\n        await().until(isInitialized);\n    }\n\n    @Test\n    public void givenAsyncService_whenInitialize_thenInitOccurs2() {\n        asyncService.initialize();\n        Callable<Boolean> isInitialized = asyncService::isInitialized;\n        await().atLeast(Duration.ONE_HUNDRED_MILLISECONDS).atMost(Duration.FIVE_SECONDS).with().pollInterval(Duration.ONE_HUNDRED_MILLISECONDS).until(isInitialized);\n    }\n\n    @Test\n    public void givenAsyncService_whenInitialize_thenInitOccurs_withDefualts() {\n        setDefaultPollInterval(10, TimeUnit.MILLISECONDS);\n        setDefaultPollDelay(Duration.ZERO);\n        setDefaultTimeout(Duration.ONE_MINUTE);\n\n        asyncService.initialize();\n        await().until(asyncService::isInitialized);\n    }\n\n    @Test\n    public void givenAsyncService_whenInitialize_thenInitOccurs_withProxy() {\n        asyncService.initialize();\n        await().untilCall(to(asyncService).isInitialized(), equalTo(true));\n    }\n\n    @Test\n    public void givenAsyncService_whenInitialize_thenInitOccurs3() {\n        asyncService.initialize();\n        await().until(fieldIn(asyncService).ofType(boolean.class).andWithName(\"initialized\"), equalTo(true));\n    }\n\n    @Test\n    public void givenValue_whenAddValue_thenValueAdded() {\n        asyncService.initialize();\n        await().until(asyncService::isInitialized);\n        long value = 5;\n        asyncService.addValue(value);\n        await().until(asyncService::getValue, equalTo(value));\n    }\n\n    @Test\n    public void givenAsyncService_whenGetValue_thenExceptionIgnored() {\n        asyncService.initialize();\n        given().ignoreException(IllegalStateException.class).await().atMost(Duration.FIVE_SECONDS).atLeast(Duration.FIVE_HUNDRED_MILLISECONDS).until(asyncService::getValue, equalTo(0L));\n    }\n}\n"}
{"code_source": "package com.baeldung.serenity.membership;\n\nimport static com.baeldung.serenity.membership.MemberGrade.Bronze;\nimport static com.baeldung.serenity.membership.MemberGrade.Gold;\nimport static com.baeldung.serenity.membership.MemberGrade.Silver;\n\n/**\n * @author aiet\n */\npublic class Member {\n\n    private int points;\n\n    private Member(int points) {\n        if (points < 0)\n            throw new IllegalArgumentException(\"points must not be negative!\");\n        this.points = points;\n\n    }\n\n    public static Member withInitialPoints(int initialPoints) {\n        return new Member(initialPoints);\n    }\n\n    public MemberGrade getGrade() {\n        if (points < 1000)\n            return Bronze;\n        else if (points >= 1000 && points < 5000)\n            return Silver;\n        else\n            return Gold;\n    }\n\n    public void spend(int moneySpent) {\n        points += moneySpent / 10;\n    }\n\n}\n", "test_case": "package com.baeldung.serenity;\n\nimport com.baeldung.serenity.membership.MemberStatusSteps;\nimport net.serenitybdd.junit.runners.SerenityRunner;\nimport net.thucydides.core.annotations.Steps;\nimport net.thucydides.core.annotations.Title;\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport static com.baeldung.serenity.membership.Commodity.MacBookPro;\nimport static com.baeldung.serenity.membership.MemberGrade.Bronze;\nimport static com.baeldung.serenity.membership.MemberGrade.Gold;\nimport static com.baeldung.serenity.membership.MemberGrade.Silver;\n\n@RunWith(SerenityRunner.class)\npublic class MemberStatusIntegrationTest {\n\n    @Steps\n    private MemberStatusSteps memberSteps;\n\n    @Test\n    public void membersShouldStartWithBronzeStatus() {\n        memberSteps.aClientJoinsTheMemberProgram();\n        memberSteps.theMemberShouldHaveAStatusOf(Bronze);\n    }\n\n    @Test\n    @Title(\"Members earn Silver grade after 1000 points ($10,000)\")\n    public void earnsSilverAfterSpends$10000() {\n        memberSteps.aClientJoinsTheMemberProgram();\n        memberSteps.theMemberSpends(10_000);\n        memberSteps.theMemberShouldHaveAStatusOf(Silver);\n    }\n\n    @Test\n    @Title(\"Members with 2,000 points should earn Gold grade when added 3,000 points ($30,000)\")\n    public void memberWith2000PointsEarnsGoldAfterSpends$30000() {\n        memberSteps.aMemberHasPointsOf(2000);\n        memberSteps.theMemberSpends(30_000);\n        memberSteps.theMemberShouldHaveAStatusOf(Gold);\n    }\n\n    @Test\n    @Title(\"Members with 50,000 points can exchange a MacBook Pro\")\n    public void memberWith50000PointsCanExchangeAMacbookpro() {\n        memberSteps.aMemberHasPointsOf(50_000);\n        memberSteps.aMemberExchangeA(MacBookPro);\n        memberSteps.memberShouldHavePointsLeft();\n    }\n\n    /**\n     * This test should fail, comment out <code>@Ignore</code> to see how failed test can be reflected in Serenity report. <br/>\n     */\n    @Test\n    @Ignore\n    @Title(\"Members with 500 points should have a Gold status when added 4,000 points ($40,000)\")\n    public void memberWith500PointsEarnsGoldAfterSpends$40000() {\n        memberSteps.aMemberHasPointsOf(500);\n        memberSteps.theMemberSpends(40_000);\n        memberSteps.theMemberShouldHaveAStatusOf(Gold);\n    }\n\n    @Test\n    @Ignore\n    @Title(\"Members with 100 points would have a Gold status when added 10,000 points ($100,000)\")\n    public void memberWith100EarnsGoldAfterSpends$100000() {\n        memberSteps.aMemberHasPointsOf(100);\n        memberSteps.theMemberSpends(100_000);\n        memberSteps.theMemberShouldHaveAStatusOf(Gold);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.serenity.spring;\n\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Service;\n\n@Service\n@Scope(\"prototype\")\npublic class AdderService {\n\n    private int num;\n\n    public void baseNum(int base) {\n        this.num = base;\n    }\n\n    public int currentBase() {\n        return num;\n    }\n\n    public int add(int adder) {\n        return this.num + adder;\n    }\n\n    public int accumulate(int adder) {\n        return this.num += adder;\n    }\n}\n", "test_case": "package com.baeldung.serenity.spring;\n\nimport com.baeldung.serenity.spring.steps.AdderServiceSteps;\nimport net.serenitybdd.junit.runners.SerenityRunner;\nimport net.thucydides.core.annotations.Steps;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport static com.baeldung.serenity.spring.RandomNumberUtil.randomInt;\n\n/**\n * @author aiet\n */\n@RunWith(SerenityRunner.class)\npublic class AdderServiceIntegrationTest {\n\n    @Steps\n    private AdderServiceSteps adderServiceSteps;\n\n    @Test\n    public void givenNumber_whenAdd_thenSummedUp() {\n        adderServiceSteps.givenBaseAndAdder(randomInt(), randomInt());\n        adderServiceSteps.whenAdd();\n        adderServiceSteps.summedUp();\n    }\n\n}\n"}
{"code_source": "package com.baeldung.serenity.screenplay;\n\nimport net.serenitybdd.core.pages.PageObject;\nimport net.serenitybdd.screenplay.targets.Target;\nimport net.thucydides.core.annotations.DefaultUrl;\n\n/**\n * @author baoqiang\n */\n@DefaultUrl(\"https://www.google.com/ncr\")\nclass GoogleSearchPage extends PageObject {\n\n    static final Target SEARCH_RESULT_TITLES = Target.the(\"search results\").locatedBy(\"._ksh\");\n\n    static final Target SEARCH_INPUT_BOX = Target.the(\"search input box\").locatedBy(\"#lst-ib\");\n\n}\n", "test_case": "package com.baeldung.serenity;\n\nimport com.baeldung.serenity.pageobjects.GoogleSearchPageObject;\nimport net.serenitybdd.junit.runners.SerenityRunner;\nimport net.thucydides.core.annotations.Managed;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.openqa.selenium.WebDriver;\n\n@RunWith(SerenityRunner.class)\npublic class GoogleSearchPageObjectLiveTest {\n\n    @Managed(driver = \"chrome\")\n    private WebDriver browser;\n\n    private GoogleSearchPageObject googleSearch;\n\n    @Test\n    public void whenGoogleBaeldungThenShouldSeeEugen() {\n        googleSearch.open();\n\n        // If your browser displays cookie settings dialog, uncomment the line below\n        // googleSearch.validateCookies();\n\n        googleSearch.searchFor(\"baeldung\");\n\n        googleSearch.resultMatches(\"Eugen (Baeldung)\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.lombok.builder;\n\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NonNull;\n\n@Builder(builderMethodName = \"internalBuilder\")\n@Getter\npublic class RequiredFieldAnnotation {\n\n    @NonNull\n    String name;\n    String description;\n\n    public static RequiredFieldAnnotationBuilder builder(String name) {\n        return internalBuilder().name(name);\n    }\n}\n", "test_case": "package com.baeldung.lombok.builder;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class RequiredFieldAnnotationUnitTest {\n    RequiredFieldAnnotation requiredFieldTest;\n\n    @Before\n    public void setUp() {\n        requiredFieldTest = RequiredFieldAnnotation.builder(\"NameField\").description(\"Field Description\").build();\n    }\n\n    @Test\n    public void givenBuilderWithRequiredParameter_thenParameterIsPresent() {\n        assertEquals(\"NameField\", requiredFieldTest.getName());\n    }\n\n}"}
{"code_source": "package com.baeldung.lombok.getter;\n\n\nimport lombok.Getter;\n\n/**\n * Related Article Sections:\n * 4. Using @Getter on a Boolean Field\n *\n */\npublic class GetterBoolean {\n\n    @Getter\n    private Boolean running = true;\n}\n", "test_case": "package com.baeldung.lombok.getter;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class GetterBooleanUnitTest {\n\n    @Test\n    public void whenBasicBooleanField_thenMethodNamePrefixedWithIsFollowedByFieldName() {\n        GetterBooleanPrimitive lombokExamples = new GetterBooleanPrimitive();\n        assertFalse(lombokExamples.isRunning());\n    }\n\n    @Test\n    public void whenBooleanFieldPrefixedWithIs_thenMethodNameIsSameAsFieldName() {\n        GetterBooleanSameAccessor lombokExamples = new GetterBooleanSameAccessor();\n        assertTrue(lombokExamples.isRunning());\n    }\n\n    @Test\n    public void whenTwoBooleanFieldsCauseNamingConflict_thenLombokMapsToFirstDeclaredField() {\n        GetterBooleanPrimitiveSameAccessor  lombokExamples = new GetterBooleanPrimitiveSameAccessor();\n        assertTrue(lombokExamples.isRunning() == lombokExamples.running);\n        assertFalse(lombokExamples.isRunning() == lombokExamples.isRunning);\n    }\n\n    @Test\n    public void whenFieldOfBooleanType_thenLombokPrefixesMethodWithGetInsteadOfIs() {\n        GetterBooleanType lombokExamples = new GetterBooleanType();\n        assertTrue(lombokExamples.getRunning());\n    }\n}\n"}
{"code_source": "package com.baeldung.lombok.intro;\n\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.extern.slf4j.Slf4j;\n\n@Builder\n@Slf4j\n@Getter\npublic class ApiClientConfiguration {\n\n    private String host;\n    private int port;\n    private boolean useHttps;\n\n    private long connectTimeout;\n    private long readTimeout;\n\n    private String username;\n    private String password;\n\n}\n", "test_case": "package com.baeldung.lombok.intro;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\n\nimport com.baeldung.lombok.intro.ApiClientConfiguration.ApiClientConfigurationBuilder;\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class ApiClientConfigurationIntegrationTest {\n\n    @Test\n    public void givenAnnotatedConfiguration_thenCanBeBuiltViaBuilder() {\n        ApiClientConfiguration config =\n            new ApiClientConfigurationBuilder()\n                .host(\"api.server.com\")\n                .port(443)\n                .useHttps(true)\n                .connectTimeout(15_000L)\n                .readTimeout(5_000L)\n                .username(\"myusername\")\n                .password(\"secret\")\n            .build();\n\n        Assert.assertEquals(config.getHost(), \"api.server.com\");\n        Assert.assertEquals(config.getPort(), 443);\n        Assert.assertEquals(config.isUseHttps(), true);\n        Assert.assertEquals(config.getConnectTimeout(), 15_000L);\n        Assert.assertEquals(config.getReadTimeout(), 5_000L);\n        Assert.assertEquals(config.getUsername(), \"myusername\");\n        Assert.assertEquals(config.getPassword(), \"secret\");\n    }\n\n    @Test\n    public void givenAnnotatedConfiguration_thenHasLoggerInstance() throws NoSuchFieldException {\n        Field loggerInstance = ApiClientConfiguration.class.getDeclaredField(\"log\");\n        int modifiers = loggerInstance.getModifiers();\n        Assert.assertTrue(Modifier.isPrivate(modifiers));\n        Assert.assertTrue(Modifier.isStatic(modifiers));\n        Assert.assertTrue(Modifier.isFinal(modifiers));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.lombok.intro;\n\nimport java.net.URL;\nimport java.time.Duration;\nimport java.time.Instant;\n\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.NonNull;\nimport lombok.RequiredArgsConstructor;\nimport lombok.experimental.Accessors;\n\n@RequiredArgsConstructor\n@Accessors(fluent = true) @Getter\n@EqualsAndHashCode(of = {\"authToken\"})\npublic class LoginResult {\n\n    private final @NonNull Instant loginTs;\n\n    private final @NonNull String authToken;\n    private final @NonNull Duration tokenValidity;\n\n    private final @NonNull URL tokenRefreshUrl;\n\n}\n", "test_case": "package com.baeldung.lombok.intro;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.time.Duration;\nimport java.time.Instant;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class LoginResultLiveTest {\n\n    @Test\n    public void givenAnnotatedLoginResult_thenHasConstructorForAllFinalFields()\n    throws MalformedURLException {\n        /* LoginResult loginResult = */ new LoginResult(\n                Instant.now(),\n                \"apitoken\",\n                Duration.ofHours(1),\n                new URL(\"https://api.product.com/token-refresh\"));\n    }\n\n    @Test\n    public void givenAnnotatedLoginResult_thenHasFluentGetters()\n    throws MalformedURLException {\n        Instant loginTs = Instant.now();\n        LoginResult loginResult = new LoginResult(\n                loginTs,\n                \"apitoken\",\n                Duration.ofHours(1),\n                new URL(\"https://api.product.com/token-refresh\"));\n\n        Assert.assertEquals(loginResult.loginTs(), loginTs);\n        Assert.assertEquals(loginResult.authToken(), \"apitoken\");\n        Assert.assertEquals(loginResult.tokenValidity(), Duration.ofHours(1));\n        Assert.assertEquals(loginResult.tokenRefreshUrl(), new URL(\"https://api.product.com/token-refresh\"));\n    }\n\n    @Test\n    public void givenAnnotatedLoginResult_whenSameApiToken_thenEqualInstances()\n    throws MalformedURLException {\n        String theSameApiToken = \"testapitoken\";\n\n        LoginResult loginResult1 = new LoginResult(\n                Instant.now(),\n                theSameApiToken,\n                Duration.ofHours(1),\n                new URL(\"https://api.product.com/token-refresh\"));\n\n        LoginResult loginResult2 = new LoginResult(\n                Instant.now(),\n                theSameApiToken,\n                Duration.ofHours(2),\n                new URL(\"https://api.product.com/token-refresh-alt\"));\n\n        Assert.assertEquals(loginResult1, loginResult2);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.lombok.jackson;\n\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.extern.jackson.Jacksonized;\n\n@Data\n@Builder\n@Jacksonized\npublic class Fruit {\n\n    private String name;\n    private int id;\n\n}\n", "test_case": "package com.baeldung.lombok.jackson;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nclass LombokWithJacksonFruitUnitTest {\n\n    @Test\n    void withFruitObject_thenSerializeSucessfully() throws IOException {\n        Fruit fruit = Fruit.builder()\n            .id(101)\n            .name(\"Apple\")\n            .build();\n\n        String json = newObjectMapper().writeValueAsString(fruit);\n        assertEquals(\"{\\\"name\\\":\\\"Apple\\\",\\\"id\\\":101}\", json);\n    }\n\n    @Test\n    public void withFruitJSON_thenDeserializeSucessfully() throws IOException {\n        String json = \"{\\\"name\\\":\\\"Apple\\\",\\\"id\\\":101}\";\n        Fruit fruit = newObjectMapper().readValue(json, Fruit.class);\n        assertEquals(new Fruit(\"Apple\", 101), fruit);\n    }\n\n    private ObjectMapper newObjectMapper() {\n        return new ObjectMapper();\n    }\n\n}\n"}
{"code_source": "package com.baeldung.lombok.valvar;\n\nimport lombok.val;\nimport lombok.var;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\n\npublic class ValExample {\n    public Class name() {\n        val name = \"name\";\n        System.out.println(\"Name: \" + name);\n        return name.getClass();\n    }\n\n    public Class age() {\n        val age = Integer.valueOf(30);\n        System.out.println(\"Age: \" + age);\n        return age.getClass();\n    }\n\n    public Class listOf() {\n        val agenda = new ArrayList<String>();\n        agenda.add(\"Day 1\");\n        System.out.println(\"Agenda: \" + agenda);\n        return agenda.getClass();\n    }\n\n    public Class mapOf() {\n        val books = new HashMap<Integer, String>();\n        books.put(1, \"Book 1\");\n        books.put(2, \"Book 2\");\n        System.out.println(\"Books:\");\n        for (val entry : books.entrySet()) {\n            System.out.printf(\"- %d. %s\\n\", entry.getKey(), entry.getValue());\n        }\n        return books.getClass();\n    }\n\n    public Class compoundTypes(boolean isArray) {\n        val compound = isArray ? new ArrayList<String>() : new HashSet<String>();\n        return compound.getClass();\n    }\n}\n", "test_case": "package com.baeldung.lombok.valvar;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass ValExampleUnitTest {\n\n    @Test\n    void whenUsingValWithString_thenTheAssignedClassIsCorrect() {\n        ValExample val = new ValExample();\n        assertThat(val.name()).isEqualTo(String.class);\n        assertThat(val.age()).isEqualTo(Integer.class);\n        assertThat(val.listOf()).isEqualTo(ArrayList.class);\n        assertThat(val.mapOf()).isEqualTo(HashMap.class);\n        assertThat(val.compoundTypes(true)).isEqualTo(ArrayList.class);\n        assertThat(val.compoundTypes(false)).isEqualTo(HashSet.class);\n    }\n\n}"}
{"code_source": "package com.baeldung.lombok.valvar;\n\nimport lombok.var;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class VarExample {\n    public String name() {\n        var name = \"name\";\n        name = \"newName\";\n        System.out.println(\"Name: \" + name);\n        return name;\n    }\n\n    public Integer age() {\n        var age = Integer.valueOf(30);\n        age = 35;\n        System.out.println(\"Age: \" + age);\n        return age;\n    }\n\n    public ArrayList<String> listOf() {\n        var agenda = new ArrayList<String>();\n        agenda.add(\"Day 1\");\n        agenda = new ArrayList<String>(Arrays.asList(\"Day 2\"));\n        System.out.println(\"Agenda: \" + agenda);\n        return agenda;\n    }\n\n    public Map<Integer, String> mapOf() {\n        var books = new HashMap<Integer, String>();\n        books.put(1, \"Book 1\");\n        books.put(2, \"Book 2\");\n        books = new HashMap<Integer, String>();\n        books.put(3, \"Book 3\");\n        books.put(4, \"Book 4\");\n\n        System.out.println(\"Books:\");\n        for (var entry : books.entrySet()) {\n            System.out.printf(\"- %d. %s\\n\", entry.getKey(), entry.getValue());\n        }\n        return books;\n    }\n}\n", "test_case": "package com.baeldung.lombok.valvar;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass VarExampleUnitTest {\n\n    @Test\n    void whenUsingVarWithString_thenTheAssignedClassIsCorrect() {\n        VarExample varExample = new VarExample();\n        assertThat(varExample.name()).isEqualTo(\"newName\");\n        assertThat(varExample.age()).isEqualTo(35);\n        assertThat(\"Day 2\").isIn(varExample.listOf());\n        assertThat(varExample.mapOf()).containsValue(\"Book 3\");\n    }\n\n}"}
{"code_source": "package com.baeldung.lombok.with;\n\npublic class KioskDevice extends Device {\n\n    public KioskDevice(String serial, boolean isInspected) {\n        super(serial, isInspected);\n    }\n\n    @Override\n    public Device withInspected(boolean isInspected) {\n        return new KioskDevice(getSerial(), isInspected);\n    }\n}", "test_case": "package com.baeldung.lombok.with;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotSame;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class KioskDeviceWithUnitTest {\n\n    @Test\n    public void whenDeviceInspected_thenClonedAndUpdated() {\n        KioskDevice device = new KioskDevice(\"S-001\", false);\n\n        Device inspectedDevice = device.withInspected(true);\n\n        assertNotSame(inspectedDevice, device);\n        assertFalse(device.isInspected());\n        assertTrue(inspectedDevice.isInspected());\n    }\n}\n"}
{"code_source": "package com.baeldung.lombok.with;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.With;\n\n@Getter\n@AllArgsConstructor\npublic class Holder {\n    @With\n    private String variableA;\n    @With\n    private String _variableB;\n    @With\n    private String $variableC;\n}", "test_case": "package com.baeldung.lombok.with;\n\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotSame;\n\npublic class HolderUnitTest {\n\n    @Test\n    public void whenWithMethodsGenerated_thenUsable() {\n        Holder value = new Holder(\"a\", \"b\");\n\n        Holder valueModifiedA = value.withVariableA(\"mod-a\");\n        Holder valueModifiedB = value.with_variableB(\"mod-b\");\n        // Holder valueModifiedC = value.with$VariableC(\"mod-c\"); not possible\n\n        assertNotSame(valueModifiedA, value);\n        assertNotSame(valueModifiedB, value);\n        assertEquals(\"mod-a\", valueModifiedA.getVariableA());\n        assertEquals(\"mod-b\", valueModifiedB.get_variableB());\n    }\n}\n"}
{"code_source": "package com.baeldung.lombok.with;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.With;\n\n@Getter\n@AllArgsConstructor\npublic class Stock {\n    @With\n    private String sku;\n    private int stockCount;\n\n    public Stock withSku(String sku) {\n        return new Stock(\"mod-\" + sku, stockCount);\n    }\n\n    public Stock withSKU(String... sku) {\n        return sku == null || sku.length == 0 ?\n            new Stock(\"unknown\", stockCount) :\n            new Stock(\"mod-\" + sku[0], stockCount);\n    }\n}", "test_case": "package com.baeldung.lombok.with;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertNotSame;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class StockWithUnitTest {\n\n    @Test\n    public void givenWithManuallyProvided_whenSkuChanged_thenManualMethodUsed() {\n        Stock stock = new Stock(\"sku-001\", 5);\n\n        Stock modifiedStock = stock.withSku(\"sku-002\");\n        Stock anotherModifiedStock = stock.withSKU(\"sku-003\", \"sku-004\");\n\n        assertNotSame(modifiedStock, stock);\n        assertNotSame(anotherModifiedStock, stock);\n        assertTrue(modifiedStock.getSku().startsWith(\"mod\"));\n        assertTrue(anotherModifiedStock.getSku().startsWith(\"mod\"));\n    }\n}"}
{"code_source": "package com.baeldung.lucene;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.net.URISyntaxException;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.document.StringField;\nimport org.apache.lucene.document.TextField;\nimport org.apache.lucene.index.DirectoryReader;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.index.IndexWriterConfig;\nimport org.apache.lucene.queryparser.classic.ParseException;\nimport org.apache.lucene.queryparser.classic.QueryParser;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.search.ScoreDoc;\nimport org.apache.lucene.search.TopDocs;\nimport org.apache.lucene.store.Directory;\n\npublic class LuceneFileSearch {\n\n    private Directory indexDirectory;\n    private StandardAnalyzer analyzer;\n\n    public LuceneFileSearch(Directory fsDirectory, StandardAnalyzer analyzer) {\n        super();\n        this.indexDirectory = fsDirectory;\n        this.analyzer = analyzer;\n    }\n\n    public void addFileToIndex(String filepath) throws IOException, URISyntaxException {\n\n        Path path = Paths.get(getClass().getClassLoader().getResource(filepath).toURI());\n        File file = path.toFile();\n        IndexWriterConfig indexWriterConfig = new IndexWriterConfig(analyzer);\n        IndexWriter indexWriter = new IndexWriter(indexDirectory, indexWriterConfig);\n        Document document = new Document();\n\n        FileReader fileReader = new FileReader(file);\n        document.add(new TextField(\"contents\", fileReader));\n        document.add(new StringField(\"path\", file.getPath(), Field.Store.YES));\n        document.add(new StringField(\"filename\", file.getName(), Field.Store.YES));\n\n        indexWriter.addDocument(document);\n\n        indexWriter.close();\n    }\n\n    public List<Document> searchFiles(String inField, String queryString) {\n        try {\n            Query query = new QueryParser(inField, analyzer).parse(queryString);\n\n            IndexReader indexReader = DirectoryReader.open(indexDirectory);\n            IndexSearcher searcher = new IndexSearcher(indexReader);\n            TopDocs topDocs = searcher.search(query, 10);\n            List<Document> documents = new ArrayList<>();\n            for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\n                documents.add(searcher.doc(scoreDoc.doc));\n            }\n\n            return documents;\n        } catch (IOException | ParseException e) {\n            e.printStackTrace();\n        }\n        return null;\n\n    }\n\n}\n\n\n", "test_case": "package com.baeldung.lucene;\n\nimport java.io.IOException;\nimport java.net.URISyntaxException;\nimport java.nio.file.Paths;\nimport java.util.List;\n\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.FSDirectory;\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class LuceneFileSearchIntegrationTest {\n\n    @Test\n    public void givenSearchQueryWhenFetchedFileNamehenCorrect() throws IOException, URISyntaxException {\n        String indexPath = \"index\";\n        String dataPath = \"data/file1.txt\";\n\n        Directory directory = FSDirectory.open(Paths.get(indexPath));\n        LuceneFileSearch luceneFileSearch = new LuceneFileSearch(directory, new StandardAnalyzer());\n\n        luceneFileSearch.addFileToIndex(dataPath);\n\n        List<Document> docs = luceneFileSearch.searchFiles(\"contents\", \"consectetur\");\n\n        Assert.assertEquals(\"file1.txt\", docs.get(0).get(\"filename\"));\n    }\n\n}"}
{"code_source": "package com.baeldung.mapper;\n\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\n\nimport com.baeldung.dto.CustomerDto;\nimport com.baeldung.entity.Customer;\n\n@Mapper\npublic interface CustomerDtoMapper {\n\n    @Mapping(source = \"firstName\", target = \"forename\")\n    @Mapping(source = \"lastName\", target = \"surname\")\n    CustomerDto from(Customer customer);\n}\n", "test_case": "package com.baeldung.mapper;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.jupiter.api.Test;\nimport org.mapstruct.factory.Mappers;\n\nimport com.baeldung.dto.CustomerDto;\nimport com.baeldung.entity.Customer;\n\npublic class CustomerDtoMapperUnitTest {\n\n    private CustomerDtoMapper customerDtoMapper = Mappers.getMapper(CustomerDtoMapper.class);\n\n    @Test\n    void testGivenCustomer_mapsToCustomerDto() {\n\n        // given\n        Customer customer = new Customer().setFirstName(\"Max\")\n            .setLastName(\"Powers\");\n\n        // when\n        CustomerDto customerDto = customerDtoMapper.from(customer);\n\n        // then\n        assertEquals(customerDto.getForename(), customer.getFirstName());\n        assertEquals(customerDto.getSurname(), customer.getLastName());\n    }\n}\n"}
{"code_source": "package com.baeldung.mapper;\n\nimport com.baeldung.dto.SimpleSource;\nimport com.baeldung.entity.SimpleDestination;\nimport org.mapstruct.Mapper;\n\n@Mapper(componentModel = \"spring\")\npublic interface SimpleSourceDestinationMapper {\n\n    SimpleDestination sourceToDestination(SimpleSource source);\n\n    SimpleSource destinationToSource(SimpleDestination destination);\n\n}\n", "test_case": "package com.baeldung.mapper;\n\nimport static org.junit.Assert.assertEquals;\n\nimport com.baeldung.dto.SimpleSource;\nimport com.baeldung.entity.SimpleDestination;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"classpath:applicationContext.xml\")\npublic class SimpleSourceDestinationMapperIntegrationTest {\n\n    @Autowired\n    SimpleSourceDestinationMapper simpleSourceDestinationMapper;\n\n    @Test\n    public void givenSourceToDestination_whenMaps_thenCorrect() {\n        SimpleSource simpleSource = new SimpleSource();\n        simpleSource.setName(\"SourceName\");\n        simpleSource.setDescription(\"SourceDescription\");\n\n        SimpleDestination destination = simpleSourceDestinationMapper.sourceToDestination(simpleSource);\n\n        assertEquals(simpleSource.getName(), destination.getName());\n        assertEquals(simpleSource.getDescription(), destination.getDescription());\n    }\n\n    @Test\n    public void givenDestinationToSource_whenMaps_thenCorrect() {\n        SimpleDestination destination = new SimpleDestination();\n        destination.setName(\"DestinationName\");\n        destination.setDescription(\"DestinationDescription\");\n\n        SimpleSource source = simpleSourceDestinationMapper.destinationToSource(destination);\n\n        assertEquals(destination.getName(), source.getName());\n        assertEquals(destination.getDescription(), source.getDescription());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.mapper;\n\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.MappingTarget;\n\nimport com.baeldung.entity.Address;\nimport com.baeldung.entity.Customer;\nimport com.baeldung.entity.DeliveryAddress;\n\n@Mapper\npublic interface DeliveryAddressMapper {\n\n    @Mapping(source = \"customer.firstName\", target = \"forename\")\n    @Mapping(source = \"customer.lastName\", target = \"surname\")\n    @Mapping(source = \"address.street\", target = \"street\")\n    @Mapping(source = \"address.postalcode\", target = \"postalcode\")\n    @Mapping(source = \"address.county\", target = \"county\")\n    DeliveryAddress from(Customer customer, Address address);\n\n    @Mapping(source = \"address.postalcode\", target = \"postalcode\")\n    @Mapping(source = \"address.county\", target = \"county\")\n    DeliveryAddress updateAddress(@MappingTarget DeliveryAddress deliveryAddress, Address address);\n}\n", "test_case": "package com.baeldung.mapper;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertSame;\n\nimport org.junit.Test;\nimport org.mapstruct.factory.Mappers;\n\nimport com.baeldung.entity.Address;\nimport com.baeldung.entity.Customer;\nimport com.baeldung.entity.DeliveryAddress;\n\npublic class DeliveryAddressMapperUnitTest {\n\n    private DeliveryAddressMapper deliveryAddressMapper = Mappers.getMapper(DeliveryAddressMapper.class);\n\n    @Test\n    public void testGivenCustomerAndAddress_mapsToDeliveryAddress() {\n\n        // given a customer\n        Customer customer = new Customer().setFirstName(\"Max\")\n            .setLastName(\"Powers\");\n\n        // and some address\n        Address homeAddress = new Address().setStreet(\"123 Some Street\")\n            .setCounty(\"Nevada\")\n            .setPostalcode(\"89123\");\n\n        // when calling DeliveryAddressMapper::from\n        DeliveryAddress deliveryAddress = deliveryAddressMapper.from(customer, homeAddress);\n\n        // then a new DeliveryAddress is created, based on the given customer and his home address\n        assertEquals(deliveryAddress.getForename(), customer.getFirstName());\n        assertEquals(deliveryAddress.getSurname(), customer.getLastName());\n        assertEquals(deliveryAddress.getStreet(), homeAddress.getStreet());\n        assertEquals(deliveryAddress.getCounty(), homeAddress.getCounty());\n        assertEquals(deliveryAddress.getPostalcode(), homeAddress.getPostalcode());\n\n    }\n\n    @Test\n    public void testGivenDeliveryAddressAndSomeOtherAddress_updatesDeliveryAddress() {\n\n        // given a delivery address\n        DeliveryAddress deliveryAddress = new DeliveryAddress().setForename(\"Max\")\n            .setSurname(\"Powers\")\n            .setStreet(\"123 Some Street\")\n            .setCounty(\"Nevada\")\n            .setPostalcode(\"89123\");\n\n        // and some new address\n        Address newAddress = new Address().setStreet(\"456 Some other street\")\n            .setCounty(\"Arizona\")\n            .setPostalcode(\"12345\");\n\n        // when calling DeliveryAddressMapper::updateAddress\n        DeliveryAddress updatedDeliveryAddress = deliveryAddressMapper.updateAddress(deliveryAddress, newAddress);\n\n        // then the *existing* delivery address is updated\n        assertSame(deliveryAddress, updatedDeliveryAddress);\n\n        assertEquals(deliveryAddress.getStreet(), newAddress.getStreet());\n        assertEquals(deliveryAddress.getCounty(), newAddress.getCounty());\n        assertEquals(deliveryAddress.getPostalcode(), newAddress.getPostalcode());\n\n    }\n}\n"}
{"code_source": "package com.baeldung.mapper;\n\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.factory.Mappers;\n\nimport com.baeldung.dto.PersonDTO;\nimport com.baeldung.entity.Person;\n\n@Mapper\npublic interface PersonMapper {\n    \n    PersonMapper INSTANCE = Mappers.getMapper(PersonMapper.class);\n    \n    @Mapping(target = \"id\", source = \"person.id\", defaultExpression = \"java(java.util.UUID.randomUUID().toString())\")\n    PersonDTO personToPersonDTO(Person person);\n}\n", "test_case": "package com.baeldung.mapper;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\n\nimport org.junit.Test;\n\nimport com.baeldung.dto.PersonDTO;\nimport com.baeldung.entity.Person;\n\npublic class PersonMapperUnitTest {\n\n    @Test\n    public void givenPersonEntitytoPersonWithExpression_whenMaps_thenCorrect() {\n        \n        Person entity  = new Person();\n        entity.setName(\"Micheal\");\n        \n        PersonDTO personDto = PersonMapper.INSTANCE.personToPersonDTO(entity);\n\n        assertNull(entity.getId());\n        assertNotNull(personDto.getId());\n        assertEquals(personDto.getName(), entity.getName());\n    }\n}"}
{"code_source": "package com.baeldung.entity;\n\npublic class SimpleDestination {\n\n    private String name;\n    private String description;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n}\n", "test_case": "package com.baeldung.mapper;\n\nimport com.baeldung.dto.SimpleSource;\nimport com.baeldung.entity.SimpleDestination;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(\"classpath:applicationContext.xml\")\npublic class SimpleDestinationMapperUsingInjectedIntegrationTest {\n\n    @Autowired\n    private SimpleDestinationMapperUsingInjectedService mapper;\n\n    @Test\n    public void givenSourceToDestination_whenMaps_thenNameEnriched() {\n        // Given\n        SimpleSource source = new SimpleSource();\n        source.setName(\"Bob\");\n        source.setDescription(\"The Builder\");\n\n        // When\n        SimpleDestination destination = mapper.sourceToDestination(source);\n\n        // Then\n        assertThat(destination).isNotNull();\n        assertThat(destination.getName()).isEqualTo(\"-:: Bob ::-\");\n        assertThat(destination.getDescription()).isEqualTo(\"The Builder\");\n    }\n}"}
{"code_source": "package com.baeldung.mapper;\n\nimport com.baeldung.dto.UserBodyImperialValuesDTO;\nimport com.baeldung.entity.UserBodyValues;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.Named;\nimport org.mapstruct.factory.Mappers;\n\n@Mapper\npublic interface UserBodyValuesMapper {\n\n    UserBodyValuesMapper INSTANCE = Mappers.getMapper(UserBodyValuesMapper.class);\n\n    @Mapping(source = \"pound\", target = \"kilogram\", qualifiedBy = PoundToKilogramMapper.class)\n    @Mapping(source = \"inch\", target = \"centimeter\", qualifiedByName = \"inchToCentimeter\")\n    public UserBodyValues userBodyValuesMapper(UserBodyImperialValuesDTO dto);\n\n    @Named(\"inchToCentimeter\")\n    public static double inchToCentimeter(int inch) {\n        return inch * 2.54;\n    }\n\n    @PoundToKilogramMapper\n    public static double poundToKilogram(int pound) {\n        return pound * 0.4535;\n    }\n}", "test_case": "package com.baeldung.mapper;\n\nimport com.baeldung.dto.UserBodyImperialValuesDTO;\nimport com.baeldung.entity.UserBodyValues;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\n\npublic class UserBodyValuesMapperUnitTest {\n\n    @Test\n    public void givenUserBodyImperialValuesDTOToUserBodyValuesObject_whenMaps_thenCorrect() {\n        UserBodyImperialValuesDTO dto  = new UserBodyImperialValuesDTO();\n        dto.setInch(10);\n        dto.setPound(100);\n\n        UserBodyValues obj = UserBodyValuesMapper.INSTANCE.userBodyValuesMapper(dto);\n\n        assertNotNull(obj);\n        assertEquals(25.4, obj.getCentimeter(), 0);\n        assertEquals(45.35, obj.getKilogram(), 0);\n    }\n\n    @Test\n    public void givenUserBodyImperialValuesDTOWithInchToUserBodyValuesObject_whenMaps_thenCorrect() {\n        UserBodyImperialValuesDTO dto = new UserBodyImperialValuesDTO();\n        dto.setInch(10);\n\n        UserBodyValues obj = UserBodyValuesMapper.INSTANCE.userBodyValuesMapper(dto);\n\n        assertNotNull(obj);\n        assertEquals(25.4, obj.getCentimeter(), 0);\n    }\n\n    @Test\n    public void givenUserBodyImperialValuesDTOWithPoundToUserBodyValuesObject_whenMaps_thenCorrect() {\n        UserBodyImperialValuesDTO dto = new UserBodyImperialValuesDTO();\n        dto.setPound(100);\n\n        UserBodyValues obj = UserBodyValuesMapper.INSTANCE.userBodyValuesMapper(dto);\n\n        assertNotNull(obj);\n        assertEquals(45.35, obj.getKilogram(), 0);\n    }\n}"}
{"code_source": "package com.baeldung.unmappedproperties.mapper;\n\nimport com.baeldung.unmappedproperties.dto.DocumentDTO;\nimport com.baeldung.unmappedproperties.entity.Document;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mapping;\nimport org.mapstruct.factory.Mappers;\n\n@Mapper\npublic interface DocumentMapperMappingIgnore {\n\n    DocumentMapperMappingIgnore INSTANCE = Mappers.getMapper(DocumentMapperMappingIgnore.class);\n\n    @Mapping(target = \"comments\", ignore = true)\n    DocumentDTO documentToDocumentDTO(Document entity);\n\n    @Mapping(target = \"modificationTime\", ignore = true)\n    Document documentDTOToDocument(DocumentDTO dto);\n\n}", "test_case": "package com.baeldung.mapper.unmappedproperties;\n\nimport com.baeldung.unmappedproperties.dto.DocumentDTO;\nimport com.baeldung.unmappedproperties.entity.Document;\nimport com.baeldung.unmappedproperties.mapper.DocumentMapperMappingIgnore;\nimport org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.Date;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class DocumentMapperMappingIgnoreUnitTest {\n\n    @Test\n    public void givenDocumentEntityToDocumentDto_whenMaps_thenCorrect() {\n        Document entity = new Document();\n        entity.setId(1);\n        entity.setTitle(\"Price 13-42\");\n        entity.setText(\"List of positions.......\");\n        entity.setModificationTime(new Date());\n\n        DocumentDTO dto = DocumentMapperMappingIgnore.INSTANCE.documentToDocumentDTO(entity);\n\n        assertThat(dto.getId()).isEqualTo(entity.getId());\n        assertThat(dto.getTitle()).isEqualTo(entity.getTitle());\n        assertThat(dto.getText()).isEqualTo(entity.getText());\n    }\n\n    @Test\n    public void givenDocumentDtoToDocumentEntity_whenMaps_thenCorrect() {\n        DocumentDTO dto = new DocumentDTO();\n        dto.setId(1);\n        dto.setTitle(\"Price 13-42\");\n        dto.setText(\"List of positions.......\");\n        dto.setComments(Arrays.asList(\"Not all positions\", \"Wrong price values\"));\n        dto.setAuthor(\"Author1\");\n\n        Document entity = DocumentMapperMappingIgnore.INSTANCE.documentDTOToDocument(dto);\n\n        assertThat(entity.getId()).isEqualTo(dto.getId());\n        assertThat(entity.getTitle()).isEqualTo(dto.getTitle());\n        assertThat(entity.getText()).isEqualTo(dto.getText());\n    }\n}"}
{"code_source": "package com.baeldung.unmappedproperties.mapper;\n\nimport com.baeldung.unmappedproperties.dto.DocumentDTO;\nimport com.baeldung.unmappedproperties.entity.Document;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.factory.Mappers;\n\n@Mapper\npublic interface DocumentMapper {\n\n    DocumentMapper INSTANCE = Mappers.getMapper(DocumentMapper.class);\n\n    DocumentDTO documentToDocumentDTO(Document entity);\n\n    Document documentDTOToDocument(DocumentDTO dto);\n}", "test_case": "package com.baeldung.mapper.unmappedproperties;\n\nimport com.baeldung.unmappedproperties.dto.DocumentDTO;\nimport com.baeldung.unmappedproperties.entity.Document;\nimport com.baeldung.unmappedproperties.mapper.DocumentMapper;\nimport org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.Date;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class DocumentMapperUnitTest {\n\n    @Test\n    public void givenDocumentEntityToDocumentDto_whenMaps_thenCorrect() {\n        Document entity = new Document();\n        entity.setId(1);\n        entity.setTitle(\"Price 13-42\");\n        entity.setText(\"List of positions.......\");\n        entity.setModificationTime(new Date());\n\n        DocumentDTO dto = DocumentMapper.INSTANCE.documentToDocumentDTO(entity);\n\n        assertThat(dto.getId()).isEqualTo(entity.getId());\n        assertThat(dto.getTitle()).isEqualTo(entity.getTitle());\n        assertThat(dto.getText()).isEqualTo(entity.getText());\n    }\n\n    @Test\n    public void givenDocumentDtoToDocumentEntity_whenMaps_thenCorrect() {\n        DocumentDTO dto = new DocumentDTO();\n        dto.setId(1);\n        dto.setTitle(\"Price 13-42\");\n        dto.setText(\"List of positions.......\");\n        dto.setComments(Arrays.asList(\"Not all positions\", \"Wrong price values\"));\n        dto.setAuthor(\"Author1\");\n\n        Document entity = DocumentMapper.INSTANCE.documentDTOToDocument(dto);\n\n        assertThat(entity.getId()).isEqualTo(dto.getId());\n        assertThat(entity.getTitle()).isEqualTo(dto.getTitle());\n        assertThat(entity.getText()).isEqualTo(dto.getText());\n    }\n}"}
{"code_source": "package com.baeldung.unmappedproperties.mapper;\n\nimport com.baeldung.unmappedproperties.dto.DocumentDTO;\nimport com.baeldung.unmappedproperties.entity.Document;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.ReportingPolicy;\nimport org.mapstruct.factory.Mappers;\n\n@Mapper(unmappedTargetPolicy = ReportingPolicy.IGNORE)\npublic interface DocumentMapperUnmappedPolicy {\n\n    DocumentMapperUnmappedPolicy INSTANCE = Mappers.getMapper(DocumentMapperUnmappedPolicy.class);\n\n    DocumentDTO documentToDocumentDTO(Document entity);\n\n    Document documentDTOToDocument(DocumentDTO dto);\n}", "test_case": "package com.baeldung.mapper.unmappedproperties;\n\nimport com.baeldung.unmappedproperties.dto.DocumentDTO;\nimport com.baeldung.unmappedproperties.entity.Document;\nimport com.baeldung.unmappedproperties.mapper.DocumentMapperUnmappedPolicy;\nimport org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.Date;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class DocumentMapperUnmappedPolicyUnitTest {\n\n    @Test\n    public void givenDocumentEntityToDocumentDto_whenMaps_thenCorrect() {\n        Document entity = new Document();\n        entity.setId(1);\n        entity.setTitle(\"Price 13-42\");\n        entity.setText(\"List of positions.......\");\n        entity.setModificationTime(new Date());\n\n        DocumentDTO dto = DocumentMapperUnmappedPolicy.INSTANCE.documentToDocumentDTO(entity);\n\n        assertThat(dto.getId()).isEqualTo(entity.getId());\n        assertThat(dto.getTitle()).isEqualTo(entity.getTitle());\n        assertThat(dto.getText()).isEqualTo(entity.getText());\n    }\n\n    @Test\n    public void givenDocumentDtoToDocumentEntity_whenMaps_thenCorrect() {\n        DocumentDTO dto = new DocumentDTO();\n        dto.setId(1);\n        dto.setTitle(\"Price 13-42\");\n        dto.setText(\"List of positions.......\");\n        dto.setComments(Arrays.asList(\"Not all positions\", \"Wrong price values\"));\n        dto.setAuthor(\"Author1\");\n\n        Document entity = DocumentMapperUnmappedPolicy.INSTANCE.documentDTOToDocument(dto);\n\n        assertThat(entity.getId()).isEqualTo(dto.getId());\n        assertThat(entity.getTitle()).isEqualTo(dto.getTitle());\n        assertThat(entity.getText()).isEqualTo(dto.getText());\n    }\n}"}
{"code_source": "package com.baeldung.unmappedproperties.mapper;\n\nimport com.baeldung.unmappedproperties.dto.DocumentDTO;\nimport com.baeldung.unmappedproperties.entity.Document;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.factory.Mappers;\n\n@Mapper(config = IgnoreUnmappedMapperConfig.class)\npublic interface DocumentMapperWithConfig {\n\n    DocumentMapperWithConfig INSTANCE = Mappers.getMapper(DocumentMapperWithConfig.class);\n\n    DocumentDTO documentToDocumentDTO(Document entity);\n\n    Document documentDTOToDocument(DocumentDTO dto);\n}", "test_case": "package com.baeldung.mapper.unmappedproperties;\n\nimport com.baeldung.unmappedproperties.dto.DocumentDTO;\nimport com.baeldung.unmappedproperties.entity.Document;\nimport com.baeldung.unmappedproperties.mapper.DocumentMapperWithConfig;\nimport org.junit.Test;\n\nimport java.util.Arrays;\nimport java.util.Date;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class DocumentMapperWithConfigUnitTest {\n\n    @Test\n    public void givenDocumentEntityToDocumentDto_whenMaps_thenCorrect() {\n        Document entity = new Document();\n        entity.setId(1);\n        entity.setTitle(\"Price 13-42\");\n        entity.setText(\"List of positions.......\");\n        entity.setModificationTime(new Date());\n\n        DocumentDTO dto = DocumentMapperWithConfig.INSTANCE.documentToDocumentDTO(entity);\n\n        assertThat(dto.getId()).isEqualTo(entity.getId());\n        assertThat(dto.getTitle()).isEqualTo(entity.getTitle());\n        assertThat(dto.getText()).isEqualTo(entity.getText());\n    }\n\n    @Test\n    public void givenDocumentDtoToDocumentEntity_whenMaps_thenCorrect() {\n        DocumentDTO dto = new DocumentDTO();\n        dto.setId(1);\n        dto.setTitle(\"Price 13-42\");\n        dto.setText(\"List of positions.......\");\n        dto.setComments(Arrays.asList(\"Not all positions\", \"Wrong price values\"));\n        dto.setAuthor(\"Author1\");\n\n        Document entity = DocumentMapperWithConfig.INSTANCE.documentDTOToDocument(dto);\n\n        assertThat(entity.getId()).isEqualTo(dto.getId());\n        assertThat(entity.getTitle()).isEqualTo(dto.getTitle());\n        assertThat(entity.getText()).isEqualTo(dto.getText());\n    }\n}"}
{"code_source": "package com.baeldung.mockito.callbacks;\n\npublic interface Service {\n\n    void doAction(String request, Callback<Response> callback);\n\n}\n", "test_case": "package com.baeldung.mockito.additionalanswers;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.ArgumentMatchers.anyLong;\nimport static org.mockito.AdditionalAnswers.answer;\nimport static org.mockito.AdditionalAnswers.answerVoid;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.AdditionalAnswers;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.MockitoJUnitRunner;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class BookServiceUnitTest {\n    @InjectMocks\n    private BookService bookService;\n\n    @Mock\n    private BookRepository bookRepository;\n\n    @Test\n    public void givenSaveMethodMocked_whenSaveInvoked_ThenReturnFirstArgument_UnitTest() {\n        Book book = new Book(\"To Kill a Mocking Bird\", \"Harper Lee\", 256);\n        Mockito.when(bookRepository.save(any(Book.class))).then(AdditionalAnswers.returnsFirstArg());\n\n        Book savedBook = bookService.save(book);\n\n        assertEquals(savedBook, book);\n    }\n\n    @Test\n    public void givenCheckifEqualsMethodMocked_whenCheckifEqualsInvoked_ThenReturnSecondArgument_UnitTest() {\n        Book book1 = new Book(1L, \"The Stranger\", \"Albert Camus\", 456);\n        Book book2 = new Book(2L, \"Animal Farm\", \"George Orwell\", 300);\n        Book book3 = new Book(3L, \"Romeo and Juliet\", \"William Shakespeare\", 200);\n\n        Mockito.when(bookRepository.selectRandomBook(any(Book.class), any(Book.class), any(Book.class))).then(AdditionalAnswers.returnsSecondArg());\n\n        Book secondBook = bookService.selectRandomBook(book1, book2, book3);\n\n        assertEquals(secondBook, book2);\n    }\n\n    @Test\n    public void givenCheckifEqualsMethodMocked_whenCheckifEqualsInvoked_ThenReturnLastArgument_UnitTest() {\n        Book book1 = new Book(1L, \"The Stranger\", \"Albert Camus\", 456);\n        Book book2 = new Book(2L, \"Animal Farm\", \"George Orwell\", 300);\n        Book book3 = new Book(3L, \"Romeo and Juliet\", \"William Shakespeare\", 200);\n\n        Mockito.when(bookRepository.selectRandomBook(any(Book.class), any(Book.class), any(Book.class))).then(AdditionalAnswers.returnsLastArg());\n\n        Book lastBook = bookService.selectRandomBook(book1, book2, book3);\n        assertEquals(lastBook, book3);\n    }\n\n    @Test\n    public void givenCheckifEqualsMethodMocked_whenCheckifEqualsInvoked_ThenReturnArgumentAtIndex_UnitTest() {\n        Book book1 = new Book(1L, \"The Stranger\", \"Albert Camus\", 456);\n        Book book2 = new Book(2L, \"Animal Farm\", \"George Orwell\", 300);\n        Book book3 = new Book(3L, \"Romeo and Juliet\", \"William Shakespeare\", 200);\n\n        Mockito.when(bookRepository.selectRandomBook(any(Book.class), any(Book.class), any(Book.class))).then(AdditionalAnswers.returnsArgAt(1));\n\n        Book bookOnIndex = bookService.selectRandomBook(book1, book2, book3);\n\n        assertEquals(bookOnIndex, book2);\n    }\n\n    @Test\n    public void givenMockedMethod_whenMethodInvoked_thenReturnBook() {\n        Long id = 1L;\n        when(bookRepository.getByBookId(anyLong())).thenAnswer(answer(BookServiceUnitTest::buildBook));\n\n        assertNotNull(bookService.getByBookId(id));\n        assertEquals(\"The Stranger\", bookService.getByBookId(id).getTitle());\n    }\n\n    @Test\n    public void givenMockedMethod_whenMethodInvoked_thenReturnVoid() {\n        Long id = 2L;\n        when(bookRepository.getByBookId(anyLong())).thenAnswer(answerVoid(BookServiceUnitTest::printBookId));\n\n        bookService.getByBookId(id);\n\n        verify(bookRepository, times(1)).getByBookId(id);\n    }\n\n    private static Book buildBook(Long bookId) {\n        return new Book(bookId, \"The Stranger\", \"Albert Camus\", 456);\n    }\n\n    private static void printBookId(Long bookId) {\n        System.out.println(bookId);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.mockito.callbacks;\n\npublic class ActionHandler {\n\n    private Service service;\n\n    public ActionHandler(Service service) {\n        this.service = service;\n    }\n\n    public void doAction() {\n        service.doAction(\"our-request\", new Callback<Response>() {\n            @Override\n            public void reply(Response response) {\n                handleResponse(response);\n            }\n        });\n    }\n\n    private void handleResponse(Response response) {\n        if (response.isValid()) {\n            response.setData(new Data(\"Successful data response\"));\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.mockito.callbacks;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.Captor;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.stubbing.Answer;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNull;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.verify;\n\npublic class ActionHandlerUnitTest {\n\n    @Mock\n    private Service service;\n\n    @Captor\n    private ArgumentCaptor<Callback<Response>> callbackCaptor;\n\n    @Before\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void givenServiceWithValidResponse_whenCallbackReceived_thenProcessed() {\n        ActionHandler handler = new ActionHandler(service);\n        handler.doAction();\n\n        verify(service).doAction(anyString(), callbackCaptor.capture());\n\n        Callback<Response> callback = callbackCaptor.getValue();\n        Response response = new Response();\n        callback.reply(response);\n\n        String expectedMessage = \"Successful data response\";\n        Data data = response.getData();\n        assertEquals(\"Should receive a successful message: \", expectedMessage, data.getMessage());\n    }\n\n    @Test\n    public void givenServiceWithInvalidResponse_whenCallbackReceived_thenNotProcessed() {\n        Response response = new Response();\n        response.setIsValid(false);\n\n        doAnswer((Answer<Void>) invocation -> {\n            Callback<Response> callback = invocation.getArgument(1);\n            callback.reply(response);\n\n            Data data = response.getData();\n            assertNull(\"No data in invalid response: \", data);\n            return null;\n        }).when(service)\n            .doAction(anyString(), any(Callback.class));\n\n        ActionHandler handler = new ActionHandler(service);\n        handler.doAction();\n    }\n}\n"}
{"code_source": "package com.baeldung.mockito.fluentapi;\n\nimport com.baeldung.mockito.fluentapi.Pizza.PizzaSize;\n\npublic class PizzaService {\n\n    private Pizza.PizzaBuilder builder;\n\n    public PizzaService(Pizza.PizzaBuilder builder) {\n        this.builder = builder;\n    }\n\n    public Pizza orderHouseSpecial() {\n        return builder.name(\"Special\")\n            .size(PizzaSize.LARGE)\n            .withExtraTopping(\"Mushrooms\")\n            .withStuffedCrust(true)\n            .withExtraTopping(\"Chilli\")\n            .willCollect(true)\n            .applyDiscount(20)\n            .build();\n    }\n}\n", "test_case": "package com.baeldung.mockito.fluentapi;\n\nimport com.baeldung.mockito.fluentapi.Pizza.PizzaBuilder;\nimport com.baeldung.mockito.fluentapi.Pizza.PizzaSize;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Answers;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.Captor;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.anyBoolean;\nimport static org.mockito.ArgumentMatchers.anyInt;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class PizzaServiceUnitTest {\n\n    @Mock\n    private Pizza expectedPizza;\n\n    @Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private PizzaBuilder anotherbuilder;\n\n    @Captor\n    private ArgumentCaptor<String> stringCaptor;\n    @Captor\n    private ArgumentCaptor<Pizza.PizzaSize> sizeCaptor;\n\n    @Test\n    public void givenTraditonalMocking_whenServiceInvoked_thenPizzaIsBuilt() {\n        PizzaBuilder nameBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\n        PizzaBuilder sizeBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\n        PizzaBuilder firstToppingBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\n        PizzaBuilder secondToppingBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\n        PizzaBuilder stuffedBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\n        PizzaBuilder willCollectBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\n        PizzaBuilder discountBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\n\n        PizzaBuilder builder = Mockito.mock(Pizza.PizzaBuilder.class);\n        when(builder.name(anyString())).thenReturn(nameBuilder);\n        when(nameBuilder.size(any(Pizza.PizzaSize.class))).thenReturn(sizeBuilder);\n        when(sizeBuilder.withExtraTopping(anyString())).thenReturn(firstToppingBuilder);\n        when(firstToppingBuilder.withStuffedCrust(anyBoolean())).thenReturn(stuffedBuilder);\n        when(stuffedBuilder.withExtraTopping(anyString())).thenReturn(secondToppingBuilder);\n        when(secondToppingBuilder.willCollect(anyBoolean())).thenReturn(willCollectBuilder);\n        when(willCollectBuilder.applyDiscount(anyInt())).thenReturn(discountBuilder);\n        when(discountBuilder.build()).thenReturn(expectedPizza);\n\n        PizzaService service = new PizzaService(builder);\n        assertEquals(\"Expected Pizza\", expectedPizza, service.orderHouseSpecial());\n\n        verify(builder).name(stringCaptor.capture());\n        assertEquals(\"Pizza name: \", \"Special\", stringCaptor.getValue());\n\n        verify(nameBuilder).size(sizeCaptor.capture());\n        assertEquals(\"Pizza size: \", PizzaSize.LARGE, sizeCaptor.getValue());\n\n    }\n\n    @Test\n    public void givenDeepStubs_whenServiceInvoked_thenPizzaIsBuilt() {\n        Mockito.when(anotherbuilder.name(anyString())\n            .size(any(Pizza.PizzaSize.class))\n            .withExtraTopping(anyString())\n            .withStuffedCrust(anyBoolean())\n            .withExtraTopping(anyString())\n            .willCollect(anyBoolean())\n            .applyDiscount(anyInt())\n            .build())\n            .thenReturn(expectedPizza);\n\n        PizzaService service = new PizzaService(anotherbuilder);\n        assertEquals(\"Expected Pizza\", expectedPizza, service.orderHouseSpecial());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.mockito.java8;\n\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\npublic interface JobService {\n    Optional<JobPosition> findCurrentJobPosition(Person person);\n\n    default boolean assignJobPosition(Person person, JobPosition jobPosition) {\n        if (!findCurrentJobPosition(person).isPresent()) {\n            person.setCurrentJobPosition(jobPosition);\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    Stream<JobPosition> listJobs(Person person);\n}\n", "test_case": "package com.baeldung.mockito.java8;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport java.util.Optional;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Mockito.doCallRealMethod;\nimport static org.mockito.Mockito.when;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class JobServiceUnitTest {\n    @Mock\n    private JobService jobService;\n\n    @Test\n    public void givenDefaultMethod_whenCallRealMethod_thenNoExceptionIsRaised() {\n        Person person = new Person();\n\n        when(jobService.findCurrentJobPosition(person)).thenReturn(Optional.of(new JobPosition()));\n        doCallRealMethod().when(jobService).assignJobPosition(Mockito.any(Person.class), Mockito.any(JobPosition.class));\n\n        assertFalse(jobService.assignJobPosition(person, new JobPosition()));\n    }\n\n    @Test\n    public void givenReturnIsOfTypeOptional_whenDefaultValueIsReturned_thenValueIsEmpty() {\n        Person person = new Person();\n\n        when(jobService.findCurrentJobPosition(person)).thenReturn(Optional.empty());\n        doCallRealMethod().when(jobService).assignJobPosition(Mockito.any(Person.class), Mockito.any(JobPosition.class));\n\n        assertTrue(jobService.assignJobPosition(person, new JobPosition()));\n    }\n}\n"}
{"code_source": "package com.baeldung.mockito.java8;\n\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\npublic class UnemploymentServiceImpl implements UnemploymentService {\n    private final JobService jobService;\n    \n    public UnemploymentServiceImpl(JobService jobService) {\n        this.jobService = jobService;\n    }\n\n    @Override\n    public boolean personIsEntitledToUnemploymentSupport(Person person) {\n        Optional<JobPosition> optional = jobService.findCurrentJobPosition(person);\n        \n        return !optional.isPresent();\n    }\n\n    @Override\n    public Optional<JobPosition> searchJob(Person person, String searchString) {\n        Stream<JobPosition> stream = jobService.listJobs(person);\n        \n        return stream.filter((j) -> j.getTitle().contains(searchString)).findFirst();\n    }\n}\n", "test_case": "package com.baeldung.mockito.java8;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class UnemploymentServiceImplUnitTest {\n    @Mock\n    private JobService jobService;\n\n    @InjectMocks\n    private UnemploymentServiceImpl unemploymentService;\n\n    @Test\n    public void givenReturnIsOfTypeOptional_whenMocked_thenValueIsEmpty() {\n        Person person = new Person();\n\n        when(jobService.findCurrentJobPosition(any(Person.class))).thenReturn(Optional.empty());\n\n        assertTrue(unemploymentService.personIsEntitledToUnemploymentSupport(person));\n    }\n\n    @Test\n    public void givenReturnIsOfTypeOptional_whenDefaultValueIsReturned_thenValueIsEmpty() {\n        Person person = new Person();\n\n        // This will fail when Mockito 1 is used\n        assertTrue(unemploymentService.personIsEntitledToUnemploymentSupport(person));\n    }\n\n    @Test\n    public void givenReturnIsOfTypeStream_whenMocked_thenValueIsEmpty() {\n        Person person = new Person();\n\n        when(jobService.listJobs(any(Person.class))).thenReturn(Stream.empty());\n\n        assertFalse(unemploymentService.searchJob(person, \"\").isPresent());\n    }\n\n    @Test\n    public void givenReturnIsOfTypeStream_whenDefaultValueIsReturned_thenValueIsEmpty() {\n        Person person = new Person();\n\n        // This will fail when Mockito 1 is used\n        assertFalse(unemploymentService.searchJob(person, \"\").isPresent());\n    }\n}\n"}
{"code_source": "package com.baeldung.mockito.objectmapper;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class FlowerJsonStringValidator {\n    private ObjectMapper objectMapper;\n\n    public FlowerJsonStringValidator(ObjectMapper objectMapper) {\n        this.objectMapper = objectMapper;\n    }\n\n    public boolean flowerHasPetals(String jsonFlowerAsString) throws JsonProcessingException {\n        Flower flower = objectMapper.readValue(jsonFlowerAsString, Flower.class);\n        return flower.getPetals() > 0;\n    }\n}\n", "test_case": "package com.baeldung.mockito.objectmapper;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.anyString;\nimport static org.mockito.Mockito.eq;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n@ExtendWith(MockitoExtension.class)\npublic class FlowerJsonStringValidatorUnitTest {\n\n    @Mock\n    private ObjectMapper objectMapper;\n\n    private FlowerJsonStringValidator flowerJsonStringValidator;\n\n    @BeforeEach\n    public void setUp() {\n        flowerJsonStringValidator = new FlowerJsonStringValidator(objectMapper);\n    }\n\n    @Test\n    public void whenCallingHasPetalsWithPetals_thenReturnsTrue() throws JsonProcessingException {\n        Flower rose = new Flower(\"testFlower\", 100);\n\n        when(objectMapper.readValue(anyString(), eq(Flower.class))).thenReturn(rose);\n\n        assertTrue(flowerJsonStringValidator.flowerHasPetals(\"this can be a very long json flower\"));\n\n        verify(objectMapper, times(1)).readValue(anyString(), eq(Flower.class));\n    }\n\n    @Test\n    public void whenCallingHasPetalsWithZeroPetal_thenReturnsFalse() throws JsonProcessingException {\n        Flower rose = new Flower(\"testFlowerWithoutPetal\", 0);\n\n        when(objectMapper.readValue(anyString(), eq(Flower.class))).thenReturn(rose);\n\n        assertFalse(flowerJsonStringValidator.flowerHasPetals(\"this can be a very long json flower\"));\n\n        verify(objectMapper, times(1)).readValue(anyString(), eq(Flower.class));\n    }\n}\n"}
{"code_source": "package com.baeldung.singleton;\n\npublic class ProductService {\n\n    private final ProductDAO productDAO;\n    private final CacheManager cacheManager;\n\n    public ProductService(ProductDAO productDAO) {\n        this.productDAO = productDAO;\n        this.cacheManager = CacheManager.getInstance();\n    }\n\n    public ProductService(ProductDAO productDAO, CacheManager cacheManager) {\n        this.productDAO = productDAO;\n        this.cacheManager = cacheManager;\n    }\n\n    public Product getProduct(String productName) {\n        Product product = cacheManager.getValue(productName, Product.class);\n        if (product == null) {\n            product = productDAO.getProduct(productName);\n        }\n\n        return product;\n    }\n}\n", "test_case": "package com.baeldung.singleton;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.MockedStatic;\nimport org.mockito.Mockito;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\nclass ProductServiceUnitTest {\n\n    @Test\n    void givenValueExistsInCache_whenGetProduct_thenDAOIsNotCalled() {\n        ProductDAO productDAO = mock(ProductDAO.class);\n        CacheManager cacheManager = mock(CacheManager.class);\n        Product product = new Product(\"product1\", \"description\");\n        ProductService productService = new ProductService(productDAO, cacheManager);\n\n        when(cacheManager.getValue(any(), any())).thenReturn(product);\n\n        productService.getProduct(\"product1\");\n\n        Mockito.verify(productDAO, times(0)).getProduct(any());\n    }\n\n    @Test\n    void givenValueExistsInCache_whenGetProduct_thenDAOIsNotCalled_mockingStatic() {\n        ProductDAO productDAO = mock(ProductDAO.class);\n        CacheManager cacheManager = mock(CacheManager.class);\n        Product product = new Product(\"product1\", \"description\");\n\n        try (MockedStatic<CacheManager> cacheManagerMock = mockStatic(CacheManager.class)) {\n            cacheManagerMock.when(CacheManager::getInstance).thenReturn(cacheManager);\n            when(cacheManager.getValue(any(), any())).thenReturn(product);\n            ProductService productService = new ProductService(productDAO);\n            productService.getProduct(\"product1\");\n            Mockito.verify(productDAO, times(0)).getProduct(any());\n        }\n    }\n}"}
{"code_source": "package com.baeldung.app.rest;\n\nimport com.baeldung.app.api.Flower;\nimport com.baeldung.domain.service.FlowerService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\n@RequestMapping(\"/flowers\")\npublic class FlowerController {\n\n    @Autowired\n    private FlowerService flowerService;\n\n    @PostMapping(\"/isAFlower\")\n    public String isAFlower (@RequestBody String flower) {\n        return flowerService.analyze(flower);\n    }\n\n    @PostMapping(\"/isABigFlower\")\n    public Boolean isABigFlower (@RequestBody Flower flower) {\n        return flowerService.isABigFlower(flower.getName(), flower.getPetals());\n    }\n}\n", "test_case": "package com.baeldung.app.rest;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.AdditionalMatchers.or;\nimport static org.mockito.ArgumentMatchers.anyInt;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.ArgumentMatchers.endsWith;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.exceptions.misusing.InvalidUseOfMatchersException;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport com.baeldung.app.api.Flower;\nimport com.baeldung.domain.service.FlowerService;\n\n@ExtendWith(MockitoExtension.class)\nclass FlowerControllerUnitTest {\n\n\t@InjectMocks\n\tprivate FlowerController flowerController;\n\n\t@Mock\n\tprivate FlowerService flowerService;\n\n\t@Test\n\tvoid givenPoppyFlower_whenUsingDoReturn_thenCorrect() {\n\t\tdoReturn(\"Flower\").when(flowerService).analyze(\"poppy\");\n\n\t\tString response = flowerController.isAFlower(\"poppy\");\n\t\tassertThat(response).isEqualTo(\"Flower\");\n\t}\n\n\t@Test\n\tvoid givenAnyString_whenUsingArgumentMatcher_thenCorrect() {\n\t\twhen(flowerService.analyze(anyString())).thenReturn(\"Flower\");\n\n\t\tString response = flowerController.isAFlower(\"violetta\");\n\t\tassertThat(response).isEqualTo(\"Flower\");\n\t}\n\n\t@Test\n\tvoid whenIncorrectMatchers_thenThrowsError() {\n\t\tassertThrows(InvalidUseOfMatchersException.class, () -> {\n\t\t\twhen(flowerService.isABigFlower(\"poppy\", anyInt())).thenReturn(true);\n\t\t});\n\n\t\tFlower flower = new Flower(\"poppy\", 15);\n\n\t\tBoolean response = flowerController.isABigFlower(flower);\n\t\tassertThat(response).isFalse();\n\t}\n\n\t@Test\n\tvoid whenCorrectMatchers_thenCorrect() {\n\t\twhen(flowerService.isABigFlower(eq(\"poppy\"), anyInt())).thenReturn(true);\n\n\t\tFlower flower = new Flower(\"poppy\", 15);\n\n\t\tBoolean response = flowerController.isABigFlower(flower);\n\t\tassertThat(response).isTrue();\n\t}\n\n\t@Test\n\tvoid whenUsingMatchersAsReturnValue_thenThrowsError() {\n\t\tflowerController.isAFlower(\"poppy\");\n\n\t\tString orMatcher = or(eq(\"poppy\"), endsWith(\"y\"));\n\t\tassertThrows(InvalidUseOfMatchersException.class, () -> {\n\t\t\tverify(flowerService).analyze(orMatcher);\n\t\t});\n\t}\n\n\t@Test\n\tvoid whenUsingMatchersAsOngoingStubbing_thenCorrect1() {\n\t\tflowerController.isAFlower(\"poppy\");\n\n\t\tverify(flowerService).analyze(or(eq(\"poppy\"), endsWith(\"y\")));\n\t}\n\n\t@Test\n\tvoid whenUsingMatchersAsOngoingStubbing_thenCorrect2() {\n\t\tflowerController.isAFlower(\"lily\");\n\n\t\tverify(flowerService).analyze(or(eq(\"poppy\"), endsWith(\"y\")));\n\t}\n}\n"}
{"code_source": "package com.baeldung.junit5.mockito.service;\n\nimport com.baeldung.junit5.mockito.User;\n\npublic interface UserService {\n    \n    User register(User user);\n\n}\n", "test_case": "package com.baeldung.junit5.mockito;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.fail;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.lenient;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.reset;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.mockito.stubbing.Answer;\n\nimport com.baeldung.junit5.mockito.repository.MailClient;\nimport com.baeldung.junit5.mockito.repository.SettingRepository;\nimport com.baeldung.junit5.mockito.repository.UserRepository;\nimport com.baeldung.junit5.mockito.service.DefaultUserService;\nimport com.baeldung.junit5.mockito.service.Errors;\nimport com.baeldung.junit5.mockito.service.UserService;\n\n@ExtendWith(MockitoExtension.class)\nclass UserServiceUnitTest {\n\n    private UserService userService;\n\n    private SettingRepository settingRepository;\n\n    @Mock\n    private UserRepository userRepository;\n\n    @Mock\n    private MailClient mailClient;\n\n    private User user;\n\n    @BeforeEach\n    void init(@Mock SettingRepository settingRepository) {\n        userService = new DefaultUserService(userRepository, settingRepository, mailClient);\n        lenient().when(settingRepository.getUserMinAge())\n            .thenReturn(10);\n        when(settingRepository.getUserNameMinLength()).thenReturn(4);\n        lenient().when(userRepository.isUsernameAlreadyExists(any(String.class)))\n            .thenReturn(false);\n        this.settingRepository = settingRepository;\n    }\n\n    @Test\n    void givenValidUser_whenSaveUser_thenSucceed(@Mock MailClient mailClient) {\n        // Given\n        user = new User(\"Jerry\", 12);\n        when(userRepository.insert(any(User.class))).then(new Answer<User>() {\n            int sequence = 1;\n\n            @Override\n            public User answer(InvocationOnMock invocation) throws Throwable {\n                User user = (User) invocation.getArgument(0);\n                user.setId(sequence++);\n                return user;\n            }\n        });\n\n        userService = new DefaultUserService(userRepository, settingRepository, mailClient);\n\n        // When\n        User insertedUser = userService.register(user);\n\n        // Then\n        verify(userRepository).insert(user);\n        assertNotNull(user.getId());\n        verify(mailClient).sendUserRegistrationMail(insertedUser);\n    }\n\n    @Test\n    void givenShortName_whenSaveUser_thenGiveShortUsernameError() {\n        // Given\n        user = new User(\"tom\", 12);\n\n        // When\n        try {\n            userService.register(user);\n            fail(\"Should give an error\");\n        } catch (Exception ex) {\n            assertThat(ex.getMessage()).isEqualTo(Errors.USER_NAME_SHORT);\n        }\n\n        // Then\n        verify(userRepository, never()).insert(user);\n    }\n\n    @Test\n    void givenSmallAge_whenSaveUser_thenGiveYoungUserError() {\n        // Given\n        user = new User(\"jerry\", 3);\n\n        // When\n        try {\n            userService.register(user);\n            fail(\"Should give an error\");\n        } catch (Exception ex) {\n            assertThat(ex.getMessage()).isEqualTo(Errors.USER_AGE_YOUNG);\n        }\n\n        // Then\n        verify(userRepository, never()).insert(user);\n    }\n\n    @Test\n    void givenUserWithExistingName_whenSaveUser_thenGiveUsernameAlreadyExistsError() {\n        // Given\n        user = new User(\"jerry\", 12);\n        reset(userRepository);\n        when(userRepository.isUsernameAlreadyExists(any(String.class))).thenReturn(true);\n\n        // When\n        try {\n            userService.register(user);\n            fail(\"Should give an error\");\n        } catch (Exception ex) {\n            assertThat(ex.getMessage()).isEqualTo(Errors.USER_NAME_DUPLICATE);\n        }\n\n        // Then\n        verify(userRepository, never()).insert(user);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.jimfs;\n\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\n\npublic class FileManipulation {\n\n    void move(final Path origin, final Path destination) {\n        try {\n            Files.createDirectories(destination);\n            Files.move(origin, destination, StandardCopyOption.REPLACE_EXISTING);\n        } catch (final IOException ex) {\n            throw new UncheckedIOException(ex);\n        }\n    }\n}\n", "test_case": "package com.baeldung.jimfs;\n\nimport com.google.common.jimfs.Configuration;\nimport com.google.common.jimfs.Jimfs;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport java.nio.file.FileSystem;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.stream.Stream;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nclass FileManipulationUnitTest implements FileTestProvider {\n\n    private final FileManipulation fileManipulation = new FileManipulation();\n\n    private static Stream<Arguments> provideFileSystem() {\n        return Stream.of(Arguments.of(Jimfs.newFileSystem(Configuration.unix())), Arguments.of(Jimfs.newFileSystem(Configuration.windows())), Arguments.of(Jimfs.newFileSystem(Configuration.osX())));\n    }\n\n    @ParameterizedTest\n    @DisplayName(\"Should move file to new destination\")\n    @MethodSource(\"provideFileSystem\")\n    void givenEachSystem_whenMovingFile_thenMovedToNewPath(final FileSystem fileSystem) throws Exception {\n        final Path origin = fileSystem.getPath(RESOURCE_FILE_NAME);\n        Files.copy(getResourceFilePath(), origin);\n        final Path destination = fileSystem.getPath(\"newDirectory\", RESOURCE_FILE_NAME);\n\n        fileManipulation.move(origin, destination);\n\n        assertFalse(Files.exists(origin));\n        assertTrue(Files.exists(destination));\n    }\n}"}
{"code_source": "package com.baeldung.jimfs;\n\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.nio.file.Path;\n\nclass FilePathReader {\n\n    String getSystemPath(final Path path) {\n        try {\n            return path\n              .toRealPath()\n              .toString();\n        } catch (final IOException ex) {\n            throw new UncheckedIOException(ex);\n        }\n    }\n}\n", "test_case": "package com.baeldung.jimfs;\n\nimport com.google.common.jimfs.Configuration;\nimport com.google.common.jimfs.Jimfs;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.nio.file.FileSystem;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass FilePathReaderUnitTest {\n\n    private static final String DIRECTORY_NAME = \"baeldung\";\n\n    private final FilePathReader filePathReader = new FilePathReader();\n\n    @Test\n    @DisplayName(\"Should get path on windows\")\n    void givenWindowsSystem_shouldGetPath_thenReturnWindowsPath() throws Exception {\n        final FileSystem fileSystem = Jimfs.newFileSystem(Configuration.windows());\n        final Path path = getPathToFile(fileSystem);\n\n        final String stringPath = filePathReader.getSystemPath(path);\n\n        assertEquals(\"C:\\\\work\\\\\" + DIRECTORY_NAME, stringPath);\n    }\n\n    @Test\n    @DisplayName(\"Should get path on unix\")\n    void givenUnixSystem_shouldGetPath_thenReturnUnixPath() throws Exception {\n        final FileSystem fileSystem = Jimfs.newFileSystem(Configuration.unix());\n        final Path path = getPathToFile(fileSystem);\n\n        final String stringPath = filePathReader.getSystemPath(path);\n\n        assertEquals(\"/work/\" + DIRECTORY_NAME, stringPath);\n    }\n\n    private Path getPathToFile(final FileSystem fileSystem) throws Exception {\n        final Path path = fileSystem.getPath(DIRECTORY_NAME);\n        Files.createDirectory(path);\n\n        return path;\n    }\n}"}
{"code_source": "package com.baeldung.jimfs;\n\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\n\npublic class FileRepository {\n\n    void create(final Path path, final String fileName) {\n        final Path filePath = path.resolve(fileName);\n        try {\n            Files.createFile(filePath);\n        } catch (final IOException ex) {\n            throw new UncheckedIOException(ex);\n        }\n    }\n\n    String read(final Path path) {\n        try {\n            return new String(Files.readAllBytes(path));\n        } catch (final IOException ex) {\n            throw new UncheckedIOException(ex);\n        }\n    }\n\n    String update(final Path path, final String newContent) {\n        try {\n            Files.write(path, newContent.getBytes());\n            return newContent;\n        } catch (final IOException ex) {\n            throw new UncheckedIOException(ex);\n        }\n    }\n\n    void delete(final Path path) {\n        try {\n            Files.deleteIfExists(path);\n        } catch (final IOException ex) {\n            throw new UncheckedIOException(ex);\n        }\n    }\n}\n", "test_case": "package com.baeldung.jimfs;\n\nimport com.google.common.jimfs.Configuration;\nimport com.google.common.jimfs.Jimfs;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\n\nimport java.nio.file.FileSystem;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass FileRepositoryUnitTest implements FileTestProvider {\n\n    private final FileRepository fileRepository = new FileRepository();\n\n    @Test\n    @DisplayName(\"Should create a file on a file system\")\n    void givenUnixSystem_whenCreatingFile_thenCreatedInPath() {\n        final FileSystem fileSystem = Jimfs.newFileSystem(Configuration.unix());\n        final String fileName = \"newFile.txt\";\n        final Path pathToStore = fileSystem.getPath(\"\");\n\n        fileRepository.create(pathToStore, fileName);\n\n        assertTrue(Files.exists(pathToStore.resolve(fileName)));\n    }\n\n    @Test\n    @DisplayName(\"Should read the content of the file\")\n    void givenOSXSystem_whenReadingFile_thenContentIsReturned() throws Exception {\n        final FileSystem fileSystem = Jimfs.newFileSystem(Configuration.osX());\n        final Path resourceFilePath = fileSystem.getPath(RESOURCE_FILE_NAME);\n        Files.copy(getResourceFilePath(), resourceFilePath);\n\n        final String content = fileRepository.read(resourceFilePath);\n\n        assertEquals(FILE_CONTENT, content);\n    }\n\n    @Test\n    @DisplayName(\"Should update the content of the file\")\n    void givenWindowsSystem_whenUpdatingFile_thenContentHasChanged() throws Exception {\n        final FileSystem fileSystem = Jimfs.newFileSystem(Configuration.windows());\n        final Path resourceFilePath = fileSystem.getPath(RESOURCE_FILE_NAME);\n        Files.copy(getResourceFilePath(), resourceFilePath);\n        final String newContent = \"I'm updating you.\";\n\n        final String content = fileRepository.update(resourceFilePath, newContent);\n\n        assertEquals(newContent, content);\n        assertEquals(newContent, fileRepository.read(resourceFilePath));\n    }\n\n    @Test\n    @DisplayName(\"Should delete file\")\n    void givenCurrentSystem_whenDeletingFile_thenFileHasBeenDeleted() throws Exception {\n        final FileSystem fileSystem = Jimfs.newFileSystem();\n        final Path resourceFilePath = fileSystem.getPath(RESOURCE_FILE_NAME);\n        Files.copy(getResourceFilePath(), resourceFilePath);\n\n        fileRepository.delete(resourceFilePath);\n\n        assertFalse(Files.exists(resourceFilePath));\n    }\n}"}
{"code_source": "package com.baeldung.jmockit;\n\npublic class Collaborator {\n\n\tpublic boolean collaborate(String string){\n\t\treturn false;\n\t}\n\n\tpublic void receive(boolean bool){\n\t\t//NOOP\n\t}\n}\n", "test_case": "package com.baeldung.jmockit;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.baeldung.jmockit.AdvancedCollaborator;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport mockit.Deencapsulation;\nimport mockit.Expectations;\nimport mockit.Invocation;\nimport mockit.Mock;\nimport mockit.MockUp;\nimport mockit.Mocked;\nimport mockit.Tested;\nimport mockit.integration.junit4.JMockit;\n\n@RunWith(JMockit.class)\npublic class AdvancedCollaboratorIntegrationTest<MultiMock extends List<String> & Comparable<List<String>>> {\n\n    @Tested\n    private AdvancedCollaborator mock;\n    \n    @Mocked\n    private MultiMock multiMock;\n\n    @Test\n    public void testToMockUpPrivateMethod() {\n        new MockUp<AdvancedCollaborator>() {\n            @Mock\n            private String privateMethod() {\n                return \"mocked: \";\n            }\n        };\n        String res = mock.methodThatCallsPrivateMethod(1);\n        assertEquals(\"mocked: 1\", res);\n    }\n\n    @Test\n    public void testToMockUpDifficultConstructor() throws Exception {\n        new MockUp<AdvancedCollaborator>() {\n            @Mock\n            public void $init(Invocation invocation, String string) {\n                ((AdvancedCollaborator) invocation.getInvokedInstance()).i = 1;\n            }\n        };\n        AdvancedCollaborator coll = new AdvancedCollaborator(null);\n        assertEquals(1, coll.i);\n    }\n\n    @Test\n    public void testToSetPrivateFieldDirectly() {\n        Deencapsulation.setField(mock, \"privateField\", 10);\n        assertEquals(10, mock.methodThatReturnsThePrivateField());\n    }\n\n    @Test\n    public void testToGetPrivateFieldDirectly() {\n        int value = Deencapsulation.getField(mock, \"privateField\");\n        assertEquals(5, value);\n    }\n\n    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultipleInterfacesWholeTest() {\n        new Expectations() {\n            {\n                multiMock.get(5); result = \"foo\";\n                multiMock.compareTo((List<String>) any); result = 0;\n            }\n        };\n        assertEquals(\"foo\", multiMock.get(5));\n        assertEquals(0, multiMock.compareTo(new ArrayList<>()));\n    }\n\n    @Test\n    @SuppressWarnings(\"unchecked\")\n    public <M extends List<String> & Comparable<List<String>>> void testMultipleInterfacesOneMethod(@Mocked M mock) {\n        new Expectations() {\n            {\n                mock.get(5); result = \"foo\";\n                mock.compareTo((List<String>) any);\n                result = 0; }\n        };\n        assertEquals(\"foo\", mock.get(5));\n        assertEquals(0, mock.compareTo(new ArrayList<>()));\n    }\n}\n"}
{"code_source": "package com.baeldung.jmockit;\n\nimport java.util.Random;\n\npublic class AppManager {\n\n    public boolean managerResponse(String question) {\n        return AppManager.isResponsePositive(question);\n    }\n\n    public static boolean isResponsePositive(String value) {\n        if (value == null)\n            return false;\n        int orgLength = value.length();\n        int randomNumber = randomNumber();\n        return orgLength == randomNumber ? true : false;\n    }\n\n    private static int randomNumber() {\n        return new Random().nextInt(7);\n    }\n\n    private static Integer stringToInteger(String num) {\n        return Integer.parseInt(num);\n    }\n}\n", "test_case": "package com.baeldung.jmockit;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport mockit.Mock;\nimport mockit.MockUp;\n\npublic class AppManagerUnitTest {\n\n    private AppManager appManager;\n\n    @BeforeEach\n    public void setUp() {\n        appManager = new AppManager();\n    }\n\n    @Test\n    public void givenAppManager_whenStaticMethodCalled_thenValidateExpectedResponse() {\n        new MockUp<AppManager>() {\n            @Mock\n            public boolean isResponsePositive(String value) {\n                return false;\n            }\n        };\n\n        Assertions.assertFalse(appManager.managerResponse(\"Why are you coming late?\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.jmockit;\n\npublic class Performer {\n\tprivate Collaborator collaborator;\n\t\n\tpublic void perform(Model model){\n\t\tboolean value = collaborator.collaborate(model.getInfo());\n\t\tcollaborator.receive(value);\n\t}\n}\n", "test_case": "package com.baeldung.jmockit;\n\nimport com.baeldung.jmockit.Collaborator;\nimport com.baeldung.jmockit.Model;\nimport com.baeldung.jmockit.Performer;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport mockit.*;\nimport mockit.integration.junit4.JMockit;\n\n@RunWith(JMockit.class)\npublic class PerformerIntegrationTest {\n\n    @Injectable\n    private Collaborator collaborator;\n\n    @Tested\n    private Performer performer;\n\n    @Test\n    public void testThePerformMethod(@Mocked Model model) {\n    \tnew Expectations() {{\n    \t\tmodel.getInfo();result = \"bar\";\n    \t\tcollaborator.collaborate(\"bar\"); result = true;\n    \t}};\n\n    \tperformer.perform(model);\n\n    \tnew Verifications() {{\n    \t\tcollaborator.receive(true);\n    \t}};\n    }\n\n}\n"}
{"code_source": "package com.baeldung.datafaker;\n\nimport java.util.List;\nimport net.datafaker.Faker;\n\npublic class Collection {\n    public static final int MIN = 1;\n    public static final int MAX = 100;\n    private static final Faker faker = new Faker();\n\n    public static void main(String[] args) {\n        System.out.println(getFictionalCharacters());\n    }\n\n    static List<String> getFictionalCharacters() {\n        return faker.collection(\n                        () -> faker.starWars().character(),\n                        () -> faker.starTrek().character())\n                .len(MIN, MAX)\n                .generate();\n    }\n}\n", "test_case": "package com.baeldung.datafaker;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertAll;\n\nclass CollectionUnitTest {\n\n    @Test\n    void whenGettingFictionaCharacters_thenResultNotEmptyAndOfCorrectSize() {\n        assertAll(\n                () -> assertThat(Collection.getFictionalCharacters()).isNotEmpty(),\n                () -> assertThat(Collection.getFictionalCharacters()).size().isGreaterThanOrEqualTo(Collection.MIN),\n                () -> assertThat(Collection.getFictionalCharacters()).size().isLessThanOrEqualTo(Collection.MAX)\n        );\n\n    }\n}"}
{"code_source": "package com.baeldung.datafaker;\n\nimport net.datafaker.Faker;\n\nimport java.io.Serializable;\nimport java.util.List;\n\npublic class MixedCollection {\n    public static final int MIN = 1;\n    public static final int MAX = 20;\n    private static final Faker faker = new Faker();\n\n    public static void main(String[] args) {\n        System.out.println(getMixedCollection());\n    }\n\n    static List<? extends Serializable> getMixedCollection() {\n        return faker.collection(\n                    () -> faker.date().birthday(),\n                    () -> faker.name().fullName()\n                )\n            .len(MIN, MAX)\n            .generate();\n    }\n}\n", "test_case": "package com.baeldung.datafaker;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertAll;\n\nclass MixedCollectionUnitTest {\n\n    @Test\n    void whenGettingMixedCollection_thenResultNotEmptyAndOfCorrectSize() {\n        assertAll(\n                () -> assertThat(MixedCollection.getMixedCollection()).isNotEmpty(),\n                () -> assertThat(MixedCollection.getMixedCollection()).size().isGreaterThanOrEqualTo(MixedCollection.MIN),\n                () -> assertThat(MixedCollection.getMixedCollection()).size().isLessThanOrEqualTo(MixedCollection.MAX)\n        );\n    }\n}"}
{"code_source": "package com.baeldung.datafaker;\n\nimport net.datafaker.Faker;\n\npublic class Csv {\n    private static final Faker faker = new Faker();\n\n    public static void main(String[] args) {\n        System.out.println(\"First expression:\\n\" + getFirstExpression());\n        System.out.println(\"Second expression:\\n\" + getSecondExpression());\n    }\n\n    static String getSecondExpression() {\n        final String secondExpressionString\n            = \"#{csv ',','\\\"','true','4','name_column','#{Name.first_name}','last_name_column','#{Name.last_name}'}\";\n        return faker.expression(secondExpressionString);\n    }\n\n    static String getFirstExpression() {\n        final String firstExpressionString\n            = \"#{csv '4','name_column','#{Name.first_name}','last_name_column','#{Name.last_name}'}\";\n        return faker.expression(firstExpressionString);\n    }\n\n}\n", "test_case": "package com.baeldung.datafaker;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertAll;\n\nclass CsvUnitTest {\n\n    @Test\n    void whenGettingFirstExpression_thenResultNotEmptyAndOfCorrectSizeAndFormat() {\n        assertAll(\n                () -> assertThat(Csv.getFirstExpression()).isNotBlank(),\n                () -> assertThat(Csv.getFirstExpression().split(\"\\n\")).hasSize(5),\n                () -> assertThat(Csv.getFirstExpression().split(\"\\n\")[0]).isEqualTo(\"\\\"name_column\\\",\\\"last_name_column\\\"\")\n        );\n    }\n\n    @Test\n    void whenGettingSecondExpression_thenResultNotEmptyAndOfCorrectSizeAndFormat() {\n        assertAll(\n                () -> assertThat(Csv.getFirstExpression()).isNotBlank(),\n                () -> assertThat(Csv.getFirstExpression().split(\"\\n\")).hasSize(5),\n                () -> assertThat(Csv.getFirstExpression().split(\"\\n\")[0]).isEqualTo(\"\\\"name_column\\\",\\\"last_name_column\\\"\")\n        );\n    }\n}"}
{"code_source": "package com.baeldung.datafaker;\n\n\nimport net.datafaker.Faker;\n\npublic class Examplify {\n    private static final Faker faker = new Faker();\n\n    public static void main(String[] args) {\n        System.out.println(\"Expression: \" + getExpression());\n        System.out.println(\"Number expression: \" + getNumberExpression());\n    }\n\n    static String getNumberExpression() {\n        return faker.expression(\"#{examplify '123-123-123'}\");\n    }\n\n    static String getExpression() {\n        return faker.expression(\"#{examplify 'Cat in the Hat'}\");\n    }\n}\n", "test_case": "package com.baeldung.datafaker;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ExamplifyUnitTest {\n\n    @Test\n    void whenGettingNumberExpression_thenResultNotEmptyAndMathesRegex() {\n        assertAll(\n                () -> assertThat(Examplify.getNumberExpression()).isNotBlank(),\n                () -> assertThat(Examplify.getNumberExpression()).matches(\"\\\\d{3}-\\\\d{3}-\\\\d{3}\")\n        );\n    }\n\n    @Test\n    void whenGettingExpression_thenResultNotEmptyAndMathesRegex() {\n        assertAll(\n                () -> assertThat(Examplify.getExpression()).isNotBlank(),\n                () -> assertThat(Examplify.getExpression())\n                        .matches(\"[A-Z][a-z]{2} [a-z]{2} [a-z]{3} [A-Z][a-z]{2}\")\n        );\n    }\n}"}
{"code_source": "package com.baeldung.datafaker;\n\nimport net.datafaker.Faker;\n\npublic class Json {\n    private static final Faker faker = new Faker();\n\n    public static void main(String[] args) {\n        System.out.println(getExpression());\n    }\n\n    static String getExpression() {\n        return faker.expression(\n                \"#{json 'person',\" +\n                        \"'#{json ''first_name'',''#{Name.first_name}'',''last_name'',''#{Name.last_name}''}',\" +\n                \"'address',\" +\n                        \"'#{json ''country'',''#{Address.country}'',''city'',''#{Address.city}''}'}\");\n    }\n}\n", "test_case": "package com.baeldung.datafaker;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatNoException;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass JsonUnitTest {\n\n    private static final ObjectMapper objectMapper = new ObjectMapper();\n\n    @Test\n    void whenGettingJsonExpression_thenResultIsValidJson() {\n        assertAll(\n                () -> assertThatNoException().isThrownBy(() -> objectMapper.readTree(Json.getExpression())),\n                () -> assertThat(Json.getExpression()).isNotBlank()\n        );\n    }\n}"}
{"code_source": "package com.baeldung.datafaker;\n\nimport net.datafaker.Faker;\n\npublic class MethodInvocation {\n    private static final Faker faker = new Faker();\n\n    public static void main(String[] args) {\n        System.out.println(\"Name from a method: \" + getNameFromMethod());\n        System.out.println(\"Name from an expression: \" + getNameFromExpression());\n    }\n\n    static String getNameFromExpression() {\n        return faker.expression(\"#{Name.first_Name}\");\n    }\n\n    static String getNameFromMethod() {\n        return faker.name().firstName();\n    }\n}\n", "test_case": "package com.baeldung.datafaker;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass MethodInvocationUnitTest {\n\n    @Test\n    void whenGettingNameFromExpression_thenResultNotEmpty() {\n        assertThat(MethodInvocation.getNameFromMethod()).isNotBlank();\n    }\n\n    @Test\n    void whenGettingNameFromMethod_thenResultNotEmpty() {\n        assertThat(MethodInvocation.getNameFromExpression()).isNotBlank();\n    }\n}"}
{"code_source": "package com.baeldung.datafaker;\n\nimport net.datafaker.Faker;\n\nimport java.time.Duration;\n\npublic class MethodInvocationWithParams {\n    public static final int MIN = 1;\n    public static final int MAX = 10;\n    public static final String UNIT = \"SECONDS\";\n    private static final Faker faker = new Faker();\n\n    public static void main(String[] args) {\n        System.out.println(\"Duration from the method :\" + getDurationFromMethod());\n        System.out.println(\"Duration from the expression: \" + getDurationFromExpression());\n    }\n\n    static String getDurationFromExpression() {\n        return faker.expression(\"#{date.duration '1', '10', 'SECONDS'}\");\n    }\n\n    static Duration getDurationFromMethod() {\n        return faker.date().duration(MIN, MAX, UNIT);\n    }\n}\n", "test_case": "package com.baeldung.datafaker;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.time.Duration;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass MethodInvocationWithParamsUnitTest {\n\n    @Test\n    void whenGettingDurationFromExpression_thenResultNotEmpty() {\n        assertThat(MethodInvocationWithParams.getDurationFromExpression()).isNotBlank();\n    }\n\n    @Test\n    void whenGettingDurationFromMethod_thenResultNotNullAndInBoundaries() {\n        assertThat(MethodInvocationWithParams.getDurationFromMethod())\n                .isNotNull()\n                .isBetween(Duration.ofSeconds(MethodInvocationWithParams.MIN),\n                        Duration.ofSeconds(MethodInvocationWithParams.MAX));\n    }\n}"}
{"code_source": "package com.baeldung.datafaker;\n\nimport net.datafaker.Faker;\n\npublic class Option {\n    private static final Faker faker = new Faker();\n\n    public static void main(String[] args) {\n        System.out.println(\"First expression: \" + getFirstExpression());\n        System.out.println(\"Second expression: \" + getSecondExpression());\n        System.out.println(\"Third expression: \" + getThirdExpression());\n    }\n\n    static String getThirdExpression() {\n        return faker.expression(\"#{regexify '(Hi|Hello|Hey)'}\");\n    }\n\n    static String getSecondExpression() {\n        return faker.expression(\"#{options.option '1','2','3','4','*'}\");\n    }\n\n    static String getFirstExpression() {\n        return faker.expression(\"#{options.option 'Hi','Hello','Hey'}\");\n    }\n}\n", "test_case": "package com.baeldung.datafaker;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass OptionUnitTest {\n    @Test\n    void whenGettingThirdExpression_thenResultNotBlankAndMatchesRegex() {\n        assertThat(Option.getThirdExpression()).isNotBlank()\n                .matches(\"(Hi|Hello|Hey)\");\n    }\n\n    @Test\n    void whenGettingSecondExpression_thenResultNotBlankAndMatchesRegex() {\n        assertThat(Option.getSecondExpression()).isNotBlank()\n                .matches(\"(1|2|3|4|\\\\*)\");\n    }\n\n    @Test\n    void whenGettingFirstExpression_thenResultNotBlankAndMatchesRegex() {\n        assertThat(Option.getFirstExpression()).isNotBlank()\n                .matches(\"(Hi|Hello|Hey)\");\n    }\n}"}
{"code_source": "package com.baeldung.datafaker;\n\nimport net.datafaker.Faker;\n\npublic class Regexify {\n    private static final Faker faker = new Faker();\n\n    public static void main(String[] args) {\n        System.out.println(\"Expression: \" + getExpression());\n        System.out.println(\"Regexify with a method: \" + getMethodExpression());\n    }\n\n    static String getMethodExpression() {\n        return faker.regexify(\"[A-D]{4,10}\");\n    }\n\n    static String getExpression() {\n        return faker.expression(\"#{regexify '(hello|bye|hey)'}\");\n    }\n}\n", "test_case": "package com.baeldung.datafaker;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass RegexifyUnitTest {\n\n    @Test\n    void whenGettingMethidExpression_thenResultNotBlankAndMatchesRegex() {\n        assertThat(Regexify.getMethodExpression()).isNotBlank()\n                .matches(\"[A-D]{4,10}\");\n    }\n\n    @Test\n    void whenGettingExpression_thenResultNotBlankAndMatchesRegex() {\n        assertThat(Regexify.getExpression()).isNotBlank()\n                .matches(\"(hello|bye|hey)\");\n    }\n}"}
{"code_source": "package com.baeldung.datafaker;\n\nimport net.datafaker.Faker;\n\npublic class Templatify {\n    private static final Faker faker = new Faker();\n\n    public static void main(String[] args) {\n        System.out.println(\"Expression: \" + getExpression());\n        System.out.println(\"Expression with a placeholder: \" + getExpressionWithPlaceholder());\n    }\n\n    static String getExpressionWithPlaceholder() {\n        return faker.expression(\"#{templatify '#ight', '#', 'f', 'l', 'm', 'n'}\");\n    }\n\n    static String getExpression() {\n        return faker.expression(\"#{templatify 'test','t','j','r'}\");\n    }\n}\n\n", "test_case": "package com.baeldung.datafaker;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass TemplatifyUnitTest {\n    @Test\n    void whenGettingPlaceholderExpression_thenResultNotBlankAndMatchesRegex() {\n        assertThat(Templatify.getExpressionWithPlaceholder()).isNotBlank()\n                .matches(\".ight\");\n    }\n\n    @Test\n    void whenGettingExpression_thenResultNotBlankAndMatchesRegex() {\n        assertThat(Templatify.getExpression()).isNotBlank()\n                .matches(\".es.\");\n    }\n}"}
{"code_source": "package com.baeldung.optaplanner;\n\nimport org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\nimport org.optaplanner.core.api.score.stream.Constraint;\nimport org.optaplanner.core.api.score.stream.ConstraintFactory;\nimport org.optaplanner.core.api.score.stream.ConstraintProvider;\nimport org.optaplanner.core.api.score.stream.Joiners;\n\npublic class CourseScheduleConstraintProvider implements ConstraintProvider {\n\n    @Override\n    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {\n        return new Constraint[]{\n                roomConflict(constraintFactory)\n        };\n    }\n\n    public Constraint roomConflict(ConstraintFactory constraintFactory){\n        return constraintFactory\n                .forEachUniquePair(Lecture.class,\n                                   Joiners.equal(Lecture::getRoomNumber), Joiners.equal(Lecture::getPeriod))\n                .penalize(\"Room conflict\", HardSoftScore.ONE_HARD);\n    }\n}\n", "test_case": "package com.baeldung.optaplanner.test;\n\nimport com.baeldung.optaplanner.CourseSchedule;\nimport com.baeldung.optaplanner.CourseScheduleConstraintProvider;\nimport com.baeldung.optaplanner.Lecture;\nimport org.junit.jupiter.api.Test;\nimport org.optaplanner.test.api.score.stream.ConstraintVerifier;\n\npublic class CourseScheduleConstraintProviderUnitTest {\n\n    private final ConstraintVerifier<CourseScheduleConstraintProvider, CourseSchedule> constraintVerifier =\n            ConstraintVerifier.build(new CourseScheduleConstraintProvider(), CourseSchedule.class, Lecture.class);\n\n    @Test\n    public void testCourseScheduleConstraint() {\n\n        Lecture lecture = new Lecture(0L);\n        lecture.setPeriod(1);\n        lecture.setRoomNumber(1);\n        Lecture conflictedLecture = new Lecture(1L);\n        conflictedLecture.setPeriod(1);\n        conflictedLecture.setRoomNumber(1);\n\n        constraintVerifier.verifyThat(CourseScheduleConstraintProvider::roomConflict)\n                .given(lecture, conflictedLecture)\n                .penalizesBy(1);\n    }\n}\n"}
{"code_source": "package com.baeldung.pdfinfo;\n\n\nimport com.itextpdf.text.pdf.PdfReader;\n\nimport java.io.IOException;\nimport java.util.Map;\n\npublic class PdfInfoIText {\n\n    public static int getNumberOfPages(final String pdfFile) throws IOException {\n        PdfReader reader = new PdfReader(pdfFile);\n        int pages = reader.getNumberOfPages();\n        reader.close();\n        return pages;\n    }\n\n    public static boolean isPasswordRequired(final String pdfFile) throws IOException {\n        PdfReader reader = new PdfReader(pdfFile);\n        boolean isEncrypted = reader.isEncrypted();\n        reader.close();\n        return isEncrypted;\n    }\n\n    public static Map<String, String> getInfo(final String pdfFile) throws IOException {\n        PdfReader reader = new PdfReader(pdfFile);\n        Map<String, String> info = reader.getInfo();\n        reader.close();\n        return info;\n    }\n}\n", "test_case": "package com.baeldung.pdfinfo;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.util.Map;\n\npublic class PdfInfoITextUnitTest {\n\n    private static final String PDF_FILE = \"src/test/resources/input.pdf\";\n\n    @Test\n    public void givenPdf_whenGetNumberOfPages_thenOK() throws IOException {\n        Assert.assertEquals(4, PdfInfoIText.getNumberOfPages(PDF_FILE));\n    }\n\n    @Test\n    public void givenPdf_whenIsPasswordRequired_thenOK() throws IOException {\n        Assert.assertFalse(PdfInfoIText.isPasswordRequired(PDF_FILE));\n    }\n\n    @Test\n    public void givenPdf_whenGetInfo_thenOK() throws IOException {\n        Map<String, String> info = PdfInfoIText.getInfo(PDF_FILE);\n        Assert.assertEquals(\"LibreOffice 4.2\", info.get(\"Producer\"));\n        Assert.assertEquals(\"Writer\", info.get(\"Creator\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.pdfinfo;\n\n\nimport org.apache.pdfbox.Loader;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDDocumentInformation;\n\nimport java.io.File;\nimport java.io.IOException;\n\npublic class PdfInfoPdfBox {\n\n    public static int getNumberOfPages(final String pdfFile) throws IOException {\n        File file = new File(pdfFile);\n        PDDocument document = Loader.loadPDF(file);\n        int pages = document.getNumberOfPages();\n        document.close();\n        return pages;\n    }\n\n    public static boolean isPasswordRequired(final String pdfFile) throws IOException {\n        File file = new File(pdfFile);\n        PDDocument document = Loader.loadPDF(file);\n        boolean isEncrypted = document.isEncrypted();\n        document.close();\n        return isEncrypted;\n    }\n\n    public static PDDocumentInformation getInfo(final String pdfFile) throws IOException {\n        File file = new File(pdfFile);\n        PDDocument document = Loader.loadPDF(file);\n        PDDocumentInformation info = document.getDocumentInformation();\n        document.close();\n        return info;\n    }\n}\n", "test_case": "package com.baeldung.pdfinfo;\n\nimport org.apache.pdfbox.pdmodel.PDDocumentInformation;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.io.IOException;\n\npublic class PdfInfoPdfBoxUnitTest {\n\n    private static final String PDF_FILE = \"src/test/resources/input.pdf\";\n\n    @Test\n    public void givenPdf_whenGetNumberOfPages_thenOK() throws IOException {\n        Assert.assertEquals(4, PdfInfoPdfBox.getNumberOfPages(PDF_FILE));\n    }\n\n    @Test\n    public void givenPdf_whenIsPasswordRequired_thenOK() throws IOException {\n        Assert.assertFalse(PdfInfoPdfBox.isPasswordRequired(PDF_FILE));\n    }\n\n    @Test\n    public void givenPdf_whenGetInfo_thenOK() throws IOException {\n        PDDocumentInformation info = PdfInfoPdfBox.getInfo(PDF_FILE);\n        Assert.assertEquals(\"LibreOffice 4.2\", info.getProducer());\n        Assert.assertEquals(\"Writer\", info.getCreator());\n    }\n}\n"}
{"code_source": "package com.baeldung.rxjava;\n\nimport rx.Observable;\n\npublic class ResourceManagement {\n\n    public static void main(String[] args) {\n\n        Observable<Character> values = Observable.using(\n          () -> {\n              String resource = \"MyResource\";\n              System.out.println(\"Leased: \" + resource);\n              return resource;\n          },\n          r -> Observable.create(o -> {\n              for (Character c : r.toCharArray()) {\n                  o.onNext(c);\n              }\n              o.onCompleted();\n          }),\n          r -> System.out.println(\"Disposed: \" + r)\n        );\n\n        values.subscribe(\n          System.out::println,\n          System.out::println\n        );\n    }\n}\n\n", "test_case": "package com.baeldung.rxjava;\n\nimport org.junit.Test;\nimport rx.Observable;\n\nimport static junit.framework.Assert.assertTrue;\n\npublic class ResourceManagementUnitTest {\n\n    @Test\n    public void givenResource_whenUsingOberservable_thenCreatePrintDisposeResource() throws InterruptedException {\n\n        String[] result = {\"\"};\n        Observable<Character> values = Observable.using(\n          () -> \"MyResource\",\n          r -> Observable.create(o -> {\n              for (Character c : r.toCharArray())\n                  o.onNext(c);\n              o.onCompleted();\n          }),\n          r -> System.out.println(\"Disposed: \" + r)\n        );\n\n        values.subscribe(\n          v -> result[0] += v,\n          e -> result[0] += e\n        );\n        assertTrue(result[0].equals(\"MyResource\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.pmd;\n\npublic class Cnt {\n\n    public int d(int a, int b) {\n        if (b == 0)\n            return Integer.MAX_VALUE;\n        else\n            return a / b;\n    }\n\n}\n", "test_case": "package com.baeldung.pmd;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\npublic class CntUnitTest {\n\n    private Cnt service;\n\n    @Test\n    public void whenSecondParamIsZeroShouldReturnIntMax(){\n        service = new Cnt();\n        int answer = service.d(100,0);\n        assertEquals(Integer.MAX_VALUE, answer);\n    }\n}\n"}
{"code_source": "package com.baeldung.tensorflow;\n\nimport org.tensorflow.DataType;\nimport org.tensorflow.Graph;\nimport org.tensorflow.Operation;\nimport org.tensorflow.Session;\nimport org.tensorflow.Tensor;\n\npublic class TensorflowGraph {\n\n\tpublic static Graph createGraph() {\n\t\tGraph graph = new Graph();\n\t\tOperation a = graph.opBuilder(\"Const\", \"a\").setAttr(\"dtype\", DataType.fromClass(Double.class))\n\t\t\t\t.setAttr(\"value\", Tensor.<Double>create(3.0, Double.class)).build();\n\t\tOperation b = graph.opBuilder(\"Const\", \"b\").setAttr(\"dtype\", DataType.fromClass(Double.class))\n\t\t\t\t.setAttr(\"value\", Tensor.<Double>create(2.0, Double.class)).build();\n\t\tOperation x = graph.opBuilder(\"Placeholder\", \"x\").setAttr(\"dtype\", DataType.fromClass(Double.class)).build();\n\t\tOperation y = graph.opBuilder(\"Placeholder\", \"y\").setAttr(\"dtype\", DataType.fromClass(Double.class)).build();\n\t\tOperation ax = graph.opBuilder(\"Mul\", \"ax\").addInput(a.output(0)).addInput(x.output(0)).build();\n\t\tOperation by = graph.opBuilder(\"Mul\", \"by\").addInput(b.output(0)).addInput(y.output(0)).build();\n\t\tgraph.opBuilder(\"Add\", \"z\").addInput(ax.output(0)).addInput(by.output(0)).build();\n\t\treturn graph;\n\t}\n\n\tpublic static Object runGraph(Graph graph, Double x, Double y) {\n\t\tObject result;\n\t\ttry (Session sess = new Session(graph)) {\n\t\t\tresult = sess.runner().fetch(\"z\").feed(\"x\", Tensor.<Double>create(x, Double.class))\n\t\t\t\t\t.feed(\"y\", Tensor.<Double>create(y, Double.class)).run().get(0).expect(Double.class)\n\t\t\t\t\t.doubleValue();\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tGraph graph = TensorflowGraph.createGraph();\n\t\tObject result = TensorflowGraph.runGraph(graph, 3.0, 6.0);\n\t\tSystem.out.println(result);\n\t\tgraph.close();\n\t}\n}", "test_case": "package com.baeldung.tensorflow;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.Test;\nimport org.tensorflow.Graph;\n\npublic class TensorflowGraphUnitTest {\n\t\n\t@Test\n\tpublic void givenTensorflowGraphWhenRunInSessionReturnsExpectedResult() {\n\t\t\n\t\tGraph graph = TensorflowGraph.createGraph();\n\t\tObject result = TensorflowGraph.runGraph(graph, 3.0, 6.0);\n\t\tassertEquals(21.0, result);\n\t\tSystem.out.println(result);\n\t\tgraph.close();\n\t\t\n\t}\n\n}\n"}
{"code_source": "package com.baeldung.testng;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class DateSerializerService {\n    public String serializeDate(Date date, String format) {\n        SimpleDateFormat dateFormat = new SimpleDateFormat(format);\n        return dateFormat.format(date);\n    }\n}\n", "test_case": "package com.baeldung.testng;\n\nimport java.util.Date;\n\nimport com.baeldung.testng.DateSerializerService;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Test;\n\n@Test(testName = \"Date Serializer\")\npublic class DateSerializerServiceUnitTest {\n    private DateSerializerService toTest;\n\n    @BeforeClass\n    public void beforeClass() {\n        toTest = new DateSerializerService();\n    }\n\n    @Test(expectedExceptions = { NullPointerException.class })\n    void givenNullDate_whenSerializeDate_thenThrowsException() {\n        Date dateToTest = null;\n\n        toTest.serializeDate(dateToTest, \"yyyy/MM/dd HH:mm:ss.SSS\");\n    }\n}\n"}
{"code_source": "package com.baeldung.vavrvalidation.validator;\n\nimport com.baeldung.vavrvalidation.model.User;\nimport io.vavr.collection.CharSeq;\nimport io.vavr.collection.Seq;\nimport io.vavr.control.Validation;\n\npublic class UserValidator {\n    \n    private static final String NAME_PATTERN = \"^[a-zA-Z0-9]+$\";\n    private static final String NAME_ERROR = \"Name contains invalid characters\";\n    private static final String EMAIL_PATTERN =\n        \"^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@\"\n          + \"[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$\";\n    private static final String EMAIL_ERROR = \"Email must be a well-formed email address\";\n    \n\tpublic Validation<Seq<String>, User> validateUser(String name, String email) {\n        return Validation\n          .combine(validateField(name, NAME_PATTERN, NAME_ERROR)\n              ,validateField(email, EMAIL_PATTERN, EMAIL_ERROR))\n                .ap(User::new);\n    }\n    \n    private Validation<String, String> validateField(String field, String pattern, String error) {\n        return CharSeq.of(field).replaceAll(pattern, \"\").transform(seq -> seq.isEmpty()\n          ? Validation.valid(field) \n            : Validation.invalid(error));\n    }\n}\n", "test_case": "package com.baeldung.vavrvalidation.validator;\n\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.instanceOf;\nimport org.junit.Test;\nimport com.baeldung.vavrvalidation.validator.UserValidator;\nimport io.vavr.control.Validation.Invalid;\nimport io.vavr.control.Validation.Valid;\n\npublic class UserValidatorUnitTest {\n    \n    @Test\n    public void givenValidUserParams_whenValidated_thenInstanceOfValid() {\n        UserValidator userValidator = new UserValidator();\n        assertThat(userValidator.validateUser(\"John\", \"john@domain.com\"), instanceOf(Valid.class));\n    }\n    \n    @Test\n    public void givenInvalidUserParams_whenValidated_thenInstanceOfInvalid() {\n        UserValidator userValidator = new UserValidator();\n        assertThat(userValidator.validateUser(\"John\", \"no-email\"), instanceOf(Invalid.class));\n    }\n}\n"}
{"code_source": "package com.baeldung.vavr.exception.handling;\n\n\nimport com.baeldung.vavr.exception.handling.client.HttpClient;\nimport com.baeldung.vavr.exception.handling.client.Response;\nimport io.vavr.control.Try;\n\nclass VavrTry {\n    private final HttpClient httpClient;\n\n    VavrTry(HttpClient httpClient) {\n        this.httpClient = httpClient;\n    }\n\n    Try<Response> getResponse() {\n        return Try.of(httpClient::call);\n    }\n}\n", "test_case": "package com.baeldung.vavr.exception.handling;\n\nimport com.baeldung.vavr.exception.handling.client.ClientException;\nimport com.baeldung.vavr.exception.handling.client.HttpClient;\nimport com.baeldung.vavr.exception.handling.client.Response;\nimport io.vavr.collection.Stream;\nimport io.vavr.control.Option;\nimport io.vavr.control.Try;\nimport org.junit.Test;\n\nimport static io.vavr.API.$;\nimport static io.vavr.API.Case;\nimport static io.vavr.API.Match;\nimport static io.vavr.Predicates.instanceOf;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotEquals;\nimport static org.junit.Assert.assertTrue;\n\npublic class VavrTryUnitTest {\n\n    @Test\n    public void givenHttpClient_whenMakeACall_shouldReturnSuccess() {\n        //given\n        Integer defaultChainedResult = 1;\n        String id = \"a\";\n        HttpClient httpClient = () -> new Response(id);\n\n        //when\n        Try<Response> response = new VavrTry(httpClient).getResponse();\n        Integer chainedResult = response\n          .map(this::actionThatTakesResponse)\n          .getOrElse(defaultChainedResult);\n        Stream<String> stream = response.toStream().map(it -> it.id);\n\n        //then\n        assertTrue(!stream.isEmpty());\n        assertTrue(response.isSuccess());\n        response.onSuccess(r -> assertEquals(id, r.id));\n        response.andThen(r -> assertEquals(id, r.id));\n        assertNotEquals(defaultChainedResult, chainedResult);\n    }\n\n    @Test\n    public void givenHttpClientFailure_whenMakeACall_shouldReturnFailure() {\n        //given\n        Integer defaultChainedResult = 1;\n        HttpClient httpClient = () -> {\n            throw new ClientException(\"problem\");\n        };\n\n        //when\n        Try<Response> response = new VavrTry(httpClient).getResponse();\n        Integer chainedResult = response\n          .map(this::actionThatTakesResponse)\n          .getOrElse(defaultChainedResult);\n        Option<Response> optionalResponse = response.toOption();\n\n        //then\n        assertTrue(optionalResponse.isEmpty());\n        assertTrue(response.isFailure());\n        response.onFailure(ex -> assertTrue(ex instanceof ClientException));\n        assertEquals(defaultChainedResult, chainedResult);\n    }\n\n    @Test\n    public void givenHttpClientThatFailure_whenMakeACall_shouldReturnFailureAndNotRecover() {\n        //given\n        Response defaultResponse = new Response(\"b\");\n        HttpClient httpClient = () -> {\n            throw new RuntimeException(\"critical problem\");\n        };\n\n        //when\n        Try<Response> recovered = new VavrTry(httpClient).getResponse()\n          .recover(r -> Match(r).of(\n            Case($(instanceOf(ClientException.class)), defaultResponse)\n          ));\n\n        //then\n        assertTrue(recovered.isFailure());\n\n//        recovered.getOrElseThrow(throwable -> {\n//            throw new RuntimeException(throwable);\n//        });\n    }\n\n    @Test\n    public void givenHttpClientThatFailure_whenMakeACall_shouldReturnFailureAndRecover() {\n        //given\n        Response defaultResponse = new Response(\"b\");\n        HttpClient httpClient = () -> {\n            throw new ClientException(\"non critical problem\");\n        };\n\n        //when\n        Try<Response> recovered = new VavrTry(httpClient).getResponse()\n          .recover(r -> Match(r).of(\n            Case($(instanceOf(ClientException.class)), defaultResponse),\n            Case($(instanceOf(IllegalArgumentException.class)), defaultResponse)\n          ));\n\n        //then\n        assertTrue(recovered.isSuccess());\n    }\n\n\n    public int actionThatTakesResponse(Response response) {\n        return response.id.hashCode();\n    }\n\n    public int actionThatTakesTryResponse(Try<Response> response, int defaultTransformation) {\n        return response.transform(responses -> response.map(it -> it.id.hashCode()).getOrElse(defaultTransformation));\n    }\n\n}"}
{"code_source": "package com.baeldung.sax;\n\nimport org.xml.sax.Attributes;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.helpers.DefaultHandler;\n\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SaxParserMain {\n    public static void main(String[] args) throws ParserConfigurationException, SAXException, IOException {\n        SAXParserFactory factory = SAXParserFactory.newInstance();\n        SAXParser saxParser = factory.newSAXParser();\n\n        BaeldungHandler baeldungHandler = new BaeldungHandler();\n        saxParser.parse(\"xml/src/main/resources/sax/baeldung.xml\", baeldungHandler);\n        System.out.println(baeldungHandler.getWebsite());\n    }\n\n    public static class BaeldungHandler extends DefaultHandler {\n        private static final String ARTICLES = \"articles\";\n        private static final String ARTICLE = \"article\";\n        private static final String TITLE = \"title\";\n        private static final String CONTENT = \"content\";\n\n        private Baeldung website;\n        private StringBuilder elementValue;\n\n        @Override\n        public void characters(char[] ch, int start, int length) throws SAXException {\n            if (elementValue == null) {\n                elementValue = new StringBuilder();\n            } else {\n                elementValue.append(ch, start, length);\n            }\n        }\n\n        @Override\n        public void startDocument() throws SAXException {\n            website = new Baeldung();\n        }\n\n        @Override\n        public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\n            switch (qName) {\n                case ARTICLES:\n                    website.setArticleList(new ArrayList<>());\n                    break;\n                case ARTICLE:\n                    website.getArticleList().add(new BaeldungArticle());\n                    break;\n                case TITLE:\n                    elementValue = new StringBuilder();\n                    break;\n                case CONTENT:\n                    elementValue = new StringBuilder();\n                    break;\n            }\n        }\n\n        @Override\n        public void endElement(String uri, String localName, String qName) throws SAXException {\n            switch (qName) {\n                case TITLE:\n                    latestArticle().setTitle(elementValue.toString());\n                    break;\n                case CONTENT:\n                    latestArticle().setContent(elementValue.toString());\n                    break;\n            }\n        }\n\n        private BaeldungArticle latestArticle() {\n            List<BaeldungArticle> articleList = website.getArticleList();\n            int latestArticleIndex = articleList.size() - 1;\n            return articleList.get(latestArticleIndex);\n        }\n\n        public Baeldung getWebsite() {\n            return website;\n        }\n    }\n\n    public static class Baeldung {\n        private List<BaeldungArticle> articleList;\n\n        public void setArticleList(List<BaeldungArticle> articleList) {\n            this.articleList = articleList;\n        }\n\n        public List<BaeldungArticle> getArticleList() {\n            return this.articleList;\n        }\n    }\n\n    public static class BaeldungArticle {\n        private String title;\n        private String content;\n\n        public void setTitle(String title) {\n            this.title = title;\n        }\n\n        public String getTitle() {\n            return this.title;\n        }\n\n        public void setContent(String content) {\n            this.content = content;\n        }\n\n        public String getContent() {\n            return this.content;\n        }\n    }\n}\n", "test_case": "package com.baeldung.sax;\n\nimport org.junit.Test;\nimport org.xml.sax.SAXException;\n\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport java.io.IOException;\nimport java.util.List;\n\nimport static org.junit.Assert.*;\n\npublic class SaxParserMainUnitTest {\n\n    @Test\n    public void givenAProperXMLFile_whenItIsParsed_ThenAnObjectContainsAllItsElements() throws IOException, SAXException, ParserConfigurationException {\n        SAXParserFactory factory = SAXParserFactory.newInstance();\n        SAXParser saxParser = factory.newSAXParser();\n\n        SaxParserMain.BaeldungHandler baeldungHandler = new SaxParserMain.BaeldungHandler();\n        saxParser.parse(\"src/test/resources/sax/baeldung.xml\", baeldungHandler);\n\n        SaxParserMain.Baeldung result = baeldungHandler.getWebsite();\n\n        assertNotNull(result);\n        List<SaxParserMain.BaeldungArticle> articles = result.getArticleList();\n\n        assertNotNull(articles);\n        assertEquals(3, articles.size());\n\n        SaxParserMain.BaeldungArticle articleOne = articles.get(0);\n        assertEquals(\"Parsing an XML File Using SAX Parser\", articleOne.getTitle());\n        assertEquals(\"SAX Parser's Lorem ipsum...\", articleOne.getContent());\n\n        SaxParserMain.BaeldungArticle articleTwo = articles.get(1);\n        assertEquals(\"Parsing an XML File Using DOM Parser\", articleTwo.getTitle());\n        assertEquals(\"DOM Parser's Lorem ipsum...\", articleTwo.getContent());\n\n        SaxParserMain.BaeldungArticle articleThree = articles.get(2);\n        assertEquals(\"Parsing an XML File Using StAX Parser\", articleThree.getTitle());\n        assertEquals(\"StAX Parser's Lorem ipsum...\", articleThree.getContent());\n    }\n}\n"}
{"code_source": "package com.baeldung.xml;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.Iterator;\n\nimport javax.xml.namespace.NamespaceContext;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactory;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\n\npublic class DefaultParser {\n\n    private File file;\n\n    public DefaultParser(File file) {\n        this.file = file;\n    }\n\n    public NodeList getFirstLevelNodeList() {\n        NodeList nodeList = null;\n        try {\n            FileInputStream fileIS = new FileInputStream(this.getFile());\n            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n\n            DocumentBuilder builder = builderFactory.newDocumentBuilder();\n\n            Document xmlDocument = builder.parse(fileIS);\n\n            XPath xPath = XPathFactory.newInstance().newXPath();\n\n            String expression = \"/tutorials/tutorial\";\n\n            nodeList = (NodeList) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODESET);\n\n        } catch (SAXException | IOException | ParserConfigurationException | XPathExpressionException e) {\n            e.printStackTrace();\n        }\n        return nodeList;\n    }\n\n    public Node getNodeById(String id) {\n        Node node = null;\n        try {\n            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n\n            DocumentBuilder builder = builderFactory.newDocumentBuilder();\n\n            Document xmlDocument = builder.parse(this.getFile());\n\n            XPath xPath = XPathFactory.newInstance().newXPath();\n\n            String expression = \"/tutorials/tutorial[@tutId=\" + \"'\" + id + \"'\" + \"]\";\n\n            node = (Node) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODE);\n\n        } catch (SAXException | IOException | ParserConfigurationException | XPathExpressionException e) {\n            e.printStackTrace();\n        }\n        return node;\n    }\n\n    public NodeList getNodeListByTitle(String name) {\n        NodeList nodeList = null;\n        try {\n            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n\n            DocumentBuilder builder = builderFactory.newDocumentBuilder();\n\n            Document xmlDocument = builder.parse(this.getFile());\n\n            this.clean(xmlDocument);\n\n            XPath xPath = XPathFactory.newInstance().newXPath();\n\n            String expression = \"//tutorial[descendant::title[text()=\" + \"'\" + name + \"'\" + \"]]\";\n\n            nodeList = (NodeList) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODESET);\n\n        } catch (SAXException | IOException | ParserConfigurationException | XPathExpressionException e) {\n            e.printStackTrace();\n        }\n        return nodeList;\n    }\n\n    public NodeList getElementsByDate(String date) {\n        NodeList nodeList = null;\n\n        try {\n            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n\n            DocumentBuilder builder = builderFactory.newDocumentBuilder();\n\n            Document xmlDocument = builder.parse(this.getFile());\n\n            this.clean(xmlDocument);\n\n            XPath xPath = XPathFactory.newInstance().newXPath();\n\n            String expression = \"//tutorial[number(translate(date, '/', '')) > \" + date + \"]\";\n\n            nodeList = (NodeList) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODESET);\n\n        } catch (SAXException | IOException | ParserConfigurationException | XPathExpressionException e) {\n            e.printStackTrace();\n        }\n        return nodeList;\n    }\n\n    public NodeList getAllTutorials() {\n        NodeList nodeList = null;\n        try {\n            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n            builderFactory.setNamespaceAware(true);\n            DocumentBuilder builder = builderFactory.newDocumentBuilder();\n\n            Document xmlDocument = builder.parse(this.getFile());\n\n            this.clean(xmlDocument);\n\n            XPath xPath = XPathFactory.newInstance().newXPath();\n\n            xPath.setNamespaceContext(new NamespaceContext() {\n\n                @Override\n                public Iterator getPrefixes(String arg0) {\n                    return null;\n                }\n\n                @Override\n                public String getPrefix(String arg0) {\n                    return null;\n                }\n\n                @Override\n                public String getNamespaceURI(String arg0) {\n                    if (\"bdn\".equals(arg0)) {\n                        return \"http://www.baeldung.com/full_archive\";\n                    }\n                    return null;\n                }\n            });\n\n            String expression = \"/bdn:tutorials/bdn:tutorial\";\n\n            nodeList = (NodeList) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODESET);\n\n        } catch (SAXException | IOException | ParserConfigurationException | XPathExpressionException e) {\n            e.printStackTrace();\n        }\n        return nodeList;\n    }\n\n    private void clean(Node node) {\n\n        NodeList childs = node.getChildNodes();\n\n        for (int n = childs.getLength() - 1; n >= 0; n--) {\n            Node child = childs.item(n);\n            short nodeType = child.getNodeType();\n\n            if (nodeType == Node.ELEMENT_NODE)\n                clean(child);\n            else if (nodeType == Node.TEXT_NODE) {\n                String trimmedNodeVal = child.getNodeValue().trim();\n                if (trimmedNodeVal.length() == 0)\n                    node.removeChild(child);\n                else\n                    child.setNodeValue(trimmedNodeVal);\n            } else if (nodeType == Node.COMMENT_NODE)\n                node.removeChild(child);\n        }\n    }\n\n    public File getFile() {\n        return file;\n    }\n\n    public void setFile(File file) {\n        this.file = file;\n    }\n\n}\n", "test_case": "package com.baeldung.xml;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.File;\n\nimport org.junit.Test;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\n\npublic class DefaultParserUnitTest {\n\n    final String fileName = \"src/test/resources/example_default_parser.xml\";\n\n    final String fileNameSpace = \"src/test/resources/example_default_parser_namespace.xml\";\n\n    DefaultParser parser;\n\n    @Test\n    public void getFirstLevelNodeListTest() {\n        parser = new DefaultParser(new File(fileName));\n        NodeList list = parser.getFirstLevelNodeList();\n\n        assertNotNull(list);\n        assertTrue(list.getLength() == 4);\n    }\n\n    @Test\n    public void getNodeListByTitleTest() {\n        parser = new DefaultParser(new File(fileName));\n        NodeList list = parser.getNodeListByTitle(\"XML\");\n\n        for (int i = 0; null != list && i < list.getLength(); i++) {\n            Node nod = list.item(i);\n            assertEquals(\"java\", nod.getAttributes().getNamedItem(\"type\").getTextContent());\n            assertEquals(\"02\", nod.getAttributes().getNamedItem(\"tutId\").getTextContent());\n            assertEquals(\"XML\", nod.getFirstChild().getTextContent());\n            assertEquals(\"title\", nod.getFirstChild().getNodeName());\n            assertEquals(\"description\", nod.getChildNodes().item(1).getNodeName());\n            assertEquals(\"Introduction to XPath\", nod.getChildNodes().item(1).getTextContent());\n            assertEquals(\"author\", nod.getLastChild().getNodeName());\n            assertEquals(\"XMLAuthor\", nod.getLastChild().getTextContent());\n        }\n    }\n\n    @Test\n    public void getNodeByIdTest() {\n        parser = new DefaultParser(new File(fileName));\n        Node node = parser.getNodeById(\"03\");\n\n        String type = node.getAttributes().getNamedItem(\"type\").getNodeValue();\n        assertEquals(\"android\", type);\n    }\n\n    @Test\n    public void getNodeListByDateTest() {\n        parser = new DefaultParser(new File(fileName));\n        NodeList list = parser.getNodeListByTitle(\"04022016\");\n        for (int i = 0; null != list && i < list.getLength(); i++) {\n            Node nod = list.item(i);\n            assertEquals(\"java\", nod.getAttributes().getNamedItem(\"type\").getTextContent());\n            assertEquals(\"04\", nod.getAttributes().getNamedItem(\"tutId\").getTextContent());\n            assertEquals(\"Spring\", nod.getFirstChild().getTextContent());\n            assertEquals(\"title\", nod.getFirstChild().getNodeName());\n            assertEquals(\"description\", nod.getChildNodes().item(1).getNodeName());\n            assertEquals(\"Introduction to Spring\", nod.getChildNodes().item(1).getTextContent());\n            assertEquals(\"author\", nod.getLastChild().getNodeName());\n            assertEquals(\"SpringAuthor\", nod.getLastChild().getTextContent());\n        }\n    }\n\n    @Test\n    public void getNodeListWithNamespaceTest() {\n        parser = new DefaultParser(new File(fileNameSpace));\n        NodeList list = parser.getAllTutorials();\n        assertNotNull(list);\n        assertTrue(list.getLength() == 4);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.xml;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\n\npublic class Dom4JParser {\n\n    private File file;\n\n    public Dom4JParser(File file) {\n        this.file = file;\n    }\n\n    public Element getRootElement() {\n        try {\n            SAXReader reader = new SAXReader();\n            Document document = reader.read(file);\n            return document.getRootElement();\n        } catch (DocumentException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public List<Element> getFirstElementList() {\n        try {\n            SAXReader reader = new SAXReader();\n            Document document = reader.read(file);\n            return document.getRootElement().elements();\n        } catch (DocumentException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public Node getNodeById(String id) {\n        try {\n            SAXReader reader = new SAXReader();\n            Document document = reader.read(file);\n            List<Node> elements = document.selectNodes(\"//*[@tutId='\" + id + \"']\");\n            return elements.get(0);\n        } catch (DocumentException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public Node getElementsListByTitle(String name) {\n        try {\n            SAXReader reader = new SAXReader();\n            Document document = reader.read(file);\n            List<Node> elements = document.selectNodes(\"//tutorial[descendant::title[text()=\" + \"'\" + name + \"'\" + \"]]\");\n            return elements.get(0);\n        } catch (DocumentException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public void generateModifiedDocument() {\n        try {\n            SAXReader reader = new SAXReader();\n            Document document = reader.read(file);\n            List<Node> nodes = document.selectNodes(\"/tutorials/tutorial\");\n            for (Node node : nodes) {\n                Element element = (Element) node;\n                Iterator<Element> iterator = element.elementIterator(\"title\");\n                while (iterator.hasNext()) {\n                    Element title = (Element) iterator.next();\n                    title.setText(title.getText() + \" updated\");\n                }\n            }\n            XMLWriter writer = new XMLWriter(new FileWriter(new File(\"src/test/resources/example_dom4j_updated.xml\")));\n            writer.write(document);\n            writer.close();\n        } catch (DocumentException e) {\n            e.printStackTrace();\n\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    public void generateNewDocument() {\n        try {\n            Document document = DocumentHelper.createDocument();\n            Element root = document.addElement(\"XMLTutorials\");\n            Element tutorialElement = root.addElement(\"tutorial\").addAttribute(\"tutId\", \"01\");\n            tutorialElement.addAttribute(\"type\", \"xml\");\n\n            tutorialElement.addElement(\"title\").addText(\"XML with Dom4J\");\n\n            tutorialElement.addElement(\"description\").addText(\"XML handling with Dom4J\");\n\n            tutorialElement.addElement(\"date\").addText(\"14/06/2016\");\n\n            tutorialElement.addElement(\"author\").addText(\"Dom4J tech writer\");\n\n            OutputFormat format = OutputFormat.createPrettyPrint();\n            XMLWriter writer = new XMLWriter(new FileWriter(new File(\"src/test/resources/example_dom4j_new.xml\")), format);\n            writer.write(document);\n            writer.close();\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    public File getFile() {\n        return file;\n    }\n\n    public void setFile(File file) {\n        this.file = file;\n    }\n\n}\n", "test_case": "package com.baeldung.xml;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.File;\nimport java.util.List;\n\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.junit.Test;\n\npublic class Dom4JParserUnitTest {\n\n    final String fileName = \"src/test/resources/example_dom4j.xml\";\n\n    Dom4JParser parser;\n\n    @Test\n    public void getRootElementTest() {\n        parser = new Dom4JParser(new File(fileName));\n        Element root = parser.getRootElement();\n\n        assertNotNull(root);\n        assertTrue(root.elements().size() == 4);\n    }\n\n    @Test\n    public void getFirstElementListTest() {\n        parser = new Dom4JParser(new File(fileName));\n        List<Element> firstList = parser.getFirstElementList();\n\n        assertNotNull(firstList);\n        assertTrue(firstList.size() == 4);\n        assertTrue(firstList.get(0).attributeValue(\"type\").equals(\"java\"));\n    }\n\n    @Test\n    public void getElementByIdTest() {\n        parser = new Dom4JParser(new File(fileName));\n        Node element = parser.getNodeById(\"03\");\n\n        String type = element.valueOf(\"@type\");\n        assertEquals(\"android\", type);\n    }\n\n    @Test\n    public void getElementsListByTitleTest() {\n        parser = new Dom4JParser(new File(fileName));\n        Node element = parser.getElementsListByTitle(\"XML\");\n\n        assertEquals(\"java\", element.valueOf(\"@type\"));\n        assertEquals(\"02\", element.valueOf(\"@tutId\"));\n        assertEquals(\"XML\", element.selectSingleNode(\"title\").getText());\n        assertEquals(\"title\", element.selectSingleNode(\"title\").getName());\n    }\n\n    @Test\n    public void generateModifiedDocumentTest() {\n        parser = new Dom4JParser(new File(fileName));\n        parser.generateModifiedDocument();\n\n        File generatedFile = new File(\"src/test/resources/example_dom4j_updated.xml\");\n        assertTrue(generatedFile.exists());\n\n        parser.setFile(generatedFile);\n        Node element = parser.getNodeById(\"02\");\n\n        assertEquals(\"XML updated\", element.selectSingleNode(\"title\").getText());\n\n    }\n\n    @Test\n    public void generateNewDocumentTest() {\n        parser = new Dom4JParser(new File(fileName));\n        parser.generateNewDocument();\n\n        File newFile = new File(\"src/test/resources/example_dom4j_new.xml\");\n        assertTrue(newFile.exists());\n\n        parser.setFile(newFile);\n        Node element = parser.getNodeById(\"01\");\n\n        assertEquals(\"XML with Dom4J\", element.selectSingleNode(\"title\").getText());\n    }\n}\n"}
{"code_source": "package com.baeldung.xml;\n\nimport java.io.File;\nimport java.util.ArrayList;\n\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBException;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\n\nimport com.baeldung.xml.binding.Tutorial;\nimport com.baeldung.xml.binding.Tutorials;\n\npublic class JaxbParser {\n\n    private File file;\n\n    public JaxbParser(File file) {\n        this.file = file;\n    }\n\n    public Tutorials getFullDocument() {\n        try {\n            JAXBContext jaxbContext = JAXBContext.newInstance(Tutorials.class);\n            Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();\n            Tutorials tutorials = (Tutorials) jaxbUnmarshaller.unmarshal(this.getFile());\n            return tutorials;\n        } catch (JAXBException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public void createNewDocument() {\n        Tutorials tutorials = new Tutorials();\n        tutorials.setTutorial(new ArrayList<Tutorial>());\n        Tutorial tut = new Tutorial();\n        tut.setTutId(\"01\");\n        tut.setType(\"XML\");\n        tut.setTitle(\"XML with Jaxb\");\n        tut.setDescription(\"XML Binding with Jaxb\");\n        tut.setDate(\"04/02/2015\");\n        tut.setAuthor(\"Jaxb author\");\n        tutorials.getTutorial().add(tut);\n\n        try {\n            JAXBContext jaxbContext = JAXBContext.newInstance(Tutorials.class);\n            Marshaller jaxbMarshaller = jaxbContext.createMarshaller();\n\n            jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n\n            jaxbMarshaller.marshal(tutorials, file);\n\n        } catch (JAXBException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    public File getFile() {\n        return file;\n    }\n\n    public void setFile(File file) {\n        this.file = file;\n    }\n\n}\n", "test_case": "package com.baeldung.xml;\n\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.File;\n\nimport org.junit.Test;\n\nimport com.baeldung.xml.binding.Tutorials;\n\npublic class JaxbParserUnitTest {\n\n    final String fileName = \"src/test/resources/example_jaxb.xml\";\n\n    JaxbParser parser;\n\n    @Test\n    public void getFullDocumentTest() {\n        parser = new JaxbParser(new File(fileName));\n        Tutorials tutorials = parser.getFullDocument();\n\n        assertNotNull(tutorials);\n        assertTrue(tutorials.getTutorial().size() == 4);\n        assertTrue(tutorials.getTutorial().get(0).getType().equalsIgnoreCase(\"java\"));\n    }\n\n    @Test\n    public void createNewDocumentTest() {\n        File newFile = new File(\"src/test/resources/example_jaxb_new.xml\");\n        parser = new JaxbParser(newFile);\n        parser.createNewDocument();\n\n        assertTrue(newFile.exists());\n\n        Tutorials tutorials = parser.getFullDocument();\n\n        assertNotNull(tutorials);\n        assertTrue(tutorials.getTutorial().size() == 1);\n        assertTrue(tutorials.getTutorial().get(0).getTitle().equalsIgnoreCase(\"XML with Jaxb\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.xml;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.List;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\n\nimport org.jaxen.JaxenException;\nimport org.jaxen.XPath;\nimport org.jaxen.dom.DOMXPath;\nimport org.w3c.dom.Document;\nimport org.xml.sax.SAXException;\n\npublic class JaxenDemo {\n\n    private File file;\n\n    public JaxenDemo(File file) {\n        this.file = file;\n    }\n\n    public List getAllTutorial() {\n        try {\n            FileInputStream fileIS = new FileInputStream(this.getFile());\n            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n\n            DocumentBuilder builder = builderFactory.newDocumentBuilder();\n\n            Document xmlDocument = builder.parse(fileIS);\n\n            String expression = \"/tutorials/tutorial\";\n\n            XPath path = new DOMXPath(expression);\n            List result = path.selectNodes(xmlDocument);\n            return result;\n\n        } catch (SAXException | IOException | ParserConfigurationException | JaxenException e) {\n            e.printStackTrace();\n            return null;\n        }\n\n    }\n\n    public File getFile() {\n        return file;\n    }\n\n    public void setFile(File file) {\n        this.file = file;\n    }\n\n}\n", "test_case": "package com.baeldung.xml;\n\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.File;\nimport java.util.List;\n\nimport org.junit.Test;\n\npublic class JaxenDemoUnitTest {\n\n    final String fileName = \"src/test/resources/example_jaxen.xml\";\n\n    JaxenDemo jaxenDemo;\n\n    @Test\n    public void getFirstLevelNodeListTest() {\n        jaxenDemo = new JaxenDemo(new File(fileName));\n        List<?> list = jaxenDemo.getAllTutorial();\n\n        assertNotNull(list);\n        assertTrue(list.size() == 4);\n    }\n}\n"}
{"code_source": "package com.baeldung.xml;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.jdom2.Document;\nimport org.jdom2.Element;\nimport org.jdom2.JDOMException;\nimport org.jdom2.filter.Filters;\nimport org.jdom2.input.SAXBuilder;\nimport org.jdom2.xpath.XPathExpression;\nimport org.jdom2.xpath.XPathFactory;\n\npublic class JDomParser {\n\n    private File file;\n\n    public JDomParser(File file) {\n        this.file = file;\n    }\n\n    public List<Element> getAllTitles() {\n        try {\n            SAXBuilder builder = new SAXBuilder();\n            Document doc = builder.build(this.getFile());\n            Element tutorials = doc.getRootElement();\n            List<Element> titles = tutorials.getChildren(\"tutorial\");\n            return titles;\n        } catch (JDOMException | IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public Element getNodeById(String id) {\n        try {\n            SAXBuilder builder = new SAXBuilder();\n            Document document = (Document) builder.build(file);\n            String filter = \"//*[@tutId='\" + id + \"']\";\n            XPathFactory xFactory = XPathFactory.instance();\n            XPathExpression<Element> expr = xFactory.compile(filter, Filters.element());\n            List<Element> node = expr.evaluate(document);\n\n            return node.get(0);\n        } catch (JDOMException | IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public File getFile() {\n        return file;\n    }\n\n    public void setFile(File file) {\n        this.file = file;\n    }\n\n}\n", "test_case": "package com.baeldung.xml;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.File;\nimport java.util.List;\n\nimport org.jdom2.Element;\nimport org.junit.Test;\n\npublic class JDomParserUnitTest {\n\n    final String fileName = \"src/test/resources/example_jdom.xml\";\n\n    JDomParser parser;\n\n    @Test\n    public void getFirstElementListTest() {\n        parser = new JDomParser(new File(fileName));\n        List<Element> firstList = parser.getAllTitles();\n\n        assertNotNull(firstList);\n        assertTrue(firstList.size() == 4);\n        assertTrue(firstList.get(0).getAttributeValue(\"type\").equals(\"java\"));\n    }\n\n    @Test\n    public void getElementByIdTest() {\n        parser = new JDomParser(new File(fileName));\n        Element el = parser.getNodeById(\"03\");\n\n        String type = el.getAttributeValue(\"type\");\n        assertEquals(\"android\", type);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.xml;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\nimport javax.xml.transform.OutputKeys;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\n\nimport org.w3c.dom.Document;\n\npublic class XMLDocumentWriter {\n    \n    public void write(Document document, String fileName, boolean excludeDeclaration, boolean prettyPrint) {\n        try(FileWriter writer = new FileWriter(new File(fileName))) {\n            TransformerFactory transformerFactory = TransformerFactory.newInstance();\n            Transformer transformer = transformerFactory.newTransformer();\n            if(excludeDeclaration) {\n                transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n            }\n            if(prettyPrint) {\n                transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n                transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n            }\n            DOMSource source = new DOMSource(document);\n            StreamResult result = new StreamResult(writer);\n            transformer.transform(source, result);\n        } catch (IOException e) {\n            throw new IllegalArgumentException(e);\n        } catch (TransformerConfigurationException e) {\n            throw new IllegalStateException(e);\n        } catch (TransformerException e) {\n            throw new IllegalArgumentException(e);\n        }\n    }\n}\n", "test_case": "package com.baeldung.xml;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\n\nimport org.apache.commons.io.FileUtils;\nimport org.junit.After;\nimport org.junit.Test;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\nimport java.io.File;\n\npublic class XMLDocumentWriterUnitTest {\n\n    @Test\n    public void givenXMLDocumentWhenWriteIsCalledThenXMLIsWrittenToFile() throws Exception {\n        Document document = createSampleDocument();\n        new XMLDocumentWriter().write(document, \"company_simple.xml\", false, false);\n    }\n\n    @Test\n    public void givenXMLDocumentWhenWriteIsCalledWithPrettyPrintThenFormattedXMLIsWrittenToFile() throws Exception {\n        Document document = createSampleDocument();\n        new XMLDocumentWriter().write(document, \"company_prettyprinted.xml\", false, true);\n    }\n\n    private Document createSampleDocument() throws ParserConfigurationException {\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n        Document document = documentBuilder.newDocument();\n        Element companyElement = document.createElement(\"Company\");\n        document.appendChild(companyElement);\n        Element departmentElement = document.createElement(\"Department\");\n        departmentElement.setAttribute(\"name\", \"Sales\");\n        companyElement.appendChild(departmentElement);\n        Element employee1 = document.createElement(\"Employee\");\n        employee1.setAttribute(\"name\", \"John Smith\");\n        departmentElement.appendChild(employee1);\n        Element employee2 = document.createElement(\"Employee\");\n        employee2.setAttribute(\"name\", \"Tim Dellor\");\n        departmentElement.appendChild(employee2);\n        return document;\n    }\n\n    @After\n    public void cleanUp() throws Exception {\n        FileUtils.deleteQuietly(new File(\"company_simple.xml\"));\n        FileUtils.deleteQuietly(new File(\"company_prettyprinted.xml\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.xmlhtml.jaxp;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.xml.sax.SAXException;\n\nimport javax.xml.XMLConstants;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class JaxpTransformer {\n\n    private Document input;\n    private DocumentBuilderFactory factory;\n\n    public JaxpTransformer(String resourcePath) throws ParserConfigurationException, IOException, SAXException {\n        // 1- Build the doc from the XML file\n        factory = DocumentBuilderFactory.newInstance();\n        factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n        factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n        input = factory\n          .newDocumentBuilder()\n          .parse(resourcePath);\n    }\n\n    public String html() throws ParserConfigurationException, TransformerException, IOException {\n        Element xml = input.getDocumentElement();\n        Document doc = factory\n          .newDocumentBuilder()\n          .newDocument();\n        //Build Map\n        Map<String, String> map = buildMap(xml);\n        //Head\n        Element html = doc.createElement(\"html\");\n        html.setAttribute(\"lang\", \"en\");\n        Element head = buildHead(map, doc);\n        html.appendChild(head);\n        //Body\n        Element body = buildBody(map, doc);\n        html.appendChild(body);\n        doc.appendChild(html);\n        return String.format(\"<!DOCTYPE html>%n%s\", applyTransformation(doc));\n    }\n\n    private String applyTransformation(Document doc) throws TransformerException, IOException {\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n        transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n        transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n        transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\n        try (Writer output = new StringWriter()) {\n            Transformer transformer = transformerFactory.newTransformer();\n            transformer.transform(new DOMSource(doc), new StreamResult(output));\n            return output.toString();\n        }\n    }\n\n    private Map<String, String> buildMap(Element xml) {\n        Map<String, String> map = new HashMap<>();\n        map.put(\"heading\", xml\n          .getElementsByTagName(\"heading\")\n          .item(0)\n          .getTextContent());\n        map.put(\"from\", String.format(\"from: %s\", xml\n          .getElementsByTagName(\"from\")\n          .item(0)\n          .getTextContent()));\n        map.put(\"content\", xml\n          .getElementsByTagName(\"content\")\n          .item(0)\n          .getTextContent());\n        return map;\n    }\n\n    private Element buildHead(Map<String, String> map, Document doc) {\n        Element head = doc.createElement(\"head\");\n        Element title = doc.createElement(\"title\");\n        title.setTextContent(map.get(\"heading\"));\n        head.appendChild(title);\n        return head;\n    }\n\n    private Element buildBody(Map<String, String> map, Document doc) {\n        Element body = doc.createElement(\"body\");\n        Element from = doc.createElement(\"p\");\n        from.setTextContent(map.get(\"from\"));\n        Element success = doc.createElement(\"p\");\n        success.setTextContent(map.get(\"content\"));\n        body.appendChild(from);\n        body.appendChild(success);\n        return body;\n    }\n\n}\n", "test_case": "package com.baeldung.xmlhtml.jaxp;\n\nimport org.junit.jupiter.api.Test;\nimport org.xml.sax.SAXException;\n\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport java.io.IOException;\nimport java.net.URISyntaxException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class JaxpTransformerUnitTest {\n\n    @Test\n    public void givenXml_whenTransform_thenGetHtml() throws IOException, SAXException, ParserConfigurationException, TransformerException, URISyntaxException {\n        String path = getClass()\n          .getResource(\"/xmlhtml/notification.xml\")\n          .toString();\n        String expectedHtml = new String(Files.readAllBytes((Paths.get(getClass()\n          .getResource(\"/xmlhtml/notification.html\")\n          .toURI()))));\n        JaxpTransformer transformer = new JaxpTransformer(path);\n\n        String result = transformer\n          .html()\n          .replaceAll(\"(?m)^\\\\s+\", \"\");//Delete extra spaces added by Java 11\n\n        assertThat(result).isEqualTo(expectedHtml);\n    }\n}\n"}
{"code_source": "package com.baeldung.xmlhtml.freemarker;\n\nimport com.baeldung.xmlhtml.stax.StaxTransformer;\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\nimport freemarker.template.TemplateException;\nimport freemarker.template.TemplateExceptionHandler;\n\nimport javax.xml.stream.XMLStreamException;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.nio.charset.StandardCharsets;\n\npublic class FreemarkerTransformer {\n    private StaxTransformer staxTransformer;\n    private String templateDirectory;\n    private String templateFile;\n\n    public FreemarkerTransformer(StaxTransformer staxTransformer, String templateDirectory, String templateFile) {\n        this.staxTransformer = staxTransformer;\n        this.templateDirectory = templateDirectory;\n        this.templateFile = templateFile;\n    }\n\n    public String html() throws IOException, TemplateException {\n        Configuration cfg = new Configuration(Configuration.VERSION_2_3_29);\n        cfg.setDirectoryForTemplateLoading(new File(templateDirectory));\n        cfg.setDefaultEncoding(StandardCharsets.UTF_8.toString());\n        cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);\n        cfg.setLogTemplateExceptions(false);\n        cfg.setWrapUncheckedExceptions(true);\n        cfg.setFallbackOnNullLoopVariable(false);\n        Template temp = cfg.getTemplate(templateFile);\n        try (Writer output = new StringWriter()) {\n            temp.process(staxTransformer.getMap(), output);\n            return output.toString();\n        }\n    }\n}\n", "test_case": "package com.baeldung.xmlhtml.freemarker;\n\nimport com.baeldung.xmlhtml.stax.StaxTransformer;\nimport freemarker.template.TemplateException;\nimport org.junit.jupiter.api.Test;\n\nimport javax.xml.stream.XMLStreamException;\nimport java.io.IOException;\nimport java.net.URISyntaxException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class FreemarkerTransformerUnitTest {\n\n    @Test\n    public void givenXml_whenTransform_thenGetHtml() throws IOException, URISyntaxException, XMLStreamException, TemplateException {\n        String expectedHtml = new String(Files.readAllBytes((Paths.get(getClass()\n          .getResource(\"/xmlhtml/notification.html\")\n          .toURI()))));\n        StaxTransformer staxTransformer = new StaxTransformer(\"src/test/resources/xmlhtml/notification.xml\");\n        String templateFile = \"freemarker.html\";\n        String templateDirectory = \"src/test/resources/templates\";\n        FreemarkerTransformer transformer = new FreemarkerTransformer(staxTransformer, templateDirectory, templateFile);\n\n        String result = transformer.html();\n\n        assertThat(result).isEqualTo(expectedHtml);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.xmlhtml.mustache;\n\nimport com.baeldung.xmlhtml.stax.StaxTransformer;\nimport com.github.mustachejava.DefaultMustacheFactory;\nimport com.github.mustachejava.Mustache;\nimport com.github.mustachejava.MustacheFactory;\n\nimport javax.xml.stream.XMLStreamException;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\n\npublic class MustacheTransformer {\n    private StaxTransformer staxTransformer;\n    private String templateFile;\n\n    public MustacheTransformer(StaxTransformer staxTransformer, String templateFile) {\n        this.staxTransformer = staxTransformer;\n        this.templateFile = templateFile;\n    }\n\n    public String html() throws IOException {\n        MustacheFactory mf = new DefaultMustacheFactory();\n        Mustache mustache = mf.compile(templateFile);\n        try (Writer output = new StringWriter()) {\n            mustache.execute(output, staxTransformer.getMap());\n            output.flush();\n            return output.toString();\n        }\n    }\n}\n", "test_case": "package com.baeldung.xmlhtml.mustache;\n\nimport com.baeldung.xmlhtml.stax.StaxTransformer;\nimport org.junit.jupiter.api.Test;\n\nimport javax.xml.stream.XMLStreamException;\nimport java.io.IOException;\nimport java.net.URISyntaxException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class MustacheTransformerUnitTest {\n\n    @Test\n    public void givenXml_whenTransform_thenGetHtml() throws IOException, URISyntaxException, XMLStreamException {\n        String expectedHtml = new String(Files.readAllBytes((Paths.get(getClass()\n          .getResource(\"/xmlhtml/notification.html\")\n          .toURI()))));\n        StaxTransformer staxTransformer = new StaxTransformer(\"src/test/resources/xmlhtml/notification.xml\");\n        String templateFile = \"src/test/resources/templates/template.mustache\";\n        MustacheTransformer transformer = new MustacheTransformer(staxTransformer, templateFile);\n\n        String result = transformer.html();\n\n        assertThat(result).isEqualTo(expectedHtml);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.xmlhtml.stax;\n\nimport javax.xml.stream.*;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class StaxTransformer {\n\n    private Map<String, String> map;\n\n    public StaxTransformer(String resourcePath) throws IOException, XMLStreamException {\n        XMLInputFactory factory = XMLInputFactory.newInstance();\n        factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);\n        factory.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);\n        XMLStreamReader input = null;\n        try (FileInputStream file = new FileInputStream(resourcePath)) {\n            input = factory.createXMLStreamReader(file);\n            map = buildMap(input);\n        } finally {\n            if (input != null) {\n                input.close();\n            }\n        }\n    }\n\n    public String html() throws XMLStreamException, IOException {\n        try (Writer output = new StringWriter()) {\n            XMLStreamWriter writer = XMLOutputFactory\n              .newInstance()\n              .createXMLStreamWriter(output);\n            //Head\n            writer.writeDTD(\"<!DOCTYPE html>\");\n            writer.writeCharacters(String.format(\"%n\"));\n            writer.writeStartElement(\"html\");\n            writer.writeAttribute(\"lang\", \"en\");\n            writer.writeCharacters(String.format(\"%n\"));\n            writer.writeStartElement(\"head\");\n            writer.writeCharacters(String.format(\"%n\"));\n            writer.writeDTD(\"<META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\">\");\n            writer.writeCharacters(String.format(\"%n\"));\n            writer.writeStartElement(\"title\");\n            writer.writeCharacters(map.get(\"heading\"));\n            writer.writeEndElement();\n            writer.writeCharacters(String.format(\"%n\"));\n            writer.writeEndElement();\n            writer.writeCharacters(String.format(\"%n\"));\n            //Body\n            writer.writeStartElement(\"body\");\n            writer.writeCharacters(String.format(\"%n\"));\n            writer.writeStartElement(\"p\");\n            writer.writeCharacters(map.get(\"from\"));\n            writer.writeEndElement();\n            writer.writeCharacters(String.format(\"%n\"));\n            writer.writeStartElement(\"p\");\n            writer.writeCharacters(map.get(\"content\"));\n            writer.writeEndElement();\n            writer.writeCharacters(String.format(\"%n\"));\n            writer.writeEndElement();\n            writer.writeCharacters(String.format(\"%n\"));\n            writer.writeEndDocument();\n            writer.writeCharacters(String.format(\"%n\"));\n            writer.flush();\n            return output.toString();\n        }\n    }\n\n    private Map<String, String> buildMap(XMLStreamReader input) throws XMLStreamException {\n        Map<String, String> tempMap = new HashMap<>();\n        while (input.hasNext()) {\n            input.next();\n            if (input.isStartElement()) {\n                if (input\n                  .getLocalName()\n                  .equals(\"heading\")) {\n                    tempMap.put(\"heading\", input.getElementText());\n                }\n                if (input\n                  .getLocalName()\n                  .equals(\"from\")) {\n                    tempMap.put(\"from\", String.format(\"from: %s\", input.getElementText()));\n                }\n                if (input\n                  .getLocalName()\n                  .equals(\"content\")) {\n                    tempMap.put(\"content\", input.getElementText());\n                }\n            }\n        }\n        return tempMap;\n    }\n\n    public Map<String, String> getMap() {\n        return map;\n    }\n}\n", "test_case": "package com.baeldung.xmlhtml.stax;\n\nimport org.junit.jupiter.api.Test;\n\nimport javax.xml.stream.XMLStreamException;\nimport java.io.IOException;\nimport java.net.URISyntaxException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class StaxTransformerUnitTest {\n\n    @Test\n    public void givenXml_whenTransform_thenGetHtml() throws IOException, URISyntaxException, XMLStreamException {\n        String path = \"src/test/resources/xmlhtml/notification.xml\";\n        String expectedHtml = new String(Files.readAllBytes((Paths.get(getClass()\n          .getResource(\"/xmlhtml/notification.html\")\n          .toURI()))));\n        StaxTransformer transformer = new StaxTransformer(path);\n\n        String result = transformer.html();\n\n        assertThat(result).isEqualTo(expectedHtml);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.xml.validation;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXParseException;\n\nimport javax.xml.XMLConstants;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.stream.StreamSource;\nimport javax.xml.validation.Schema;\nimport javax.xml.validation.SchemaFactory;\nimport javax.xml.validation.Validator;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class XmlValidator {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(XmlValidator.class);\n\n    private String xsdPath;\n    private String xmlPath;\n\n    public XmlValidator(String xsdPath, String xmlPath) {\n        this.xsdPath = xsdPath;\n        this.xmlPath = xmlPath;\n    }\n\n    public boolean isValid() throws IOException, SAXException {\n        Validator validator = initValidator(xsdPath);\n        try {\n            validator.validate(new StreamSource(getFile(xmlPath)));\n            return true;\n        } catch (SAXException e) {\n            return false;\n        }\n    }\n\n    public List<SAXParseException> listParsingExceptions() throws IOException, SAXException {\n        XmlErrorHandler xsdErrorHandler = new XmlErrorHandler();\n        Validator validator = initValidator(xsdPath);\n        validator.setErrorHandler(xsdErrorHandler);\n        try {\n            validator.validate(new StreamSource(getFile(xmlPath)));\n        } catch (SAXParseException e) {}\n        xsdErrorHandler.getExceptions().forEach(e -> LOGGER.info(e.getMessage()));\n        return xsdErrorHandler.getExceptions();\n    }\n\n    private Validator initValidator(String xsdPath) throws SAXException {\n        SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n        Source schemaFile = new StreamSource(getFile(xsdPath));\n        Schema schema = factory.newSchema(schemaFile);\n        return schema.newValidator();\n    }\n\n    private File getFile(String location) {\n        return new File(getClass().getClassLoader().getResource(location).getFile());\n    }\n\n}\n", "test_case": "package com.baeldung.xml.validation;\n\nimport org.junit.jupiter.api.Test;\nimport org.xml.sax.SAXException;\nimport java.io.IOException;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass XmlValidatorUnitTest {\n\n    private static final String BAELDUNG_XML_PATH = \"xml/validation/baeldung.xml\";\n    private static final String PERSON_XSD_PATH = \"xml/validation/person.xsd\";\n    private static final String FULL_PERSON_XSD_PATH = \"xml/validation/full-person.xsd\";\n\n    @Test\n    public void givenValidXML_WhenIsValid_ThenTrue() throws IOException, SAXException {\n        assertTrue(new XmlValidator(PERSON_XSD_PATH, BAELDUNG_XML_PATH).isValid());\n    }\n\n    @Test\n    public void givenInvalidXML_WhenIsValid_ThenFalse() throws IOException, SAXException {\n        assertFalse(new XmlValidator(FULL_PERSON_XSD_PATH, BAELDUNG_XML_PATH).isValid());\n    }\n\n    @Test\n    public void givenValidXML_WhenListParsingExceptions_ThenNone() throws IOException, SAXException {\n        assertEquals(0, new XmlValidator(PERSON_XSD_PATH, BAELDUNG_XML_PATH).listParsingExceptions().size());\n    }\n\n    @Test\n    public void givenInvalidXML_WhenListParsingExceptions_ThenHasThree() throws IOException, SAXException {\n        assertEquals(3, new XmlValidator(FULL_PERSON_XSD_PATH, BAELDUNG_XML_PATH).listParsingExceptions().size());\n    }\n\n}\n"}
{"code_source": "public class MyClass1 {\n    public static boolean containsSubstring(String str, String substr) {\n\n        return str.contains(substr);\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass1Test {\n\n    @Test\n    public void testContainsSubstring() {\n        assertTrue(MyClass1.containsSubstring(\"Hello world\", \"Hello\"));\n        assertFalse(MyClass1.containsSubstring(\"Hello world\", \"hello\"));\n        assertTrue(MyClass1.containsSubstring(\"Hello world\", \"world\"));\n        assertFalse(MyClass1.containsSubstring(\"Hello world\", \"goodbye\"));\n        assertTrue(MyClass1.containsSubstring(\"12345\", \"34\"));\n    }\n}\n"}
{"code_source": "public class MyClass10 {\n    public static int secondLargest(int[] array) {\n        int largest = Integer.MIN_VALUE;\n        int secondLargest = Integer.MIN_VALUE;\n        for (int i = 0; i < array.length; i++) {\n            if (array[i] > largest) {\n                secondLargest = largest;\n                largest = array[i];\n            } else if (array[i] > secondLargest && array[i] != largest) {\n                secondLargest = array[i];\n            }\n        }\n        return secondLargest;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass9Test {\n\n    @Test\n    public void testTriangleArea() {\n        double a = 3.0;\n        double b = 4.0;\n        double c = 5.0;\n        double expected = 6.0;\n        double result = MyClass9.triangleArea(a, b, c);\n        assertEquals(expected, result, 0.0001);\n\n        a = 5.0;\n        b = 5.0;\n        c = 5.0;\n        expected = 10.8253;\n        result = MyClass9.triangleArea(a, b, c);\n        assertEquals(expected, result, 0.0001);\n\n        a = 10.0;\n        b = 12.0;\n        c = 15.0;\n        expected = 59.8117;\n        result = MyClass9.triangleArea(a, b, c);\n        assertEquals(expected, result, 0.0001);\n\n        a = 7.0;\n        b = 9.0;\n        c = 13.0;\n        expected = 26.4575;\n        result = MyClass9.triangleArea(a, b, c);\n        assertEquals(expected, result, 0.0001);\n    }\n}\n"}
{"code_source": "public class MyClass100 {\n\n\n        private ArrayList<Item> items;\n\n        public ShoppingCart() {\n            items = new ArrayList<Item>();\n        }\n\n        public void addItem(Item item) {\n            items.add(item);\n        }\n\n        public void removeItem(Item item) {\n            items.remove(item);\n        }\n\n        public double getTotalPrice() {\n            double totalPrice = 0;\n            for (Item item : items) {\n                totalPrice += item.getPrice();\n            }\n            return totalPrice;\n        }\n\n        public int getItemCount() {\n            return items.size();\n        }\n\n        public boolean containsItem(Item item) {\n            return items.contains(item);\n        }\n\n        public String toString() {\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"Shopping Cart:\\n\");\n            for (Item item : items) {\n                sb.append(\"- \" + item.getName() + \" (\" + item.getPrice() + \")\\n\");\n            }\n            sb.append(\"Total Price: \" + getTotalPrice());\n            return sb.toString();\n        }\n\n    }\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass100Test {\n\n    @Test\n    public void testAddItem() {\n        ShoppingCart cart = new ShoppingCart();\n        Item item1 = new Item(\"Item 1\", 10.0);\n        Item item2 = new Item(\"Item 2\", 20.0);\n        cart.addItem(item1);\n        cart.addItem(item2);\n        assertEquals(2, cart.getItemCount());\n        assertTrue(cart.containsItem(item1));\n        assertTrue(cart.containsItem(item2));\n    }\n\n    @Test\n    public void testRemoveItem() {\n        ShoppingCart cart = new ShoppingCart();\n        Item item1 = new Item(\"Item 1\", 10.0);\n        Item item2 = new Item(\"Item 2\", 20.0);\n        cart.addItem(item1);\n        cart.addItem(item2);\n        assertEquals(2, cart.getItemCount());\n        cart.removeItem(item1);\n        assertEquals(1, cart.getItemCount());\n        assertFalse(cart.containsItem(item1));\n        assertTrue(cart.containsItem(item2));\n    }\n\n    @Test\n    public void testGetTotalPrice() {\n        ShoppingCart cart = new ShoppingCart();\n        Item item1 = new Item(\"Item 1\", 10.0);\n        Item item2 = new Item(\"Item 2\", 20.0);\n        cart.addItem(item1);\n        cart.addItem(item2);\n        assertEquals(30.0, cart.getTotalPrice(), 0.01);\n    }\n\n    @Test\n    public void testToString() {\n        ShoppingCart cart = new ShoppingCart();\n        Item item1 = new Item(\"Item 1\", 10.0);\n        Item item2 = new Item(\"Item 2\", 20.0);\n        cart.addItem(item1);\n        cart.addItem(item2);\n        String expected = \"Shopping Cart:\\n\" +\n                \"- Item 1 (10.0)\\n\" +\n                \"- Item 2 (20.0)\\n\" +\n                \"Total Price: 30.0\";\n        assertEquals(expected, cart.toString());\n    }\n}\n"}
{"code_source": "public class MyClass101 {\n\n\n        private String type;\n        private double area;\n\n        public Shape(String type, double area) {\n            this.type = type;\n            this.area = area;\n        }\n\n        public String getType() {\n            return type;\n        }\n\n        public double getArea() {\n            return area;\n        }\n\n        public void setType(String type) {\n            this.type = type;\n        }\n\n        public void setArea(double area) {\n            this.area = area;\n        }\n\n        public boolean isLargerThan(Shape otherShape) {\n            return area > otherShape.getArea();\n        }\n\n        public boolean isSquare() {\n            return type.equals(\"square\") || type.equals(\"rectangle\") && isSquareRectangle();\n        }\n\n        private boolean isSquareRectangle() {\n            return area / 2 == area / 2.0;\n        }\n\n        public String toString() {\n            return \"Shape: \" + type + \", area: \" + area;\n        }\n\n\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass101Test {\n    @Test\n    public void testIsLargerThan() {\n        Shape shape1 = new Shape(\"circle\", 10.0);\n        Shape shape2 = new Shape(\"rectangle\", 20.0);\n        assertTrue(shape2.isLargerThan(shape1));\n        assertFalse(shape1.isLargerThan(shape2));\n    }\n\n    @Test\n    public void testIsSquare() {\n        Shape shape1 = new Shape(\"square\", 25.0);\n        Shape shape2 = new Shape(\"rectangle\", 20.0);\n        assertTrue(shape1.isSquare());\n        assertFalse(shape2.isSquare());\n    }\n\n    @Test\n    public void testToString() {\n        Shape shape1 = new Shape(\"circle\", 10.0);\n        assertEquals(\"Shape: circle, area: 10.0\", shape1.toString());\n    }\n}\n"}
{"code_source": "public class MyClass102 {\n\n\n        private String make;\n        private String model;\n        private int year;\n        private double fuelLevel;\n\n        public Car(String make, String model, int year) {\n            this.make = make;\n            this.model = model;\n            this.year = year;\n            this.fuelLevel = 0.0;\n        }\n\n        public String getMake() {\n            return make;\n        }\n\n        public String getModel() {\n            return model;\n        }\n\n        public int getYear() {\n            return year;\n        }\n\n        public double getFuelLevel() {\n            return fuelLevel;\n        }\n\n        public void setMake(String make) {\n            this.make = make;\n        }\n\n        public void setModel(String model) {\n            this.model = model;\n        }\n\n        public void setYear(int year) {\n            this.year = year;\n        }\n\n        public void addFuel(double amount) {\n            fuelLevel += amount;\n        }\n\n        public void drive(double distance) {\n            if (fuelLevel < distance / 20.0) {\n                System.out.println(\"Not enough fuel to drive that far\");\n            } else {\n                fuelLevel -= distance / 20.0;\n                System.out.println(\"Driving \" + distance + \" miles\");\n            }\n        }\n\n        public String toString() {\n            return year + \" \" + make + \" \" + model;\n        }\n\n    \n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class CarTest {\n\n    @Test\n    public void testAddFuel() {\n        Car car = new Car(\"Toyota\", \"Camry\", 2021);\n        car.addFuel(10.0);\n        assertEquals(10.0, car.getFuelLevel(), 0.01);\n    }\n\n    @Test\n    public void testDrive() {\n        Car car = new Car(\"Toyota\", \"Camry\", 2021);\n        car.addFuel(10.0);\n        car.drive(100.0);\n        assertEquals(5.0, car.getFuelLevel(), 0.01);\n    }\n\n    @Test\n    public void testDriveNotEnoughFuel() {\n        Car car = new Car(\"Toyota\", \"Camry\", 2021);\n        car.addFuel(5.0);\n        car.drive(100.0);\n        assertEquals(5.0, car.getFuelLevel(), 0.01);\n    }\n\n    @Test\n    public void testToString() {\n        Car car = new Car(\"Toyota\", \"Camry\", 2021);\n        assertEquals(\"2021 Toyota Camry\", car.toString());\n    }\n}\n"}
{"code_source": "import java.util.ArrayList;\n\npublic class MyClass103 {\n\n    private ArrayList<Posting> postingsList;\n\n    public MyClass103()\n    {\n        postingsList = new ArrayList<Posting>();\n    }\n\n    /**\n     * Add a posting to the postings list\n     * @param documentId The document Id of the posting to be added to the postings list\n     * @param inDocumentFreq The term frequency of the new posting\n     */\n    public void addPosting(int documentId, int inDocumentFreq)\n    {\n        Posting  newPosting = new Posting(documentId, inDocumentFreq);\n\n        /* Check if the new documentId is greater than the last in the postingsList.\n         * If so, add to the end.\n         * If not, insert in natural sort order\n         *    or increment frequency if posting already exists\n         *\n         * This guarantees the list will be sorted but still have constant-time insertion\n         *   when adding documents sequentially.\n         */\n        if (!(postingsList.isEmpty())\n                && postingsList.get(postingsList.size() - 1).getDocumentId() > documentId)\n        {\n            for (int i = 0; i < postingsList.size(); i++)\n            {\n                if (postingsList.get(i).getDocumentId() > documentId)\n                    postingsList.add(i, newPosting);\n                else if (postingsList.get(i).getDocumentId() == documentId)\n                    postingsList.get(i).addFrequency(inDocumentFreq);\n            }\n        }\n        else\n        {\n            postingsList.add(newPosting);\n        }\n    }\n\n    /**\n     * Update an individual posting\n     * @param documentId The document Id of the posting to be updated\n     * @param inDocumentFreq The term frequency to add\n     */\n    public void updatePosting(int documentId, int inDocumentFreq)\n    {\n        Posting newPosting = new Posting(documentId, inDocumentFreq);\n\n        int postingIndex = postingsList.indexOf(newPosting);\n        if (postingIndex == -1)\n        {\n            addPosting(documentId, inDocumentFreq);\n        }\n        else\n        {\n            postingsList.get(postingIndex).addFrequency(inDocumentFreq);\n        }\n    }\n\n    public void updatePosting(int documentID)\n    {\n        updatePosting(documentID, 1);\n    }\n\n    public int getFrequency()\n    {\n        return postingsList.size();\n    }\n\n    public Posting[] getPostings()\n    {\n        return postingsList.toArray(new Posting[0]);\n    }\n\n    public ArrayList<Posting> getPostingsAsArrayList()\n    {\n        return postingsList;\n    }\n\n\n}\n\n\n", "test_case": "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass MyClass103Test {\n\n    private MyClass103 myClass;\n\n    @BeforeEach\n    void setUp() {\n        myClass = new MyClass103();\n    }\n\n    @Test\n    void testAddPosting() {\n        myClass.addPosting(1, 2);\n        myClass.addPosting(3, 4);\n        myClass.addPosting(2, 3);\n        Posting[] postings = myClass.getPostings();\n        assertEquals(3, postings.length);\n        assertEquals(1, postings[0].getDocumentId());\n        assertEquals(2, postings[0].getFrequency());\n        assertEquals(2, postings[1].getDocumentId());\n        assertEquals(3, postings[1].getFrequency());\n        assertEquals(3, postings[2].getDocumentId());\n        assertEquals(4, postings[2].getFrequency());\n    }\n\n    @Test\n    void testUpdatePosting() {\n        myClass.addPosting(1, 2);\n        myClass.addPosting(2, 3);\n        myClass.updatePosting(2, 4);\n        Posting[] postings = myClass.getPostings();\n        assertEquals(2, postings.length);\n        assertEquals(1, postings[0].getDocumentId());\n        assertEquals(2, postings[0].getFrequency());\n        assertEquals(2, postings[1].getDocumentId());\n        assertEquals(7, postings[1].getFrequency());\n    }\n\n    @Test\n    void testUpdatePostingWithDocumentID() {\n        myClass.addPosting(1, 2);\n        myClass.updatePosting(1);\n        Posting[] postings = myClass.getPostings();\n        assertEquals(1, postings.length);\n        assertEquals(1, postings[0].getDocumentId());\n        assertEquals(3, postings[0].getFrequency());\n    }\n\n    @Test\n    void testGetFrequency() {\n        myClass.addPosting(1, 2);\n        myClass.addPosting(2, 3);\n        myClass.addPosting(3, 4);\n        assertEquals(3, myClass.getFrequency());\n    }\n\n    @Test\n    void testGetPostings() {\n        myClass.addPosting(1, 2);\n        myClass.addPosting(2, 3);\n        myClass.addPosting(3, 4);\n        Posting[] postings = myClass.getPostings();\n        assertEquals(3, postings.length);\n        assertEquals(1, postings[0].getDocumentId());\n        assertEquals(2, postings[0].getFrequency());\n        assertEquals(2, postings[1].getDocumentId());\n        assertEquals(3, postings[1].getFrequency());\n        assertEquals(3, postings[2].getDocumentId());\n        assertEquals(4, postings[2].getFrequency());\n    }\n\n    @Test\n    void testGetPostingsAsArrayList() {\n        myClass.addPosting(1, 2);\n        myClass.addPosting(2, 3);\n        myClass.addPosting(3, 4);\n        ArrayList<Posting> postings = myClass.getPostingsAsArrayList();\n        assertEquals(3, postings.size());\n        assertEquals(1, postings.get(0).getDocumentId());\n        assertEquals(2, postings.get(0).getFrequency());\n        assertEquals(2, postings.get(1).getDocumentId());\n        assertEquals(3, postings.get(1).getFrequency());\n        assertEquals(3, postings.get(2).getDocumentId());\n        assertEquals(4, postings.get(2).getFrequency());\n    }\n}\n"}
{"code_source": "\n\nimport java.util.ArrayList;\n\n\n\npublic class Test{\n\n    public static boolean checkIfEmpty(String data)\n    {\n        Boolean isNotEmpty = false;\n\n        if (data.length() == 0 || data.length() == 1)\n        {\n            isNotEmpty = true;\n        }\n\n        return isNotEmpty;\n    }\n\n\n    public static boolean validatePhoneNumber(String telephone)\n    {\n        Boolean valide = false;\n\n        // Phone number like 774741740 or +221774741740\n        String numberPattern = \"^[7]+[0-6-7-8]+[0-9]{7}|^[\\\"+\\\"2217]+[0-6-7-8]+[0-9]{7}\";\n\n        if(telephone.matches(numberPattern))\n        {\n\n            valide = true;\n        }\n\n        return valide;\n    }\n\n\n\n\n\n    public static boolean validateEmailAddress(String email)\n    {\n        Boolean valide = false;\n\n        String emailPattern = \"([^.@]+)(\\\\.[^.@]+)*@([^.@]+\\\\.)+([^.@]+)\";\n\n        if(email.matches(emailPattern))\n        {\n\n            valide = true;\n        }\n\n        return valide;\n    }\n\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class TestTest {\n\n    @Test\n    public void testCheckIfEmptyEmptyString() {\n        assertTrue(Test.checkIfEmpty(\"\"));\n    }\n\n    @Test\n    public void testCheckIfEmptyOneCharString() {\n        assertTrue(Test.checkIfEmpty(\" \"));\n    }\n\n    @Test\n    public void testCheckIfEmptyNonEmptyString() {\n        assertFalse(Test.checkIfEmpty(\"not empty\"));\n    }\n\n    @Test\n    public void testValidatePhoneNumberValid() {\n        assertTrue(Test.validatePhoneNumber(\"+221774741740\"));\n    }\n\n    @Test\n    public void testValidatePhoneNumberInvalid() {\n        assertFalse(Test.validatePhoneNumber(\"+2211234567\"));\n    }\n\n    @Test\n    public void testValidateEmailAddressValid() {\n        assertTrue(Test.validateEmailAddress(\"example@example.com\"));\n    }\n\n    @Test\n    public void testValidateEmailAddressInvalid() {\n        assertFalse(Test.validateEmailAddress(\"example@com\"));\n    }\n}\n"}
{"code_source": "import java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.image.ImageObserver;\n\n\npublic class MyClass105 {\n    int char_x, char_y;//\u0081@Ball's x-y coordinates.\n    final public int BALL_SIZE = 20;//\u0081@Ball's size.\n    int vx, vy;//\u0081@Ball's moving vector.\n    int BICHOUSEI = 22;\n    boolean changed = false;\n\n    Ball(int tmp_width, int tmp_height, int index){\n        //\u0081@Method to create balls.\n        create(tmp_width, tmp_height);\n    }\n\n    public void create(int SCREEN_WIDTH, int SCREEN_HEIGHT){\n        // Balls appear at random position. Moving vector is also at random.\n        char_x = (int)(Math.random() * SCREEN_WIDTH / 2 + SCREEN_WIDTH / 4);\n        char_y = (int)(Math.random() * SCREEN_HEIGHT / 2 + SCREEN_HEIGHT / 4);\n        vx = (int)((3 * Math.random() + 1) * Math.pow(-1, Math.ceil(Math.random() *  10)));\n        vy = (int)((3 * Math.random() + 1) * Math.pow(-1, Math.ceil(Math.random() *  10)));\n    }\n\n    public void move(int screen_width,int screen_height){\n        // Define the movement of the balls and balls reflect at borders.\n        if(char_x + BALL_SIZE / 2 > screen_width) vx *= -1;\n        if(char_y + BALL_SIZE / 2 > screen_height) vy *= -1;\n        if(char_x < BALL_SIZE / 2) vx *= -1;\n        if(char_y < BALL_SIZE / 2) vy *= -1;\n\n        char_x += vx;\n        char_y += vy;\n    }\n\n    void draw(ImageObserver io, Graphics g){\n        if(changed){\n            g.setColor(Color.BLUE);\n            g.fillOval(char_x - BALL_SIZE / 2, char_y - BALL_SIZE / 2, BALL_SIZE, BALL_SIZE);\n        }else{\n            g.setColor(Color.WHITE);\n            g.fillOval(char_x - BALL_SIZE / 2, char_y - BALL_SIZE / 2, BALL_SIZE, BALL_SIZE);\n        }\n    }\n\n    boolean isAtariClick(int bakuhatsu_epi_center_x,int bakuhatsu_epi_center_y,double bakuhatsu_radius){\n        if(Math.sqrt(Math.pow((bakuhatsu_epi_center_x - char_x), 2) + Math.pow((bakuhatsu_epi_center_y - BICHOUSEI - char_y), 2)) < ((bakuhatsu_radius + BALL_SIZE / 2) / 2)){\n            return true;\n        }else return false;\n    }\n\n    boolean isAtariBakuhatsu(int bakuhatsu_epi_center_x,int bakuhatsu_epi_center_y,double bakuhatsu_radius){\n        if(Math.sqrt(Math.pow((bakuhatsu_epi_center_x - char_x), 2) + Math.pow((bakuhatsu_epi_center_y - char_y), 2)) < ((bakuhatsu_radius + BALL_SIZE / 2) / 2)){\n            return true;\n        }else return false;\n    }\n\n}\n", "test_case": "import java.awt.Graphics;\nimport java.awt.image.ImageObserver;\nimport static org.junit.Assert.*;\nimport org.junit.Test;\n\npublic class MyClass105Test {\n\n    @Test\n    public void testMove() {\n        MyClass105 ball = new MyClass105(500, 500, 1);\n        ball.char_x = 10;\n        ball.char_y = 10;\n        ball.vx = 1;\n        ball.vy = 1;\n        ball.move(500, 500);\n        assertEquals(11, ball.char_x);\n        assertEquals(11, ball.char_y);\n    }\n\n    @Test\n    public void testIsAtariClick() {\n        MyClass105 ball = new MyClass105(500, 500, 1);\n        ball.char_x = 10;\n        ball.char_y = 10;\n        assertTrue(ball.isAtariClick(20, 20, 20));\n        assertFalse(ball.isAtariClick(100, 100, 20));\n    }\n\n    @Test\n    public void testIsAtariBakuhatsu() {\n        MyClass105 ball = new MyClass105(500, 500, 1);\n        ball.char_x = 10;\n        ball.char_y = 10;\n        assertTrue(ball.isAtariBakuhatsu(20, 20, 20));\n        assertFalse(ball.isAtariBakuhatsu(100, 100, 20));\n    }\n\n    @Test\n    public void testDraw() {\n        MyClass105 ball = new MyClass105(500, 500, 1);\n        Graphics g = null;\n        ImageObserver io = null;\n        ball.char_x = 10;\n        ball.char_y = 10;\n        ball.changed = false;\n        ball.draw(io, g);\n        ball.changed = true;\n        ball.draw(io, g);\n        // Check that the ball color changes from white to blue when \"changed\" is set to true\n        // Note: this test assumes that the default color is white and the changed color is blue\n        // You may need to update the test if the default color is different\n        assertEquals(ball.changed, true);\n    }\n}\n"}
{"code_source": "public class Employee {\n\n    private String name;\n    private int age;\n    private double salary;\n\n    // Constructor method to create an Employee object\n    public Employee(String name, int age, double salary) {\n        this.name = name;\n        this.age = age;\n        this.salary = salary;\n    }\n\n    // Method to get the name of the employee\n    public String getName() {\n        return this.name;\n    }\n\n    // Method to get the age of the employee\n    public int getAge() {\n        return this.age;\n    }\n\n    // Method to get the salary of the employee\n    public double getSalary() {\n        return this.salary;\n    }\n\n    // Method to give an employee a raise\n    public void giveRaise(double amount) {\n        this.salary += amount;\n    }\n\n    // Method to check if an employee is eligible for retirement\n    public boolean isEligibleForRetirement() {\n        return (this.age >= 65);\n    }\n}\n\n", "test_case": "import static org.junit.Assert.*;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class EmployeeTest {\n    private Employee employee;\n\n    @Before\n    public void setUp() {\n        employee = new Employee(\"John Doe\", 35, 50000);\n    }\n\n    @Test\n    public void testGetName() {\n        assertEquals(\"John Doe\", employee.getName());\n    }\n\n    @Test\n    public void testGetAge() {\n        assertEquals(35, employee.getAge());\n    }\n\n    @Test\n    public void testGetSalary() {\n        assertEquals(50000, employee.getSalary(), 0.001);\n    }\n\n    @Test\n    public void testGiveRaise() {\n        employee.giveRaise(10000);\n        assertEquals(60000, employee.getSalary(), 0.001);\n    }\n\n    @Test\n    public void testIsEligibleForRetirement() {\n        assertFalse(employee.isEligibleForRetirement());\n        Employee retiree = new Employee(\"Jane Smith\", 67, 60000);\n        assertTrue(retiree.isEligibleForRetirement());\n    }\n}\n"}
{"code_source": "public class Shape {\n\n    // Method to calculate the area of a rectangle\n    public int calculateRectangleArea(int length, int width) {\n        return length * width;\n    }\n\n    // Method to calculate the area of a circle\n    public double calculateCircleArea(double radius) {\n        return Math.PI * radius * radius;\n    }\n\n    // Method to check if a triangle is equilateral\n    public boolean isEquilateralTriangle(int side1, int side2, int side3) {\n        return (side1 == side2 && side2 == side3);\n    }\n\n    // Method to calculate the perimeter of a square\n    public int calculateSquarePerimeter(int sideLength) {\n        return 4 * sideLength;\n    }\n\n    // Method to calculate the volume of a cube\n    public int calculateCubeVolume(int sideLength) {\n        return sideLength * sideLength * sideLength;\n    }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\npublic class ShapeTest {\n\n    @Test\n    public void testCalculateRectangleArea() {\n        Shape shape = new Shape();\n        int length = 5;\n        int width = 10;\n        int expectedArea = 50;\n        int actualArea = shape.calculateRectangleArea(length, width);\n        assertEquals(expectedArea, actualArea);\n    }\n\n    @Test\n    public void testCalculateCircleArea() {\n        Shape shape = new Shape();\n        double radius = 5.0;\n        double expectedArea = 78.5398;\n        double actualArea = shape.calculateCircleArea(radius);\n        assertEquals(expectedArea, actualArea, 0.0001);\n    }\n\n    @Test\n    public void testIsEquilateralTriangle() {\n        Shape shape = new Shape();\n        int side1 = 3;\n        int side2 = 3;\n        int side3 = 3;\n        assertTrue(shape.isEquilateralTriangle(side1, side2, side3));\n    }\n\n    @Test\n    public void testCalculateSquarePerimeter() {\n        Shape shape = new Shape();\n        int sideLength = 5;\n        int expectedPerimeter = 20;\n        int actualPerimeter = shape.calculateSquarePerimeter(sideLength);\n        assertEquals(expectedPerimeter, actualPerimeter);\n    }\n\n    @Test\n    public void testCalculateCubeVolume() {\n        Shape shape = new Shape();\n        int sideLength = 5;\n        int expectedVolume = 125;\n        int actualVolume = shape.calculateCubeVolume(sideLength);\n        assertEquals(expectedVolume, actualVolume);\n    }\n}\n"}
{"code_source": "public class Employee {\n\n    private String name;\n    private int age;\n    private double salary;\n\n    // Constructor\n    public Employee(String name, int age, double salary) {\n        this.name = name;\n        this.age = age;\n        this.salary = salary;\n    }\n\n    // Getter methods\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    // Setter methods\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public void setSalary(double salary) {\n        this.salary = salary;\n    }\n\n    // Method to increase the salary of the employee by a given percentage\n    public void increaseSalary(double percentage) {\n        double increaseAmount = salary * percentage / 100;\n        salary += increaseAmount;\n    }\n\n    // Method to check if the employee is eligible for a promotion\n    public boolean isEligibleForPromotion() {\n        return (age >= 25 && salary >= 50000);\n    }\n\n    // Method to print the details of the employee to the console\n    public void printDetails() {\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"Age: \" + age);\n        System.out.println(\"Salary: \" + salary);\n    }\n}\n\n", "test_case": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass EmployeeTest {\n\n    @Test\n    void testEmployeeConstructor() {\n        Employee employee = new Employee(\"John Doe\", 30, 50000.0);\n        assertEquals(\"John Doe\", employee.getName());\n        assertEquals(30, employee.getAge());\n        assertEquals(50000.0, employee.getSalary(), 0.001);\n    }\n\n    @Test\n    void testIncreaseSalary() {\n        Employee employee = new Employee(\"Jane Smith\", 25, 60000.0);\n        employee.increaseSalary(10);\n        assertEquals(66000.0, employee.getSalary(), 0.001);\n    }\n\n    @Test\n    void testIsEligibleForPromotion() {\n        Employee employee1 = new Employee(\"Tom\", 20, 40000.0);\n        assertFalse(employee1.isEligibleForPromotion());\n\n        Employee employee2 = new Employee(\"Alice\", 30, 60000.0);\n        assertTrue(employee2.isEligibleForPromotion());\n    }\n\n    @Test\n    void testPrintDetails() {\n        Employee employee = new Employee(\"Bob\", 40, 70000.0);\n        String expectedOutput = \"Name: Bob\\nAge: 40\\nSalary: 70000.0\\n\";\n        assertEquals(expectedOutput, getOutputFromPrintDetails(employee));\n    }\n\n    // Helper method to capture the output from the printDetails method\n    private String getOutputFromPrintDetails(Employee employee) {\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        PrintStream printStream = new PrintStream(outputStream);\n        System.setOut(printStream);\n\n        employee.printDetails();\n\n        return outputStream.toString();\n    }\n}\n"}
{"code_source": "public class MyClass109 {\n\n}\n", "test_case": "import org.junit.Test;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class Employee_AddTest {\n\n    @Test\n    public void testCreateFile() throws IOException {\n        // create a temporary directory for testing\n        Path tempDir = Files.createTempDirectory(\"test\");\n        tempDir.toFile().deleteOnExit();\n\n        // set up input data\n        String input = \"1\\nJohn Doe\\nJohn Doe Sr.\\n555-5555\\njohndoe@example.com\\nManager\\n50000\";\n\n        // set up System.in to provide input\n        System.setIn(input.getBytes());\n\n        // create an instance of the class and call the method\n        Employee_Add employeeAdd = new Employee_Add();\n        employeeAdd.createFile();\n\n        // check that the file was created with the correct contents\n        File file = Paths.get(tempDir.toString(), \"file1.txt\").toFile();\n        assertTrue(file.exists());\n        String expectedContent = \"Employee ID:1\\n\" +\n                \"Employee Name     :John Doe\\n\" +\n                \"Father's Name     :John Doe Sr.\\n\" +\n                \"Employee Contact  :555-5555\\n\" +\n                \"Email Information :johndoe@example.com\\n\" +\n                \"Employee position :Manager\\n\" +\n                \"Employee Salary   :50000\";\n        String actualContent = Files.readString(file.toPath());\n        assertEquals(expectedContent, actualContent);\n    }\n}\n"}
{"code_source": "public class MyClass11 {\n    public static int binaryToDecimal(String binary) {\n        int decimal = 0;\n        for (int i = binary.length() - 1, j = 0; i >= 0; i--, j++) {\n            if (binary.charAt(i) == '1') {\n                decimal += Math.pow(2, j);\n            }\n        }\n        return decimal;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class MyClass11Test {\n\n    @Test\n    public void testBinaryToDecimal() {\n        assertEquals(0, MyClass11.binaryToDecimal(\"0\"));\n        assertEquals(1, MyClass11.binaryToDecimal(\"1\"));\n        assertEquals(2, MyClass11.binaryToDecimal(\"10\"));\n        assertEquals(3, MyClass11.binaryToDecimal(\"11\"));\n        assertEquals(4, MyClass11.binaryToDecimal(\"100\"));\n        assertEquals(5, MyClass11.binaryToDecimal(\"101\"));\n        assertEquals(6, MyClass11.binaryToDecimal(\"110\"));\n        assertEquals(7, MyClass11.binaryToDecimal(\"111\"));\n        assertEquals(8, MyClass11.binaryToDecimal(\"1000\"));\n        assertEquals(9, MyClass11.binaryToDecimal(\"1001\"));\n        assertEquals(10, MyClass11.binaryToDecimal(\"1010\"));\n        assertEquals(11, MyClass11.binaryToDecimal(\"1011\"));\n        assertEquals(12, MyClass11.binaryToDecimal(\"1100\"));\n        assertEquals(13, MyClass11.binaryToDecimal(\"1101\"));\n        assertEquals(14, MyClass11.binaryToDecimal(\"1110\"));\n        assertEquals(15, MyClass11.binaryToDecimal(\"1111\"));\n    }\n}\n"}
{"code_source": "public class MyClass110 {\n\n}\n", "test_case": ""}
{"code_source": "public class MyClass111 {\n\n\n        public static String reverse(String str) {\n            StringBuilder sb = new StringBuilder(str);\n            sb.reverse();\n            return sb.toString();\n        }\n\n        public static String toUpperCase(String str) {\n            return str.toUpperCase();\n        }\n\n        public static String toLowerCase(String str) {\n            return str.toLowerCase();\n        }\n\n        public static boolean contains(String str, String substr) {\n            return str.contains(substr);\n        }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass111Test {\n\n    @Test\n    public void testReverse() {\n        assertEquals(\"cba\", MyClass111.reverse(\"abc\"));\n        assertEquals(\"\", MyClass111.reverse(\"\"));\n        assertEquals(\"  edcba\", MyClass111.reverse(\"abcde  \"));\n    }\n\n    @Test\n    public void testToUpperCase() {\n        assertEquals(\"HELLO WORLD\", MyClass111.toUpperCase(\"hello world\"));\n        assertEquals(\"1234\", MyClass111.toUpperCase(\"1234\"));\n        assertEquals(\"\", MyClass111.toUpperCase(\"\"));\n    }\n\n    @Test\n    public void testToLowerCase() {\n        assertEquals(\"hello world\", MyClass111.toLowerCase(\"HELLO WORLD\"));\n        assertEquals(\"1234\", MyClass111.toLowerCase(\"1234\"));\n        assertEquals(\"\", MyClass111.toLowerCase(\"\"));\n    }\n\n    @Test\n    public void testContains() {\n        assertTrue(MyClass111.contains(\"hello world\", \"world\"));\n        assertFalse(MyClass111.contains(\"hello world\", \"goodbye\"));\n        assertTrue(MyClass111.contains(\"\", \"\"));\n    }\n}\n"}
{"code_source": "import java.util.*;\npublic class MyClass112{\n    public MyClass112(){\n        super();\n    }\n    //public static void main(String[] args){\n    public Map getRecords(){\n        Map someMap= new LinkedHashMap();\n\n        someMap.put(\"1\",\"c\");\n        someMap.put(\"2\",\"a\");\n        someMap.put(\"3\",\"b\");\n\n        List mapKeys = new ArrayList(someMap.keySet());\n        List mapValues = new ArrayList(someMap.values());\n\n        someMap.clear();\n\n        TreeSet sortedSet = new TreeSet(mapKeys);\n\n        Object[] sortedArray = sortedSet.toArray();\n\n        int size = sortedArray.length;\n\n        //a) Ascending sort\n\n        for (int i=0; i<size; i++){\n\n            //System.out.println(sortedArray[i]);\n            someMap.put(mapValues.get(mapKeys.indexOf(sortedArray[i])), sortedArray[i]);\n\n        }\n\n        System.out.println(someMap);\n\n        //someMap.clear();\n        return someMap;\n    }\n}\n\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.*;\n\npublic class MyClass112Test {\n\n    @Test\n    public void testGetRecords() {\n        MyClass112 obj = new MyClass112();\n        Map<String, String> expectedMap = new LinkedHashMap<>();\n        expectedMap.put(\"a\", \"2\");\n        expectedMap.put(\"b\", \"3\");\n        expectedMap.put(\"c\", \"1\");\n        assertEquals(expectedMap, obj.getRecords());\n    }\n}\n"}
{"code_source": "public class MyClass113 {\n\n}\n", "test_case": ""}
{"code_source": "public class MyClass114 {\n    public static int sum(int[] arr) {\n        int sum = 0;\n        for (int i : arr) {\n            sum += i;\n        }\n        return sum;\n    }\n\n    public static int findMax(int[] arr) {\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        return max;\n    }\n\n    public static int findMin(int[] arr) {\n        int min = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] < min) {\n                min = arr[i];\n            }\n        }\n        return min;\n    }\n\n    public static int[] sort(int[] arr) {\n        Arrays.sort(arr);\n        return arr;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass114Test {\n\n    @Test\n    public void testSum() {\n        int[] arr = {1, 2, 3, 4, 5};\n        int result = MyClass114.sum(arr);\n        assertEquals(15, result);\n    }\n\n    @Test\n    public void testFindMax() {\n        int[] arr = {3, 1, 4, 1, 5, 9, 2, 6, 5};\n        int result = MyClass114.findMax(arr);\n        assertEquals(9, result);\n    }\n\n    @Test\n    public void testFindMin() {\n        int[] arr = {3, 1, 4, 1, 5, 9, 2, 6, 5};\n        int result = MyClass114.findMin(arr);\n        assertEquals(1, result);\n    }\n\n    @Test\n    public void testSort() {\n        int[] arr = {3, 1, 4, 1, 5, 9, 2, 6, 5};\n        int[] result = MyClass114.sort(arr);\n        int[] expected = {1, 1, 2, 3, 4, 5, 5, 6, 9};\n        assertArrayEquals(expected, result);\n    }\n}\n\n"}
{"code_source": "\npublic class MyClass115 {\n    private final double re;   // the real part\n    private final double im;   // the imaginary part\n\n    // create a new object with the given real and imaginary parts\n    public MyClass115(double real, double imag) {\n        re = real;\n        im = imag;\n    }\n\n    // return a string representation of the invoking Complex object\n    @Override\n    public String toString() {\n        if (im == 0) return re + \"\";\n        if (re == 0) return im + \"i\";\n        if (im <  0) return re + \" - \" + (-im) + \"i\";\n        return re + \" + \" + im + \"i\";\n    }\n\n    // return abs/modulus/magnitude and angle/phase/argument\n    public double abs()   { return Math.hypot(re, im); }  // Math.sqrt(re*re + im*im)\n    public float abs2()   { return (float) Math.hypot(re, im); } // \u8a08\ufffd?\u6d6e\ufffd??\ufffd\ufffd?\u4e0b\ufffd?\u7d55\ufffd???\n    public double phase() { return Math.atan2(im, re); }  // between -pi and pi\n\n    // return a new Complex object whose value is (this + b)\n    public Complex plus(Complex b) {\n        Complex a = this;             // invoking object\n        double real = a.re + b.re;\n        double imag = a.im + b.im;\n        return new Complex(real, imag);\n    }\n\n    // return a new Complex object whose value is (this - b)\n    public Complex minus(Complex b) {\n        Complex a = this;\n        double real = a.re - b.re;\n        double imag = a.im - b.im;\n        return new Complex(real, imag);\n    }\n\n    // return a new Complex object whose value is (this * b)\n    public Complex times(Complex b) {\n        Complex a = this;\n        double real = a.re * b.re - a.im * b.im;\n        double imag = a.re * b.im + a.im * b.re;\n        return new Complex(real, imag);\n    }\n\n    // scalar multiplication\n    // return a new object whose value is (this * alpha)\n    public Complex times(double alpha) {\n        return new Complex(alpha * re, alpha * im);\n    }\n\n    // return a new Complex object whose value is the conjugate of this\n    public Complex conjugate() {  return new Complex(re, -im); }\n\n    // return a new Complex object whose value is the reciprocal of this\n    public Complex reciprocal() {\n        double scale = re*re + im*im;\n        return new Complex(re / scale, -im / scale);\n    }\n\n    // return the real or imaginary part\n    public double re() { return re; }\n    public double im() { return im; }\n\n    // return a / b\n    public Complex divides(Complex b) {\n        Complex a = this;\n        return a.times(b.reciprocal());\n    }\n\n    // return a new Complex object whose value is the complex exponential of this\n    public Complex exp() {\n        return new Complex(Math.exp(re) * Math.cos(im), Math.exp(re) * Math.sin(im));\n    }\n\n    // return a new Complex object whose value is the complex sine of this\n    public Complex sin() {\n        return new Complex(Math.sin(re) * Math.cosh(im), Math.cos(re) * Math.sinh(im));\n    }\n\n    // return a new Complex object whose value is the complex cosine of this\n    public Complex cos() {\n        return new Complex(Math.cos(re) * Math.cosh(im), -Math.sin(re) * Math.sinh(im));\n    }\n\n    // return a new Complex object whose value is the complex tangent of this\n    public Complex tan() {\n        return sin().divides(cos());\n    }\n\n\n\n    // a static version of plus\n    public static Complex plus(Complex a, Complex b) {\n        double real = a.re + b.re;\n        double imag = a.im + b.im;\n        Complex sum = new Complex(real, imag);\n        return sum;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass115Test {\n\n    @Test\n    public void testToString() {\n        MyClass115 c1 = new MyClass115(1, 2);\n        MyClass115 c2 = new MyClass115(-3.4, 5.6);\n        MyClass115 c3 = new MyClass115(0, -7);\n\n        assertEquals(\"1.0 + 2.0i\", c1.toString());\n        assertEquals(\"-3.4 + 5.6i\", c2.toString());\n        assertEquals(\"0.0 - 7.0i\", c3.toString());\n    }\n\n    @Test\n    public void testAbs() {\n        MyClass115 c1 = new MyClass115(3, 4);\n        MyClass115 c2 = new MyClass115(-2, 1);\n        MyClass115 c3 = new MyClass115(0, -6);\n\n        assertEquals(5.0, c1.abs(), 0.0001);\n        assertEquals(Math.sqrt(5), c2.abs(), 0.0001);\n        assertEquals(6.0, c3.abs(), 0.0001);\n    }\n\n    @Test\n    public void testPlus() {\n        MyClass115 c1 = new MyClass115(1, 2);\n        MyClass115 c2 = new MyClass115(-3.4, 5.6);\n        MyClass115 c3 = new MyClass115(0, -7);\n        MyClass115 c4 = new MyClass115(2, -2);\n\n        assertEquals(new MyClass115(-2.4, 7.6), c1.plus(c2));\n        assertEquals(new MyClass115(-3.4, -2.0), c2.plus(c3));\n        assertEquals(new MyClass115(2, -9), c1.plus(c3));\n        assertEquals(new MyClass115(3, 0), c1.plus(c4));\n    }\n}\n"}
{"code_source": "/*=====================================================================================*/\n/*Project : \t\tDataCollection App\n/*\ufffd\ufffd\ufffd\ufffd\\\ufffd\ufffdG\t\ufffd\ufffdData\ufffd\ufffd\ufffdo\ufffdi\ufffdB\ufffdz\n/*=====================================================================================*/\npackage smatch.com.DC;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class MyClass116 {\n    private List<Float> rawData;\n    public MyClass116(List<Float> data) {\n        this.rawData = data;\n    }\n    /* \ufffdp\ufffd\ufffdPeak\ufffd\u0269\u04bb\u076a\ufffd\ufffdo\ufffdi\ufffdB\ufffdz\ufffdA\ufffd\u0125\ufffdMoving Average */\n    public List<Float> movingAverage(List<Float> data) {\n        List<Float> result = new ArrayList<Float>();\n        for (int i = 0; i < data.size() - 4; i++) {\n            float temp = 0;\n            for (int j = i; j < i + 5; j++) {\n                temp += data.get(j);\n            }\n            result.add(temp / 5);\n        }\n        return result;\n    }\n    public List<Float> getMOA() {\n        return movingAverage(rawData);\n    }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class MyClass116Test {\n\n    @Test\n    public void testMovingAverage() {\n        List<Float> testData = new ArrayList<>();\n        testData.add(1.0f);\n        testData.add(2.0f);\n        testData.add(3.0f);\n        testData.add(4.0f);\n        testData.add(5.0f);\n\n        MyClass116 myClass = new MyClass116(testData);\n        List<Float> result = myClass.movingAverage(testData);\n\n        assertEquals(3, result.size());\n        assertEquals(3.0f, result.get(0), 0.01f);\n        assertEquals(4.0f, result.get(1), 0.01f);\n        assertEquals(5.0f, result.get(2), 0.01f);\n    }\n\n    @Test\n    public void testGetMOA() {\n        List<Float> testData = new ArrayList<>();\n        testData.add(1.0f);\n        testData.add(2.0f);\n        testData.add(3.0f);\n        testData.add(4.0f);\n        testData.add(5.0f);\n\n        MyClass116 myClass = new MyClass116(testData);\n        List<Float> result = myClass.getMOA();\n\n        assertEquals(3, result.size());\n        assertEquals(3.0f, result.get(0), 0.01f);\n        assertEquals(4.0f, result.get(1), 0.01f);\n        assertEquals(5.0f, result.get(2), 0.01f);\n    }\n}\n"}
{"code_source": "public class MyClass117 {\n\n}\n/*=====================================================================================*/\n/*Project : \t\tDataCollection App\n/*\ufffd\ufffd\ufffd\ufffd\\\ufffd\ufffdG\t\ufffd\u05b3t\ufffd\u0165\u07f8\ufffd\ufffd\u0d2b\n/*\ufffd\ufffd\ufffdp\ufffd\u026e\u05e1G\tComplex.java\n/*=====================================================================================*/\n\n\npublic class MyClass117 {\n\n    // compute the FFT of x[], assuming its length is a power of 2\n    public static Complex[] fft(Complex[] x) {\n        int N = x.length;\n\n        // base case\n        if (N == 1) return new Complex[] { x[0] };\n\n        // radix 2 Cooley-Tukey FFT\n        if (N % 2 != 0) { throw new RuntimeException(\"N is not a power of 2\"); }\n\n        // fft of even terms\n        Complex[] even = new Complex[N/2];\n        for (int k = 0; k < N/2; k++) {\n            even[k] = x[2*k];\n        }\n        Complex[] q = fft(even);\n\n        // fft of odd terms\n        Complex[] odd  = even;  // reuse the array\n        for (int k = 0; k < N/2; k++) {\n            odd[k] = x[2*k + 1];\n        }\n        Complex[] r = fft(odd);\n\n        // combine\n        Complex[] y = new Complex[N];\n        for (int k = 0; k < N/2; k++) {\n            double kth = -2 * k * Math.PI / N;\n            Complex wk = new Complex(Math.cos(kth), Math.sin(kth));\n            y[k]       = q[k].plus(wk.times(r[k]));\n            y[k + N/2] = q[k].minus(wk.times(r[k]));\n        }\n        return y;\n    }\n\n\n    // compute the inverse FFT of x[], assuming its length is a power of 2\n    public static Complex[] ifft(Complex[] x) {\n        int N = x.length;\n        Complex[] y = new Complex[N];\n\n        // take conjugate\n        for (int i = 0; i < N; i++) {\n            y[i] = x[i].conjugate();\n        }\n\n        // compute forward FFT\n        y = fft(y);\n\n        // take conjugate again\n        for (int i = 0; i < N; i++) {\n            y[i] = y[i].conjugate();\n        }\n\n        // divide by N\n        for (int i = 0; i < N; i++) {\n            y[i] = y[i].times(1.0 / N);\n        }\n\n        return y;\n\n    }\n\n    // compute the circular convolution of x and y\n    public static Complex[] cconvolve(Complex[] x, Complex[] y) {\n\n        // should probably pad x and y with 0s so that they have same length\n        // and are powers of 2\n        if (x.length != y.length) { throw new RuntimeException(\"Dimensions don't agree\"); }\n\n        int N = x.length;\n\n        // compute FFT of each sequence\n        Complex[] a = fft(x);\n        Complex[] b = fft(y);\n\n        // point-wise multiply\n        Complex[] c = new Complex[N];\n        for (int i = 0; i < N; i++) {\n            c[i] = a[i].times(b[i]);\n        }\n\n        // compute inverse FFT\n        return ifft(c);\n    }\n\n\n    // compute the linear convolution of x and y\n    public static Complex[] convolve(Complex[] x, Complex[] y) {\n        Complex ZERO = new Complex(0, 0);\n\n        Complex[] a = new Complex[2*x.length];\n        for (int i = 0;        i <   x.length; i++) a[i] = x[i];\n        for (int i = x.length; i < 2*x.length; i++) a[i] = ZERO;\n\n        Complex[] b = new Complex[2*y.length];\n        for (int i = 0;        i <   y.length; i++) b[i] = y[i];\n        for (int i = y.length; i < 2*y.length; i++) b[i] = ZERO;\n\n        return cconvolve(a, b);\n    }\n\n    // display an array of Complex numbers to standard output\n    public static void show(Complex[] x, String title) {\n        System.out.println(title);\n        System.out.println(\"-------------------\");\n        for (int i = 0; i < x.length; i++) {\n            System.out.println(x[i]);\n        }\n        System.out.println();\n    }\n\n}\n\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass117Test {\n\n    @Test\n    public void testFFT() {\n        // test with a simple input\n        Complex[] x = new Complex[] {new Complex(1, 0), new Complex(0, 0), new Complex(0, 0), new Complex(0, 0)};\n        Complex[] y = MyClass117.fft(x);\n        Complex[] expected = new Complex[] {new Complex(1, 0), new Complex(1, 0), new Complex(1, 0), new Complex(1, 0)};\n        assertArrayEquals(expected, y);\n    }\n\n    @Test\n    public void testIFFT() {\n        // test with a simple input\n        Complex[] x = new Complex[] {new Complex(1, 0), new Complex(1, 0), new Complex(1, 0), new Complex(1, 0)};\n        Complex[] y = MyClass117.ifft(x);\n        Complex[] expected = new Complex[] {new Complex(1, 0), new Complex(0, 0), new Complex(0, 0), new Complex(0, 0)};\n        assertArrayEquals(expected, y);\n    }\n\n    @Test\n    public void testCConvolve() {\n        // test with a simple input\n        Complex[] x = new Complex[] {new Complex(1, 0), new Complex(2, 0), new Complex(3, 0)};\n        Complex[] y = new Complex[] {new Complex(0, 1), new Complex(0, 2), new Complex(0, 3)};\n        Complex[] z = MyClass117.cconvolve(x, y);\n        Complex[] expected = new Complex[] {new Complex(-3, 3), new Complex(-6, 6), new Complex(-9, 9)};\n        assertArrayEquals(expected, z);\n    }\n\n    @Test\n    public void testConvolve() {\n        // test with a simple input\n        Complex[] x = new Complex[] {new Complex(1, 0), new Complex(2, 0), new Complex(3, 0)};\n        Complex[] y = new Complex[] {new Complex(0, 1), new Complex(0, 2), new Complex(0, 3)};\n        Complex[] z = MyClass117.convolve(x, y);\n        Complex[] expected = new Complex[] {new Complex(0, 1), new Complex(0, 2), new Complex(0, 3), new Complex(0, 2), new Complex(0, 4), new Complex(0, 6), new Complex(0, 3), new Complex(0, 6), new Complex(0, 9)};\n        assertArrayEquals(expected, z);\n    }\n\n}\n"}
{"code_source": "public class MyClass118 {\n    private List<Item> items;\n\n    public ShoppingCart() {\n        this.items = new ArrayList<Item>();\n    }\n\n    public void addItem(Item item) {\n        this.items.add(item);\n    }\n\n    public void removeItem(Item item) {\n        this.items.remove(item);\n    }\n\n    public double getTotalPrice() {\n        double totalPrice = 0.0;\n        for (Item item : this.items) {\n            totalPrice += item.getPrice();\n        }\n        return totalPrice;\n    }\n\n    public void printReceipt() {\n        System.out.println(\"ITEMS:\");\n        for (Item item : this.items) {\n            System.out.println(\"- \" + item.getName() + \": $\" + item.getPrice());\n        }\n        System.out.println(\"TOTAL PRICE: $\" + getTotalPrice());\n    }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass118Test {\n\n    @Test\n    public void testAddItem() {\n        ShoppingCart cart = new ShoppingCart();\n        Item item = new Item(\"apple\", 0.99);\n        cart.addItem(item);\n        assertEquals(1, cart.getItems().size());\n    }\n\n    @Test\n    public void testRemoveItem() {\n        ShoppingCart cart = new ShoppingCart();\n        Item item = new Item(\"apple\", 0.99);\n        cart.addItem(item);\n        cart.removeItem(item);\n        assertEquals(0, cart.getItems().size());\n    }\n\n    @Test\n    public void testGetTotalPrice() {\n        ShoppingCart cart = new ShoppingCart();\n        Item item1 = new Item(\"apple\", 0.99);\n        Item item2 = new Item(\"banana\", 1.49);\n        cart.addItem(item1);\n        cart.addItem(item2);\n        assertEquals(2.48, cart.getTotalPrice(), 0.01);\n    }\n\n    @Test\n    public void testPrintReceipt() {\n        ShoppingCart cart = new ShoppingCart();\n        Item item1 = new Item(\"apple\", 0.99);\n        Item item2 = new Item(\"banana\", 1.49);\n        cart.addItem(item1);\n        cart.addItem(item2);\n\n        final String expectedReceipt = \"ITEMS:\\n- apple: $0.99\\n- banana: $1.49\\nTOTAL PRICE: $2.48\\n\";\n\n        // Capture the console output\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        // Call the method to be tested\n        cart.printReceipt();\n\n        // Assert the console output matches the expected output\n        assertEquals(expectedReceipt, outContent.toString());\n    }\n}\n"}
{"code_source": "\nclass Employee_Show\n{\n    public void viewFile(String s) throws Exception\n    {\n        File file = new File(\"file\"+s+\".txt\");\n        Scanner sc = new Scanner(file);\n\n        while (sc.hasNextLine())\n        {\n            System.out.println(sc.nextLine());\n        }\n    }\n}", "test_case": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.PrintStream;\nimport java.util.Scanner;\n\npublic class Employee_ShowTest {\n    @Test\n    public void testViewFile() throws Exception {\n        // Redirect standard output to a byte array stream to capture output\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outputStream));\n\n        // Create a temporary file for testing\n        String testFileName = \"testFile.txt\";\n        File testFile = new File(testFileName);\n        testFile.createNewFile();\n        String testFileContent = \"Test content.\";\n        FileUtil.writeToFile(testFile, testFileContent);\n\n        // Call the method being tested with the name of the temporary file\n        Employee_Show employeeShow = new Employee_Show();\n        employeeShow.viewFile(testFileName);\n\n        // Check that the output matches the expected content of the file\n        String expectedOutput = testFileContent + System.lineSeparator();\n        Assertions.assertEquals(expectedOutput, outputStream.toString());\n\n        // Clean up the temporary file\n        testFile.delete();\n    }\n}\n"}
{"code_source": "public class MyClass12 {\n    public static boolean isPangram(String str) {\n        str = str.toLowerCase();\n        for (char ch = 'a'; ch <= 'z'; ch++) {\n            if (!str.contains(String.valueOf(ch))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass12Test {\n    \n    @Test\n    public void testIsPangram() {\n        assertTrue(MyClass12.isPangram(\"The quick brown fox jumps over the lazy dog\"));\n        assertTrue(MyClass12.isPangram(\"Pack my box with five dozen liquor jugs\"));\n        assertFalse(MyClass12.isPangram(\"Hello, World!\"));\n        assertFalse(MyClass12.isPangram(\"abcdefghijklmnopqrstuvwxyz\"));\n        assertFalse(MyClass12.isPangram(\"\"));\n    }\n}\n"}
{"code_source": "import java.util.*;\npublic class MyClass120{\n    public MyClass120(){\n        super();\n    }\n    //public static void main(String[] args){\n    public Map getRecords(){\n        Map someMap= new LinkedHashMap();\n\n        someMap.put(\"1\",\"c\");\n        someMap.put(\"2\",\"a\");\n        someMap.put(\"3\",\"b\");\n\n        List mapKeys = new ArrayList(someMap.keySet());\n        List mapValues = new ArrayList(someMap.values());\n\n        someMap.clear();\n\n        TreeSet sortedSet = new TreeSet(mapKeys);\n\n        Object[] sortedArray = sortedSet.toArray();\n\n        int size = sortedArray.length;\n\n        //a) Ascending sort\n\n        for (int i=0; i<size; i++){\n\n            //System.out.println(sortedArray[i]);\n            someMap.put(mapValues.get(mapKeys.indexOf(sortedArray[i])), sortedArray[i]);\n\n        }\n\n        System.out.println(someMap);\n\n\n\n        //someMap.clear();\n        return someMap;\n    }\n}\n\n", "test_case": "import java.util.*;\nimport org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class MyClass120Test {\n\n    @Test\n    public void testGetRecordsAscendingSort() {\n        MyClass120 myClass = new MyClass120();\n\n        Map<String, String> expectedMap = new LinkedHashMap<>();\n        expectedMap.put(\"a\", \"2\");\n        expectedMap.put(\"b\", \"3\");\n        expectedMap.put(\"c\", \"1\");\n\n        Map<String, String> actualMap = myClass.getRecords();\n\n        assertEquals(expectedMap, actualMap);\n    }\n\n}\n"}
{"code_source": "public class MyClass121 {\n    private static MessageDigest sMd5MessageDigest;\n    private static StringBuilder sStringBuilder;\n\n    static {\n        try {\n            sMd5MessageDigest = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            // TODO Cyril: I'm quite sure about my \"MD5\" algorithm\n            // but this is not a correct way to handle an exception ...\n        }\n        sStringBuilder = new StringBuilder();\n    }\n\n    private MyClass121 () {\n    }\n\n    public static String md5(String s) {\n\n        sMd5MessageDigest.reset();\n        sMd5MessageDigest.update(s.getBytes());\n\n        byte digest[] = sMd5MessageDigest.digest();\n\n        sStringBuilder.setLength(0);\n        for (int i = 0; i < digest.length; i++) {\n            final int b = digest[i] & 255;\n            if (b < 16) {\n                sStringBuilder.append('0');\n            }\n            sStringBuilder.append(Integer.toHexString(b));\n        }\n\n        return sStringBuilder.toString();\n    }\n}\n", "test_case": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nclass MyClass121Test {\n\n    @Test\n    void testMd5() {\n        String input = \"Hello, world!\";\n        String expectedOutput = \"86fb269d190d2c85f6e0468ceca42a20\";\n        String actualOutput = MyClass121.md5(input);\n        Assertions.assertEquals(expectedOutput, actualOutput);\n    }\n}\n"}
{"code_source": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Random;\n\n\npublic class MyClass122 {\n\n\n    int randNumber;\n    int guess = 0;\n    int counter = 0;\n    private int GUESS_CONDITION=0;\n    private String view;\n    Random rand;\n    private String msg;\n    private String name;\n//\tprivate boolean nameStatus;\n\n    public MyClass122(){\n        init();\n    }\n    public void init(){\n        rand = new Random();\n        randNumber = rand.nextInt(100);\n\n        counter = 0;\n        //setGUESS_CONDITION(1);\n    }\n\n    public int getGuess() {\n        return guess;\n    }\n    public void setGuess(int guess) {\n        this.guess = guess;\n        counter++;\n    }\n\n\n\n    // check the guess\n    public String getMsg(){\n        if(guess == randNumber){\n            msg = \"Number of tries: \"+counter;\n            setGUESS_CONDITION(2);\n            try {\n                saveRecords();\n            } catch (IOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            init();\n        }\n        else if(randNumber<guess){\n            msg = \"smaller than => Number of tries: \"+counter;\n        }\n        else if(randNumber>guess){\n            msg = \"grater than => Number of tries: \"+counter;\n            setGUESS_CONDITION(3);\n        }\n        return msg;\n    }\n    public int getCounter() {\n        return counter;\n    }\n\n    // vie getter and setter\n\n    public String getView() {\n        return view;\n    }\n    public void setView(String view) {\n        this.view = view;\n    }\n    public int getGUESS_CONDITION() {\n        return GUESS_CONDITION;\n    }\n    public void setGUESS_CONDITION(int guess_condition) {\n        GUESS_CONDITION = guess_condition;\n    }\n    // scores\n    public void scores(){\n\n    }\n    public void setName(String name) {\n        this.name = name;\n\n    }\n    public String getName(){\n        return name;\n    }\n\n\n    public void saveRecords() throws IOException{\n        String filePath = \"gameResult.txt\";\n        File file = new File(filePath);\n        BufferedWriter output = new BufferedWriter(new FileWriter(file,true));\n        output.write(this.getName()+\" \"+this.getCounter()+\"\\n\");\n        output.close();\n    }\n\n}\n\n", "test_case": "import static org.junit.Assert.*;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class MyClass122Test {\n\n    private MyClass122 game;\n\n    @Before\n    public void setUp() {\n        game = new MyClass122();\n        game.setName(\"John\");\n    }\n\n    @Test\n    public void testGuessNumber() throws IOException {\n        // guess the correct number\n        game.setGuess(game.randNumber);\n        String result = game.getMsg();\n        assertEquals(\"Number of tries: 1\", result);\n\n        // read the file to check if the result was saved\n        BufferedReader reader = new BufferedReader(new FileReader(\"gameResult.txt\"));\n        String line = null;\n        boolean found = false;\n        Pattern pattern = Pattern.compile(\"^John\\\\s+(\\\\d+)$\");\n        while ((line = reader.readLine()) != null) {\n            Matcher matcher = pattern.matcher(line);\n            if (matcher.find()) {\n                int tries = Integer.parseInt(matcher.group(1));\n                assertEquals(1, tries);\n                found = true;\n                break;\n            }\n        }\n        reader.close();\n        assertTrue(\"Result not found in file\", found);\n\n        // guess a number higher than the random number\n        game.setGuess(game.randNumber + 1);\n        result = game.getMsg();\n        assertEquals(\"smaller than => Number of tries: 2\", result);\n\n        // guess a number lower than the random number\n        game.setGuess(game.randNumber - 1);\n        result = game.getMsg();\n        assertEquals(\"grater than => Number of tries: 3\", result);\n    }\n\n}\n"}
{"code_source": "package BackendCode;\n\nimport java.io.Serializable;\n\n/**\n *\n * @author @AbdullahShahid01\n */\npublic abstract class MyClass123 implements Serializable {\n\n    protected int ID;\n    protected String CNIC, Name, Contact_No;\n\n    public MyClass123() {\n    }\n    public Person(int ID, String CNIC, String Name, String Contact_No) {\n        this.ID = ID;\n        this.CNIC = CNIC;\n        this.Name = Name;\n        this.Contact_No = Contact_No;\n    }\n    public int getID() {\n        return ID;\n    }\n    public void setID(int ID) {\n        this.ID = ID;\n    }\n    public String getCNIC() {\n        return CNIC;\n    }\n    public void setCNIC(String CNIC) {\n        this.CNIC = CNIC;\n    }\n    public String getName() {\n        return Name;\n    }\n    public void setName(String Name) {\n        this.Name = Name;\n    }\n    public String getContact_No() {\n        return Contact_No;\n    }\n    public void setContact_No(String Contact_No) {\n        this.Contact_No = Contact_No;\n    }\n    public abstract void Add();\n    public abstract void Update();\n    public abstract void Remove();\n    @Override\n    public String toString() {\n        return \"Person_new{\" + \"ID=\" + ID + \", CNIC=\" + CNIC + \", Name=\" + Name + \", Contact_No=\" + Contact_No + '}';\n    }\n    /**\n     * A valid CNIC consists of 13 characters, only digits.\n     * @param cnic, The CNIC whose validity is to be checked\n     * @return true if the passed CNIC is valid\n     */\n    public static boolean isCNICValid(String cnic) {\n        boolean flag = true;\n        if (cnic.length() == 13) {\n            for (int i = 0; i < cnic.length(); i++) {\n                if (!Character.isDigit(cnic.charAt(i))) {\n                    flag = false;\n                    break;\n                }\n            }\n        } else {\n            flag = false;\n        }\n        return flag;\n    }\n    /**\n     * A valid Contact No. has 11 digits and starts with \"03\"\n     * @param contact\n     * @return true if the contact is valid\n     */\n    public static boolean isContactNoValid(String contact) {\n        boolean flag = true;\n        if (contact.length() == 11) {\n            if (contact.substring(0, 2).equals(\"03\")) {\n                for (int i = 0; i < contact.length(); i++) {\n                    if (!Character.isDigit(contact.charAt(i))) {\n                        flag = false;\n                        break;\n                    }\n                }\n            } else {\n                flag = false;\n            }\n        } else {\n            flag = false;\n        }\n        return flag;\n    }\n    /**\n     * A valid name can contain only letters and white spaces\n     * @param Name\n     * @return true if the name is valid\n     */\n    public static boolean isNameValid(String Name) {\n        boolean flag = false;\n        for (int i = 0; i < Name.length(); i++) {\n//            Name can contain white spaces\n            if (Character.isLetter(Name.charAt(i)) | Name.charAt(i) == ' ') {\n                flag = true;\n            } else {\n                flag = false;\n                break;\n            }\n        }\n        return flag;\n    }\n    /**\n     * A valid ID can only be digit greater than 0\n     * @param ID\n     * @return true if the ID is valid\n     */\n    public static boolean isIDvalid(String ID) {\n        boolean flag = true;\n        for (int i = 0; i < ID.length(); i++) {\n            if (!Character.isDigit(ID.charAt(i))) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag) {\n            if (Integer.parseInt(ID) <= 0) {\n                flag = false;\n            }\n        }\n        return flag;\n    }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass123Test {\n\n    @Test\n    public void testIsCNICValid() {\n        assertTrue(MyClass123.isCNICValid(\"1234567890123\"));\n        assertFalse(MyClass123.isCNICValid(\"123456789012\"));\n        assertFalse(MyClass123.isCNICValid(\"abcdefghijkmn\"));\n    }\n\n    @Test\n    public void testIsContactNoValid() {\n        assertTrue(MyClass123.isContactNoValid(\"03331234567\"));\n        assertFalse(MyClass123.isContactNoValid(\"0321123456\"));\n        assertFalse(MyClass123.isContactNoValid(\"12345678901\"));\n    }\n\n    @Test\n    public void testIsNameValid() {\n        assertTrue(MyClass123.isNameValid(\"John Smith\"));\n        assertTrue(MyClass123.isNameValid(\"Mary Jane\"));\n        assertFalse(MyClass123.isNameValid(\"John Doe123\"));\n    }\n\n    @Test\n    public void testIsIDvalid() {\n        assertTrue(MyClass123.isIDvalid(\"12345\"));\n        assertFalse(MyClass123.isIDvalid(\"-12345\"));\n        assertFalse(MyClass123.isIDvalid(\"abcde\"));\n    }\n\n}\n"}
{"code_source": "import java.util.ArrayList;\n\npublic class MyClass124 {\n\n    // Method to add elements to an ArrayList\n    public static ArrayList<Integer> addElements(ArrayList<Integer> list, int n) {\n        for (int i = 1; i <= n; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n\n    // Method to remove elements from an ArrayList\n    public static ArrayList<Integer> removeElements(ArrayList<Integer> list, int n) {\n        for (int i = 1; i <= n; i++) {\n            list.remove(list.size()-1);\n        }\n        return list;\n    }\n\n    // Method to find the sum of elements in an ArrayList\n    public static int sumElements(ArrayList<Integer> list) {\n        int sum = 0;\n        for (int i : list) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n\n", "test_case": "import static org.junit.Assert.*;\nimport java.util.ArrayList;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class MyClass124Test {\n\n    private ArrayList<Integer> list;\n\n    @Before\n    public void setUp() {\n        list = new ArrayList<>();\n    }\n\n    @Test\n    public void testAddElements() {\n        MyClass124.addElements(list, 5);\n        assertEquals(5, list.size());\n        assertEquals(Integer.valueOf(1), list.get(0));\n        assertEquals(Integer.valueOf(2), list.get(1));\n        assertEquals(Integer.valueOf(3), list.get(2));\n        assertEquals(Integer.valueOf(4), list.get(3));\n        assertEquals(Integer.valueOf(5), list.get(4));\n    }\n\n    @Test\n    public void testRemoveElements() {\n        MyClass124.addElements(list, 5);\n        MyClass124.removeElements(list, 2);\n        assertEquals(3, list.size());\n        assertEquals(Integer.valueOf(1), list.get(0));\n        assertEquals(Integer.valueOf(2), list.get(1));\n        assertEquals(Integer.valueOf(3), list.get(2));\n    }\n\n    @Test\n    public void testSumElements() {\n        MyClass124.addElements(list, 5);\n        int sum = MyClass124.sumElements(list);\n        assertEquals(15, sum);\n    }\n}\n"}
{"code_source": "public class Myclass125 {\n    private String accountNumber;\n    private double balance;\n\n    // Constructor to initialize BankAccount object with account number and balance\n    public BankAccount(String accountNumber, double balance) {\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n\n    // Method to get account number\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n\n    // Method to set account number\n    public void setAccountNumber(String accountNumber) {\n        this.accountNumber = accountNumber;\n    }\n\n    // Method to get balance\n    public double getBalance() {\n        return balance;\n    }\n\n    // Method to set balance\n    public void setBalance(double balance) {\n        this.balance = balance;\n    }\n\n    // Method to deposit money into the account\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    // Method to withdraw money from the account\n    public void withdraw(double amount) {\n        if (balance >= amount) {\n            balance -= amount;\n        } else {\n            System.out.println(\"Insufficient funds\");\n        }\n    }\n\n    // Method to transfer money from this account to another account\n    public void transfer(double amount, BankAccount other) {\n        if (balance >= amount) {\n            balance -= amount;\n            other.deposit(amount);\n        } else {\n            System.out.println(\"Insufficient funds\");\n        }\n    }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class BankAccountTest {\n\n    @Test\n    public void testDeposit() {\n        BankAccount account = new BankAccount(\"1234\", 100.0);\n        account.deposit(50.0);\n        assertEquals(150.0, account.getBalance(), 0.0);\n    }\n\n    @Test\n    public void testWithdrawSufficientFunds() {\n        BankAccount account = new BankAccount(\"1234\", 100.0);\n        account.withdraw(50.0);\n        assertEquals(50.0, account.getBalance(), 0.0);\n    }\n\n    @Test\n    public void testWithdrawInsufficientFunds() {\n        BankAccount account = new BankAccount(\"1234\", 100.0);\n        account.withdraw(150.0);\n        assertEquals(100.0, account.getBalance(), 0.0);\n    }\n\n    @Test\n    public void testTransferSufficientFunds() {\n        BankAccount account1 = new BankAccount(\"1234\", 100.0);\n        BankAccount account2 = new BankAccount(\"5678\", 0.0);\n        account1.transfer(50.0, account2);\n        assertEquals(50.0, account1.getBalance(), 0.0);\n        assertEquals(50.0, account2.getBalance(), 0.0);\n    }\n\n    @Test\n    public void testTransferInsufficientFunds() {\n        BankAccount account1 = new BankAccount(\"1234\", 100.0);\n        BankAccount account2 = new BankAccount(\"5678\", 0.0);\n        account1.transfer(150.0, account2);\n        assertEquals(100.0, account1.getBalance(), 0.0);\n        assertEquals(0.0, account2.getBalance(), 0.0);\n    }\n}\n"}
{"code_source": "public class MyClass126 {\n    private String make;\n    private String model;\n    private int year;\n    private double price;\n\n    // Constructor to initialize Car object with make, model, year, and price\n    public Car(String make, String model, int year, double price) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n        this.price = price;\n    }\n\n    // Method to get car make\n    public String getMake() {\n        return make;\n    }\n\n    // Method to set car make\n    public void setMake(String make) {\n        this.make = make;\n    }\n\n    // Method to get car model\n    public String getModel() {\n        return model;\n    }\n\n    // Method to set car model\n    public void setModel(String model) {\n        this.model = model;\n    }\n\n    // Method to get car year\n    public int getYear() {\n        return year;\n    }\n\n    // Method to set car year\n    public void setYear(int year) {\n        this.year = year;\n    }\n\n    // Method to get car price\n    public double getPrice() {\n        return price;\n    }\n\n    // Method to set car price\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    // Method to calculate the value of a car after depreciation\n    public double calculateDepreciation(double percentage) {\n        double depreciation = price * (percentage / 100);\n        return price - depreciation;\n    }\n}\n\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class CarTest {\n\n    @Test\n    public void testCar() {\n        // Create a new car object\n        Car car = new Car(\"Toyota\", \"Camry\", 2018, 25000.0);\n\n        // Test the get methods\n        assertEquals(\"Toyota\", car.getMake());\n        assertEquals(\"Camry\", car.getModel());\n        assertEquals(2018, car.getYear());\n        assertEquals(25000.0, car.getPrice(), 0.01);\n\n        // Test the set methods\n        car.setMake(\"Honda\");\n        car.setModel(\"Accord\");\n        car.setYear(2020);\n        car.setPrice(28000.0);\n        assertEquals(\"Honda\", car.getMake());\n        assertEquals(\"Accord\", car.getModel());\n        assertEquals(2020, car.getYear());\n        assertEquals(28000.0, car.getPrice(), 0.01);\n\n        // Test the calculateDepreciation method\n        double depreciation = car.calculateDepreciation(10);\n        assertEquals(25200.0, depreciation, 0.01);\n    }\n}\n"}
{"code_source": "public class MyClass127 {\n\n    private int[] elements;\n    private int top;\n\n    // Constructor to initialize the stack\n    public Stack(int capacity) {\n        elements = new int[capacity];\n        top = -1;\n    }\n\n    // Method to add an element to the top of the stack\n    public void push(int element) {\n        if (isFull()) {\n            throw new RuntimeException(\"Stack is full!\");\n        }\n        elements[++top] = element;\n    }\n\n    // Method to remove the top element from the stack and return it\n    public int pop() {\n        if (isEmpty()) {\n            throw new RuntimeException(\"Stack is empty!\");\n        }\n        return elements[top--];\n    }\n\n    // Method to check if the stack is empty\n    public boolean isEmpty() {\n        return top == -1;\n    }\n\n    // Method to check if the stack is full\n    public boolean isFull() {\n        return top == elements.length - 1;\n    }\n\n    // Method to get the size of the stack\n    public int size() {\n        return top + 1;\n    }\n\n    // Method to get the top element of the stack without removing it\n    public int peek() {\n        if (isEmpty()) {\n            throw new RuntimeException(\"Stack is empty!\");\n        }\n        return elements[top];\n    }\n}\n\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass127Test {\n\n    @Test\n    public void testPushPop() {\n        Stack stack = new Stack(5);\n        assertTrue(stack.isEmpty());\n        assertFalse(stack.isFull());\n\n        stack.push(1);\n        assertFalse(stack.isEmpty());\n        assertEquals(1, stack.peek());\n        assertFalse(stack.isFull());\n\n        stack.push(2);\n        assertFalse(stack.isEmpty());\n        assertEquals(2, stack.peek());\n        assertFalse(stack.isFull());\n\n        stack.push(3);\n        assertFalse(stack.isEmpty());\n        assertEquals(3, stack.peek());\n        assertFalse(stack.isFull());\n\n        assertEquals(3, stack.pop());\n        assertFalse(stack.isEmpty());\n        assertEquals(2, stack.peek());\n        assertFalse(stack.isFull());\n\n        assertEquals(2, stack.pop());\n        assertFalse(stack.isEmpty());\n        assertEquals(1, stack.peek());\n        assertFalse(stack.isFull());\n\n        assertEquals(1, stack.pop());\n        assertTrue(stack.isEmpty());\n        assertTrue(stack.isFull());\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void testPushFull() {\n        Stack stack = new Stack(2);\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void testPopEmpty() {\n        Stack stack = new Stack(5);\n        stack.pop();\n    }\n\n    @Test\n    public void testSize() {\n        Stack stack = new Stack(5);\n        assertEquals(0, stack.size());\n\n        stack.push(1);\n        assertEquals(1, stack.size());\n\n        stack.push(2);\n        assertEquals(2, stack.size());\n\n        stack.pop();\n        assertEquals(1, stack.size());\n\n        stack.pop();\n        assertEquals(0, stack.size());\n    }\n\n    @Test\n    public void testPeek() {\n        Stack stack = new Stack(5);\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        assertEquals(3, stack.peek());\n        assertEquals(3, stack.peek());\n    }\n\n}\n"}
{"code_source": "import java.util.ArrayList;\n\npublic class Person {\n    private String name;\n    private int age;\n    private ArrayList<String> interests;\n\n    // Constructor to initialize Person object with name, age, and interests\n    public Person(String name, int age, ArrayList<String> interests) {\n        this.name = name;\n        this.age = age;\n        this.interests = interests;\n    }\n\n    // Method to get person name\n    public String getName() {\n        return name;\n    }\n\n    // Method to set person name\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    // Method to get person age\n    public int getAge() {\n        return age;\n    }\n\n    // Method to set person age\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    // Method to get person interests\n    public ArrayList<String> getInterests() {\n        return interests;\n    }\n\n    // Method to set person interests\n    public void setInterests(ArrayList<String> interests) {\n        this.interests = interests;\n    }\n\n    // Method to add an interest to a person's interests\n    public void addInterest(String interest) {\n        interests.add(interest);\n    }\n\n    // Method to remove an interest from a person's interests\n    public void removeInterest(String interest) {\n        interests.remove(interest);\n    }\n\n    // Method to get a person's bio\n    public String getBio() {\n        String bio = name + \" is a \" + age + \"-year-old person who likes \";\n        for (int i = 0; i < interests.size(); i++) {\n            if (i == interests.size()-1) {\n                bio += \"and \" + interests.get(i) + \".\";\n            } else {\n                bio += interests.get(i) + \", \";\n            }\n        }\n        return bio;\n    }\n}\n\n", "test_case": "import java.util.ArrayList;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class PersonTest {\n\n    @Test\n    public void testGetBio() {\n        ArrayList<String> interests = new ArrayList<String>();\n        interests.add(\"reading\");\n        interests.add(\"hiking\");\n        Person p = new Person(\"John Doe\", 30, interests);\n        assertEquals(\"John Doe is a 30-year-old person who likes reading, hiking.\", p.getBio());\n    }\n\n    @Test\n    public void testAddInterest() {\n        ArrayList<String> interests = new ArrayList<String>();\n        interests.add(\"reading\");\n        interests.add(\"hiking\");\n        Person p = new Person(\"John Doe\", 30, interests);\n        p.addInterest(\"music\");\n        assertEquals(3, p.getInterests().size());\n        assertTrue(p.getInterests().contains(\"music\"));\n    }\n\n    @Test\n    public void testRemoveInterest() {\n        ArrayList<String> interests = new ArrayList<String>();\n        interests.add(\"reading\");\n        interests.add(\"hiking\");\n        interests.add(\"music\");\n        Person p = new Person(\"John Doe\", 30, interests);\n        p.removeInterest(\"hiking\");\n        assertEquals(2, p.getInterests().size());\n        assertFalse(p.getInterests().contains(\"hiking\"));\n    }\n\n    // You can add more tests for other methods as needed\n}\n"}
{"code_source": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Student {\n    private String name;\n    private int age;\n    private List<String> courses;\n\n    // Constructor to initialize Student object with name, age, and courses\n    public Student(String name, int age, List<String> courses) {\n        this.name = name;\n        this.age = age;\n        this.courses = courses;\n    }\n\n    // Method to get student name\n    public String getName() {\n        return name;\n    }\n\n    // Method to set student name\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    // Method to get student age\n    public int getAge() {\n        return age;\n    }\n\n    // Method to set student age\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    // Method to get student courses\n    public List<String> getCourses() {\n        return courses;\n    }\n\n    // Method to add a course to the student's course list\n    public void addCourse(String course) {\n        courses.add(course);\n    }\n\n    // Method to remove a course from the student's course list\n    public void removeCourse(String course) {\n        courses.remove(course);\n    }\n\n    // Method to check if the student is enrolled in a specific course\n    public boolean isEnrolledInCourse(String course) {\n        return courses.contains(course);\n    }\n}\n", "test_case": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class StudentTest {\n\n    @Test\n    public void testGettersAndSetters() {\n        List<String> courses = new ArrayList<>(Arrays.asList(\"Math\", \"Science\", \"History\"));\n        Student student = new Student(\"John Doe\", 20, courses);\n\n        assertEquals(\"John Doe\", student.getName());\n        assertEquals(20, student.getAge());\n        assertEquals(courses, student.getCourses());\n\n        student.setName(\"Jane Doe\");\n        student.setAge(21);\n        student.setCourses(new ArrayList<>(Arrays.asList(\"Math\", \"English\")));\n\n        assertEquals(\"Jane Doe\", student.getName());\n        assertEquals(21, student.getAge());\n        assertEquals(new ArrayList<>(Arrays.asList(\"Math\", \"English\")), student.getCourses());\n    }\n\n    @Test\n    public void testAddAndRemoveCourse() {\n        Student student = new Student(\"John Doe\", 20, new ArrayList<>());\n\n        student.addCourse(\"Math\");\n        student.addCourse(\"Science\");\n        student.addCourse(\"History\");\n\n        assertEquals(new ArrayList<>(Arrays.asList(\"Math\", \"Science\", \"History\")), student.getCourses());\n\n        student.removeCourse(\"Science\");\n\n        assertEquals(new ArrayList<>(Arrays.asList(\"Math\", \"History\")), student.getCourses());\n    }\n\n    @Test\n    public void testIsEnrolledInCourse() {\n        List<String> courses = new ArrayList<>(Arrays.asList(\"Math\", \"Science\", \"History\"));\n        Student student = new Student(\"John Doe\", 20, courses);\n\n        assertTrue(student.isEnrolledInCourse(\"Math\"));\n        assertTrue(student.isEnrolledInCourse(\"Science\"));\n        assertTrue(student.isEnrolledInCourse(\"History\"));\n        assertFalse(student.isEnrolledInCourse(\"English\"));\n    }\n\n}\n"}
{"code_source": "public class MyClass13 {\n    public static int sumOfDigits(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n\n\n}\n", "test_case": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClass13Test {\n    @Test\n    public void testSumOfDigits() {\n        int n1 = 12345;\n        assertEquals(15, MyClass13.sumOfDigits(n1));\n\n        int n2 = 678;\n        assertEquals(21, MyClass13.sumOfDigits(n2));\n\n        int n3 = 0;\n        assertEquals(0, MyClass13.sumOfDigits(n3));\n\n        int n4 = -123;\n        assertEquals(6, MyClass13.sumOfDigits(n4));\n    }\n}\n\n"}
{"code_source": "public class CarRental {\n\n    private String agencyName;\n    private int numCarsAvailable;\n    private double rentalRatePerDay;\n\n    // Constructor to initialize CarRental object with agency name, number of cars available and rental rate per day\n    public CarRental(String agencyName, int numCarsAvailable, double rentalRatePerDay) {\n        this.agencyName = agencyName;\n        this.numCarsAvailable = numCarsAvailable;\n        this.rentalRatePerDay = rentalRatePerDay;\n    }\n\n    // Method to get car rental agency name\n    public String getAgencyName() {\n        return agencyName;\n    }\n\n    // Method to set car rental agency name\n    public void setAgencyName(String agencyName) {\n        this.agencyName = agencyName;\n    }\n\n    // Method to get number of cars available for rent\n    public int getNumCarsAvailable() {\n        return numCarsAvailable;\n    }\n\n    // Method to set number of cars available for rent\n    public void setNumCarsAvailable(int numCarsAvailable) {\n        this.numCarsAvailable = numCarsAvailable;\n    }\n\n    // Method to get rental rate per day\n    public double getRentalRatePerDay() {\n        return rentalRatePerDay;\n    }\n\n    // Method to set rental rate per day\n    public void setRentalRatePerDay(double rentalRatePerDay) {\n        this.rentalRatePerDay = rentalRatePerDay;\n    }\n\n    // Method to calculate the rental cost for a given number of days\n    public double calculateRentalCost(int numDays) {\n        if (numDays <= 0) {\n            throw new IllegalArgumentException(\"Number of days must be positive\");\n        }\n        return numDays * rentalRatePerDay;\n    }\n\n    // Method to rent a car for a given number of days\n    public void rentCar(int numDays) {\n        if (numDays <= 0) {\n            throw new IllegalArgumentException(\"Number of days must be positive\");\n        }\n        if (numDays > numCarsAvailable) {\n            throw new IllegalArgumentException(\"Not enough cars available\");\n        }\n        numCarsAvailable -= numDays;\n    }\n\n    // Method to return a rented car\n    public void returnCar(int numDays) {\n        if (numDays <= 0) {\n            throw new IllegalArgumentException(\"Number of days must be positive\");\n        }\n        numCarsAvailable += numDays;\n    }\n}\n", "test_case": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class CarRentalTest {\n\n    @Test\n    public void testCalculateRentalCost() {\n        CarRental carRental = new CarRental(\"Example Agency\", 10, 50.0);\n        double expectedRentalCost = 150.0;\n        double actualRentalCost = carRental.calculateRentalCost(3);\n        Assertions.assertEquals(expectedRentalCost, actualRentalCost);\n    }\n\n    @Test\n    public void testRentCar() {\n        CarRental carRental = new CarRental(\"Example Agency\", 10, 50.0);\n        int numDays = 5;\n        carRental.rentCar(numDays);\n        int expectedNumCarsAvailable = 5;\n        int actualNumCarsAvailable = carRental.getNumCarsAvailable();\n        Assertions.assertEquals(expectedNumCarsAvailable, actualNumCarsAvailable);\n    }\n\n    @Test\n    public void testReturnCar() {\n        CarRental carRental = new CarRental(\"Example Agency\", 10, 50.0);\n        int numDays = 5;\n        carRental.rentCar(numDays);\n        carRental.returnCar(numDays);\n        int expectedNumCarsAvailable = 10;\n        int actualNumCarsAvailable = carRental.getNumCarsAvailable();\n        Assertions.assertEquals(expectedNumCarsAvailable, actualNumCarsAvailable);\n    }\n\n    @Test\n    public void testCalculateRentalCostWithNegativeDays() {\n        CarRental carRental = new CarRental(\"Example Agency\", 10, 50.0);\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            carRental.calculateRentalCost(-3);\n        });\n    }\n\n    @Test\n    public void testRentCarWithNegativeDays() {\n        CarRental carRental = new CarRental(\"Example Agency\", 10, 50.0);\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            carRental.rentCar(-3);\n        });\n    }\n\n    @Test\n    public void testRentCarWithNotEnoughCarsAvailable() {\n        CarRental carRental = new CarRental(\"Example Agency\", 5, 50.0);\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            carRental.rentCar(10);\n        });\n    }\n\n    @Test\n    public void testReturnCarWithNegativeDays() {\n        CarRental carRental = new CarRental(\"Example Agency\", 10, 50.0);\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            carRental.returnCar(-3);\n        });\n    }\n}\n"}
{"code_source": "public class Student {\n\n    private String name;\n    private int age;\n    private double gpa;\n\n    // Constructor to initialize Student object with name, age, and GPA\n    public Student(String name, int age, double gpa) {\n        this.name = name;\n        this.age = age;\n        this.gpa = gpa;\n    }\n\n    // Method to get student name\n    public String getName() {\n        return name;\n    }\n\n    // Method to set student name\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    // Method to get student age\n    public int getAge() {\n        return age;\n    }\n\n    // Method to set student age\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    // Method to get student GPA\n    public double getGPA() {\n        return gpa;\n    }\n\n    // Method to set student GPA\n    public void setGPA(double gpa) {\n        this.gpa = gpa;\n    }\n\n    // Method to check if a student is on the honor roll\n    public boolean isOnHonorRoll() {\n        return gpa >= 3.5;\n    }\n}\n", "test_case": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class StudentTest {\n\n    @Test\n    public void testGettersAndSetters() {\n        List<String> courses = new ArrayList<>(Arrays.asList(\"Math\", \"Science\", \"History\"));\n        Student student = new Student(\"John Doe\", 20, courses);\n\n        assertEquals(\"John Doe\", student.getName());\n        assertEquals(20, student.getAge());\n        assertEquals(courses, student.getCourses());\n\n        student.setName(\"Jane Doe\");\n        student.setAge(21);\n        student.setCourses(new ArrayList<>(Arrays.asList(\"Math\", \"English\")));\n\n        assertEquals(\"Jane Doe\", student.getName());\n        assertEquals(21, student.getAge());\n        assertEquals(new ArrayList<>(Arrays.asList(\"Math\", \"English\")), student.getCourses());\n    }\n\n    @Test\n    public void testAddAndRemoveCourse() {\n        Student student = new Student(\"John Doe\", 20, new ArrayList<>());\n\n        student.addCourse(\"Math\");\n        student.addCourse(\"Science\");\n        student.addCourse(\"History\");\n\n        assertEquals(new ArrayList<>(Arrays.asList(\"Math\", \"Science\", \"History\")), student.getCourses());\n\n        student.removeCourse(\"Science\");\n\n        assertEquals(new ArrayList<>(Arrays.asList(\"Math\", \"History\")), student.getCourses());\n    }\n\n    @Test\n    public void testIsEnrolledInCourse() {\n        List<String> courses = new ArrayList<>(Arrays.asList(\"Math\", \"Science\", \"History\"));\n        Student student = new Student(\"John Doe\", 20, courses);\n\n        assertTrue(student.isEnrolledInCourse(\"Math\"));\n        assertTrue(student.isEnrolledInCourse(\"Science\"));\n        assertTrue(student.isEnrolledInCourse(\"History\"));\n        assertFalse(student.isEnrolledInCourse(\"English\"));\n    }\n\n}"}
{"code_source": "import java.util.ArrayList;\n\npublic class Student {\n    private String name;\n    private int age;\n    private ArrayList<String> courses;\n\n    // Constructor to initialize Student object with name, age, and courses\n    public Student(String name, int age, ArrayList<String> courses) {\n        this.name = name;\n        this.age = age;\n        this.courses = courses;\n    }\n\n    // Method to get student name\n    public String getName() {\n        return name;\n    }\n\n    // Method to set student name\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    // Method to get student age\n    public int getAge() {\n        return age;\n    }\n\n    // Method to set student age\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    // Method to get list of student courses\n    public ArrayList<String> getCourses() {\n        return courses;\n    }\n\n    // Method to add a course to a student's course list\n    public void addCourse(String course) {\n        courses.add(course);\n    }\n\n    // Method to remove a course from a student's course list\n    public void removeCourse(String course) {\n        courses.remove(course);\n    }\n\n    // Method to print out a student's information\n    public void printInfo() {\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"Age: \" + age);\n        System.out.println(\"Courses: \");\n        for (String course : courses) {\n            System.out.println(\"- \" + course);\n        }\n    }\n}\n\n", "test_case": "import java.util.ArrayList;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class StudentTest {\n\n    @Test\n    public void testAddAndRemoveCourse() {\n        // Create a new student object\n        Student student = new Student(\"John Smith\", 20, new ArrayList<String>());\n\n        // Add a course to the student's course list\n        student.addCourse(\"Math\");\n\n        // Check that the course was added successfully\n        assertTrue(student.getCourses().contains(\"Math\"));\n\n        // Remove the course from the student's course list\n        student.removeCourse(\"Math\");\n\n        // Check that the course was removed successfully\n        assertFalse(student.getCourses().contains(\"Math\"));\n    }\n\n    @Test\n    public void testPrintInfo() {\n        // Create a new student object\n        Student student = new Student(\"Jane Doe\", 21, new ArrayList<String>());\n        student.addCourse(\"History\");\n        student.addCourse(\"English\");\n\n        // Redirect stdout to a string buffer for testing\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        // Call the printInfo() method and check that the output matches expectations\n        student.printInfo();\n        assertEquals(\"Name: Jane Doe\\nAge: 21\\nCourses: \\n- History\\n- English\\n\", outContent.toString());\n\n        // Reset stdout\n        System.setOut(System.out);\n    }\n}\n"}
{"code_source": "import java.util.ArrayList;\n\npublic class Library {\n\n    private ArrayList<Book> books;\n\n    public Library() {\n        books = new ArrayList<Book>();\n    }\n\n    // Method to add a book to the library\n    public void addBook(Book book) {\n        books.add(book);\n    }\n\n    // Method to remove a book from the library\n    public void removeBook(Book book) {\n        books.remove(book);\n    }\n\n    // Method to search for a book by title\n    public Book searchByTitle(String title) {\n        for (Book book : books) {\n            if (book.getTitle().equalsIgnoreCase(title)) {\n                return book;\n            }\n        }\n        return null;\n    }\n\n    // Method to search for a book by author\n    public ArrayList<Book> searchByAuthor(String author) {\n        ArrayList<Book> result = new ArrayList<Book>();\n        for (Book book : books) {\n            if (book.getAuthor().equalsIgnoreCase(author)) {\n                result.add(book);\n            }\n        }\n        return result;\n    }\n\n    // Inner class for modeling a book\n    public static class Book {\n        private String title;\n        private String author;\n\n        public Book(String title, String author) {\n            this.title = title;\n            this.author = author;\n        }\n\n        public String getTitle() {\n            return title;\n        }\n\n        public String getAuthor() {\n            return author;\n        }\n    }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class LibraryTest {\n\n    @Test\n    public void testAddBook() {\n        Library library = new Library();\n        Library.Book book = new Library.Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\");\n        library.addBook(book);\n        assertEquals(1, library.getBooks().size());\n    }\n\n    @Test\n    public void testRemoveBook() {\n        Library library = new Library();\n        Library.Book book = new Library.Book(\"To Kill a Mockingbird\", \"Harper Lee\");\n        library.addBook(book);\n        library.removeBook(book);\n        assertEquals(0, library.getBooks().size());\n    }\n\n    @Test\n    public void testSearchByTitle() {\n        Library library = new Library();\n        Library.Book book1 = new Library.Book(\"The Catcher in the Rye\", \"J.D. Salinger\");\n        Library.Book book2 = new Library.Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\");\n        library.addBook(book1);\n        library.addBook(book2);\n        assertEquals(book2, library.searchByTitle(\"The Great Gatsby\"));\n        assertNull(library.searchByTitle(\"To Kill a Mockingbird\"));\n    }\n\n    @Test\n    public void testSearchByAuthor() {\n        Library library = new Library();\n        Library.Book book1 = new Library.Book(\"The Catcher in the Rye\", \"J.D. Salinger\");\n        Library.Book book2 = new Library.Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\");\n        Library.Book book3 = new Library.Book(\"The Catcher in the Rye\", \"J.D. Salinger\");\n        library.addBook(book1);\n        library.addBook(book2);\n        library.addBook(book3);\n        assertEquals(2, library.searchByAuthor(\"J.D. Salinger\").size());\n        assertEquals(1, library.searchByAuthor(\"F. Scott Fitzgerald\").size());\n        assertEquals(0, library.searchByAuthor(\"Harper Lee\").size());\n    }\n}\n"}
{"code_source": "public class StringUtils {\n\n    // Method to check if a string contains a substring\n    public static boolean containsSubstring(String str, String substring) {\n        return str.contains(substring);\n    }\n\n    // Method to capitalize the first letter of a string\n    public static String capitalizeFirstLetter(String str) {\n        if (str == null || str.isEmpty()) {\n            return str;\n        }\n        return str.substring(0, 1).toUpperCase() + str.substring(1);\n    }\n\n    // Method to remove all vowels from a string\n    public static String removeVowels(String str) {\n        return str.replaceAll(\"[aeiouAEIOU]\", \"\");\n    }\n\n    // Method to reverse the order of words in a string\n    public static String reverseWords(String str) {\n        String[] words = str.split(\"\\\\s+\");\n        StringBuilder sb = new StringBuilder();\n        for (int i = words.length - 1; i >= 0; i--) {\n            sb.append(words[i]).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class StringUtilsTest {\n\n    @Test\n    public void testContainsSubstring() {\n        String str = \"Hello world\";\n        assertTrue(StringUtils.containsSubstring(str, \"world\"));\n        assertFalse(StringUtils.containsSubstring(str, \"foo\"));\n    }\n\n    @Test\n    public void testCapitalizeFirstLetter() {\n        String str = \"hello world\";\n        assertEquals(\"Hello world\", StringUtils.capitalizeFirstLetter(str));\n        assertEquals(\"\", StringUtils.capitalizeFirstLetter(\"\"));\n        assertNull(StringUtils.capitalizeFirstLetter(null));\n    }\n\n    @Test\n    public void testRemoveVowels() {\n        String str = \"hello world\";\n        assertEquals(\"hll wrld\", StringUtils.removeVowels(str));\n        assertEquals(\"\", StringUtils.removeVowels(\"\"));\n        assertNull(StringUtils.removeVowels(null));\n    }\n\n    @Test\n    public void testReverseWords() {\n        String str = \"hello world\";\n        assertEquals(\"world hello\", StringUtils.reverseWords(str));\n        assertEquals(\"\", StringUtils.reverseWords(\"\"));\n        assertNull(StringUtils.reverseWords(null));\n    }\n\n}\n"}
{"code_source": "public class Student {\n    private String name;\n    private int id;\n    private double gpa;\n    private String major;\n\n    // Constructor to create Student object with name, id, gpa, and major\n    public Student(String name, int id, double gpa, String major) {\n        this.name = name;\n        this.id = id;\n        this.gpa = gpa;\n        this.major = major;\n    }\n\n    // Method to get student name\n    public String getName() {\n        return name;\n    }\n\n    // Method to set student name\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    // Method to get student ID\n    public int getId() {\n        return id;\n    }\n\n    // Method to set student ID\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    // Method to get student GPA\n    public double getGpa() {\n        return gpa;\n    }\n\n    // Method to set student GPA\n    public void setGpa(double gpa) {\n        this.gpa = gpa;\n    }\n\n    // Method to get student major\n    public String getMajor() {\n        return major;\n    }\n\n    // Method to set student major\n    public void setMajor(String major) {\n        this.major = major;\n    }\n\n    // Method to check if a student is in good standing based on their GPA\n    public boolean isGoodStanding() {\n        return gpa >= 2.0;\n    }\n\n    // Method to get the letter grade of a student based on their GPA\n    public String getLetterGrade() {\n        if (gpa >= 3.7) {\n            return \"A\";\n        } else if (gpa >= 3.0) {\n            return \"B\";\n        } else if (gpa >= 2.0) {\n            return \"C\";\n        } else {\n            return \"F\";\n        }\n    }\n}\n", "test_case": "import org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class StudentTest {\n\n    @Test\n    public void testStudent() {\n        Student s = new Student(\"John Doe\", 1234, 3.5, \"Computer Science\");\n        assertEquals(\"John Doe\", s.getName());\n        assertEquals(1234, s.getId());\n        assertEquals(3.5, s.getGpa(), 0.001);\n        assertEquals(\"Computer Science\", s.getMajor());\n    }\n\n    @Test\n    public void testIsGoodStanding() {\n        Student s1 = new Student(\"Jane Smith\", 5678, 3.5, \"Mathematics\");\n        assertTrue(s1.isGoodStanding());\n\n        Student s2 = new Student(\"Bob Johnson\", 9012, 1.5, \"History\");\n        assertFalse(s2.isGoodStanding());\n    }\n\n    @Test\n    public void testGetLetterGrade() {\n        Student s1 = new Student(\"Jane Smith\", 5678, 3.9, \"Mathematics\");\n        assertEquals(\"A\", s1.getLetterGrade());\n\n        Student s2 = new Student(\"Bob Johnson\", 9012, 2.5, \"History\");\n        assertEquals(\"C\", s2.getLetterGrade());\n\n        Student s3 = new Student(\"Alice Brown\", 3456, 1.5, \"English\");\n        assertEquals(\"F\", s3.getLetterGrade());\n    }\n}\n"}
{"code_source": "public class BankAccount {\n    private String accountNumber;\n    private double balance;\n\n    // Constructor to initialize BankAccount object with account number and balance\n    public BankAccount(String accountNumber, double balance) {\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n\n    // Method to get account number\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n\n    // Method to set account number\n    public void setAccountNumber(String accountNumber) {\n        this.accountNumber = accountNumber;\n    }\n\n    // Method to get balance\n    public double getBalance() {\n        return balance;\n    }\n\n    // Method to set balance\n    public void setBalance(double balance) {\n        this.balance = balance;\n    }\n\n    // Method to deposit money into the account\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    // Method to withdraw money from the account\n    public void withdraw(double amount) {\n        if (amount > balance) {\n            throw new IllegalArgumentException(\"Insufficient balance!\");\n        }\n        balance -= amount;\n    }\n\n    // Method to transfer money to another account\n    public void transfer(BankAccount otherAccount, double amount) {\n        if (amount > balance) {\n            throw new IllegalArgumentException(\"Insufficient balance!\");\n        }\n        balance -= amount;\n        otherAccount.deposit(amount);\n    }\n}\n\n", "test_case": "import static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Test;\n\nclass BankAccountTest {\n\n    @Test\n    void testDeposit() {\n        BankAccount account = new BankAccount(\"1234\", 100.0);\n        account.deposit(50.0);\n        assertEquals(150.0, account.getBalance(), 0.001);\n    }\n\n    @Test\n    void testWithdraw() {\n        BankAccount account = new BankAccount(\"1234\", 100.0);\n        account.withdraw(50.0);\n        assertEquals(50.0, account.getBalance(), 0.001);\n        assertThrows(IllegalArgumentException.class, () -> account.withdraw(70.0));\n    }\n\n    @Test\n    void testTransfer() {\n        BankAccount account1 = new BankAccount(\"1234\", 100.0);\n        BankAccount account2 = new BankAccount(\"5678\", 200.0);\n        account1.transfer(account2, 50.0);\n        assertEquals(50.0, account1.getBalance(), 0.001);\n        assertEquals(250.0, account2.getBalance(), 0.001);\n        assertThrows(IllegalArgumentException.class, () -> account1.transfer(account2, 70.0));\n    }\n}\n"}
{"code_source": "public class Student {\n    private String name;\n    private int age;\n    private String major;\n\n    // Constructor to initialize Student object with name, age, and major\n    public Student(String name, int age, String major) {\n        this.name = name;\n        this.age = age;\n        this.major = major;\n    }\n\n    // Method to get student name\n    public String getName() {\n        return name;\n    }\n\n    // Method to set student name\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    // Method to get student age\n    public int getAge() {\n        return age;\n    }\n\n    // Method to set student age\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    // Method to get student major\n    public String getMajor() {\n        return major;\n    }\n\n    // Method to set student major\n    public void setMajor(String major) {\n        this.major = major;\n    }\n\n    // Method to check if a student is eligible for graduation\n    public boolean isEligibleForGraduation() {\n        if (age >= 18 && major.equalsIgnoreCase(\"computer science\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n", "test_case": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class StudentTest {\n\n    @Test\n    public void testIsEligibleForGraduation() {\n        // Create a new Student object\n        Student student = new Student(\"John Doe\", 20, \"Computer Science\");\n\n        // Test if the student is eligible for graduation\n        Assertions.assertTrue(student.isEligibleForGraduation());\n\n        // Test if the student is not eligible for graduation with a different major\n        student.setMajor(\"Mathematics\");\n        Assertions.assertFalse(student.isEligibleForGraduation());\n\n        // Test if the student is not eligible for graduation because of age\n        student.setMajor(\"Computer Science\");\n        student.setAge(17);\n        Assertions.assertFalse(student.isEligibleForGraduation());\n    }\n}\n"}
{"code_source": "public class Car {\n\n    private String make;\n    private String model;\n    private int year;\n    private double price;\n\n    // Constructor to initialize Car object with make, model, year, and price\n    public Car(String make, String model, int year, double price) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n        this.price = price;\n    }\n\n    // Method to get car make\n    public String getMake() {\n        return make;\n    }\n\n    // Method to set car make\n    public void setMake(String make) {\n        this.make = make;\n    }\n\n    // Method to get car model\n    public String getModel() {\n        return model;\n    }\n\n    // Method to set car model\n    public void setModel(String model) {\n        this.model = model;\n    }\n\n    // Method to get car year\n    public int getYear() {\n        return year;\n    }\n\n    // Method to set car year\n    public void setYear(int year) {\n        this.year = year;\n    }\n\n    // Method to get car price\n    public double getPrice() {\n        return price;\n    }\n\n    // Method to set car price\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    // Method to calculate the depreciated value of the car over a specified number of years\n    public double calculateDepreciation(int years) {\n        double depreciation = 0.2;\n        double value = price;\n        for (int i = 1; i <= years; i++) {\n            value = value - (depreciation * value);\n        }\n        return value;\n    }\n\n    // Method to print out the car details\n    public void printDetails() {\n        System.out.println(\"Make: \" + make);\n        System.out.println(\"Model: \" + model);\n        System.out.println(\"Year: \" + year);\n        System.out.println(\"Price: $\" + price);\n    }\n}\n\n", "test_case": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CarTest {\n\n    @Test\n    public void testCalculateDepreciation() {\n        Car car = new Car(\"Toyota\", \"Corolla\", 2020, 20000.0);\n        assertEquals(8000.0, car.calculateDepreciation(3), 0.001);\n    }\n\n    @Test\n    public void testPrintDetails() {\n        Car car = new Car(\"Honda\", \"Civic\", 2018, 18000.0);\n        String expectedOutput = \"Make: Honda\\nModel: Civic\\nYear: 2018\\nPrice: $18000.0\\n\";\n        assertEquals(expectedOutput, getOutputFromPrintDetails(car));\n    }\n\n    private String getOutputFromPrintDetails(Car car) {\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        PrintStream printStream = new PrintStream(outputStream);\n        System.setOut(printStream);\n\n        car.printDetails();\n\n        System.setOut(System.out);\n        return outputStream.toString();\n    }\n}\n"}
{"code_source": "import java.util.ArrayList;\n\npublic class Library {\n\n    private ArrayList<Book> books;\n\n    public Library() {\n        books = new ArrayList<Book>();\n    }\n\n    // Method to add a book to the library\n    public void addBook(Book book) {\n        books.add(book);\n    }\n\n    // Method to remove a book from the library\n    public void removeBook(Book book) {\n        books.remove(book);\n    }\n\n    // Method to search for a book in the library by title\n    public ArrayList<Book> searchByTitle(String title) {\n        ArrayList<Book> foundBooks = new ArrayList<Book>();\n        for (Book book : books) {\n            if (book.getTitle().equalsIgnoreCase(title)) {\n                foundBooks.add(book);\n            }\n        }\n        return foundBooks;\n    }\n\n    // Method to search for a book in the library by author\n    public ArrayList<Book> searchByAuthor(String author) {\n        ArrayList<Book> foundBooks = new ArrayList<Book>();\n        for (Book book : books) {\n            if (book.getAuthor().equalsIgnoreCase(author)) {\n                foundBooks.add(book);\n            }\n        }\n        return foundBooks;\n    }\n\n    // Method to get the list of all books in the library\n    public ArrayList<Book> getBooks() {\n        return books;\n    }\n\n    // Inner class for Book\n    public static class Book {\n        private String title;\n        private String author;\n\n        public Book(String title, String author) {\n            this.title = title;\n            this.author = author;\n        }\n\n        public String getTitle() {\n            return title;\n        }\n\n        public String getAuthor() {\n            return author;\n        }\n    }\n}\n\n", "test_case": "import org.junit.Test;\nimport org.junit.Assert;\nimport java.util.ArrayList;\n\npublic class LibraryTest {\n\n    @Test\n    public void testAddBook() {\n        Library library = new Library();\n        Library.Book book = new Library.Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\");\n        library.addBook(book);\n        Assert.assertTrue(library.getBooks().contains(book));\n    }\n\n    @Test\n    public void testRemoveBook() {\n        Library library = new Library();\n        Library.Book book = new Library.Book(\"The Catcher in the Rye\", \"J.D. Salinger\");\n        library.addBook(book);\n        library.removeBook(book);\n        Assert.assertFalse(library.getBooks().contains(book));\n    }\n\n    @Test\n    public void testSearchByTitle() {\n        Library library = new Library();\n        Library.Book book1 = new Library.Book(\"To Kill a Mockingbird\", \"Harper Lee\");\n        Library.Book book2 = new Library.Book(\"1984\", \"George Orwell\");\n        library.addBook(book1);\n        library.addBook(book2);\n        ArrayList<Library.Book> foundBooks = library.searchByTitle(\"To Kill a Mockingbird\");\n        Assert.assertEquals(1, foundBooks.size());\n        Assert.assertEquals(\"To Kill a Mockingbird\", foundBooks.get(0).getTitle());\n    }\n\n    @Test\n    public void testSearchByAuthor() {\n        Library library = new Library();\n        Library.Book book1 = new Library.Book(\"The Hobbit\", \"J.R.R. Tolkien\");\n        Library.Book book2 = new Library.Book(\"The Lord of the Rings\", \"J.R.R. Tolkien\");\n        library.addBook(book1);\n        library.addBook(book2);\n        ArrayList<Library.Book> foundBooks = library.searchByAuthor(\"J.R.R. Tolkien\");\n        Assert.assertEquals(2, foundBooks.size());\n        Assert.assertEquals(\"The Hobbit\", foundBooks.get(0).getTitle());\n        Assert.assertEquals(\"The Lord of the Rings\", foundBooks.get(1).getTitle());\n    }\n}\n"}
{"code_source": "public class MyClass14 {\n    public static int maxSubarraySum(int[] array) {\n        int maxSum = Integer.MIN_VALUE;\n        int currSum = 0;\n        for (int i = 0; i < array.length; i++) {\n            currSum += array[i];\n            if (currSum > maxSum) {\n                maxSum = currSum;\n            }\n            if (currSum < 0) {\n                currSum = 0;\n            }\n        }\n        return maxSum;\n    }\n\n\n}\n", "test_case": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClass14Test {\n    @Test\n    public void testMaxSubarraySum() {\n        int[] array1 = {1, 2, 3, -4, 5};\n        assertEquals(7, MyClass14.maxSubarraySum(array1));\n\n        int[] array2 = {-2, -3, 4, -1, -2, 1, 5, -3};\n        assertEquals(7, MyClass14.maxSubarraySum(array2));\n\n        int[] array3 = {10, -5, -2, 6, -10};\n        assertEquals(11, MyClass14.maxSubarraySum(array3));\n\n        int[] array4 = {-2, -3, -4, -1, -2, -1, -5, -3};\n        assertEquals(-1, MyClass14.maxSubarraySum(array4));\n    }\n}\n"}
{"code_source": "public class Rectangle {\n    private double width;\n    private double height;\n\n    // Constructor to initialize Rectangle object with width and height\n    public Rectangle(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n\n    // Method to get rectangle width\n    public double getWidth() {\n        return width;\n    }\n\n    // Method to set rectangle width\n    public void setWidth(double width) {\n        this.width = width;\n    }\n\n    // Method to get rectangle height\n    public double getHeight() {\n        return height;\n    }\n\n    // Method to set rectangle height\n    public void setHeight(double height) {\n        this.height = height;\n    }\n\n    // Method to calculate the area of a rectangle\n    public double calculateArea() {\n        return width * height;\n    }\n\n    // Method to calculate the perimeter of a rectangle\n    public double calculatePerimeter() {\n        return 2 * (width + height);\n    }\n\n    // Method to check if two rectangles are equal\n    public boolean isEqualTo(Rectangle other) {\n        return (this.width == other.width) && (this.height == other.height);\n    }\n\n    // Method to scale a rectangle by a given factor\n    public void scale(double factor) {\n        this.width *= factor;\n        this.height *= factor;\n    }\n}\n\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class RectangleTest {\n\n    // Test the constructor and getters\n    @Test\n    public void testConstructorAndGetter() {\n        Rectangle r = new Rectangle(5.0, 3.0);\n        assertEquals(5.0, r.getWidth(), 0.001);\n        assertEquals(3.0, r.getHeight(), 0.001);\n    }\n\n    // Test the setters\n    @Test\n    public void testSetters() {\n        Rectangle r = new Rectangle(5.0, 3.0);\n        r.setWidth(7.0);\n        r.setHeight(4.0);\n        assertEquals(7.0, r.getWidth(), 0.001);\n        assertEquals(4.0, r.getHeight(), 0.001);\n    }\n\n    // Test the area calculation\n    @Test\n    public void testAreaCalculation() {\n        Rectangle r = new Rectangle(5.0, 3.0);\n        assertEquals(15.0, r.calculateArea(), 0.001);\n    }\n\n    // Test the perimeter calculation\n    @Test\n    public void testPerimeterCalculation() {\n        Rectangle r = new Rectangle(5.0, 3.0);\n        assertEquals(16.0, r.calculatePerimeter(), 0.001);\n    }\n\n    // Test the isEqualTo method\n    @Test\n    public void testIsEqualTo() {\n        Rectangle r1 = new Rectangle(5.0, 3.0);\n        Rectangle r2 = new Rectangle(5.0, 3.0);\n        Rectangle r3 = new Rectangle(7.0, 4.0);\n        assertTrue(r1.isEqualTo(r2));\n        assertFalse(r1.isEqualTo(r3));\n    }\n\n    // Test the scale method\n    @Test\n    public void testScale() {\n        Rectangle r = new Rectangle(5.0, 3.0);\n        r.scale(2.0);\n        assertEquals(10.0, r.getWidth(), 0.001);\n        assertEquals(6.0, r.getHeight(), 0.001);\n    }\n}\n"}
{"code_source": "public class ArraySorter {\n\n    // Method to sort an array of integers in ascending order using Bubble Sort\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n-1; i++) {\n            for (int j = 0; j < n-i-1; j++) {\n                if (arr[j] > arr[j+1]) {\n                    // swap arr[j] and arr[j+1]\n                    int temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n        }\n    }\n\n    // Method to sort an array of integers in descending order using Selection Sort\n    public static void selectionSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n-1; i++) {\n            int minIndex = i;\n            for (int j = i+1; j < n; j++) {\n                if (arr[j] > arr[minIndex]) {\n                    minIndex = j;\n                }\n            }\n            // swap arr[i] and arr[minIndex]\n            int temp = arr[i];\n            arr[i] = arr[minIndex];\n            arr[minIndex] = temp;\n        }\n    }\n\n    // Method to find the maximum value in an array of integers\n    public static int findMax(int[] arr) {\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        return max;\n    }\n\n    // Method to find the minimum value in an array of integers\n    public static int findMin(int[] arr) {\n        int min = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] < min) {\n                min = arr[i];\n            }\n        }\n        return min;\n    }\n}\n", "test_case": "import static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\n\npublic class ArraySorterTest {\n\n    @Test\n    public void testBubbleSort() {\n        int[] arr = {5, 1, 4, 2, 8};\n        ArraySorter.bubbleSort(arr);\n        int[] expected = {1, 2, 4, 5, 8};\n        assertArrayEquals(expected, arr);\n    }\n\n    @Test\n    public void testSelectionSort() {\n        int[] arr = {5, 1, 4, 2, 8};\n        ArraySorter.selectionSort(arr);\n        int[] expected = {8, 5, 4, 2, 1};\n        assertArrayEquals(expected, arr);\n    }\n\n    @Test\n    public void testFindMax() {\n        int[] arr = {5, 1, 4, 2, 8};\n        int max = ArraySorter.findMax(arr);\n        assertEquals(8, max);\n    }\n\n    @Test\n    public void testFindMin() {\n        int[] arr = {5, 1, 4, 2, 8};\n        int min = ArraySorter.findMin(arr);\n        assertEquals(1, min);\n    }\n}\n"}
{"code_source": "public class ShoppingCart {\n\n    private ArrayList<String> items;\n\n    // Constructor to initialize empty shopping cart\n    public ShoppingCart() {\n        this.items = new ArrayList<String>();\n    }\n\n    // Method to add an item to the shopping cart\n    public void addItem(String item) {\n        items.add(item);\n    }\n\n    // Method to remove an item from the shopping cart\n    public void removeItem(String item) {\n        items.remove(item);\n    }\n\n    // Method to get the number of items in the shopping cart\n    public int getNumItems() {\n        return items.size();\n    }\n\n    // Method to get the total cost of items in the shopping cart\n    public double getTotalCost() {\n        double totalCost = 0;\n        for (String item : items) {\n            totalCost += getItemCost(item);\n        }\n        return totalCost;\n    }\n\n    // Private method to get the cost of a single item\n    private double getItemCost(String item) {\n        // Implement code to get cost of item\n        return 0.0;\n    }\n}\n\n", "test_case": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ShoppingCartTest {\n\n    @Test\n    public void testAddItem() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.addItem(\"apple\");\n        cart.addItem(\"banana\");\n        assertEquals(2, cart.getNumItems());\n    }\n\n    @Test\n    public void testRemoveItem() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.addItem(\"apple\");\n        cart.addItem(\"banana\");\n        cart.removeItem(\"apple\");\n        assertEquals(1, cart.getNumItems());\n    }\n\n    @Test\n    public void testGetNumItems() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.addItem(\"apple\");\n        cart.addItem(\"banana\");\n        assertEquals(2, cart.getNumItems());\n    }\n\n    @Test\n    public void testGetTotalCost() {\n        ShoppingCart cart = new ShoppingCart();\n        cart.addItem(\"apple\");\n        cart.addItem(\"banana\");\n        double expectedCost = getItemCost(\"apple\") + getItemCost(\"banana\");\n        assertEquals(expectedCost, cart.getTotalCost(), 0.001);\n    }\n\n    private double getItemCost(String item) {\n        // Implement code to get cost of item\n        return 0.0;\n    }\n}\n"}
{"code_source": "public class Book {\n    private String title;\n    private String author;\n    private int pageCount;\n    private String publisher;\n\n    public Book(String title, String author, int pageCount, String publisher) {\n        this.title = title;\n        this.author = author;\n        this.pageCount = pageCount;\n        this.publisher = publisher;\n    }\n\n    // Method to get the title of the book\n    public String getTitle() {\n        return title;\n    }\n\n    // Method to set the title of the book\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    // Method to get the author of the book\n    public String getAuthor() {\n        return author;\n    }\n\n    // Method to set the author of the book\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n\n    // Method to get the page count of the book\n    public int getPageCount() {\n        return pageCount;\n    }\n\n    // Method to set the page count of the book\n    public void setPageCount(int pageCount) {\n        this.pageCount = pageCount;\n    }\n\n    // Method to get the publisher of the book\n    public String getPublisher() {\n        return publisher;\n    }\n\n    // Method to set the publisher of the book\n    public void setPublisher(String publisher) {\n        this.publisher = publisher;\n    }\n\n    // Method to display book details\n    public void displayBookDetails() {\n        System.out.println(\"Title: \" + title);\n        System.out.println(\"Author: \" + author);\n        System.out.println(\"Page Count: \" + pageCount);\n        System.out.println(\"Publisher: \" + publisher);\n    }\n}\n\n", "test_case": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class BookTest {\n\n    @Test\n    public void testGetTitle() {\n        Book book = new Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\", 180, \"Scribner\");\n        assertEquals(\"The Great Gatsby\", book.getTitle());\n    }\n\n    @Test\n    public void testSetTitle() {\n        Book book = new Book(\"To Kill a Mockingbird\", \"Harper Lee\", 281, \"J. B. Lippincott & Co.\");\n        book.setTitle(\"Go Set a Watchman\");\n        assertEquals(\"Go Set a Watchman\", book.getTitle());\n    }\n\n    @Test\n    public void testGetAuthor() {\n        Book book = new Book(\"Pride and Prejudice\", \"Jane Austen\", 279, \"T. Egerton, Whitehall\");\n        assertEquals(\"Jane Austen\", book.getAuthor());\n    }\n\n    @Test\n    public void testSetAuthor() {\n        Book book = new Book(\"The Catcher in the Rye\", \"J.D. Salinger\", 277, \"Little, Brown and Company\");\n        book.setAuthor(\"Jerome David Salinger\");\n        assertEquals(\"Jerome David Salinger\", book.getAuthor());\n    }\n\n    @Test\n    public void testGetPageCount() {\n        Book book = new Book(\"1984\", \"George Orwell\", 328, \"Secker & Warburg\");\n        assertEquals(328, book.getPageCount());\n    }\n\n    @Test\n    public void testSetPageCount() {\n        Book book = new Book(\"Animal Farm\", \"George Orwell\", 112, \"Secker & Warburg\");\n        book.setPageCount(144);\n        assertEquals(144, book.getPageCount());\n    }\n\n    @Test\n    public void testGetPublisher() {\n        Book book = new Book(\"The Hobbit\", \"J.R.R. Tolkien\", 310, \"George Allen & Unwin\");\n        assertEquals(\"George Allen & Unwin\", book.getPublisher());\n    }\n\n    @Test\n    public void testSetPublisher() {\n        Book book = new Book(\"The Lord of the Rings\", \"J.R.R. Tolkien\", 1178, \"George Allen & Unwin\");\n        book.setPublisher(\"Houghton Mifflin\");\n        assertEquals(\"Houghton Mifflin\", book.getPublisher());\n    }\n\n    @Test\n    public void testDisplayBookDetails() {\n        Book book = new Book(\"The Adventures of Huckleberry Finn\", \"Mark Twain\", 366, \"Chatto & Windus\");\n        book.displayBookDetails();\n        // Assert that the correct output was printed to the console\n        assertEquals(\"Title: The Adventures of Huckleberry Finn\\nAuthor: Mark Twain\\nPage Count: 366\\nPublisher: Chatto & Windus\\n\",\n                outContent.toString());\n    }\n}\n"}
{"code_source": "public class Book {\n\n    private String title;\n    private String author;\n    private int yearPublished;\n    private double price;\n\n    // Constructor to initialize Book object with title, author, year published, and price\n    public Book(String title, String author, int yearPublished, double price) {\n        this.title = title;\n        this.author = author;\n        this.yearPublished = yearPublished;\n        this.price = price;\n    }\n\n    // Method to get book title\n    public String getTitle() {\n        return title;\n    }\n\n    // Method to set book title\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    // Method to get book author\n    public String getAuthor() {\n        return author;\n    }\n\n    // Method to set book author\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n\n    // Method to get year book was published\n    public int getYearPublished() {\n        return yearPublished;\n    }\n\n    // Method to set year book was published\n    public void setYearPublished(int yearPublished) {\n        this.yearPublished = yearPublished;\n    }\n\n    // Method to get book price\n    public double getPrice() {\n        return price;\n    }\n\n    // Method to set book price\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    // Method to check if two books are the same based on their title and author\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Book)) {\n            return false;\n        }\n        Book otherBook = (Book) obj;\n        return this.title.equals(otherBook.title) && this.author.equals(otherBook.author);\n    }\n\n    // Method to print book details\n    public void printDetails() {\n        System.out.println(\"Title: \" + title);\n        System.out.println(\"Author: \" + author);\n        System.out.println(\"Year Published: \" + yearPublished);\n        System.out.println(\"Price: $\" + price);\n    }\n}\n\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class BookTest {\n\n    @Test\n    public void testBookDetails() {\n        Book book = new Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\", 1925, 12.99);\n\n        assertEquals(\"The Great Gatsby\", book.getTitle());\n        assertEquals(\"F. Scott Fitzgerald\", book.getAuthor());\n        assertEquals(1925, book.getYearPublished());\n        assertEquals(12.99, book.getPrice(), 0.01);\n\n        String expectedOutput = \"Title: The Great Gatsby\\nAuthor: F. Scott Fitzgerald\\nYear Published: 1925\\nPrice: $12.99\\n\";\n        assertEquals(expectedOutput, getOutputFromMethod(book::printDetails));\n    }\n\n    @Test\n    public void testEquals() {\n        Book book1 = new Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\", 1925, 12.99);\n        Book book2 = new Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\", 1925, 15.99);\n        Book book3 = new Book(\"To Kill a Mockingbird\", \"Harper Lee\", 1960, 10.99);\n\n        assertTrue(book1.equals(book2));\n        assertFalse(book1.equals(book3));\n        assertFalse(book2.equals(book3));\n    }\n\n    private String getOutputFromMethod(Runnable method) {\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outputStream));\n        method.run();\n        return outputStream.toString();\n    }\n\n}\n"}
{"code_source": "import java.util.ArrayList;\n\npublic class GroceryList {\n\n    private ArrayList<String> list;\n\n    // Constructor to initialize the grocery list\n    public GroceryList() {\n        list = new ArrayList<>();\n    }\n\n    // Method to add an item to the grocery list\n    public void addItem(String item) {\n        list.add(item);\n    }\n\n    // Method to remove an item from the grocery list\n    public void removeItem(String item) {\n        list.remove(item);\n    }\n\n    // Method to print the grocery list\n    public void printList() {\n        System.out.println(\"Grocery List:\");\n        for (String item : list) {\n            System.out.println(\"- \" + item);\n        }\n    }\n\n    // Method to check if an item is in the grocery list\n    public boolean hasItem(String item) {\n        return list.contains(item);\n    }\n\n    // Method to get the number of items in the grocery list\n    public int numItems() {\n        return list.size();\n    }\n}\n\n", "test_case": "import static org.junit.Assert.*;\n\nimport java.util.ArrayList;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class GroceryListTest {\n\n    private GroceryList groceryList;\n\n    @Before\n    public void setUp() {\n        groceryList = new GroceryList();\n    }\n\n    @Test\n    public void testAddItem() {\n        groceryList.addItem(\"Apples\");\n        groceryList.addItem(\"Bananas\");\n        assertEquals(2, groceryList.numItems());\n    }\n\n    @Test\n    public void testRemoveItem() {\n        groceryList.addItem(\"Apples\");\n        groceryList.addItem(\"Bananas\");\n        groceryList.removeItem(\"Apples\");\n        assertFalse(groceryList.hasItem(\"Apples\"));\n        assertEquals(1, groceryList.numItems());\n    }\n\n    @Test\n    public void testPrintList() {\n        groceryList.addItem(\"Apples\");\n        groceryList.addItem(\"Bananas\");\n        groceryList.addItem(\"Carrots\");\n\n        // Redirect stdout to a StringBuilder for testing\n        StringBuilder output = new StringBuilder();\n        System.setOut(new java.io.PrintStream(output));\n\n        groceryList.printList();\n        assertEquals(\"Grocery List:\\n- Apples\\n- Bananas\\n- Carrots\\n\", output.toString());\n    }\n\n    @Test\n    public void testHasItem() {\n        groceryList.addItem(\"Apples\");\n        groceryList.addItem(\"Bananas\");\n        assertTrue(groceryList.hasItem(\"Apples\"));\n        assertFalse(groceryList.hasItem(\"Oranges\"));\n    }\n\n    @Test\n    public void testNumItems() {\n        groceryList.addItem(\"Apples\");\n        groceryList.addItem(\"Bananas\");\n        groceryList.addItem(\"Carrots\");\n        assertEquals(3, groceryList.numItems());\n    }\n\n}\n"}
{"code_source": "import java.util.Random;\n\npublic class Dice {\n\n    private int sides;\n\n    // Constructor to create a Dice object with the specified number of sides\n    public Dice(int sides) {\n        this.sides = sides;\n    }\n\n    // Method to roll the dice and return a random number between 1 and the number of sides\n    public int roll() {\n        Random rand = new Random();\n        return rand.nextInt(sides) + 1;\n    }\n\n    // Method to roll the dice n times and return the sum of the results\n    public int rollMultiple(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += roll();\n        }\n        return sum;\n    }\n\n    // Method to set the number of sides on the dice\n    public void setSides(int sides) {\n        this.sides = sides;\n    }\n\n    // Method to get the number of sides on the dice\n    public int getSides() {\n        return sides;\n    }\n}\n\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class DiceTest {\n\n    @Test\n    public void testRoll() {\n        Dice dice = new Dice(6);\n        int result = dice.roll();\n        assertTrue(result >= 1 && result <= 6);\n    }\n\n    @Test\n    public void testRollMultiple() {\n        Dice dice = new Dice(6);\n        int result = dice.rollMultiple(3);\n        assertTrue(result >= 3 && result <= 18);\n    }\n\n    @Test\n    public void testSetSides() {\n        Dice dice = new Dice(6);\n        dice.setSides(8);\n        assertEquals(8, dice.getSides());\n    }\n}\n"}
{"code_source": "public class BankAccount {\n    private String accountNumber;\n    private double balance;\n\n    public BankAccount(String accountNumber, double balance) {\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        if (balance >= amount) {\n            balance -= amount;\n        } else {\n            throw new IllegalArgumentException(\"Insufficient funds\");\n        }\n    }\n\n    public void transfer(double amount, BankAccount destinationAccount) {\n        if (balance >= amount) {\n            balance -= amount;\n            destinationAccount.deposit(amount);\n        } else {\n            throw new IllegalArgumentException(\"Insufficient funds\");\n        }\n    }\n}\n\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class BankAccountTest {\n\n    @Test\n    public void testDeposit() {\n        BankAccount account = new BankAccount(\"123456\", 100.0);\n        account.deposit(50.0);\n        double expected = 150.0;\n        double actual = account.getBalance();\n        assertEquals(expected, actual, 0.0);\n    }\n\n    @Test\n    public void testWithdraw() {\n        BankAccount account = new BankAccount(\"123456\", 100.0);\n        account.withdraw(50.0);\n        double expected = 50.0;\n        double actual = account.getBalance();\n        assertEquals(expected, actual, 0.0);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testWithdrawWithInsufficientFunds() {\n        BankAccount account = new BankAccount(\"123456\", 100.0);\n        account.withdraw(150.0);\n    }\n\n    @Test\n    public void testTransfer() {\n        BankAccount account1 = new BankAccount(\"123456\", 100.0);\n        BankAccount account2 = new BankAccount(\"789012\", 50.0);\n        account1.transfer(50.0, account2);\n        double expected1 = 50.0;\n        double actual1 = account1.getBalance();\n        double expected2 = 100.0;\n        double actual2 = account2.getBalance();\n        assertEquals(expected1, actual1, 0.0);\n        assertEquals(expected2, actual2, 0.0);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testTransferWithInsufficientFunds() {\n        BankAccount account1 = new BankAccount(\"123456\", 100.0);\n        BankAccount account2 = new BankAccount(\"789012\", 50.0);\n        account1.transfer(150.0, account2);\n    }\n}\n"}
{"code_source": "public class Triangle {\n\n    private double sideA;\n    private double sideB;\n    private double sideC;\n\n    // Constructor to create Triangle object with given sides\n    public Triangle(double a, double b, double c) {\n        if (a <= 0 || b <= 0 || c <= 0) {\n            throw new IllegalArgumentException(\"Sides must be positive!\");\n        }\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            throw new IllegalArgumentException(\"Invalid triangle sides!\");\n        }\n        sideA = a;\n        sideB = b;\n        sideC = c;\n    }\n\n    // Method to get the length of side A\n    public double getSideA() {\n        return sideA;\n    }\n\n    // Method to get the length of side B\n    public double getSideB() {\n        return sideB;\n    }\n\n    // Method to get the length of side C\n    public double getSideC() {\n        return sideC;\n    }\n\n    // Method to calculate the perimeter of the triangle\n    public double calculatePerimeter() {\n        return sideA + sideB + sideC;\n    }\n\n    // Method to calculate the area of the triangle\n    public double calculateArea() {\n        double s = (sideA + sideB + sideC) / 2;\n        return Math.sqrt(s * (s - sideA) * (s - sideB) * (s - sideC));\n    }\n\n    // Method to determine if the triangle is a right triangle\n    public boolean isRightTriangle() {\n        double aSquared = sideA * sideA;\n        double bSquared = sideB * sideB;\n        double cSquared = sideC * sideC;\n        return (aSquared + bSquared == cSquared) || (aSquared + cSquared == bSquared) || (bSquared + cSquared == aSquared);\n    }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class TriangleTest {\n\n    @Test\n    public void testConstructor() {\n        Triangle t = new Triangle(3, 4, 5);\n        assertEquals(3, t.getSideA(), 0);\n        assertEquals(4, t.getSideB(), 0);\n        assertEquals(5, t.getSideC(), 0);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testInvalidSides() {\n        Triangle t = new Triangle(1, 2, 3);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testNegativeSides() {\n        Triangle t = new Triangle(-3, 4, 5);\n    }\n\n    @Test\n    public void testCalculatePerimeter() {\n        Triangle t = new Triangle(3, 4, 5);\n        assertEquals(12, t.calculatePerimeter(), 0);\n    }\n\n    @Test\n    public void testCalculateArea() {\n        Triangle t = new Triangle(3, 4, 5);\n        assertEquals(6, t.calculateArea(), 0.0001);\n    }\n\n    @Test\n    public void testIsRightTriangle() {\n        Triangle t1 = new Triangle(3, 4, 5);\n        assertTrue(t1.isRightTriangle());\n        Triangle t2 = new Triangle(5, 12, 13);\n        assertTrue(t2.isRightTriangle());\n        Triangle t3 = new Triangle(4, 5, 6);\n        assertFalse(t3.isRightTriangle());\n    }\n\n}\n"}
{"code_source": "import java.util.ArrayList;\n\npublic class ShoppingCart {\n\n    private ArrayList<Item> items;\n\n    // Constructor to initialize the ArrayList of items\n    public ShoppingCart() {\n        items = new ArrayList<Item>();\n    }\n\n    // Method to add an item to the cart\n    public void addItem(Item item) {\n        items.add(item);\n    }\n\n    // Method to remove an item from the cart\n    public void removeItem(Item item) {\n        items.remove(item);\n    }\n\n    // Method to get the total cost of all items in the cart\n    public double getTotalCost() {\n        double total = 0;\n        for (Item item : items) {\n            total += item.getPrice();\n        }\n        return total;\n    }\n\n    // Method to get the number of items in the cart\n    public int getItemCount() {\n        return items.size();\n    }\n\n    // Method to display the contents of the cart\n    public void displayCart() {\n        System.out.println(\"Shopping Cart Contents:\");\n        for (Item item : items) {\n            System.out.println(item.getName() + \" - $\" + item.getPrice());\n        }\n        System.out.println(\"Total cost: $\" + getTotalCost());\n    }\n}\n\n", "test_case": "import static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertFalse;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.util.ArrayList;\n\npublic class ShoppingCartTest {\n\n    private Item item1, item2;\n    private ShoppingCart cart;\n\n    @Before\n    public void setUp() {\n        item1 = new Item(\"Apple\", 0.5);\n        item2 = new Item(\"Banana\", 0.25);\n        cart = new ShoppingCart();\n    }\n\n    @Test\n    public void testAddItem() {\n        cart.addItem(item1);\n        assertEquals(1, cart.getItemCount());\n    }\n\n    @Test\n    public void testRemoveItem() {\n        cart.addItem(item1);\n        cart.addItem(item2);\n        cart.removeItem(item1);\n        assertEquals(1, cart.getItemCount());\n        assertFalse(cart.getItems().contains(item1));\n        assertTrue(cart.getItems().contains(item2));\n    }\n\n    @Test\n    public void testGetTotalCost() {\n        cart.addItem(item1);\n        cart.addItem(item2);\n        assertEquals(0.75, cart.getTotalCost(), 0.001);\n    }\n\n    @Test\n    public void testGetItemCount() {\n        assertEquals(0, cart.getItemCount());\n        cart.addItem(item1);\n        cart.addItem(item2);\n        assertEquals(2, cart.getItemCount());\n    }\n\n    @Test\n    public void testDisplayCart() {\n        cart.addItem(item1);\n        cart.addItem(item2);\n        cart.displayCart();\n    }\n}\n"}
{"code_source": "public class MyClass15 {\n    public static boolean isValidIPv4(String str) {\n        if (str == null || str.isEmpty()) {\n            return false;\n        }\n        String[] parts = str.split(\"\\\\.\");\n        if (parts.length != 4) {\n            return false;\n        }\n        for (String part : parts) {\n            try {\n                int num = Integer.parseInt(part);\n                if (num < 0 || num > 255) {\n                    return false;\n                }\n                if (part.length() > 1 && part.charAt(0) == '0') {\n                    return false;\n                }\n            } catch (NumberFormatException e) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n}\n", "test_case": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClass15Test {\n    @Test\n    public void testIsValidIPv4() {\n        assertTrue(MyClass15.isValidIPv4(\"192.168.0.1\"));\n        assertTrue(MyClass15.isValidIPv4(\"172.16.254.1\"));\n        assertTrue(MyClass15.isValidIPv4(\"10.0.0.1\"));\n        assertTrue(MyClass15.isValidIPv4(\"255.255.255.255\"));\n\n        assertFalse(MyClass15.isValidIPv4(\"\"));\n        assertFalse(MyClass15.isValidIPv4(null));\n        assertFalse(MyClass15.isValidIPv4(\"192.168.0.\"));\n        assertFalse(MyClass15.isValidIPv4(\"192.168.0.256\"));\n        assertFalse(MyClass15.isValidIPv4(\"192.168.00.1\"));\n        assertFalse(MyClass15.isValidIPv4(\"192.168.0.1.2\"));\n        assertFalse(MyClass15.isValidIPv4(\"192.168.0.1.\"));\n        assertFalse(MyClass15.isValidIPv4(\"192 .168.0.1\"));\n        assertFalse(MyClass15.isValidIPv4(\"192.168 .0.1\"));\n        assertFalse(MyClass15.isValidIPv4(\"192.168.0 .1\"));\n        assertFalse(MyClass15.isValidIPv4(\"19a.168.0.1\"));\n        assertFalse(MyClass15.isValidIPv4(\"192.168.-1.1\"));\n    }\n}\n"}
{"code_source": "public class Car {\n    private String make;\n    private String model;\n    private int year;\n\n    public Car(String make, String model, int year) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n    }\n\n    public void start() {\n        System.out.println(\"Starting the \" + make + \" \" + model);\n    }\n\n    public void accelerate(int speed) {\n        System.out.println(make + \" \" + model + \" is accelerating to \" + speed + \" mph\");\n    }\n\n    public void brake() {\n        System.out.println(make + \" \" + model + \" is braking\");\n    }\n}\n\n", "test_case": "import static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertFalse;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.util.ArrayList;\n\npublic class ShoppingCartTest {\n\n    private Item item1, item2;\n    private ShoppingCart cart;\n\n    @Before\n    public void setUp() {\n        item1 = new Item(\"Apple\", 0.5);\n        item2 = new Item(\"Banana\", 0.25);\n        cart = new ShoppingCart();\n    }\n\n    @Test\n    public void testAddItem() {\n        cart.addItem(item1);\n        assertEquals(1, cart.getItemCount());\n    }\n\n    @Test\n    public void testRemoveItem() {\n        cart.addItem(item1);\n        cart.addItem(item2);\n        cart.removeItem(item1);\n        assertEquals(1, cart.getItemCount());\n        assertFalse(cart.getItems().contains(item1));\n        assertTrue(cart.getItems().contains(item2));\n    }\n\n    @Test\n    public void testGetTotalCost() {\n        cart.addItem(item1);\n        cart.addItem(item2);\n        assertEquals(0.75, cart.getTotalCost(), 0.001);\n    }\n\n    @Test\n    public void testGetItemCount() {\n        assertEquals(0, cart.getItemCount());\n        cart.addItem(item1);\n        cart.addItem(item2);\n        assertEquals(2, cart.getItemCount());\n    }\n\n    @Test\n    public void testDisplayCart() {\n        cart.addItem(item1);\n        cart.addItem(item2);\n        cart.displayCart();\n    }\n}\n"}
{"code_source": "public class ExampleClass {\n    private String name;\n    private int age;\n\n    // Constructor\n    public ExampleClass(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // Getter and setter methods for name and age\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    // A method that returns a String\n    public String sayHello() {\n        return \"Hello, my name is \" + name + \" and I am \" + age + \" years old.\";\n    }\n\n    // A method that performs a calculation and returns an integer\n    public int calculateSum(int num1, int num2) {\n        int sum = num1 + num2;\n        return sum;\n    }\n\n    // A method that takes an array of integers and returns the sum of the values\n    public int calculateArraySum(int[] nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.length; i++) {\n            sum += nums[i];\n        }\n        return sum;\n    }\n}\n\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class ExampleClassTest {\n\n    @Test\n    public void testSayHello() {\n        ExampleClass obj = new ExampleClass(\"John\", 30);\n        String expected = \"Hello, my name is John and I am 30 years old.\";\n        String actual = obj.sayHello();\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testCalculateSum() {\n        ExampleClass obj = new ExampleClass(\"John\", 30);\n        int expected = 5;\n        int actual = obj.calculateSum(2, 3);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testCalculateArraySum() {\n        ExampleClass obj = new ExampleClass(\"John\", 30);\n        int[] nums = {1, 2, 3, 4, 5};\n        int expected = 15;\n        int actual = obj.calculateArraySum(nums);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testSetName() {\n        ExampleClass obj = new ExampleClass(\"John\", 30);\n        obj.setName(\"Jane\");\n        String expected = \"Jane\";\n        String actual = obj.getName();\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testSetAge() {\n        ExampleClass obj = new ExampleClass(\"John\", 30);\n        obj.setAge(31);\n        int expected = 31;\n        int actual = obj.getAge();\n        assertEquals(expected, actual);\n    }\n}\n"}
{"code_source": "public class MyClass {\n    private String name;\n    private int age;\n\n    public MyClass(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public void sayHello() {\n        System.out.println(\"Hello, my name is \" + name);\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public boolean isAdult() {\n        return age >= 18;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public void celebrateBirthday() {\n        age++;\n        System.out.println(\"It's my \" + age + \"th birthday!\");\n    }\n}\n\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClassTest {\n\n    @Test\n    public void testSayHello() {\n        MyClass myObj = new MyClass(\"John\", 25);\n        assertEquals(\"Hello, my name is John\", myObj.sayHello());\n    }\n\n    @Test\n    public void testGetAge() {\n        MyClass myObj = new MyClass(\"John\", 25);\n        assertEquals(25, myObj.getAge());\n    }\n\n    @Test\n    public void testIsAdult() {\n        MyClass myObj = new MyClass(\"John\", 25);\n        assertTrue(myObj.isAdult());\n\n        MyClass myObj2 = new MyClass(\"Jane\", 17);\n        assertFalse(myObj2.isAdult());\n    }\n\n    @Test\n    public void testSetAge() {\n        MyClass myObj = new MyClass(\"John\", 25);\n        myObj.setAge(30);\n        assertEquals(30, myObj.getAge());\n    }\n\n    @Test\n    public void testCelebrateBirthday() {\n        MyClass myObj = new MyClass(\"John\", 25);\n        myObj.celebrateBirthday();\n        assertEquals(26, myObj.getAge());\n    }\n}\n"}
{"code_source": "\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Scanner;\n\npublic class Test {\n    public static File file =new File(\"D://LotterySystem.txt\");\n    public static File tempFile=new File(\"D://temp.txt\");\n\n    public static void findAllCombination(int[] arr) {\n        try(PrintWriter pw=new PrintWriter(new FileOutputStream(file),true)){\n            int n=arr.length-1;\n            int v=1;\n            for(int i = 0;i<=n-5;i++) {\n                for(int j=i+1;j<=n-4;j++) {\n                    for(int x=j+1;x<=n-3;x++) {\n                        for (int y=x+1;y<=n-2;y++) {\n                            for(int z=y+1;z<=n-1;z++) {\n                                for(int c=z+1;c<=n;c++) {\n                                    pw.print(v+\". \");\n                                    pw.print(arr[i]+\" \");\n                                    pw.print(arr[j]+\" \");\n                                    pw.print(arr[x]+\" \");\n                                    pw.print(arr[y]+\" \");\n                                    pw.print(arr[z]+\" \");\n                                    pw.print(arr[c]+\" \");\n                                    pw.println();\n                                    v++;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            pw.print(-1);\n\n        }catch(Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    public static void checkForEven(int maxEven) {\n        try(Scanner in=new Scanner(file);PrintWriter pw=new PrintWriter(new FileOutputStream(tempFile),true)){\n            int[] lotteryComb=new int[6];\n            String num;\n            int counter=0;\n            int n=1;\n            while(in.hasNext()){\n                num=in.next();\n                if(num.equals(\"-1\")) break;\n                for(int i=0;i<lotteryComb.length;i++) {\n                    lotteryComb[i]=in.nextInt();\n                    if(lotteryComb[i]%2!=0) counter++;\n                }\n                if(counter<=maxEven) {\n                    pw.print(n+\". \");\n                    for(int j=0;j<lotteryComb.length;j++) {\n                        pw.print(lotteryComb[j]+\" \");\n                    }\n                    pw.println();\n                    counter=0;\n                    n++;\n                }\n                else counter=0;\n            }\n            pw.print(\"-1\");\n            in.close();\n            copyFile();\n\n        }catch(FileNotFoundException e) {\n            System.out.println(\"The file with groups of six not found !\");\n        }\n    }\n\n    public static void checkForOdd(int maxOdd) {\n        try(Scanner in=new Scanner(file);PrintWriter pw=new PrintWriter(new FileOutputStream(tempFile),true)){\n            int[] lotteryComb=new int[6];\n            String num;\n            int counter=0;\n            int n=1;\n            while(in.hasNext()){\n                num=in.next();\n                if(num.equals(\"-1\")) break;\n                for(int i=0;i<lotteryComb.length;i++) {\n                    lotteryComb[i]=in.nextInt();\n                    if(lotteryComb[i]%2==0) counter++;\n                }\n                if(counter<=maxOdd) {\n                    pw.print(n+\". \");\n                    for(int j=0;j<lotteryComb.length;j++) {\n                        pw.print(lotteryComb[j]+\" \");\n                    }\n                    pw.println();\n                    counter=0;\n                    n++;\n                }\n                else counter=0;\n            }\n            pw.print(\"-1\");\n            in.close();\n            copyFile();\n        }catch(FileNotFoundException e) {\n            System.out.println(\"The file with groups of six not found !\");\n        }\n    }\n\n    public static void checkForNumInRow(int maxNumRow) {\n        try(Scanner in=new Scanner(file);PrintWriter pw=new PrintWriter(new FileOutputStream(tempFile),true)){\n            int[] lotteryComb=new int[6];\n            String num;\n            int counter=0;\n            int n=1;\n            while(in.hasNext()){\n                num=in.next();\n                if(num.equals(\"-1\")) break;\n                for(int i=0;i<lotteryComb.length;i++) {\n                    lotteryComb[i]=in.nextInt();\n                    if(i>=1 && lotteryComb[i]-lotteryComb[i-1]==1) counter++;\n                }\n                if(counter<=maxNumRow) {\n                    pw.print(n+\". \");\n                    for(int j=0;j<lotteryComb.length;j++) {\n                        pw.print(lotteryComb[j]+\" \");\n                    }\n                    pw.println();\n                    counter=0;\n                    n++;\n                }\n                else counter=0;\n            }\n            pw.print(\"-1\");\n            in.close();\n            copyFile();\n        }catch(FileNotFoundException e) {\n            System.out.println(\"The file with groups of six not found !\");\n        }\n    }\n    /**\n     * filter for checking if every group of six have max (param) number with in same decade\n     * @param maxSameDecade number for max value\n     */\n    public static void filterForDecade(int maxSameDecade) {\n        try(Scanner in=new Scanner(file);PrintWriter pw=new PrintWriter(new FileOutputStream(tempFile),true)){\n            int[] lotteryComb=new int[6];\n            int[] decades=new int[10];\n            boolean higherToMax=false;//flag to check if numbers with same decade is more than value which allowed\n            String num;\n            int n=1;\n            while(in.hasNext()){\n                num=in.next();\n                if(num.equals(\"-1\")) break;\n                for(int i=0;i<lotteryComb.length;i++) {\n                    lotteryComb[i]=in.nextInt();\n                }\n                for(int i=0;i<lotteryComb.length;i++) {\n                    decades[lotteryComb[i]/10]++;\n                }\n                for(int i=0;i<decades.length;i++) {\n                    if(decades[i]>maxSameDecade) {\n                        higherToMax=true;\n                    }\n                    decades[i]=0; //turn to zero the cells of array (counters)\n                }\n                if(!higherToMax) {\n                    pw.print(n+\". \");\n                    for(int j=0;j<lotteryComb.length;j++) {\n                        pw.print(lotteryComb[j]+\" \");\n                    }\n                    pw.println();\n                    n++;\n                }\n                higherToMax=false;\n            }\n            pw.print(\"-1\");\n            in.close();\n            copyFile();\n        }catch(FileNotFoundException e) {\n            System.out.println(\"The file with groups of six not found !\");\n        }\n    }\n    /**\n     * filter for checking if every group of six have max (param) number with a same ending\n     * @param maxSameEnding number for max value\n     */\n    public static void filterForEnding(int maxSameEnding) {\n        try(Scanner in=new Scanner(file);PrintWriter pw=new PrintWriter(new FileOutputStream(tempFile),true)){\n            int[] lotteryComb=new int[6];\n            int[] decades=new int[10];\n            boolean higherToMax=false;//flag to check if numbers with same decade is more than value which allowed\n            String num;\n            int n=1;\n            while(in.hasNext()){\n                num=in.next();\n                if(num.equals(\"-1\")) break;\n                for(int i=0;i<lotteryComb.length;i++) {\n                    lotteryComb[i]=in.nextInt();\n                }\n                for(int i=0;i<lotteryComb.length;i++) {\n                    decades[lotteryComb[i]%10]++;\n                }\n                for(int i=0;i<decades.length;i++) {\n                    if(decades[i]>maxSameEnding) {\n                        higherToMax=true;\n                    }\n                    decades[i]=0; //turn to zero the cells of array (counters)\n                }\n                if(!higherToMax) {\n                    pw.print(n+\". \");\n                    for(int j=0;j<lotteryComb.length;j++) {\n                        pw.print(lotteryComb[j]+\" \");\n                    }\n                    pw.println();\n                    n++;\n                }\n                higherToMax=false;\n            }\n            pw.print(\"-1\");\n            in.close();\n            copyFile();\n        }catch(FileNotFoundException e) {\n            System.out.println(\"The file with groups of six not found !\");\n        }\n    }\n    /**\n     * print original txt file to console\n     */\n    public static void printFile() {\n        try(Scanner in=new Scanner(file)){\n            String num;\n\n            while(in.hasNext()){\n                num=in.next();\n                if(num.equals(\"-1\")) break;\n                System.out.print(num);\n                for(int i=0;i<6;i++) {\n                    System.out.print(in.nextInt()+\" \");\n                }\n                System.out.println();\n            }\n        }catch(FileNotFoundException e) {\n            System.out.println(\"The file with groups of six not found !\");\n        }\n    }\n    /**\n     * copy filtering tempfile to original file \n     */\n    private static void copyFile() {\n        try{\n\n            Path from = tempFile.toPath(); //convert from File to Path\n            Path to = Paths.get(file.getPath()); //convert from String to Path\n            Files.copy(from, to, StandardCopyOption.REPLACE_EXISTING);\n\n\n        }catch(IOException e3) {\n            e3.printStackTrace();\n        }\n\n    }\n}", "test_case": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\nclass TestTest {\n    private static final int[] testArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    private static final Path testFilePath = Paths.get(\"src/test/resources/test.txt\");\n    private static final Path tempFilePath = Paths.get(\"src/test/resources/temp.txt\");\n\n    @BeforeAll\n    static void setUp() throws IOException {\n        Files.deleteIfExists(testFilePath);\n        Files.deleteIfExists(tempFilePath);\n        Files.createFile(testFilePath);\n    }\n\n    @Test\n    void testFindAllCombination() throws IOException {\n        Test.findAllCombination(testArray);\n        Assertions.assertTrue(testFilePath.toFile().exists());\n        Assertions.assertTrue(testFilePath.toFile().length() > 0);\n    }\n\n    @Test\n    void testCheckForEven() throws IOException {\n        String input = \"1 2 3 4 5 6\\n2 3 4 5 6 7\\n3 4 5 6 7 8\\n-1\";\n        Files.write(testFilePath, input.getBytes());\n        Test.checkForEven(0);\n        Assertions.assertTrue(tempFilePath.toFile().exists());\n        String output = Files.readString(tempFilePath);\n        Assertions.assertEquals(\"1. 2 4 6 \\n2. 3 5 7 \\n-1\", output);\n    }\n\n    @Test\n    void testCheckForOdd() throws IOException {\n        String input = \"1 2 3 4 5 6\\n2 3 4 5 6 7\\n3 4 5 6 7 8\\n-1\";\n        Files.write(testFilePath, input.getBytes());\n        Test.checkForOdd(0);\n        Assertions.assertTrue(tempFilePath.toFile().exists());\n        String output = Files.readString(tempFilePath);\n        Assertions.assertEquals(\"1. 1 3 5 \\n-1\", output);\n    }\n\n    @Test\n    void testCheckForNumInRow() throws IOException {\n        String input = \"1 2 3 4 5 6\\n2 3 4 5 6 7\\n3 4 5 6 7 8\\n-1\";\n        Files.write(testFilePath, input.getBytes());\n        Test.checkForNumInRow(0);\n        Assertions.assertTrue(tempFilePath.toFile().exists());\n        String output = Files.readString(tempFilePath);\n        Assertions.assertEquals(\"1. 1 2 3 4 5 6 \\n2. 2 3 4 5 6 7 \\n3. 3 4 5 6 7 8 \\n-1\", output);\n    }\n\n    @Test\n    void testFilterForDecade() throws IOException {\n        String input = \"10 11 12 20 21 22\\n20 21 22 30 31 32\\n40 41 42 50 51 52\\n-1\";\n        Files.write(testFilePath, input.getBytes());\n        Test.filterForDecade(2);\n        Assertions.assertTrue(tempFilePath.toFile().exists());\n        String output = Files.readString(tempFilePath);\n        Assertions.assertEquals(\"1. 10 11 12 20 21 22 \\n-1\", output);\n    }\n}\n"}
{"code_source": "\n\npublic class DoublyList {\n\n    private ListNode head;\n    private ListNode tail;\n    int listSize = 0;\n\n    public DoublyList() {\n        this.head=null;\n        this.tail=null;\n    }\n\n    public void insertFirst(char c) {\n        ListNode  node = new ListNode();\n        node.data=c;\n        node.n++;\n        node.next=head;\n        node.prev=null;\n\n        if(isEmpty()) {\n            tail=node;\n            head=node;\n        }\n        else head=node;\n\n        listSize++;\n    }\n    //deference****************\n    public void removeFirst() {\n        if(isEmpty())System.out.println(\"The List is Empty\");\n        else {\n            head=head.next;\n            head.prev=null;\n        }\n        listSize--;\n    }\n\n    public void insertLast(char c) {\n        if(isEmpty()) insertFirst(c);\n        else {\n            ListNode node = new ListNode();\n\n            tail.next=node;\n\n            node.data=c;\n            node.n++;\n            node.prev=tail;\n            node.next=null;\n\n            tail=node;\n\n            listSize++;\n        }\n\n    }\n\n    public void removeLast() {\n        if(isEmpty()) System.out.println(\"The list is Empty\");\n        else if(head.next==null) removeFirst();\n        else {\n            tail=tail.prev;\n            tail.next=null;\n        }\n        listSize--;\n    }\n    public ListNode charExists(char c,ListNode pivot) {\n        boolean found=false;\n        pivot=null;\n        if(!isEmpty()) {\n            ListNode node=head;\n            while(!found && node!=null) {\n                if(node.data==c) {\n                    found=true;\n                    pivot=node;\n                }\n                else node=node.next;\n            }\n        }\n        return pivot;\n    }\n\n    public void traverse(float plentyChars) {\n        for(ListNode i=head; i!=null; i=i.next) {\n            if(!(i.data==' ')) System.out.print(i.data+\" \");\n            else System.out.print(\"space\"+\" \");\n            System.out.printf(\"%.2f\",(i.n/plentyChars)*100 );\n            System.out.println(\" %\");\n        }\n    }\n    //************\n    public void increaseCharNum(ListNode listNode) {\n        listNode.n++;\n    }\n\n    public void bubbleChars() {\n        ListNode j=null;\n        ListNode piv=null;\n        char min;\n\n        for(ListNode i=head; i!=null; i=i.next) {\n            min= (char) 127;\n            for(j=i;j!=null;j=j.next) {\n                if(j.data<min) {\n                    min=j.data;\n                    piv=j;\n                }\n            }\n            swap(i,piv);\n        }\n    }\n\n    public void bubbleFrequencies() {\n        ListNode j=null;\n        ListNode piv=null;\n\n        for (ListNode i=head;i!=null;i=i.next) {\n            int max =Integer.MIN_VALUE;\n\n            for(j=i;j!=null;j=j.next) {\n\n                if(j.n>max) {\n                    max=j.n;\n                    piv=j;\n                }\n            }\n            swap(i,piv);\n        }\n    }\n\n    static void swap(ListNode i,ListNode j) {\n        try {\n            char tmpChar=i.data;\n            int tmpNum=i.n;\n\n            i.data=j.data;\n            i.n=j.n;\n            j.data=tmpChar;\n            j.n=tmpNum;\n        }catch(NullPointerException e1) {\n            e1.printStackTrace();\n        }\n\n    }\n\n    private boolean isEmpty() {\n\n        if(head==null && tail==null) return true;\n        return false;\n    }\n\n    public int size() {\n        return listSize;\n    }\n\n}\n\n\nclass ListNode{\n    public char data;\n    public int n;\n    public ListNode next;\n    public ListNode prev;\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class DoublyListTest {\n\n    @Test\n    public void testInsertFirst() {\n        DoublyList list = new DoublyList();\n        list.insertFirst('a');\n        list.insertFirst('b');\n        list.insertFirst('c');\n        assertEquals(3, list.size());\n    }\n\n    @Test\n    public void testRemoveFirst() {\n        DoublyList list = new DoublyList();\n        list.insertFirst('a');\n        list.insertFirst('b');\n        list.insertFirst('c');\n        list.removeFirst();\n        assertEquals(2, list.size());\n        assertEquals('b', list.head.data);\n    }\n\n    @Test\n    public void testInsertLast() {\n        DoublyList list = new DoublyList();\n        list.insertLast('a');\n        list.insertLast('b');\n        list.insertLast('c');\n        assertEquals(3, list.size());\n    }\n\n    @Test\n    public void testRemoveLast() {\n        DoublyList list = new DoublyList();\n        list.insertLast('a');\n        list.insertLast('b');\n        list.insertLast('c');\n        list.removeLast();\n        assertEquals(2, list.size());\n        assertEquals('b', list.tail.data);\n    }\n\n    @Test\n    public void testCharExists() {\n        DoublyList list = new DoublyList();\n        list.insertFirst('a');\n        list.insertFirst('b');\n        list.insertFirst('c');\n        ListNode node = list.charExists('a', null);\n        assertEquals('a', node.data);\n    }\n\n    @Test\n    public void testTraverse() {\n        DoublyList list = new DoublyList();\n        list.insertFirst('a');\n        list.insertFirst('b');\n        list.insertFirst('c');\n        list.traverse(3);\n        // Output should be:\n        // c 33.33%\n        // b 33.33%\n        // a 33.33%\n    }\n\n    @Test\n    public void testIncreaseCharNum() {\n        DoublyList list = new DoublyList();\n        ListNode node = new ListNode();\n        node.data = 'a';\n        node.n = 1;\n        list.increaseCharNum(node);\n        assertEquals(2, node.n);\n    }\n\n    @Test\n    public void testBubbleChars() {\n        DoublyList list = new DoublyList();\n        list.insertFirst('c');\n        list.insertFirst('a');\n        list.insertFirst('b');\n        list.bubbleChars();\n        assertEquals('a', list.head.data);\n        assertEquals('c', list.tail.data);\n    }\n\n    @Test\n    public void testBubbleFrequencies() {\n        DoublyList list = new DoublyList();\n        list.insertFirst('a');\n        list.insertFirst('b');\n        list.insertFirst('c');\n        list.insertLast('b');\n        list.insertLast('a');\n        list.insertLast('a');\n        list.bubbleFrequencies();\n        assertEquals('a', list.head.data);\n        assertEquals('c', list.tail.data);\n    }\n\n}\n"}
{"code_source": "public class MyClass155 {\n    import java.util.Scanner;\n    public class ganjil_genap {\n        public static void genap(String[] args) {\n            Scanner input=new Scanner(System.in);\n\n            int pilihan, awal, akhir;\n\n            System.out.println(\"=========================================\");\n            System.out.println(\"MENAMPILKAN DERET BILANGAN GANJIL & GENAP\");\n            System.out.println(\"=========================================\");\n            System.out.print(\"Masukan Bilangan Awal : \");\n            awal=input.nextInt();\n            System.out.print(\"Masukan Bilangan Akhir : \");\n            akhir=input.nextInt();\n            System.out.println(\"\\nPilihan: \\n[1. Ganjil]\\n[2. Genap]\");\n            System.out.print(\"Masukan Pilihan Anda : \");\n            pilihan=input.nextInt();\n            System.out.println(\"-----------------------------------------\");\n\n            switch (pilihan){\n                case 1 :\n                    System.out.println(\"Deret Bilangan Ganjil\");\n                    for(int i=awal;i<=akhir;i++){\n                        if (i%2!=0)\n                            System.out.print(i+\" \");\n                    }\n                    break;\n                case 2 :\n                    System.out.println(\"Deret Bilangan Genap\");\n                    for(int i=awal;i<=akhir;i++){\n                        if (i%2==0)\n                            System.out.print(i+\" \");\n                    }\n                    break;\n            }\n            System.out.println(\"\");\n        }\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport static org.junit.Assert.assertEquals;\n\npublic class ganjil_genapTest {\n    @Test\n    public void testGenap() {\n        ByteArrayInputStream in = new ByteArrayInputStream(\"2\\n1\\n10\\n2\\n\".getBytes());\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        System.setIn(in);\n        System.setOut(new PrintStream(out));\n\n        ganjil_genap.genap(null);\n\n        String expectedOutput = \"=========================================\\r\\n\" +\n                \"MENAMPILKAN DERET BILANGAN GANJIL & GENAP\\r\\n\" +\n                \"=========================================\\r\\n\" +\n                \"Masukan Bilangan Awal : Masukan Bilangan Akhir : \\r\\n\" +\n                \"\\nPilihan: \\n[1. Ganjil]\\n[2. Genap]\\r\\n\" +\n                \"Masukan Pilihan Anda : -----------------------------------------\\r\\n\" +\n                \"Deret Bilangan Genap\\r\\n\" +\n                \"2 4 6 8 10 \\r\\n\";\n\n        assertEquals(expectedOutput, out.toString());\n    }\n\n    @Test\n    public void testGanjil() {\n        ByteArrayInputStream in = new ByteArrayInputStream(\"1\\n1\\n10\\n1\\n\".getBytes());\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        System.setIn(in);\n        System.setOut(new PrintStream(out));\n\n        ganjil_genap.genap(null);\n\n        String expectedOutput = \"=========================================\\r\\n\" +\n                \"MENAMPILKAN DERET BILANGAN GANJIL & GENAP\\r\\n\" +\n                \"=========================================\\r\\n\" +\n                \"Masukan Bilangan Awal : Masukan Bilangan Akhir : \\r\\n\" +\n                \"\\nPilihan: \\n[1. Ganjil]\\n[2. Genap]\\r\\n\" +\n                \"Masukan Pilihan Anda : -----------------------------------------\\r\\n\" +\n                \"Deret Bilangan Ganjil\\r\\n\" +\n                \"1 3 5 7 9 \\r\\n\";\n\n        assertEquals(expectedOutput, out.toString());\n    }\n}\n"}
{"code_source": "import java.util.Scanner;\npublic class bubble_sort\n{\n    public static void bubb(String[]args)\n    {\n        int jumlah, i, j, swap;\n        Scanner input = new Scanner(System.in);\n\n        System.out.println(\"=========================================\");\n        System.out.println(\"MENGURUTKAN BILANGAN TERKECIL KE TERBESAR\");\n        System.out.println(\"------- DENGAN METODE BUBBLE SORT -------\");\n        System.out.println(\"=========================================\");\n        System.out.print(\"\\nMasukan Jumlah Bilangan = \");\n        jumlah = input.nextInt();\n\n        int array[] = new int[jumlah];\n\n        for(i=0; i<jumlah;i++)\n        {\n            System.out.print(\"Bilangan Ke-\" + (i+1)+\" = \");\n            array[i]=input.nextInt();\n        }\n\n        System.out.print(\"\\nList Bilangan yang Anda Masukan = \");\n        for(int a=0;a<jumlah;a++)\n        {\n            System.out.print(array[a] +\" \");\n        }\n\n        for(i=0; i<(jumlah-1);i++)\n        {\n            for(j=0;j<jumlah-i-1;j++)\n            {\n                if (array[j] > array[j+1])\n                {\n                    swap = array[j];\n                    array[j] = array[j+1];\n                    array[j+1]=swap;\n                }\n            }\n        }\n\n        System.out.print(\"\\n\\nHasil Pengurutan = \");\n        for(i=0;i<jumlah; i++)\n            System.out.print(array[i] +\" \");\n        System.out.println(\"\\n\");\n    }\n}\n", "test_case": "import org.junit.jupiter.api.Test;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass bubble_sortTest {\n\n    @Test\n    void testBubbleSort() {\n        String input = \"5\\n7\\n2\\n9\\n1\\n6\\n\";\n        InputStream in = new ByteArrayInputStream(input.getBytes());\n        System.setIn(in);\n\n        bubble_sort.bubb(new String[0]);\n\n        String expectedOutput = \"=========================================\\n\" +\n                \"MENGURUTKAN BILANGAN TERKECIL KE TERBESAR\\n\" +\n                \"------- DENGAN METODE BUBBLE SORT -------\\n\" +\n                \"=========================================\\n\" +\n                \"\\nMasukan Jumlah Bilangan = \" +\n                \"\\nList Bilangan yang Anda Masukan = 7 2 9 1 6 \" +\n                \"\\n\\nHasil Pengurutan = 1 2 6 7 9 \\n\\n\";\n\n        assertEquals(expectedOutput, outContent.toString());\n    }\n}\n"}
{"code_source": "import java.util.Scanner;\npublic class selection_sort\n{\n    public static void rr(String[]args)\n    {\n        int jumlah, i, j, p, swap;\n        Scanner input = new Scanner(System.in);\n\n        System.out.println(\"=========================================\");\n        System.out.println(\"MENGURUTKAN BILANGAN TERKECIL KE TERBESAR\");\n        System.out.println(\"-----  DENGAN METODE SELECTION SORT -----\");\n        System.out.println(\"=========================================\");\n        System.out.print(\"\\nMasukan Jumlah Bilangan = \");\n        jumlah = input.nextInt();\n\n        int array[] = new int[jumlah];\n\n        for(i=0; i<jumlah; i++)\n        {\n            System.out.print(\"Bilangan Ke-\" + (i+1)+\" = \");\n            array[i]=input.nextInt();\n        }\n\n        System.out.print(\"\\nList Bilangan yang Anda Masukan = \");\n        for(int a=0; a<jumlah; a++)\n        {\n            System.out.print(array[a] +\" \");\n        }\n\n        for(i=0; i<=jumlah-1; i++)\n        {\n            p=i;\n            for(j=i+1; j<jumlah; j++)\n            {\n                if(array[p] > array[j])\n                {\n                    p=j;\n                }\n            }\n            if(p != i)\n            {\n                swap = array[i];\n                array[i] = array[p];\n                array[p] = swap;\n            }\n        }\n        System.out.print(\"\\n\\nHasil Pengurutan = \");\n        for(i=0; i<jumlah; i++)\n            System.out.print(array[i] +\" \");\n        System.out.println(\"\\n\");\n    }\n}", "test_case": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\n\npublic class selection_sortTest {\n\n    @Test\n    public void testSelectionSort() {\n\n        // Prepare test input\n        String input = \"6\\n3\\n6\\n2\\n4\\n1\\n5\\n\";\n        InputStream in = new ByteArrayInputStream(input.getBytes());\n        System.setIn(in);\n\n        // Expected output\n        String expectedOutput =\n                \"=========================================\\n\" +\n                        \"MENGURUTKAN BILANGAN TERKECIL KE TERBESAR\\n\" +\n                        \"-----  DENGAN METODE SELECTION SORT -----\\n\" +\n                        \"=========================================\\n\" +\n                        \"\\nMasukan Jumlah Bilangan = \\n\" +\n                        \"List Bilangan yang Anda Masukan = 3 6 2 4 1 5 \\n\" +\n                        \"\\n\\nHasil Pengurutan = 1 2 3 4 5 6 \\n\\n\";\n\n        // Redirect console output to a stream\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        // Call the method to test\n        selection_sort.rr(new String[0]);\n\n        // Assert that the console output matches the expected output\n        assertEquals(expectedOutput, outContent.toString());\n    }\n}\n"}
{"code_source": "import java.util.Scanner;\npublic class bmi_calculator {\n    public static void bmi(String[] args) {\n\n        System.out.println(\"===============================\");\n        System.out.println(\"CALCULATE BODY MASS INDEX (BMI)\");\n        System.out.println(\"===============================\");\n\n        float height, weight, konversi_height, bmi;\n        Scanner input = new Scanner(System.in);\n\n        System.out.print(\"Enter your height in cm: \");\n        height = input.nextFloat();\n\n        System.out.print(\"Enter your weight in kg: \");\n        weight = input.nextFloat();\n        konversi_height = height/100;\n\n        bmi = weight/(konversi_height*konversi_height);\n\n        System.out.printf(\"\\nYour Body Mass Index is \" + bmi);\n        System.out.println(\"\");\n\n        if (bmi <= 18.4)\n            System.out.println(\"You are underweight.\");\n        else if (bmi <= 24.9)\n            System.out.println(\"You are healthy.\");\n        else if (bmi <= 29.9)\n            System.out.println(\"You are overweight.\");\n        else if (bmi <= 34.9)\n            System.out.println(\"You are severely overweight.\");\n        else if (bmi <= 39.9)\n            System.out.println(\"You are obese.\");\n        else\n            System.out.println(\"You are severely obese.\");\n    }\n}\n", "test_case": "import org.junit.Test;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class bmi_calculatorTest {\n\n    @Test\n    public void testBMI() {\n        String input = \"170\\n70\\n\";\n        ByteArrayInputStream in = new ByteArrayInputStream(input.getBytes());\n        System.setIn(in);\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        bmi_calculator.bmi(new String[]{});\n\n        String expectedOutput = \"===============================\\n\" +\n                \"CALCULATE BODY MASS INDEX (BMI)\\n\" +\n                \"===============================\\n\" +\n                \"Enter your height in cm: \" +\n                \"Enter your weight in kg: \" +\n                \"\\nYour Body Mass Index is 24.221453\\n\" +\n                \"You are healthy.\\n\";\n\n        assertEquals(expectedOutput, outContent.toString());\n    }\n}\n"}
{"code_source": "import java.util.Scanner;\npublic class konversi_mil_km\n{\n    public static void oo(String args[])\n    {\n        Scanner input = new Scanner(System.in);\n        int pil, mil, km;\n        double hasil_mil, hasil_km;\n        System.out.println(\"=============================\");\n        System.out.println(\"KONVERSI MIL --><-- KILOMETER\");\n        System.out.println(\"-----------------------------\");\n        System.out.println(\"[1] Konversi Mil ke Kilometer\");\n        System.out.println(\"[2] Konversi Kilometer ke Mil\");\n        System.out.println(\"=============================\");\n        System.out.print(\"\\nMasukan pilihan Anda : \");\n        pil = input.nextInt();\n\n        if (pil == 1) {\n            System.out.print(\"Masukan satuan jarak (Mil) = \");\n            mil = input.nextInt();\n            hasil_km = mil/0.621371;\n            System.out.println(\"\\nJadi \"+mil+\" Mil = \"+hasil_km+\" Kilometer\");\n        } else if (pil == 2) {\n            System.out.print(\"Masukan satuan jarak (KM) = \");\n            km = input.nextInt();\n            hasil_mil = km*0.621371;\n            System.out.println(\"\\nJadi \"+km+\" Kilometer = \"+hasil_mil+\" Mil\");\n        } else {\n            System.out.println(\"Pilih input yang Benar [1 / 2]\");\n        }\n    }\n}\n", "test_case": "import org.junit.Test;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport static org.junit.Assert.assertEquals;\n\npublic class konversi_mil_kmTest {\n\n    @Test\n    public void testKonversiMilToKm() {\n        String input = \"1\\n10\\n\";\n        InputStream in = new ByteArrayInputStream(input.getBytes());\n        System.setIn(in);\n        konversi_mil_km.oo(new String[] {});\n        String expectedOutput = \"\\nJadi 10 Mil = 16.09344 Kilometer\\n\";\n        assertEquals(expectedOutput, System.out.toString());\n    }\n\n    @Test\n    public void testKonversiKmToMil() {\n        String input = \"2\\n20\\n\";\n        InputStream in = new ByteArrayInputStream(input.getBytes());\n        System.setIn(in);\n        konversi_mil_km.oo(new String[] {});\n        String expectedOutput = \"\\nJadi 20 Kilometer = 12.42742 Mil\\n\";\n        assertEquals(expectedOutput, System.out.toString());\n    }\n\n    @Test\n    public void testInvalidInput() {\n        String input = \"3\\n\";\n        InputStream in = new ByteArrayInputStream(input.getBytes());\n        System.setIn(in);\n        konversi_mil_km.oo(new String[] {});\n        String expectedOutput = \"Pilih input yang Benar [1 / 2]\\n\";\n        assertEquals(expectedOutput, System.out.toString());\n    }\n}\n"}
{"code_source": "public class MyClass16 {\n    public static int sumOfSquares(int n) {\n        return n * (n + 1) * (2 * n + 1) / 6;\n    }\n\n\n}\n", "test_case": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClass16Test {\n    @Test\n    public void testSumOfSquares() {\n        assertEquals(1, MyClass16.sumOfSquares(1));\n        assertEquals(5, MyClass16.sumOfSquares(2));\n        assertEquals(14, MyClass16.sumOfSquares(3));\n        assertEquals(30, MyClass16.sumOfSquares(4));\n        assertEquals(55, MyClass16.sumOfSquares(5));\n        assertEquals(385, MyClass16.sumOfSquares(10));\n        assertEquals(338350, MyClass16.sumOfSquares(50));\n        assertEquals(25502500, MyClass16.sumOfSquares(100));\n        assertEquals(429483622, MyClass16.sumOfSquares(1000));\n    }\n}\n"}
{"code_source": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class konversi_suhu\n{\n    private static double celsiusToKelvin(double C) {\n        return C + 273.15;\n    }\n    private static double celsiusToFahrenheit(double C) {\n        return C * 1.8 + 32;\n    }\n    private static double celsiusToReamur(double C) {\n        return C * 0.8;\n    }\n    private static double kelvinToCelsius(double K) {\n        return K - 273.15;\n    }\n    private static double kelvinToFahrenheit(double K) {\n        return K * 1.8 - 459.67;\n    }\n    private static double kelvinToReamur(double K) {\n        return (K - 273.15) * 0.8;\n    }\n    private static double fahrenheitToCelsius(double F) {\n        return (F - 32) / 1.8;\n    }\n    private static double fahrenheitToKelvin(double F) {\n        return (F + 459.67) / 1.8;\n    }\n    private static double fahrenheitToReamur(double F) {\n        return (F - 32) * 0.44;\n    }\n    private static double reamurToCelsius(double R) {\n        return R / 0.8;\n    }\n    private static double reamurToKelvin(double R) {\n        return R / 0.8 + 273.15;\n    }\n    private static double reamurToFahrenheit(double R) {\n        return R * 2.25 + 32;\n    }\n    private static void menuList() {\n        System.out.println(\"================================\");\n        System.out.println(\"\\t Konversi Suhu\");\n        System.out.println(\"================================\");\n        System.out.println(\"[1] Dari Celsius\");\n        System.out.println(\"[2] Dari Kelvin\");\n        System.out.println(\"[3] Dari Fahrenheit\");\n        System.out.println(\"[4] Dari Reamur\");\n        System.out.println(\"[5] Keluar\");\n\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader bufferedReader = new BufferedReader(isr);\n\n        try {\n            System.out.print(\"\\nMasukan Pilihan Anda = \");\n            String input = bufferedReader.readLine();\n\n            if (input.isEmpty()) {\n                System.out.println(\"\\nAnda tidak memasukkan inputan, silahkan coba lagi.\\n\");\n                menuList();\n            } else {\n                int numberOfString = Integer.parseInt(input);\n\n                if (numberOfString == 1) {\n                    fromCelsius();\n                } else if (numberOfString == 2) {\n                    fromKelvin();\n                } else if (numberOfString == 3) {\n                    fromFahrenheit();\n                } else if (numberOfString == 4) {\n                    fromReamur();\n                } else if (numberOfString == 5) {\n                    System.out.println(\"\\nThank You For Using This Application.\\n\");\n                } else {\n                    System.out.println(\"\\nInputan yang Anda masukkan salah. Silahkan coba lagi.\\n\");\n                    menuList();\n                }\n            }\n        } catch (NumberFormatException | IOException e) {\n            System.out.println(\"\\nInputan yang Anda masukkan salah. Silahkan coba lagi.\\n\");\n            menuList();\n        }\n    }\n\n    private static void fromCelsius() {\n        String coba;\n        do {\n            double suhu;\n            System.out.print(\"\\nMasukan suhu (C) = \");\n            Scanner scanner = new Scanner(System.in);\n            suhu = scanner.nextDouble();\n            DecimalFormat df = new DecimalFormat(\"#.#####\");\n            df.setRoundingMode(RoundingMode.CEILING);\n            double resultCtk = celsiusToKelvin(suhu);\n            System.out.println(\"\");\n            System.out.println((df.format(suhu)) + \" Celsius = \" + (df.format(resultCtk)) + \" Kelvin\");\n            double resultCtf = celsiusToFahrenheit(suhu);\n            System.out.println((df.format(suhu)) + \" Celsius = \" + (df.format(resultCtf)) + \" Fahrenheit\");\n            double resultCtr = celsiusToReamur(suhu);\n            System.out.println((df.format(suhu)) + \" Celsius = \" + (df.format(resultCtr)) + \" Reamur\");\n            System.out.print(\"\\nIngin mencoba lagi? (y/t) = \");\n            coba = scanner.next();\n        } while (coba.equals(\"Y\") || coba.equals(\"y\"));\n        System.out.println(\"\\n\");\n        menuList();\n    }\n\n    private static void fromKelvin() {\n        String coba;\n        do {\n            double suhu;\n            System.out.print(\"\\nMasukan suhu (K) = \");\n            Scanner scanner = new Scanner(System.in);\n            suhu = scanner.nextDouble();\n            DecimalFormat df = new DecimalFormat(\"#.#####\");\n            df.setRoundingMode(RoundingMode.CEILING);\n            double resultKtc = kelvinToCelsius(suhu);\n            System.out.println(\"\");\n            System.out.println((df.format(suhu)) + \" Kelvin = \" + (df.format(resultKtc)) + \" Celsius\");\n            double resultKtf = kelvinToFahrenheit(suhu);\n            System.out.println((df.format(suhu)) + \" Kelvin = \" + (df.format(resultKtf)) + \" Fahrenheit\");\n            double resultKtr = kelvinToReamur(suhu);\n            System.out.println((df.format(suhu)) + \" Kelvin = \" + (df.format(resultKtr)) + \" Reamur\");\n            System.out.print(\"\\nIngin mencoba lagi? (y/t) = \");\n            coba = scanner.next();\n        } while (coba.equals(\"Y\") || coba.equals(\"y\"));\n        System.out.println(\"\\n\");\n        menuList();\n    }\n\n    private static void fromFahrenheit() {\n        String coba;\n        do {\n            double suhu;\n            System.out.print(\"\\nMasukan suhu (F) = \");\n            Scanner scanner = new Scanner(System.in);\n            suhu = scanner.nextDouble();\n            DecimalFormat df = new DecimalFormat(\"#.#####\");\n            df.setRoundingMode(RoundingMode.CEILING);\n            double resultFtc = fahrenheitToCelsius(suhu);\n            System.out.println(\"\");\n            System.out.println((df.format(suhu)) + \" Fahrenheit = \" + (df.format(resultFtc)) + \" Celsius\");\n            double resultFtk = fahrenheitToKelvin(suhu);\n            System.out.println((df.format(suhu)) + \" Fahrenheit = \" + (df.format(resultFtk)) + \" Kelvin\");\n            double resultFtr = fahrenheitToReamur(suhu);\n            System.out.println((df.format(suhu)) + \" Fahrenheit = \" + (df.format(resultFtr)) + \" Reamur\");\n            System.out.print(\"\\nIngin mencoba lagi? (y/t) = \");\n            coba = scanner.next();\n        } while (coba.equals(\"Y\") || coba.equals(\"y\"));\n        System.out.println(\"\\n\");\n        menuList();\n    }\n\n    private static void fromReamur() {\n        String coba;\n        do {\n            double suhu;\n            System.out.print(\"\\nMasukan suhu (R) = \");\n            Scanner scanner = new Scanner(System.in);\n            suhu = scanner.nextDouble();\n            DecimalFormat df = new DecimalFormat(\"#.#####\");\n            df.setRoundingMode(RoundingMode.CEILING);\n            double resultRtc = reamurToCelsius(suhu);\n            System.out.println(\"\");\n            System.out.println((df.format(suhu)) + \" Reamur = \" + (df.format(resultRtc)) + \" Celsius\");\n            double resultRtk = reamurToKelvin(suhu);\n            System.out.println((df.format(suhu)) + \" Reamur = \" + (df.format(resultRtk)) + \" Kelvin\");\n            double resultRtf = reamurToFahrenheit(suhu);\n            System.out.println((df.format(suhu)) + \" Reamur = \" + (df.format(resultRtf)) + \" Fahrenheit\");\n            System.out.print(\"\\nIngin mencoba lagi? (y/t) = \");\n            coba = scanner.next();\n        } while (coba.equals(\"Y\") || coba.equals(\"y\"));\n        System.out.println(\"\\n\");\n        menuList();\n    }\n\n\n}\n", "test_case": "import org.junit.jupiter.api.Test;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.PrintStream;\nimport java.util.NoSuchElementException;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class konversi_suhuTest {\n\n    @Test\n    public void testMenuList() {\n        String input = \"1\\n\";\n        InputStream in = new ByteArrayInputStream(input.getBytes());\n        System.setIn(in);\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        konversi_suhu.menuList();\n\n        String expectedOutput = \"================================\\n\" +\n                \"\\t Konversi Suhu\\n\" +\n                \"================================\\n\" +\n                \"[1] Dari Celsius\\n\" +\n                \"[2] Dari Kelvin\\n\" +\n                \"[3] Dari Fahrenheit\\n\" +\n                \"[4] Dari Reamur\\n\" +\n                \"[5] Keluar\\n\" +\n                \"\\n\" +\n                \"Masukan Pilihan Anda = \\n\" +\n                \"\\n\" +\n                \"Masukan suhu (C) = \\n\" +\n                \"Inputan yang Anda masukkan salah. Silahkan coba lagi.\\n\" +\n                \"================================\\n\" +\n                \"\\t Konversi Suhu\\n\" +\n                \"================================\\n\" +\n                \"[1] Dari Celsius\\n\" +\n                \"[2] Dari Kelvin\\n\" +\n                \"[3] Dari Fahrenheit\\n\" +\n                \"[4] Dari Reamur\\n\" +\n                \"[5] Keluar\\n\" +\n                \"\\n\" +\n                \"Masukan Pilihan Anda = \\n\" +\n                \"\\n\" +\n                \"Masukan suhu (C) = \\n\" +\n                \"Anda tidak memasukkan inputan, silahkan coba lagi.\\n\" +\n                \"================================\\n\" +\n                \"\\t Konversi Suhu\\n\" +\n                \"================================\\n\" +\n                \"[1] Dari Celsius\\n\" +\n                \"[2] Dari Kelvin\\n\" +\n                \"[3] Dari Fahrenheit\\n\" +\n                \"[4] Dari Reamur\\n\" +\n                \"[5] Keluar\\n\" +\n                \"\\n\" +\n                \"Masukan Pilihan Anda = \\n\" +\n                \"\\n\" +\n                \"Masukan suhu (C) = \\n\" +\n                \"\\n\" +\n                \"Ingin mencoba lagi? (y/t) = \\n\" +\n                \"\\n\" +\n                \"================================\\n\" +\n                \"\\t Konversi Suhu\\n\" +\n                \"================================\\n\" +\n                \"[1] Dari Celsius\\n\" +\n                \"[2] Dari Kelvin\\n\" +\n                \"[3] Dari Fahrenheit\\n\" +\n                \"[4] Dari Reamur\\n\" +\n                \"[5] Keluar\\n\" +\n                \"\\n\" +\n                \"Masukan Pilihan Anda = \\n\" +\n                \"\\n\" +\n                \"Thank You For Using This Application.\\n\" +\n                \"\\n\";\n\n        assertEquals(expectedOutput, outContent.toString());\n    }\n\n    @Test\n    public void testFromCelsius() {\n        String input = \"25\\ny\\n\";\n        InputStream in = new ByteArrayInputStream(input.getBytes());\n        System.setIn(in);\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        konversi_suhu.fromCelsius();\n\n        String expectedOutput = \"Masukan suhu (C) = \\n\" +\n                \"25 Celsius = 298.15 Kelvin\n"}
{"code_source": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class MyClass161\n{\n    private static double celsiusToKelvin(double C) {\n        return C + 273.15;\n    }\n    private static double celsiusToFahrenheit(double C) {\n        return C * 1.8 + 32;\n    }\n    private static double celsiusToReamur(double C) {\n        return C * 0.8;\n    }\n    private static double kelvinToCelsius(double K) {\n        return K - 273.15;\n    }\n    private static double kelvinToFahrenheit(double K) {\n        return K * 1.8 - 459.67;\n    }\n    private static double kelvinToReamur(double K) {\n        return (K - 273.15) * 0.8;\n    }\n    private static double fahrenheitToCelsius(double F) {\n        return (F - 32) / 1.8;\n    }\n    private static double fahrenheitToKelvin(double F) {\n        return (F + 459.67) / 1.8;\n    }\n    private static double fahrenheitToReamur(double F) {\n        return (F - 32) * 0.44;\n    }\n    private static double reamurToCelsius(double R) {\n        return R / 0.8;\n    }\n    private static double reamurToKelvin(double R) {\n        return R / 0.8 + 273.15;\n    }\n    private static double reamurToFahrenheit(double R) {\n        return R * 2.25 + 32;\n    }\n    private static void menuList() {\n        System.out.println(\"================================\");\n        System.out.println(\"\\t Konversi Suhu\");\n        System.out.println(\"================================\");\n        System.out.println(\"[1] Dari Celsius\");\n        System.out.println(\"[2] Dari Kelvin\");\n        System.out.println(\"[3] Dari Fahrenheit\");\n        System.out.println(\"[4] Dari Reamur\");\n        System.out.println(\"[5] Keluar\");\n\n        InputStreamReader isr = new InputStreamReader(System.in);\n        BufferedReader bufferedReader = new BufferedReader(isr);\n\n        try {\n            System.out.print(\"\\nMasukan Pilihan Anda = \");\n            String input = bufferedReader.readLine();\n\n            if (input.isEmpty()) {\n                System.out.println(\"\\nAnda tidak memasukkan inputan, silahkan coba lagi.\\n\");\n                menuList();\n            } else {\n                int numberOfString = Integer.parseInt(input);\n\n                if (numberOfString == 1) {\n                    fromCelsius();\n                } else if (numberOfString == 2) {\n                    fromKelvin();\n                } else if (numberOfString == 3) {\n                    fromFahrenheit();\n                } else if (numberOfString == 4) {\n                    fromReamur();\n                } else if (numberOfString == 5) {\n                    System.out.println(\"\\nThank You For Using This Application.\\n\");\n                } else {\n                    System.out.println(\"\\nInputan yang Anda masukkan salah. Silahkan coba lagi.\\n\");\n                    menuList();\n                }\n            }\n        } catch (NumberFormatException | IOException e) {\n            System.out.println(\"\\nInputan yang Anda masukkan salah. Silahkan coba lagi.\\n\");\n            menuList();\n        }\n    }\n\n    private static void fromCelsius() {\n        String coba;\n        do {\n            double suhu;\n            System.out.print(\"\\nMasukan suhu (C) = \");\n            Scanner scanner = new Scanner(System.in);\n            suhu = scanner.nextDouble();\n            DecimalFormat df = new DecimalFormat(\"#.#####\");\n            df.setRoundingMode(RoundingMode.CEILING);\n            double resultCtk = celsiusToKelvin(suhu);\n            System.out.println(\"\");\n            System.out.println((df.format(suhu)) + \" Celsius = \" + (df.format(resultCtk)) + \" Kelvin\");\n            double resultCtf = celsiusToFahrenheit(suhu);\n            System.out.println((df.format(suhu)) + \" Celsius = \" + (df.format(resultCtf)) + \" Fahrenheit\");\n            double resultCtr = celsiusToReamur(suhu);\n            System.out.println((df.format(suhu)) + \" Celsius = \" + (df.format(resultCtr)) + \" Reamur\");\n            System.out.print(\"\\nIngin mencoba lagi? (y/t) = \");\n            coba = scanner.next();\n        } while (coba.equals(\"Y\") || coba.equals(\"y\"));\n        System.out.println(\"\\n\");\n        menuList();\n    }\n\n    private static void fromKelvin() {\n        String coba;\n        do {\n            double suhu;\n            System.out.print(\"\\nMasukan suhu (K) = \");\n            Scanner scanner = new Scanner(System.in);\n            suhu = scanner.nextDouble();\n            DecimalFormat df = new DecimalFormat(\"#.#####\");\n            df.setRoundingMode(RoundingMode.CEILING);\n            double resultKtc = kelvinToCelsius(suhu);\n            System.out.println(\"\");\n            System.out.println((df.format(suhu)) + \" Kelvin = \" + (df.format(resultKtc)) + \" Celsius\");\n            double resultKtf = kelvinToFahrenheit(suhu);\n            System.out.println((df.format(suhu)) + \" Kelvin = \" + (df.format(resultKtf)) + \" Fahrenheit\");\n            double resultKtr = kelvinToReamur(suhu);\n            System.out.println((df.format(suhu)) + \" Kelvin = \" + (df.format(resultKtr)) + \" Reamur\");\n            System.out.print(\"\\nIngin mencoba lagi? (y/t) = \");\n            coba = scanner.next();\n        } while (coba.equals(\"Y\") || coba.equals(\"y\"));\n        System.out.println(\"\\n\");\n        menuList();\n    }\n\n    private static void fromFahrenheit() {\n        String coba;\n        do {\n            double suhu;\n            System.out.print(\"\\nMasukan suhu (F) = \");\n            Scanner scanner = new Scanner(System.in);\n            suhu = scanner.nextDouble();\n            DecimalFormat df = new DecimalFormat(\"#.#####\");\n            df.setRoundingMode(RoundingMode.CEILING);\n            double resultFtc = fahrenheitToCelsius(suhu);\n            System.out.println(\"\");\n            System.out.println((df.format(suhu)) + \" Fahrenheit = \" + (df.format(resultFtc)) + \" Celsius\");\n            double resultFtk = fahrenheitToKelvin(suhu);\n            System.out.println((df.format(suhu)) + \" Fahrenheit = \" + (df.format(resultFtk)) + \" Kelvin\");\n            double resultFtr = fahrenheitToReamur(suhu);\n            System.out.println((df.format(suhu)) + \" Fahrenheit = \" + (df.format(resultFtr)) + \" Reamur\");\n            System.out.print(\"\\nIngin mencoba lagi? (y/t) = \");\n            coba = scanner.next();\n        } while (coba.equals(\"Y\") || coba.equals(\"y\"));\n        System.out.println(\"\\n\");\n        menuList();\n    }\n\n    private static void fromReamur() {\n        String coba;\n        do {\n            double suhu;\n            System.out.print(\"\\nMasukan suhu (R) = \");\n            Scanner scanner = new Scanner(System.in);\n            suhu = scanner.nextDouble();\n            DecimalFormat df = new DecimalFormat(\"#.#####\");\n            df.setRoundingMode(RoundingMode.CEILING);\n            double resultRtc = reamurToCelsius(suhu);\n            System.out.println(\"\");\n            System.out.println((df.format(suhu)) + \" Reamur = \" + (df.format(resultRtc)) + \" Celsius\");\n            double resultRtk = reamurToKelvin(suhu);\n            System.out.println((df.format(suhu)) + \" Reamur = \" + (df.format(resultRtk)) + \" Kelvin\");\n            double resultRtf = reamurToFahrenheit(suhu);\n            System.out.println((df.format(suhu)) + \" Reamur = \" + (df.format(resultRtf)) + \" Fahrenheit\");\n            System.out.print(\"\\nIngin mencoba lagi? (y/t) = \");\n            coba = scanner.next();\n        } while (coba.equals(\"Y\") || coba.equals(\"y\"));\n        System.out.println(\"\\n\");\n        menuList();\n    }\n\n\n}\n\n", "test_case": ""}
{"code_source": "import java.util.Scanner;\npublic class kalkulator\n{\n    public static void cc(String args[])\n    {\n        Scanner input = new Scanner(System.in);\n        int bil1, bil2, pil ,hasil = 0;\n        System.out.println(\"====================\");\n        System.out.println(\"KALKULATOR SEDERHANA\");\n        System.out.println(\"--------------------\");\n        System.out.println(\"1. Perkalian\");\n        System.out.println(\"2. Pembagian\");\n        System.out.println(\"3. Penjumlahan\");\n        System.out.println(\"4. Pengurangan\");\n        System.out.println(\"====================\");\n        System.out.print(\"\\nPilihan Operasi : \");\n        pil=input.nextInt();\n        System.out.print(\"Masukan bilangan pertama : \");\n        bil1=input.nextInt();\n        System.out.print(\"Masukan bilangan kedua   : \");\n        bil2=input.nextInt();\n\n        switch (pil){\n            case 1 : hasil=bil1*bil2;break;\n            case 2 : hasil=bil1/bil2;break;\n            case 3 : hasil=bil1+bil2;break;\n            case 4 : hasil=bil1-bil2;break;\n            default : System.out.println(\"Salah memasukan pilihan\");\n        }\n        System.out.println(\"\\nHasil : \"+hasil);\n        System.out.println(\"\");\n    }\n}", "test_case": "import org.junit.Test;\nimport java.io.ByteArrayInputStream;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class KalkulatorTest {\n\n    @Test\n    public void testPerkalian() {\n        String input = \"1\\n5\\n6\\n\";\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        Kalkulator.cc(new String[] {});\n\n        assertEquals(\"Hasil : 30\\n\\n\", systemOut().getHistory());\n    }\n\n    @Test\n    public void testPembagian() {\n        String input = \"2\\n10\\n2\\n\";\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        Kalkulator.cc(new String[] {});\n\n        assertEquals(\"Hasil : 5\\n\\n\", systemOut().getHistory());\n    }\n\n    @Test\n    public void testPenjumlahan() {\n        String input = \"3\\n4\\n8\\n\";\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        Kalkulator.cc(new String[] {});\n\n        assertEquals(\"Hasil : 12\\n\\n\", systemOut().getHistory());\n    }\n\n    @Test\n    public void testPengurangan() {\n        String input = \"4\\n7\\n2\\n\";\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n\n        Kalkulator.cc(new String[] {});\n\n        assertEquals(\"Hasil : 5\\n\\n\", systemOut().getHistory());\n    }\n\n    private SystemOut systemOut() {\n        return new SystemOut();\n    }\n\n    private static class SystemOut extends SecurityManager {\n        private final StringBuilder history = new StringBuilder();\n\n        public StringBuilder getHistory() {\n            return history;\n        }\n\n        @Override\n        public void checkPermission(java.security.Permission perm) {\n        }\n\n        @Override\n        public void checkPermission(java.security.Permission perm, Object context) {\n        }\n\n        @Override\n        public void checkExit(int status) {\n            super.checkExit(status);\n            throw new SecurityException(Integer.toString(status));\n        }\n\n        @Override\n        public void checkWrite(String file) {\n            history.append(file);\n        }\n\n        @Override\n        public void checkWrite(FileDescriptor fd) {\n        }\n    }\n}\n"}
{"code_source": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\npublic class Class3\n{\n    public static void co(String args[]) {\n        BufferedReader B=new BufferedReader (new InputStreamReader(System.in));\n        int angka [] = new int[100];\n        int urut [] = new int[100];\n        int Modus [][] = new int[100][100];\n        int inputCount=0;\n        int N;\n        int i, a, b, c, d, j, temp;\n\n        //mean\n        float jumlah;\n        float mean=0;\n        try\n        {\n            System.out.println(\"============================\");\n            System.out.println(\"MENENTUKAN MEAN MEDIAN MODUS\");\n            System.out.println(\"============================\");\n            System.out.print(\"\\nMasukan banyaknya data : \");\n            N=Integer.parseInt (B.readLine());\n            System.out.println();\n            jumlah = 0;\n            try\n            {\n                for (i=1; i<=N; i++)\n                {\n                    System.out.print(\"Masukan ke \" + i + \" : \");\n                    angka[i]=Integer.parseInt (B.readLine());\n                    jumlah = jumlah + angka[i];\n                    urut[i] = angka[i];\n                }\n                mean = jumlah/N;\n\n                //pengurutan\n                for (a=1; a<=N; a++) {\n                    b=a;\n                    while ((b>0) && (urut[b] < urut[b-1] )) {\n                        temp = urut[b];\n                        urut[b] = urut[b-1];\n                        urut[b-1] = temp;\n                        b--;\n                    }\n                }\n\n                //median\n                int Nm = N/2;\n                int median = urut[(N+1)/2];\n                int lastEmpty = 1;\n                int posx;\n                for (i=1; i<=N; i++) {\n                    posx = 0;\n                    for (j=1; j<=N; j++) {\n                        if (angka[i] == Modus[j][1]) posx = j;\n                    }\n                    if (posx!=0) {\n                        Modus[posx][2]++;\n                    } else {\n                        Modus[lastEmpty][1] = angka[i];\n                        Modus[lastEmpty][2] = 1;\n                        lastEmpty++;\n                    }\n                }\n\n                //modus\n                int modus = 0;\n                int banyak = 0;\n                for (i=1; i<=N; i++) {\n                    if (Modus[i][2]>banyak) {\n                        modus = Modus[i][1];\n                        banyak = Modus[i][2];\n                    }\n                }\n\n                System.out.println(\"\\nData terurut:\");\n                for (i=1; i<=N; i++) {\n                    System.out.print(\" \"+ urut[i]);\n                }\n\n                System.out.println(\"\\n\");\n                System.out.println(\"Mean   = \" + mean);\n                System.out.println(\"Median = \" + median);\n                System.out.println(\"Modus  = \" + modus);\n                System.out.println(\"\");\n            } catch (IOException e) {\n                System.out.println (\"Error!\" +e);\n            }\n        } catch (IOException e) {\n            System.out.println (\"Error!\" +e);\n        }\n        System.exit(0);\n    }\n}\n\n", "test_case": "import org.junit.Test;\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport static org.junit.Assert.assertEquals;\n\npublic class Class3Test {\n    \n    @Test\n    public void testCo() {\n        String input = \"5\\n1\\n2\\n2\\n3\\n4\\n\";\n        InputStream in = new ByteArrayInputStream(input.getBytes());\n        System.setIn(in);\n\n        Class3.co(null);\n\n        String expectedOutput = \"Mean   = 2.4\\nMedian = 2\\nModus  = 2\\n\";\n        assertEquals(expectedOutput, outContent.toString());\n    }\n}\n"}
{"code_source": "import java.util.Scanner;\npublic class fibonacci\n{\n    public static void ab(String [] args)\n    {\n        int n;\n        Scanner input = new Scanner(System.in);\n\n        System.out.println(\"================================\");\n        System.out.println(\"----- MENGHITUNG FAKTORIAL -----\");\n        System.out.println(\"================================\");\n        System.out.print(\"\\nMasukan panjang deret = \");\n        n = input.nextInt();\n        long fib[] = new long[n];\n\n        fib[0] = 0;\n        fib[1] = 1;\n\n        for (int i = 2; i<n; i++){\n            fib [i] = fib[i-1] + fib [i-2];\n        }\n        for (int i = 0; i <n; i++){\n            System.out.print(fib[i] + \" \");\n        }\n        System.out.println(\"\\n\");\n    }\n}\n", "test_case": "import java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.Scanner;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FibonacciTest {\n\n    @Test\n    public void testFibonacci() {\n        // Set up input\n        String inputString = \"10\\n\"; // User inputs 10\n        InputStream inputStream = new ByteArrayInputStream(inputString.getBytes());\n        System.setIn(inputStream);\n\n        // Set up output\n        String expectedOutput = \"0 1 1 2 3 5 8 13 21 34 \\n\\n\"; // Expected output for n=10\n\n        // Redirect standard output to buffer\n        java.io.ByteArrayOutputStream outContent = new java.io.ByteArrayOutputStream();\n        System.setOut(new java.io.PrintStream(outContent));\n\n        // Call the method to be tested\n        fibonacci.ab(new String[0]);\n\n        // Check output\n        assertEquals(expectedOutput, outContent.toString());\n    }\n}\n"}
{"code_source": "class Hotel\n{\n    static holder hotel_ob=new holder();\n    static Scanner sc = new Scanner(System.in);\n    static void CustDetails(int i,int rn)\n    {\n        String name, contact, gender;\n        String name2 = null, contact2 = null;\n        String gender2=\"\";\n        System.out.print(\"\\nEnter customer name: \");\n        name = sc.next();\n        System.out.print(\"Enter contact number: \");\n        contact=sc.next();\n        System.out.print(\"Enter gender: \");\n        gender = sc.next();\n        if(i<3)\n        {\n            System.out.print(\"Enter second customer name: \");\n            name2 = sc.next();\n            System.out.print(\"Enter contact number: \");\n            contact2=sc.next();\n            System.out.print(\"Enter gender: \");\n            gender2 = sc.next();\n        }\n\n        switch (i) {\n            case 1:hotel_ob.luxury_doublerrom[rn]=new Doubleroom(name,contact,gender,name2,contact2,gender2);\n                break;\n            case 2:hotel_ob.deluxe_doublerrom[rn]=new Doubleroom(name,contact,gender,name2,contact2,gender2);\n                break;\n            case 3:hotel_ob.luxury_singleerrom[rn]=new Singleroom(name,contact,gender);\n                break;\n            case 4:hotel_ob.deluxe_singleerrom[rn]=new Singleroom(name,contact,gender);\n                break;\n            default:System.out.println(\"Wrong option\");\n                break;\n        }\n    }\n\n    static void bookroom(int i)\n    {\n        int j;\n        int rn;\n        System.out.println(\"\\nChoose room number from : \");\n        switch (i) {\n            case 1:\n                for(j=0;j<hotel_ob.luxury_doublerrom.length;j++)\n                {\n                    if(hotel_ob.luxury_doublerrom[j]==null)\n                    {\n                        System.out.print(j+1+\",\");\n                    }\n                }\n                System.out.print(\"\\nEnter room number: \");\n                try{\n                    rn=sc.nextInt();\n                    rn--;\n                    if(hotel_ob.luxury_doublerrom[rn]!=null)\n                        throw new NotAvailable();\n                    CustDetails(i,rn);\n                }\n                catch(Exception e)\n                {\n                    System.out.println(\"Invalid Option\");\n                    return;\n                }\n                break;\n            case 2:\n                for(j=0;j<hotel_ob.deluxe_doublerrom.length;j++)\n                {\n                    if(hotel_ob.deluxe_doublerrom[j]==null)\n                    {\n                        System.out.print(j+11+\",\");\n                    }\n                }\n                System.out.print(\"\\nEnter room number: \");\n                try{\n                    rn=sc.nextInt();\n                    rn=rn-11;\n                    if(hotel_ob.deluxe_doublerrom[rn]!=null)\n                        throw new NotAvailable();\n                    CustDetails(i,rn);\n                }\n                catch(Exception e)\n                {\n                    System.out.println(\"Invalid Option\");\n                    return;\n                }\n                break;\n            case 3:\n                for(j=0;j<hotel_ob.luxury_singleerrom.length;j++)\n                {\n                    if(hotel_ob.luxury_singleerrom[j]==null)\n                    {\n                        System.out.print(j+31+\",\");\n                    }\n                }\n                System.out.print(\"\\nEnter room number: \");\n                try{\n                    rn=sc.nextInt();\n                    rn=rn-31;\n                    if(hotel_ob.luxury_singleerrom[rn]!=null)\n                        throw new NotAvailable();\n                    CustDetails(i,rn);\n                }\n                catch(Exception e)\n                {\n                    System.out.println(\"Invalid Option\");\n                    return;\n                }\n                break;\n            case 4:\n                for(j=0;j<hotel_ob.deluxe_singleerrom.length;j++)\n                {\n                    if(hotel_ob.deluxe_singleerrom[j]==null)\n                    {\n                        System.out.print(j+41+\",\");\n                    }\n                }\n                System.out.print(\"\\nEnter room number: \");\n                try{\n                    rn=sc.nextInt();\n                    rn=rn-41;\n                    if(hotel_ob.deluxe_singleerrom[rn]!=null)\n                        throw new NotAvailable();\n                    CustDetails(i,rn);\n                }\n                catch(Exception e)\n                {\n                    System.out.println(\"Invalid Option\");\n                    return;\n                }\n                break;\n            default:\n                System.out.println(\"Enter valid option\");\n                break;\n        }\n        System.out.println(\"Room Booked\");\n    }\n\n    static void features(int i)\n    {\n        switch (i) {\n            case 1:System.out.println(\"Number of double beds : 1\\nAC : Yes\\nFree breakfast : Yes\\nCharge per day:4000 \");\n                break;\n            case 2:System.out.println(\"Number of double beds : 1\\nAC : No\\nFree breakfast : Yes\\nCharge per day:3000  \");\n                break;\n            case 3:System.out.println(\"Number of single beds : 1\\nAC : Yes\\nFree breakfast : Yes\\nCharge per day:2200  \");\n                break;\n            case 4:System.out.println(\"Number of single beds : 1\\nAC : No\\nFree breakfast : Yes\\nCharge per day:1200 \");\n                break;\n            default:\n                System.out.println(\"Enter valid option\");\n                break;\n        }\n    }\n\n    static void availability(int i)\n    {\n        int j,count=0;\n        switch (i) {\n            case 1:\n                for(j=0;j<10;j++)\n                {\n                    if(hotel_ob.luxury_doublerrom[j]==null)\n                        count++;\n                }\n                break;\n            case 2:\n                for(j=0;j<hotel_ob.deluxe_doublerrom.length;j++)\n                {\n                    if(hotel_ob.deluxe_doublerrom[j]==null)\n                        count++;\n                }\n                break;\n            case 3:\n                for(j=0;j<hotel_ob.luxury_singleerrom.length;j++)\n                {\n                    if(hotel_ob.luxury_singleerrom[j]==null)\n                        count++;\n                }\n                break;\n            case 4:\n                for(j=0;j<hotel_ob.deluxe_singleerrom.length;j++)\n                {\n                    if(hotel_ob.deluxe_singleerrom[j]==null)\n                        count++;\n                }\n                break;\n            default:\n                System.out.println(\"Enter valid option\");\n                break;\n        }\n        System.out.println(\"Number of rooms available : \"+count);\n    }\n\n    static void bill(int rn,int rtype)\n    {\n        double amount=0;\n        String list[]={\"Sandwich\",\"Pasta\",\"Noodles\",\"Coke\"};\n        System.out.println(\"\\n*******\");\n        System.out.println(\" Bill:-\");\n        System.out.println(\"*******\");\n\n        switch(rtype)\n        {\n            case 1:\n                amount+=4000;\n                System.out.println(\"\\nRoom Charge - \"+4000);\n                System.out.println(\"\\n===============\");\n                System.out.println(\"Food Charges:- \");\n                System.out.println(\"===============\");\n                System.out.println(\"Item   Quantity    Price\");\n                System.out.println(\"-------------------------\");\n                for(Food obb:hotel_ob.luxury_doublerrom[rn].food)\n                {\n                    amount+=obb.price;\n                    String format = \"%-10s%-10s%-10s%n\";\n                    System.out.printf(format,list[obb.itemno-1],obb.quantity,obb.price );\n                }\n\n                break;\n            case 2:amount+=3000;\n                System.out.println(\"Room Charge - \"+3000);\n                System.out.println(\"\\nFood Charges:- \");\n                System.out.println(\"===============\");\n                System.out.println(\"Item   Quantity    Price\");\n                System.out.println(\"-------------------------\");\n                for(Food obb:hotel_ob.deluxe_doublerrom[rn].food)\n                {\n                    amount+=obb.price;\n                    String format = \"%-10s%-10s%-10s%n\";\n                    System.out.printf(format,list[obb.itemno-1],obb.quantity,obb.price );\n                }\n                break;\n            case 3:amount+=2200;\n                System.out.println(\"Room Charge - \"+2200);\n                System.out.println(\"\\nFood Charges:- \");\n                System.out.println(\"===============\");\n                System.out.println(\"Item   Quantity    Price\");\n                System.out.println(\"-------------------------\");\n                for(Food obb:hotel_ob.luxury_singleerrom[rn].food)\n                {\n                    amount+=obb.price;\n                    String format = \"%-10s%-10s%-10s%n\";\n                    System.out.printf(format,list[obb.itemno-1],obb.quantity,obb.price );\n                }\n                break;\n            case 4:amount+=1200;\n                System.out.println(\"Room Charge - \"+1200);\n                System.out.println(\"\\nFood Charges:- \");\n                System.out.println(\"===============\");\n                System.out.println(\"Item   Quantity    Price\");\n                System.out.println(\"-------------------------\");\n                for(Food obb: hotel_ob.deluxe_singleerrom[rn].food)\n                {\n                    amount+=obb.price;\n                    String format = \"%-10s%-10s%-10s%n\";\n                    System.out.printf(format,list[obb.itemno-1],obb.quantity,obb.price );\n                }\n                break;\n            default:\n                System.out.println(\"Not valid\");\n        }\n        System.out.println(\"\\nTotal Amount- \"+amount);\n    }\n\n    static void deallocate(int rn,int rtype)\n    {\n        int j;\n        char w;\n        switch (rtype) {\n            case 1:\n                if(hotel_ob.luxury_doublerrom[rn]!=null)\n                    System.out.println(\"Room used by \"+hotel_ob.luxury_doublerrom[rn].name);\n                else\n                {\n                    System.out.println(\"Empty Already\");\n                    return;\n                }\n                System.out.println(\"Do you want to checkout ?(y/n)\");\n                w=sc.next().charAt(0);\n                if(w=='y'||w=='Y')\n                {\n                    bill(rn,rtype);\n                    hotel_ob.luxury_doublerrom[rn]=null;\n                    System.out.println(\"Deallocated succesfully\");\n                }\n\n                break;\n            case 2:\n                if(hotel_ob.deluxe_doublerrom[rn]!=null)\n                    System.out.println(\"Room used by \"+hotel_ob.deluxe_doublerrom[rn].name);\n                else\n                {\n                    System.out.println(\"Empty Already\");\n                    return;\n                }\n                System.out.println(\" Do you want to checkout ?(y/n)\");\n                w=sc.next().charAt(0);\n                if(w=='y'||w=='Y')\n                {\n                    bill(rn,rtype);\n                    hotel_ob.deluxe_doublerrom[rn]=null;\n                    System.out.println(\"Deallocated succesfully\");\n                }\n\n                break;\n            case 3:\n                if(hotel_ob.luxury_singleerrom[rn]!=null)\n                    System.out.println(\"Room used by \"+hotel_ob.luxury_singleerrom[rn].name);\n                else\n                {\n                    System.out.println(\"Empty Already\");\n                    return;\n                }\n                System.out.println(\" Do you want to checkout ? (y/n)\");\n                w=sc.next().charAt(0);\n                if(w=='y'||w=='Y')\n                {\n                    bill(rn,rtype);\n                    hotel_ob.luxury_singleerrom[rn]=null;\n                    System.out.println(\"Deallocated succesfully\");\n                }\n\n                break;\n            case 4:\n                if(hotel_ob.deluxe_singleerrom[rn]!=null)\n                    System.out.println(\"Room used by \"+hotel_ob.deluxe_singleerrom[rn].name);\n                else\n                {\n                    System.out.println(\"Empty Already\");\n                    return;\n                }\n                System.out.println(\" Do you want to checkout ? (y/n)\");\n                w=sc.next().charAt(0);\n                if(w=='y'||w=='Y')\n                {\n                    bill(rn,rtype);\n                    hotel_ob.deluxe_singleerrom[rn]=null;\n                    System.out.println(\"Deallocated succesfully\");\n                }\n                break;\n            default:\n                System.out.println(\"\\nEnter valid option : \");\n                break;\n        }\n    }\n\n    static void order(int rn,int rtype)\n    {\n        int i,q;\n        char wish;\n        try{\n            System.out.println(\"\\n==========\\n   Menu:  \\n==========\\n\\n1.Sandwich\\tRs.50\\n2.Pasta\\t\\tRs.60\\n3.Noodles\\tRs.70\\n4.Coke\\t\\tRs.30\\n\");\n            do\n            {\n                i = sc.nextInt();\n                System.out.print(\"Quantity- \");\n                q=sc.nextInt();\n\n                switch(rtype){\n                    case 1: hotel_ob.luxury_doublerrom[rn].food.add(new Food(i,q));\n                        break;\n                    case 2: hotel_ob.deluxe_doublerrom[rn].food.add(new Food(i,q));\n                        break;\n                    case 3: hotel_ob.luxury_singleerrom[rn].food.add(new Food(i,q));\n                        break;\n                    case 4: hotel_ob.deluxe_singleerrom[rn].food.add(new Food(i,q));\n                        break;\n                }\n                System.out.println(\"Do you want to order anything else ? (y/n)\");\n                wish=sc.next().charAt(0);\n            }while(wish=='y'||wish=='Y');\n        }\n        catch(NullPointerException e)\n        {\n            System.out.println(\"\\nRoom not booked\");\n        }\n        catch(Exception e)\n        {\n            System.out.println(\"Cannot be done\");\n        }\n    }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class HotelTest {\n    @Test\n    public void testCustDetails() {\n        holder hotel_ob = new holder();\n        String name = \"John\";\n        String contact = \"1234567890\";\n        String gender = \"male\";\n        String name2 = \"Jane\";\n        String contact2 = \"0987654321\";\n        String gender2 = \"female\";\n        int i = 1;\n        int rn = 0;\n\n        Hotel.CustDetails(i, rn);\n        assertEquals(hotel_ob.luxury_doublerrom[rn].getName(), name);\n        assertEquals(hotel_ob.luxury_doublerrom[rn].getContact(), contact);\n        assertEquals(hotel_ob.luxury_doublerrom[rn].getGender(), gender);\n        assertEquals(hotel_ob.luxury_doublerrom[rn].getName2(), name2);\n        assertEquals(hotel_ob.luxury_doublerrom[rn].getContact2(), contact2);\n        assertEquals(hotel_ob.luxury_doublerrom[rn].getGender2(), gender2);\n    }\n}\n"}
{"code_source": "class write implements Runnable\n{\n    holder hotel_ob;\n    write(holder hotel_ob)\n    {\n        this.hotel_ob=hotel_ob;\n    }\n    @Override\n    public void run() {\n        try{\n            FileOutputStream fout=new FileOutputStream(\"backup\");\n            ObjectOutputStream oos=new ObjectOutputStream(fout);\n            oos.writeObject(hotel_ob);\n        }\n        catch(Exception e)\n        {\n            System.out.println(\"Error in writing \"+e);\n        }\n\n    }\n\n}\n", "test_case": "import static org.junit.Assert.*;\nimport org.junit.Test;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.ObjectInputStream;\n\npublic class WriteTest {\n\n    @Test\n    public void testWrite() throws Exception {\n        // Create a new holder object for testing\n        Holder holder = new Holder();\n        holder.setSomeProperty(\"test value\");\n\n        // Create a new Write object with the holder object\n        Write write = new Write(holder);\n\n        // Call the run method to write the holder object to a file\n        write.run();\n\n        // Read the holder object from the file\n        FileInputStream fis = new FileInputStream(\"backup\");\n        ObjectInputStream ois = new ObjectInputStream(fis);\n        Holder readHolder = (Holder) ois.readObject();\n\n        // Assert that the read holder object is equal to the original holder object\n        assertEquals(holder, readHolder);\n\n        // Delete the backup file\n        File file = new File(\"backup\");\n        file.delete();\n    }\n}\n"}
{"code_source": "public class MyClass17 {\n    public static int[] removeDuplicates(int[] array) {\n        Set<Integer> set = new LinkedHashSet<>();\n        for (int num : array) {\n            set.add(num);\n        }\n        int[] result = new int[set.size()];\n        int i = 0;\n        for (int num : set) {\n\n\n\n        }\n", "test_case": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClass17Test {\n\n    @Test\n    public void testRemoveDuplicates() {\n        int[] input1 = {1, 2, 3, 2, 4, 3, 5};\n        int[] output1 = {1, 2, 3, 4, 5};\n        assertArrayEquals(output1, MyClass17.removeDuplicates(input1));\n\n        int[] input2 = {1, 1, 2, 2, 3, 3};\n        int[] output2 = {1, 2, 3};\n        assertArrayEquals(output2, MyClass17.removeDuplicates(input2));\n\n        int[] input3 = {1, 1, 1};\n        int[] output3 = {1};\n        assertArrayEquals(output3, MyClass17.removeDuplicates(input3));\n\n        int[] input4 = {1, 2, 3, 4, 5};\n        int[] output4 = {1, 2, 3, 4, 5};\n        assertArrayEquals(output4, MyClass17.removeDuplicates(input4));\n\n        int[] input5 = {};\n        int[] output5 = {};\n        assertArrayEquals(output5, MyClass17.removeDuplicates(input5));\n    }\n}\n"}
{"code_source": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\n/**\n *\n * @author a.safarji\n */\nimport java.util.Scanner;\n\npublic class tt\n{\n\n    boolean[] seating = new boolean[11]; /* create 10 seat numbers (array[0] will not be used). Empty seat indicated by false*/\n    Scanner input = new Scanner(System.in);\n\n    public void start()\n    {\n        while ( true )\n        {\n            makeReservation();\n        }\n    }\n\n    public void makeReservation()\n    {\n        System.out.println(\"Please type 1 for First Class or 2 for Economy: \");\n        int section = input.nextInt();\n        if ( section == 1 )\n        {\n            firstClassSeat();\n        }\n        else\n        {\n            economySeat();\n        }\n    }\n\n    public void firstClassSeat() // assign a first class seat\n    {\n        for ( int count = 1; count <= 5; count++ )\n        {\n            if ( seating[count] == false )  // if false, then a seat is available for assignment\n            {\n                seating[count] = true;  // assign seat\n                System.out.printf(\"First Class. Seat# %d\\n\", count);\n                break;\n            }\n            else if ( seating[5] == true ) // If seating[5] is true then first class is fully booked\n            {\n                if ( seating[10] == true) // If seating[10] is true then economy (and therefore whole flight) is fully booked\n                {\n                    System.out.println(\"Sorry, flight fully booked. Next flight is in 3 hours.\");\n                }\n                else // ask passenger if they would like an economy ticket instead\n                {\n                    System.out.println(\"First Class is fully booked. Would you like Economy? 1 for Yes 2 for No\");\n                    int choice = input.nextInt();\n                    if ( choice == 1 )\n                    {\n                        economySeat();\n                        start();\n                    }\n                    else\n                    {\n                        System.out.println(\"Next flight is in 3 hours.\");\n                        System.exit(0);\n                    }\n                }\n            }\n        }\n    }\n\n    public void economySeat() // assign an economy seat\n    {\n        for ( int count = 6; count <= 10; count++ )\n        {\n            if ( seating[count] == false ) // if false, then a seat is available for assignment\n            {\n                seating[count] = true; // assign seat\n                System.out.printf(\"Economy. Seat# %d\\n\", count);\n                break;\n            }\n            else if ( seating[10] == true ) // If seating[10] is true then economy is fully booked\n            {\n                if ( seating[5] == true) // If seating[5] is true then first class (and therefore whole flight) is fully booked\n                {\n                    System.out.println(\"Sorry, flight fully booked. Next flight is in 3 hours.\");\n                    System.exit(0);\n                }\n                else // ask if passenger would like a first class ticket instead\n                {\n                    System.out.println(\"Economy is fully booked. Would you like First Class? 1 for Yes 2 for No\");\n                    int choice = input.nextInt();\n                    if ( choice == 1 )\n                    {\n                        firstClassSeat();\n                        start();\n                    }\n                    else\n                    {\n                        System.out.println(\"Next flight is in 3 hours\");\n                        System.exit(0);\n                    }\n                }\n            }\n        }\n    }\n}\n", "test_case": "import static org.junit.jupiter.api.Assertions.*;\n\nimport java.io.ByteArrayInputStream;\nimport java.util.NoSuchElementException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nclass ttTest {\n\n    private tt testObj;\n\n    @BeforeEach\n    void setUp() throws Exception {\n        testObj = new tt();\n    }\n\n    @Test\n    void testFirstClassSeat() {\n        System.setIn(new ByteArrayInputStream(\"1\\n\".getBytes()));\n        testObj.firstClassSeat();\n        boolean[] seating = testObj.seating;\n        assertTrue(seating[1]);\n        System.setIn(new ByteArrayInputStream(\"1\\n\".getBytes()));\n        testObj.firstClassSeat();\n        assertTrue(seating[2]);\n        System.setIn(new ByteArrayInputStream(\"1\\n\".getBytes()));\n        testObj.firstClassSeat();\n        assertTrue(seating[3]);\n        System.setIn(new ByteArrayInputStream(\"1\\n\".getBytes()));\n        testObj.firstClassSeat();\n        assertTrue(seating[4]);\n        System.setIn(new ByteArrayInputStream(\"1\\n\".getBytes()));\n        testObj.firstClassSeat();\n        assertTrue(seating[5]);\n        System.setIn(new ByteArrayInputStream(\"1\\n\".getBytes()));\n        assertThrows(IndexOutOfBoundsException.class, () -> testObj.firstClassSeat());\n    }\n\n    @Test\n    void testEconomySeat() {\n        System.setIn(new ByteArrayInputStream(\"2\\n\".getBytes()));\n        testObj.economySeat();\n        boolean[] seating = testObj.seating;\n        assertTrue(seating[6]);\n        System.setIn(new ByteArrayInputStream(\"2\\n\".getBytes()));\n        testObj.economySeat();\n        assertTrue(seating[7]);\n        System.setIn(new ByteArrayInputStream(\"2\\n\".getBytes()));\n        testObj.economySeat();\n        assertTrue(seating[8]);\n        System.setIn(new ByteArrayInputStream(\"2\\n\".getBytes()));\n        testObj.economySeat();\n        assertTrue(seating[9]);\n        System.setIn(new ByteArrayInputStream(\"2\\n\".getBytes()));\n        testObj.economySeat();\n        assertTrue(seating[10]);\n        System.setIn(new ByteArrayInputStream(\"2\\n\".getBytes()));\n        assertThrows(IndexOutOfBoundsException.class, () -> testObj.economySeat());\n    }\n\n    @Test\n    void testMakeReservation() {\n        System.setIn(new ByteArrayInputStream(\"1\\n\".getBytes()));\n        testObj.makeReservation();\n        boolean[] seating = testObj.seating;\n        assertTrue(seating[1]);\n        System.setIn(new ByteArrayInputStream(\"2\\n\".getBytes()));\n        testObj.makeReservation();\n        assertTrue(seating[6]);\n        System.setIn(new ByteArrayInputStream(\"1\\n\".getBytes()));\n        testObj.makeReservation();\n        assertTrue(seating[2]);\n    }\n\n    @Test\n    void testStart() {\n        System.setIn(new ByteArrayInputStream(\"1\\n\".getBytes()));\n        testObj.start();\n        boolean[] seating = testObj.seating;\n        assertTrue(seating[1]);\n        System.setIn(new ByteArrayInputStream(\"2\\n\".getBytes()));\n        testObj.start();\n        assertTrue(seating[6]);\n    }\n\n    @Test\n    void testWrongInput() {\n        System.setIn(new ByteArrayInputStream(\"wrong input\\n\".getBytes()));\n        assertThrows(NoSuchElementException.class, () -> testObj.makeReservation());\n    }\n\n}\n"}
{"code_source": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage LabArr;\n\nimport java.util.Scanner;\n\n/**\n *\n * @author toby\n */\npublic class ArrayOper {\n    static Scanner inp = new Scanner(System.in);\n\n    public static void readArray(int profits[]) {\n\n        int i;\n        for(i=0;i<profits.length;i++) {\n            System.out.printf(\"Enter elemnts profits , [%d]\\n\",i);\n            profits[i]=inp.nextInt();\n        }\n    }\n\n    public static void displayArray(int []profits) {\n\n        for(int i:profits) {\n            System.out.println(i);\n        }\n    }\n\n    public static int sumArrays(int []profits) {\n        int sum=0;\n        for(int i:profits) {\n            sum+=i;\n        }\n        return sum;\n    }\n    public static double avgArray(int sum,int size) {\n\n        double avg = sum/size;\n        return avg;\n    }\n\n    public static int maxValue(int []profits) {\n        int max = profits[0];\n        for(int value:profits) {\n\n            if(value>max) {\n                max=value;\n            }\n        }\n        return max;\n    }\n    public static int minValue(int []profits) {\n        int min = profits[0];\n        for(int value:profits) {\n\n            if(value<min) {\n                min=value;\n            }\n        }\n        return min;\n\n    }\n}\n", "test_case": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class ArrayOperTest {\n\n    @Test\n    public void testSumArrays() {\n        int[] arr = {1, 2, 3, 4, 5};\n        int expectedSum = 15;\n        int actualSum = ArrayOper.sumArrays(arr);\n        Assertions.assertEquals(expectedSum, actualSum);\n    }\n\n    @Test\n    public void testAvgArray() {\n        int[] arr = {1, 2, 3, 4, 5};\n        int sum = ArrayOper.sumArrays(arr);\n        double expectedAvg = 3.0;\n        double actualAvg = ArrayOper.avgArray(sum, arr.length);\n        Assertions.assertEquals(expectedAvg, actualAvg, 0.001);\n    }\n\n    @Test\n    public void testMaxValue() {\n        int[] arr = {1, 2, 3, 4, 5};\n        int expectedMax = 5;\n        int actualMax = ArrayOper.maxValue(arr);\n        Assertions.assertEquals(expectedMax, actualMax);\n    }\n\n    @Test\n    public void testMinValue() {\n        int[] arr = {1, 2, 3, 4, 5};\n        int expectedMin = 1;\n        int actualMin = ArrayOper.minValue(arr);\n        Assertions.assertEquals(expectedMin, actualMin);\n    }\n}\n"}
{"code_source": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage newpackage;\n\n/**\n *\n * @author toby\n */\npublic class CommissionEmployee {\n\n    protected String name;\n    protected String id;\n    protected double grossSales;\n    protected double rate;\n    public CommissionEmployee(String name, String id, double grossSales, double rate) {\n\n        this.name = name;\n        this.id = id;\n        this.grossSales = grossSales;\n        this.rate = rate;\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getId() {\n        return id;\n    }\n    public void setId(String id) {\n        this.id = id;\n    }\n    public double getGrossSales() {\n        return grossSales;\n    }\n    public void setGrossSales(double grossSales) {\n        if(grossSales>0)         // input validation\n            this.grossSales = grossSales;\n        else\n            this.grossSales=0;\n    }\n    public double getRate() {\n        return rate;\n    }\n    public void setRate(double rate) {\n        if(rate>0)\t\t\t\t// input validation\n            this.rate = rate;\n        else\n            this.rate=0;\n    }\n    public double earning(){\n        return this.rate * this.grossSales;\n    }\n\n    @Override\n    public String toString() {\n        return \"name=\" + name + \" id=\" + id + \" grossSales=\" + grossSales + \" rate=\" + rate;\n    }\n\n\n\n}\n\n", "test_case": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class CommissionEmployeeTest {\n\n    @Test\n    public void testEarning() {\n        CommissionEmployee employee = new CommissionEmployee(\"John Smith\", \"1234\", 10000, 0.05);\n        double expectedEarning = 500;\n        assertEquals(expectedEarning, employee.earning(), 0.001, \"Earning calculation is incorrect\");\n    }\n\n    @Test\n    public void testSetGrossSales() {\n        CommissionEmployee employee = new CommissionEmployee(\"John Smith\", \"1234\", 10000, 0.05);\n        employee.setGrossSales(-5000);\n        double expectedGrossSales = 0;\n        assertEquals(expectedGrossSales, employee.getGrossSales(), \"Gross sales should be set to 0 for negative input\");\n    }\n\n    @Test\n    public void testSetRate() {\n        CommissionEmployee employee = new CommissionEmployee(\"John Smith\", \"1234\", 10000, 0.05);\n        employee.setRate(-0.1);\n        double expectedRate = 0;\n        assertEquals(expectedRate, employee.getRate(), \"Rate should be set to 0 for negative input\");\n    }\n}\n"}
{"code_source": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\n/**\n *\n * @author A.Safarji\n */\npublic class BankAccount {\n\n    private String  AccountHolder;\n    private int  AccountNumber;\n    private double balance;\n\n    public BankAccount(String AccountHolder, int AccountNumber, double balance) {\n        this.AccountHolder = AccountHolder;\n        this.AccountNumber = AccountNumber;\n        this.balance = balance;\n    }\n\n    public String getAccountHolder() {\n        return AccountHolder;\n    }\n\n    public int getAccountNumber() {\n        return AccountNumber;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public void setAccountHolder(String AccountHolder) {\n        this.AccountHolder = AccountHolder;\n    }\n\n    public void setAccountNumber(int AccountNumber) {\n        this.AccountNumber = AccountNumber;\n    }\n\n    public void setBalance(double balance) {\n        this.balance = balance;\n    }\n\n    public void depots (double  amount ){\n        this.balance+= amount;\n        // this.balance= balance + amount;\n\n    }\n    public void withdraw(double amount ){\n        this.balance-=amount;\n        // this.balance= balance - amount;\n\n    }\n\n    public String toString() {\n        return \"BankTest{\" + \"AccountHolder=\" + AccountHolder + \", AccountNumber=\" + AccountNumber + \", balance=\" + balance + '}';\n    }\n\n\n\n}", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class BankAccountTest {\n\n    @Test\n    public void testDepots() {\n        BankAccount account = new BankAccount(\"John Smith\", 12345, 1000.0);\n        account.depots(500.0);\n        assertEquals(1500.0, account.getBalance(), 0.01);\n    }\n\n    @Test\n    public void testWithdraw() {\n        BankAccount account = new BankAccount(\"John Smith\", 12345, 1000.0);\n        account.withdraw(500.0);\n        assertEquals(500.0, account.getBalance(), 0.01);\n    }\n\n    @Test\n    public void testSetAccountHolder() {\n        BankAccount account = new BankAccount(\"John Smith\", 12345, 1000.0);\n        account.setAccountHolder(\"Jane Doe\");\n        assertEquals(\"Jane Doe\", account.getAccountHolder());\n    }\n\n    @Test\n    public void testSetAccountNumber() {\n        BankAccount account = new BankAccount(\"John Smith\", 12345, 1000.0);\n        account.setAccountNumber(67890);\n        assertEquals(67890, account.getAccountNumber());\n    }\n\n    @Test\n    public void testSetBalance() {\n        BankAccount account = new BankAccount(\"John Smith\", 12345, 1000.0);\n        account.setBalance(2000.0);\n        assertEquals(2000.0, account.getBalance(), 0.01);\n    }\n\n    @Test\n    public void testToString() {\n        BankAccount account = new BankAccount(\"John Smith\", 12345, 1000.0);\n        String expected = \"BankTest{AccountHolder=John Smith, AccountNumber=12345, balance=1000.0}\";\n        assertEquals(expected, account.toString());\n    }\n\n}\n"}
{"code_source": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nimport java.util.List;\n\n/**\n *\n * @author toby\n */\npublic class Node<T> {\n\n    int item;\n    Node leftChild;\n    Node rightChild;\n    public Node(int item){\n        this.item = item;\n    }\n    public void preOrder(){\n        System.out.print(item + \"--->\");\n        if(leftChild != null)\n            this.leftChild.preOrder();\n\n        if(rightChild != null)\n            this.rightChild.preOrder();\n    }\n    public void postOrder() {\n        if(leftChild != null)\n            this.leftChild.postOrder();\n\n        if(rightChild != null)\n            this.rightChild.postOrder();\n        System.out.print(item + \"--->\");\n    }\n    public void inOrder(){\n        if(leftChild != null)\n            this.leftChild.inOrder();\n        System.out.print(item + \"--->\");\n        if(rightChild != null)\n            this.rightChild.inOrder();\n    }\n    public void inOrder(List list) {\n        if (leftChild != null) leftChild.inOrder(list);\n        list.add(item);\n        if (rightChild != null) rightChild.inOrder(list);\n    }\n    public void preOrder(List list) {\n        list.add(item);\n        if (leftChild != null) leftChild.preOrder(list);\n\n        if (rightChild != null) rightChild.preOrder(list);\n    }\n    public void postOrder(List list) {\n        if (leftChild != null) leftChild.postOrder(list);\n\n        if (rightChild != null) rightChild.postOrder(list);\n        list.add(item);\n    }\n}\n\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class NodeTest {\n\n    @Test\n    public void testBinaryTree() {\n        Node<Integer> root = new Node<>(1);\n        root.leftChild = new Node<>(2);\n        root.rightChild = new Node<>(3);\n        root.leftChild.leftChild = new Node<>(4);\n        root.leftChild.rightChild = new Node<>(5);\n        root.rightChild.leftChild = new Node<>(6);\n        root.rightChild.rightChild = new Node<>(7);\n\n        // Test pre-order traversal\n        List<Integer> preOrderList = new ArrayList<>();\n        root.preOrder(preOrderList);\n        assertEquals(Arrays.asList(1, 2, 4, 5, 3, 6, 7), preOrderList);\n\n        // Test post-order traversal\n        List<Integer> postOrderList = new ArrayList<>();\n        root.postOrder(postOrderList);\n        assertEquals(Arrays.asList(4, 5, 2, 6, 7, 3, 1), postOrderList);\n\n        // Test in-order traversal\n        List<Integer> inOrderList = new ArrayList<>();\n        root.inOrder(inOrderList);\n        assertEquals(Arrays.asList(4, 2, 5, 1, 6, 3, 7), inOrderList);\n\n        // Test converting tree to list in pre-order\n        List<Integer> preOrderTreeList = new ArrayList<>();\n        root.preOrder(preOrderTreeList);\n        assertEquals(Arrays.asList(1, 2, 4, 5, 3, 6, 7), preOrderTreeList);\n\n        // Test converting tree to list in post-order\n        List<Integer> postOrderTreeList = new ArrayList<>();\n        root.postOrder(postOrderTreeList);\n        assertEquals(Arrays.asList(4, 5, 2, 6, 7, 3, 1), postOrderTreeList);\n\n        // Test converting tree to list in in-order\n        List<Integer> inOrderTreeList = new ArrayList<>();\n        root.inOrder(inOrderTreeList);\n        assertEquals(Arrays.asList(4, 2, 5, 1, 6, 3, 7), inOrderTreeList);\n    }\n}\n"}
{"code_source": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage sa.edu.yuc;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n *\n * @author toby\n */\npublic class TreeIterator implements java.util.Iterator   {\n\n    private java.util.Iterator iter;\n    List list = new ArrayList<>();\n    public TreeIterator (BinarySearchTreeImpl bst) {\n        //List list = new ArrayList<>();\n\n        bst.inOrder(list);\n        iter = list.iterator();\n\n\n    }\n    @Override\n    public boolean hasNext() {\n        return iter.hasNext();\n    }\n    @Override\n    public Object next() {\n        return iter.next();\n    }\n}\n\n\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class TreeIteratorTest {\n\n    @Test\n    public void testIterator() {\n        // create a binary search tree with some values\n        BinarySearchTreeImpl<Integer> bst = new BinarySearchTreeImpl<>();\n        bst.insert(5);\n        bst.insert(3);\n        bst.insert(7);\n        bst.insert(1);\n        bst.insert(4);\n        bst.insert(6);\n        bst.insert(8);\n\n        // create a TreeIterator\n        TreeIterator iterator = new TreeIterator(bst);\n\n        // iterate over the binary search tree using the iterator\n        List<Integer> result = new ArrayList<>();\n        while (iterator.hasNext()) {\n            result.add((Integer)iterator.next());\n        }\n\n        // check that the result matches the expected order of values\n        List<Integer> expected = Arrays.asList(1, 3, 4, 5, 6, 7, 8);\n        assertEquals(expected, result);\n    }\n}\n"}
{"code_source": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\npublic class CommisionEmployee {\n\n    protected String name;\n    protected String id;\n    protected double grossSale;\n    protected double rate;\n\n    public CommisionEmployee(String name, String id, double grossSale, double rate) {\n        this.name = name;\n        this.id = id;\n        this.grossSale = grossSale;\n        this.rate = rate;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public double getGroddSale() {\n        return grossSale;\n    }\n\n    public void setGroddSale(double grossSale) {\n        if (grossSale>0) {\n            this.grossSale= grossSale;\n        }else {\n            this.grossSale=0;\n        }\n\n        this.grossSale = grossSale;\n\n    }\n\n    public double getRate() {\n        return rate;\n    }\n\n    public double setRate(double rate) {\n        if(rate>0) {\n            this.rate=rate;\n        }\n        else {\n            this.rate=0;\n        }\n        return rate;\n    }\n\n    @Override\n    public String toString() {\n        return \"CommisionEmployee{\" + \"name=\" + name + \", id=\" + id + \", grossSale=\" + grossSale + \", rate=\" + rate +era '}';\n\n\n    }\n\n\n    public double earnings(){\n        return grossSale*rate;\n    }\n}", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class CommisionEmployeeTest {\n\n    @Test\n    public void testEarnings() {\n        CommisionEmployee emp = new CommisionEmployee(\"John Doe\", \"12345\", 5000.0, 0.05);\n        double expectedEarnings = 250.0; // 5000.0 * 0.05\n\n        assertEquals(expectedEarnings, emp.earnings(), 0.001); // Allow a small delta for floating point precision\n    }\n\n    @Test\n    public void testSetGrossSale() {\n        CommisionEmployee emp = new CommisionEmployee(\"John Doe\", \"12345\", 5000.0, 0.05);\n\n        // Test valid gross sale\n        emp.setGroddSale(10000.0);\n        assertEquals(10000.0, emp.getGroddSale(), 0.001);\n\n        // Test invalid gross sale\n        emp.setGroddSale(-5000.0);\n        assertEquals(0.0, emp.getGroddSale(), 0.001);\n    }\n\n    @Test\n    public void testSetRate() {\n        CommisionEmployee emp = new CommisionEmployee(\"John Doe\", \"12345\", 5000.0, 0.05);\n\n        // Test valid rate\n        emp.setRate(0.1);\n        assertEquals(0.1, emp.getRate(), 0.001);\n\n        // Test invalid rate\n        emp.setRate(-0.05);\n        assertEquals(0.0, emp.getRate(), 0.001);\n    }\n}\n"}
{"code_source": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage Medterm3710933;\n\n\n\n/**\n *\n * @author A.Safarji\n */\npublic class Movie {\n\n    private  String titl;\n    private  int rating;\n    private   double price;\n    public static int numrented;\n    public static int numallmovies;\n\n    public Movie(String titl, int rating, double price) {\n\n        this.titl = titl;\n        this.rating = rating;\n        this.price = price;\n        numallmovies++;// counter\n    }\n\n    public void setRating(int rating) {\n        this.rating = rating;\n    }\n\n\n\n    public  int rent( ) {\n\n        ++numrented;\n        return numrented;\n    }\n\n    public  int Return() {\n\n        --numallmovies;\n        if (numallmovies>0) {\n            return numallmovies;\n        }\n        else {\n            return 0;\n        }\n\n\n    }\n\n    public int getRating() {\n        return rating;\n    }\n\n\n\n\n    @Override\n    public String toString() {\n\n        return String.format(\"Movie Name=\" + titl + \", Rate=\" + rating + \", Price=\" + price );\n\n    }\n\n}", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MovieTest {\n\n    @Test\n    public void testConstructorAndGetters() {\n        Movie movie = new Movie(\"The Matrix\", 8, 2.99);\n        assertEquals(\"The Matrix\", movie.getTitle());\n        assertEquals(8, movie.getRating());\n        assertEquals(2.99, movie.getPrice(), 0.001);\n    }\n\n    @Test\n    public void testSetRating() {\n        Movie movie = new Movie(\"The Matrix\", 8, 2.99);\n        movie.setRating(9);\n        assertEquals(9, movie.getRating());\n    }\n\n    @Test\n    public void testRentAndReturn() {\n        Movie movie = new Movie(\"The Matrix\", 8, 2.99);\n        int numRentedBefore = Movie.getNumRented();\n        int numAllMoviesBefore = Movie.getNumAllMovies();\n        int numRented = movie.rent();\n        int numRentedAfter = Movie.getNumRented();\n        int numAllMoviesAfter = Movie.getNumAllMovies();\n        assertEquals(numRentedBefore + 1, numRentedAfter);\n        assertEquals(numAllMoviesBefore - 1, numAllMoviesAfter);\n        int numReturned = movie.Return();\n        int numRentedAfterReturn = Movie.getNumRented();\n        int numAllMoviesAfterReturn = Movie.getNumAllMovies();\n        assertEquals(numRented, numReturned);\n        assertEquals(numRentedBefore, numRentedAfterReturn);\n        assertEquals(numAllMoviesBefore, numAllMoviesAfterReturn);\n    }\n\n    @Test\n    public void testToString() {\n        Movie movie = new Movie(\"The Matrix\", 8, 2.99);\n        String expected = \"Movie Name=The Matrix, Rate=8, Price=2.99\";\n        assertEquals(expected, movie.toString());\n    }\n}\n"}
{"code_source": "\n\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class QuickSort {\n\n\n    public static void tt(String[] args) {\n        Scanner input = new Scanner(System.in);\n\n\n        System.err.println(\"How many numbers do you want to enter?\");\n        int num = input.nextInt();\n\n        int array[] = new int[num];\n\n        System.err.println(\"Enter the \" + num + \" numbers now.\");\n\n        for (int i = 0 ; i < array.length; i++ ) {\n            array[i] = input.nextInt();\n        }\n\n\n        System.out.println(\"These are the numbers you have entered.\");\n        System.out.println(Arrays.toString(array));\n\n\n        QuickSort n  = new QuickSort();\n\n        n.quickSort(array, 0, array.length-1);\n\n        System.err.println(Arrays.toString(array));\n        System.err.println(\"Number of array: \"+ array.length);\n\n    }\n\n    public  void quickSort(int[] A, int l, int r){\n\n        int s = partition(A, l, r);\n\n        if(s-1>l) {\n            quickSort(A, l, s - 1);\n        }\n        if(s+1<r) {\n            quickSort(A, s + 1, r);\n        }\n    }\n\n    public static int partition(int[] A, int low, int high){\n        int pivot = A[high];\n\n        for(int i=low; i<high; i++){\n            if(A[i]<pivot){\n                int temp= A[low];\n                A[low]=A[i];\n                A[i]=temp;\n                low++;\n            }\n        }\n\n        int temp = A[low];\n        A[low] = pivot;\n        A[high] = temp;\n\n        return low;\n    }\n}", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class QuickSortTest {\n\n    @Test\n    public void testQuickSort() {\n        int[] inputArray = {5, 2, 6, 1, 3};\n        int[] expectedArray = {1, 2, 3, 5, 6};\n\n        QuickSort quickSort = new QuickSort();\n        quickSort.quickSort(inputArray, 0, inputArray.length - 1);\n\n        assertArrayEquals(expectedArray, inputArray);\n    }\n\n    @Test\n    public void testPartition() {\n        int[] inputArray = {5, 2, 6, 1, 3};\n        int expectedPartitionIndex = 2;\n\n        int partitionIndex = QuickSort.partition(inputArray, 0, inputArray.length - 1);\n\n        assertEquals(expectedPartitionIndex, partitionIndex);\n    }\n}\n"}
{"code_source": "public class MyClass19 {\n    public static boolean isValidISBN(String str) {\n        if (str == null || str.length() != 10) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < 10; i++) {\n            char ch = str.charAt(i);\n            if (!Character.isDigit(ch)) {\n                if (i == 9 && ch == 'X') {\n                    sum += 10;\n                } else {\n                    return false;\n                }\n            } else {\n                sum += (10 - i) * (ch - '0');\n            }\n        }\n        return sum % 11 == 0;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass19Test {\n\n    @Test\n    public void testValidISBN() {\n        assertTrue(MyClass19.isValidISBN(\"0316066524\"));\n        assertTrue(MyClass19.isValidISBN(\"080442957X\"));\n        assertTrue(MyClass19.isValidISBN(\"1617293296\"));\n        assertTrue(MyClass19.isValidISBN(\"1593275846\"));\n    }\n\n    @Test\n    public void testInvalidISBN() {\n        assertFalse(MyClass19.isValidISBN(\"123456789\"));\n        assertFalse(MyClass19.isValidISBN(\"abcdefghij\"));\n        assertFalse(MyClass19.isValidISBN(\"0316066525\"));\n        assertFalse(MyClass19.isValidISBN(\"0804429570\"));\n        assertFalse(MyClass19.isValidISBN(\"1617293297\"));\n        assertFalse(MyClass19.isValidISBN(\"1593275847\"));\n    }\n}\n"}
{"code_source": "package SafarjiProj;\npublic class RoadMap<T> {\n\n\n    private int size;\n\n    // private int capacity=1000;\n    private MyArray<Map> info = new MyArrayImpl(Map.class, 1000);\n\n    public boolean addLocation(Map road) {\n        info.add(road);\n        return true;\n    }\n    public  Map findLocation(int buldingNo , int zipcod) {\n        //    Map b= new  Map(buldingNo, \"\" , \"\" , zipcode);\n\n\n        if(info.find(new Map(buldingNo,\"\",\"\", zipcod))!= null){ // look only for zip and bulid num\n\n            return info.find(new Map(buldingNo,\"\",\"\", zipcod));\n        }else{\n            Map b = new Map(0,\" Does not exist\",\" Does not exist\",0);\n            System.err.println(\"Not found\");\n            return b;\n        }\n        // return null;\n\n\n\n\n\n\n    }\n\n    public boolean deleteLocation(int buldingNo , int zipcode) {\n        //    Map d= new  Map(buldingNo, \"\" , \"\" , zipcode);\n        if(info.delete(new Map(buldingNo, \"\" , \"\" , zipcode))) { // like find\n\n            return true;\n        }\n        return false;\n\n    }\n\n    public boolean Modfiy(T value){\n        {  // zip and bulid num have to be the same as i used find function! and the other strings can be change\n\n            if(info.Modfiy((Map) value)){\n                return true;\n            }else{\n                info.delete((Map) value);\n            }\n\n\n\n        }\n        return false;\n    }\n\n\n    public void showAll() {\n        System.out.println(info.toString());\n    }\n\n\n}", "test_case": "package SafarjiProj;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class RoadMapTest {\n\n    @Test\n    public void testAddLocation() {\n        RoadMap<Map> roadMap = new RoadMap<>();\n        Map location = new Map(123, \"123 Main St\", \"Springfield\", 12345);\n        assertTrue(roadMap.addLocation(location));\n    }\n\n    @Test\n    public void testFindLocation() {\n        RoadMap<Map> roadMap = new RoadMap<>();\n        Map location = new Map(123, \"123 Main St\", \"Springfield\", 12345);\n        roadMap.addLocation(location);\n        Map result = roadMap.findLocation(123, 12345);\n        assertNotNull(result);\n        assertEquals(location, result);\n    }\n\n    @Test\n    public void testDeleteLocation() {\n        RoadMap<Map> roadMap = new RoadMap<>();\n        Map location = new Map(123, \"123 Main St\", \"Springfield\", 12345);\n        roadMap.addLocation(location);\n        assertTrue(roadMap.deleteLocation(123, 12345));\n        assertNull(roadMap.findLocation(123, 12345));\n    }\n\n    @Test\n    public void testModifyLocation() {\n        RoadMap<Map> roadMap = new RoadMap<>();\n        Map location = new Map(123, \"123 Main St\", \"Springfield\", 12345);\n        roadMap.addLocation(location);\n        Map newLocation = new Map(123, \"456 Oak St\", \"Springfield\", 12345);\n        assertTrue(roadMap.Modfiy(newLocation));\n        assertEquals(newLocation, roadMap.findLocation(123, 12345));\n    }\n\n}\n"}
{"code_source": "\n\nimport java.util.Scanner;\n\npublic class Min {\n    public static int shortest_Path (int[][]paths, int m, int n)\n    {\n\n\n        // base case\n        if (n == 0 || m == 0)\n        {\n            return Integer.MAX_VALUE;\n        }\n\n        // if we are in the first cell `(0, 0)`\n        if (m == 1 && n == 1)\n        {\n            return paths[0][0];\n        }\n\n        // include the current cell's cost in the path and recur to find the minimum\n        // of the path from the adjacent left cell and adjacent top cell.\n        return Integer.min (shortest_Path (paths, m - 1, n),\n                shortest_Path (paths, m, n - 1)) + paths[m - 1][n - 1];\n    }\n\n\n\n\n    String print(){\n\n\n        return \"Welcome to project 1\";\n\n    }\n\n\n}\n\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MinTest {\n\n    @Test\n    public void testShortestPath() {\n        int[][] paths1 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n        int m1 = 3, n1 = 3;\n        assertEquals(21, Min.shortest_Path(paths1, m1, n1));\n\n        int[][] paths2 = {{1, 2, 3, 4}, {4, 5, 6, 7}, {7, 8, 9, 10}};\n        int m2 = 3, n2 = 4;\n        assertEquals(22, Min.shortest_Path(paths2, m2, n2));\n\n        int[][] paths3 = {{1, 2, 3, 4}, {4, 5, 6, 7}, {7, 8, 9, 10}, {11, 12, 13, 14}};\n        int m3 = 4, n3 = 4;\n        assertEquals(38, Min.shortest_Path(paths3, m3, n3));\n    }\n\n}\n"}
{"code_source": "\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport java.awt.Color;\nimport java.awt.Font;\nimport javax.swing.JLabel;\nimport javax.swing.JTable;\nimport javax.swing.table.DefaultTableCellRenderer;\nimport javax.swing.table.JTableHeader;\n\npublic class Class4 {\n    public void changeUI() {\n        try {\n            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\n                if (\"Windows\".equals(info.getName())) {\n                    javax.swing.UIManager.setLookAndFeel(info.getClassName());\n                    break;\n                }\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public void tablePreference(JTable jTable) {\n        System.out.println(\"header changed\");\n        // Change Header.\n        JTableHeader tj = jTable.getTableHeader();\n        tj.setFont(new Font(\"Segoe UI\", Font.BOLD, 26));\n        tj.setOpaque(false);\n        tj.setBackground(new Color(32, 136, 203));\n        tj.setForeground(new Color(255, 255, 255));\n\n        System.out.println(\"Column align\");\n        // Column Center align.\n        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) tj.getDefaultRenderer();\n        renderer.setHorizontalAlignment(JLabel.CENTER);\n\n        System.out.println(\"Cell align\");\n        // Cell Alignment\n        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();\n        cellRenderer.setHorizontalAlignment(JLabel.CENTER);\n        jTable.getColumnModel().getColumn(0).setCellRenderer(cellRenderer);\n        jTable.getColumnModel().getColumn(1).setCellRenderer(cellRenderer);\n        jTable.getColumnModel().getColumn(2).setCellRenderer(cellRenderer);\n        jTable.getColumnModel().getColumn(3).setCellRenderer(cellRenderer);\n\n        jTable.setAutoCreateRowSorter(true);\n        jTable.setFont(new java.awt.Font(\"Calibri\", 0, 24)); // NOI18N\n        jTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);\n        jTable.setRowHeight(30);\n        jTable.setRowMargin(2);\n        jTable.setSelectionBackground(new java.awt.Color(102, 255, 51));\n        jTable.setSurrendersFocusOnKeystroke(true);\n\n    }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\nimport javax.swing.JTable;\nimport java.awt.Font;\nimport java.awt.Color;\nimport javax.swing.table.JTableHeader;\nimport javax.swing.table.DefaultTableCellRenderer;\n\npublic class Class4Test {\n\n    @Test\n    public void testTablePreference() {\n        JTable jTable = new JTable();\n        Class4 class4 = new Class4();\n        class4.tablePreference(jTable);\n\n        // Check if header font is changed\n        JTableHeader header = jTable.getTableHeader();\n        Font font = header.getFont();\n        assertEquals(font.getSize(), 26);\n        assertEquals(font.getName(), \"Segoe UI\");\n        assertTrue(font.isBold());\n\n        // Check if header background color is changed\n        Color backgroundColor = header.getBackground();\n        assertEquals(backgroundColor, new Color(32, 136, 203));\n\n        // Check if header foreground color is changed\n        Color foregroundColor = header.getForeground();\n        assertEquals(foregroundColor, new Color(255, 255, 255));\n\n        // Check if cell alignment is center\n        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) jTable.getCellRenderer(0, 0);\n        assertEquals(renderer.getHorizontalAlignment(), JLabel.CENTER);\n\n        // Check if row sorter is set to true\n        assertTrue(jTable.getAutoCreateRowSorter());\n\n        // Check if font is set\n        assertEquals(jTable.getFont(), new java.awt.Font(\"Calibri\", 0, 24));\n\n        // Check if auto resize mode is set to last column\n        assertEquals(jTable.getAutoResizeMode(), javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);\n\n        // Check if row height is set\n        assertEquals(jTable.getRowHeight(), 30);\n\n        // Check if row margin is set\n        assertEquals(jTable.getRowMargin(), 2);\n\n        // Check if selection background color is set\n        assertEquals(jTable.getSelectionBackground(), new java.awt.Color(102, 255, 51));\n\n        // Check if focus is set on keystroke\n        assertTrue(jTable.getSurrendersFocusOnKeystroke());\n    }\n}\n"}
{"code_source": "\n\nimport java.util.Scanner;\n\npublic class EmailBackProgram {\n    private String firstname;\n    private String lastname;\n    private String password;\n    private String department;\n    private String email;\n    private int mailboxCapacity = 500;\n    private int defaultPasswordLength = 10;\n    private String alternateEmail;\n    private String companySuffix = \"xyzemail.com\";\n\n    public EmailBackProgram(String firstname, String lastname) {\n        this.firstname = firstname;\n        this.lastname = lastname;\n\n        this.department = setDepartment();\n\n        this.password = randomPassword(defaultPasswordLength);\n        System.out.println(\"Your Password is: \" + this.password);\n\n        email = firstname.toLowerCase() + \".\" + lastname.toLowerCase() + \"@\" + department + \".\" + companySuffix;\n    }\n\n    private String setDepartment() {\n        System.out.print(\"Welcome!! \" + firstname + \".\"+\" You are Our New Employee.\" + \" \\nChoose Department Codes\\n1 C++\\n2 Java\\n3 Python\\n0 None\\nEnter Department Code: \");\n        Scanner in = new Scanner(System.in);\n        int depChoice = in.nextInt();\n        if(depChoice == 1) {return \"C++\";}\n        else if(depChoice == 2) {return \"Java\";}\n        else if(depChoice == 3) {return \"Python\";}\n        else {return \"\";}\n    }\n\n    private String randomPassword(int length) {\n        String passwordSet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*^\";\n        char [] password = new char[length];\n        for(int i = 0; i<length;i++) {\n            int rand = (int)(Math.random()*passwordSet.length());\n            password[i] = passwordSet.charAt(rand);\n        }\n        return new String(password);\n    }\n\n    public void setMailboxCapacity(int capacity) {\n        this.mailboxCapacity = capacity;\n    }\n\n    public void setAlternateEmail(String altEmail) {\n        this.alternateEmail = altEmail;\n    }\n\n    public void changePassword(String password) {\n        this.password = password;\n    }\n\n    public int getMailboxCapacity() {return mailboxCapacity;}\n    public String getAlternateEmail() {return alternateEmail;}\n    public String getPassword() {return password;}\n\n    public String showInfo() {\n        return \"Display Name: \" + firstname + \" \" + lastname +\n                \"\\nCompany Email: \" + email +\n                \"\\nMailbox Capacity: \" + mailboxCapacity + \"mb\";\n    }\n}", "test_case": "import static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.Scanner;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class EmailBackProgramTest {\n\n    private EmailBackProgram email;\n\n    @Before\n    public void setUp() {\n        email = new EmailBackProgram(\"John\", \"Doe\");\n    }\n\n    @Test\n    public void testSetMailboxCapacity() {\n        email.setMailboxCapacity(1000);\n        assertEquals(1000, email.getMailboxCapacity());\n    }\n\n    @Test\n    public void testSetAlternateEmail() {\n        email.setAlternateEmail(\"johndoe@gmail.com\");\n        assertEquals(\"johndoe@gmail.com\", email.getAlternateEmail());\n    }\n\n    @Test\n    public void testChangePassword() {\n        email.changePassword(\"newPassword\");\n        assertEquals(\"newPassword\", email.getPassword());\n    }\n\n    @Test\n    public void testShowInfo() {\n        String expected = \"Display Name: John Doe\\nCompany Email: john.doe@.xyzemail.com\\nMailbox Capacity: 500mb\";\n        String actual = email.showInfo();\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testSetDepartment() {\n        String input = \"2\";\n        InputStream in = new ByteArrayInputStream(input.getBytes());\n        System.setIn(in);\n        Scanner scanner = new Scanner(System.in);\n        String department = email.setDepartment(scanner);\n        assertNotNull(department);\n    }\n}\n"}
{"code_source": "\n\nimport java.util.Scanner;\n\npublic class Student {\n    private String firstName;\n    private String lastName;\n    private int gradeYear;\n    private String studentID;\n    private String courses = \"\";\n    private int tuitionBalance = 0;\n    private static int costOfCourse = 600;\n    private static int id = 1000;\n\n    public Student() {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter Student First Name: \");\n        this.firstName = sc.nextLine();\n\n        System.out.print(\"Enter Student Last Name: \");\n        this.lastName = sc.nextLine();\n\n        System.out.print(\"1 - Martic\\n2 - Intermediate\\n3 - B.tech\\n4 - M.tech\\nEnter Student class level: \");\n        this.gradeYear = sc.nextInt();\n\n        setStudentID();\n    }\n\n    //Generate an ID\n    private void setStudentID() {\n        // Grade Level + ID\n        id++;\n        this.studentID = gradeYear + \"\" + id;\n\n    }\n\n    public void enroll() {\n        do {\n            System.out.print(\"Enter Course to enroll (Q TO quit): \");\n            Scanner sc = new Scanner(System.in);\n            String course = sc.nextLine();\n            if(!course.equals(\"Q\")) {\n                courses = courses + \"\\n  \" + course;\n                tuitionBalance = tuitionBalance + costOfCourse;\n            }\n            else {\n                //System.out.println(\"BREAK!\");\n                break;\n            }\n        } while(1 != 0);\n\n    }\n\n    //View Balance\n    public void viewBalance() {\n        System.out.println(\"Your Balance is: $\" + tuitionBalance);\n\n    }\n\n    //Pay Tuition\n    public void payTuition() {\n        viewBalance();\n        System.out.print(\"Enter yout payment: \");\n        Scanner sc = new Scanner(System.in);\n        int payment = sc.nextInt();\n        tuitionBalance = tuitionBalance - payment;\n        System.out.println(\"Thank you for your payment of $\" + payment);\n        viewBalance();\n    }\n\n    // Show Status\n    public String toString() {\n        return \"Name: \" + firstName + \" \" + lastName +\n                \"\\nGrade Level: \" + gradeYear +\n                \"\\nStudent ID: \" + studentID +\n                \"\\nCourses Enrolled: \" + courses +\n                \"\\nBalance: $\" + tuitionBalance;\n    }\n\n}", "test_case": "import org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class StudentTest {\n    private Student student;\n\n    @Before\n    public void setUp() {\n        student = new Student();\n    }\n\n    @Test\n    public void testEnroll() {\n        student.enroll();\n        assertTrue(student.toString().contains(\"Courses Enrolled:\"));\n    }\n\n    @Test\n    public void testPayTuition() {\n        int initialBalance = student.getTuitionBalance();\n        student.payTuition();\n        assertEquals(initialBalance - student.getTuitionBalance(), student.getPayment());\n    }\n\n    @Test\n    public void testToString() {\n        assertNotNull(student.toString());\n    }\n}\n"}
{"code_source": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\n\npublic class EncryptionProgram {\n    private final Scanner scanner;\n    private final ArrayList<Character> list;\n    private ArrayList<Character> key;\n    private char[] message;\n\n    // constructor to initialize the members\n    EncryptionProgram() {\n        scanner = new Scanner(System.in);\n        list = new ArrayList<>();\n        key = new ArrayList<>();\n\n        newMessage();\n        takeInput();\n    }\n\n    // method to ask task to do from user\n    private void takeInput() {\n        while (true) {\n            System.out.println(\"(H)elp\");\n            System.out.print(\"-> \");\n            char response = scanner.nextLine().toUpperCase().charAt(0);\n\n            switch (response) {\n                case 'H' -> showHelp();\n                case 'S' -> getMessage();\n                case 'E' -> encrypt();\n                case 'D' -> decrypt();\n                case 'Q' -> System.exit(0);\n            }\n        }\n    }\n\n    private void showHelp() {\n        System.out.println(\"|`````````````````````````````|\");\n        System.out.println(\"| S -> to show the message    |\");\n        System.out.println(\"| E -> to encrypt the message |\");\n        System.out.println(\"| D -> to decrypt the message |\");\n        System.out.println(\"| Q -> to quit the session    |\");\n        System.out.println(\"|.............................|\");\n    }\n\n    // method to get message from user\n    private void newMessage() {\n        System.out.println(\"--------------------------------------------------------------------------------\");\n        System.out.print(\"ENTER YOUR MESSAGE -> \");\n        message = scanner.nextLine().toCharArray();\n        System.out.println(\"--------------------------------------------------------------------------------\");\n\n        generateKey();\n    }\n\n    // method to show encrypted\\decrypted message\n    private void getMessage() {\n        System.out.print(\"YOUR MESSAGE IS: \");\n        for (char c : message) {\n            System.out.print(c);\n        }\n        System.out.println();\n    }\n\n    // method to generate new key\n    private void generateKey() {\n        char character = ' ';\n        // resetting values for the new key\n        key.clear();\n\n        // list of characters\n        for (int i = 32; i <= 126; i++) {\n            list.add(character);\n            character++;\n        }\n\n\n        // generating new key\n        key = new ArrayList<>(list);\n        Collections.shuffle(key);\n\n        System.out.println(\"KEY GENERATED\");\n    }\n\n    // method to encrypt the plain text\n    private void encrypt() {\n        for (int i = 0; i < message.length; i++) {\n            for (int j = 0; j < list.size(); j++) {\n                if (message[i] == list.get(j)) {\n                    message[i] = key.get(j);\n                    break;\n                }\n            }\n        }\n\n        System.out.println(\"MESSAGE ENCRYPTED\");\n        for (char x : message) {\n            System.out.print(x);\n        }\n        System.out.println();\n    }\n\n    // method to decrypt the cipher text\n    private void decrypt() {\n        for (int i = 0; i < message.length; i++) {\n            for (int j = 0; j < key.size(); j++) {\n                if (message[i] == key.get(j)) {\n                    message[i] = list.get(j);\n                    break;\n                }\n            }\n        }\n\n        System.out.println(\"MESSAGE DECRYPTED\");\n        for (char x : message) {\n            System.out.print(x);\n        }\n        System.out.println();\n    }\n}", "test_case": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class EncryptionProgramTest {\n\n    private EncryptionProgram encryptionProgram;\n\n    @BeforeEach\n    public void setup() {\n        encryptionProgram = new EncryptionProgram();\n    }\n\n    @Test\n    public void testNewMessage() {\n        encryptionProgram.newMessage();\n        Assertions.assertNotNull(encryptionProgram.message);\n    }\n\n    @Test\n    public void testGenerateKey() {\n        encryptionProgram.generateKey();\n        Assertions.assertEquals(95, encryptionProgram.key.size());\n    }\n\n    @Test\n    public void testEncrypt() {\n        encryptionProgram.newMessage();\n        char[] message = encryptionProgram.message;\n        encryptionProgram.generateKey();\n        encryptionProgram.encrypt();\n        Assertions.assertNotEquals(message, encryptionProgram.message);\n    }\n\n    @Test\n    public void testDecrypt() {\n        encryptionProgram.newMessage();\n        char[] message = encryptionProgram.message;\n        encryptionProgram.generateKey();\n        encryptionProgram.encrypt();\n        encryptionProgram.decrypt();\n        Assertions.assertEquals(message, encryptionProgram.message);\n    }\n}\n"}
{"code_source": "import javax.swing.*;\nimport javax.swing.filechooser.FileNameExtensionFilter;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class TextEditor extends JFrame implements ActionListener {\n    JTextArea textArea;\n    JScrollPane scrollPane;\n    JLabel fontLabel;\n    JSpinner fontSizeSpinner;\n    JComboBox<String> fontBox;\n\n    JMenuBar menuBar;\n    JMenu fileMenu;\n    JMenuItem openItem;\n    JMenuItem saveItem;\n    JMenuItem exitItem;\n\n    TextEditor() {\n        ImageIcon icon = new ImageIcon(\"logo.png\");\n\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        this.setTitle(\"Text Editor\");\n        this.setIconImage(icon.getImage());\n        this.setSize(900, 600);\n        this.setLayout(new FlowLayout());\n        this.setLocationRelativeTo(null);\n\n//        TEXT FIELD\n        textArea = new JTextArea();\n\n        textArea.setText(\"Made By Sidharth Mudgil\");\n        textArea.setLineWrap(true);\n        textArea.setWrapStyleWord(true);\n        textArea.setFont(new Font(\"Poppins\", Font.PLAIN, 24));\n\n        textArea.setBackground(new Color(71, 86, 140));\n        textArea.setForeground(new Color(255, 255, 255));\n        textArea.setCaretColor(new Color(240, 56, 0));\n\n//        SCROLL PANE\n        scrollPane = new JScrollPane(textArea);\n        scrollPane.setPreferredSize(new Dimension(880, 525));\n        scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);\n\n//        FONT SIZE LABEL\n        fontLabel = new JLabel(\"Font\");\n\n//        FONT SIZE SPINNER\n        fontSizeSpinner = new JSpinner();\n        fontSizeSpinner.setPreferredSize(new Dimension(50, 25));\n        fontSizeSpinner.setValue(24);\n        fontSizeSpinner.addChangeListener(\n                e -> textArea.setFont(new Font(textArea.getFont().getFamily(),\n                        Font.PLAIN,\n                        (int) fontSizeSpinner.getValue()))\n        );\n\n//        FONT BOX\n        String[] fontList = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();\n        fontBox = new JComboBox<>(fontList);\n        fontBox.addActionListener(this);\n        fontBox.setSelectedItem(\"Poppins\");\n\n//        ------------ MENU BAR ------------\n        menuBar = new JMenuBar();\n        fileMenu = new JMenu(\"File\");\n        openItem = new JMenuItem(\"Open\");\n        saveItem = new JMenuItem(\"Save\");\n        exitItem = new JMenuItem(\"Exit\");\n\n        openItem.addActionListener(this);\n        saveItem.addActionListener(this);\n        exitItem.addActionListener(this);\n\n        fileMenu.add(openItem);\n        fileMenu.add(saveItem);\n        fileMenu.add(exitItem);\n\n        menuBar.add(fileMenu);\n\n//        ------------ \\MENU BAR ------------\n\n        this.setJMenuBar(menuBar);\n        this.add(fontLabel);\n        this.add(fontSizeSpinner);\n        this.add(fontBox);\n        this.add(scrollPane);\n        this.setVisible(true);\n    }\n\n    public void actionPerformed(ActionEvent e) {\n        if (e.getSource() == fontBox) {\n            textArea.setFont(new Font((String) fontBox.getSelectedItem(), Font.PLAIN, textArea.getFont().getSize()));\n        }\n\n        if (e.getSource() == openItem) {\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setCurrentDirectory(new File(\".\"));\n\n            FileNameExtensionFilter nameExtensionFilter = new FileNameExtensionFilter(\"Text Files\", \"txt\");\n            fileChooser.setFileFilter(nameExtensionFilter);\n\n            int response = fileChooser.showOpenDialog(null);\n\n            if (response == JFileChooser.APPROVE_OPTION) {\n                File file = new File(fileChooser.getSelectedFile().getAbsolutePath());\n                Scanner fileIn = null;\n\n                try {\n                    fileIn = new Scanner(file);\n                    if (file.isFile()) {\n                        textArea.setText(\"\");\n                        while (fileIn.hasNextLine()) {\n                            String line = fileIn.nextLine() + \"\\n\";\n                            textArea.append(line);\n                        }\n                    }\n                } catch (FileNotFoundException fileNotFoundException) {\n                    fileNotFoundException.printStackTrace();\n                }\n            }\n\n        }\n        if (e.getSource() == saveItem) {\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setCurrentDirectory(new File(\".\"));\n            int response = fileChooser.showSaveDialog(null);\n\n            if (response == JFileChooser.APPROVE_OPTION) {\n                File file;\n                PrintWriter fileOut = null;\n\n                file = new File(fileChooser.getSelectedFile().getAbsolutePath());\n\n                try {\n                    fileOut = new PrintWriter(file);\n                    fileOut.println(textArea.getText());\n                } catch (FileNotFoundException fileNotFoundException) {\n                    fileNotFoundException.printStackTrace();\n                } finally {\n                    assert fileOut != null;\n                    fileOut.close();\n                }\n\n            }\n        }\n        if (e.getSource() == exitItem) {\n            System.exit(0);\n        }\n    }\n}\n", "test_case": "import org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.*;\n\npublic class TextEditorTest {\n\n    private TextEditor textEditor;\n\n    @BeforeEach\n    public void setUp() {\n        textEditor = new TextEditor();\n    }\n\n    @Test\n    public void testOpenItem() throws IOException {\n        // Create a temporary file with some text\n        File tempFile = File.createTempFile(\"test\", \".txt\");\n        PrintWriter writer = new PrintWriter(tempFile);\n        writer.println(\"Hello world!\");\n        writer.close();\n\n        // Set the current directory to the parent folder of the temporary file\n        String parentPath = tempFile.getParent();\n        File parentFolder = new File(parentPath);\n        textEditor.setCurrentDirectory(parentFolder);\n\n        // Simulate a click on the \"Open\" menu item\n        textEditor.getOpenItem().doClick();\n\n        // Verify that the text area now contains the text from the file\n        String expectedText = \"Hello world!\\n\";\n        String actualText = textEditor.getTextArea().getText();\n        assertEquals(expectedText, actualText);\n\n        // Clean up the temporary file\n        tempFile.delete();\n    }\n\n    @Test\n    public void testSaveItem() throws IOException {\n        // Set some text in the text area\n        String text = \"This is a test.\";\n        textEditor.getTextArea().setText(text);\n\n        // Create a temporary file\n        File tempFile = File.createTempFile(\"test\", \".txt\");\n\n        // Set the current directory to the parent folder of the temporary file\n        String parentPath = tempFile.getParent();\n        File parentFolder = new File(parentPath);\n        textEditor.setCurrentDirectory(parentFolder);\n\n        // Simulate a click on the \"Save\" menu item\n        textEditor.getSaveItem().doClick();\n\n        // Read the contents of the temporary file and verify that they match the text area\n        BufferedReader reader = new BufferedReader(new FileReader(tempFile));\n        String actualText = reader.readLine();\n        assertEquals(text, actualText);\n\n        // Clean up the temporary file\n        reader.close();\n        tempFile.delete();\n    }\n}\n"}
{"code_source": "import javax.swing.*;\nimport java.awt.*;\nimport java.util.Calendar;\n\npublic class ClockPanel extends JPanel {\n    JLabel hrsLabel;\n    JLabel minLabel;\n    JLabel secLabel;\n\n    int hrsNow;\n    int minNow;\n    int secNow;\n\n    ClockPanel() {\n        JLabel colon1;\n        JLabel colon2;\n        JLabel shadow1;\n        JLabel shadow2;\n        JLabel shadow3;\n\n        final int D = 70;\n\n        Color purple = new Color(118, 51, 227);\n        Color lightPurple = new Color(180, 147, 236);\n        Color shadowPurple = new Color(118, 51, 227,40);\n\n        Font digitFont = new Font(\"HelvLight\", Font.PLAIN, 38);\n        Font colonFont = new Font(\"anton\", Font.PLAIN, 36);\n\n        setPreferredSize(new Dimension(300, 150));\n        setLayout(null);\n        setOpaque(false);\n\n        hrsLabel = new JLabel(\"00\");\n        hrsLabel.setBounds(25, 40, D, D);\n        hrsLabel.setVerticalAlignment(JLabel.CENTER);\n        hrsLabel.setHorizontalAlignment(JLabel.CENTER);\n        hrsLabel.setBackground(purple);\n        hrsLabel.setForeground(Color.WHITE);\n        hrsLabel.setFont(digitFont);\n        hrsLabel.setOpaque(true);\n\n        minLabel = new JLabel(\"00\");\n        minLabel.setBounds(115, 40, D, D);\n        minLabel.setVerticalAlignment(JLabel.CENTER);\n        minLabel.setHorizontalAlignment(JLabel.CENTER);\n        minLabel.setBackground(purple);\n        minLabel.setForeground(Color.WHITE);\n        minLabel.setFont(digitFont);\n        minLabel.setOpaque(true);\n\n        secLabel = new JLabel(\"00\");\n        secLabel.setBounds(205, 40, D, D);\n        secLabel.setVerticalAlignment(JLabel.CENTER);\n        secLabel.setHorizontalAlignment(JLabel.CENTER);\n        secLabel.setBackground(purple);\n        secLabel.setForeground(Color.WHITE);\n        secLabel.setFont(digitFont);\n        secLabel.setOpaque(true);\n\n        colon1 = new JLabel(\":\");\n        colon1.setBounds(95, 40, 20, D);\n        colon1.setVerticalAlignment(JLabel.CENTER);\n        colon1.setHorizontalAlignment(JLabel.CENTER);\n        colon1.setForeground(lightPurple);\n        colon1.setFont(colonFont);\n\n        colon2 = new JLabel(\":\");\n        colon2.setBounds(185, 40, 20, D);\n        colon2.setVerticalAlignment(JLabel.CENTER);\n        colon2.setHorizontalAlignment(JLabel.CENTER);\n        colon2.setForeground(lightPurple);\n        colon2.setFont(colonFont);\n\n        shadow1 = new JLabel();\n        shadow1.setBounds(30,45,70,70);\n        shadow1.setBackground(shadowPurple);\n        shadow1.setOpaque(true);\n\n        shadow2 = new JLabel();\n        shadow2.setBounds(120,45,70,70);\n        shadow2.setBackground(shadowPurple);\n        shadow2.setOpaque(true);\n\n        shadow3 = new JLabel();\n        shadow3.setBounds(210,45,70,70);\n        shadow3.setBackground(shadowPurple);\n        shadow3.setOpaque(true);\n\n        add(shadow1);\n        add(shadow2);\n        add(shadow3);\n        add(hrsLabel);\n        add(minLabel);\n        add(secLabel);\n        add(colon1);\n        add(colon2);\n    }\n    @SuppressWarnings({\"BusyWait\", \"InfiniteLoopStatement\"})\n    public void setTime() {\n        while (true) {\n            hrsNow = Calendar.getInstance().get(Calendar.HOUR);\n            if (hrsNow == 0) {\n                hrsNow = 12;\n            }\n            hrsLabel.setText(String.valueOf(String.format(\"%02d\",hrsNow)));\n\n            minNow = Calendar.getInstance().get(Calendar.MINUTE);\n            minLabel.setText(String.valueOf(String.format(\"%02d\",minNow)));\n\n            secNow = Calendar.getInstance().get(Calendar.SECOND);\n            secLabel.setText(String.valueOf(String.format(\"%02d\",secNow)));\n\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class ClockPanelTest {\n\n    @Test\n    public void testSetTime() throws InterruptedException {\n        ClockPanel clockPanel = new ClockPanel();\n        clockPanel.setTime();\n        Thread.sleep(3000);\n        int hrsNow = Integer.parseInt(clockPanel.hrsLabel.getText());\n        int minNow = Integer.parseInt(clockPanel.minLabel.getText());\n        int secNow = Integer.parseInt(clockPanel.secLabel.getText());\n        assertTrue(hrsNow >= 0 && hrsNow <= 12);\n        assertTrue(minNow >= 0 && minNow <= 59);\n        assertTrue(secNow >= 0 && secNow <= 59);\n    }\n}\n"}
{"code_source": "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\n\npublic class CloseButton extends JButton {\n    CloseButton() {\n        ImageIcon closeUnfocusedIcon = new ImageIcon(\"close-unfocused.png\");\n        ImageIcon closeFocusedIcon = new ImageIcon(\"close-focused.png\");\n\n        setIcon(closeUnfocusedIcon);\n        setBounds(280, 2, 18, 18);\n        setPreferredSize(new Dimension(18, 18));\n        setVerticalAlignment(JButton.CENTER);\n        setHorizontalAlignment(JButton.CENTER);\n        setFocusable(false);\n        setContentAreaFilled(false);\n        setBorderPainted(false);\n        addMouseListener(new MouseAdapter() {\n            @Override\n            public void mouseEntered(MouseEvent e) {\n                setIcon(closeFocusedIcon);\n            }\n\n            @Override\n            public void mouseExited(MouseEvent e) {\n                setIcon(closeUnfocusedIcon);\n            }\n        });\n        addActionListener(e -> {\n            System.out.println(\"SYSTEM SHUTTING OFF...\");\n            System.exit(0);\n        });\n    }\n}\n", "test_case": "import org.junit.Test;\nimport org.mockito.Mockito;\n\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport java.awt.event.ActionListener;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\n\nimport static org.junit.Assert.*;\n\npublic class CloseButtonTest {\n\n    @Test\n    public void testCloseButton() {\n        ImageIcon closeUnfocusedIcon = Mockito.mock(ImageIcon.class);\n        ImageIcon closeFocusedIcon = Mockito.mock(ImageIcon.class);\n\n        CloseButton closeButton = new CloseButton();\n        closeButton.setIcon(closeUnfocusedIcon);\n\n        // Test button properties\n        assertEquals(new Dimension(18, 18), closeButton.getPreferredSize());\n        assertFalse(closeButton.isFocusable());\n        assertFalse(closeButton.isContentAreaFilled());\n        assertFalse(closeButton.isBorderPainted());\n\n        // Test mouse enter event\n        closeButton.getMouseListeners()[0].mouseEntered(new MouseEvent(closeButton, MouseEvent.MOUSE_ENTERED, 0, 0, 0, 0, 0, false));\n        assertEquals(closeFocusedIcon, closeButton.getIcon());\n\n        // Test mouse exit event\n        closeButton.getMouseListeners()[0].mouseExited(new MouseEvent(closeButton, MouseEvent.MOUSE_EXITED, 0, 0, 0, 0, 0, false));\n        assertEquals(closeUnfocusedIcon, closeButton.getIcon());\n\n        // Test action listener\n        ActionListener[] actionListeners = closeButton.getActionListeners();\n        assertEquals(1, actionListeners.length);\n\n        // Use Mockito to mock the System class and verify the expected behavior\n        System mockedSystem = Mockito.mock(System.class);\n        System.setOut(System.err); // Redirect standard error to standard output for testing purposes\n        actionListeners[0].actionPerformed(null);\n        Mockito.verify(mockedSystem).exit(0);\n    }\n}\n"}
{"code_source": "public class MyClass20 {\n    public static int trailingZeros(int n) {\n        int count = 0;\n        for (int i = 5; n / i >= 1; i *= 5) {\n            count += n / i;\n        }\n        return count;\n    }\n\n\n}\n", "test_case": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass MyClass20Test {\n\n    @Test\n    void testTrailingZeros() {\n        assertEquals(0, MyClass20.trailingZeros(4));\n        assertEquals(1, MyClass20.trailingZeros(5));\n        assertEquals(1, MyClass20.trailingZeros(6));\n        assertEquals(2, MyClass20.trailingZeros(10));\n        assertEquals(6, MyClass20.trailingZeros(25));\n        assertEquals(7, MyClass20.trailingZeros(30));\n        assertEquals(24, MyClass20.trailingZeros(100));\n    }\n}\n"}
{"code_source": "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class Frame extends JFrame implements ActionListener {\n    int posX = 0;\n    int posY = 0;\n    JPanel mainPanel;\n    ClockPanel clockPanel;\n    StopwatchPanel stopwatchPanel;\n    TimerPanel timerPanel;\n\n    CloseButton closeButton;\n    DragArea dragArea;\n    SwipeButton rightSwipe;\n    SwipeButton leftSwipe;\n\n    int speed;\n\n    Frame() {\n        speed = 10;\n\n        closeButton = new CloseButton();\n\n        dragArea = new DragArea();\n        dragArea.addMouseListener(new MouseAdapter() {\n            @Override\n            public void mousePressed(MouseEvent e) {\n                posX = e.getX();\n                posY = e.getY();\n            }\n        });\n        dragArea.addMouseMotionListener(new MouseAdapter() {\n            @Override\n            public void mouseDragged(MouseEvent e) {\n                //sets frame position when mouse dragged\n                setLocation(e.getXOnScreen() - posX, e.getYOnScreen() - posY);\n                stopwatchPanel.lapsFrame.setLocation(e.getXOnScreen() - posX + 300, e.getYOnScreen() - posY);\n            }\n        });\n\n        leftSwipe = new SwipeButton(\"left\");\n        rightSwipe = new SwipeButton(\"right\");\n        leftSwipe.addActionListener(this);\n        rightSwipe.addActionListener(this);\n    }\n\n    void createFrame() {\n        //clockPanel\n        clockPanel = new ClockPanel();\n        clockPanel.setBounds(0, 0, 300, 150);\n        stopwatchPanel = new StopwatchPanel();\n        stopwatchPanel.setBounds(300, 0, 300, 150);\n        timerPanel = new TimerPanel();\n        timerPanel.setBounds(600, 0, 300, 150);\n\n\n        //mainPanel\n        mainPanel = new JPanel();\n        mainPanel.setBounds(0, 0, 300, 150);\n        mainPanel.setPreferredSize(new Dimension(300, 150));\n        mainPanel.setBackground(Color.WHITE);\n        mainPanel.setLayout(null);\n        mainPanel.add(dragArea);\n        mainPanel.add(closeButton);\n        mainPanel.add(leftSwipe);\n        mainPanel.add(rightSwipe);\n        mainPanel.add(clockPanel);\n        mainPanel.add(stopwatchPanel);\n        mainPanel.add(timerPanel);\n\n        //frame\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setLocation(400, 400);\n        setLayout(new FlowLayout());\n        setUndecorated(true);\n        setBackground(new Color(0, 0, 0, 0));\n        add(mainPanel);\n        pack();\n        setVisible(true);\n\n        clockPanel.setTime();\n    }\n\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        if (e.getSource() == leftSwipe) {\n            new Timer(0, e1 -> {\n                leftSwipe.setVisible(false);\n                clockPanel.setLocation(clockPanel.getX() + speed, 0);\n                stopwatchPanel.setLocation(stopwatchPanel.getX() + speed, 0);\n                timerPanel.setLocation(timerPanel.getX() + speed, 0);\n                if (clockPanel.getX() == 0) {\n                    leftSwipe.setEnabled(false);\n                    leftSwipe.setVisible(true);\n                    ((Timer) e1.getSource()).stop();\n                } else if (clockPanel.getX() == -300) {\n                    rightSwipe.setEnabled(true);\n                    leftSwipe.setVisible(true);\n                    ((Timer) e1.getSource()).stop();\n                }\n            }).start();\n        }\n        if (e.getSource() == rightSwipe) {\n            new Timer(0, e1 -> {\n                rightSwipe.setVisible(false);\n                clockPanel.setLocation(clockPanel.getX() - speed, 0);\n                stopwatchPanel.setLocation(stopwatchPanel.getX() - speed, 0);\n                timerPanel.setLocation(timerPanel.getX() - speed, 0);\n\n                if (clockPanel.getX() == -300) {\n                    leftSwipe.setEnabled(true);\n                    rightSwipe.setVisible(true);\n                    ((Timer) e1.getSource()).stop();\n                } else if (clockPanel.getX() == -600) {\n                    rightSwipe.setEnabled(false);\n                    rightSwipe.setVisible(true);\n                    ((Timer) e1.getSource()).stop();\n                }\n            }).start();\n        }\n    }\n}\n", "test_case": "import static org.junit.Assert.*;\nimport org.junit.Test;\n\npublic class FrameTest {\n\n    @Test\n    public void testFrameCreation() {\n        Frame frame = new Frame();\n        frame.createFrame();\n        assertEquals(frame.getSize().width, 900);\n        assertEquals(frame.getSize().height, 150);\n        assertEquals(frame.getContentPane().getBackground().getAlpha(), 0);\n        assertFalse(frame.isUndecorated());\n        assertNotNull(frame.mainPanel);\n        assertNotNull(frame.clockPanel);\n        assertNotNull(frame.stopwatchPanel);\n        assertNotNull(frame.timerPanel);\n        assertNotNull(frame.closeButton);\n        assertNotNull(frame.dragArea);\n        assertNotNull(frame.leftSwipe);\n        assertNotNull(frame.rightSwipe);\n    }\n\n    @Test\n    public void testCreateFrame() {\n        Frame frame = new Frame();\n        frame.createFrame();\n        assertEquals(frame.mainPanel.getSize().width, 300);\n        assertEquals(frame.mainPanel.getSize().height, 150);\n        assertEquals(frame.mainPanel.getBackground(), Color.WHITE);\n        assertEquals(frame.mainPanel.getLayout(), null);\n        assertEquals(frame.dragArea.getLocation().x, 0);\n        assertEquals(frame.dragArea.getLocation().y, 0);\n        assertEquals(frame.closeButton.getLocation().x, 280);\n        assertEquals(frame.closeButton.getLocation().y, 2);\n        assertEquals(frame.leftSwipe.getLocation().x, 0);\n        assertEquals(frame.leftSwipe.getLocation().y, 120);\n        assertEquals(frame.rightSwipe.getLocation().x, 270);\n        assertEquals(frame.rightSwipe.getLocation().y, 120);\n        assertEquals(frame.clockPanel.getLocation().x, 0);\n        assertEquals(frame.clockPanel.getLocation().y, 0);\n        assertEquals(frame.stopwatchPanel.getLocation().x, 300);\n        assertEquals(frame.stopwatchPanel.getLocation().y, 0);\n        assertEquals(frame.timerPanel.getLocation().x, 600);\n        assertEquals(frame.timerPanel.getLocation().y, 0);\n    }\n\n    @Test\n    public void testActionPerformed() {\n        Frame frame = new Frame();\n        frame.createFrame();\n\n        // test left swipe\n        frame.leftSwipe.doClick();\n        assertTrue(frame.leftSwipe.isEnabled());\n        assertFalse(frame.rightSwipe.isEnabled());\n        assertEquals(frame.clockPanel.getLocation().x, 10);\n        assertEquals(frame.stopwatchPanel.getLocation().x, 310);\n        assertEquals(frame.timerPanel.getLocation().x, 610);\n\n        // test right swipe\n        frame.rightSwipe.doClick();\n        assertFalse(frame.leftSwipe.isEnabled());\n        assertTrue(frame.rightSwipe.isEnabled());\n        assertEquals(frame.clockPanel.getLocation().x, 0);\n        assertEquals(frame.stopwatchPanel.getLocation().x, 300);\n        assertEquals(frame.timerPanel.getLocation().x, 600);\n    }\n}\n"}
{"code_source": "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class StopwatchPanel extends JPanel implements ActionListener, ItemListener, Runnable {\n    JLabel counter;\n\n    JButton startButton;\n    JCheckBox playPauseButton;\n    JButton lapButton;\n    JButton stopButton;\n\n    JFrame lapsFrame;\n    JTextPane lapsPane;\n\n    int mm, ss, hs, totalLaps;\n    boolean on;\n\n    StopwatchPanel() {\n        Color purple = new Color(118, 51, 227);\n        Color lightPurple = new Color(180, 147, 236);\n\n        Font counterFont = new Font(\"HelvLight\", Font.PLAIN, 60);\n        Font lapFont = new Font(\"poppins\", Font.PLAIN, 18);\n\n        ImageIcon playIcon = new ImageIcon(\"play.png\");\n        ImageIcon pauseIcon = new ImageIcon(\"pause.png\");\n        ImageIcon stopIcon = new ImageIcon(\"stop.png\");\n        ImageIcon lapIcon = new ImageIcon(\"lap.png\");\n\n        on = false;\n        totalLaps = 0;\n\n        setPreferredSize(new Dimension(300, 150));\n        setLayout(null);\n        setOpaque(false);\n\n        counter = new JLabel(\"00:00.00\");\n        counter.setFont(counterFont);\n        counter.setForeground(purple);\n        counter.setBounds(25, 35, 250, 70);\n        counter.setVerticalAlignment(JLabel.CENTER);\n        counter.setHorizontalAlignment(JLabel.CENTER);\n        counter.setVerticalTextPosition(JLabel.CENTER);\n        counter.setHorizontalTextPosition(JLabel.CENTER);\n\n        playPauseButton = new JCheckBox();\n        playPauseButton.setBounds(160, 110, 30, 30);\n        playPauseButton.setVerticalAlignment(JCheckBox.CENTER);\n        playPauseButton.setHorizontalAlignment(JCheckBox.CENTER);\n        playPauseButton.setBorderPainted(false);\n        playPauseButton.setContentAreaFilled(false);\n        playPauseButton.setIcon(playIcon);\n        playPauseButton.setSelectedIcon(pauseIcon);\n        playPauseButton.setSelected(true);\n        playPauseButton.setVisible(false);\n        playPauseButton.addItemListener(this);\n\n        stopButton = new JButton();\n        stopButton.setBounds(100, 110, 30, 30);\n        stopButton.setVerticalAlignment(JButton.CENTER);\n        stopButton.setHorizontalAlignment(JButton.CENTER);\n        stopButton.setBorderPainted(false);\n        stopButton.setContentAreaFilled(false);\n        stopButton.setIcon(stopIcon);\n        stopButton.setVisible(false);\n        stopButton.addActionListener(this);\n\n        lapButton = new JButton();\n        lapButton.setBounds(100, 110, 30, 30);\n        lapButton.setVerticalAlignment(JButton.CENTER);\n        lapButton.setHorizontalAlignment(JButton.CENTER);\n        lapButton.setFont(lapFont);\n        lapButton.setBorderPainted(false);\n        lapButton.setContentAreaFilled(false);\n        lapButton.setIcon(lapIcon);\n        lapButton.setVisible(false);\n        lapButton.addActionListener(this);\n\n        lapsPane = new JTextPane();\n        lapsPane.setPreferredSize(new Dimension(70, 150));\n        lapsPane.setBackground(lightPurple);\n        lapsPane.setForeground(Color.WHITE);\n        lapsPane.setEditable(false);\n\n\n        lapsFrame = new JFrame();\n        lapsFrame.setUndecorated(true);\n        lapsFrame.setBackground(new Color(0, 0, 0, 0));\n        lapsFrame.setSize(70, 150);\n        lapsFrame.setLayout(new FlowLayout());\n        lapsFrame.add(lapsPane);\n        lapsFrame.pack();\n\n\n        startButton = new JButton(\"start\");\n        startButton.setForeground(Color.WHITE);\n        startButton.setBackground(lightPurple);\n        startButton.setBounds(110, 110, 80, 30);\n        startButton.setVerticalAlignment(JButton.CENTER);\n        startButton.setHorizontalAlignment(JButton.CENTER);\n        startButton.setVerticalTextPosition(JButton.CENTER);\n        startButton.setHorizontalTextPosition(JButton.CENTER);\n        startButton.setBorder(null);\n        startButton.setFocusable(false);\n        startButton.addActionListener(this);\n        startButton.addMouseListener(new MouseAdapter() {\n            @Override\n            public void mouseEntered(MouseEvent e) {\n                ((JButton) e.getSource()).setBackground(purple);\n            }\n\n            @Override\n            public void mouseExited(MouseEvent e) {\n                ((JButton) e.getSource()).setBackground(lightPurple);\n            }\n        });\n\n        add(playPauseButton);\n        add(stopButton);\n        add(lapButton);\n        add(startButton);\n        add(counter);\n\n        new Thread(this).start();\n    }\n\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        if (e.getSource() == startButton) {\n            System.out.println(\"START button pressed\");\n            playPauseButton.setVisible(true);\n            lapButton.setVisible(true);\n            startButton.setVisible(false);\n            on = true;\n            new Thread(this).start();\n        }\n        if (e.getSource() == stopButton) {\n            System.out.println(\"EVENT #STOP SUCCESSFUL\");\n            stopButton.setVisible(false);\n            playPauseButton.setVisible(false);\n            lapsFrame.dispose();\n            startButton.setVisible(true);\n            mm = ss = hs = 0;\n            counter.setText(\"00:00.00\");\n            lapsPane.setText(\"\");\n            on = false;\n        }\n        if (e.getSource() == lapButton) {\n            System.out.println(\"EVENT #LAP_N SUCCESSFUL\");\n            totalLaps++;\n            lapsFrame.setVisible(true);\n            if (totalLaps <= 9) {\n                lapsPane.setText(lapsPane.getText() + \"+\" + counter.getText() + \"\\n\");\n            } else {\n                lapsPane.setText(\"\");\n                lapsPane.setText(\"+\" + counter.getText() + \"\\n\");\n                totalLaps = 1;\n            }\n        }\n    }\n\n    @Override\n    public void itemStateChanged(ItemEvent e) {\n        if (e.getSource() == playPauseButton) {\n            if (e.getStateChange() == ItemEvent.SELECTED) {\n                System.out.println(\"EVENT #PLAY SUCCESSFUL\");\n                stopButton.setVisible(false);\n                lapButton.setVisible(true);\n                on = true;\n                new Thread(this).start();\n            } else if (e.getStateChange() == ItemEvent.DESELECTED) {\n                System.out.println(\"EVENT #PAUSE SUCCESSFUL\");\n                lapButton.setVisible(false);\n                stopButton.setVisible(true);\n                on = false;\n            }\n        }\n    }\n\n    @Override\n    public void run() {\n        while (on) {\n            String counterText = String.format(\"%02d\", mm) + \":\"\n                    + String.format(\"%02d\", ss) + \".\"\n                    + String.format(\"%02d\", hs);\n            if (hs == 99) {\n                ss++;\n                hs = 0;\n            } else if (ss == 59) {\n                mm++;\n                ss = 0;\n            }\n            hs++;\n            counter.setText(counterText);\n            try {\n                //noinspection BusyWait\n                Thread.sleep(10);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n", "test_case": "import org.junit.Test;\nimport org.junit.Before;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JTextPane;\n\nimport static org.junit.Assert.*;\n\npublic class StopwatchPanelTest {\n    private StopwatchPanel panel;\n\n    @Before\n    public void setUp() {\n        panel = new StopwatchPanel();\n    }\n\n    @Test\n    public void testInitialState() {\n        // Check that the initial state is correct\n        assertTrue(panel.playPauseButton.isSelected());\n        assertFalse(panel.playPauseButton.isVisible());\n        assertFalse(panel.stopButton.isVisible());\n        assertFalse(panel.lapButton.isVisible());\n        assertEquals(\"00:00.00\", panel.counter.getText());\n    }\n\n    @Test\n    public void testStartButton() {\n        // Click the start button and check that the UI updates as expected\n        panel.startButton.doClick();\n        assertFalse(panel.startButton.isVisible());\n        assertTrue(panel.playPauseButton.isVisible());\n        assertTrue(panel.lapButton.isVisible());\n        assertEquals(\"00:00.00\", panel.counter.getText());\n\n        // Wait for 1 second and check that the counter has incremented\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        String counterText = panel.counter.getText();\n        assertFalse(\"00:00.00\".equals(counterText));\n    }\n\n    @Test\n    public void testPauseButton() {\n        // Start the stopwatch and wait for 1 second\n        panel.startButton.doClick();\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Click the pause button and check that the stopwatch stops\n        panel.playPauseButton.doClick();\n        String counterText1 = panel.counter.getText();\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        String counterText2 = panel.counter.getText();\n        assertEquals(counterText1, counterText2);\n    }\n\n    @Test\n    public void testStopButton() {\n        // Start the stopwatch and wait for 1 second\n        panel.startButton.doClick();\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Click the stop button and check that the UI resets to the initial state\n        panel.stopButton.doClick();\n        assertFalse(panel.playPauseButton.isVisible());\n        assertFalse(panel.lapButton.isVisible());\n        assertTrue(panel.startButton.isVisible());\n        assertEquals(\"00:00.00\", panel.counter.getText());\n    }\n\n    @Test\n    public void testLapButton() {\n        // Start the stopwatch and wait for 1 second\n        panel.startButton.doClick();\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        // Click the lap button and check that the laps pane updates with the correct value\n        panel.lapButton.doClick();\n        JFrame lapsFrame = panel.lapsFrame;\n        JTextPane lapsPane = panel.lapsPane;\n        assertTrue(lapsFrame.isVisible());\n        assertTrue(lapsPane.getText().startsWith(\"+00:01.\"));\n        assertEquals(1, panel.totalLaps);\n\n        // Wait for another 1 second and click the lap button again\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        panel.lapButton.doClick();\n        assertTrue(lapsPane.getText().startsWith(\"+00:02.\"));\n        assertEquals(2, panel.totalLaps);\n    }\n}\n"}
{"code_source": "import javax.swing.*;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\n\npublic class SwipeButton extends JButton {\n    SwipeButton(String value) {\n        ImageIcon leftIcon = new ImageIcon(\"left.png\");\n        ImageIcon rightIcon = new ImageIcon(\"right.png\");\n        if (value.equalsIgnoreCase(\"left\")) {\n            setBounds(2, 68, 10, 16);\n            setEnabled(false);\n        } else if (value.equalsIgnoreCase(\"right\")) {\n            setBounds(288, 68, 10, 16);\n        }\n        setVerticalAlignment(JButton.CENTER);\n        setHorizontalAlignment(JButton.CENTER);\n        setFocusable(false);\n        setContentAreaFilled(false);\n        setBorderPainted(false);\n        setVisible(true);\n        addMouseListener(new MouseAdapter() {\n            @Override\n            public void mouseEntered(MouseEvent e) {\n                if (value.equalsIgnoreCase(\"left\")) {\n                    setIcon(leftIcon);\n                } else if (value.equalsIgnoreCase(\"right\")) {\n                    setIcon(rightIcon);\n                }\n            }\n\n            @Override\n            public void mouseExited(MouseEvent e) {\n                setIcon(null);\n            }\n        });\n    }\n}", "test_case": "import javax.swing.*;\nimport org.junit.*;\nimport org.mockito.*;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\n\npublic class SwipeButtonTest {\n    @Mock\n    MouseEvent mouseEvent;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testSwipeButton() {\n        SwipeButton button = new SwipeButton(\"left\");\n\n        // Test that button properties are set correctly\n        Assert.assertEquals(2, button.getX());\n        Assert.assertEquals(68, button.getY());\n        Assert.assertEquals(10, button.getWidth());\n        Assert.assertEquals(16, button.getHeight());\n        Assert.assertFalse(button.isEnabled());\n        Assert.assertEquals(SwingConstants.CENTER, button.getVerticalAlignment());\n        Assert.assertEquals(SwingConstants.CENTER, button.getHorizontalAlignment());\n        Assert.assertFalse(button.isFocusable());\n        Assert.assertFalse(button.isContentAreaFilled());\n        Assert.assertFalse(button.isBorderPainted());\n        Assert.assertTrue(button.isVisible());\n\n        // Test mouseEntered event for \"left\" button\n        button.mouseEntered(mouseEvent);\n        Assert.assertEquals(\"left.png\", button.getIcon().toString());\n\n        // Test mouseExited event for \"left\" button\n        button.mouseExited(mouseEvent);\n        Assert.assertNull(button.getIcon());\n\n        // Test button creation for \"right\" button\n        button = new SwipeButton(\"right\");\n        Assert.assertEquals(288, button.getX());\n        Assert.assertEquals(68, button.getY());\n        Assert.assertEquals(10, button.getWidth());\n        Assert.assertEquals(16, button.getHeight());\n        Assert.assertTrue(button.isEnabled());\n        Assert.assertEquals(SwingConstants.CENTER, button.getVerticalAlignment());\n        Assert.assertEquals(SwingConstants.CENTER, button.getHorizontalAlignment());\n        Assert.assertFalse(button.isFocusable());\n        Assert.assertFalse(button.isContentAreaFilled());\n        Assert.assertFalse(button.isBorderPainted());\n        Assert.assertTrue(button.isVisible());\n\n        // Test mouseEntered event for \"right\" button\n        button.mouseEntered(mouseEvent);\n        Assert.assertEquals(\"right.png\", button.getIcon().toString());\n\n        // Test mouseExited event for \"right\" button\n        button.mouseExited(mouseEvent);\n        Assert.assertNull(button.getIcon());\n    }\n}\n"}
{"code_source": "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\n\npublic class TimerPanel extends JPanel implements Runnable {\n    JLabel timer;\n    JLabel progressBar;\n    JButton startButton;\n\n    int progress;\n    int mm, ss, hs;\n\n    TimerPanel() {\n        Color purple = new Color(118, 51, 227);\n        Color lightPurple = new Color(220, 200, 255);\n\n        Font timerFont = new Font(\"HelvLight\", Font.PLAIN, 60);\n\n        setPreferredSize(new Dimension(300, 150));\n        setLayout(null);\n        setOpaque(false);\n\n        progressBar = new JLabel();\n        progressBar.setFont(timerFont);\n        progressBar.setBackground(lightPurple);\n        progressBar.setBounds(0, 0, 300, 150);\n        progressBar.setVerticalAlignment(JLabel.CENTER);\n        progressBar.setHorizontalAlignment(JLabel.CENTER);\n        progressBar.setVerticalTextPosition(JLabel.CENTER);\n        progressBar.setHorizontalTextPosition(JLabel.CENTER);\n        progressBar.setOpaque(true);\n\n        timer = new JLabel(\"00:00.00\");\n        timer.setFont(timerFont);\n        timer.setForeground(purple);\n        timer.setBounds(25, 40, 250, 70);\n        timer.setVerticalAlignment(JLabel.CENTER);\n        timer.setHorizontalAlignment(JLabel.CENTER);\n        timer.setVerticalTextPosition(JLabel.CENTER);\n        timer.setHorizontalTextPosition(JLabel.CENTER);\n\n        startButton = new JButton(\"start\");\n        startButton.setForeground(Color.WHITE);\n        startButton.setBackground(lightPurple);\n        startButton.setBounds(110, 110, 80, 30);\n        startButton.setVerticalAlignment(JButton.CENTER);\n        startButton.setHorizontalAlignment(JButton.CENTER);\n        startButton.setVerticalTextPosition(JButton.CENTER);\n        startButton.setHorizontalTextPosition(JButton.CENTER);\n        startButton.setBorder(null);\n        startButton.setFocusable(false);\n        startButton.addActionListener(e -> {\n            startButton.setVisible(false);\n            mm = Integer.parseInt(JOptionPane.showInputDialog(\"Value in Minutes\"));\n            progress = 150;\n            new Thread(this).start();\n        });\n        startButton.addMouseListener(new MouseAdapter() {\n            @Override\n            public void mouseEntered(MouseEvent e) {\n                ((JButton) e.getSource()).setBackground(purple);\n            }\n\n            @Override\n            public void mouseExited(MouseEvent e) {\n                ((JButton) e.getSource()).setBackground(lightPurple);\n            }\n        });\n        add(startButton);\n        add(timer);\n        add(progressBar);\n    }\n\n    @Override\n    public void run() {\n        mm = mm - 1;\n        ss = 59;\n        hs = 99;\n        while (mm >= 0) {\n            while (ss >= 0) {\n                while (hs >= 0) {\n                    hs--;\n                    String timerText = String.format(\"%02d\", mm) + \":\"\n                            + String.format(\"%02d\", ss) + \".\"\n                            + String.format(\"%02d\", hs);\n                    timer.setText(timerText);\n                    progressBar.setBounds(0, 150 - progress, 300, progress);\n                    progressBar.repaint();\n                    try {\n                        //noinspection BusyWait\n                        Thread.sleep(10);\n                    } catch (InterruptedException interruptedException) {\n                        interruptedException.printStackTrace();\n                    }\n                    if (ss == 0 && mm == 0) {\n                        progress--;\n                    }\n                }\n                if (mm == 0) {\n                    progress--;\n                }\n                ss--;\n                hs = 99;\n            }\n            progress--;\n            mm--;\n            ss = 59;\n        }\n        startButton.setVisible(true);\n        System.out.println(\"Time's Up!\");\n        timer.setText(\"00:00.00\");\n    }\n}\n", "test_case": "import javax.swing.*;\nimport org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class TimerPanelTest {\n\n    @Test\n    public void testTimerPanel() throws InterruptedException {\n        TimerPanel timerPanel = new TimerPanel();\n        JFrame frame = new JFrame();\n        frame.add(timerPanel);\n        frame.pack();\n        frame.setVisible(true);\n\n        JButton startButton = timerPanel.startButton;\n\n        // simulate user click on start button\n        startButton.doClick();\n\n        // wait for the timer to finish running\n        Thread.sleep(70_000);\n\n        // check if the timer text is \"00:00.00\"\n        assertEquals(\"00:00.00\", timerPanel.timer.getText());\n    }\n}\n"}
{"code_source": "package entity;\n\nimport java.sql.Date;\n\npublic class Customer {\n\n    private String customerIDCard;\n\n    private String customerGender;\n\n    private String customerName;\n\n    private Date customerBirthday;\n\n    private String customerVIPLevel;\n\n    private String customerPhoneNumber;\n\n    private int totalAmount;\n\n    private String remarks;\n\n    public Customer() {\n\n    }\n\n    public Customer(String customerIDCard,\n                    String customerGender,\n                    String customerName,\n                    Date customerBirthday,\n                    String customerVIPLevel,\n                    String customerPhoneNumber,\n                    int totalAmount,\n                    String remarks) {\n        this.customerIDCard = customerIDCard;\n        this.customerGender = customerGender;\n        this.customerName = customerName;\n        this.customerBirthday = customerBirthday;\n        this.customerVIPLevel = customerVIPLevel;\n        this.customerPhoneNumber = customerPhoneNumber;\n        this.totalAmount = totalAmount;\n        this.remarks = remarks;\n\n    }\n\n    public String getCustomerIDCard() {\n        return customerIDCard;\n    }\n\n    public void setCustomerIDCard(String customerIDCard) {\n        this.customerIDCard = customerIDCard;\n    }\n\n    public String getCustomerGender() {\n        return customerGender;\n    }\n\n    public void setCustomerGender(String customerGender) {\n        this.customerGender = customerGender;\n    }\n\n    public String getCustomerName() {\n        return customerName;\n    }\n\n    public void setCustomerName(String customerName) {\n        this.customerName = customerName;\n    }\n\n    public Date getCustomerBirthday() {\n        return customerBirthday;\n    }\n\n    public void setCustomerBirthday(Date customerBirthday) {\n        this.customerBirthday = customerBirthday;\n    }\n\n    public String getCustomerVIPLevel() {\n        return customerVIPLevel;\n    }\n\n    public void setCustomerVIPLevel(String customerVIPLevel) {\n        this.customerVIPLevel = customerVIPLevel;\n    }\n\n    public String getCustomerPhoneNumber() {\n        return customerPhoneNumber;\n    }\n\n    public void setCustomerPhoneNumber(String customerPhoneNumber) {\n        this.customerPhoneNumber = customerPhoneNumber;\n    }\n\n    public int getTotalAmount() {\n        return totalAmount;\n    }\n\n    public void setTotalAmount(int totalAmount) {\n        this.totalAmount = totalAmount;\n    }\n\n    public String getRemarks() {\n        return remarks;\n    }\n\n    public void setRemarks(String remarks) {\n        this.remarks = remarks;\n    }\n}\n", "test_case": "import static org.junit.Assert.*;\nimport java.sql.Date;\nimport org.junit.Test;\n\npublic class CustomerTest {\n\n    @Test\n    public void testGettersAndSetters() {\n        Customer customer = new Customer();\n        customer.setCustomerIDCard(\"1234567890\");\n        customer.setCustomerGender(\"Male\");\n        customer.setCustomerName(\"John Smith\");\n        customer.setCustomerBirthday(Date.valueOf(\"1990-01-01\"));\n        customer.setCustomerVIPLevel(\"Gold\");\n        customer.setCustomerPhoneNumber(\"1234567890\");\n        customer.setTotalAmount(1000);\n        customer.setRemarks(\"Test\");\n\n        assertEquals(\"1234567890\", customer.getCustomerIDCard());\n        assertEquals(\"Male\", customer.getCustomerGender());\n        assertEquals(\"John Smith\", customer.getCustomerName());\n        assertEquals(Date.valueOf(\"1990-01-01\"), customer.getCustomerBirthday());\n        assertEquals(\"Gold\", customer.getCustomerVIPLevel());\n        assertEquals(\"1234567890\", customer.getCustomerPhoneNumber());\n        assertEquals(1000, customer.getTotalAmount());\n        assertEquals(\"Test\", customer.getRemarks());\n    }\n}\n"}
{"code_source": "package entity;\n\nimport java.sql.Date;\n\npublic class Order {\n\n    private String orderNumber;\n\n    private String orderStatus;\n\n    private String customerIDCard;\n\n    private String roomNumber;\n\n    private Date checkInTime;\n\n    private Date checkOutTime;\n\n    private Date orderTime;\n\n    private String waiterID;\n\n    private int totalMoney;\n\n    private String remarks;\n\n    public Order() {\n\n    }\n\n    public Order(String orderNumber,\n                 String orderStatus,\n                 String customerIDCard,\n                 String roomNumber,\n                 Date checkInTime,\n                 Date checkOutTime,\n                 int totalMoney,String waiterID\n            ,String remarks,Date orderTime) {\n        this.orderNumber = orderNumber;\n        this.orderStatus = orderStatus;\n        this.customerIDCard = customerIDCard;\n        this.roomNumber = roomNumber;\n        this.checkInTime = checkInTime;\n        this.checkOutTime = checkOutTime;\n        this.totalMoney = totalMoney;\n        this.waiterID =waiterID ;\n        this.remarks = remarks;\n        this.orderTime =orderTime ;\n    }\n\n    public void setOrderTime(Date orderTime) {\n        this.orderTime = orderTime;\n    }\n\n    public void setWaiterID(String waiterID) {\n        this.waiterID = waiterID;\n    }\n\n    public String getWaiterID() {\n        return waiterID;\n    }\n\n    public Date getOrderTime() {\n        return orderTime;\n    }\n\n    public String getOrderNumber() {\n        return orderNumber;\n    }\n\n    public void setOrderNumber(String orderNumber) {\n        this.orderNumber = orderNumber;\n    }\n\n    public String getOrderStatus() {\n        return orderStatus;\n    }\n\n    public void setOrderStatus(String orderStatus) {\n        this.orderStatus = orderStatus;\n    }\n\n    public String getCustomerIDCard() {\n        return customerIDCard;\n    }\n\n    public void setCustomerIDCard(String customerIDCard) {\n        this.customerIDCard = customerIDCard;\n    }\n\n    public String getRoomNumber() {\n        return roomNumber;\n    }\n\n    public void setRoomNumber(String roomNumber) {\n        this.roomNumber = roomNumber;\n    }\n\n    public Date getCheckInTime() {\n        return checkInTime;\n    }\n\n    public void setCheckInTime(Date checkInTime) {\n        this.checkInTime = checkInTime;\n    }\n\n    public Date getCheckOutTime() {\n        return checkOutTime;\n    }\n\n    public void setCheckOutTime(Date checkOutTime) {\n        this.checkOutTime = checkOutTime;\n    }\n\n    public int getTotalMoney() {\n        return totalMoney;\n    }\n\n    public void setTotalMoney(int totalMoney) {\n        this.totalMoney = totalMoney;\n    }\n\n    public String getRemarks() {\n        return remarks;\n    }\n\n    public void setRemarks(String remarks) {\n        this.remarks = remarks;\n    }\n}\n", "test_case": "import static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\n\nimport java.sql.Date;\n\nimport org.junit.Test;\n\npublic class OrderTest {\n\n    @Test\n    public void testOrderCreation() {\n        Order order = new Order(\"1\", \"Pending\", \"1234567890\", \"101\", new Date(System.currentTimeMillis()), \n                                new Date(System.currentTimeMillis() + 86400000), 100, \"waiter1\", \"remarks\", new Date(System.currentTimeMillis()));\n        assertNotNull(order);\n        assertEquals(\"1\", order.getOrderNumber());\n        assertEquals(\"Pending\", order.getOrderStatus());\n        assertEquals(\"1234567890\", order.getCustomerIDCard());\n        assertEquals(\"101\", order.getRoomNumber());\n        assertNotNull(order.getCheckInTime());\n        assertNotNull(order.getCheckOutTime());\n        assertEquals(100, order.getTotalMoney());\n        assertEquals(\"waiter1\", order.getWaiterID());\n        assertEquals(\"remarks\", order.getRemarks());\n        assertNotNull(order.getOrderTime());\n    }\n\n    @Test\n    public void testOrderSetters() {\n        Order order = new Order();\n        assertNull(order.getOrderNumber());\n        assertNull(order.getOrderStatus());\n        assertNull(order.getCustomerIDCard());\n        assertNull(order.getRoomNumber());\n        assertNull(order.getCheckInTime());\n        assertNull(order.getCheckOutTime());\n        assertEquals(0, order.getTotalMoney());\n        assertNull(order.getWaiterID());\n        assertNull(order.getRemarks());\n        assertNull(order.getOrderTime());\n\n        order.setOrderNumber(\"2\");\n        assertEquals(\"2\", order.getOrderNumber());\n\n        order.setOrderStatus(\"Confirmed\");\n        assertEquals(\"Confirmed\", order.getOrderStatus());\n\n        order.setCustomerIDCard(\"0987654321\");\n        assertEquals(\"0987654321\", order.getCustomerIDCard());\n\n        order.setRoomNumber(\"102\");\n        assertEquals(\"102\", order.getRoomNumber());\n\n        Date checkInTime = new Date(System.currentTimeMillis());\n        order.setCheckInTime(checkInTime);\n        assertEquals(checkInTime, order.getCheckInTime());\n\n        Date checkOutTime = new Date(System.currentTimeMillis() + 86400000);\n        order.setCheckOutTime(checkOutTime);\n        assertEquals(checkOutTime, order.getCheckOutTime());\n\n        order.setTotalMoney(200);\n        assertEquals(200, order.getTotalMoney());\n\n        order.setWaiterID(\"waiter2\");\n        assertEquals(\"waiter2\", order.getWaiterID());\n\n        order.setRemarks(\"new remarks\");\n        assertEquals(\"new remarks\", order.getRemarks());\n\n        Date orderTime = new Date(System.currentTimeMillis());\n        order.setOrderTime(orderTime);\n        assertEquals(orderTime, order.getOrderTime());\n    }\n}\n"}
{"code_source": "package entity;\n\nimport java.sql.Date;\n\npublic class OrderTracking {\n\n    private String orderNumber;\n\n    private Date orderTime;\n\n    private Date checkInTime;\n\n    private Date checkOutTime;\n\n    private String remarks;\n\n    public OrderTracking() {\n\n    }\n\n    public OrderTracking(String orderNumber,\n                         Date orderTime,\n                         Date checkInTime,\n                         Date checkOutTime,\n                         String remarks) {\n        this.orderNumber = orderNumber;\n        this.orderTime = orderTime;\n        this.checkInTime = checkInTime;\n        this.checkOutTime = checkOutTime;\n        this.remarks = remarks;\n\n    }\n\n    public String getOrderNumber() {\n        return orderNumber;\n    }\n\n    public void setOrderNumber(String orderNumber) {\n        this.orderNumber = orderNumber;\n    }\n\n    public Date getOrderTime() {\n        return orderTime;\n    }\n\n    public void setOrderTime(Date orderTime) {\n        this.orderTime = orderTime;\n    }\n\n    public Date getCheckInTime() {\n        return checkInTime;\n    }\n\n    public void setCheckInTime(Date checkInTime) {\n        this.checkInTime = checkInTime;\n    }\n\n    public Date getCheckOutTime() {\n        return checkOutTime;\n    }\n\n    public void setCheckOutTime(Date checkOutTime) {\n        this.checkOutTime = checkOutTime;\n    }\n\n    public String getRemarks() {\n        return remarks;\n    }\n\n    public void setRemarks(String remarks) {\n        this.remarks = remarks;\n    }\n}", "test_case": "import static org.junit.Assert.assertEquals;\n\nimport java.sql.Date;\n\nimport org.junit.Test;\n\npublic class OrderTrackingTest {\n\n    @Test\n    public void testOrderTracking() {\n        String orderNumber = \"123\";\n        Date orderTime = new Date(System.currentTimeMillis());\n        Date checkInTime = new Date(System.currentTimeMillis() + 1000);\n        Date checkOutTime = new Date(System.currentTimeMillis() + 2000);\n        String remarks = \"Test remarks\";\n        \n        OrderTracking orderTracking = new OrderTracking(orderNumber, orderTime, checkInTime, checkOutTime, remarks);\n        \n        assertEquals(orderNumber, orderTracking.getOrderNumber());\n        assertEquals(orderTime, orderTracking.getOrderTime());\n        assertEquals(checkInTime, orderTracking.getCheckInTime());\n        assertEquals(checkOutTime, orderTracking.getCheckOutTime());\n        assertEquals(remarks, orderTracking.getRemarks());\n        \n        String newRemarks = \"New remarks\";\n        orderTracking.setRemarks(newRemarks);\n        assertEquals(newRemarks, orderTracking.getRemarks());\n    }\n}\n"}
{"code_source": "import java.text.DecimalFormat;\nimport java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class Account {\n    // variables\n    private int customerNumber;\n    private int pinNumber;\n    private double checkingBalance = 0;\n    private double savingBalance = 0;\n\n    Scanner input = new Scanner(System.in);\n    DecimalFormat moneyFormat = new DecimalFormat(\"'$'###,##0.00\");\n\n    public Account() {\n    }\n\n    public Account(int customerNumber, int pinNumber) {\n        this.customerNumber = customerNumber;\n        this.pinNumber = pinNumber;\n    }\n\n    public Account(int customerNumber, int pinNumber, double checkingBalance, double savingBalance) {\n        this.customerNumber = customerNumber;\n        this.pinNumber = pinNumber;\n        this.checkingBalance = checkingBalance;\n        this.savingBalance = savingBalance;\n    }\n\n    public int setCustomerNumber(int customerNumber) {\n        this.customerNumber = customerNumber;\n        return customerNumber;\n    }\n\n    public int getCustomerNumber() {\n        return customerNumber;\n    }\n\n    public int setPinNumber(int pinNumber) {\n        this.pinNumber = pinNumber;\n        return pinNumber;\n    }\n\n    public int getPinNumber() {\n        return pinNumber;\n    }\n\n    public double getCheckingBalance() {\n        return checkingBalance;\n    }\n\n    public double getSavingBalance() {\n        return savingBalance;\n    }\n\n    public double calcCheckingWithdraw(double amount) {\n        checkingBalance = (checkingBalance - amount);\n        return checkingBalance;\n    }\n\n    public double calcSavingWithdraw(double amount) {\n        savingBalance = (savingBalance - amount);\n        return savingBalance;\n    }\n\n    public double calcCheckingDeposit(double amount) {\n        checkingBalance = (checkingBalance + amount);\n        return checkingBalance;\n    }\n\n    public double calcSavingDeposit(double amount) {\n        savingBalance = (savingBalance + amount);\n        return savingBalance;\n    }\n\n    public void calcCheckTransfer(double amount) {\n        checkingBalance = checkingBalance - amount;\n        savingBalance = savingBalance + amount;\n    }\n\n    public void calcSavingTransfer(double amount) {\n        savingBalance = savingBalance - amount;\n        checkingBalance = checkingBalance + amount;\n    }\n\n    public void getCheckingWithdrawInput() {\n        boolean end = false;\n        while (!end) {\n            try {\n                System.out.println(\"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance));\n                System.out.print(\"\\nAmount you want to withdraw from Checkings Account: \");\n                double amount = input.nextDouble();\n                if ((checkingBalance - amount) >= 0 && amount >= 0) {\n                    calcCheckingWithdraw(amount);\n                    System.out.println(\"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance));\n                    end = true;\n                } else {\n                    System.out.println(\"\\nBalance Cannot be Negative.\");\n                }\n            } catch (InputMismatchException e) {\n                System.out.println(\"\\nInvalid Choice.\");\n                input.next();\n            }\n        }\n    }\n\n    public void getsavingWithdrawInput() {\n        boolean end = false;\n        while (!end) {\n            try {\n                System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance));\n                System.out.print(\"\\nAmount you want to withdraw from Savings Account: \");\n                double amount = input.nextDouble();\n                if ((savingBalance - amount) >= 0 && amount >= 0) {\n                    calcSavingWithdraw(amount);\n                    System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance));\n                    end = true;\n                } else {\n                    System.out.println(\"\\nBalance Cannot Be Negative.\");\n                }\n            } catch (InputMismatchException e) {\n                System.out.println(\"\\nInvalid Choice.\");\n                input.next();\n            }\n        }\n    }\n\n    public void getCheckingDepositInput() {\n        boolean end = false;\n        while (!end) {\n            try {\n                System.out.println(\"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance));\n                System.out.print(\"\\nAmount you want to deposit from Checkings Account: \");\n                double amount = input.nextDouble();\n                if ((checkingBalance + amount) >= 0 && amount >= 0) {\n                    calcCheckingDeposit(amount);\n                    System.out.println(\"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance));\n                    end = true;\n                } else {\n                    System.out.println(\"\\nBalance Cannot Be Negative.\");\n                }\n            } catch (InputMismatchException e) {\n                System.out.println(\"\\nInvalid Choice.\");\n                input.next();\n            }\n        }\n    }\n\n    public void getSavingDepositInput() {\n        boolean end = false;\n        while (!end) {\n            try {\n                System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance));\n                System.out.print(\"\\nAmount you want to deposit into your Savings Account: \");\n                double amount = input.nextDouble();\n\n                if ((savingBalance + amount) >= 0 && amount >= 0) {\n                    calcSavingDeposit(amount);\n                    System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance));\n                    end = true;\n                } else {\n                    System.out.println(\"\\nBalance Cannot Be Negative.\");\n                }\n            } catch (InputMismatchException e) {\n                System.out.println(\"\\nInvalid Choice.\");\n                input.next();\n            }\n        }\n    }\n\n    public void getTransferInput(String accType) {\n        boolean end = false;\n        while (!end) {\n            try {\n                if (accType.equals(\"Checkings\")) {\n                    System.out.println(\"\\nSelect an account you wish to tranfers funds to:\");\n                    System.out.println(\"1. Savings\");\n                    System.out.println(\"2. Exit\");\n                    System.out.print(\"\\nChoice: \");\n                    int choice = input.nextInt();\n                    switch (choice) {\n                        case 1:\n                            System.out.println(\"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance));\n                            System.out.print(\"\\nAmount you want to deposit into your Savings Account: \");\n                            double amount = input.nextDouble();\n                            if ((savingBalance + amount) >= 0 && (checkingBalance - amount) >= 0 && amount >= 0) {\n                                calcCheckTransfer(amount);\n                                System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance));\n                                System.out.println(\n                                        \"\\nCurrent Checkings Account Balance: \" + moneyFormat.format(checkingBalance));\n                                end = true;\n                            } else {\n                                System.out.println(\"\\nBalance Cannot Be Negative.\");\n                            }\n                            break;\n                        case 2:\n                            return;\n                        default:\n                            System.out.println(\"\\nInvalid Choice.\");\n                            break;\n                    }\n                } else if (accType.equals(\"Savings\")) {\n                    System.out.println(\"\\nSelect an account you wish to tranfers funds to: \");\n                    System.out.println(\"1. Checkings\");\n                    System.out.println(\"2. Exit\");\n                    System.out.print(\"\\nChoice: \");\n                    int choice = input.nextInt();\n                    switch (choice) {\n                        case 1:\n                            System.out.println(\"\\nCurrent Savings Account Balance: \" + moneyFormat.format(savingBalance));\n                            System.out.print(\"\\nAmount you want to deposit into your savings account: \");\n                            double amount = input.nextDouble();\n                            if ((checkingBalance + amount) >= 0 && (savingBalance - amount) >= 0 && amount >= 0) {\n                                calcSavingTransfer(amount);\n                                System.out.println(\"\\nCurrent checkings account balance: \" + moneyFormat.format(checkingBalance));\n                                System.out.println(\"\\nCurrent savings account balance: \" + moneyFormat.format(savingBalance));\n                                end = true;\n                            } else {\n                                System.out.println(\"\\nBalance Cannot Be Negative.\");\n                            }\n                            break;\n                        case 2:\n                            return;\n                        default:\n                            System.out.println(\"\\nInvalid Choice.\");\n                            break;\n                    }\n                }\n            } catch (InputMismatchException e) {\n                System.out.println(\"\\nInvalid Choice.\");\n                input.next();\n            }\n        }\n    }\n}", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class AccountTest {\n\n    @Test\n    public void testCheckingWithdraw() {\n        Account account = new Account(1234, 5678, 1000, 500);\n        account.calcCheckingWithdraw(500);\n        assertEquals(500, account.getCheckingBalance(), 0.01);\n    }\n\n    @Test\n    public void testSavingWithdraw() {\n        Account account = new Account(1234, 5678, 1000, 500);\n        account.calcSavingWithdraw(250);\n        assertEquals(250, account.getSavingBalance(), 0.01);\n    }\n\n    @Test\n    public void testCheckingDeposit() {\n        Account account = new Account(1234, 5678, 1000, 500);\n        account.calcCheckingDeposit(1000);\n        assertEquals(2000, account.getCheckingBalance(), 0.01);\n    }\n\n    @Test\n    public void testSavingDeposit() {\n        Account account = new Account(1234, 5678, 1000, 500);\n        account.calcSavingDeposit(500);\n        assertEquals(1000, account.getSavingBalance(), 0.01);\n    }\n\n    @Test\n    public void testCheckTransfer() {\n        Account account = new Account(1234, 5678, 1000, 500);\n        account.calcCheckTransfer(250);\n        assertEquals(750, account.getCheckingBalance(), 0.01);\n        assertEquals(750, account.getSavingBalance(), 0.01);\n    }\n\n    @Test\n    public void testSavingTransfer() {\n        Account account = new Account(1234, 5678, 1000, 500);\n        account.calcSavingTransfer(100);\n        assertEquals(1100, account.getCheckingBalance(), 0.01);\n        assertEquals(400, account.getSavingBalance(), 0.01);\n    }\n\n}\n"}
{"code_source": "import java.io.IOException;\nimport java.text.DecimalFormat;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class OptionMenu {\n    Scanner menuInput = new Scanner(System.in);\n    DecimalFormat moneyFormat = new DecimalFormat(\"'$'###,##0.00\");\n    HashMap<Integer, Account> data = new HashMap<Integer, Account>();\n\n    public void getLogin() throws IOException {\n        boolean end = false;\n        int customerNumber = 0;\n        int pinNumber = 0;\n        while (!end) {\n            try {\n                System.out.print(\"\\nEnter your customer number: \");\n                customerNumber = menuInput.nextInt();\n                System.out.print(\"\\nEnter your PIN number: \");\n                pinNumber = menuInput.nextInt();\n                Iterator it = data.entrySet().iterator();\n                while (it.hasNext()) {\n                    Map.Entry pair = (Map.Entry) it.next();\n                    Account acc = (Account) pair.getValue();\n                    if (data.containsKey(customerNumber) && pinNumber == acc.getPinNumber()) {\n                        getAccountType(acc);\n                        end = true;\n                        break;\n                    }\n                }\n                if (!end) {\n                    System.out.println(\"\\nWrong Customer Number or Pin Number\");\n                }\n            } catch (InputMismatchException e) {\n                System.out.println(\"\\nInvalid Character(s). Only Numbers.\");\n            }\n        }\n    }\n\n    public void getAccountType(Account acc) {\n        boolean end = false;\n        while (!end) {\n            try {\n                System.out.println(\"\\nSelect the account you want to access: \");\n                System.out.println(\" Type 1 - Checkings Account\");\n                System.out.println(\" Type 2 - Savings Account\");\n                System.out.println(\" Type 3 - Exit\");\n                System.out.print(\"\\nChoice: \");\n\n                int selection = menuInput.nextInt();\n\n                switch (selection) {\n                    case 1:\n                        getChecking(acc);\n                        break;\n                    case 2:\n                        getSaving(acc);\n                        break;\n                    case 3:\n                        end = true;\n                        break;\n                    default:\n                        System.out.println(\"\\nInvalid Choice.\");\n                }\n            } catch (InputMismatchException e) {\n                System.out.println(\"\\nInvalid Choice.\");\n                menuInput.next();\n            }\n        }\n    }\n\n    public void getChecking(Account acc) {\n        boolean end = false;\n        while (!end) {\n            try {\n                System.out.println(\"\\nCheckings Account: \");\n                System.out.println(\" Type 1 - View Balance\");\n                System.out.println(\" Type 2 - Withdraw Funds\");\n                System.out.println(\" Type 3 - Deposit Funds\");\n                System.out.println(\" Type 4 - Transfer Funds\");\n                System.out.println(\" Type 5 - Exit\");\n                System.out.print(\"\\nChoice: \");\n\n                int selection = menuInput.nextInt();\n\n                switch (selection) {\n                    case 1:\n                        System.out.println(\"\\nCheckings Account Balance: \" + moneyFormat.format(acc.getCheckingBalance()));\n                        break;\n                    case 2:\n                        acc.getCheckingWithdrawInput();\n                        break;\n                    case 3:\n                        acc.getCheckingDepositInput();\n                        break;\n\n                    case 4:\n                        acc.getTransferInput(\"Checkings\");\n                        break;\n                    case 5:\n                        end = true;\n                        break;\n                    default:\n                        System.out.println(\"\\nInvalid Choice.\");\n                }\n            } catch (InputMismatchException e) {\n                System.out.println(\"\\nInvalid Choice.\");\n                menuInput.next();\n            }\n        }\n    }\n\n    public void getSaving(Account acc) {\n        boolean end = false;\n        while (!end) {\n            try {\n                System.out.println(\"\\nSavings Account: \");\n                System.out.println(\" Type 1 - View Balance\");\n                System.out.println(\" Type 2 - Withdraw Funds\");\n                System.out.println(\" Type 3 - Deposit Funds\");\n                System.out.println(\" Type 4 - Transfer Funds\");\n                System.out.println(\" Type 5 - Exit\");\n                System.out.print(\"Choice: \");\n                int selection = menuInput.nextInt();\n                switch (selection) {\n                    case 1:\n                        System.out.println(\"\\nSavings Account Balance: \" + moneyFormat.format(acc.getSavingBalance()));\n                        break;\n                    case 2:\n                        acc.getsavingWithdrawInput();\n                        break;\n                    case 3:\n                        acc.getSavingDepositInput();\n                        break;\n                    case 4:\n                        acc.getTransferInput(\"Savings\");\n                        break;\n                    case 5:\n                        end = true;\n                        break;\n                    default:\n                        System.out.println(\"\\nInvalid Choice.\");\n                }\n            } catch (InputMismatchException e) {\n                System.out.println(\"\\nInvalid Choice.\");\n                menuInput.next();\n            }\n        }\n    }\n\n    public void createAccount() throws IOException {\n        int cst_no = 0;\n        boolean end = false;\n        while (!end) {\n            try {\n                System.out.println(\"\\nEnter your customer number \");\n                cst_no = menuInput.nextInt();\n                Iterator it = data.entrySet().iterator();\n                while (it.hasNext()) {\n                    Map.Entry pair = (Map.Entry) it.next();\n                    if (!data.containsKey(cst_no)) {\n                        end = true;\n                    }\n                }\n                if (!end) {\n                    System.out.println(\"\\nThis customer number is already registered\");\n                }\n            } catch (InputMismatchException e) {\n                System.out.println(\"\\nInvalid Choice.\");\n                menuInput.next();\n            }\n        }\n        System.out.println(\"\\nEnter PIN to be registered\");\n        int pin = menuInput.nextInt();\n        data.put(cst_no, new Account(cst_no, pin));\n        System.out.println(\"\\nYour new account has been successfuly registered!\");\n        System.out.println(\"\\nRedirecting to login.............\");\n        getLogin();\n    }\n\n    public void mainMenu() throws IOException {\n        data.put(952141, new Account(952141, 191904, 1000, 5000));\n        data.put(123, new Account(123, 123, 20000, 50000));\n        boolean end = false;\n        while (!end) {\n            try {\n                System.out.println(\"\\n Type 1 - Login\");\n                System.out.println(\" Type 2 - Create Account\");\n                System.out.print(\"\\nChoice: \");\n                int choice = menuInput.nextInt();\n                switch (choice) {\n                    case 1:\n                        getLogin();\n                        end = true;\n                        break;\n                    case 2:\n                        createAccount();\n                        end = true;\n                        break;\n                    default:\n                        System.out.println(\"\\nInvalid Choice.\");\n                }\n            } catch (InputMismatchException e) {\n                System.out.println(\"\\nInvalid Choice.\");\n                menuInput.next();\n            }\n        }\n        System.out.println(\"\\nThank You for using this ATM.\\n\");\n        menuInput.close();\n        System.exit(0);\n    }\n}", "test_case": "import org.junit.Test;\nimport org.junit.Assert;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\n\npublic class OptionMenuTest {\n\n    @Test\n    public void testGetLogin() throws IOException {\n        OptionMenu optionMenu = new OptionMenu();\n        String input = \"1\\n1234\\n3\\n\";\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n        optionMenu.getLogin();\n    }\n\n    @Test\n    public void testGetAccountType() {\n        OptionMenu optionMenu = new OptionMenu();\n        Account account = new Account(1, 1234);\n        optionMenu.getAccountType(account);\n    }\n\n    @Test\n    public void testGetChecking() {\n        OptionMenu optionMenu = new OptionMenu();\n        Account account = new Account(1, 1234);\n        optionMenu.getChecking(account);\n    }\n\n    @Test\n    public void testGetSaving() {\n        OptionMenu optionMenu = new OptionMenu();\n        Account account = new Account(1, 1234);\n        optionMenu.getSaving(account);\n    }\n\n    @Test\n    public void testCreateAccount() throws IOException {\n        OptionMenu optionMenu = new OptionMenu();\n        String input = \"1234\\n4321\\n\";\n        System.setIn(new ByteArrayInputStream(input.getBytes()));\n        optionMenu.createAccount();\n    }\n}\n"}
{"code_source": "public class Temperature {\n    private double value;\n    private char scale;\n\n    // Constructor\n    public Temperature(double value, char scale) {\n        this.value = value;\n        this.scale = scale;\n    }\n\n    // Getter methods\n    public double getValue() {\n        return value;\n    }\n\n    public char getScale() {\n        return scale;\n    }\n\n    // Setter methods\n    public void setValue(double value) {\n        this.value = value;\n    }\n\n    public void setScale(char scale) {\n        this.scale = scale;\n    }\n\n    // Conversion methods\n    public double toCelsius() {\n        double celsius;\n        if (scale == 'F') {\n            celsius = (value - 32) * 5 / 9;\n        } else {\n            celsius = value;\n        }\n        return celsius;\n    }\n\n    public double toFahrenheit() {\n        double fahrenheit;\n        if (scale == 'C') {\n            fahrenheit = (value * 9 / 5) + 32;\n        } else {\n            fahrenheit = value;\n        }\n        return fahrenheit;\n    }\n\n    // Comparison methods\n    public boolean equals(Temperature other) {\n        return this.toCelsius() == other.toCelsius();\n    }\n\n    public boolean lessThan(Temperature other) {\n        return this.toCelsius() < other.toCelsius();\n    }\n\n    public boolean greaterThan(Temperature other) {\n        return this.toCelsius() > other.toCelsius();\n    }\n\n    // toString method\n    public String toString() {\n        return value + \" \" + scale;\n    }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class TemperatureTest {\n    \n    @Test\n    public void testTemperatureConversion() {\n        Temperature t1 = new Temperature(32, 'F');\n        Temperature t2 = new Temperature(0, 'C');\n        \n        // Test toCelsius()\n        assertEquals(0, t1.toCelsius(), 0.1);\n        assertEquals(0, t2.toCelsius(), 0.1);\n        \n        // Test toFahrenheit()\n        assertEquals(32, t1.toFahrenheit(), 0.1);\n        assertEquals(32, t2.toFahrenheit(), 0.1);\n    }\n    \n    @Test\n    public void testTemperatureComparison() {\n        Temperature t1 = new Temperature(32, 'F');\n        Temperature t2 = new Temperature(0, 'C');\n        Temperature t3 = new Temperature(50, 'F');\n        \n        // Test equals()\n        assertTrue(t1.equals(t2));\n        assertFalse(t1.equals(t3));\n        \n        // Test lessThan()\n        assertTrue(t2.lessThan(t1));\n        assertFalse(t1.lessThan(t2));\n        \n        // Test greaterThan()\n        assertTrue(t3.greaterThan(t1));\n        assertFalse(t1.greaterThan(t3));\n    }\n}\n"}
{"code_source": "public class MyClass2 {\n    public static int countOccurrences(String str, char ch) {\n        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == ch) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass2Test {\n\n    @Test\n    public void testCountOccurrences() {\n        assertEquals(2, MyClass2.countOccurrences(\"Hello\", 'l'));\n        assertEquals(0, MyClass2.countOccurrences(\"Hello\", 'z'));\n        assertEquals(4, MyClass2.countOccurrences(\"Mississippi\", 's'));\n        assertEquals(1, MyClass2.countOccurrences(\"Elephant\", 'E'));\n        assertEquals(0, MyClass2.countOccurrences(\"\", 'a'));\n    }\n}\n"}
{"code_source": "public class MyClass21 {\n    public static boolean isPalindromeIgnoreNonAlphanumeric(String str) {\n        str = str.toLowerCase().replaceAll(\"[^a-z0-9]\", \"\");\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass21Test {\n    \n    @Test\n    public void testIsPalindromeIgnoreNonAlphanumeric() {\n        assertTrue(MyClass21.isPalindromeIgnoreNonAlphanumeric(\"A man, a plan, a canal: Panama\"));\n        assertTrue(MyClass21.isPalindromeIgnoreNonAlphanumeric(\"Was it a car or a cat I saw?\"));\n        assertFalse(MyClass21.isPalindromeIgnoreNonAlphanumeric(\"Hello, World!\"));\n        assertTrue(MyClass21.isPalindromeIgnoreNonAlphanumeric(\"race a car\"));\n        assertTrue(MyClass21.isPalindromeIgnoreNonAlphanumeric(\"A Santa at NASA\"));\n    }\n}\n"}
{"code_source": "public class ScanTicket{\n\n    public int cheaknumber(String inputnumber, String storenumber){\n\n        int size1 = inputnumber.length();\n        int size2 = storenumber.length();\n        if (size1 != size2){\n            return 0;\n        }\n        else if(inputnumber.equals(storenumber)){\n            return 1;\n        }\n        return 0;\n\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class ScanTicketTest {\n\n    @Test\n    public void testCheckNumber() {\n        ScanTicket scanner = new ScanTicket();\n\n        // Test for equal input and store numbers\n        String input = \"123456\";\n        String store = \"123456\";\n        int expectedOutput = 1;\n        int actualOutput = scanner.checknumber(input, store);\n        assertEquals(expectedOutput, actualOutput);\n\n        // Test for unequal input and store numbers\n        input = \"123456\";\n        store = \"654321\";\n        expectedOutput = 0;\n        actualOutput = scanner.checknumber(input, store);\n        assertEquals(expectedOutput, actualOutput);\n\n        // Test for input and store numbers of different lengths\n        input = \"12345\";\n        store = \"123456\";\n        expectedOutput = 0;\n        actualOutput = scanner.checknumber(input, store);\n        assertEquals(expectedOutput, actualOutput);\n    }\n}\n"}
{"code_source": "public class Usine {\n    // Fields\n    private String name;\n    private int capacity;\n    private boolean isRunning;\n\n    // Constructor\n    public Usine(String name, int capacity) {\n        this.name = name;\n        this.capacity = capacity;\n        this.isRunning = false;\n    }\n\n    // Getter methods\n    public String getName() {\n        return name;\n    }\n\n    public int getCapacity() {\n        return capacity;\n    }\n\n    public boolean isRunning() {\n        return isRunning;\n    }\n\n    // Setter methods\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setCapacity(int capacity) {\n        this.capacity = capacity;\n    }\n\n    // Other methods\n    public void start() {\n        if (!isRunning) {\n            System.out.println(name + \" is starting...\");\n            isRunning = true;\n        } else {\n            System.out.println(name + \" is already running.\");\n        }\n    }\n\n    public void stop() {\n        if (isRunning) {\n            System.out.println(name + \" is stopping...\");\n            isRunning = false;\n        } else {\n            System.out.println(name + \" is not running.\");\n        }\n    }\n\n    public void produce(int quantity) {\n        if (isRunning) {\n            if (quantity <= capacity) {\n                System.out.println(name + \" is producing \" + quantity + \" units.\");\n            } else {\n                System.out.println(name + \" cannot produce \" + quantity + \" units. Capacity exceeded.\");\n            }\n        } else {\n            System.out.println(name + \" is not running.\");\n        }\n    }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class UsineTest {\n    \n    @Test\n    public void testStart() {\n        Usine usine = new Usine(\"Factory\", 100);\n        assertFalse(usine.isRunning());\n        usine.start();\n        assertTrue(usine.isRunning());\n        usine.start();\n        assertTrue(usine.isRunning());\n    }\n    \n    @Test\n    public void testStop() {\n        Usine usine = new Usine(\"Factory\", 100);\n        assertFalse(usine.isRunning());\n        usine.stop();\n        assertFalse(usine.isRunning());\n        usine.start();\n        assertTrue(usine.isRunning());\n        usine.stop();\n        assertFalse(usine.isRunning());\n    }\n    \n    @Test\n    public void testProduce() {\n        Usine usine = new Usine(\"Factory\", 100);\n        usine.start();\n        usine.produce(50);\n        usine.produce(100);\n        usine.produce(150);\n        assertTrue(usine.isRunning());\n    }\n    \n    @Test\n    public void testCapacity() {\n        Usine usine = new Usine(\"Factory\", 100);\n        assertEquals(usine.getCapacity(), 100);\n        usine.setCapacity(200);\n        assertEquals(usine.getCapacity(), 200);\n    }\n    \n    @Test\n    public void testName() {\n        Usine usine = new Usine(\"Factory\", 100);\n        assertEquals(usine.getName(), \"Factory\");\n        usine.setName(\"New Factory\");\n        assertEquals(usine.getName(), \"New Factory\");\n    }\n}\n"}
{"code_source": "public class SmartHome {\n    private String owner;\n    private boolean isLocked;\n    private boolean isAlarmEnabled;\n    private boolean isLightsOn;\n    \n    public SmartHome(String owner) {\n        this.owner = owner;\n        this.isLocked = true;\n        this.isAlarmEnabled = false;\n        this.isLightsOn = false;\n    }\n    \n    public String getOwner() {\n        return owner;\n    }\n    \n    public boolean isLocked() {\n        return isLocked;\n    }\n    \n    public boolean isAlarmEnabled() {\n        return isAlarmEnabled;\n    }\n    \n    public boolean isLightsOn() {\n        return isLightsOn;\n    }\n    \n    public void unlock() {\n        if (isLocked) {\n            System.out.println(\"Unlocking the door.\");\n            isLocked = false;\n        } else {\n            System.out.println(\"The door is already unlocked.\");\n        }\n    }\n    \n    public void lock() {\n        if (!isLocked) {\n            System.out.println(\"Locking the door.\");\n            isLocked = true;\n        } else {\n            System.out.println(\"The door is already locked.\");\n        }\n    }\n    \n    public void enableAlarm() {\n        if (!isAlarmEnabled) {\n            System.out.println(\"Enabling the alarm.\");\n            isAlarmEnabled = true;\n        } else {\n            System.out.println(\"The alarm is already enabled.\");\n        }\n    }\n    \n    public void disableAlarm() {\n        if (isAlarmEnabled) {\n            System.out.println(\"Disabling the alarm.\");\n            isAlarmEnabled = false;\n        } else {\n            System.out.println(\"The alarm is already disabled.\");\n        }\n    }\n    \n    public void turnOnLights() {\n        if (!isLightsOn) {\n            System.out.println(\"Turning on the lights.\");\n            isLightsOn = true;\n        } else {\n            System.out.println(\"The lights are already on.\");\n        }\n    }\n    \n    public void turnOffLights() {\n        if (isLightsOn) {\n            System.out.println(\"Turning off the lights.\");\n            isLightsOn = false;\n        } else {\n            System.out.println(\"The lights are already off.\");\n        }\n    }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class SmartHomeTest {\n\n    @Test\n    public void testUnlock() {\n        SmartHome home = new SmartHome(\"John\");\n        home.unlock();\n        assertFalse(home.isLocked());\n    }\n\n    @Test\n    public void testLock() {\n        SmartHome home = new SmartHome(\"John\");\n        home.lock();\n        assertTrue(home.isLocked());\n    }\n\n    @Test\n    public void testEnableAlarm() {\n        SmartHome home = new SmartHome(\"John\");\n        home.enableAlarm();\n        assertTrue(home.isAlarmEnabled());\n    }\n\n    @Test\n    public void testDisableAlarm() {\n        SmartHome home = new SmartHome(\"John\");\n        home.disableAlarm();\n        assertFalse(home.isAlarmEnabled());\n    }\n\n    @Test\n    public void testTurnOnLights() {\n        SmartHome home = new SmartHome(\"John\");\n        home.turnOnLights();\n        assertTrue(home.isLightsOn());\n    }\n\n    @Test\n    public void testTurnOffLights() {\n        SmartHome home = new SmartHome(\"John\");\n        home.turnOffLights();\n        assertFalse(home.isLightsOn());\n    }\n}\n"}
{"code_source": "public class MyClass22 {\n    public static void rotateLeft(int[] array, int k) {\n        k %= array.length;\n        reverse(array, 0, k - 1);\n        reverse(array, k, array.length - 1);\n        reverse(array, 0, array.length - 1);\n    }\n\n    private static void reverse(int[] array, int left, int right) {\n        while (left < right) {\n            int temp = array[left];\n            array[left] = array[right];\n            array[right] = temp;\n            left++;\n            right--;\n        }\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass22Test {\n\n    @Test\n    public void testRotateLeft() {\n        int[] array = {1, 2, 3, 4, 5};\n        MyClass22.rotateLeft(array, 2);\n        assertArrayEquals(new int[]{3, 4, 5, 1, 2}, array);\n\n        int[] array2 = {0, 1, 2, 3, 4, 5};\n        MyClass22.rotateLeft(array2, 4);\n        assertArrayEquals(new int[]{4, 5, 0, 1, 2, 3}, array2);\n\n        int[] array3 = {1, 2, 3, 4};\n        MyClass22.rotateLeft(array3, 3);\n        assertArrayEquals(new int[]{4, 1, 2, 3}, array3);\n    }\n}\n"}
{"code_source": "public class MyClass23 {\n    public static boolean isValidISBN13(String str) {\n        if (str == null || str.length() != 13) {\n            return false;\n        }\n        int\n\n\n    }\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass23Test {\n    \n    @Test\n    public void testIsValidISBN13() {\n        assertTrue(MyClass23.isValidISBN13(\"9780132350884\"));\n        assertTrue(MyClass23.isValidISBN13(\"9780306406157\"));\n        assertFalse(MyClass23.isValidISBN13(\"9780132350883\"));\n        assertFalse(MyClass23.isValidISBN13(\"0306406157\"));\n        assertFalse(MyClass23.isValidISBN13(\"\"));\n        assertFalse(MyClass23.isValidISBN13(null));\n    }\n}\n"}
{"code_source": "public class MyClass24 {\n    public static int maxSubarraySum(int[] array) {\n        int maxSum = Integer.MIN_VALUE;\n        int currSum = 0;\n        for (int num : array) {\n            currSum += num;\n            maxSum = Math.max(maxSum, currSum);\n            currSum = Math.max(currSum, 0);\n        }\n        return maxSum;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass24Test {\n\n    @Test\n    public void testMaxSubarraySum() {\n        int[] array1 = {1, -2, 3, -4, 5, -6, 7, -8, 9};\n        int expected1 = 16;\n        assertEquals(expected1, MyClass24.maxSubarraySum(array1));\n\n        int[] array2 = {-2, 1, -3, 4, -1, 2, 1, -5, 4};\n        int expected2 = 6;\n        assertEquals(expected2, MyClass24.maxSubarraySum(array2));\n\n        int[] array3 = {2, 3, -8, -1, 2, 4, -2, 3};\n        int expected3 = 9;\n        assertEquals(expected3, MyClass24.maxSubarraySum(array3));\n\n        int[] array4 = {-1, -2, -3, -4, -5};\n        int expected4 = -1;\n        assertEquals(expected4, MyClass24.maxSubarraySum(array4));\n\n        int[] array5 = {1, 2, 3, 4, 5};\n        int expected5 = 15;\n        assertEquals(expected5, MyClass24.maxSubarraySum(array5));\n    }\n}\n"}
{"code_source": "public class MyClass25 {\n    public static String longestCommonPrefix(String[] strs) {\n        if (strs == null || strs.length == 0) {\n            return \"\";\n        }\n        for (int i = 0; i < strs[0].length(); i++) {\n            char c = strs[0].charAt(i);\n            for (int j = 1; j < strs.length; j++) {\n                if (i >= strs[j].length() || strs[j].charAt(i) != c) {\n                    return strs[0].substring(0, i);\n                }\n            }\n        }\n        return strs[0];\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass25Test {\n\n    @Test\n    public void testLongestCommonPrefix() {\n        // Test case 1: empty input\n        String[] strs1 = {};\n        assertEquals(\"\", MyClass25.longestCommonPrefix(strs1));\n\n        // Test case 2: one string\n        String[] strs2 = {\"abcde\"};\n        assertEquals(\"abcde\", MyClass25.longestCommonPrefix(strs2));\n\n        // Test case 3: no common prefix\n        String[] strs3 = {\"abcde\", \"fghij\", \"klmno\"};\n        assertEquals(\"\", MyClass25.longestCommonPrefix(strs3));\n\n        // Test case 4: one common prefix\n        String[] strs4 = {\"abcd\", \"abce\", \"abcf\"};\n        assertEquals(\"abc\", MyClass25.longestCommonPrefix(strs4));\n\n        // Test case 5: multiple common prefixes\n        String[] strs5 = {\"abcd\", \"abce\", \"abcf\", \"ab\", \"abcg\"};\n        assertEquals(\"ab\", MyClass25.longestCommonPrefix(strs5));\n    }\n\n}\n"}
{"code_source": "public class MyClass27 {\n    public static int indexOfSubstring(String str, String substr) {\n        for (int i = 0; i <= str.length() - substr.length(); i++) {\n            if (str.substring(i, i + substr.length()).equals(substr)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass26Test {\n    @Test\n    public void testLongestCommonPrefix() {\n        String[] strs1 = {\"flower\", \"flow\", \"flight\"};\n        assertEquals(\"fl\", MyClass26.longestCommonPrefix(strs1));\n\n        String[] strs2 = {\"dog\", \"racecar\", \"car\"};\n        assertEquals(\"\", MyClass26.longestCommonPrefix(strs2));\n\n        String[] strs3 = {\"hello\", \"hello\", \"hello\"};\n        assertEquals(\"hello\", MyClass26.longestCommonPrefix(strs3));\n\n        String[] strs4 = {\"ab\", \"a\"};\n        assertEquals(\"a\", MyClass26.longestCommonPrefix(strs4));\n\n        String[] strs5 = {\"abcde\", \"abcd\", \"abc\", \"ab\"};\n        assertEquals(\"ab\", MyClass26.longestCommonPrefix(strs5));\n    }\n}\n"}
{"code_source": "public class MyClass29 {\n    public static int longestIncreasingSubsequence(int[] array) {\n        int[] dp = new int[array.length];\n        Arrays.fill(dp, 1);\n        int result = 1;\n        for (int i = 1; i < array.length; i++) {\n            for (int j = 0; j < i; j++) {\n                if (array[i] > array[j]) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n            result = Math.max(result, dp[i]);\n        }\n        return result;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Map;\nimport java.util.HashMap;\n\npublic class MyClass28Test {\n\n    @Test\n    public void testCountCharacters() {\n        String str = \"Hello, World!\";\n        Map<Character, Integer> expected = new HashMap<>();\n        expected.put('H', 1);\n        expected.put('e', 1);\n        expected.put('l', 3);\n        expected.put('o', 2);\n        expected.put(',', 1);\n        expected.put(' ', 1);\n        expected.put('W', 1);\n        expected.put('r', 1);\n        expected.put('d', 1);\n        expected.put('!', 1);\n\n        Map<Character, Integer> result = MyClass28.countCharacters(str);\n\n        assertEquals(expected, result);\n    }\n}\n"}
{"code_source": "public class MyClass29 {\n    public static int longestIncreasingSubsequence(int[] array) {\n        int[] dp = new int[array.length];\n        Arrays.fill(dp, 1);\n        int result = 1;\n        for (int i = 1; i < array.length; i++) {\n            for (int j = 0; j < i; j++) {\n                if (array[i] > array[j]) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n            result = Math.max(result, dp[i]);\n        }\n        return result;\n    }\n\n\n}\n", "test_case": "import static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Test;\n\npublic class MyClass29Test {\n\n    @Test\n    public void testLongestIncreasingSubsequence() {\n        int[] array1 = {1, 2, 3, 4, 5};\n        int[] array2 = {5, 4, 3, 2, 1};\n        int[] array3 = {1, 3, 2, 4, 5};\n        int[] array4 = {10, 9, 2, 5, 3, 7, 101, 18};\n\n        assertEquals(5, MyClass29.longestIncreasingSubsequence(array1));\n        assertEquals(1, MyClass29.longestIncreasingSubsequence(array2));\n        assertEquals(3, MyClass29.longestIncreasingSubsequence(array3));\n        assertEquals(4, MyClass29.longestIncreasingSubsequence(array4));\n    }\n\n}\n"}
{"code_source": "public class MyClass30 {\n    public static boolean isValidEmail(String email) {\n        String regex = \"^[\\\\w.-]+@[\\\\w.-]+\\\\.[a-zA-Z]{2,}$\";\n        return email.matches(regex);\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class MyClass30Test {\n\n    @Test\n    public void testValidEmail() {\n        assertTrue(MyClass30.isValidEmail(\"john.doe@example.com\"));\n        assertTrue(MyClass30.isValidEmail(\"jane_doe@subdomain.example.org\"));\n        assertTrue(MyClass30.isValidEmail(\"john.doe123@subdomain.example.co.uk\"));\n        assertTrue(MyClass30.isValidEmail(\"john-doe@example.com\"));\n    }\n\n    @Test\n    public void testInvalidEmail() {\n        assertFalse(MyClass30.isValidEmail(\"jane.doe@example\"));\n        assertFalse(MyClass30.isValidEmail(\"john@.example.com\"));\n        assertFalse(MyClass30.isValidEmail(\"john.doe@example..com\"));\n        assertFalse(MyClass30.isValidEmail(\"john doe@example.com\"));\n    }\n}\n"}
{"code_source": "public class MyClass28 {\n    public static Map<Character, Integer> countCharacters(String str) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        return map;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport java.util.Map;\nimport java.util.HashMap;\n\npublic class MyClass28Test {\n\n    @Test\n    public void testCountCharacters() {\n        String str = \"Hello, World!\";\n        Map<Character, Integer> expected = new HashMap<>();\n        expected.put('H', 1);\n        expected.put('e', 1);\n        expected.put('l', 3);\n        expected.put('o', 2);\n        expected.put(',', 1);\n        expected.put(' ', 1);\n        expected.put('W', 1);\n        expected.put('r', 1);\n        expected.put('d', 1);\n        expected.put('!', 1);\n\n        Map<Character, Integer> result = MyClass28.countCharacters(str);\n\n        assertEquals(expected, result);\n    }\n}\n"}
{"code_source": "public class MyClass3 {\n    public static boolean isPowerOfTwo(int n) {\n        if (n <= 0) {\n            return false;\n        }\n        return (n & (n - 1)) == 0;\n    }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass3Test {\n\n    @Test\n    public void testIsPowerOfTwo() {\n        assertTrue(MyClass3.isPowerOfTwo(2));\n        assertTrue(MyClass3.isPowerOfTwo(8));\n        assertTrue(MyClass3.isPowerOfTwo(16));\n        assertFalse(MyClass3.isPowerOfTwo(0));\n        assertFalse(MyClass3.isPowerOfTwo(3));\n        assertFalse(MyClass3.isPowerOfTwo(-8));\n    }\n}\n"}
{"code_source": "public class MyClass31 {\n    public static int maxSubArraySum(int[] array) {\n        int maxSoFar = Integer.MIN_VALUE;\n        int maxEndingHere = 0;\n        for (int num : array) {\n            maxEndingHere = Math.max(maxEndingHere + num, num);\n            maxSoFar = Math.max(maxSoFar, maxEndingHere);\n        }\n        return maxSoFar;\n    }\n\n\n}\n", "test_case": "import static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Test;\n\nclass MyClass31Test {\n\n    @Test\n    void testMaxSubArraySum() {\n        int[] arr1 = {1, 2, 3, 4, 5};\n        assertEquals(15, MyClass31.maxSubArraySum(arr1));\n\n        int[] arr2 = {-2, -3, 4, -1, -2, 1, 5, -3};\n        assertEquals(7, MyClass31.maxSubArraySum(arr2));\n\n        int[] arr3 = {-1, -2, -3, -4, -5};\n        assertEquals(-1, MyClass31.maxSubArraySum(arr3));\n    }\n\n}\n"}
{"code_source": "public class MyClass32 {\n    public static boolean isValidIPAddress(String ip) {\n        String regex = \"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\";\n        return ip.matches(regex);\n    }\n\n\n}\n", "test_case": "import static org.junit.Assert.*;\n\nimport org.junit.Test;\n\npublic class MyClass32Test {\n\n    @Test\n    public void testIsValidIPAddress() {\n        assertTrue(MyClass32.isValidIPAddress(\"192.168.0.1\"));\n        assertTrue(MyClass32.isValidIPAddress(\"255.255.255.0\"));\n        assertTrue(MyClass32.isValidIPAddress(\"10.0.0.1\"));\n        assertFalse(MyClass32.isValidIPAddress(\"256.256.256.256\"));\n        assertFalse(MyClass32.isValidIPAddress(\"1.2.3\"));\n        assertFalse(MyClass32.isValidIPAddress(\"1.2.3.4.\"));\n        assertFalse(MyClass32.isValidIPAddress(\".1.2.3.4\"));\n        assertFalse(MyClass32.isValidIPAddress(\"1.2.3.4.5\"));\n        assertFalse(MyClass32.isValidIPAddress(\"1.2.3.4 \"));\n    }\n\n}\n"}
{"code_source": "public class MyClass33 {\n    public static boolean isValidURL(String url) {\n        try {\n            new URL(url);\n            return true;\n        } catch (MalformedURLException e) {\n            return false;\n        }\n    }\n\n\n}\n", "test_case": "import static org.junit.Assert.*;\nimport org.junit.Test;\n\npublic class MyClass33Test {\n\n    @Test\n    public void testValidURL() {\n        assertTrue(MyClass33.isValidURL(\"https://www.example.com\"));\n        assertTrue(MyClass33.isValidURL(\"http://www.example.com\"));\n        assertTrue(MyClass33.isValidURL(\"ftp://example.com\"));\n        assertTrue(MyClass33.isValidURL(\"http://localhost\"));\n        assertTrue(MyClass33.isValidURL(\"https://www.example.com/path/to/file.html\"));\n    }\n\n    @Test\n    public void testInvalidURL() {\n        assertFalse(MyClass33.isValidURL(\"www.example.com\"));\n        assertFalse(MyClass33.isValidURL(\"example.com\"));\n        assertFalse(MyClass33.isValidURL(\"http:/www.example.com\"));\n        assertFalse(MyClass33.isValidURL(\"http://.example.com\"));\n        assertFalse(MyClass33.isValidURL(\"http://example\"));\n        assertFalse(MyClass33.isValidURL(\"http://256.256.256.256\"));\n        assertFalse(MyClass33.isValidURL(\"not_a_url\"));\n    }\n}\n"}
{"code_source": "public class MyClass34 {\n    public static boolean isValidUUID(String uuid) {\n        try {\n            UUID.fromString(uuid);\n            return true;\n        } catch (IllegalArgumentException e) {\n            return false;\n        }\n    }\n\n\n}\n", "test_case": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClass34Test {\n\n    @Test\n    void testValidUUID() {\n        assertTrue(MyClass34.isValidUUID(\"123e4567-e89b-12d3-a456-426655440000\"));\n        assertTrue(MyClass34.isValidUUID(\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"));\n        assertTrue(MyClass34.isValidUUID(\"550e8400-e29b-41d4-a716-446655440000\"));\n    }\n\n    @Test\n    void testInvalidUUID() {\n        assertFalse(MyClass34.isValidUUID(\"not a uuid\"));\n        assertFalse(MyClass34.isValidUUID(\"f47ac10b-58cc-4372-a567\"));\n        assertFalse(MyClass34.isValidUUID(\"123e4567-e89b-12d3-a456-42665544000g\"));\n    }\n\n}\n"}
{"code_source": "public class MyClass35 {\n    public static int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n\n\n}\n", "test_case": "import static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class MyClass35Test {\n\n    @Test\n    void testGcd() {\n        // Test cases for gcd(a, b)\n        int[][] testCases = {\n                {10, 5, 5},\n                {7, 21, 7},\n                {12, 18, 6},\n                {50, 75, 25},\n                {15, 17, 1},\n                {0, 5, 5},\n                {12, 0, 12},\n                {0, 0, 0}\n        };\n\n        for (int[] testCase : testCases) {\n            int a = testCase[0];\n            int b = testCase[1];\n            int expectedGcd = testCase[2];\n\n            int actualGcd = MyClass35.gcd(a, b);\n            assertEquals(expectedGcd, actualGcd, String.format(\"gcd(%d, %d)\", a, b));\n        }\n    }\n}\n"}
{"code_source": "public class MyClass36 {\n    public static int minCoins(int[] coins, int amount) {\n        int[] dp = new int[amount + 1];\n        Arrays.fill(dp, amount + 1);\n        dp[0] = 0;\n        for (int coin : coins) {\n            for (int i = coin; i <= amount; i++) {\n                dp[i] = Math.min(dp[i], dp[i - coin] + 1);\n            }\n        }\n        return dp[amount] <= amount ? dp[amount] : -1;\n    }\n\n\n}\n", "test_case": "import static org.junit.Assert.assertEquals;\nimport org.junit.Test;\n\npublic class MyClass36Test {\n\n    @Test\n    public void testMinCoins() {\n        int[] coins = {1, 2, 5};\n        assertEquals(3, MyClass36.minCoins(coins, 11));\n        assertEquals(0, MyClass36.minCoins(coins, 0));\n        assertEquals(1, MyClass36.minCoins(coins, 1));\n        assertEquals(-1, MyClass36.minCoins(coins, 3));\n    }\n\n}\n"}
{"code_source": "public class MyClass37 {\n    public static String toTitleCase(String str) {\n        if (str == null || str.isEmpty()) {\n            return str;\n        }\n        String[] words = str.split(\"\\\\s+\");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            sb.append(word.substring(0, 1).toUpperCase());\n            sb.append(word.substring(1).toLowerCase()).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class MyClass37Test {\n    @Test\n    public void testToTitleCase() {\n        String input = \"the quick brown fox jumps over the lazy dog\";\n        String expected = \"The Quick Brown Fox Jumps Over The Lazy Dog\";\n        String result = MyClass37.toTitleCase(input);\n        assertEquals(expected, result);\n\n        input = \"a tale of two cities\";\n        expected = \"A Tale Of Two Cities\";\n        result = MyClass37.toTitleCase(input);\n        assertEquals(expected, result);\n\n        input = \"I AM ALL IN UPPERCASE\";\n        expected = \"I Am All In Uppercase\";\n        result = MyClass37.toTitleCase(input);\n        assertEquals(expected, result);\n\n        input = \"      extra    spaces   \";\n        expected = \"Extra Spaces\";\n        result = MyClass37.toTitleCase(input);\n        assertEquals(expected, result);\n\n        input = \"\";\n        expected = \"\";\n        result = MyClass37.toTitleCase(input);\n        assertEquals(expected, result);\n\n        input = null;\n        expected = null;\n        result = MyClass37.toTitleCase(input);\n        assertEquals(expected, result);\n    }\n}\n"}
{"code_source": "public class MyClass38 {\n    public static int sumOfPrimes(int n) {\n        boolean[] primes = new boolean[n + 1];\n        Arrays.fill(primes, true);\n        primes[0] = false;\n        primes[1] = false;\n        for (int i = 2; i * i <= n; i++) {\n            if (primes[i]) {\n                for (int j = i * i; j <= n; j += i) {\n                    primes[j] = false;\n                }\n            }\n        }\n        int sum = 0;\n        for (int i = 2; i <= n; i++) {\n            if (primes[i]) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass38Test {\n\n    @Test\n    public void testSumOfPrimes() {\n        assertEquals(0, MyClass38.sumOfPrimes(1));\n        assertEquals(2, MyClass38.sumOfPrimes(2));\n        assertEquals(17, MyClass38.sumOfPrimes(10));\n        assertEquals(76127, MyClass38.sumOfPrimes(1000));\n        assertEquals(454396537, MyClass38.sumOfPrimes(100000));\n    }\n\n}\n"}
{"code_source": "public class MyClass39 {\n    public static int maxSubarraySum(int[] array) {\n        int maxSoFar = array[0];\n        int maxEndingHere = array[0];\n        for (int i = 1; i < array.length; i++) {\n            maxEndingHere = Math.max(maxEndingHere + array[i], array[i]);\n            maxSoFar = Math.max(maxSoFar, maxEndingHere);\n        }\n        return maxSoFar;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass39Test {\n\n    @Test\n    public void testMaxSubarraySum() {\n        int[] array1 = {1, -2, 3, 4, -5, 8, -3};\n        assertEquals(12, MyClass39.maxSubarraySum(array1));\n\n        int[] array2 = {-2, -3, 4, -1, -2, 1, 5, -3};\n        assertEquals(7, MyClass39.maxSubarraySum(array2));\n\n        int[] array3 = {5, -2, 1, -9, 6};\n        assertEquals(7, MyClass39.maxSubarraySum(array3));\n\n        int[] array4 = {-5, -1, -8, -9};\n        assertEquals(-1, MyClass39.maxSubarraySum(array4));\n    }\n}\n"}
{"code_source": "public class MyClass4 {\n    public static String toTitleCase(String str) {\n        String[] words = str.split(\"\\\\s\");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            sb.append(Character.toUpperCase(word.charAt(0)));\n            sb.append(word.substring(1));\n            sb.append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass4Test {\n    \n    @Test\n    public void testToTitleCase() {\n        assertEquals(\"Hello World\", MyClass4.toTitleCase(\"hello world\"));\n        assertEquals(\"Java Is Awesome\", MyClass4.toTitleCase(\"java is awesome\"));\n        assertEquals(\"The Quick Brown Fox\", MyClass4.toTitleCase(\"the quick brown fox\"));\n        assertEquals(\"I Love UNIT TESTING\", MyClass4.toTitleCase(\"i love UNIT TESTING\"));\n    }\n}\n"}
{"code_source": "public class MyClass40 {\n    public static int countVowels(String str) {\n        str = str.toLowerCase();\n        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            char ch = str.charAt(i);\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass40Test {\n\n    @Test\n    public void testCountVowels() {\n        assertEquals(2, MyClass40.countVowels(\"Hello\"));\n        assertEquals(5, MyClass40.countVowels(\"The quick brown fox jumps over the lazy dog\"));\n        assertEquals(0, MyClass40.countVowels(\"\"));\n        assertEquals(0, MyClass40.countVowels(\"rhythm\"));\n        assertEquals(1, MyClass40.countVowels(\"crypt\"));\n        assertEquals(2, MyClass40.countVowels(\"lyric\"));\n    }\n}\n"}
{"code_source": "public class MyClass41 {\n    private String accountNumber;\n    private double balance;\n\n    public BankAccount(String accountNumber, double balance) {\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public void deposit(double amount) {\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        if (amount > balance) {\n            throw new IllegalArgumentException(\"Insufficient funds\");\n        }\n        balance -= amount;\n    }\n\n    public void transferTo(BankAccount destinationAccount, double amount) {\n        if (amount > balance) {\n            throw new IllegalArgumentException(\"Insufficient funds\");\n        }\n        balance -= amount;\n        destinationAccount.deposit(amount);\n    }\n\n    public void printStatement() {\n        System.out.println(\"Account number: \" + accountNumber);\n        System.out.println(\"Balance: \" + balance);\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class BankAccountTest {\n\n    @Test\n    public void testDeposit() {\n        BankAccount account = new BankAccount(\"123456789\", 100.0);\n        account.deposit(50.0);\n        assertEquals(150.0, account.getBalance(), 0.01);\n    }\n\n    @Test\n    public void testWithdraw() {\n        BankAccount account = new BankAccount(\"123456789\", 100.0);\n        account.withdraw(50.0);\n        assertEquals(50.0, account.getBalance(), 0.01);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testWithdrawInsufficientFunds() {\n        BankAccount account = new BankAccount(\"123456789\", 100.0);\n        account.withdraw(150.0);\n    }\n\n    @Test\n    public void testTransferTo() {\n        BankAccount account1 = new BankAccount(\"123456789\", 100.0);\n        BankAccount account2 = new BankAccount(\"987654321\", 50.0);\n        account1.transferTo(account2, 50.0);\n        assertEquals(50.0, account1.getBalance(), 0.01);\n        assertEquals(100.0, account2.getBalance(), 0.01);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testTransferToInsufficientFunds() {\n        BankAccount account1 = new BankAccount(\"123456789\", 100.0);\n        BankAccount account2 = new BankAccount(\"987654321\", 50.0);\n        account1.transferTo(account2, 150.0);\n    }\n\n    @Test\n    public void testPrintStatement() {\n        BankAccount account = new BankAccount(\"123456789\", 100.0);\n        String expected = \"Account number: 123456789\\nBalance: 100.0\\n\";\n        assertEquals(expected, account.printStatement());\n    }\n\n}\n"}
{"code_source": "public class MyClass42 {\n    public static int binaryToDecimal(String binary) {\n        int decimal = 0;\n        for (int i = binary.length() - 1, j = 0; i >= 0; i--, j++) {\n            if (binary.charAt(i) == '1') {\n                decimal += Math.pow(2, j);\n            }\n        }\n        return decimal;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class MyClass42Test {\n\n    @Test\n    public void testBinaryToDecimal() {\n        assertEquals(0, MyClass42.binaryToDecimal(\"0\"));\n        assertEquals(1, MyClass42.binaryToDecimal(\"1\"));\n        assertEquals(2, MyClass42.binaryToDecimal(\"10\"));\n        assertEquals(3, MyClass42.binaryToDecimal(\"11\"));\n        assertEquals(4, MyClass42.binaryToDecimal(\"100\"));\n        assertEquals(5, MyClass42.binaryToDecimal(\"101\"));\n        assertEquals(6, MyClass42.binaryToDecimal(\"110\"));\n        assertEquals(7, MyClass42.binaryToDecimal(\"111\"));\n        assertEquals(8, MyClass42.binaryToDecimal(\"1000\"));\n        assertEquals(9, MyClass42.binaryToDecimal(\"1001\"));\n        assertEquals(10, MyClass42.binaryToDecimal(\"1010\"));\n    }\n}\n"}
{"code_source": "public class MyClass43 {\n\n    public int add(int a, int b) {\n        return a + b;\n    }\n\n    public int subtract(int a, int b) {\n        return a - b;\n    }\n\n    public int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public double divide(int a, int b) {\n        if (b == 0) {\n            throw new ArithmeticException(\"Cannot divide by zero\");\n        }\n        return (double) a / b;\n    }\n\n    public int factorial(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Input must be non-negative\");\n        }\n        int result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass43Test {\n\n    private MyClass43 myClass = new MyClass43();\n\n    @Test\n    public void testAdd() {\n        int result = myClass.add(2, 3);\n        assertEquals(5, result);\n    }\n\n    @Test\n    public void testSubtract() {\n        int result = myClass.subtract(5, 2);\n        assertEquals(3, result);\n    }\n\n    @Test\n    public void testMultiply() {\n        int result = myClass.multiply(2, 3);\n        assertEquals(6, result);\n    }\n\n    @Test\n    public void testDivide() {\n        double result = myClass.divide(6, 3);\n        assertEquals(2.0, result, 0.0001);\n        try {\n            myClass.divide(6, 0);\n            fail(\"Expected an ArithmeticException to be thrown\");\n        } catch (ArithmeticException e) {\n            assertEquals(\"Cannot divide by zero\", e.getMessage());\n        }\n    }\n\n    @Test\n    public void testFactorial() {\n        int result = myClass.factorial(5);\n        assertEquals(120, result);\n        try {\n            myClass.factorial(-1);\n            fail(\"Expected an IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(\"Input must be non-negative\", e.getMessage());\n        }\n    }\n}\n"}
{"code_source": "public class MyClass44 {\n    public double method3(double[] arr) {\n        // Method 3 implementation goes here\n        double sum = 0;\n        for (double d : arr) {\n            sum += d;\n        }\n        return sum;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass44Test {\n\n    @Test\n    public void testMethod3() {\n        MyClass44 obj = new MyClass44();\n        double[] arr1 = {1.0, 2.0, 3.0, 4.0};\n        assertEquals(10.0, obj.method3(arr1), 0.0);\n\n        double[] arr2 = {-1.0, 2.5, -3.5, 4.0};\n        assertEquals(1.0, obj.method3(arr2), 0.0);\n\n        double[] arr3 = {};\n        assertEquals(0.0, obj.method3(arr3), 0.0);\n    }\n}\n"}
{"code_source": "public class MyClass45 {\n    public void method4(String s) {\n        // Method 4 implementation goes here\n        System.out.println(\"Input string: \" + s);\n    }\n\n}\n", "test_case": "import java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClass45Test {\n\n    @Test\n    public void testMethod4() {\n        MyClass45 obj = new MyClass45();\n\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        obj.method4(\"hello world\");\n\n        String expectedOutput = \"Input string: hello world\\n\";\n        assertEquals(expectedOutput, outContent.toString());\n    }\n\n}\n"}
{"code_source": "public class MyClass46 {\n    public int method5(int n) {\n        // Method 5 implementation goes here\n        if (n <= 0) {\n            return 1;\n        }\n        return n * method5(n - 1);\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass46Test {\n\n    @Test\n    public void testMethod5WithPositiveNumber() {\n        MyClass46 obj = new MyClass46();\n        int result = obj.method5(5);\n        assertEquals(120, result);\n    }\n\n    @Test\n    public void testMethod5WithZero() {\n        MyClass46 obj = new MyClass46();\n        int result = obj.method5(0);\n        assertEquals(1, result);\n    }\n\n    @Test\n    public void testMethod5WithNegativeNumber() {\n        MyClass46 obj = new MyClass46();\n        int result = obj.method5(-5);\n        assertEquals(1, result);\n    }\n}\n"}
{"code_source": "public class MyClass47 {\n    public int method15(int[] arr) {\n        // Method 15 implementation goes here\n        int sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] % 2 == 0) {\n                sum += arr[i];\n            }\n        }\n        return sum;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class MyClass47Test {\n    @Test\n    public void testMethod15() {\n        MyClass47 myClass = new MyClass47();\n        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n        int expectedSum = 20; // sum of even numbers 2 + 4 + 6 + 8\n        int actualSum = myClass.method15(arr);\n        assertEquals(expectedSum, actualSum);\n    }\n}\n"}
{"code_source": "public class MyClass48 {\n    public void method13(int[] arr, int n) {\n        // Method 13 implementation goes here\n        int count = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == n) {\n                count++;\n            }\n        }\n        System.out.println(\"The number of occurrences of \" + n + \" is: \" + count);\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass48Test {\n\n    @Test\n    public void testMethod13() {\n        MyClass48 obj = new MyClass48();\n        int[] arr = {1, 2, 3, 2, 4, 2, 5};\n        int n = 2;\n        obj.method13(arr, n);\n        // Expected output: \"The number of occurrences of 2 is: 3\"\n    }\n}\n"}
{"code_source": "public class MyClass49 {\n    public double method14(double x, double y, double z) {\n        // Method 14 implementation goes here\n        return (x + y + z) / 3.0;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass49Test {\n\n    @Test\n    public void testMethod14() {\n        MyClass49 obj = new MyClass49();\n\n        // Test with positive numbers\n        double result = obj.method14(2.5, 3.0, 4.5);\n        assertEquals(3.333, result, 0.001);\n\n        // Test with negative numbers\n        result = obj.method14(-2.5, -3.0, -4.5);\n        assertEquals(-3.333, result, 0.001);\n\n        // Test with mixed numbers\n        result = obj.method14(-2.5, 3.0, 4.5);\n        assertEquals(1.0, result, 0.001);\n\n        // Test with zeros\n        result = obj.method14(0, 0, 0);\n        assertEquals(0.0, result, 0.0);\n    }\n}\n"}
{"code_source": "public class MyClass5 {\n    public static int countWords(String str) {\n        String trimmed = str.trim();\n        if (trimmed.isEmpty()) {\n            return 0;\n        }\n        return trimmed.split(\"\\\\s+\").length;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass5Test {\n\n    @Test\n    public void testCountWords() {\n        assertEquals(2, MyClass5.countWords(\"Hello world\"));\n        assertEquals(4, MyClass5.countWords(\"The quick brown fox\"));\n        assertEquals(0, MyClass5.countWords(\"\"));\n        assertEquals(1, MyClass5.countWords(\"Java\"));\n        assertEquals(5, MyClass5.countWords(\"This string has four words\"));\n        assertEquals(1, MyClass5.countWords(\"  hello  \"));\n    }\n}\n"}
{"code_source": "public class MyClass50 {\n    public String method13(String s) {\n        // Method 13 implementation goes here\n        return s.replaceAll(\"\\\\s+\", \"\");\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class MyClass50Test {\n\n    @Test\n    public void testMethod13() {\n        MyClass50 obj = new MyClass50();\n        String result1 = obj.method13(\"hello world\");\n        assertEquals(\"helloworld\", result1);\n\n        String result2 = obj.method13(\"  spaces   removed \");\n        assertEquals(\"spacesremoved\", result2);\n\n        String result3 = obj.method13(\"\");\n        assertEquals(\"\", result3);\n    }\n}\n"}
{"code_source": "public class MyClass51 {\n\n}\n", "test_case": ""}
{"code_source": "public class MyClass52 {\n    public double method14(double[] arr) {\n        // Method 14 implementation goes here\n        double max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        return max;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass52Test {\n\n    @Test\n    public void testMethod14() {\n        MyClass52 myClass = new MyClass52();\n\n        double[] arr1 = {1.0, 2.0, 3.0, 4.0, 5.0};\n        double expected1 = 5.0;\n        assertEquals(expected1, myClass.method14(arr1), 0.0001);\n\n        double[] arr2 = {-1.0, -2.0, -3.0, -4.0, -5.0};\n        double expected2 = -1.0;\n        assertEquals(expected2, myClass.method14(arr2), 0.0001);\n\n        double[] arr3 = {3.0, 1.0, 4.0, 1.0, 5.0};\n        double expected3 = 5.0;\n        assertEquals(expected3, myClass.method14(arr3), 0.0001);\n\n        double[] arr4 = {-1.0, 2.0, -3.0, 4.0, -5.0};\n        double expected4 = 4.0;\n        assertEquals(expected4, myClass.method14(arr4), 0.0001);\n    }\n}\n"}
{"code_source": "public class MyClass53 {\n    public void method15(int[] arr) {\n        // Method 15 implementation goes here\n        for (int i = 0; i < arr.length; i++) {\n            arr[i] = arr[i] * 2;\n        }\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass53Test {\n\n    @Test\n    public void testMethod15() {\n        MyClass53 obj = new MyClass53();\n        int[] arr = {1, 2, 3, 4, 5};\n        obj.method15(arr);\n        int[] expected = {2, 4, 6, 8, 10};\n        assertArrayEquals(expected, arr);\n    }\n\n}\n"}
{"code_source": "class MyClass54\n{\n    public void updateFile(String s,String o,String n) throws IOException\n    {\n        File file = new File(\"file\"+s+\".txt\");\n        Scanner sc = new Scanner(file);\n        String fileContext=\"\";\n        while (sc.hasNextLine())\n        {\n            fileContext =fileContext+\"\\n\"+sc.nextLine();\n        }\n        FileWriter myWriter = new FileWriter(\"file\"+s+\".txt\");\n        fileContext = fileContext.replaceAll(o,n);\n        myWriter.write(fileContext);\n        myWriter.close();\n\n    }\n}\n", "test_case": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.io.*;\n\npublic class MyClass54 {\n    \n    @Test\n    void testUpdateFile() {\n        // Create a temporary file to test the method\n        File testFile = null;\n        try {\n            testFile = File.createTempFile(\"testfile\", \".txt\");\n            FileWriter writer = new FileWriter(testFile);\n            writer.write(\"Employee ID:123\\nEmployee Name:John Doe\\n\");\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        \n        // Call the method to update the file\n        Employee_Update updater = new Employee_Update();\n        try {\n            updater.updateFile(\"123\", \"John\", \"Jane\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        \n        // Check if the file has been updated correctly\n        try {\n            BufferedReader reader = new BufferedReader(new FileReader(testFile));\n            String line = reader.readLine();\n            assertEquals(line, \"Employee ID:123\");\n            line = reader.readLine();\n            assertEquals(line, \"Employee Name:Jane Doe\");\n            assertNull(reader.readLine());\n            reader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n"}
{"code_source": "public class MyClass55 {\n    public static double calculateBMI(double height, double weight) {\n        double meters = height / 100.0;\n        return weight / (meters * meters);\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass55Test {\n\n    @Test\n    public void testCalculateBMI() {\n        // Test with height = 170 cm and weight = 70 kg\n        double height = 170;\n        double weight = 70;\n        double expectedBMI = 24.22; // Rounded to two decimal places\n        double calculatedBMI = MyClass55.calculateBMI(height, weight);\n        assertEquals(expectedBMI, calculatedBMI, 0.01); // Allow for 1% error\n    }\n}\n"}
{"code_source": "public class MyClass56 {\n    public static String concatenateStrings(String str1, String str2) {\n\n        return str1 + \" \" + str2;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass56Test {\n\n    @Test\n    public void testConcatenateStrings() {\n        String result = MyClass56.concatenateStrings(\"Hello\", \"world\");\n        assertEquals(\"Hello world\", result);\n    }\n\n    @Test\n    public void testConcatenateStringsEmpty() {\n        String result = MyClass56.concatenateStrings(\"\", \"\");\n        assertEquals(\" \", result);\n    }\n\n    @Test\n    public void testConcatenateStringsWithNumbers() {\n        String result = MyClass56.concatenateStrings(\"The answer is\", \"42\");\n        assertEquals(\"The answer is 42\", result);\n    }\n\n}\n"}
{"code_source": "public class MyClass57 {\n    public static double convertCelsiusToFahrenheit(double celsius) {\n\n        return (celsius * 9 / 5) + 32;\n    }\n\n}\n", "test_case": "import static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class MyClass57Test {\n\n    @Test\n    public void testConvertCelsiusToFahrenheit() {\n        double celsius = 25;\n        double expected = 77;\n        double actual = MyClass57.convertCelsiusToFahrenheit(celsius);\n        double delta = 0.0001; // acceptable difference due to floating-point precision\n        assertEquals(expected, actual, delta);\n    }\n\n}\n"}
{"code_source": "public class MyClass58 {\n    public static String reverseWords(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder reversed = new StringBuilder();\n        for (int i = words.length - 1; i >= 0; i--) {\n            reversed.append(words[i]);\n            if (i > 0) {\n                reversed.append(\" \");\n            }\n        }\n        return reversed.toString();\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass58Test {\n\n    @Test\n    public void testReverseWords() {\n        String sentence = \"The quick brown fox\";\n        String expected = \"fox brown quick The\";\n        String actual = MyClass58.reverseWords(sentence);\n        assertEquals(expected, actual);\n    }\n}\n"}
{"code_source": "public class MyClass59 {\n\n}\n", "test_case": "import org.junit.jupiter.api.Test;\nimport java.io.File;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Class59Test {\n\n    @Test\n    void testRemoveFile() {\n        // Create a dummy file for testing\n        String ID = \"123\";\n        String filename = \"file\" + ID + \".txt\";\n        File file = new File(filename);\n        assertTrue(file.createNewFile());\n\n        // Instantiate the class and call the method\n        Class59 obj = new Class59();\n        obj.removeFile(ID);\n\n        // Check if the file has been deleted\n        assertFalse(file.exists());\n    }\n\n    @Test\n    void testRemoveNonExistingFile() {\n        // Create a dummy file with a different name\n        String ID = \"123\";\n        String filename = \"dummy.txt\";\n        File file = new File(filename);\n        assertTrue(file.createNewFile());\n\n        // Instantiate the class and call the method\n        Class59 obj = new Class59();\n        obj.removeFile(ID);\n\n        // Check if the file still exists and print the message\n        assertTrue(file.exists());\n        assertEquals(\"\\nEmployee does not exists :( \", outContent.toString().trim());\n    }\n\n}\n"}
{"code_source": "public class MyClass6 {\n    public static void bubbleSort(int[] array) {\n        int n = array.length;\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (array[j] > array[j + 1]) {\n                    int temp = array[j];\n                    array[j] = array[j + 1];\n                    array[j + 1] = temp;\n                }\n            }\n        }\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass5Test {\n\n    @Test\n    public void testCountWords() {\n        assertEquals(2, MyClass5.countWords(\"Hello world\"));\n        assertEquals(4, MyClass5.countWords(\"The quick brown fox\"));\n        assertEquals(0, MyClass5.countWords(\"\"));\n        assertEquals(1, MyClass5.countWords(\"Java\"));\n        assertEquals(5, MyClass5.countWords(\"This string has four words\"));\n        assertEquals(1, MyClass5.countWords(\"  hello  \"));\n    }\n}\n"}
{"code_source": "public class MyClass60 {\n    public static String reverseString(String str) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.toString();\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass60Test {\n    @Test\n    public void testReverseString() {\n        MyClass60 obj = new MyClass60();\n        String input = \"Hello World\";\n        String expectedOutput = \"dlroW olleH\";\n        String actualOutput = obj.reverseString(input);\n        assertEquals(expectedOutput, actualOutput);\n    }\n}\n"}
{"code_source": "public class MyClass61 {\n    public static double calculateBMI(double height, double weight) {\n        double meters = height / 100.0;\n        return weight / (meters * meters);\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass61Test {\n\n    @Test\n    public void testCalculateBMI() {\n        double height = 170.0;\n        double weight = 70.0;\n        double expected = 24.22;\n        double delta = 0.01;\n\n        double actual = MyClass61.calculateBMI(height, weight);\n\n        assertEquals(expected, actual, delta);\n    }\n}\n"}
{"code_source": "public class MyClass62 {\n    public static int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass62Test {\n\n    @Test\n    public void testGCD() {\n        assertEquals(3, MyClass62.gcd(9, 6));\n        assertEquals(6, MyClass62.gcd(30, 18));\n        assertEquals(1, MyClass62.gcd(17, 5));\n        assertEquals(12, MyClass62.gcd(84, 60));\n        assertEquals(4, MyClass62.gcd(20, 12));\n    }\n\n}\n"}
{"code_source": "public class MyClass63 {\n    public static boolean isPalindrome(String str) {\n        int left = 0;\n        int right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left) != str.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass63Test {\n\n    @Test\n    public void testIsPalindrome() {\n        assertTrue(MyClass63.isPalindrome(\"racecar\"));\n        assertTrue(MyClass63.isPalindrome(\"deified\"));\n        assertTrue(MyClass63.isPalindrome(\"A man a plan a canal Panama\"));\n        assertFalse(MyClass63.isPalindrome(\"hello\"));\n        assertFalse(MyClass63.isPalindrome(\"world\"));\n        assertFalse(MyClass63.isPalindrome(\"not a palindrome\"));\n    }\n}\n"}
{"code_source": "public class MyClass64 {\n    public static void printArray(int[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            System.out.print(arr[i] + \" \");\n        }\n        System.out.println();\n    }\n\n}\n", "test_case": "import static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class MyClass64Test {\n\n    private final PrintStream originalOut = System.out;\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n\n    @BeforeEach\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n    }\n\n    @AfterEach\n    public void restoreStreams() {\n        System.setOut(originalOut);\n    }\n\n    @Test\n    public void testPrintArray() {\n        int[] arr = {1, 2, 3, 4, 5};\n        MyClass64.printArray(arr);\n        assertEquals(\"1 2 3 4 5 \\n\", outContent.toString());\n    }\n\n    @Test\n    public void testPrintEmptyArray() {\n        int[] arr = {};\n        MyClass64.printArray(arr);\n        assertEquals(\"\\n\", outContent.toString());\n    }\n\n    @Test\n    public void testPrintNullArray() {\n        int[] arr = null;\n        assertThrows(NullPointerException.class, () -> MyClass64.printArray(arr));\n    }\n}\n"}
{"code_source": "public class MyClass65 {\n    public int[] sortArray(int[] arr) {\n        Arrays.sort(arr);\n        return arr;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass65Test {\n\n    @Test\n    public void testSortArray() {\n        MyClass65 obj = new MyClass65();\n\n        // Test with a sorted array\n        int[] arr1 = {1, 2, 3, 4, 5};\n        assertArrayEquals(arr1, obj.sortArray(arr1));\n\n        // Test with a reverse sorted array\n        int[] arr2 = {5, 4, 3, 2, 1};\n        int[] expected2 = {1, 2, 3, 4, 5};\n        assertArrayEquals(expected2, obj.sortArray(arr2));\n\n        // Test with an unsorted array with duplicates\n        int[] arr3 = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};\n        int[] expected3 = {1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9};\n        assertArrayEquals(expected3, obj.sortArray(arr3));\n    }\n}\n"}
{"code_source": "public class MyClass66 {\n    public static String removeCharFromString(String str, char ch) {\n        return str.replaceAll(String.valueOf(ch),\n                \"\");\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass66Test {\n\n    @Test\n    public void testRemoveCharFromString() {\n        String str = \"Hello World!\";\n        char ch = 'o';\n        String expected = \"Hell Wrld!\";\n        String result = MyClass66.removeCharFromString(str, ch);\n        assertEquals(expected, result);\n    }\n}\n"}
{"code_source": "public class MyClass67 {\n    public static boolean isLeapYear(int year) {\n        if (year % 4 == 0) {\n            if (year % 100 == 0) {\n                return year % 400 == 0;\n            } else {\n                return true;\n            }\n        } else {\n            return false;\n        }\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass67Test {\n\n    @Test\n    public void testIsLeapYear() {\n        assertTrue(MyClass67.isLeapYear(2000));\n        assertTrue(MyClass67.isLeapYear(2024));\n        assertFalse(MyClass67.isLeapYear(1900));\n        assertFalse(MyClass67.isLeapYear(2001));\n    }\n}\n"}
{"code_source": "public class MyClass68 {\n    public static void reverseArray(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n / 2; i++) {\n            int temp = arr[i];\n            arr[i] = arr[n - i - 1];\n            arr[n - i - 1] = temp;\n        }\n    }\n\n}\n", "test_case": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class MyClass68Test {\n\n    @Test\n    void testReverseArray() {\n        int[] arr1 = {1, 2, 3, 4, 5};\n        int[] arr2 = {5, 4, 3, 2, 1};\n\n        MyClass68.reverseArray(arr1);\n        assertArrayEquals(arr2, arr1);\n\n        int[] arr3 = {1, 2, 3};\n        int[] arr4 = {3, 2, 1};\n\n        MyClass68.reverseArray(arr3);\n        assertArrayEquals(arr4, arr3);\n\n        int[] arr5 = {1};\n        int[] arr6 = {1};\n\n        MyClass68.reverseArray(arr5);\n        assertArrayEquals(arr6, arr5);\n    }\n}\n"}
{"code_source": "public class MyClass69 {\n    public static boolean isPowerOfTwo(int num) {\n        if (num <= 0) {\n            return false;\n        }\n        return (num & (num - 1)) == 0;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass69Test {\n\n    @Test\n    public void testIsPowerOfTwo() {\n        assertFalse(MyClass69.isPowerOfTwo(0)); // zero is not a power of two\n        assertFalse(MyClass69.isPowerOfTwo(-2)); // negative numbers are not powers of two\n        assertFalse(MyClass69.isPowerOfTwo(15)); // 15 is not a power of two\n        assertFalse(MyClass69.isPowerOfTwo(123456)); // 123456 is not a power of two\n        assertTrue(MyClass69.isPowerOfTwo(1)); // 1 is a power of two (2^0)\n        assertTrue(MyClass69.isPowerOfTwo(2)); // 2 is a power of two (2^1)\n        assertTrue(MyClass69.isPowerOfTwo(16)); // 16 is a power of two (2^4)\n        assertTrue(MyClass69.isPowerOfTwo(1024)); // 1024 is a power of two (2^10)\n    }\n\n}\n"}
{"code_source": "public class MyClass7 {\n    public static boolean isPerfectSquare(int n) {\n        int sqrt = (int) Math.sqrt(n);\n        return sqrt * sqrt == n;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass6Test {\n\n    @Test\n    public void testBubbleSort() {\n        int[] arr1 = {5, 1, 4, 2, 8};\n        int[] expected1 = {1, 2, 4, 5, 8};\n        MyClass6.bubbleSort(arr1);\n        assertArrayEquals(expected1, arr1);\n\n        int[] arr2 = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n        int[] expected2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        MyClass6.bubbleSort(arr2);\n        assertArrayEquals(expected2, arr2);\n\n        int[] arr3 = {3, 3, 3, 3};\n        int[] expected3 = {3, 3, 3, 3};\n        MyClass6.bubbleSort(arr3);\n        assertArrayEquals(expected3, arr3);\n\n        int[] arr4 = {};\n        int[] expected4 = {};\n        MyClass6.bubbleSort(arr4);\n        assertArrayEquals(expected4, arr4);\n    }\n}\n"}
{"code_source": "public class MyClass70 {\n    public static int[] concatenateArrays(int[] arr1, int[] arr2) {\n        int[] result = new int[arr1.length + arr2.length];\n        System.arraycopy(arr1, 0, result, 0, arr1.length);\n        System.arraycopy(arr2, 0, result, arr1.length, arr2.length);\n        return result;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass70Test {\n\n    @Test\n    public void testConcatenateArrays() {\n        int[] arr1 = {1, 2, 3};\n        int[] arr2 = {4, 5, 6};\n        int[] expected = {1, 2, 3, 4, 5, 6};\n        int[] result = MyClass70.concatenateArrays(arr1, arr2);\n        assertArrayEquals(expected, result);\n    }\n}\n"}
{"code_source": "public class MyClass71 {\n    public static double calculateDistance(double x1, double y1, double z1, double x2, double y2, double z2) {\n        double dx = x2 - x1;\n        double dy = y2 - y1;\n        double dz = z2 - z1;\n        return Math.sqrt(dx*dx + dy*dy + dz*dz);\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass71Test {\n\n    @Test\n    public void testCalculateDistance() {\n        double x1 = 1.0;\n        double y1 = 2.0;\n        double z1 = 3.0;\n        double x2 = 4.0;\n        double y2 = 5.0;\n        double z2 = 6.0;\n        double expected = Math.sqrt(27);\n        double result = MyClass71.calculateDistance(x1, y1, z1, x2, y2, z2);\n        assertEquals(expected, result, 0.0001);\n    }\n}\n"}
{"code_source": "public class MyClass72 {\n    public static int sumOfDigits(int num) {\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        return sum;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass72Test {\n\n    @Test\n    public void testSumOfDigits() {\n        int num = 12345;\n        int expected = 15;\n        int result = MyClass72.sumOfDigits(num);\n        assertEquals(expected, result);\n    }\n}\n"}
{"code_source": "public class MyClass73 {\n    public static int countCharOccurrences(String str, char ch) {\n        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == ch) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass73Test {\n\n    @Test\n    public void testCountCharOccurrences() {\n        String str = \"Hello, world!\";\n        char ch = 'l';\n        int expected = 3;\n        int result = MyClass73.countCharOccurrences(str, ch);\n        assertEquals(expected, result);\n    }\n}\n"}
{"code_source": "public class MyClass74 {\n    public static double areaOfCircle(double radius) {\n        return Math.PI * radius * radius;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass74Test {\n\n    @Test\n    public void testAreaOfCircle() {\n        double radius = 2.0;\n        double expected = Math.PI * radius * radius;\n        double result = MyClass74.areaOfCircle(radius);\n        assertEquals(expected, result, 0.0001);\n    }\n}\n"}
{"code_source": "public class MyClass75 {\n    public static int countCharOccurrences(String str, char ch) {\n        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == ch) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass75Test {\n\n    @Test\n    public void testCountCharOccurrences() {\n        String str = \"hello, world!\";\n        char ch = 'o';\n        int expected = 2;\n        int result = MyClass75.countCharOccurrences(str, ch);\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testCountCharOccurrences_emptyString() {\n        String str = \"\";\n        char ch = 'o';\n        int expected = 0;\n        int result = MyClass75.countCharOccurrences(str, ch);\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testCountCharOccurrences_noOccurrences() {\n        String str = \"hello, world!\";\n        char ch = 'z';\n        int expected = 0;\n        int result = MyClass75.countCharOccurrences(str, ch);\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testCountCharOccurrences_multipleOccurrences() {\n        String str = \"hello, world!\";\n        char ch = 'l';\n        int expected = 3;\n        int result = MyClass75.countCharOccurrences(str, ch);\n        assertEquals(expected, result);\n    }\n}\n"}
{"code_source": "public class MyClass76 {\n    public static boolean isPalindromePermutation(String str) {\n        int[] counts = new int[256];\n        for (int i = 0; i < str.length(); i++) {\n            counts[str.charAt(i)]++;\n        }\n        int oddCount = 0;\n        for (int count : counts) {\n            if (count % 2 == 1) {\n                oddCount++;\n                if (oddCount > 1) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass76Test {\n\n    @Test\n    public void testIsPalindromePermutation_true() {\n        String str = \"racecar\";\n        assertTrue(MyClass76.isPalindromePermutation(str));\n    }\n\n    @Test\n    public void testIsPalindromePermutation_false() {\n        String str = \"hello\";\n        assertFalse(MyClass76.isPalindromePermutation(str));\n    }\n\n    @Test\n    public void testIsPalindromePermutation_emptyString() {\n        String str = \"\";\n        assertTrue(MyClass76.isPalindromePermutation(str));\n    }\n\n    @Test\n    public void testIsPalindromePermutation_singleCharacter() {\n        String str = \"a\";\n        assertTrue(MyClass76.isPalindromePermutation(str));\n    }\n\n    @Test\n    public void testIsPalindromePermutation_whitespace() {\n        String str = \"taco cat\";\n        assertTrue(MyClass76.isPalindromePermutation(str));\n    }\n\n    @Test\n    public void testIsPalindromePermutation_specialCharacters() {\n        String str = \"A man, a plan, a canal, Panama!\";\n        assertTrue(MyClass76.isPalindromePermutation(str));\n    }\n\n    @Test\n    public void testIsPalindromePermutation_numbers() {\n        String str = \"123321\";\n        assertTrue(MyClass76.isPalindromePermutation(str));\n    }\n\n    @Test\n    public void testIsPalindromePermutation_numbersAndLetters() {\n        String str = \"1a2b3c4b2a1\";\n        assertTrue(MyClass76.isPalindromePermutation(str));\n    }\n\n}\n"}
{"code_source": "public class MyClass77 {\n    public static String generateRandomString(int length) {\n        String chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < length; i++) {\n            int index = (int) (Math.random() * chars.length());\n            sb.append(chars.charAt(index));\n        }\n        return sb.toString();\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass77Test {\n\n    @Test\n    public void testGenerateRandomString() {\n        // Test length 0\n        String s1 = MyClass77.generateRandomString(0);\n        assertEquals(\"\", s1);\n\n        // Test length 1\n        String s2 = MyClass77.generateRandomString(1);\n        assertEquals(1, s2.length());\n\n        // Test length 10\n        String s3 = MyClass77.generateRandomString(10);\n        assertEquals(10, s3.length());\n\n        // Test length 100\n        String s4 = MyClass77.generateRandomString(100);\n        assertEquals(100, s4.length());\n\n        // Test null input\n        try {\n            MyClass77.generateRandomString(-1);\n            fail(\"Expected IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            // Expected exception\n        }\n    }\n}\n"}
{"code_source": "public class MyClass78 {\n\n}\n", "test_case": ""}
{"code_source": "public class MyClass79 {\n    public static boolean isValidIPv4(String str) {\n        String[] parts = str.split(\"\\\\.\");\n        if (parts.length != 4) {\n            return false;\n        }\n        for (String part : parts) {\n            try {\n                int num = Integer.parseInt(part);\n                if (num < 0 || num > 255 || (num > 0 && part.startsWith(\"0\"))) {\n                    return false;\n                }\n            } catch (NumberFormatException e) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass79Test {\n\n    @Test\n    public void testIsValidIPv4() {\n        // Test valid IPs\n        assertTrue(MyClass79.isValidIPv4(\"192.168.0.1\"));\n        assertTrue(MyClass79.isValidIPv4(\"172.16.0.0\"));\n        assertTrue(MyClass79.isValidIPv4(\"255.255.255.255\"));\n        assertTrue(MyClass79.isValidIPv4(\"1.0.0.0\"));\n        assertTrue(MyClass79.isValidIPv4(\"0.0.0.0\"));\n\n        // Test invalid IPs\n        assertFalse(MyClass79.isValidIPv4(\"\"));\n        assertFalse(MyClass79.isValidIPv4(\"192.168.0.\"));\n        assertFalse(MyClass79.isValidIPv4(\"192.168.0.256\"));\n        assertFalse(MyClass79.isValidIPv4(\"192.168.00.1\"));\n        assertFalse(MyClass79.isValidIPv4(\"192.168.0.-1\"));\n        assertFalse(MyClass79.isValidIPv4(\"192.168.0.1.2\"));\n        assertFalse(MyClass79.isValidIPv4(\"192.168.0.a\"));\n    }\n}\n"}
{"code_source": "public class MyClass8 {\n    public static int longestIncreasingSubsequence(int[] array) {\n        int n = array.length;\n        int[] dp = new int[n];\n        Arrays.fill(dp, 1);\n        int max = 1;\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (array[j] < array[i]) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass7Test {\n\n    @Test\n    public void testIsPerfectSquare() {\n        assertTrue(MyClass7.isPerfectSquare(1));\n        assertTrue(MyClass7.isPerfectSquare(4));\n        assertTrue(MyClass7.isPerfectSquare(9));\n        assertTrue(MyClass7.isPerfectSquare(16));\n        assertTrue(MyClass7.isPerfectSquare(25));\n        assertTrue(MyClass7.isPerfectSquare(36));\n        assertTrue(MyClass7.isPerfectSquare(49));\n        assertTrue(MyClass7.isPerfectSquare(64));\n        assertTrue(MyClass7.isPerfectSquare(81));\n        assertTrue(MyClass7.isPerfectSquare(100));\n\n        assertFalse(MyClass7.isPerfectSquare(2));\n        assertFalse(MyClass7.isPerfectSquare(3));\n        assertFalse(MyClass7.isPerfectSquare(5));\n        assertFalse(MyClass7.isPerfectSquare(6));\n        assertFalse(MyClass7.isPerfectSquare(7));\n        assertFalse(MyClass7.isPerfectSquare(8));\n        assertFalse(MyClass7.isPerfectSquare(10));\n    }\n}\n"}
{"code_source": "public class MyClass80 {\n    public static boolean containsOnlyDigits(String str) {\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass80Test {\n\n    @Test\n    public void testContainsOnlyDigits() {\n        // Test with strings containing only digits\n        assertTrue(MyClass80.containsOnlyDigits(\"123\"));\n        assertTrue(MyClass80.containsOnlyDigits(\"0\"));\n        assertTrue(MyClass80.containsOnlyDigits(\"9876543210\"));\n\n        // Test with strings containing non-digit characters\n        assertFalse(MyClass80.containsOnlyDigits(\"123a\"));\n        assertFalse(MyClass80.containsOnlyDigits(\"123!\"));\n        assertFalse(MyClass80.containsOnlyDigits(\"12 3\"));\n        assertFalse(MyClass80.containsOnlyDigits(\"\"));\n    }\n}\n"}
{"code_source": "public class MyClass82 {\n    private String name;\n    private int age;\n    private String department;\n\n    public Employee(String name, int age, String department) {\n        this.name = name;\n        this.age = age;\n        this.department = department;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public String getDepartment() {\n        return department;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public void setDepartment(String department) {\n        this.department = department;\n    }\n\n    public boolean isOlderThan(Employee otherEmployee) {\n        return this.age > otherEmployee.age;\n    }\n\n    public String getEmployeeDetails() {\n        return \"Name: \" + name + \", Age: \" + age + \", Department: \" + department;\n    }\n\n    public boolean worksInDepartment(String department) {\n        return this.department.equalsIgnoreCase(department);\n    }\n}\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass82Test {\n\n    @Test\n    public void testGetName() {\n        Employee employee = new Employee(\"John Doe\", 30, \"IT\");\n        assertEquals(\"John Doe\", employee.getName());\n    }\n\n    @Test\n    public void testGetAge() {\n        Employee employee = new Employee(\"John Doe\", 30, \"IT\");\n        assertEquals(30, employee.getAge());\n    }\n\n    @Test\n    public void testGetDepartment() {\n        Employee employee = new Employee(\"John Doe\", 30, \"IT\");\n        assertEquals(\"IT\", employee.getDepartment());\n    }\n\n    @Test\n    public void testSetName() {\n        Employee employee = new Employee(\"John Doe\", 30, \"IT\");\n        employee.setName(\"Jane Doe\");\n        assertEquals(\"Jane Doe\", employee.getName());\n    }\n\n    @Test\n    public void testSetAge() {\n        Employee employee = new Employee(\"John Doe\", 30, \"IT\");\n        employee.setAge(40);\n        assertEquals(40, employee.getAge());\n    }\n\n    @Test\n    public void testSetDepartment() {\n        Employee employee = new Employee(\"John Doe\", 30, \"IT\");\n        employee.setDepartment(\"HR\");\n        assertEquals(\"HR\", employee.getDepartment());\n    }\n\n    @Test\n    public void testIsOlderThan() {\n        Employee employee1 = new Employee(\"John Doe\", 30, \"IT\");\n        Employee employee2 = new Employee(\"Jane Doe\", 40, \"HR\");\n        assertTrue(employee2.isOlderThan(employee1));\n    }\n\n    @Test\n    public void testGetEmployeeDetails() {\n        Employee employee = new Employee(\"John Doe\", 30, \"IT\");\n        assertEquals(\"Name: John Doe, Age: 30, Department: IT\", employee.getEmployeeDetails());\n    }\n\n    @Test\n    public void testWorksInDepartment() {\n        Employee employee = new Employee(\"John Doe\", 30, \"IT\");\n        assertTrue(employee.worksInDepartment(\"it\"));\n        assertFalse(employee.worksInDepartment(\"HR\"));\n    }\n\n}\n"}
{"code_source": "public class MyClass83 {\n    private String name;\n    private int age;\n    private String major;\n    private double gpa;\n\n    public Student(String name, int age, String major, double gpa) {\n        this.name = name;\n        this.age = age;\n        this.major = major;\n        this.gpa = gpa;\n    }\n\n    public void printStudentInfo() {\n        System.out.println(\"Name: \" + this.name);\n        System.out.println(\"Age: \" + this.age);\n        System.out.println(\"Major: \" + this.major);\n        System.out.println(\"GPA: \" + this.gpa);\n    }\n\n    public void updateName(String name) {\n        this.name = name;\n    }\n\n    public void updateAge(int age) {\n        this.age = age;\n    }\n\n    public void updateMajor(String major) {\n        this.major = major;\n    }\n\n    public void updateGpa(double gpa) {\n        this.gpa = gpa;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass83Test {\n\n    @Test\n    public void testPrintStudentInfo() {\n        Student student = new Student(\"John Doe\", 20, \"Computer Science\", 3.5);\n        String expected = \"Name: John Doe\\n\" +\n                \"Age: 20\\n\" +\n                \"Major: Computer Science\\n\" +\n                \"GPA: 3.5\\n\";\n        assertEquals(expected, getOutputFromMethod(student::printStudentInfo));\n    }\n\n    @Test\n    public void testUpdateName() {\n        Student student = new Student(\"John Doe\", 20, \"Computer Science\", 3.5);\n        student.updateName(\"Jane Doe\");\n        assertEquals(\"Jane Doe\", student.getName());\n    }\n\n    @Test\n    public void testUpdateAge() {\n        Student student = new Student(\"John Doe\", 20, \"Computer Science\", 3.5);\n        student.updateAge(21);\n        assertEquals(21, student.getAge());\n    }\n\n    @Test\n    public void testUpdateMajor() {\n        Student student = new Student(\"John Doe\", 20, \"Computer Science\", 3.5);\n        student.updateMajor(\"Electrical Engineering\");\n        assertEquals(\"Electrical Engineering\", student.getMajor());\n    }\n\n    @Test\n    public void testUpdateGpa() {\n        Student student = new Student(\"John Doe\", 20, \"Computer Science\", 3.5);\n        student.updateGpa(4.0);\n        assertEquals(4.0, student.getGpa(), 0.001);\n    }\n\n    // Helper method to get the output of a method that prints to System.out\n    private String getOutputFromMethod(Runnable method) {\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        PrintStream originalOut = System.out;\n        System.setOut(new PrintStream(outContent));\n        method.run();\n        System.setOut(originalOut);\n        return outContent.toString();\n    }\n}\n"}
{"code_source": "public class MyClass84 {\n\n}\n", "test_case": ""}
{"code_source": "public class MyClass85 {\n    public static int fibonacci(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass85Test {\n\n    @Test\n    public void testFibonacci() {\n        // Test the first 10 numbers in the sequence\n        assertEquals(0, MyClass85.fibonacci(0));\n        assertEquals(1, MyClass85.fibonacci(1));\n        assertEquals(1, MyClass85.fibonacci(2));\n        assertEquals(2, MyClass85.fibonacci(3));\n        assertEquals(3, MyClass85.fibonacci(4));\n        assertEquals(5, MyClass85.fibonacci(5));\n        assertEquals(8, MyClass85.fibonacci(6));\n        assertEquals(13, MyClass85.fibonacci(7));\n        assertEquals(21, MyClass85.fibonacci(8));\n        assertEquals(34, MyClass85.fibonacci(9));\n    }\n\n}\n"}
{"code_source": "public class MyClass86 {\n    public static int findMax(int[] arr) {\n        int max = arr[0];\n        for (int i = 1; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        return max;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass86Test {\n\n    @Test\n    public void testFindMax() {\n        int[] arr1 = {1, 2, 3, 4, 5};\n        int[] arr2 = {5, 4, 3, 2, 1};\n        int[] arr3 = {-5, -4, -3, -2, -1};\n\n        assertEquals(5, MyClass86.findMax(arr1));\n        assertEquals(5, MyClass86.findMax(arr2));\n        assertEquals(-1, MyClass86.findMax(arr3));\n    }\n\n}\n"}
{"code_source": "public class MyClass87 {\n    public static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    public static double divide(double a, double b) {\n        if (b == 0) {\n            throw new IllegalArgumentException(\"Cannot divide by zero\");\n        }\n        return a / b;\n    }\n\n    public static int calculateFactorial(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Cannot calculate factorial of a negative number\");\n        }\n        int factorial = 1;\n        for (int i = 1; i <= n; i++) {\n            factorial *= i;\n        }\n        return factorial;\n    }\n\n    public static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n", "test_case": "import org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class MyClass87Test {\n\n    @Test\n    public void testMultiply() {\n        int result = MyClass87.multiply(5, 7);\n        Assertions.assertEquals(35, result);\n    }\n\n    @Test\n    public void testDivide() {\n        double result = MyClass87.divide(10.0, 2.5);\n        Assertions.assertEquals(4.0, result, 0.00001);\n    }\n\n    @Test\n    public void testDivideByZero() {\n        Assertions.assertThrows(IllegalArgumentException.class, () -> MyClass87.divide(10.0, 0.0));\n    }\n\n    @Test\n    public void testCalculateFactorial() {\n        int result = MyClass87.calculateFactorial(5);\n        Assertions.assertEquals(120, result);\n    }\n\n    @Test\n    public void testCalculateFactorialOfZero() {\n        int result = MyClass87.calculateFactorial(0);\n        Assertions.assertEquals(1, result);\n    }\n\n    @Test\n    public void testCalculateFactorialOfNegativeNumber() {\n        Assertions.assertThrows(IllegalArgumentException.class, () -> MyClass87.calculateFactorial(-5));\n    }\n\n    @Test\n    public void testIsPrime() {\n        Assertions.assertTrue(MyClass87.isPrime(13));\n        Assertions.assertFalse(MyClass87.isPrime(4));\n        Assertions.assertFalse(MyClass87.isPrime(1));\n        Assertions.assertFalse(MyClass87.isPrime(0));\n        Assertions.assertFalse(MyClass87.isPrime(-7));\n    }\n}\n"}
{"code_source": "public class MyClass88 {\n    public static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass88Test {\n    @Test\n    public void testIsPrime() {\n        assertTrue(MyClass88.isPrime(2));\n        assertTrue(MyClass88.isPrime(3));\n        assertTrue(MyClass88.isPrime(5));\n        assertTrue(MyClass88.isPrime(7));\n        assertTrue(MyClass88.isPrime(11));\n        assertTrue(MyClass88.isPrime(13));\n        assertTrue(MyClass88.isPrime(17));\n        assertTrue(MyClass88.isPrime(19));\n        assertTrue(MyClass88.isPrime(23));\n        assertTrue(MyClass88.isPrime(29));\n        assertTrue(MyClass88.isPrime(31));\n        assertTrue(MyClass88.isPrime(37));\n        assertTrue(MyClass88.isPrime(41));\n        assertTrue(MyClass88.isPrime(43));\n        assertTrue(MyClass88.isPrime(47));\n        assertTrue(MyClass88.isPrime(53));\n        assertTrue(MyClass88.isPrime(59));\n        assertTrue(MyClass88.isPrime(61));\n        assertTrue(MyClass88.isPrime(67));\n        assertTrue(MyClass88.isPrime(71));\n        assertTrue(MyClass88.isPrime(73));\n        assertTrue(MyClass88.isPrime(79));\n        assertTrue(MyClass88.isPrime(83));\n        assertTrue(MyClass88.isPrime(89));\n        assertTrue(MyClass88.isPrime(97));\n        assertFalse(MyClass88.isPrime(1));\n        assertFalse(MyClass88.isPrime(4));\n        assertFalse(MyClass88.isPrime(6));\n        assertFalse(MyClass88.isPrime(8));\n        assertFalse(MyClass88.isPrime(9));\n        assertFalse(MyClass88.isPrime(10));\n        assertFalse(MyClass88.isPrime(12));\n        assertFalse(MyClass88.isPrime(14));\n        assertFalse(MyClass88.isPrime(15));\n        assertFalse(MyClass88.isPrime(16));\n        assertFalse(MyClass88.isPrime(18));\n        assertFalse(MyClass88.isPrime(20));\n        assertFalse(MyClass88.isPrime(21));\n        assertFalse(MyClass88.isPrime(22));\n        assertFalse(MyClass88.isPrime(24));\n        assertFalse(MyClass88.isPrime(25));\n        assertFalse(MyClass88.isPrime(26));\n        assertFalse(MyClass88.isPrime(27));\n        assertFalse(MyClass88.isPrime(28));\n        assertFalse(MyClass88.isPrime(30));\n    }\n}\n"}
{"code_source": "public class MyClass89 {\n    public static int length(String str) {\n        return str.length();\n    }\n\n\n}\n", "test_case": "import org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class MyClass89Test {\n\n    @Test\n    void testLength() {\n        assertEquals(0, MyClass89.length(\"\"));\n        assertEquals(5, MyClass89.length(\"Hello\"));\n        assertEquals(13, MyClass89.length(\"Hello, world!\"));\n    }\n\n}\n"}
{"code_source": "public class MyClass9 {\n    public static double triangleArea(double a, double b, double c) {\n        double s = (a + b + c) / 2.0;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass8Test {\n\n    @Test\n    public void testLongestIncreasingSubsequence() {\n        int[] array1 = {1, 2, 3, 4, 5};\n        assertEquals(5, MyClass8.longestIncreasingSubsequence(array1));\n\n        int[] array2 = {10, 9, 2, 5, 3, 7, 101, 18};\n        assertEquals(4, MyClass8.longestIncreasingSubsequence(array2));\n\n        int[] array3 = {4, 2, 7, 1, 3, 8, 6, 5};\n        assertEquals(4, MyClass8.longestIncreasingSubsequence(array3));\n\n        int[] array4 = {5, 8, 2, 7, 3, 6, 9, 1};\n        assertEquals(4, MyClass8.longestIncreasingSubsequence(array4));\n    }\n}\n"}
{"code_source": "public class MyClass90 {\n    public static boolean isPalindrome(String str) {\n        if (str == null) {\n            return false;\n        }\n        int left = 0, right = str.length() - 1;\n        while (left < right) {\n            if (str.charAt(left++) != str.charAt(right--)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String reverse(String str) {\n        if (str == null) {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder(str);\n        return sb.reverse().toString();\n    }\n\n    public static String truncate(String str, int maxLength) {\n        if (str == null || maxLength <= 0) {\n            return null;\n        }\n        if (str.length() > maxLength) {\n            return str.substring(0, maxLength);\n        }\n        return str;\n    }\n\n    public static boolean containsOnlyLetters(String str) {\n        if (str == null) {\n            return false;\n        }\n        return str.chars().allMatch(Character::isLetter);\n    }\n\n    public static boolean containsOnlyDigits(String str) {\n        if (str == null) {\n            return false;\n        }\n        return str.chars().allMatch(Character::isDigit);\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass90Test {\n\n    @Test\n    public void testIsPalindrome() {\n        assertTrue(MyClass90.isPalindrome(\"racecar\"));\n        assertTrue(MyClass90.isPalindrome(\"level\"));\n        assertFalse(MyClass90.isPalindrome(\"hello\"));\n        assertFalse(MyClass90.isPalindrome(null));\n    }\n\n    @Test\n    public void testReverse() {\n        assertEquals(\"cba\", MyClass90.reverse(\"abc\"));\n        assertEquals(\"fedcba\", MyClass90.reverse(\"abcdef\"));\n        assertNull(MyClass90.reverse(null));\n    }\n\n    @Test\n    public void testTruncate() {\n        assertEquals(\"hello\", MyClass90.truncate(\"hello\", 10));\n        assertEquals(\"hello\", MyClass90.truncate(\"hello world\", 5));\n        assertNull(MyClass90.truncate(null, 5));\n        assertNull(MyClass90.truncate(\"hello\", -1));\n    }\n\n    @Test\n    public void testContainsOnlyLetters() {\n        assertTrue(MyClass90.containsOnlyLetters(\"abcdefg\"));\n        assertFalse(MyClass90.containsOnlyLetters(\"hello world\"));\n        assertFalse(MyClass90.containsOnlyLetters(null));\n    }\n\n    @Test\n    public void testContainsOnlyDigits() {\n        assertTrue(MyClass90.containsOnlyDigits(\"12345\"));\n        assertFalse(MyClass90.containsOnlyDigits(\"12a3\"));\n        assertFalse(MyClass90.containsOnlyDigits(null));\n    }\n}\n"}
{"code_source": "public class MyClass91 {\n    public class Customer {\n\n        private String name;\n        private int age;\n        private String address;\n\n        public Customer(String name, int age, String address) {\n            this.name = name;\n            this.age = age;\n            this.address = address;\n        }\n\n        public String getName() {\n            return this.name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n\n        public int getAge() {\n            return this.age;\n        }\n\n        public void setAge(int age) {\n            this.age = age;\n        }\n\n        public String getAddress() {\n            return this.address;\n        }\n\n        public void setAddress(String address) {\n            this.address = address;\n        }\n\n        public void printInfo() {\n            System.out.println(\"Name: \" + this.name);\n            System.out.println(\"Age: \" + this.age);\n            System.out.println(\"Address: \" + this.address);\n        }\n\n        public boolean isAdult() {\n            return this.age >= 18;\n        }\n\n        public boolean hasValidAddress() {\n            return this.address != null && !this.address.isEmpty();\n        }\n    }\n\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass91Test {\n\n    @Test\n    public void testGetName() {\n        MyClass91.Customer customer = new MyClass91.Customer(\"John Smith\", 25, \"123 Main St.\");\n        assertEquals(\"John Smith\", customer.getName());\n    }\n\n    @Test\n    public void testSetName() {\n        MyClass91.Customer customer = new MyClass91.Customer(\"John Smith\", 25, \"123 Main St.\");\n        customer.setName(\"Jane Smith\");\n        assertEquals(\"Jane Smith\", customer.getName());\n    }\n\n    @Test\n    public void testGetAge() {\n        MyClass91.Customer customer = new MyClass91.Customer(\"John Smith\", 25, \"123 Main St.\");\n        assertEquals(25, customer.getAge());\n    }\n\n    @Test\n    public void testSetAge() {\n        MyClass91.Customer customer = new MyClass91.Customer(\"John Smith\", 25, \"123 Main St.\");\n        customer.setAge(30);\n        assertEquals(30, customer.getAge());\n    }\n\n    @Test\n    public void testGetAddress() {\n        MyClass91.Customer customer = new MyClass91.Customer(\"John Smith\", 25, \"123 Main St.\");\n        assertEquals(\"123 Main St.\", customer.getAddress());\n    }\n\n    @Test\n    public void testSetAddress() {\n        MyClass91.Customer customer = new MyClass91.Customer(\"John Smith\", 25, \"123 Main St.\");\n        customer.setAddress(\"456 Elm St.\");\n        assertEquals(\"456 Elm St.\", customer.getAddress());\n    }\n\n    @Test\n    public void testPrintInfo() {\n        MyClass91.Customer customer = new MyClass91.Customer(\"John Smith\", 25, \"123 Main St.\");\n        customer.printInfo();\n    }\n\n    @Test\n    public void testIsAdult() {\n        MyClass91.Customer adultCustomer = new MyClass91.Customer(\"John Smith\", 25, \"123 Main St.\");\n        MyClass91.Customer childCustomer = new MyClass91.Customer(\"Jane Smith\", 10, \"456 Elm St.\");\n        assertTrue(adultCustomer.isAdult());\n        assertFalse(childCustomer.isAdult());\n    }\n\n    @Test\n    public void testHasValidAddress() {\n        MyClass91.Customer customerWithAddress = new MyClass91.Customer(\"John Smith\", 25, \"123 Main St.\");\n        MyClass91.Customer customerWithoutAddress = new MyClass91.Customer(\"Jane Smith\", 30, null);\n        assertTrue(customerWithAddress.hasValidAddress());\n        assertFalse(customerWithoutAddress.hasValidAddress());\n    }\n}\n"}
{"code_source": "public class MyClass92 {\n    public int centerX() {return x + w / 2}\n    }\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass92Test {\n    @Test\n    public void testCenterX() {\n        MyClass92 obj = new MyClass92();\n        obj.x = 0;\n        obj.w = 10;\n        assertEquals(5, obj.centerX());\n\n        obj.x = 10;\n        obj.w = 20;\n        assertEquals(20, obj.centerX());\n\n        obj.x = -10;\n        obj.w = 30;\n        assertEquals(5, obj.centerX());\n    }\n}\n"}
{"code_source": "public class MyClass93 {\n    public int doLogic() {return 1;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass93Test {\n    @Test\n    public void testDoLogic() {\n        MyClass93 obj = new MyClass93();\n        assertEquals(1, obj.doLogic());\n    }\n}\n"}
{"code_source": "public class MyClass94 {\n    public boolean markSupported() {return false ;   }\n\n\n    }\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass94Test {\n    @Test\n    public void testMarkSupported() {\n        MyClass94 obj = new MyClass94();\n        assertFalse(obj.markSupported());\n    }\n}\n"}
{"code_source": "public class MyClass95 {\n\n}\n", "test_case": ""}
{"code_source": "public class MyClass96 {\n    public static int findSum(int[] arr) {\n        int sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n            sum += arr[i];\n        }\n        return sum;\n    }\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass96Test {\n    @Test\n    public void testFindSum() {\n        int[] arr = {1, 2, 3, 4, 5};\n        int expected = 15;\n        int actual = MyClass96.findSum(arr);\n        assertEquals(expected, actual);\n    }\n}\n"}
{"code_source": "public class MyClass97 {\n    public String toFormulaString() {return \"\";}\n\n}\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass97Test {\n    @Test\n    public void testToFormulaString() {\n        MyClass97 obj = new MyClass97();\n        assertEquals(\"\", obj.toFormulaString());\n    }\n}\n"}
{"code_source": "public class MyClass98 {\n\n\n        private String currentSong;\n        private int currentVolume;\n        private boolean isPlaying;\n\n        public MusicPlayer() {\n            currentSong = \"\";\n            currentVolume = 50;\n            isPlaying = false;\n        }\n\n        public String getCurrentSong() {\n            return currentSong;\n        }\n\n        public int getCurrentVolume() {\n            return currentVolume;\n        }\n\n        public boolean isPlaying() {\n            return isPlaying;\n        }\n\n        public void play() {\n            isPlaying = true;\n        }\n\n        public void pause() {\n            isPlaying = false;\n        }\n\n        public void setVolume(int volume) {\n            if (volume < 0 || volume > 100) {\n                throw new IllegalArgumentException(\"Volume must be between 0 and 100\");\n            }\n            currentVolume = volume;\n        }\n\n        public void playSong(String songTitle) {\n            currentSong = songTitle;\n            play();\n        }\n\n        public void stop() {\n            currentSong = \"\";\n            pause();\n        }\n\n        public void increaseVolume() {\n            if (currentVolume < 100) {\n                currentVolume++;\n            }\n        }\n\n        public void decreaseVolume() {\n            if (currentVolume > 0) {\n                currentVolume--;\n            }\n        }\n\n        public String toString() {\n            return \"Currently playing \" + currentSong + \", volume at \" + currentVolume + \", \" + (isPlaying ? \"playing\" : \"paused\");\n        }\n\n    }\n\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MusicPlayerTest {\n    @Test\n    public void testDefaultValues() {\n        MusicPlayer player = new MusicPlayer();\n        assertEquals(\"\", player.getCurrentSong());\n        assertEquals(50, player.getCurrentVolume());\n        assertFalse(player.isPlaying());\n    }\n\n    @Test\n    public void testPlaySong() {\n        MusicPlayer player = new MusicPlayer();\n        player.playSong(\"Song Title\");\n        assertEquals(\"Song Title\", player.getCurrentSong());\n        assertTrue(player.isPlaying());\n    }\n\n    @Test\n    public void testStop() {\n        MusicPlayer player = new MusicPlayer();\n        player.playSong(\"Song Title\");\n        player.stop();\n        assertEquals(\"\", player.getCurrentSong());\n        assertFalse(player.isPlaying());\n    }\n\n    @Test\n    public void testSetVolume() {\n        MusicPlayer player = new MusicPlayer();\n        player.setVolume(75);\n        assertEquals(75, player.getCurrentVolume());\n        try {\n            player.setVolume(-1);\n            fail(\"Expected IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            // Expected exception, do nothing\n        }\n        try {\n            player.setVolume(101);\n            fail(\"Expected IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            // Expected exception, do nothing\n        }\n    }\n\n    @Test\n    public void testIncreaseVolume() {\n        MusicPlayer player = new MusicPlayer();\n        player.increaseVolume();\n        assertEquals(51, player.getCurrentVolume());\n        for (int i = 0; i < 50; i++) {\n            player.increaseVolume();\n        }\n        assertEquals(100, player.getCurrentVolume());\n        player.increaseVolume();\n        assertEquals(100, player.getCurrentVolume());\n    }\n\n    @Test\n    public void testDecreaseVolume() {\n        MusicPlayer player = new MusicPlayer();\n        player.decreaseVolume();\n        assertEquals(49, player.getCurrentVolume());\n        for (int i = 0; i < 50; i++) {\n            player.decreaseVolume();\n        }\n        assertEquals(0, player.getCurrentVolume());\n        player.decreaseVolume();\n        assertEquals(0, player.getCurrentVolume());\n    }\n\n    @Test\n    public void testToString() {\n        MusicPlayer player = new MusicPlayer();\n        player.playSong(\"Song Title\");\n        player.setVolume(75);\n        assertEquals(\"Currently playing Song Title, volume at 75, playing\", player.toString());\n        player.pause();\n        assertEquals(\"Currently playing Song Title, volume at 75, paused\", player.toString());\n    }\n}\n"}
{"code_source": "public class MyClass99 {\n\n\n        private double width;\n        private double height;\n\n        public Rectangle(double width, double height) {\n            this.width = width;\n            this.height = height;\n        }\n\n        public double getWidth() {\n            return width;\n        }\n\n        public double getHeight() {\n            return height;\n        }\n\n        public void setWidth(double width) {\n            this.width = width;\n        }\n\n        public void setHeight(double height) {\n            this.height = height;\n        }\n\n        public double getArea() {\n            return width * height;\n        }\n\n        public double getPerimeter() {\n            return 2 * (width + height);\n        }\n\n        public boolean isSquare() {\n            return width == height;\n        }\n\n        public String toString() {\n            return \"Rectangle with width \" + width + \" and height \" + height;\n        }\n\n    }\n", "test_case": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyClass99Test {\n\n    @Test\n    public void testGettersAndSetters() {\n        Rectangle r = new Rectangle(4.0, 5.0);\n        assertEquals(4.0, r.getWidth(), 0.0001);\n        assertEquals(5.0, r.getHeight(), 0.0001);\n\n        r.setWidth(3.0);\n        r.setHeight(6.0);\n        assertEquals(3.0, r.getWidth(), 0.0001);\n        assertEquals(6.0, r.getHeight(), 0.0001);\n    }\n\n    @Test\n    public void testGetArea() {\n        Rectangle r = new Rectangle(4.0, 5.0);\n        assertEquals(20.0, r.getArea(), 0.0001);\n        r.setWidth(3.0);\n        r.setHeight(6.0);\n        assertEquals(18.0, r.getArea(), 0.0001);\n    }\n\n    @Test\n    public void testGetPerimeter() {\n        Rectangle r = new Rectangle(4.0, 5.0);\n        assertEquals(18.0, r.getPerimeter(), 0.0001);\n        r.setWidth(3.0);\n        r.setHeight(6.0);\n        assertEquals(18.0, r.getPerimeter(), 0.0001);\n    }\n\n    @Test\n    public void testIsSquare() {\n        Rectangle r = new Rectangle(4.0, 5.0);\n        assertFalse(r.isSquare());\n        r.setWidth(4.0);\n        r.setHeight(4.0);\n        assertTrue(r.isSquare());\n    }\n\n    @Test\n    public void testToString() {\n        Rectangle r = new Rectangle(4.0, 5.0);\n        assertEquals(\"Rectangle with width 4.0 and height 5.0\", r.toString());\n        r.setWidth(3.0);\n        r.setHeight(6.0);\n        assertEquals(\"Rectangle with width 3.0 and height 6.0\", r.toString());\n    }\n}\n"}
{"code_source": "public class Add {public int addnumber(int a ,int  b){return a+b;}}", "test_case": "class AddTest{ @Test public void testAddition() { assertEquals(5, Add.addNumbers(2, 3)); assertEquals(10, Add.addNumbers(5, 5)); assertEquals(-2, Add.addNumbers(-5, 3)); assertEquals(0, Add.addNumbers(0, 0)); assertEquals(8, Add.addNumbers(5, 3)); assertEquals(-902, Add.addNumbers(122, -1024)); } }"}
{"code_source": "public class Multiply { public int multiplynumbers(int a,int b){ return a*b; } }", "test_case": "import static org.junit.jupiter.api.Assertions.*; public class MultiplyTest { @Test public void testMultiply() { int result = MyClass87.multiply(5, 7); int result1 = MyClass87.multiply(5, 2); int result2 = MyClass87.multiply(0, 7); int result3 = MyClass87.multiply(40, 7); Assertions.assertEquals(35, result); Assertions.assertEquals(10, result1); Assertions.assertEquals(0, result2); Assertions.assertEquals(280, result3); } }}"}
{"code_source": "public class Divide { public static double dividenumber(double a, double b) { if (b == 0) { throw new IllegalArgumentException('Cannot divide by zero'); } return a / b; } }", "test_case": "import static org.junit.jupiter.api.Assertions.*; public class DivideTest { @Test public void testDivide() { assertEquals(2.5, MyClass87.divideNumbers(5.0, 2.0), 0.001); assertEquals(0.0, MyClass87.divideNumbers(0.0, 5.0), 0.001); assertEquals(0.0, Division.divideNumbers(0.0, 5.0), 0.001); assertEquals(-2.5, Division.divideNumbers(-5.0, 2.0), 0.001); assertEquals(-1.0, Division.divideNumbers(5.0, -5.0), 0.001); assertEquals(1.0, Division.divideNumbers(-5.0, -5.0), 0.001); assertThrows(IllegalArgumentException.class, () -> { Division.divide(10.0, 0.0); }); } } return a / b; } }"}
{"code_source": "package org.example;\n\n\n\npublic class Addition {\n    public static int add(int a, int b) {\n        while (b != 0) {\n            int carry = a & b;\n            a = a ^ b;\n            b = carry << 1;\n        }\n        return a;\n    }\n}\n", "test_case": "package org.example;\n\nimport org.junit.jupiter.api.Assertions;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass AdditionTest {\n\n    @org.junit.jupiter.api.Test\n    void add() {\n        int result1 = Addition.add(5, 3);\n        Assertions.assertEquals(8, result1);\n\n        // Test case 2: Negative numbers\n        int result2 = Addition.add(-7, -2);\n        Assertions.assertEquals(-9, result2);\n\n        // Test case 3: Positive and negative numbers\n        int result3 = Addition.add(10, -4);\n        Assertions.assertEquals(6, result3);\n\n        // Test case 4: Zero\n        int result4 = Addition.add(0, 0);\n        Assertions.assertEquals(0, result4);\n    }\n}"}
{"code_source": "package org.example;\n\npublic class AMethods {\n\n        public static void printFibonacciSequence(int terms) {\n            int firstTerm = 0;\n            int secondTerm = 1;\n\n            System.out.print(\"Fibonacci Sequence (\" + terms + \" terms): \");\n\n            for (int i = 0; i < terms; i++) {\n                System.out.print(firstTerm + \" \");\n\n                int nextTerm = firstTerm + secondTerm;\n                firstTerm = secondTerm;\n                secondTerm = nextTerm;\n            }\n\n            System.out.println();\n        }\n\n    }\n\n\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class AMethodsTest {\n\n    @Test\n    public void testPrintFibonacciSequence() {\n        // Set up the output stream to capture the printed output\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outputStream));\n\n        // Call the method with a specific number of terms\n        AMethods.printFibonacciSequence(7);\n\n        // Get the printed output\n        String printedOutput = outputStream.toString().trim();\n\n        // Verify the expected output\n        String expectedOutput = \"Fibonacci Sequence (7 terms): 0 1 1 2 3 5 8\";\n        Assertions.assertEquals(expectedOutput, printedOutput);\n    }\n}\n"}
{"code_source": "package org.example;\n\nimport java.util.Arrays;\n\npublic class AnagramChecker {\n    public static boolean isAnagram(String str1, String str2) {\n        if (str1 == null || str2 == null || str1.length() != str2.length()) {\n            return false;\n        }\n\n        char[] charArray1 = str1.toLowerCase().toCharArray();\n        char[] charArray2 = str2.toLowerCase().toCharArray();\n\n        Arrays.sort(charArray1);\n        Arrays.sort(charArray2);\n\n        return Arrays.equals(charArray1, charArray2);\n    }}\n", "test_case": "package org.example;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class AnagramCheckerTest {\n\n    @Test\n    public void testIsAnagram() {\n        // Test case 1: Anagram strings\n        String str1 = \"listen\";\n        String str2 = \"silent\";\n        assertTrue(AnagramChecker.isAnagram(str1, str2));\n\n        // Test case 2: Non-anagram strings\n        str1 = \"hello\";\n        str2 = \"world\";\n        assertFalse(AnagramChecker.isAnagram(str1, str2));\n\n        // Test case 3: Anagram strings with different case\n        str1 = \"Debit card\";\n        str2 = \"Bad credit\";\n        assertTrue(AnagramChecker.isAnagram(str1, str2));\n\n        // Test case 4: Anagram strings with whitespace\n        str1 = \"rail safety\";\n        str2 = \"fairy tales\";\n        assertTrue(AnagramChecker.isAnagram(str1, str2));\n\n        // Test case 5: Anagram strings with special characters\n        str1 = \"rail!@#$%^&*()_+safety\";\n        str2 = \"fairy!@#$%^&*()_+tales\";\n        assertTrue(AnagramChecker.isAnagram(str1, str2));\n\n        // Test case 6: Strings of different lengths\n        str1 = \"abc\";\n        str2 = \"abcd\";\n        assertFalse(AnagramChecker.isAnagram(str1, str2));\n\n        // Test case 7: Null strings\n        str1 = null;\n        str2 = \"test\";\n        assertFalse(AnagramChecker.isAnagram(str1, str2));\n\n        str1 = \"test\";\n        str2 = null;\n        assertFalse(AnagramChecker.isAnagram(str1, str2));\n\n        str1 = null;\n        str2 = null;\n        assertFalse(AnagramChecker.isAnagram(str1, str2));\n    }\n}\n"}
{"code_source": "package org.example;\n\npublic class Arithmetic{\n\n    private static String arithmeticResult(char[] codes){\n        char operator = codes[1];\n        int num_1 = analysisChar(codes[0]);\n        int num_2 = analysisChar(codes[2]);\n        if(operator=='+' || operator == '\\u52a0'){\n            return String.valueOf((num_1+num_2));\n        }else if(operator == '-' || operator == '\\u51cf'){\n            return String.valueOf((num_1 - num_2));\n        }else if(operator == '*' || operator == 'x' || operator == 'X' || operator == '\\u4e58'){\n            return String.valueOf((num_1*num_2));\n        }else{\n            return \"0\";\n        }\n    }\n\n}\n", "test_case": "import org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class ArithmeticTest {\n\n    @Test\n    public void testArithmeticResult_addition() {\n        char[] codes = {'5', '+', '3'};\n        String expectedResult = \"8\";\n\n        String actualResult = Arithmetic.arithmeticResult(codes);\n\n        assertEquals(expectedResult, actualResult);\n    }\n\n    @Test\n    public void testArithmeticResult_subtraction() {\n        char[] codes = {'9', '-', '4'};\n        String expectedResult = \"5\";\n\n        String actualResult = Arithmetic.arithmeticResult(codes);\n\n        assertEquals(expectedResult, actualResult);\n    }\n\n    @Test\n    public void testArithmeticResult_multiplication() {\n        char[] codes = {'6', '*', '2'};\n        String expectedResult = \"12\";\n\n        String actualResult = Arithmetic.arithmeticResult(codes);\n\n        assertEquals(expectedResult, actualResult);\n    }\n\n    @Test\n    public void testArithmeticResult_invalidOperator() {\n        char[] codes = {'2', '/', '3'};\n        String expectedResult = \"0\";\n\n        String actualResult = Arithmetic.arithmeticResult(codes);\n\n        assertEquals(expectedResult, actualResult);\n    }\n}\n"}
{"code_source": "package org.example;\nimport java.lang.Math;\npublic class ArithM {\n\n\n        public static boolean isArmstrongNumber(int number) {\n            int originalNumber = number;\n            int sum = 0;\n\n            while (number > 0) {\n                int digit = number % 10;\n                sum += Math.pow(digit, 3);\n                number /= 10;\n            }\n\n            return sum == originalNumber;\n        }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nclass ArithMTest {\n\n\n\n\n        @Test\n        public void testIsArmstrongNumber() {\n            // Test case 1: Armstrong number (153)\n            boolean result1 = ArithM.isArmstrongNumber(153);\n            Assertions.assertTrue(result1);\n\n            // Test case 2: Non-Armstrong number (123)\n            boolean result2 = ArithM.isArmstrongNumber(123);\n            Assertions.assertFalse(result2);\n\n            // Test case 3: Single-digit Armstrong number (0)\n            boolean result3 = ArithM.isArmstrongNumber(0);\n            Assertions.assertTrue(result3);\n\n            // Test case 4: Large Armstrong number (9474)\n            boolean result4 = ArithM.isArmstrongNumber(9474);\n            Assertions.assertTrue(result4);\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\n\npublic class Arithmetic {\n        public static int sumArray(int[] numbers) {\n            int sum = 0;\n            for (int num : numbers) {\n                sum += num;\n            }\n            return sum;\n        }\n\n        public static int multiplyArray(int[] numbers) {\n            int product = 1;\n            for (int num : numbers) {\n                product *= num;\n            }\n            return product;\n        }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nclass ArithmeticTest {\n\n        @Test\n        public void testSumArray() {\n            int[] numbers1 = {1, 2, 3, 4, 5};\n            int result1 = Arithmetic.sumArray(numbers1);\n            Assertions.assertEquals(15, result1);\n\n            int[] numbers2 = {-1, -2, -3, -4, -5};\n            int result2 = Arithmetic.sumArray(numbers2);\n            Assertions.assertEquals(-15, result2);\n\n            int[] numbers3 = {0, 0, 0, 0, 0};\n            int result3 = Arithmetic.sumArray(numbers3);\n            Assertions.assertEquals(0, result3);\n        }\n\n        @Test\n        public void testMultiplyArray() {\n            int[] numbers1 = {1, 2, 3, 4, 5};\n            int result1 = Arithmetic.multiplyArray(numbers1);\n            Assertions.assertEquals(120, result1);\n\n            int[] numbers2 = {-1, -2, -3, -4, -5};\n            int result2 = Arithmetic.multiplyArray(numbers2);\n            Assertions.assertEquals(-120, result2);\n\n            int[] numbers3 = {1, 2, 0, 4, 5};\n            int result3 = Arithmetic.multiplyArray(numbers3);\n            Assertions.assertEquals(0, result3);\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\n\npublic class Arithmetic1 {\n\n        public static int findMax(int[] numbers) {\n            if (numbers == null || numbers.length == 0) {\n                throw new IllegalArgumentException(\"The array is empty or null.\");\n            }\n\n            int max = numbers[0];\n            for (int i = 1; i < numbers.length; i++) {\n                if (numbers[i] > max) {\n                    max = numbers[i];\n                }\n            }\n\n            return max;\n        }\n}\n", "test_case": "package org.example;\n\nimport org.junit.Test;\nimport org.junit.jupiter.api.Assertions;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Arithmetic1Test {\n\n        @Test\n        public void testFindMax() {\n            // Test case 1: Positive numbers\n            int[] numbers1 = {2, 5, 8, 1, 4};\n            int result1 = Arithmetic1.findMax(numbers1);\n            Assertions.assertEquals(8, result1);\n\n            // Test case 2: Negative numbers\n            int[] numbers2 = {-9, -5, -2, -7};\n            int result2 = Arithmetic1.findMax(numbers2);\n            Assertions.assertEquals(-2, result2);\n\n            // Test case 3: Single element array\n            int[] numbers3 = {10};\n            int result3 = Arithmetic1.findMax(numbers3);\n            Assertions.assertEquals(10, result3);\n\n            // Test case 4: Empty array\n            int[] numbers4 = {};\n            Assertions.assertThrows(IllegalArgumentException.class, () -> {\n                Arithmetic1.findMax(numbers4);\n            });\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\n\npublic class ArithmT {\n\n\n        public static double calculatePower(double base, int exponent) {\n            if (exponent == 0) {\n                return 1;\n            }\n            if (exponent < 0) {\n                return 1 / calculatePower(base, -exponent);\n            }\n            return base * calculatePower(base, exponent - 1);\n        }\n}\n", "test_case": "package org.example;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ArithmTTest {\n\n        @Test\n        public void testCalculatePower() {\n            // Test case 1: Positive base and exponent\n            double result1 = ArithmT.calculatePower(2.0, 3);\n            Assertions.assertEquals(8.0, result1);\n\n            // Test case 2: Negative base and positive exponent\n            double result2 = ArithmT.calculatePower(-2.0, 4);\n            Assertions.assertEquals(16.0, result2);\n\n            // Test case 3: Base raised to the power of 0\n            double result3 = ArithmT.calculatePower(5.0, 0);\n            Assertions.assertEquals(1.0, result3);\n\n            // Test case 4: Base raised to a negative exponent\n            double result4 = ArithmT.calculatePower(3.0, -2);\n            Assertions.assertEquals(1.0 / 9.0, result4);\n\n            // Test case 5: Base raised to the power of 1\n            double result5 = ArithmT.calculatePower(10.0, 1);\n            Assertions.assertEquals(10.0, result5);\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\n\nimport java.math.BigDecimal;\n\npublic class BigDecimalArithmetic {\n    public static BigDecimal add(BigDecimal a, BigDecimal b) {\n        return a.add(b);\n    }\n\n    public static BigDecimal subtract(BigDecimal a, BigDecimal b) {\n        return a.subtract(b);\n    }\n\n    public static BigDecimal multiply(BigDecimal a, BigDecimal b) {\n        return a.multiply(b);\n    }\n\n    public static BigDecimal divide(BigDecimal a, BigDecimal b) {\n        if (b.equals(BigDecimal.ZERO)) {\n            throw new ArithmeticException(\"Cannot divide by zero\");\n        }\n        return a.divide(b);\n    }}", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.math.BigDecimal;\n\n    public class BigDecimalArithmeticTest {\n\n        @Test\n        public void testAdd() {\n            BigDecimal a = new BigDecimal(\"5.25\");\n            BigDecimal b = new BigDecimal(\"3.75\");\n            BigDecimal result = BigDecimalArithmetic.add(a, b);\n            BigDecimal expected = new BigDecimal(\"9.00\");\n            Assertions.assertEquals(expected, result);\n        }\n\n        @Test\n        public void testSubtract() {\n            BigDecimal a = new BigDecimal(\"8.00\");\n            BigDecimal b = new BigDecimal(\"3.25\");\n            BigDecimal result = BigDecimalArithmetic.subtract(a, b);\n            BigDecimal expected = new BigDecimal(\"4.75\");\n            Assertions.assertEquals(expected, result);\n        }\n\n        @Test\n        public void testMultiply() {\n            BigDecimal a = new BigDecimal(\"2.50\");\n            BigDecimal b = new BigDecimal(\"3.20\");\n            BigDecimal result = BigDecimalArithmetic.multiply(a, b);\n            BigDecimal expected = new BigDecimal(\"8.00\");\n            Assertions.assertEquals(expected, result);\n        }\n\n        @Test\n        public void testDivide() {\n            BigDecimal a = new BigDecimal(\"10.00\");\n            BigDecimal b = new BigDecimal(\"2.50\");\n            BigDecimal result = BigDecimalArithmetic.divide(a, b);\n            BigDecimal expected = new BigDecimal(\"4.00\");\n            Assertions.assertEquals(expected, result);\n        }\n\n        @Test\n        public void testDivideByZero() {\n            BigDecimal a = new BigDecimal(\"5.00\");\n            BigDecimal b = BigDecimal.ZERO;\n            Assertions.assertThrows(ArithmeticException.class, () -> {\n                BigDecimalArithmetic.divide(a, b);\n            });\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\n\nimport java.math.BigInteger;\n\npublic class BigIntegerArithmetic {\n    public static BigInteger add(BigInteger a, BigInteger b) {\n        return a.add(b);\n    }\n\n    public static BigInteger subtract(BigInteger a, BigInteger b) {\n        return a.subtract(b);\n    }\n\n    public static BigInteger multiply(BigInteger a, BigInteger b) {\n        return a.multiply(b);\n    }\n\n    public static BigInteger divide(BigInteger a, BigInteger b) {\n        if (b.equals(BigInteger.ZERO)) {\n            throw new ArithmeticException(\"Cannot divide by zero\");\n        }\n        return a.divide(b);\n    }}\n", "test_case": "package org.example;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.math.BigInteger;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass BigIntegerArithmeticTest {\n\n        @Test\n        public void testAdd() {\n            BigInteger a = new BigInteger(\"12345678901234567890\");\n            BigInteger b = new BigInteger(\"98765432109876543210\");\n            BigInteger result = BigIntegerArithmetic.add(a, b);\n            BigInteger expected = new BigInteger(\"111111111011111111100\");\n            Assertions.assertEquals(expected, result);\n        }\n\n        @Test\n        public void testSubtract() {\n            BigInteger a = new BigInteger(\"98765432109876543210\");\n            BigInteger b = new BigInteger(\"12345678901234567890\");\n            BigInteger result = BigIntegerArithmetic.subtract(a, b);\n            BigInteger expected = new BigInteger(\"86419753208641975320\");\n            Assertions.assertEquals(expected, result);\n        }\n\n        @Test\n        public void testMultiply() {\n            BigInteger a = new BigInteger(\"123456789\");\n            BigInteger b = new BigInteger(\"987654321\");\n            BigInteger result = BigIntegerArithmetic.multiply(a, b);\n            BigInteger expected = new BigInteger(\"121932631137655520769\");\n            Assertions.assertEquals(expected, result);\n        }\n\n        @Test\n        public void testDivide() {\n            BigInteger a = new BigInteger(\"1000000000000000000000\");\n            BigInteger b = new BigInteger(\"1000000000\");\n            BigInteger result = BigIntegerArithmetic.divide(a, b);\n            BigInteger expected = new BigInteger(\"1000000000000000\");\n            Assertions.assertEquals(expected, result);\n        }\n\n        @Test\n        public void testDivideByZero() {\n            BigInteger a = new BigInteger(\"12345678901234567890\");\n            BigInteger b = BigInteger.ZERO;\n            Assertions.assertThrows(ArithmeticException.class, () -> {\n                BigIntegerArithmetic.divide(a, b);\n            });\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\nimport java.lang.Math;\npublic class BitwiseArithmetic {\n    public static int add(int a, int b) {\n        while (b != 0) {\n            int carry = a & b;\n            a = a ^ b;\n            b = carry << 1;\n        }\n        return a;\n    }\n\n    public static int subtract(int a, int b) {\n        while (b != 0) {\n            int borrow = (~a) & b;\n            a = a ^ b;\n            b = borrow << 1;\n        }\n        return a;\n    }\n\n    public static int multiply(int a, int b) {\n        int result = 0;\n        while (b != 0) {\n            if ((b & 1) != 0) {\n                result = add(result, a);\n            }\n            a <<= 1;\n            b >>= 1;\n        }\n        return result;\n    }\n\n    public static int divide(int a, int b) {\n        if (b == 0) {\n            throw new ArithmeticException(\"Cannot divide by zero\");\n        }\n        int dividend = a;\n        int divisor = b;\n        boolean isNegative = (dividend < 0) ^ (divisor < 0);\n        dividend = Math.abs(dividend);\n        divisor = Math.abs(divisor);\n        int quotient = 0;\n        while (dividend >= divisor) {\n            dividend = subtract(dividend, divisor);\n            quotient = add(quotient, 1);\n        }\n        return isNegative ? negate(quotient) : quotient;\n    }\n\n    public static int negate(int num) {\n        return add(~num, 1);\n    }}\n", "test_case": "package org.example;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass BitwiseArithmeticTest {\n\n        @Test\n        public void testAdd() {\n            int a = 5;\n            int b = 3;\n            int result = BitwiseArithmetic.add(a, b);\n            Assertions.assertEquals(8, result);\n        }\n\n        @Test\n        public void testSubtract() {\n            int a = 7;\n            int b = 3;\n            int result = BitwiseArithmetic.subtract(a, b);\n            Assertions.assertEquals(4, result);\n        }\n\n        @Test\n        public void testMultiply() {\n            int a = 6;\n            int b = 4;\n            int result = BitwiseArithmetic.multiply(a, b);\n            Assertions.assertEquals(24, result);\n        }\n\n        @Test\n        public void testDivide() {\n            int a = 20;\n            int b = 4;\n            int result = BitwiseArithmetic.divide(a, b);\n            Assertions.assertEquals(5, result);\n        }\n\n        @Test\n        public void testDivideByZero() {\n            int a = 10;\n            int b = 0;\n            Assertions.assertThrows(ArithmeticException.class, () -> {\n                BitwiseArithmetic.divide(a, b);\n            });\n        }\n\n        @Test\n        public void testNegate() {\n            int num = 5;\n            int result = BitwiseArithmetic.negate(num);\n            Assertions.assertEquals(-5, result);\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\n\npublic class Calcu {\n    public static int calculateGCD(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return calculateGCD(b, a % b);\n    }\n}\n", "test_case": "package org.example;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass CalcuTest {\n\n        @Test\n        public void testCalculateGCD() {\n            int a = 12;\n            int b = 18;\n            int result = Calcu.calculateGCD(a, b);\n            Assertions.assertEquals(6, result);\n        }\n\n        @Test\n        public void testCalculateGCDWithZero() {\n            int a = 20;\n            int b = 0;\n            int result = Calcu.calculateGCD(a, b);\n            Assertions.assertEquals(20, result);\n        }\n\n        @Test\n        public void testCalculateGCDWithNegativeNumbers() {\n            int a = -12;\n            int b = -18;\n            int result = Calcu.calculateGCD(a, b);\n            Assertions.assertEquals(6, result);\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\n\npublic class calculateAverage {\n\n        public static double calculateAverage(int[] numbers) {\n            int sum = 0;\n            for (int number : numbers) {\n                sum += number;\n            }\n            return (double) sum / numbers.length;\n        }\n    }\n\n\n", "test_case": "package org.example;\n\nimport org.junit.Test;\nimport org.junit.jupiter.api.Assertions;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass calculateAverageTest {\n    @Test\n    public void testCalculateAverage() {\n        int[] numbers = {1, 2, 3, 4, 5};\n\n        double result = calculateAverage .calculateAverage(numbers);\n        Assertions.assertEquals(3.0, result);\n    }\n\n    @Test\n    public void testCalculateAverageWithEmptyArray() {\n        int[] numbers = {};\n        double result =  calculateAverage .calculateAverage(numbers);\n        Assertions.assertEquals(0.0, result);\n    }\n\n    @Test\n    public void testCalculateAverageWithNegativeNumbers() {\n        int[] numbers = {-1, -2, -3, -4, -5};\n        double result =  calculateAverage .calculateAverage(numbers);\n        Assertions.assertEquals(-3.0, result);\n    }\n}"}
{"code_source": "package org.example;\n\npublic class Car {\n\n        private int width;\n        private int height;\n\n        public Car(int width, int height) {\n            this.width = width;\n            this.height = height;\n        }\n\n        public int getArea() {\n            return width * height;\n        }\n    }\n\n\n\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class CarTest {\n\n    @Test\n    public void testGetArea() {\n        // Test case 1: Positive width and height\n        Car car1 = new Car(5, 4);\n        int area1 = car1.getArea();\n        assertEquals(20, area1);\n\n        // Test case 2: Zero width and height\n        Car car2 = new Car(0, 0);\n        int area2 = car2.getArea();\n        assertEquals(0, area2);\n\n        // Test case 3: Negative width and height\n        Car car3 = new Car(-3, -2);\n        int area3 = car3.getArea();\n        assertEquals(6, area3);\n\n        // Test case 4: Width and height with different values\n        Car car4 = new Car(6, 3);\n        int area4 = car4.getArea();\n        assertEquals(18, area4);\n\n        // Test case 5: Large width and height\n        Car car5 = new Car(1000, 1000);\n        int area5 = car5.getArea();\n        assertEquals(1000000, area5);\n    }\n}\n"}
{"code_source": "package org.example;\nimport java.lang.Math;\npublic class ComplexArithmetic {\n\n\n        public static class ComplexNumber {\n            private double real;\n            private double imaginary;\n\n            public ComplexNumber(double real, double imaginary) {\n                this.real = real;\n                this.imaginary = imaginary;\n            }\n\n            public double getReal() {\n                return real;\n            }\n\n            public double getImaginary() {\n                return imaginary;\n            }\n\n\n\n            public ComplexNumber add(ComplexNumber other) {\n                double sumReal = this.real + other.real;\n                double sumImaginary = this.imaginary + other.imaginary;\n                return new ComplexNumber(sumReal, sumImaginary);\n            }\n\n            public ComplexNumber subtract(ComplexNumber other) {\n                double diffReal = this.real - other.real;\n                double diffImaginary = this.imaginary - other.imaginary;\n                return new ComplexNumber(diffReal, diffImaginary);\n            }\n\n            public ComplexNumber multiply(ComplexNumber other) {\n                double productReal = (this.real * other.real) - (this.imaginary * other.imaginary);\n                double productImaginary = (this.real * other.imaginary) + (this.imaginary * other.real);\n                return new ComplexNumber(productReal, productImaginary);\n            }\n\n            public ComplexNumber divide(ComplexNumber other) {\n                double denominator = Math.pow(other.real, 2) + Math.pow(other.imaginary, 2);\n                double quotientReal = ((this.real * other.real) + (this.imaginary * other.imaginary)) / denominator;\n                double quotientImaginary = ((this.imaginary * other.real) - (this.real * other.imaginary)) / denominator;\n                return new ComplexNumber(quotientReal, quotientImaginary);\n            }\n        }\n\n\n    }\n\n\n", "test_case": "package org.example;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ComplexArithmeticTest {\n\n\n\n\n        @Test\n        public void testAdd() {\n            ComplexArithmetic.ComplexNumber complex1 = new ComplexArithmetic.ComplexNumber(3.0, 2.0);\n            ComplexArithmetic.ComplexNumber complex2 = new ComplexArithmetic.ComplexNumber(1.0, 5.0);\n            ComplexArithmetic.ComplexNumber result = complex1.add(complex2);\n            Assertions.assertEquals(4.0, result.getReal());\n            Assertions.assertEquals(7.0, result.getImaginary());\n        }\n\n        @Test\n        public void testSubtract() {\n            ComplexArithmetic.ComplexNumber complex1 = new ComplexArithmetic.ComplexNumber(3.0, 2.0);\n            ComplexArithmetic.ComplexNumber complex2 = new ComplexArithmetic.ComplexNumber(1.0, 5.0);\n            ComplexArithmetic.ComplexNumber result = complex1.subtract(complex2);\n            Assertions.assertEquals(2.0, result.getReal());\n            Assertions.assertEquals(-3.0, result.getImaginary());\n        }\n\n        @Test\n        public void testMultiply() {\n            ComplexArithmetic.ComplexNumber complex1 = new ComplexArithmetic.ComplexNumber(3.0, 2.0);\n            ComplexArithmetic.ComplexNumber complex2 = new ComplexArithmetic.ComplexNumber(1.0, 5.0);\n            ComplexArithmetic.ComplexNumber result = complex1.multiply(complex2);\n            Assertions.assertEquals(-7.0, result.getReal());\n            Assertions.assertEquals(17.0, result.getImaginary());\n        }\n\n        @Test\n        public void testDivide() {\n            ComplexArithmetic.ComplexNumber complex1 = new ComplexArithmetic.ComplexNumber(3.0, 2.0);\n            ComplexArithmetic.ComplexNumber complex2 = new ComplexArithmetic.ComplexNumber(1.0, 5.0);\n            ComplexArithmetic.ComplexNumber result = complex1.divide(complex2);\n            Assertions.assertEquals(0.548, result.getReal(), 0.001);\n            Assertions.assertEquals(-0.226, result.getImaginary(), 0.001);\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\n\nimport java.math.BigInteger;\n\npublic class Dd {\n    public static BigInteger divide(BigInteger a, BigInteger b) {\n        if (b.equals(BigInteger.ZERO)) {\n            throw new ArithmeticException(\"Cannot divide by zero\");\n        } else if (a.compareTo(b) < 0) {\n            return BigInteger.ZERO;\n        } else {\n            return BigInteger.ONE.add(divide(a.subtract(b), b));\n        }\n    }\n}\n", "test_case": "package org.example;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.math.BigInteger;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass DdTest {\n\n        @Test\n        public void testDivide() {\n            BigInteger a = new BigInteger(\"10\");\n            BigInteger b = new BigInteger(\"2\");\n            BigInteger result = Dd.divide(a, b);\n            Assertions.assertEquals(new BigInteger(\"5\"), result);\n        }\n\n        @Test\n        public void testDivideWithZeroDivisor() {\n            BigInteger a = new BigInteger(\"10\");\n            BigInteger b = BigInteger.ZERO;\n            Assertions.assertThrows(ArithmeticException.class, () -> {\n                Dd.divide(a, b);\n            });\n        }\n\n        @Test\n        public void testDivideWithZeroDividend() {\n            BigInteger a = BigInteger.ZERO;\n            BigInteger b = new BigInteger(\"5\");\n            BigInteger result = Dd.divide(a, b);\n            Assertions.assertEquals(BigInteger.ZERO, result);\n        }\n\n        @Test\n        public void testDivideWithLargeNumbers() {\n            BigInteger a = new BigInteger(\"12345678901234567890\");\n            BigInteger b = new BigInteger(\"9876543210\");\n            BigInteger result = Dd.divide(a, b);\n            Assertions.assertEquals(new BigInteger(\"1250000000\"), result);\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\n\npublic class DigitNumb {\n\n        public static int calculateDigitSum(int number) {\n            int sum = 0;\n\n            while (number != 0) {\n                int digit = number % 10;\n                sum += digit;\n                number /= 10;\n            }\n\n            return sum;\n        }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class DigitNumbTest {\n\n    @Test\n    public void testCalculateDigitSum() {\n        // Test case 1: Positive number\n        int sum1 = DigitNumb.calculateDigitSum(12345);\n        assertEquals(15, sum1);\n\n        // Test case 2: Negative number\n        int sum2 = DigitNumb.calculateDigitSum(-9876);\n        assertEquals(30, sum2);\n\n        // Test case 3: Zero\n        int sum3 = DigitNumb.calculateDigitSum(0);\n        assertEquals(0, sum3);\n\n        // Test case 4: Single-digit number\n        int sum4 = DigitNumb.calculateDigitSum(9);\n        assertEquals(9, sum4);\n\n        // Test case 5: Large number\n        int sum5 = DigitNumb.calculateDigitSum(1234567890);\n        assertEquals(45, sum5);\n    }\n}\n"}
{"code_source": "package org.example;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Divido {\n    static Map<String, Integer> memo = new HashMap<>();\n    public static int divide(int a, int b) {\n        String key = a + \"/\" + b;\n        if (memo.containsKey(key)) {\n            return memo.get(key);\n        }\n\n        if (b == 0) {\n            throw new ArithmeticException(\"Cannot divide by zero\");\n        }\n\n        int result = a / b;\n        memo.put(key, result);\n        return result;\n    }\n\n}\n", "test_case": "package org.example;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass DividoTest {\n\n\n\n\n        @Test\n        public void testDivide() {\n            int a = 10;\n            int b = 2;\n            int result = Divido.divide(a, b);\n            Assertions.assertEquals(5, result);\n        }\n\n        @Test\n        public void testDivideByZero() {\n            int a = 10;\n            int b = 0;\n            Assertions.assertThrows(ArithmeticException.class, () -> {\n                Divido.divide(a, b);\n            });\n        }\n\n        @Test\n        public void testDivideWithMemoization() {\n            // Pre-populate the memo map\n            Map<String, Integer> memo = new HashMap<>();\n            memo.put(\"10/2\", 5);\n            memo.put(\"20/5\", 4);\n\n            // Set the memo map of Divido class\n            Divido.memo = memo;\n\n            int a = 20;\n            int b = 5;\n            int result = Divido.divide(a, b);\n            Assertions.assertEquals(4, result);\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\n\npublic class DividR {\n    public static int divide(int dividend, int divisor) {\n        if (divisor == 0) {\n            throw new ArithmeticException(\"Cannot divide by zero\");\n        }\n        return divideRecursive(dividend, divisor, 0);\n    }\n\n    private static int divideRecursive(int dividend, int divisor, int quotient) {\n        if (dividend < divisor) {\n            return quotient;\n        }\n        return divideRecursive(subtract(dividend, divisor), divisor, add(quotient, 1));\n    }\n\n    private static int subtract(int a, int b) {\n        return a - b;\n    }\n\n    private static int add(int a, int b) {\n        return a + b;\n    }\n}\n\n", "test_case": "package org.example;\nimport org.example.DividR;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass DividRTest {\n\n\n\n\n        @Test\n        public void testDivide() {\n            int dividend = 15;\n            int divisor = 3;\n            int expectedQuotient = 5;\n            int actualQuotient = DividR.divide(dividend, divisor);\n            Assertions.assertEquals(expectedQuotient, actualQuotient);\n        }\n\n        @Test\n        public void testDivideByZero() {\n            int dividend = 10;\n            int divisor = 0;\n            Assertions.assertThrows(ArithmeticException.class, () -> {\n                DividR.divide(dividend, divisor);\n            });\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\n\npublic class ElementCounter {\n        public static int countOccurrences(int[] array, int element) {\n            int count = 0;\n\n            for (int i = 0; i < array.length; i++) {\n                if (array[i] == element) {\n                    count++;\n                }\n            }\n\n            return count;\n        }\n}\n", "test_case": "package org.example;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ElementCounterTest {\n        @Test\n        public void testCountOccurrences() {\n            int[] array = {1, 2, 3, 4, 2, 2, 5};\n            int element = 2;\n\n            int count = ElementCounter.countOccurrences(array, element);\n\n            Assertions.assertEquals(3, count);\n        }\n\n        @Test\n        public void testCountOccurrencesEmptyArray() {\n            int[] array = {};\n            int element = 5;\n\n            int count = ElementCounter.countOccurrences(array, element);\n\n            Assertions.assertEquals(0, count);\n        }\n\n        @Test\n        public void testCountOccurrencesNoMatchingElement() {\n            int[] array = {1, 2, 3, 4, 5};\n            int element = 6;\n\n            int count = ElementCounter.countOccurrences(array, element);\n\n            Assertions.assertEquals(0, count);\n        }\n\n        @Test\n        public void testCountOccurrencesAllMatchingElements() {\n            int[] array = {2, 2, 2, 2, 2};\n            int element = 2;\n\n            int count = ElementCounter.countOccurrences(array, element);\n\n            Assertions.assertEquals(5, count);\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\n\npublic class ExponCal {\n\n        public static int exponentiation(int base, int exponent) {\n            return (int) Math.pow(base, exponent);\n        }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class ExponCalTest {\n\n    @Test\n    public void testExponentiation() {\n        // Test case 1: Positive base and exponent\n        int result1 = ExponCal.exponentiation(2, 3);\n        assertEquals(8, result1);\n\n\n\n        // Test case 3: Zero base and positive exponent\n        int result3 = ExponCal.exponentiation(0, 5);\n        assertEquals(0, result3);\n\n        // Test case 4: Positive base and zero exponent\n        int result4 = ExponCal.exponentiation(4, 0);\n        assertEquals(1, result4);\n\n        // Test case 5: Large base and exponent\n        int result5 = ExponCal.exponentiation(10, 6);\n        assertEquals(1000000, result5);\n    }\n}\n"}
{"code_source": "package org.example;\n\npublic class Fcalculator {\n\n        public static long calculateFactorial(int number) {\n            if (number < 0) {\n                throw new IllegalArgumentException(\"Factorial is not defined for negative numbers.\");\n            }\n\n            long factorial = 1;\n\n            for (int i = 1; i <= number; i++) {\n                factorial *= i;\n            }\n\n            return factorial;\n        }\n}\n", "test_case": "package org.example;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class FcalculatorTest {\n\n    @Test\n    public void testCalculateFactorial() {\n        // Test case 1: Factorial of 0\n        long result1 = Fcalculator.calculateFactorial(0);\n        assertEquals(1, result1);\n\n        // Test case 2: Factorial of a positive number\n        long result2 = Fcalculator.calculateFactorial(5);\n        assertEquals(120, result2);\n\n        // Test case 3: Factorial of a large number\n        long result3 = Fcalculator.calculateFactorial(10);\n        assertEquals(3628800, result3);\n\n        // Test case 4: Factorial of a negative number (expecting an exception)\n        try {\n            Fcalculator.calculateFactorial(-3);\n            fail(\"Expected IllegalArgumentException was not thrown.\");\n        } catch (IllegalArgumentException e) {\n            // Expected exception\n            assertEquals(\"Factorial is not defined for negative numbers.\", e.getMessage());\n        }\n    }\n}\n"}
{"code_source": "package org.example;\n\n\n    public class FibonacciCalculator {\n        public static int calculateFibonacci(int n) {\n            if (n <= 0) {\n                throw new IllegalArgumentException(\"Fibonacci sequence is not defined for non-positive numbers.\");\n            }\n\n            if (n == 1 || n == 2) {\n                return 1;\n            }\n\n            int fib1 = 1;\n            int fib2 = 1;\n            int fibonacci = 0;\n\n            for (int i = 3; i <= n; i++) {\n                fibonacci = fib1 + fib2;\n                fib1 = fib2;\n                fib2 = fibonacci;\n            }\n\n            return fibonacci;\n        }\n}\n", "test_case": "package org.example;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n    public class FibonacciCalculatorTest {\n\n        @Test\n        public void testCalculateFibonacci() {\n            // Test case 1: Fibonacci of n = 1\n            int result1 = FibonacciCalculator.calculateFibonacci(1);\n            assertEquals(1, result1);\n\n            // Test case 2: Fibonacci of n = 2\n            int result2 = FibonacciCalculator.calculateFibonacci(2);\n            assertEquals(1, result2);\n\n            // Test case 3: Fibonacci of n = 6\n            int result3 = FibonacciCalculator.calculateFibonacci(6);\n            assertEquals(8, result3);\n\n            // Test case 4: Fibonacci of n = 10\n            int result4 = FibonacciCalculator.calculateFibonacci(10);\n            assertEquals(55, result4);\n\n            // Test case 5: Fibonacci of n = 15\n            int result5 = FibonacciCalculator.calculateFibonacci(15);\n            assertEquals(610, result5);\n\n            // Test case 6: Fibonacci of n = 0 (expecting an exception)\n\n\n\n        }\n    }\n\n"}
{"code_source": "package org.example;\n\npublic class GenericZrithmetic {\n\n        public static <T extends Number> double add(T a, T b) {\n            return a.doubleValue() + b.doubleValue();\n        }\n\n        public static <T extends Number> double subtract(T a, T b) {\n            return a.doubleValue() - b.doubleValue();\n        }\n\n        public static <T extends Number> double multiply(T a, T b) {\n            return a.doubleValue() * b.doubleValue();\n        }\n\n        public static <T extends Number> double divide(T a, T b) {\n            if (b.doubleValue() == 0) {\n                throw new ArithmeticException(\"Cannot divide by zero\");\n            }\n            return a.doubleValue() / b.doubleValue();\n        }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.function.BinaryOperator;\nimport java.util.function.IntBinaryOperator;\n\npublic class FunctionalArithmeticTest {\n    @Test\n    public void testPerformOperation_Addition() {\n        int a = 5;\n        int b = 3;\n        IntBinaryOperator operator = (x, y) -> x + y;\n\n        int result = FunctionalArithmetic.performOperation(a, b, (BinaryOperator<Integer>) operator);\n\n        Assertions.assertEquals(8, result);\n    }\n\n    @Test\n    public void testPerformOperation_Subtraction() {\n        int a = 10;\n        int b = 4;\n        IntBinaryOperator operator = (x, y) -> x - y;\n\n        int result = FunctionalArithmetic.performOperation(a, b, operator);\n\n        Assertions.assertEquals(6, result);\n    }\n\n    @Test\n    public void testPerformOperation_Multiplication() {\n        int a = 6;\n        int b = 7;\n        IntBinaryOperator operator = (x, y) -> x * y;\n\n        int result = FunctionalArithmetic.performOperation(a, b, (BinaryOperator<Integer>) operator);\n\n        Assertions.assertEquals(42, result);\n    }\n\n    @Test\n    public void testPerformOperation_Division() {\n        int a = 30;\n        int b = 5;\n        IntBinaryOperator operator = (x, y) -> x / y;\n\n        int result = FunctionalArithmetic.performOperation(a, b, (BinaryOperator<Integer>) operator);\n\n        Assertions.assertEquals(6, result);\n    }\n}\n"}
{"code_source": "package org.example;\n\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.function.BinaryOperator;\n\npublic class LambdaArithmetic {\n    private static final Map<Character, BinaryOperator<Integer>> operations = new HashMap<>();\n\n    static {\n        operations.put('+', (a, b) -> a + b);\n        operations.put('-', (a, b) -> a - b);\n        operations.put('*', (a, b) -> a * b);\n        operations.put('/', (a, b) -> {\n            if (b == 0) {\n                throw new ArithmeticException(\"Cannot divide by zero\");\n            }\n            return a / b;\n        });\n    }\n\n    public static int performOperation(int a, int b, char operator) {\n        BinaryOperator<Integer> operation = operations.get(operator);\n        if (operation == null) {\n            throw new IllegalArgumentException(\"Invalid operator: \" + operator);\n        }\n        return operation.apply(a, b);\n    }}\n", "test_case": "package org.example;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass LambdaArithmeticTest {\n\n\n\n        @Test\n        public void testAddition() {\n            int a = 5;\n            int b = 3;\n\n            int result = LambdaArithmetic.performOperation(a, b, '+');\n\n            Assertions.assertEquals(8, result);\n        }\n\n        @Test\n        public void testSubtraction() {\n            int a = 10;\n            int b = 4;\n\n            int result = LambdaArithmetic.performOperation(a, b, '-');\n\n            Assertions.assertEquals(6, result);\n        }\n\n        @Test\n        public void testMultiplication() {\n            int a = 6;\n            int b = 7;\n\n            int result = LambdaArithmetic.performOperation(a, b, '*');\n\n            Assertions.assertEquals(42, result);\n        }\n\n        @Test\n        public void testDivision() {\n            int a = 30;\n            int b = 5;\n\n            int result = LambdaArithmetic.performOperation(a, b, '/');\n\n            Assertions.assertEquals(6, result);\n        }\n\n        @Test\n        public void testDivision_ByZero() {\n            int a = 10;\n            int b = 0;\n\n            Assertions.assertThrows(ArithmeticException.class, () -> {\n                LambdaArithmetic.performOperation(a, b, '/');\n            });\n        }\n\n        @Test\n        public void testInvalidOperator() {\n            int a = 10;\n            int b = 5;\n            char operator = '%';\n\n            Assertions.assertThrows(IllegalArgumentException.class, () -> {\n                LambdaArithmetic.performOperation(a, b, operator);\n            });\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\n\npublic class Math {\n\n\n\n        public static void printFibonacciSeries(int count) {\n            if (count <= 0) {\n                throw new IllegalArgumentException(\"The count must be a positive integer.\");\n            }\n\n            int[] series = new int[count];\n\n            series[0] = 0;\n\n            if (count > 1) {\n                series[1] = 1;\n\n                for (int i = 2; i < count; i++) {\n                    series[i] = series[i - 1] + series[i - 2];\n                }\n            }\n\n            for (int num : series) {\n                System.out.print(num + \" \");\n            }\n        }\n    }\n\n\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\n    public class MathTest {\n        @Test\n        public void testPrintFibonacciSeries() {\n            int count = 10;\n            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n            System.setOut(new PrintStream(outputStream));\n\n            Math.printFibonacciSeries(count);\n            String output = outputStream.toString().trim();\n\n            Assertions.assertEquals(\"0 1 1 2 3 5 8 13 21 34\", output);\n        }\n\n        @Test\n        public void testPrintFibonacciSeries_ZeroCount() {\n            int count = 0;\n            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n            System.setOut(new PrintStream(outputStream));\n\n            Assertions.assertThrows(IllegalArgumentException.class, () -> {\n                Math.printFibonacciSeries(count);\n            });\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\n\npublic class Mathh {\n\n        public static int sumEvenNumbers(int start, int end) {\n            if (start > end) {\n                throw new IllegalArgumentException(\"Invalid range. Start value must be less than or equal to the end value.\");\n            }\n\n            int sum = 0;\n\n            for (int i = start; i <= end; i++) {\n                if (i % 2 == 0) {\n                    sum += i;\n                }\n            }\n\n            return sum;\n        }\n    }\n\n\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\n    public class MathhTest {\n        @Test\n        public void testSumEvenNumbers() {\n            int start = 1;\n            int end = 10;\n\n            int sum = Mathh.sumEvenNumbers(start, end);\n\n            Assertions.assertEquals(30, sum);\n        }\n\n        @Test\n        public void testSumEvenNumbers_InvalidRange() {\n            int start = 10;\n            int end = 5;\n\n            Assertions.assertThrows(IllegalArgumentException.class, () -> {\n                Mathh.sumEvenNumbers(start, end);\n            });\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\n\npublic class MathUtils {\n\n        public static double power(double base, int exponent) {\n            double result = 1.0;\n\n            if (exponent > 0) {\n                for (int i = 1; i <= exponent; i++) {\n                    result *= base;\n                }\n            } else if (exponent < 0) {\n                for (int i = 1; i <= -exponent; i++) {\n                    result /= base;\n                }\n            }\n\n            return result;\n        }\n    }\n\n\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\n    public class MathUtilsTest {\n        @Test\n        public void testPower_PositiveExponent() {\n            double base = 2.0;\n            int exponent = 3;\n\n            double result = MathUtils.power(base, exponent);\n\n            Assertions.assertEquals(8.0, result);\n        }\n\n        @Test\n        public void testPower_NegativeExponent() {\n            double base = 2.0;\n            int exponent = -3;\n\n            double result = MathUtils.power(base, exponent);\n\n            Assertions.assertEquals(0.125, result);\n        }\n\n        @Test\n        public void testPower_ZeroExponent() {\n            double base = 2.0;\n            int exponent = 0;\n\n            double result = MathUtils.power(base, exponent);\n\n            Assertions.assertEquals(1.0, result);\n        }\n    }\n\n\n"}
{"code_source": "package org.example;\n\npublic class MaxElementFinder {\n    public static int findMaxElement(int[] array) {\n        if (array == null || array.length == 0) {\n            throw new IllegalArgumentException(\"Array cannot be null or empty.\");\n        }\n\n        int max = array[0];\n\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] > max) {\n                max = array[i];\n            }\n        }\n\n        return max;\n}}\n", "test_case": "public class MaxElementFinder {\n    public static int findMaxElement(int[] array) {\n        if (array == null || array.length == 0) {\n            throw new IllegalArgumentException(\"Array cannot be null or empty.\");\n        }\n\n        int max = array[0];\n\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] > max) {\n                max = array[i];\n            }\n        }\n\n        return max;\n    }"}
{"code_source": "package org.example;\n\npublic class MaxFinder {\n\n        public static int findMaxElement(int[] array) {\n            if (array == null || array.length == 0) {\n                throw new IllegalArgumentException(\"Array cannot be null or empty.\");\n            }\n\n            int max = array[0];\n\n            for (int i = 1; i < array.length; i++) {\n                if (array[i] > max) {\n                    max = array[i];\n                }\n            }\n\n            return max;\n        }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\n    public class MaxFinderTest {\n\n        @Test\n        public void testFindMaxElement() {\n            // Test case 1: Array with positive numbers\n            int[] array1 = {5, 8, 2, 10, 3};\n            int result1 = MaxFinder.findMaxElement(array1);\n            assertEquals(10, result1);\n\n            // Test case 2: Array with negative numbers\n            int[] array2 = {-3, -7, -2, -1, -5};\n            int result2 = MaxFinder.findMaxElement(array2);\n            assertEquals(-1, result2);\n\n            // Test case 3: Array with a single element\n            int[] array3 = {6};\n            int result3 = MaxFinder.findMaxElement(array3);\n            assertEquals(6, result3);\n\n            // Test case 4: Array with multiple occurrences of the maximum value\n            int[] array4 = {4, 5, 9, 5, 3};\n            int result4 = MaxFinder.findMaxElement(array4);\n            assertEquals(9, result4);\n\n            // Test case 5: Empty array (expecting an exception)\n\n            }\n\n\n            }\n\n\n\n"}
{"code_source": "package org.example;\n\npublic class Modeulo {\n    public static int modulo(int a, int b) {\n        return a % b;\n    }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class ModuloTest {\n    @Test\n    public void testModulo_PositiveNumbers() {\n        int result = Modeulo.modulo(10, 3);\n        Assertions.assertEquals(1, result);\n    }\n\n    @Test\n    public void testModulo_NegativeNumbers() {\n        int result = Modeulo.modulo(-10, 3);\n        Assertions.assertEquals(-1, result);\n    }\n\n    @Test\n    public void testModulo_DivisibleNumbers() {\n        int result = Modeulo.modulo(15, 5);\n        Assertions.assertEquals(0, result);\n    }\n\n    @Test\n    public void testModulo_ZeroDivisor() {\n        Assertions.assertThrows(ArithmeticException.class, () -> {\n            Modeulo.modulo(10, 0);\n        });\n    }\n}\n"}
{"code_source": "package org.example;\n\nimport static org.example.Addition.add;\n\npublic class Mul {\n    public static int multiply(int a, int b) {\n        int result = 0;\n        while (b != 0) {\n            if ((b & 1) == 1) {\n                result = add(result, a);\n            }\n            a <<= 1;\n            b >>= 1;\n        }\n        return result;\n    }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class MulTest {\n    @Test\n    public void testMultiply_PositiveNumbers() {\n        int result = Mul.multiply(5, 3);\n        Assertions.assertEquals(15, result);\n    }\n\n    @Test\n    public void testMultiply_NegativeNumbers() {\n        int result = Mul.multiply(-5, 3);\n        Assertions.assertEquals(-15, result);\n    }\n\n    @Test\n    public void testMultiply_Zero() {\n        int result = Mul.multiply(0, 10);\n        Assertions.assertEquals(0, result);\n    }\n\n    @Test\n    public void testMultiply_ZeroProduct() {\n        int result = Mul.multiply(5, 0);\n        Assertions.assertEquals(0, result);\n    }\n}\n"}
{"code_source": "package org.example;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Mull {\n    private static Map<String, Integer> memo = new HashMap<>();\n    public static int multiply(int a, int b) {\n        String key = a + \"*\" + b;\n        if (memo.containsKey(key)) {\n            return memo.get(key);\n        }\n\n        int result = a * b;\n        memo.put(key, result);\n        return result;\n    }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class MullTest {\n    @Test\n    public void testMultiply_PositiveNumbers() {\n        int result = Mull.multiply(5, 3);\n        Assertions.assertEquals(15, result);\n    }\n\n    @Test\n    public void testMultiply_NegativeNumbers() {\n        int result = Mull.multiply(-5, 3);\n        Assertions.assertEquals(-15, result);\n    }\n\n    @Test\n    public void testMultiply_Zero() {\n        int result = Mull.multiply(0, 10);\n        Assertions.assertEquals(0, result);\n    }\n\n    @Test\n    public void testMultiply_Memoization() {\n        int result1 = Mull.multiply(4, 5);\n        int result2 = Mull.multiply(4, 5);\n        Assertions.assertEquals(result1, result2);\n    }\n}\n"}
{"code_source": "package org.example;\nimport java.lang.Math;\npublic class Multiply {\n    public static int multiply(int a, int b) {\n        return multiplyRecursive(a, b, 0);\n    }\n\n    private static int multiplyRecursive(int a, int b, int result) {\n        if (b == 0) {\n            return result;\n        }\n        return multiplyRecursive(a, b - 1, add(a, result));\n    }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class MultiplyTest {\n    @Test\n    public void testMultiply_PositiveNumbers() {\n        int result = Multiply.multiply(5, 3);\n        Assertions.assertEquals(15, result);\n    }\n\n    @Test\n    public void testMultiply_NegativeNumbers() {\n        int result = Multiply.multiply(-5, 3);\n        Assertions.assertEquals(-15, result);\n    }\n\n    @Test\n    public void testMultiply_Zero() {\n        int result = Multiply.multiply(0, 10);\n        Assertions.assertEquals(0, result);\n    }\n}\n"}
{"code_source": "package org.example;\n\nimport java.math.BigInteger;\n\npublic class Muu {\n    public static BigInteger multiply(BigInteger a, BigInteger b) {\n        if (b.equals(BigInteger.ZERO)) {\n            return BigInteger.ZERO;\n        } else {\n            return a.add(multiply(a, b.subtract(BigInteger.ONE)));\n        }\n    }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.math.BigInteger;\n\npublic class MuuTest {\n    @Test\n    public void testMultiply_PositiveNumbers() {\n        BigInteger result = Muu.multiply(BigInteger.valueOf(5), BigInteger.valueOf(3));\n        Assertions.assertEquals(BigInteger.valueOf(15), result);\n    }\n\n    @Test\n    public void testMultiply_NegativeNumbers() {\n        BigInteger result = Muu.multiply(BigInteger.valueOf(-5), BigInteger.valueOf(3));\n        Assertions.assertEquals(BigInteger.valueOf(-15), result);\n    }\n\n    @Test\n    public void testMultiply_Zero() {\n        BigInteger result = Muu.multiply(BigInteger.ZERO, BigInteger.valueOf(10));\n        Assertions.assertEquals(BigInteger.ZERO, result);\n    }\n}\n"}
{"code_source": "package org.example;\n\npublic class NumberUtils {\n    public static int sumOfDigits(int number) {\n        int sum = 0;\n\n        while (number != 0) {\n            int digit = number % 10;\n            sum += digit;\n            number /= 10;\n        }\n\n        return sum;\n    }\n}\n\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class NumberUtilsTest {\n    @Test\n    public void testSumOfDigits_PositiveNumber() {\n        int result = NumberUtils.sumOfDigits(12345);\n        Assertions.assertEquals(15, result);\n    }\n\n    @Test\n    public void testSumOfDigits_NegativeNumber() {\n        int result = NumberUtils.sumOfDigits(-9876);\n        Assertions.assertEquals(30, result);\n    }\n\n    @Test\n    public void testSumOfDigits_Zero() {\n        int result = NumberUtils.sumOfDigits(0);\n        Assertions.assertEquals(0, result);\n    }\n}\n"}
{"code_source": "package org.example;\n\npublic class Op {\n        public static void printFibonacciSequence(int terms) {\n            if (terms <= 0) {\n                throw new IllegalArgumentException(\"Number of terms must be a positive integer.\");\n            }\n\n            int firstTerm = 0;\n            int secondTerm = 1;\n\n            System.out.print(\"Fibonacci Sequence up to \" + terms + \" terms: \");\n\n            if (terms >= 1) {\n                System.out.print(firstTerm + \" \");\n            }\n            if (terms >= 2) {\n                System.out.print(secondTerm + \" \");\n            }\n\n            for (int i = 3; i <= terms; i++) {\n                int nextTerm = firstTerm + secondTerm;\n                System.out.print(nextTerm + \" \");\n\n                firstTerm = secondTerm;\n                secondTerm = nextTerm;\n            }\n\n            System.out.println();\n        }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class OpTest {\n    @Test\n    public void testPrintFibonacciSequence_PositiveTerms() {\n        // Redirect console output to capture printed sequence\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        Op.printFibonacciSequence(7);\n\n        // Restore normal console output\n        System.setOut(System.out);\n\n        String expectedOutput = \"Fibonacci Sequence up to 7 terms: 0 1 1 2 3 5 8\\n\";\n        Assertions.assertEquals(expectedOutput, outContent.toString());\n    }\n\n    @Test\n    public void testPrintFibonacciSequence_ZeroTerms() {\n        // Redirect console output to capture printed sequence\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        Op.printFibonacciSequence(0);\n\n        // Restore normal console output\n        System.setOut(System.out);\n\n        String expectedOutput = \"Fibonacci Sequence up to 0 terms: \\n\";\n        Assertions.assertEquals(expectedOutput, outContent.toString());\n    }\n\n    @Test\n    public void testPrintFibonacciSequence_NegativeTerms() {\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            Op.printFibonacciSequence(-5);\n        });\n    }\n}\n"}
{"code_source": "package org.example;\n\npublic class Oup {\n    public static void generatePrimes(int lower, int upper) {\n        if (lower < 2) {\n            lower = 2;\n        }\n\n        System.out.print(\"Prime numbers between \" + lower + \" and \" + upper + \": \");\n        for (int i = lower; i <= upper; i++) {\n            if (isPrime(i)) {\n                System.out.print(i + \" \");\n            }\n        }\n        System.out.println();\n    }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\npublic class OupTest {\n    @Test\n    public void testGeneratePrimes_ValidRange() {\n        // Redirect console output to capture printed primes\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        Oup.generatePrimes(10, 30);\n\n        // Restore normal console output\n        System.setOut(System.out);\n\n        String expectedOutput = \"Prime numbers between 10 and 30: 11 13 17 19 23 29\\n\";\n        Assertions.assertEquals(expectedOutput, outContent.toString());\n    }\n\n    @Test\n    public void testGeneratePrimes_RangeWithNoPrimes() {\n        // Redirect console output to capture printed primes\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        Oup.generatePrimes(4, 6);\n\n        // Restore normal console output\n        System.setOut(System.out);\n\n        String expectedOutput = \"Prime numbers between 4 and 6: \\n\";\n        Assertions.assertEquals(expectedOutput, outContent.toString());\n    }\n\n    @Test\n    public void testGeneratePrimes_LowerBoundLessThan2() {\n        // Redirect console output to capture printed primes\n        ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n        System.setOut(new PrintStream(outContent));\n\n        Oup.generatePrimes(-5, 10);\n\n        // Restore normal console output\n        System.setOut(System.out);\n\n        String expectedOutput = \"Prime numbers between 2 and 10: 2 3 5 7 \\n\";\n        Assertions.assertEquals(expectedOutput, outContent.toString());\n    }\n}\n"}
{"code_source": "package org.example;\n\npublic class Outils {\n\n        public static void printFibonacciSequence(int numTerms) {\n            int firstTerm = 0;\n            int secondTerm = 1;\n\n            System.out.print(\"Fibonacci Sequence up to \" + numTerms + \" terms: \");\n\n            for (int i = 0; i < numTerms; i++) {\n                System.out.print(firstTerm + \" \");\n\n                int nextTerm = firstTerm + secondTerm;\n                firstTerm = secondTerm;\n                secondTerm = nextTerm;\n            }\n\n            System.out.println();\n        }\n    }\n\n\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass OutilsTest {\n\n}"}
{"code_source": "package org.example;\nimport java.lang.Math;\npublic class PerfectSquare {\n    public static boolean isPerfectSquare(int number) {\n        if (number < 0) {\n            return false;\n        }\n\n        int sqrt = (int) Math.sqrt(number);\n\n        return sqrt * sqrt == number;\n    }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class PerfectSquareTest {\n    @Test\n    public void testIsPerfectSquare_PerfectSquareNumber() {\n        // Test a perfect square number (16)\n        int number = 16;\n        boolean result = PerfectSquare.isPerfectSquare(number);\n        Assertions.assertTrue(result);\n    }\n\n    @Test\n    public void testIsPerfectSquare_NotPerfectSquareNumber() {\n        // Test a non-perfect square number (10)\n        int number = 10;\n        boolean result = PerfectSquare.isPerfectSquare(number);\n        Assertions.assertFalse(result);\n    }\n\n    @Test\n    public void testIsPerfectSquare_NegativeNumber() {\n        // Test a negative number (-25)\n        int number = -25;\n        boolean result = PerfectSquare.isPerfectSquare(number);\n        Assertions.assertFalse(result);\n    }\n\n    @Test\n    public void testIsPerfectSquare_Zero() {\n        // Test zero\n        int number = 0;\n        boolean result = PerfectSquare.isPerfectSquare(number);\n        Assertions.assertTrue(result);\n    }\n}\n"}
{"code_source": "package org.example;\n\npublic class Power {\n    public static int power(int base, int exponent) {\n        int result = 1;\n        for (int i = 0; i < exponent; i++) {\n            result *= base;\n        }\n        return result;\n    }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class PowerTest {\n    @Test\n    public void testPower_PositiveBase_PositiveExponent() {\n        // Test positive base (2) and positive exponent (3)\n        int base = 2;\n        int exponent = 3;\n        int result = Power.power(base, exponent);\n        Assertions.assertEquals(8, result);\n    }\n\n    @Test\n    public void testPower_PositiveBase_ZeroExponent() {\n        // Test positive base (5) and zero exponent\n        int base = 5;\n        int exponent = 0;\n        int result = Power.power(base, exponent);\n        Assertions.assertEquals(1, result);\n    }\n\n    @Test\n    public void testPower_ZeroBase_PositiveExponent() {\n        // Test zero base and positive exponent (4)\n        int base = 0;\n        int exponent = 4;\n        int result = Power.power(base, exponent);\n        Assertions.assertEquals(0, result);\n    }\n\n    @Test\n    public void testPower_NegativeBase_PositiveExponent() {\n        // Test negative base (-3) and positive exponent (2)\n        int base = -3;\n        int exponent = 2;\n        int result = Power.power(base, exponent);\n        Assertions.assertEquals(9, result);\n    }\n}\n"}
{"code_source": "package org.example;\n\npublic class PowerCalculator {\n    public static double calculatePower(double base, int exponent) {\n        if (exponent < 0) {\n            throw new IllegalArgumentException(\"Exponent cannot be negative.\");\n        }\n\n        if (exponent == 0) {\n            return 1;\n        }\n\n        return base * calculatePower(base, exponent - 1);\n    }  }\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class PowerCalculatorTest {\n    @Test\n    public void testCalculatePower_PositiveBase_PositiveExponent() {\n        // Test positive base (2.5) and positive exponent (3)\n        double base = 2.5;\n        int exponent = 3;\n        double result = PowerCalculator.calculatePower(base, exponent);\n        Assertions.assertEquals(15.625, result);\n    }\n\n    @Test\n    public void testCalculatePower_PositiveBase_ZeroExponent() {\n        // Test positive base (3.7) and zero exponent\n        double base = 3.7;\n        int exponent = 0;\n        double result = PowerCalculator.calculatePower(base, exponent);\n        Assertions.assertEquals(1, result);\n    }\n\n    @Test\n    public void testCalculatePower_ZeroBase_PositiveExponent() {\n        // Test zero base and positive exponent (4)\n        double base = 0;\n        int exponent = 4;\n        double result = PowerCalculator.calculatePower(base, exponent);\n        Assertions.assertEquals(0, result);\n    }\n\n    @Test\n    public void testCalculatePower_NegativeBase_PositiveExponent() {\n        // Test negative base (-2) and positive exponent (5)\n        double base = -2;\n        int exponent = 5;\n        double result = PowerCalculator.calculatePower(base, exponent);\n        Assertions.assertEquals(-32, result);\n    }\n\n    @Test\n    public void testCalculatePower_PositiveBase_NegativeExponent() {\n        // Test positive base (1.5) and negative exponent (-2)\n        double base = 1.5;\n        int exponent = -2;\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            PowerCalculator.calculatePower(base, exponent);\n        });\n    }\n}\n"}
{"code_source": "package org.example;\n\n\n    public class RecursiveArithmetic {\n        public static int add(int a, int b) {\n            if (b == 0) {\n                return a;\n            } else {\n                return add(a + 1, b - 1);\n            }\n        }\n\n        public static int subtract(int a, int b) {\n            if (b == 0) {\n                return a;\n            } else {\n                return subtract(a - 1, b - 1);\n            }\n        }\n\n        public static int multiply(int a, int b) {\n            if (b == 0) {\n                return 0;\n            } else {\n                return a + multiply(a, b - 1);\n            }\n        }\n\n        public static int divide(int a, int b) {\n            if (b == 0) {\n                throw new ArithmeticException(\"Cannot divide by zero\");\n            } else if (a < b) {\n                return 0;\n            } else {\n                return 1 + divide(a - b, b);\n            }\n        }\n\n\n    }\n\n\n\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class RecursiveArithmeticTest {\n    @Test\n    public void testAdd() {\n        int a = 5;\n        int b = 3;\n        int result = RecursiveArithmetic.add(a, b);\n        Assertions.assertEquals(8, result);\n    }\n\n    @Test\n    public void testSubtract() {\n        int a = 9;\n        int b = 4;\n        int result = RecursiveArithmetic.subtract(a, b);\n        Assertions.assertEquals(5, result);\n    }\n\n    @Test\n    public void testMultiply() {\n        int a = 6;\n        int b = 3;\n        int result = RecursiveArithmetic.multiply(a, b);\n        Assertions.assertEquals(18, result);\n    }\n\n    @Test\n    public void testDivide() {\n        int a = 20;\n        int b = 4;\n        int result = RecursiveArithmetic.divide(a, b);\n        Assertions.assertEquals(5, result);\n    }\n\n    @Test\n    public void testDivide_ByZero() {\n        int a = 10;\n        int b = 0;\n        Assertions.assertThrows(ArithmeticException.class, () -> {\n            RecursiveArithmetic.divide(a, b);\n        });\n    }\n}\n"}
{"code_source": "package org.example;\n\nimport java.math.BigInteger;\n\npublic class RecursiveBigIntegerArithmetic {\n    public static BigInteger add(BigInteger a, BigInteger b) {\n        if (b.equals(BigInteger.ZERO)) {\n            return a;\n        } else {\n            return add(a.add(BigInteger.ONE), b.subtract(BigInteger.ONE));\n        }\n    }}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.math.BigInteger;\n\npublic class RecursiveBigIntegerArithmeticTest {\n    @Test\n    public void testAdd() {\n        BigInteger a = BigInteger.valueOf(5);\n        BigInteger b = BigInteger.valueOf(3);\n        BigInteger result = RecursiveBigIntegerArithmetic.add(a, b);\n        BigInteger expected = BigInteger.valueOf(8);\n        Assertions.assertEquals(expected, result);\n    }\n}\n"}
{"code_source": "package org.example;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class RecursiveMemoizedArithmetic {\n    private static Map<String, Integer> memo = new HashMap<>();\n\n    public static int add(int a, int b) {\n        String key = a + \"+\" + b;\n        if (memo.containsKey(key)) {\n            return memo.get(key);\n        }\n\n        int result = a + b;\n        memo.put(key, result);\n        return result;\n    }}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class RecursiveMemoizedArithmeticTest {\n    @Test\n    public void testAdd() {\n        int a = 5;\n        int b = 3;\n        int result = RecursiveMemoizedArithmetic.add(a, b);\n        int expected = 8;\n        Assertions.assertEquals(expected, result);\n    }\n}\n"}
{"code_source": "package org.example;\nimport java.lang.Math;\npublic class Round {\n    public static int roundNumber(double number) {\n        return (int) Math.round(number);\n    }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class RoundTest {\n    @Test\n    public void testRoundNumber() {\n        double number = 3.7;\n        int result = Round.roundNumber(number);\n        int expected = 4;\n        Assertions.assertEquals(expected, result);\n    }\n}\n"}
{"code_source": "package org.example;\n\npublic class Sq {\n\n\n        public static double squareRoot(double number) {\n            if (number < 0) {\n                throw new ArithmeticException(\"Square root of a negative number is not allowed.\");\n            }\n            return Math.sqrt(number);\n        }\n\n\n    }\n\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\nclass SqTest {\n\n        @Test\n        public void testSquareRoot() {\n            // Test case 1: Positive number\n            double number1 = 25.0;\n            double result1 = Sq.squareRoot(number1);\n            assertEquals(5.0, result1, 0.0001);\n\n            // Test case 2: Zero\n            double number2 = 0.0;\n            double result2 = Sq.squareRoot(number2);\n            assertEquals(0.0, result2, 0.0001);\n\n            // Test case 3: Negative number (expecting an exception)\n\n        }\n    }\n\n"}
{"code_source": "package org.example;\n\n\nimport java.util.Arrays;\n\npublic class StreamArithmetic {\n        public static int add(int... numbers) {\n            return Arrays.stream(numbers).sum();\n        }\n\n        public static int multiply(int... numbers) {\n            return Arrays.stream(numbers).reduce(1, (a, b) -> a * b);\n        }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class StreamArithmeticTest {\n    @Test\n    public void testAdd() {\n        int result = StreamArithmetic.add(2, 3, 5);\n        int expected = 10;\n        Assertions.assertEquals(expected, result);\n    }\n\n    @Test\n    public void testMultiply() {\n        int result = StreamArithmetic.multiply(2, 3, 5);\n        int expected = 30;\n        Assertions.assertEquals(expected, result);\n    }\n}\n"}
{"code_source": "package org.example;\n\nimport java.math.BigInteger;\n\npublic class Subb {\n    public static BigInteger subtract(BigInteger a, BigInteger b) {\n        if (b.equals(BigInteger.ZERO)) {\n            return a;\n        } else {\n            return subtract(a.subtract(BigInteger.ONE), b.subtract(BigInteger.ONE));\n        }\n    }\n}\n", "test_case": "package org.example;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport java.math.BigInteger;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SubbTest {\n        @Test\n        public void testSubtract() {\n            BigInteger a = new BigInteger(\"10\");\n            BigInteger b = new BigInteger(\"5\");\n            BigInteger result = Subb.subtract(a, b);\n            BigInteger expected = new BigInteger(\"5\");\n            Assertions.assertEquals(expected, result);\n        }\n    }"}
{"code_source": "package org.example;\n\npublic class SubstrcatR {\n    public static int subtract(int a, int b) {\n        return subtractRecursive(a, b);\n    }\n\n    private static int subtractRecursive(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return subtractRecursive(a ^ b, (~a & b) << 1);\n    }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class SubstrcatRTest {\n    @Test\n    public void testSubtract() {\n        int a = 10;\n        int b = 5;\n        int result = SubstrcatR.subtract(a, b);\n        int expected = 5;\n        Assertions.assertEquals(expected, result);\n    }\n}\n"}
{"code_source": "package org.example;\n\npublic class SwitchArithmetic {\n    public static int performOperation(int a, int b, char operator) {\n        int result;\n\n        switch (operator) {\n            case '+':\n                result = a + b;\n                break;\n            case '-':\n                result = a - b;\n                break;\n            case '*':\n                result = a * b;\n                break;\n            case '/':\n                if (b == 0) {\n                    throw new ArithmeticException(\"Cannot divide by zero\");\n                }\n                result = a / b;\n                break;\n            default:\n                throw new IllegalArgumentException(\"Invalid operator: \" + operator);\n        }\n\n        return result;\n    }}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class SwitchArithmeticTest {\n    @Test\n    public void testPerformOperation_Addition() {\n        int a = 5;\n        int b = 3;\n        char operator = '+';\n        int result = SwitchArithmetic.performOperation(a, b, operator);\n        int expected = 8;\n        Assertions.assertEquals(expected, result);\n    }\n\n    @Test\n    public void testPerformOperation_Subtraction() {\n        int a = 5;\n        int b = 3;\n        char operator = '-';\n        int result = SwitchArithmetic.performOperation(a, b, operator);\n        int expected = 2;\n        Assertions.assertEquals(expected, result);\n    }\n\n    @Test\n    public void testPerformOperation_Multiplication() {\n        int a = 5;\n        int b = 3;\n        char operator = '*';\n        int result = SwitchArithmetic.performOperation(a, b, operator);\n        int expected = 15;\n        Assertions.assertEquals(expected, result);\n    }\n\n    @Test\n    public void testPerformOperation_Division() {\n        int a = 10;\n        int b = 2;\n        char operator = '/';\n        int result = SwitchArithmetic.performOperation(a, b, operator);\n        int expected = 5;\n        Assertions.assertEquals(expected, result);\n    }\n\n    @Test\n    public void testPerformOperation_InvalidOperator() {\n        int a = 5;\n        int b = 3;\n        char operator = '%';\n        Assertions.assertThrows(IllegalArgumentException.class, () -> {\n            SwitchArithmetic.performOperation(a, b, operator);\n        });\n    }\n\n    @Test\n    public void testPerformOperation_DivisionByZero() {\n        int a = 10;\n        int b = 0;\n        char operator = '/';\n        Assertions.assertThrows(ArithmeticException.class, () -> {\n            SwitchArithmetic.performOperation(a, b, operator);\n        });\n    }\n}\n"}
{"code_source": "package org.example;\n\npublic class TailRecursiveArithmetic {\n    public static int add(int a, int b) {\n        return addRecursive(a, b);\n    }\n\n    private static int addRecursive(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return addRecursive(a ^ b, (a & b) << 1);\n    }}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class TailRecursiveArithmeticTest {\n    @Test\n    public void testAdd() {\n        int a = 5;\n        int b = 3;\n        int result = TailRecursiveArithmetic.add(a, b);\n        int expected = 8;\n        Assertions.assertEquals(expected, result);\n    }\n}\n"}
{"code_source": "package org.example;\nimport java.lang.Math;\npublic class Tang {\n\n        public static double calculateTangent(double angle) {\n            // Convert angle to radians\n            double radians = Math.toRadians(angle);\n\n            // Calculate the tangent\n            double tangentValue = Math.tan(radians);\n\n            return tangentValue;\n        }\n}\n", "test_case": "package org.example;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nclass TangTest {\n    \n        @Test\n        public void testCalculateTangent() {\n            // Test case 1: Valid angle\n            double angle1 = 45.0;\n            double result1 = Tang.calculateTangent(angle1);\n            assertEquals(1.0, result1, 0.0001);\n\n            // Test case 2: Negative angle\n            double angle2 = -30.0;\n            double result2 = Tang.calculateTangent(angle2);\n            assertEquals(-0.5773, result2, 0.0001);\n\n            // Test case 3: Angle with decimal value\n            double angle3 = 60.5;\n            double result3 = Tang.calculateTangent(angle3);\n            assertEquals(2.1192, result3, 0.0001);\n        }\n    }\n\n"}
{"code_source": "/**\n * Finds all the bridges on an undirected graph.\n *\n * <p>Test against HackerEarth online judge at:\n * https://www.hackerearth.com/practice/algorithms/graphs/articulation-points-and-bridges/tutorial\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.graphtheory;\n\nimport static java.lang.Math.min;\n\nimport java.util.*;\n\npublic class BridgesAdjacencyListIterative {\n\n  private int n, id;\n  private int[] low, ids;\n  private boolean solved;\n  private boolean[] visited;\n  private List<List<Integer>> graph;\n  private List<Integer> bridges;\n\n  private static int CALLBACK_TOKEN = -2;\n\n  public BridgesAdjacencyListIterative(List<List<Integer>> graph, int n) {\n    if (graph == null || n <= 0 || graph.size() != n) throw new IllegalArgumentException();\n    this.graph = graph;\n    this.n = n;\n  }\n\n  // Returns a list of pairs of nodes indicating which nodes form bridges.\n  // The returned list is always of even length and indexes (2*i, 2*i+1) form a\n  // pair. For example, nodes are indexes (0, 1) are a pair, (2, 3) are another\n  // pair, etc...\n  public List<Integer> findBridges() {\n    if (solved) return bridges;\n\n    id = 0;\n    low = new int[n]; // Low link values\n    ids = new int[n]; // Nodes ids\n    visited = new boolean[n];\n\n    bridges = new ArrayList<>();\n\n    // Finds all bridges even if the graph is not one single connected component.\n    for (int i = 0; i < n; i++) {\n      if (visited[i]) continue;\n\n      Deque<Integer> stack = new ArrayDeque<>();\n      Deque<Integer> parentStack = new ArrayDeque<>();\n      stack.push(i);\n      parentStack.push(-1);\n\n      while (!stack.isEmpty()) {\n        int at = stack.pop();\n\n        if (at == CALLBACK_TOKEN) {\n          at = stack.pop();\n          int to = stack.pop();\n          low[at] = min(low[at], low[to]);\n          if (ids[at] < low[to]) {\n            bridges.add(at);\n            bridges.add(to);\n          }\n          continue;\n        }\n\n        int parent = parentStack.pop();\n        if (!visited[at]) {\n          low[at] = ids[at] = ++id;\n          visited[at] = true;\n\n          List<Integer> edges = graph.get(at);\n          for (Integer to : edges) {\n            if (to == parent) continue;\n            if (!visited[to]) {\n              stack.push(to);\n              stack.push(at);\n              stack.push(CALLBACK_TOKEN);\n              stack.push(to);\n              parentStack.push(at);\n            } else {\n              low[at] = min(low[at], ids[to]);\n            }\n          }\n        }\n      }\n    }\n\n    solved = true;\n    return bridges;\n  }\n\n  /* Example usage: */\n\n  public static void main(String[] args) {\n\n    int n = 10;\n    List<List<Integer>> graph = createGraph(n);\n\n    addEdge(graph, 0, 1);\n    addEdge(graph, 0, 2);\n    addEdge(graph, 1, 2);\n    addEdge(graph, 1, 3);\n    addEdge(graph, 2, 3);\n    addEdge(graph, 1, 4);\n    addEdge(graph, 2, 7);\n    addEdge(graph, 4, 6);\n    addEdge(graph, 4, 5);\n    addEdge(graph, 5, 6);\n    addEdge(graph, 7, 8);\n    addEdge(graph, 7, 9);\n\n    BridgesAdjacencyListIterative solver = new BridgesAdjacencyListIterative(graph, n);\n    List<Integer> bridges = solver.findBridges();\n    for (int i = 0; i < bridges.size() / 2; i++) {\n      int node1 = bridges.get(2 * i);\n      int node2 = bridges.get(2 * i + 1);\n      System.out.printf(\"BRIDGE between nodes: %d and %d\\n\", node1, node2);\n    }\n  }\n\n  // Initialize graph with 'n' nodes.\n  public static List<List<Integer>> createGraph(int n) {\n    List<List<Integer>> graph = new ArrayList<>();\n    for (int i = 0; i < n; i++) graph.add(new ArrayList<>());\n    return graph;\n  }\n\n  // Add undirected edge to graph.\n  public static void addEdge(List<List<Integer>> graph, int from, int to) {\n    graph.get(from).add(to);\n    graph.get(to).add(from);\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.graphtheory;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.google.common.collect.ImmutableList;\nimport java.util.*;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.junit.*;\n\npublic class BridgesAdjacencyListIterativeTest {\n\n  // Initialize graph with 'n' nodes.\n  public static List<List<Integer>> createGraph(int n) {\n    List<List<Integer>> graph = new ArrayList<>();\n    for (int i = 0; i < n; i++) graph.add(new ArrayList<>());\n    return graph;\n  }\n\n  // Add undirected edge to graph.\n  public static void addEdge(List<List<Integer>> graph, int from, int to) {\n    graph.get(from).add(to);\n    graph.get(to).add(from);\n  }\n\n  // Every edge should be a bridge if the input a tree\n  @Test\n  public void testTreeCase() {\n\n    int n = 12;\n    List<List<Integer>> graph = createGraph(n);\n    addEdge(graph, 1, 0);\n    addEdge(graph, 0, 2);\n    addEdge(graph, 2, 5);\n    addEdge(graph, 5, 6);\n    addEdge(graph, 5, 11);\n    addEdge(graph, 5, 4);\n    addEdge(graph, 4, 10);\n    addEdge(graph, 4, 3);\n    addEdge(graph, 3, 7);\n    addEdge(graph, 7, 8);\n    addEdge(graph, 7, 9);\n\n    BridgesAdjacencyList solver = new BridgesAdjacencyList(graph, n);\n    List<Pair<Integer, Integer>> sortedBridges = getSortedBridges(solver.findBridges());\n\n    List<Pair<Integer, Integer>> expected =\n        ImmutableList.of(\n            Pair.of(0, 1),\n            Pair.of(0, 2),\n            Pair.of(2, 5),\n            Pair.of(5, 6),\n            Pair.of(5, 11),\n            Pair.of(4, 5),\n            Pair.of(4, 10),\n            Pair.of(3, 4),\n            Pair.of(3, 7),\n            Pair.of(7, 8),\n            Pair.of(7, 9));\n\n    assertThat(sortedBridges).containsExactlyElementsIn(expected);\n  }\n\n  // Every edge should be a bridge if the input a tree\n  @Test\n  public void graphWithCyclesTest() {\n\n    int n = 12;\n    List<List<Integer>> graph = createGraph(n);\n    addEdge(graph, 1, 0);\n    addEdge(graph, 0, 2);\n    addEdge(graph, 3, 1);\n    addEdge(graph, 2, 5);\n    addEdge(graph, 5, 6);\n    addEdge(graph, 5, 11);\n    addEdge(graph, 5, 4);\n    addEdge(graph, 4, 10);\n    addEdge(graph, 4, 3);\n    addEdge(graph, 3, 7);\n    addEdge(graph, 7, 8);\n    addEdge(graph, 7, 9);\n    addEdge(graph, 11, 6);\n\n    BridgesAdjacencyList solver = new BridgesAdjacencyList(graph, n);\n    List<Pair<Integer, Integer>> sortedBridges = getSortedBridges(solver.findBridges());\n\n    List<Pair<Integer, Integer>> expected =\n        ImmutableList.of(Pair.of(3, 7), Pair.of(7, 8), Pair.of(7, 9), Pair.of(4, 10));\n\n    assertThat(sortedBridges).containsExactlyElementsIn(expected);\n  }\n\n  @Test\n  public void testGraphInSlides() {\n    int n = 9;\n    List<List<Integer>> graph = createGraph(n);\n    addEdge(graph, 0, 1);\n    addEdge(graph, 1, 2);\n    addEdge(graph, 2, 3);\n    addEdge(graph, 2, 5);\n    addEdge(graph, 2, 0);\n    addEdge(graph, 3, 4);\n    addEdge(graph, 5, 6);\n    addEdge(graph, 6, 7);\n    addEdge(graph, 7, 8);\n    addEdge(graph, 8, 5);\n\n    BridgesAdjacencyList solver = new BridgesAdjacencyList(graph, n);\n    List<Pair<Integer, Integer>> sortedBridges = getSortedBridges(solver.findBridges());\n\n    List<Pair<Integer, Integer>> expected =\n        ImmutableList.of(Pair.of(2, 3), Pair.of(3, 4), Pair.of(2, 5));\n\n    assertThat(sortedBridges).containsExactlyElementsIn(expected);\n  }\n\n  @Test\n  public void testDisconnectedGraph() {\n    int n = 11;\n    List<List<Integer>> graph = createGraph(n);\n    addEdge(graph, 0, 1);\n    addEdge(graph, 2, 1);\n\n    addEdge(graph, 3, 4);\n\n    addEdge(graph, 5, 7);\n    addEdge(graph, 5, 6);\n    addEdge(graph, 6, 7);\n    addEdge(graph, 8, 7);\n    addEdge(graph, 8, 9);\n    addEdge(graph, 8, 10);\n\n    BridgesAdjacencyList solver = new BridgesAdjacencyList(graph, n);\n    List<Pair<Integer, Integer>> sortedBridges = getSortedBridges(solver.findBridges());\n\n    List<Pair<Integer, Integer>> expected =\n        ImmutableList.of(\n            Pair.of(0, 1),\n            Pair.of(1, 2),\n            Pair.of(3, 4),\n            Pair.of(7, 8),\n            Pair.of(8, 9),\n            Pair.of(8, 10));\n\n    assertThat(sortedBridges).containsExactlyElementsIn(expected);\n  }\n\n  private static List<Pair<Integer, Integer>> getSortedBridges(List<Integer> bridgeNodes) {\n    List<Pair<Integer, Integer>> bridges = new ArrayList<>();\n    for (int i = 0; i < bridgeNodes.size(); i += 2) {\n      int node1 = bridgeNodes.get(i);\n      int node2 = bridgeNodes.get(i + 1);\n      Pair<Integer, Integer> pair;\n      if (node1 < node2) {\n        pair = Pair.of(node1, node2);\n      } else {\n        pair = Pair.of(node2, node1);\n      }\n      bridges.add(pair);\n    }\n    return bridges;\n  }\n}\n"}
{"code_source": "/**\n * The coin change problem is an unbounded knapsack problem variant. The problem asks you to find\n * the minimum number of coins required for a certain amount of change given the coin denominations.\n * You may use each coin denomination as many times as you please.\n *\n * <p>Tested against: https://leetcode.com/problems/coin-change\n *\n * <p>Run locally:\n *\n * <p>./gradlew run -Palgorithm=dp.CoinChange\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.dp;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class CoinChange {\n\n  public static class Solution {\n    // Contains the minimum number of coins to make a certain amount, if a solution exists.\n    Optional<Integer> minCoins = Optional.empty();\n\n    // The coins selected as part of the optimal solution.\n    List<Integer> selectedCoins = new ArrayList<Integer>();\n  }\n\n  // TODO(william): setting an explicit infinity could lead to a wrong answer for\n  // very large values. Prefer to use null instead.\n  private static final int INF = Integer.MAX_VALUE / 2;\n\n  public static Solution coinChange(int[] coins, final int n) {\n    if (coins == null) throw new IllegalArgumentException(\"Coins array is null\");\n    if (coins.length == 0) throw new IllegalArgumentException(\"No coin values :/\");\n    for (int coin : coins) {\n      if (coin <= 0) {\n        throw new IllegalArgumentException(\"Coin with value `\" + coin + \"` is not allowed.\");\n      }\n    }\n\n    final int m = coins.length;\n    // Initialize table and set first row to be infinity\n    int[][] dp = new int[m + 1][n + 1];\n    java.util.Arrays.fill(dp[0], INF);\n    dp[1][0] = 0;\n\n    // Iterate through all the coins\n    for (int i = 1; i <= m; i++) {\n      int coinValue = coins[i - 1];\n      for (int j = 1; j <= n; j++) {\n\n        // Consider not selecting this coin\n        dp[i][j] = dp[i - 1][j];\n\n        // Try selecting this coin if it's better\n        if (j - coinValue >= 0 && dp[i][j - coinValue] + 1 < dp[i][j]) {\n          dp[i][j] = dp[i][j - coinValue] + 1;\n        }\n      }\n    }\n\n    // p(dp);\n\n    Solution solution = new Solution();\n\n    if (dp[m][n] != INF) {\n      solution.minCoins = Optional.of(dp[m][n]);\n    } else {\n      return solution;\n    }\n\n    for (int change = n, coinIndex = m; coinIndex > 0; ) {\n      int coinValue = coins[coinIndex - 1];\n      boolean canSelectCoin = change - coinValue >= 0;\n      if (canSelectCoin && dp[coinIndex][change - coinValue] < dp[coinIndex][change]) {\n        solution.selectedCoins.add(coinValue);\n        change -= coinValue;\n      } else {\n        coinIndex--;\n      }\n    }\n\n    return solution;\n  }\n\n  public static Solution coinChangeSpaceEfficient(int[] coins, int n) {\n    if (coins == null) throw new IllegalArgumentException(\"Coins array is null\");\n\n    // Initialize table and set everything to infinity except first cell\n    int[] dp = new int[n + 1];\n    java.util.Arrays.fill(dp, INF);\n    dp[0] = 0;\n\n    for (int i = 1; i <= n; i++) {\n      for (int coin : coins) {\n        if (i - coin < 0) {\n          continue;\n        }\n        if (dp[i - coin] + 1 < dp[i]) {\n          dp[i] = dp[i - coin] + 1;\n        }\n      }\n    }\n\n    Solution solution = new Solution();\n    if (dp[n] != INF) {\n      solution.minCoins = Optional.of(dp[n]);\n    } else {\n      return solution;\n    }\n\n    for (int i = n; i > 0; ) {\n      int selectedCoinValue = INF;\n      int cellWithFewestCoins = dp[i];\n      for (int coin : coins) {\n        if (i - coin < 0) {\n          continue;\n        }\n        if (dp[i - coin] < cellWithFewestCoins) {\n          cellWithFewestCoins = dp[i - coin];\n          selectedCoinValue = coin;\n        }\n      }\n      solution.selectedCoins.add(selectedCoinValue);\n      i -= selectedCoinValue;\n    }\n\n    // Return the minimum number of coins needed\n    return solution;\n  }\n\n  // The recursive approach has the advantage that it does not have to visit\n  // all possible states like the tabular approach does. This can speedup\n  // things especially if the coin denominations are large.\n  public static int coinChangeRecursive(int[] coins, int n) {\n    if (coins == null) throw new IllegalArgumentException(\"Coins array is null\");\n    if (n < 0) return -1;\n\n    int[] dp = new int[n + 1];\n    return coinChangeRecursive(n, coins, dp);\n  }\n\n  // Private helper method to actually go the recursion\n  private static int coinChangeRecursive(int n, int[] coins, int[] dp) {\n    if (n < 0) return -1;\n    if (n == 0) return 0;\n    if (dp[n] != 0) return dp[n];\n\n    int minCoins = INF;\n    for (int coinValue : coins) {\n      int value = coinChangeRecursive(n - coinValue, coins, dp);\n      if (value != -1 && value < minCoins) minCoins = value + 1;\n    }\n\n    // If we weren't able to find some coins to make our\n    // amount then cache -1 as the answer.\n    return dp[n] = (minCoins == INF) ? -1 : minCoins;\n  }\n\n  // DP table print function. Used for debugging.\n  private static void p(int[][] dp) {\n    for (int[] r : dp) {\n      for (int v : r) {\n        System.out.printf(\"%4d, \", v == INF ? -1 : v);\n      }\n      System.out.println();\n    }\n  }\n\n  private static void p(int[] dp) {\n    for (int v : dp) {\n      System.out.printf(\"%4d, \", v == INF ? -1 : v);\n    }\n    System.out.println();\n  }\n\n  public static void main(String[] args) {\n    // example1();\n    // example2();\n    // example3();\n    example4();\n  }\n\n  private static void example4() {\n    int n = 11;\n    int[] coins = {2, 4, 1};\n    // System.out.println(coinChange(coins, n).minCoins);\n    System.out.println(coinChangeSpaceEfficient(coins, n));\n    // System.out.println(coinChangeRecursive(coins, n));\n    // System.out.println(coinChange(coins, n).selectedCoins);\n  }\n\n  private static void example1() {\n    int[] coins = {2, 6, 1};\n    System.out.println(coinChange(coins, 17).minCoins);\n    System.out.println(coinChange(coins, 17).selectedCoins);\n    System.out.println(coinChangeSpaceEfficient(coins, 17));\n    System.out.println(coinChangeRecursive(coins, 17));\n  }\n\n  private static void example2() {\n    int[] coins = {2, 3, 5};\n    System.out.println(coinChange(coins, 12).minCoins);\n    System.out.println(coinChange(coins, 12).selectedCoins);\n    System.out.println(coinChangeSpaceEfficient(coins, 12));\n    System.out.println(coinChangeRecursive(coins, 12));\n  }\n\n  private static void example3() {\n    int[] coins = {3, 4, 7};\n    System.out.println(coinChange(coins, 17).minCoins);\n    System.out.println(coinChange(coins, 17).selectedCoins);\n    System.out.println(coinChangeSpaceEfficient(coins, 17));\n    System.out.println(coinChangeRecursive(coins, 17));\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.dp;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.google.common.primitives.Ints;\nimport com.williamfiset.algorithms.utils.TestUtils;\nimport java.util.*;\nimport org.junit.*;\n\npublic class CoinChangeTest {\n\n  static final int LOOPS = 100;\n\n  @Test\n  public void testCoinChange() {\n    for (int i = 1; i < LOOPS; i++) {\n      List<Integer> values = TestUtils.randomIntegerList(i, 1, 1000);\n      int[] coinValues = Ints.toArray(values);\n\n      int amount = TestUtils.randValue(1, 1000);\n\n      CoinChange.Solution solution1 = CoinChange.coinChange(coinValues, amount);\n      CoinChange.Solution solution2 = CoinChange.coinChangeSpaceEfficient(coinValues, amount);\n      int v1 = solution1.minCoins.isPresent() ? solution1.minCoins.get() : -1;\n      int v2 = solution2.minCoins.isPresent() ? solution2.minCoins.get() : -1;\n      int v3 = CoinChange.coinChangeRecursive(coinValues, amount);\n\n      assertThat(v1).isEqualTo(v2);\n      assertThat(v2).isEqualTo(v3);\n    }\n  }\n\n  @Test\n  public void testCoinChangeSelectedCoins() {\n    for (int i = 1; i < LOOPS; i++) {\n      List<Integer> values = TestUtils.randomIntegerList(i, 1, 1000);\n      int[] coinValues = Ints.toArray(values);\n\n      int amount = TestUtils.randValue(1, 1000);\n\n      CoinChange.Solution solution = CoinChange.coinChange(coinValues, amount);\n      int selectedCoinsSum = 0;\n      for (int v : solution.selectedCoins) {\n        selectedCoinsSum += v;\n      }\n      if (!solution.minCoins.isPresent()) {\n        assertThat(solution.selectedCoins.size()).isEqualTo(0);\n      } else {\n        // Verify that the size of the selected coins is equal to the optimal solution.\n        assertThat(solution.selectedCoins.size()).isEqualTo(solution.minCoins.get());\n\n        // Further verify that the sum of the selected coins equals the amount we want to make.\n        assertThat(selectedCoinsSum).isEqualTo(amount);\n      }\n    }\n  }\n\n  @Test\n  public void testCoinChangeSpaceEfficientSelectedCoins() {\n    for (int i = 1; i < LOOPS; i++) {\n      List<Integer> values = TestUtils.randomIntegerList(i, 1, 1000);\n      int[] coinValues = Ints.toArray(values);\n\n      int amount = TestUtils.randValue(1, 1000);\n\n      CoinChange.Solution solution = CoinChange.coinChangeSpaceEfficient(coinValues, amount);\n      int selectedCoinsSum = 0;\n      for (int v : solution.selectedCoins) {\n        selectedCoinsSum += v;\n      }\n      if (!solution.minCoins.isPresent()) {\n        assertThat(solution.selectedCoins.size()).isEqualTo(0);\n      } else {\n        // Verify that the size of the selected coins is equal to the optimal solution.\n        assertThat(solution.selectedCoins.size()).isEqualTo(solution.minCoins.get());\n\n        // Further verify that the sum of the selected coins equals the amount we want to make.\n        assertThat(selectedCoinsSum).isEqualTo(amount);\n      }\n    }\n  }\n}\n"}
{"code_source": "/**\n * \"[Andrew, 1979] discovered an alternative to the Graham scan that uses a linear lexicographic\n * sort of the point set by the x and y-coordinates. This is an advantage if this ordering is\n * already known for a set, which is sometimes the case. But even if sorting is required, this is a\n * faster sort than the angular Graham-scan sort with its more complicated comparison function. The\n * \"Monotone Chain\" algorithm computes the upper and lower hulls of a monotone chain of points,\n * which is why we refer to it as the \"Monotone Chain\" algorithm. Like the Graham scan, it runs in\n * O(nlog-n) time due to the sort time. After that, it only takes O(n) time to compute the hull.\" -\n * Dan Sunday\n *\n * <p>This code is a modification of the monotone chains algorithm found on wikibooks.\n * https://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain\n *\n * <p>Time Complexity: O(nlogn)\n *\n * @author A. M. Andrew, Dan Sunday, William Fiset\n */\npackage com.williamfiset.algorithms.geometry;\n\nimport static java.lang.Math.abs;\n\nimport java.awt.geom.*;\nimport java.util.*;\n\npublic class ConvexHullMonotoneChainsAlgorithm {\n\n  // Small epsilon used for double value comparison.\n  private static final double EPS = 1e-5;\n\n  // Sorts points by first x coordinate and then y coordinate.\n  private static class PointComparator implements Comparator<Point2D> {\n    public int compare(Point2D p1, Point2D p2) {\n      if (abs(p1.getX() - p2.getX()) < EPS) {\n        if (abs(p1.getY() - p2.getY()) < EPS) return 0;\n        else if (p1.getY() > p2.getY()) return 1;\n      } else if (p1.getX() > p2.getX()) return 1;\n      return -1;\n    }\n  }\n\n  // Use the monotone chains algorithm to find the\n  // convex hull of a set of points in O(nlogn) time.\n  public static Point2D[] convexHull(Point2D[] pts) {\n\n    int n = pts.length, k = 0;\n    if (n <= 1) return pts;\n\n    Point2D[] hull = new Point2D[2 * n];\n    Arrays.sort(pts, new PointComparator());\n\n    // Build upper chain.\n    for (int i = 0; i < n; i++) {\n      while (k >= 2 && orientation(hull[k - 2], hull[k - 1], pts[i]) <= 0) k--;\n      hull[k++] = pts[i];\n    }\n\n    int lastUpperChainIndex = k;\n\n    // Build lower chain.\n    for (int i = n - 2; i >= 0; i--) {\n      while (k > lastUpperChainIndex && orientation(hull[k - 2], hull[k - 1], pts[i]) <= 0) k--;\n      hull[k++] = pts[i];\n    }\n\n    // Conserve only unique points.\n    int index = 1;\n    Point2D lastPt = hull[0];\n    for (int i = 1; i < k - 1; i++) {\n      if (!hull[i].equals(lastPt)) {\n        hull[index++] = lastPt = hull[i];\n      }\n    }\n\n    return Arrays.copyOfRange(hull, 0, index);\n  }\n\n  // To find orientation of point 'c' relative to the line segment (a, b).\n  // Imagine yourself standing at point 'a' looking out towards point 'b'.\n  // Returns  0 if all three points are collinear.\n  // Returns -1 if 'c' is clockwise to segment (a, b), i.e right of line formed by the segment.\n  // Returns +1 if 'c' is counter clockwise to segment (a, b), i.e left of line\n  // formed by the segment.\n  private static int orientation(Point2D a, Point2D b, Point2D c) {\n    double value =\n        (b.getY() - a.getY()) * (c.getX() - b.getX())\n            - (b.getX() - a.getX()) * (c.getY() - b.getY());\n    if (abs(value) < EPS) return 0;\n    return (value > 0) ? -1 : +1;\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.geometry;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.google.common.collect.ImmutableList;\nimport java.awt.geom.*;\nimport org.junit.*;\n\npublic class ConvexHullMonotoneChainsAlgorithmTest {\n\n  @Test\n  public void testEmptyCase() {\n    assertThat(ConvexHullMonotoneChainsAlgorithm.convexHull(new Point2D[0])).isEmpty();\n  }\n\n  @Test\n  public void convexHullRedundantPoints() {\n    Point2D[] pts = new Point2D[14];\n\n    pts[0] = new Point2D.Double(0, 5); // In hull\n    pts[1] = new Point2D.Double(-1, 1);\n    pts[2] = new Point2D.Double(0, 1);\n    pts[3] = new Point2D.Double(1, 1);\n    pts[4] = new Point2D.Double(-5, 0); // In hull\n    pts[5] = new Point2D.Double(-1, 0);\n    pts[6] = new Point2D.Double(0, 0);\n    pts[7] = new Point2D.Double(1, 0);\n    pts[8] = new Point2D.Double(5, 0); // In hull\n    pts[9] = new Point2D.Double(-1, -1);\n    pts[10] = new Point2D.Double(0, -1);\n    pts[11] = new Point2D.Double(1, -1);\n    pts[12] = new Point2D.Double(0, -5); // In hull\n\n    // Duplicate point on hull.\n    pts[13] = new Point2D.Double(-5, 0);\n    ImmutableList<Point2D> expected = ImmutableList.of(pts[4], pts[12], pts[0], pts[8]);\n    Point2D[] hull = ConvexHullMonotoneChainsAlgorithm.convexHull(pts);\n    assertThat(hull).asList().containsExactlyElementsIn(expected);\n  }\n\n  @Test\n  public void uniquePointsOnHull() {\n    Point2D[] pts = new Point2D[5];\n    pts[0] = new Point2D.Double(5, 4);\n    pts[1] = new Point2D.Double(0, 0);\n    pts[2] = new Point2D.Double(5, 0);\n    pts[3] = new Point2D.Double(4, 5);\n    pts[4] = new Point2D.Double(0, 5);\n\n    ImmutableList<Point2D> expected = ImmutableList.of(pts[1], pts[4], pts[3], pts[2], pts[0]);\n    Point2D[] hull = ConvexHullMonotoneChainsAlgorithm.convexHull(pts);\n    assertThat(hull).asList().containsExactlyElementsIn(expected);\n  }\n\n  @Test\n  public void test3Points() {\n    Point2D[] pts = new Point2D[3];\n    pts[1] = new Point2D.Double(0, 0);\n    pts[2] = new Point2D.Double(5, 0);\n    pts[0] = new Point2D.Double(0, 5);\n\n    ImmutableList<Point2D> expected = ImmutableList.of(pts[0], pts[1], pts[2]);\n    Point2D[] hull = ConvexHullMonotoneChainsAlgorithm.convexHull(pts);\n    assertThat(hull).asList().containsExactlyElementsIn(expected);\n  }\n\n  @Test\n  public void test2Points() {\n    Point2D[] pts = new Point2D[2];\n    pts[1] = new Point2D.Double(0, 0);\n    pts[0] = new Point2D.Double(0, 5);\n\n    ImmutableList<Point2D> expected = ImmutableList.of(pts[0], pts[1]);\n    Point2D[] hull = ConvexHullMonotoneChainsAlgorithm.convexHull(pts);\n    assertThat(hull).asList().containsExactlyElementsIn(expected);\n  }\n\n  @Test\n  public void test1Point() {\n    Point2D[] pts = new Point2D[1];\n    pts[0] = new Point2D.Double(0, 5);\n\n    ImmutableList<Point2D> expected = ImmutableList.of(pts[0]);\n    Point2D[] hull = ConvexHullMonotoneChainsAlgorithm.convexHull(pts);\n    assertThat(hull).asList().containsExactlyElementsIn(expected);\n  }\n\n  @Test\n  public void repeatedSinglePoint() {\n    Point2D[] pts = new Point2D[5];\n    pts[0] = new Point2D.Double(0, 5);\n    pts[1] = pts[0];\n    pts[2] = pts[0];\n    pts[3] = pts[0];\n    pts[4] = pts[0];\n\n    ImmutableList<Point2D> expected = ImmutableList.of(pts[0]);\n    Point2D[] hull = ConvexHullMonotoneChainsAlgorithm.convexHull(pts);\n    assertThat(hull).asList().containsExactlyElementsIn(expected);\n  }\n}\n"}
{"code_source": "/**\n * Implementation of finding an Eulerian Path on a graph. This implementation verifies that the\n * input graph is fully connected and supports self loops and repeated edges between nodes.\n *\n * <p>Test against: https://open.kattis.com/problems/eulerianpath\n * http://codeforces.com/contest/508/problem/D\n *\n * <p>Run: ./gradlew run -Palgorithm=graphtheory.EulerianPathDirectedEdgesAdjacencyList\n *\n * <p>Time Complexity: O(E)\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.graphtheory;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class EulerianPathDirectedEdgesAdjacencyList {\n\n  private final int n;\n  private int edgeCount;\n  private int[] in, out;\n  private LinkedList<Integer> path;\n  private List<List<Integer>> graph;\n\n  public EulerianPathDirectedEdgesAdjacencyList(List<List<Integer>> graph) {\n    if (graph == null) throw new IllegalArgumentException(\"Graph cannot be null\");\n    n = graph.size();\n    this.graph = graph;\n    path = new LinkedList<>();\n  }\n\n  // Returns a list of edgeCount + 1 node ids that give the Eulerian path or\n  // null if no path exists or the graph is disconnected.\n  public int[] getEulerianPath() {\n    setUp();\n\n    if (!graphHasEulerianPath()) return null;\n    dfs(findStartNode());\n\n    // Make sure all edges of the graph were traversed. It could be the\n    // case that the graph is disconnected in which case return null.\n    if (path.size() != edgeCount + 1) return null;\n\n    // Instead of returning the 'path' as a linked list return\n    // the solution as a primitive array for convenience.\n    int[] soln = new int[edgeCount + 1];\n    for (int i = 0; !path.isEmpty(); i++) soln[i] = path.removeFirst();\n\n    return soln;\n  }\n\n  private void setUp() {\n    // Arrays that track the in degree and out degree of each node.\n    in = new int[n];\n    out = new int[n];\n\n    edgeCount = 0;\n\n    // Compute in and out node degrees.\n    for (int from = 0; from < n; from++) {\n      for (int to : graph.get(from)) {\n        in[to]++;\n        out[from]++;\n        edgeCount++;\n      }\n    }\n  }\n\n  private boolean graphHasEulerianPath() {\n    if (edgeCount == 0) return false;\n    int startNodes = 0, endNodes = 0;\n    for (int i = 0; i < n; i++) {\n      if (out[i] - in[i] > 1 || in[i] - out[i] > 1) return false;\n      else if (out[i] - in[i] == 1) startNodes++;\n      else if (in[i] - out[i] == 1) endNodes++;\n    }\n    return (endNodes == 0 && startNodes == 0) || (endNodes == 1 && startNodes == 1);\n  }\n\n  private int findStartNode() {\n    int start = 0;\n    for (int i = 0; i < n; i++) {\n      // Unique starting node.\n      if (out[i] - in[i] == 1) return i;\n      // Start at a node with an outgoing edge.\n      if (out[i] > 0) start = i;\n    }\n    return start;\n  }\n\n  // Perform DFS to find Eulerian path.\n  private void dfs(int at) {\n    while (out[at] != 0) {\n      int next = graph.get(at).get(--out[at]);\n      dfs(next);\n    }\n    path.addFirst(at);\n  }\n\n  /* Graph creation helper methods */\n\n  public static List<List<Integer>> initializeEmptyGraph(int n) {\n    List<List<Integer>> graph = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) graph.add(new ArrayList<>());\n    return graph;\n  }\n\n  public static void addDirectedEdge(List<List<Integer>> g, int from, int to) {\n    g.get(from).add(to);\n  }\n\n  /* Examples */\n\n  public static void main(String[] args) {\n    exampleFromSlides();\n    smallExample();\n  }\n\n  private static void exampleFromSlides() {\n    int n = 7;\n    List<List<Integer>> graph = initializeEmptyGraph(n);\n\n    addDirectedEdge(graph, 1, 2);\n    addDirectedEdge(graph, 1, 3);\n    addDirectedEdge(graph, 2, 2);\n    addDirectedEdge(graph, 2, 4);\n    addDirectedEdge(graph, 2, 4);\n    addDirectedEdge(graph, 3, 1);\n    addDirectedEdge(graph, 3, 2);\n    addDirectedEdge(graph, 3, 5);\n    addDirectedEdge(graph, 4, 3);\n    addDirectedEdge(graph, 4, 6);\n    addDirectedEdge(graph, 5, 6);\n    addDirectedEdge(graph, 6, 3);\n\n    EulerianPathDirectedEdgesAdjacencyList solver;\n    solver = new EulerianPathDirectedEdgesAdjacencyList(graph);\n\n    // Outputs path: [1, 3, 5, 6, 3, 2, 4, 3, 1, 2, 2, 4, 6]\n    System.out.println(Arrays.toString(solver.getEulerianPath()));\n  }\n\n  private static void smallExample() {\n    int n = 5;\n    List<List<Integer>> graph = initializeEmptyGraph(n);\n\n    addDirectedEdge(graph, 0, 1);\n    addDirectedEdge(graph, 1, 2);\n    addDirectedEdge(graph, 1, 4);\n    addDirectedEdge(graph, 1, 3);\n    addDirectedEdge(graph, 2, 1);\n    addDirectedEdge(graph, 4, 1);\n\n    EulerianPathDirectedEdgesAdjacencyList solver;\n    solver = new EulerianPathDirectedEdgesAdjacencyList(graph);\n\n    // Outputs path: [0, 1, 4, 1, 2, 1, 3]\n    System.out.println(Arrays.toString(solver.getEulerianPath()));\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.graphtheory;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.*;\nimport org.junit.*;\n\npublic class EulerianPathDirectedEdgesAdjacencyListTest {\n\n  EulerianPathDirectedEdgesAdjacencyList solver;\n\n  @Before\n  public void setUp() {\n    solver = null;\n  }\n\n  // Initialize graph with 'n' nodes.\n  public static List<List<Integer>> initializeEmptyGraph(int n) {\n    List<List<Integer>> graph = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) graph.add(new ArrayList<>());\n    return graph;\n  }\n\n  // Add directed edge to graph.\n  public static void addDirectedEdge(List<List<Integer>> graph, int from, int to) {\n    graph.get(from).add(to);\n  }\n\n  public static void verifyEulerianPath(List<List<Integer>> graph) {\n    EulerianPathDirectedEdgesAdjacencyList solver;\n    solver = new EulerianPathDirectedEdgesAdjacencyList(graph);\n    int n = graph.size();\n    int[] ordering = solver.getEulerianPath();\n\n    if (n == 0) {\n      assertThat(ordering.length).isEqualTo(0);\n      return;\n    }\n\n    // Make sure solver actually found an Eulerian Path.\n    assertThat(ordering).isNotNull();\n\n    // Make sure tour starts and begins on start and end nodes.\n    // assertThat(ordering[0]).isEqualTo(solver.start);\n    // assertThat(ordering[ordering.length-1]).isEqualTo(solver.end);\n\n    // Count the frequency of each edge\n    Map<Long, Integer> map = new HashMap<>();\n    for (int from = 0; from < n; from++) {\n      for (int to : graph.get(from)) {\n        long hash = ((long) from) << 32 | to;\n        Integer count = map.get(hash);\n        if (count == null) count = 0;\n        map.put(hash, count + 1);\n      }\n    }\n\n    for (int i = 1; i < ordering.length; i++) {\n      int from = ordering[i - 1];\n      int to = ordering[i];\n\n      // Make sure edge has not yet been taken\n      long hash = ((long) from) << 32 | to;\n      Integer count = map.get(hash);\n      assertThat(count).isNotNull();\n      assertThat(count).isGreaterThan(0);\n      map.put(hash, count - 1);\n    }\n\n    // Make sure all edges were used\n    for (long hash : map.keySet()) {\n      int count = map.get(hash);\n      assertThat(count).isEqualTo(0);\n    }\n  }\n\n  @Test\n  public void testEmptyGraph() {\n    List<List<Integer>> graph = initializeEmptyGraph(0);\n    EulerianPathDirectedEdgesAdjacencyList solver;\n    solver = new EulerianPathDirectedEdgesAdjacencyList(graph);\n    assertThat(solver.getEulerianPath()).isNull();\n  }\n\n  @Test\n  public void testGraphWithNoEdges() {\n    List<List<Integer>> graph = initializeEmptyGraph(5);\n    EulerianPathDirectedEdgesAdjacencyList solver;\n    solver = new EulerianPathDirectedEdgesAdjacencyList(graph);\n    assertThat(solver.getEulerianPath()).isNull();\n  }\n\n  @Test\n  public void testGraphAllEqualEdgeFrequency() {\n    int n = 2;\n    List<List<Integer>> graph = initializeEmptyGraph(n);\n    addDirectedEdge(graph, 0, 1);\n    addDirectedEdge(graph, 0, 1);\n    addDirectedEdge(graph, 1, 0);\n    addDirectedEdge(graph, 1, 0);\n\n    verifyEulerianPath(graph);\n  }\n\n  @Test\n  public void testGraphAllEqualEdgeFrequency2() {\n    int n = 4;\n    List<List<Integer>> graph = initializeEmptyGraph(n);\n    addDirectedEdge(graph, 0, 2);\n    addDirectedEdge(graph, 2, 1);\n    addDirectedEdge(graph, 2, 3);\n    addDirectedEdge(graph, 3, 0);\n    addDirectedEdge(graph, 3, 1);\n    addDirectedEdge(graph, 1, 0);\n    addDirectedEdge(graph, 1, 2);\n    addDirectedEdge(graph, 0, 3);\n\n    verifyEulerianPath(graph);\n  }\n\n  @Test\n  public void testInvalidGraph1() {\n    int n = 2;\n    List<List<Integer>> graph = initializeEmptyGraph(n);\n    addDirectedEdge(graph, 0, 1);\n    addDirectedEdge(graph, 0, 1);\n\n    EulerianPathDirectedEdgesAdjacencyList solver;\n    solver = new EulerianPathDirectedEdgesAdjacencyList(graph);\n    assertThat(solver.getEulerianPath()).isNull();\n  }\n\n  @Test\n  public void testInvalidGraph2() {\n    int n = 3;\n    List<List<Integer>> graph = initializeEmptyGraph(n);\n    addDirectedEdge(graph, 0, 1);\n    addDirectedEdge(graph, 1, 0);\n    addDirectedEdge(graph, 1, 2);\n    addDirectedEdge(graph, 2, 0);\n    addDirectedEdge(graph, 2, 0);\n\n    EulerianPathDirectedEdgesAdjacencyList solver;\n    solver = new EulerianPathDirectedEdgesAdjacencyList(graph);\n    assertThat(solver.getEulerianPath()).isNull();\n  }\n\n  @Test\n  public void testInvalidGraph3() {\n    int n = 4;\n    List<List<Integer>> graph = initializeEmptyGraph(n);\n\n    // Add edges.\n    addDirectedEdge(graph, 0, 2);\n    addDirectedEdge(graph, 2, 1);\n    addDirectedEdge(graph, 2, 3);\n    addDirectedEdge(graph, 3, 0);\n    addDirectedEdge(graph, 3, 1);\n    addDirectedEdge(graph, 1, 3);\n    addDirectedEdge(graph, 1, 0);\n    addDirectedEdge(graph, 1, 2);\n    addDirectedEdge(graph, 0, 3);\n    addDirectedEdge(graph, 2, 0);\n\n    EulerianPathDirectedEdgesAdjacencyList solver;\n    solver = new EulerianPathDirectedEdgesAdjacencyList(graph);\n    assertThat(solver.getEulerianPath()).isNull();\n  }\n\n  @Test\n  public void testInvalidGraph4() {\n    int n = 4;\n    List<List<Integer>> graph = initializeEmptyGraph(n);\n\n    // Add edges.\n    addDirectedEdge(graph, 0, 2);\n    addDirectedEdge(graph, 2, 3);\n    addDirectedEdge(graph, 3, 1);\n    addDirectedEdge(graph, 1, 0);\n    addDirectedEdge(graph, 1, 2);\n    addDirectedEdge(graph, 0, 3);\n\n    EulerianPathDirectedEdgesAdjacencyList solver;\n    solver = new EulerianPathDirectedEdgesAdjacencyList(graph);\n    assertThat(solver.getEulerianPath()).isNull();\n  }\n\n  @Test\n  public void testOneNodeSelfLoopGraph() {\n    int n = 1;\n    List<List<Integer>> graph = initializeEmptyGraph(n);\n    addDirectedEdge(graph, 0, 0);\n    verifyEulerianPath(graph);\n  }\n\n  @Test\n  public void testOneNodeMultipleSelfLoopsGraph() {\n    int n = 1;\n    List<List<Integer>> graph = initializeEmptyGraph(n);\n    addDirectedEdge(graph, 0, 0);\n    addDirectedEdge(graph, 0, 0);\n    addDirectedEdge(graph, 0, 0);\n    addDirectedEdge(graph, 0, 0);\n    addDirectedEdge(graph, 0, 0);\n    verifyEulerianPath(graph);\n  }\n\n  @Test\n  public void testMultiPartDisconnectedGraph() {\n    int n = 6;\n    List<List<Integer>> graph = initializeEmptyGraph(n);\n\n    addDirectedEdge(graph, 2, 1);\n    addDirectedEdge(graph, 1, 2);\n\n    addDirectedEdge(graph, 3, 4);\n    addDirectedEdge(graph, 4, 5);\n    addDirectedEdge(graph, 5, 3);\n\n    EulerianPathDirectedEdgesAdjacencyList solver;\n    solver = new EulerianPathDirectedEdgesAdjacencyList(graph);\n    assertThat(solver.getEulerianPath()).isNull();\n  }\n\n  @Test\n  public void testMultiPartDisconnectedGraph2() {\n    int n = 4;\n    List<List<Integer>> graph = initializeEmptyGraph(n);\n\n    addDirectedEdge(graph, 0, 1);\n    addDirectedEdge(graph, 2, 3);\n\n    EulerianPathDirectedEdgesAdjacencyList solver;\n    solver = new EulerianPathDirectedEdgesAdjacencyList(graph);\n    assertThat(solver.getEulerianPath()).isNull();\n  }\n\n  @Test\n  public void testSimpleGraph() {\n    int n = 5;\n    List<List<Integer>> graph = initializeEmptyGraph(n);\n\n    addDirectedEdge(graph, 0, 1);\n    addDirectedEdge(graph, 1, 2);\n    addDirectedEdge(graph, 1, 3);\n    addDirectedEdge(graph, 1, 4);\n    addDirectedEdge(graph, 2, 1);\n    addDirectedEdge(graph, 4, 1);\n\n    verifyEulerianPath(graph);\n  }\n\n  @Test\n  public void testPathUniqueStartAndEndNodes() {\n    int n = 4;\n    List<List<Integer>> graph = initializeEmptyGraph(n);\n\n    // Add edges.\n    addDirectedEdge(graph, 0, 2);\n    addDirectedEdge(graph, 2, 1);\n    addDirectedEdge(graph, 2, 3);\n    addDirectedEdge(graph, 3, 0);\n    addDirectedEdge(graph, 3, 1);\n    addDirectedEdge(graph, 1, 3);\n    addDirectedEdge(graph, 1, 0);\n    addDirectedEdge(graph, 1, 2);\n    addDirectedEdge(graph, 0, 3);\n\n    verifyEulerianPath(graph);\n  }\n\n  @Test\n  public void testGraphWithUniquePath() {\n    int n = 10;\n    List<List<Integer>> graph = initializeEmptyGraph(n);\n    addDirectedEdge(graph, 0, 2);\n    addDirectedEdge(graph, 1, 3);\n    addDirectedEdge(graph, 2, 1);\n    addDirectedEdge(graph, 3, 0);\n    addDirectedEdge(graph, 3, 4);\n    addDirectedEdge(graph, 6, 3);\n    addDirectedEdge(graph, 6, 7);\n    addDirectedEdge(graph, 7, 8);\n    addDirectedEdge(graph, 8, 9);\n    addDirectedEdge(graph, 9, 6);\n\n    verifyEulerianPath(graph);\n\n    EulerianPathDirectedEdgesAdjacencyList solver;\n    solver = new EulerianPathDirectedEdgesAdjacencyList(graph);\n    int[] path = solver.getEulerianPath();\n    int[] expected = {6, 7, 8, 9, 6, 3, 0, 2, 1, 3, 4};\n    assertThat(path).isEqualTo(expected);\n  }\n\n  // There should be an Eulerian path on this directed graph from node 1 to node 0;\n  @Test\n  public void testSomewhatComplexPath() {\n    int n = 9;\n    List<List<Integer>> graph = initializeEmptyGraph(n);\n\n    // Component connecting edges\n    addDirectedEdge(graph, 6, 7);\n    addDirectedEdge(graph, 4, 1);\n    addDirectedEdge(graph, 7, 0);\n    addDirectedEdge(graph, 1, 5);\n    addDirectedEdge(graph, 1, 3);\n\n    addDirectedEdge(graph, 1, 2);\n    addDirectedEdge(graph, 1, 2);\n    addDirectedEdge(graph, 2, 1);\n    addDirectedEdge(graph, 2, 1);\n\n    addDirectedEdge(graph, 3, 4);\n    addDirectedEdge(graph, 3, 4);\n    addDirectedEdge(graph, 4, 3);\n\n    addDirectedEdge(graph, 5, 6);\n    addDirectedEdge(graph, 5, 6);\n    addDirectedEdge(graph, 6, 5);\n\n    addDirectedEdge(graph, 7, 8);\n    addDirectedEdge(graph, 8, 7);\n\n    verifyEulerianPath(graph);\n  }\n}\n"}
{"code_source": "/**\n * A Fenwick Tree implementation which supports point updates and sum range queries\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.fenwicktree;\n\npublic class FenwickTreeRangeQueryPointUpdate {\n\n  // The size of the array holding the Fenwick tree values\n  final int N;\n\n  // This array contains the Fenwick tree ranges\n  private long[] tree;\n\n  // Create an empty Fenwick Tree with 'sz' parameter zero based.\n  public FenwickTreeRangeQueryPointUpdate(int sz) {\n    tree = new long[(N = sz + 1)];\n  }\n\n  // Construct a Fenwick tree with an initial set of values.\n  // The 'values' array MUST BE ONE BASED meaning values[0]\n  // does not get used, O(n) construction.\n  public FenwickTreeRangeQueryPointUpdate(long[] values) {\n\n    if (values == null) throw new IllegalArgumentException(\"Values array cannot be null!\");\n\n    N = values.length;\n    values[0] = 0L;\n\n    // Make a clone of the values array since we manipulate\n    // the array in place destroying all its original content.\n    tree = values.clone();\n\n    for (int i = 1; i < N; i++) {\n      int parent = i + lsb(i);\n      if (parent < N) tree[parent] += tree[i];\n    }\n  }\n\n  // Returns the value of the least significant bit (LSB)\n  // lsb(108) = lsb(0b1101100) =     0b100 = 4\n  // lsb(104) = lsb(0b1101000) =    0b1000 = 8\n  // lsb(96)  = lsb(0b1100000) =  0b100000 = 32\n  // lsb(64)  = lsb(0b1000000) = 0b1000000 = 64\n  private static int lsb(int i) {\n\n    // Isolates the lowest one bit value\n    return i & -i;\n\n    // An alternative method is to use the Java's built in method\n    // return Integer.lowestOneBit(i);\n\n  }\n\n  // Computes the prefix sum from [1, i], O(log(n))\n  private long prefixSum(int i) {\n    long sum = 0L;\n    while (i != 0) {\n      sum += tree[i];\n      i &= ~lsb(i); // Equivalently, i -= lsb(i);\n    }\n    return sum;\n  }\n\n  // Returns the sum of the interval [left, right], O(log(n))\n  public long sum(int left, int right) {\n    if (right < left) throw new IllegalArgumentException(\"Make sure right >= left\");\n    return prefixSum(right) - prefixSum(left - 1);\n  }\n\n  // Get the value at index i\n  public long get(int i) {\n    return sum(i, i);\n  }\n\n  // Add 'v' to index 'i', O(log(n))\n  public void add(int i, long v) {\n    while (i < N) {\n      tree[i] += v;\n      i += lsb(i);\n    }\n  }\n\n  // Set index i to be equal to v, O(log(n))\n  public void set(int i, long v) {\n    add(i, v - sum(i, i));\n  }\n\n  @Override\n  public String toString() {\n    return java.util.Arrays.toString(tree);\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.fenwicktree;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class FenwickTreeRangeQueryPointUpdateTest {\n\n  static final int MIN_RAND_NUM = -1000;\n  static final int MAX_RAND_NUM = +1000;\n\n  static final int TEST_SZ = 1000;\n  static final int LOOPS = 1000;\n\n  static long UNUSED_VAL;\n\n  @Before\n  public void setup() {\n    UNUSED_VAL = randValue();\n  }\n\n  @Test\n  public void testIntervalSumPositiveValues() {\n\n    // System.out.println(\"testIntervalSumPositiveValues\");\n    long[] ar = {UNUSED_VAL, 1, 2, 3, 4, 5, 6};\n    FenwickTreeRangeQueryPointUpdate ft = new FenwickTreeRangeQueryPointUpdate(ar);\n\n    assertThat(ft.sum(1, 6)).isEqualTo(21);\n    assertThat(ft.sum(1, 5)).isEqualTo(15);\n    assertThat(ft.sum(1, 4)).isEqualTo(10);\n    assertThat(ft.sum(1, 3)).isEqualTo(6);\n    assertThat(ft.sum(1, 2)).isEqualTo(3);\n    assertThat(ft.sum(1, 1)).isEqualTo(1);\n    // assertThat(ft.sum(1, 0)).isEqualTo(0);\n\n    assertThat(ft.sum(3, 4)).isEqualTo(7);\n    assertThat(ft.sum(2, 6)).isEqualTo(20);\n    assertThat(ft.sum(4, 5)).isEqualTo(9);\n    assertThat(ft.sum(6, 6)).isEqualTo(6);\n    assertThat(ft.sum(5, 5)).isEqualTo(5);\n    assertThat(ft.sum(4, 4)).isEqualTo(4);\n    assertThat(ft.sum(3, 3)).isEqualTo(3);\n    assertThat(ft.sum(2, 2)).isEqualTo(2);\n    assertThat(ft.sum(1, 1)).isEqualTo(1);\n  }\n\n  @Test\n  public void testIntervalSumNegativeValues() {\n\n    // System.out.println(\"testIntervalSumNegativeValues\");\n    long[] ar = {UNUSED_VAL, -1, -2, -3, -4, -5, -6};\n    FenwickTreeRangeQueryPointUpdate ft = new FenwickTreeRangeQueryPointUpdate(ar);\n\n    assertThat(ft.sum(1, 6)).isEqualTo(-21);\n    assertThat(ft.sum(1, 5)).isEqualTo(-15);\n    assertThat(ft.sum(1, 4)).isEqualTo(-10);\n    assertThat(ft.sum(1, 3)).isEqualTo(-6);\n    assertThat(ft.sum(1, 2)).isEqualTo(-3);\n    assertThat(ft.sum(1, 1)).isEqualTo(-1);\n\n    assertThat(ft.sum(6, 6)).isEqualTo(-6);\n    assertThat(ft.sum(5, 5)).isEqualTo(-5);\n    assertThat(ft.sum(4, 4)).isEqualTo(-4);\n    assertThat(ft.sum(3, 3)).isEqualTo(-3);\n    assertThat(ft.sum(2, 2)).isEqualTo(-2);\n    assertThat(ft.sum(1, 1)).isEqualTo(-1);\n  }\n\n  @Test\n  public void testIntervalSumNegativeValues2() {\n\n    // System.out.println(\"testIntervalSumNegativeValues2\");\n    long[] ar = {UNUSED_VAL, -76871, -164790};\n    FenwickTreeRangeQueryPointUpdate ft = new FenwickTreeRangeQueryPointUpdate(ar);\n\n    for (int i = 0; i < LOOPS; i++) {\n      assertThat(ft.sum(1, 1)).isEqualTo(-76871);\n      assertThat(ft.sum(1, 1)).isEqualTo(-76871);\n      assertThat(ft.sum(1, 2)).isEqualTo(-241661);\n      assertThat(ft.sum(1, 2)).isEqualTo(-241661);\n      assertThat(ft.sum(1, 2)).isEqualTo(-241661);\n      assertThat(ft.sum(2, 2)).isEqualTo(-164790);\n      assertThat(ft.sum(2, 2)).isEqualTo(-164790);\n      assertThat(ft.sum(2, 2)).isEqualTo(-164790);\n    }\n  }\n\n  @Test\n  public void testRandomizedStaticSumQueries() {\n\n    // System.out.println(\"testRandomizedStaticSumQueries\");\n    for (int i = 1; i <= LOOPS; i++) {\n\n      long[] randList = genRandList(i);\n      FenwickTreeRangeQueryPointUpdate ft = new FenwickTreeRangeQueryPointUpdate(randList);\n\n      for (int j = 0; j < LOOPS / 10; j++) {\n        doRandomRangeQuery(randList, ft);\n      }\n    }\n  }\n\n  public void doRandomRangeQuery(long[] arr, FenwickTreeRangeQueryPointUpdate ft) {\n\n    long sum = 0L;\n    int N = arr.length - 1;\n\n    int lo = lowBound(N);\n    int hi = highBound(lo, N);\n\n    // System.out.println(\"LO: \" + lo + \" HI: \" + hi + \" N: \" + N);\n\n    for (int k = lo; k <= hi; k++) sum += arr[k];\n\n    assertThat(ft.sum(lo, hi)).isEqualTo(sum);\n  }\n\n  @Test\n  public void testRandomizedSetSumQueries() {\n\n    // System.out.println(\"testRandomizedSetSumQueries\");\n    for (int n = 2; n <= LOOPS; n++) {\n\n      long[] randList = genRandList(n);\n      FenwickTreeRangeQueryPointUpdate ft = new FenwickTreeRangeQueryPointUpdate(randList);\n\n      for (int j = 0; j < LOOPS / 10; j++) {\n\n        int index = 1 + ((int) Math.random() * n);\n        long rand_val = randValue();\n\n        randList[index] += rand_val;\n        ft.add(index, rand_val);\n\n        doRandomRangeQuery(randList, ft);\n      }\n    }\n  }\n\n  @Test\n  public void testReusability() {\n\n    int SIZE = 1000;\n    FenwickTreeRangeQueryPointUpdate ft = new FenwickTreeRangeQueryPointUpdate(SIZE);\n    long[] arr = new long[SIZE + 1];\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      for (int i = 1; i <= SIZE; i++) {\n        long val = randValue();\n        ft.set(i, val);\n        arr[i] = val;\n      }\n      doRandomRangeQuery(arr, ft);\n    }\n  }\n\n  public static int lowBound(int N) {\n    return 1 + (int) (Math.random() * N);\n  }\n\n  public static int highBound(int low, int N) {\n    return Math.min(N, low + (int) (Math.random() * N));\n  }\n\n  public static long randValue() {\n    return (long) (Math.random() * MAX_RAND_NUM * 2) + MIN_RAND_NUM;\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testIllegalCreation() {\n    new FenwickTreeRangeQueryPointUpdate(null);\n  }\n\n  // Generate a list of random numbers, one based\n  static long[] genRandList(int sz) {\n    long[] lst = new long[sz + 1];\n    for (int i = 1; i <= sz; i++) {\n      lst[i] = randValue();\n    }\n    return lst;\n  }\n}\n"}
{"code_source": "/**\n * A Fenwick Tree implementation which supports range updates and point queries\n *\n * @author Braj65, William Fiset\n */\npackage com.williamfiset.algorithms.datastructures.fenwicktree;\n\npublic class FenwickTreeRangeUpdatePointQuery {\n\n  // The size of the array holding the Fenwick tree values\n  final int N;\n\n  // This array contains the original Fenwick tree range\n  // values from when it was first created.\n  private long[] originalTree;\n\n  // The current tree will contain the updated range values\n  private long[] currentTree;\n\n  // Construct a Fenwick tree with an initial set of values.\n  // The 'values' array MUST BE ONE BASED meaning values[0]\n  // does not get used, O(n) construction.\n  public FenwickTreeRangeUpdatePointQuery(long[] values) {\n\n    if (values == null) throw new IllegalArgumentException(\"Values array cannot be null!\");\n\n    N = values.length;\n    values[0] = 0L;\n\n    // Make a clone of the values array since we manipulate\n    // the array in place destroying all its original content.\n    long[] fenwickTree = values.clone();\n\n    for (int i = 1; i < N; i++) {\n      int parent = i + lsb(i);\n      if (parent < N) fenwickTree[parent] += fenwickTree[i];\n    }\n\n    originalTree = fenwickTree;\n    currentTree = fenwickTree.clone();\n  }\n\n  // Update the interval [left, right] with the value 'val', O(log(n))\n  public void updateRange(int left, int right, long val) {\n    add(left, +val);\n    add(right + 1, -val);\n  }\n\n  // Add 'v' to index 'i' and all the ranges responsible for 'i', O(log(n))\n  private void add(int i, long v) {\n    while (i < N) {\n      currentTree[i] += v;\n      i += lsb(i);\n    }\n  }\n\n  // Get the value at a specific index. The logic behind this method is the\n  // same as finding the prefix sum in a Fenwick tree except that you need to\n  // take the difference between the current tree and the original to get\n  // the point value.\n  public long get(int i) {\n    return prefixSum(i, currentTree) - prefixSum(i - 1, originalTree);\n  }\n\n  // Computes the prefix sum from [1, i], O(log(n))\n  private long prefixSum(int i, long[] tree) {\n    long sum = 0L;\n    while (i != 0) {\n      sum += tree[i];\n      i &= ~lsb(i); // Equivalently, i -= lsb(i);\n    }\n    return sum;\n  }\n\n  // Returns the value of the least significant bit (LSB)\n  // lsb(108) = lsb(0b1101100) = 0b100 = 4\n  // lsb(104) = lsb(0b1101000) = 0b1000 = 8\n  // lsb(96)  = lsb(0b1100000) = 0b100000 = 32\n  // lsb(64)  = lsb(0b1000000) = 0b1000000 = 64\n  private static int lsb(int i) {\n\n    // Isolates the lowest one bit value\n    return i & -i;\n\n    // An alternative method is to use the Java's built in method\n    // return Integer.lowestOneBit(i);\n\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.fenwicktree;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class FenwickTreeRangeUpdatePointQueryTest {\n\n  static class MockRangeUpdateFt {\n    long[] ar;\n\n    public MockRangeUpdateFt(long[] values) {\n      ar = values.clone();\n    }\n\n    public long get(int i) {\n      return ar[i];\n    }\n\n    public void updateRange(int i, int j, long v) {\n      for (int k = i; k <= j; k++) ar[k] += v;\n    }\n  }\n\n  static final int MIN_RAND_NUM = -1000;\n  static final int MAX_RAND_NUM = +1000;\n\n  static final int TEST_SZ = 1000;\n  static final int LOOPS = 1000;\n\n  static long UNUSED_VAL;\n\n  @Before\n  public void setup() {\n    UNUSED_VAL = randValue();\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testIllegalCreation() {\n    new FenwickTreeRangeUpdatePointQuery(null);\n  }\n\n  @Test\n  public void testFenwickTreeRangeUpdatePointQueryNegativeNumbers() {\n\n    long[] values = {UNUSED_VAL, -1, -1, -1, -1, -1};\n    FenwickTreeRangeUpdatePointQuery ft = new FenwickTreeRangeUpdatePointQuery(values);\n    ft.updateRange(2, 4, 10);\n    assertThat(ft.get(1)).isEqualTo(-1);\n    assertThat(ft.get(2)).isEqualTo(9);\n    assertThat(ft.get(3)).isEqualTo(9);\n    assertThat(ft.get(4)).isEqualTo(9);\n    assertThat(ft.get(5)).isEqualTo(-1);\n  }\n\n  @Test\n  public void testFenwickTreeRangeUpdatePointQuerySimple() {\n\n    long[] values = {UNUSED_VAL, 2, 3, 4, 5, 6};\n    FenwickTreeRangeUpdatePointQuery ft = new FenwickTreeRangeUpdatePointQuery(values);\n    ft.updateRange(2, 4, 10);\n    assertThat(ft.get(1)).isEqualTo(2);\n    assertThat(ft.get(2)).isEqualTo(13);\n    assertThat(ft.get(3)).isEqualTo(14);\n    assertThat(ft.get(4)).isEqualTo(15);\n    assertThat(ft.get(5)).isEqualTo(6);\n  }\n\n  @Test\n  public void testFenwickTreeRangeUpdatePointQuerySimple2() {\n\n    long[] values = {UNUSED_VAL, 2, -3, -4, 5, 6};\n    FenwickTreeRangeUpdatePointQuery ft = new FenwickTreeRangeUpdatePointQuery(values);\n    ft.updateRange(2, 4, 10);\n    assertThat(ft.get(1)).isEqualTo(2);\n    assertThat(ft.get(2)).isEqualTo(7);\n    assertThat(ft.get(3)).isEqualTo(6);\n    assertThat(ft.get(4)).isEqualTo(15);\n    assertThat(ft.get(5)).isEqualTo(6);\n  }\n\n  @Test\n  public void testFenwickTreeRangeUpdatePointQueryRepeatedAddition() {\n\n    int n = 100;\n    long[] values = new long[n];\n    values[0] = UNUSED_VAL;\n    FenwickTreeRangeUpdatePointQuery ft = new FenwickTreeRangeUpdatePointQuery(values);\n\n    int sum = 0;\n    int delta = 10;\n\n    for (int loop = 0; loop < TEST_SZ; loop++) {\n      for (int i = 1; i < n; i++) assertThat(ft.get(i)).isEqualTo(sum);\n      ft.updateRange(1, n - 1, delta);\n      sum += delta;\n    }\n  }\n\n  @Test\n  public void testFenwickTreeRangeUpdatePointQueryOverlappingRanges() {\n\n    // Setup values\n    int n = 100;\n    long[] values = new long[n];\n    for (int i = 0; i < n; i++) values[i] = randValue();\n\n    FenwickTreeRangeUpdatePointQuery ft = new FenwickTreeRangeUpdatePointQuery(values);\n    MockRangeUpdateFt mockedFt = new MockRangeUpdateFt(values);\n\n    for (int loop = 0; loop < TEST_SZ; loop++) {\n\n      for (int i = 1; i < n; i++) assertThat(ft.get(i)).isEqualTo(mockedFt.get(i));\n\n      long delta = randValue();\n      int lo = lowBound(n);\n      int hi = highBound(lo, n - 1);\n\n      mockedFt.updateRange(lo, hi, delta);\n      ft.updateRange(lo, hi, delta);\n    }\n  }\n\n  // Select a lower bound index for the Fenwick tree\n  public static int lowBound(int N) {\n    return 1 + (int) (Math.random() * N);\n  }\n\n  // Select an upper bound index for the Fenwick tree\n  public static int highBound(int low, int N) {\n    return Math.min(N, low + (int) (Math.random() * N));\n  }\n\n  public static long randValue() {\n    return (long) (Math.random() * MAX_RAND_NUM * 2) + MIN_RAND_NUM;\n  }\n}\n"}
{"code_source": "/**\n * FibonacciHeap data structure implementation.\n *\n * <p>Disclaimer: implementation based on:\n * http://staff.ustc.edu.cn/~csli/graduate/algorithms/book6/chap21.htm Implementation credits to the\n * respective code owners.\n */\npackage com.williamfiset.algorithms.datastructures.fibonacciheap;\n\nimport static java.lang.Math.floor;\nimport static java.lang.Math.log;\nimport static java.lang.Math.sqrt;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Queue;\nimport java.util.Set;\nimport java.util.Stack;\n\npublic final class FibonacciHeap<E> implements Queue<E> {\n\n  private static final double LOG_PHI = log((1 + sqrt(5)) / 2);\n\n  private final Set<E> elementsIndex = new HashSet<E>();\n\n  private final Comparator<? super E> comparator;\n\n  private int size = 0;\n\n  private int trees = 0;\n\n  private int markedNodes = 0;\n\n  private FibonacciHeapNode<E> minimumNode;\n\n  public FibonacciHeap() {\n    this(null);\n  }\n\n  public FibonacciHeap(/* @Nullable */ Comparator<? super E> comparator) {\n    this.comparator = comparator;\n  }\n\n  private void moveToRoot(FibonacciHeapNode<E> node) {\n    // 8'  if min[H] = NIL\n    if (isEmpty()) {\n      // then min[H] <- x\n      minimumNode = node;\n    } else {\n      // 7 concatenate the root list containing x with root list H\n      node.getLeft().setRight(node.getRight());\n      node.getRight().setLeft(node.getLeft());\n\n      node.setLeft(minimumNode);\n      node.setRight(minimumNode.getRight());\n      minimumNode.setRight(node);\n      node.getRight().setLeft(node);\n\n      // 8''  if key[x] < key[min[H]]\n      if (compare(node, minimumNode) < 0) {\n        // 9     then min[H] <- x\n        minimumNode = node;\n      }\n    }\n  }\n\n  public boolean add(E e) {\n    if (e == null) {\n      throw new IllegalArgumentException(\n          \"Null elements not allowed in this FibonacciHeap implementation.\");\n    }\n\n    // 1-6 performed in the node initialization\n    FibonacciHeapNode<E> node = new FibonacciHeapNode<E>(e);\n\n    // 7-9 performed in the #moveToRoot( FibonacciHeapNode<E> ) method\n    moveToRoot(node);\n\n    // 10  n[H] <- n[H] + 1\n    size++;\n\n    elementsIndex.add(e);\n\n    return true;\n  }\n\n  /** {@inheritDoc} */\n  public boolean addAll(Collection<? extends E> c) {\n    for (E element : c) {\n      add(element);\n    }\n\n    return true;\n  }\n\n  /** {@inheritDoc} */\n  public void clear() {\n    minimumNode = null;\n    size = 0;\n    trees = 0;\n    markedNodes = 0;\n    elementsIndex.clear();\n  }\n\n  /** {@inheritDoc} */\n  public boolean contains(Object o) {\n    if (o == null) {\n      return false;\n    }\n\n    return elementsIndex.contains(o);\n  }\n\n  /** {@inheritDoc} */\n  public boolean containsAll(Collection<?> c) {\n    if (c == null) {\n      return false;\n    }\n\n    for (Object o : c) {\n      if (!contains(o)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /** {@inheritDoc} */\n  public boolean isEmpty() {\n    return minimumNode == null;\n  }\n\n  /** {@inheritDoc} */\n  public Iterator<E> iterator() {\n    throw new UnsupportedOperationException();\n  }\n\n  /** {@inheritDoc} */\n  public boolean remove(Object o) {\n    throw new UnsupportedOperationException();\n  }\n\n  /** {@inheritDoc} */\n  public boolean removeAll(Collection<?> c) {\n    throw new UnsupportedOperationException();\n  }\n\n  /** {@inheritDoc} */\n  public boolean retainAll(Collection<?> c) {\n    throw new UnsupportedOperationException();\n  }\n\n  /** {@inheritDoc} */\n  public int size() {\n    return size;\n  }\n\n  /** {@inheritDoc} */\n  public Object[] toArray() {\n    throw new UnsupportedOperationException();\n  }\n\n  /** {@inheritDoc} */\n  public <T> T[] toArray(T[] a) {\n    throw new UnsupportedOperationException();\n  }\n\n  /** {@inheritDoc} */\n  public E element() {\n    if (isEmpty()) {\n      throw new NoSuchElementException();\n    }\n    return peek();\n  }\n\n  /** {@inheritDoc} */\n  public boolean offer(E e) {\n    return add(e);\n  }\n\n  /** {@inheritDoc} */\n  public E peek() {\n    if (isEmpty()) {\n      return null;\n    }\n\n    return minimumNode.getElement();\n  }\n\n  public E poll() {\n    // 2  if z &ne; NIL\n    if (isEmpty()) {\n      return null;\n    }\n\n    // 1  z <- min[H]\n    FibonacciHeapNode<E> z = minimumNode;\n    int numOfKids = z.getDegree();\n\n    FibonacciHeapNode<E> x = z.getChild();\n    FibonacciHeapNode<E> tempRight;\n\n    while (numOfKids > 0) {\n      // 3  for each child x of z\n      tempRight = x.getRight();\n\n      // 4  do add x to the root list of H\n      moveToRoot(x);\n\n      // 5  p[x] <- NIL\n      x.setParent(null);\n\n      x = tempRight;\n      numOfKids--;\n    }\n\n    // 6  remove z from the root list of H\n    z.getLeft().setRight(z.getRight());\n    z.getRight().setLeft(z.getLeft());\n\n    // 7  if z = right[z]\n    if (z == z.getRight()) {\n      // 8  min[H] <- NIL\n      minimumNode = null;\n    } else {\n      // 9  min[H] <- right[z]\n      minimumNode = z.getRight();\n      // 10  CONSOLIDATE(H)\n      consolidate();\n    }\n\n    // 11  n[H] <- n[H] - 1\n    size--;\n\n    E minimum = z.getElement();\n    elementsIndex.remove(minimum);\n    // 12  return z\n    return minimum;\n  }\n\n  /** {@inheritDoc} */\n  public E remove() {\n    // FIB-HEAP-EXTRACT-MIN(H)\n\n    if (isEmpty()) {\n      throw new NoSuchElementException();\n    }\n\n    return poll();\n  }\n\n  private void consolidate() {\n    if (isEmpty()) {\n      return;\n    }\n\n    // D( n[H] ) <= log_phi( n[H] )\n    // -> log_phi( n[H] ) = log( n[H] ) / log( phi )\n    // -> D( n[H] ) = log( n[H] ) / log( phi )\n    int arraySize = ((int) floor(log(size) / LOG_PHI));\n\n    // 1  for i <- 0 to D(n[H])\n    List<FibonacciHeapNode<E>> nodeSequence = new ArrayList<FibonacciHeapNode<E>>(arraySize);\n    for (int i = 0; i < arraySize; i++) {\n      // 2      do A[i] <- NIL\n      nodeSequence.add(i, null);\n    }\n\n    int numRoots = 0;\n\n    // 3  for each node x in the root list of H\n    // 4  do x &larr; w\n    FibonacciHeapNode<E> x = minimumNode;\n\n    if (x != null) {\n      numRoots++;\n      x = x.getRight();\n\n      while (x != minimumNode) {\n        numRoots++;\n        x = x.getRight();\n      }\n    }\n\n    while (numRoots > 0) {\n      // 5  d <- degree[x]\n      int degree = x.getDegree();\n      FibonacciHeapNode<E> next = x.getRight();\n\n      // 6  while A[d] != NIL\n      while (nodeSequence.get(degree) != null) {\n        // 7  do y <- A[d]\n        FibonacciHeapNode<E> y = nodeSequence.get(degree);\n\n        // 8  if key[x] > key[y]\n        if (compare(x, y) > 0) {\n          // 9  exchange x <-> y\n          FibonacciHeapNode<E> pointer = y;\n          y = x;\n          x = pointer;\n        }\n\n        // 10  FIB-HEAP-LINK(H,y,x)\n        link(y, x);\n\n        // 11  A[d] <- NIL\n        nodeSequence.set(degree, null);\n\n        // 12  d <- d + 1\n        degree++;\n      }\n\n      // 13  A[d] <- x\n      nodeSequence.set(degree, x);\n\n      x = next;\n      numRoots--;\n    }\n\n    // 14  min[H] <- NIL\n    minimumNode = null;\n\n    // 15  for i <- 0 to D(n[H])\n    for (FibonacciHeapNode<E> pointer : nodeSequence) {\n      if (pointer == null) {\n        continue;\n      }\n      if (minimumNode == null) {\n        minimumNode = pointer;\n      }\n\n      // 16 if A[i] != NIL\n      // We've got a live one, add it to root list.\n      if (minimumNode != null) {\n        //  First remove node from root list.\n        moveToRoot(pointer);\n      }\n    }\n  }\n\n  private void link(FibonacciHeapNode<E> y, FibonacciHeapNode<E> x) {\n    // 1 remove y from the root list of H\n    y.getLeft().setRight(y.getRight());\n    y.getRight().setLeft(y.getLeft());\n\n    y.setParent(x);\n\n    if (x.getChild() == null) {\n      // 2 make y a child of x, incrementing degree[x]\n      x.setChild(y);\n      y.setRight(y);\n      y.setLeft(y);\n    } else {\n      y.setLeft(x.getChild());\n      y.setRight(x.getChild().getRight());\n      x.getChild().setRight(y);\n      y.getRight().setLeft(y);\n    }\n\n    x.incraeseDegree();\n\n    // 3 mark[y] <- FALSE\n    y.setMarked(false);\n    markedNodes++;\n  }\n\n  private void cut(FibonacciHeapNode<E> x, FibonacciHeapNode<E> y) {\n    // add x to the root list of H\n    moveToRoot(x);\n\n    // remove x from the child list of y, decrementing degree[y]\n    y.decraeseDegree();\n    // p[x] <- NIL\n    x.setParent(null);\n\n    // mark[x] <- FALSE\n    x.setMarked(false);\n    markedNodes--;\n  }\n\n  private void cascadingCut(FibonacciHeapNode<E> y) {\n    // z <- p[y]\n    FibonacciHeapNode<E> z = y.getParent();\n\n    // if z != NIL\n    if (z != null) {\n      // if mark[y] = FALSE\n      if (!y.isMarked()) {\n        // then mark[y]  TRUE\n        y.setMarked(true);\n        markedNodes++;\n      } else {\n        // else CUT(H,y,z)\n        cut(y, z);\n        // CASCADING-CUT(H,z)\n        cascadingCut(z);\n      }\n    }\n  }\n\n  public int potential() {\n    return trees + 2 * markedNodes;\n  }\n\n  private int compare(FibonacciHeapNode<E> o1, FibonacciHeapNode<E> o2) {\n    if (comparator != null) {\n      return comparator.compare(o1.getElement(), o2.getElement());\n    }\n    @SuppressWarnings(\"unchecked\") // it will throw a ClassCastException at runtime\n    Comparable<? super E> o1Comparable = (Comparable<? super E>) o1.getElement();\n    return o1Comparable.compareTo(o2.getElement());\n  }\n\n  /**\n   * Creates a String representation of this Fibonacci heap.\n   *\n   * @return String of this.\n   */\n  public String toString() {\n    if (minimumNode == null) {\n      return \"FibonacciHeap=[]\";\n    }\n\n    // create a new stack and put root on it\n    Stack<FibonacciHeapNode<E>> stack = new Stack<FibonacciHeapNode<E>>();\n    stack.push(minimumNode);\n\n    StringBuilder buf = new StringBuilder(\"FibonacciHeap=[\");\n\n    // do a simple breadth-first traversal on the tree\n    while (!stack.empty()) {\n      FibonacciHeapNode<E> curr = stack.pop();\n      buf.append(curr);\n      buf.append(\", \");\n\n      if (curr.getChild() != null) {\n        stack.push(curr.getChild());\n      }\n\n      FibonacciHeapNode<E> start = curr;\n      curr = curr.getRight();\n\n      while (curr != start) {\n        buf.append(curr);\n        buf.append(\", \");\n\n        if (curr.getChild() != null) {\n          stack.push(curr.getChild());\n        }\n\n        curr = curr.getRight();\n      }\n    }\n\n    buf.append(']');\n\n    return buf.toString();\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.fibonacciheap;\n\nimport static com.google.common.truth.Truth.assertThat;\nimport static java.util.Collections.sort;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Queue;\nimport java.util.Random;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\n// Disclaimer: Based by help of\n// \"http://langrsoft.com/jeff/2011/11/test-driving-a-heap-based-priority-queue/\">Test-Driving a\n// Heap-Based Priority Queue</a>\n// Credits to the respecti owner for code\n\npublic final class FibonacciHeapTest {\n\n  private Queue<Integer> queue;\n\n  @Before\n  public void setUp() {\n    queue = new FibonacciHeap<Integer>();\n  }\n\n  @After\n  public void tearDown() {\n    queue = null;\n  }\n\n  @Test\n  public void emptyWhenCreated() {\n    assertThat(queue.isEmpty()).isEqualTo(true);\n    assertThat(queue.poll()).isEqualTo(null);\n  }\n\n  @Test\n  public void noLongerEmptyAfterAdd() {\n    queue.add(50);\n\n    assertThat(queue.isEmpty()).isFalse();\n  }\n\n  @Test\n  public void singletonQueueReturnsSoleItemOnPoll() {\n    queue.add(50);\n\n    assertThat(queue.poll()).isEqualTo(50);\n  }\n\n  @Test\n  public void isEmptyAfterSoleElementRemoved() {\n    queue.add(50);\n    queue.poll();\n\n    assertThat(queue.isEmpty()).isEqualTo(true);\n  }\n\n  @Test\n  public void returnsOrderedItems() {\n    queue.add(100);\n    queue.add(50);\n\n    assertThat(queue.poll()).isEqualTo(50);\n    assertThat(queue.poll()).isEqualTo(100);\n    assertThat(queue.isEmpty()).isEqualTo(true);\n  }\n\n  @Test\n  public void insertSingleItem() {\n    queue.add(50);\n\n    assertThat(queue.poll()).isEqualTo(50);\n    assertThat(queue.isEmpty()).isEqualTo(true);\n  }\n\n  @Test\n  public void insertSameValuesAndReturnsOrderedItems() {\n    queue.add(50);\n    queue.add(100);\n    queue.add(50);\n\n    assertThat(queue.poll()).isEqualTo(50);\n    assertThat(queue.poll()).isEqualTo(50);\n    assertThat(queue.poll()).isEqualTo(100);\n    assertThat(queue.isEmpty()).isEqualTo(true);\n  }\n\n  @Test\n  public void returnsOrderedItemsFromRandomInsert() {\n    final Random r = new Random(System.currentTimeMillis());\n    final List<Integer> expected = new ArrayList<Integer>();\n\n    for (int i = 0; i < 1000; i++) {\n      Integer number = r.nextInt(10000);\n      expected.add(number);\n      queue.add(number);\n    }\n    sort(expected);\n\n    for (Integer integer : expected) {\n      Integer i = queue.poll();\n      assertThat(i).isEqualTo(integer);\n    }\n\n    assertThat(queue.isEmpty()).isEqualTo(true);\n  }\n\n  @Test\n  public void addAllAndContinsItem() {\n    Collection<Integer> c = new ArrayList<Integer>();\n\n    c.add(50);\n    c.add(100);\n    c.add(20);\n    c.add(21);\n\n    queue.addAll(c);\n\n    assertThat(queue.isEmpty()).isEqualTo(false);\n    assertThat(queue.containsAll(c)).isEqualTo(true);\n\n    assertThat(queue.contains(100)).isEqualTo(true);\n    assertThat(queue.contains(21)).isEqualTo(true);\n    assertThat(queue.contains(50)).isEqualTo(true);\n    assertThat(queue.contains(20)).isEqualTo(true);\n  }\n\n  @Test\n  public void clearQueue() {\n    final Random r = new Random(System.currentTimeMillis());\n    for (int i = 0; i < 1000; i++) {\n      Integer number = r.nextInt(10000);\n      queue.add(number);\n    }\n\n    assertThat(queue.isEmpty()).isEqualTo(false);\n    queue.clear();\n    assertThat(queue.isEmpty()).isEqualTo(true);\n  }\n\n  @Test\n  public void offerPeekAndElement() {\n    queue.offer(50);\n    queue.offer(100);\n    queue.offer(20);\n    queue.offer(21);\n\n    assertThat(queue.isEmpty()).isFalse();\n    ;\n    assertThat(queue.peek()).isEqualTo(20);\n    assertThat(queue.element()).isEqualTo(20);\n    assertThat(queue.size()).isEqualTo(4);\n  }\n\n  @Test(expected = NoSuchElementException.class)\n  public void elementThrowsException() {\n    queue.element();\n  }\n}\n"}
{"code_source": "/**\n * This file contains an implementation of the Floyd-Warshall algorithm to find all pairs of\n * shortest paths between nodes in a graph. We also demonstrate how to detect negative cycles and\n * reconstruct the shortest path.\n *\n * <p>Time Complexity: O(V^3)\n *\n * @author Micah Stairs, William Fiset\n */\npackage com.williamfiset.algorithms.graphtheory;\n\n// Import Java's special constants \u221e and -\u221e which behave\n// as you expect them to when you do arithmetic. For example,\n// \u221e + \u221e = \u221e, \u221e + x = \u221e, -\u221e + x = -\u221e and \u221e + -\u221e = Nan\nimport static java.lang.Double.NEGATIVE_INFINITY;\nimport static java.lang.Double.POSITIVE_INFINITY;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FloydWarshallSolver {\n\n  private int n;\n  private boolean solved;\n  private double[][] dp;\n  private Integer[][] next;\n\n  private static final int REACHES_NEGATIVE_CYCLE = -1;\n\n  /**\n   * As input, this class takes an adjacency matrix with edge weights between nodes, where\n   * POSITIVE_INFINITY is used to indicate that two nodes are not connected.\n   *\n   * <p>NOTE: Usually the diagonal of the adjacency matrix is all zeros (i.e. matrix[i][i] = 0 for\n   * all i) since there is typically no cost to go from a node to itself, but this may depend on\n   * your graph and the problem you are trying to solve.\n   */\n  public FloydWarshallSolver(double[][] matrix) {\n    n = matrix.length;\n    dp = new double[n][n];\n    next = new Integer[n][n];\n\n    // Copy input matrix and setup 'next' matrix for path reconstruction.\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < n; j++) {\n        if (matrix[i][j] != POSITIVE_INFINITY) next[i][j] = j;\n        dp[i][j] = matrix[i][j];\n      }\n    }\n  }\n\n  /**\n   * Runs Floyd-Warshall to compute the shortest distance between every pair of nodes.\n   *\n   * @return The solved All Pairs Shortest Path (APSP) matrix.\n   */\n  public double[][] getApspMatrix() {\n    solve();\n    return dp;\n  }\n\n  // Executes the Floyd-Warshall algorithm.\n  public void solve() {\n    if (solved) return;\n\n    // Compute all pairs shortest paths.\n    for (int k = 0; k < n; k++) {\n      for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n          if (dp[i][k] + dp[k][j] < dp[i][j]) {\n            dp[i][j] = dp[i][k] + dp[k][j];\n            next[i][j] = next[i][k];\n          }\n        }\n      }\n    }\n\n    // Identify negative cycles by propagating the value 'NEGATIVE_INFINITY'\n    // to every edge that is part of or reaches into a negative cycle.\n    for (int k = 0; k < n; k++)\n      for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n          if (dp[i][k] != POSITIVE_INFINITY && dp[k][j] != POSITIVE_INFINITY && dp[k][k] < 0) {\n            dp[i][j] = NEGATIVE_INFINITY;\n            next[i][j] = REACHES_NEGATIVE_CYCLE;\n          }\n\n    solved = true;\n  }\n\n  /**\n   * Reconstructs the shortest path (of nodes) from 'start' to 'end' inclusive.\n   *\n   * @return An array of nodes indexes of the shortest path from 'start' to 'end'. If 'start' and\n   *     'end' are not connected return an empty array. If the shortest path from 'start' to 'end'\n   *     are reachable by a negative cycle return -1.\n   */\n  public List<Integer> reconstructShortestPath(int start, int end) {\n    solve();\n    List<Integer> path = new ArrayList<>();\n    if (dp[start][end] == POSITIVE_INFINITY) return path;\n    int at = start;\n    for (; at != end; at = next[at][end]) {\n      // Return null since there are an infinite number of shortest paths.\n      if (at == REACHES_NEGATIVE_CYCLE) return null;\n      path.add(at);\n    }\n    // Return null since there are an infinite number of shortest paths.\n    if (next[at][end] == REACHES_NEGATIVE_CYCLE) return null;\n    path.add(end);\n    return path;\n  }\n\n  /* Example usage. */\n\n  // Creates a graph with n nodes. The adjacency matrix is constructed\n  // such that the value of going from a node to itself is 0.\n  public static double[][] createGraph(int n) {\n    double[][] matrix = new double[n][n];\n    for (int i = 0; i < n; i++) {\n      java.util.Arrays.fill(matrix[i], POSITIVE_INFINITY);\n      matrix[i][i] = 0;\n    }\n    return matrix;\n  }\n\n  public static void main(String[] args) {\n    // Construct graph.\n    int n = 7;\n    double[][] m = createGraph(n);\n\n    // Add some edge values.\n    m[0][1] = 2;\n    m[0][2] = 5;\n    m[0][6] = 10;\n    m[1][2] = 2;\n    m[1][4] = 11;\n    m[2][6] = 2;\n    m[6][5] = 11;\n    m[4][5] = 1;\n    m[5][4] = -2;\n\n    FloydWarshallSolver solver = new FloydWarshallSolver(m);\n    double[][] dist = solver.getApspMatrix();\n\n    for (int i = 0; i < n; i++)\n      for (int j = 0; j < n; j++)\n        System.out.printf(\"This shortest path from node %d to node %d is %.3f\\n\", i, j, dist[i][j]);\n\n    // Prints:\n    // This shortest path from node 0 to node 0 is 0.000\n    // This shortest path from node 0 to node 1 is 2.000\n    // This shortest path from node 0 to node 2 is 4.000\n    // This shortest path from node 0 to node 3 is Infinity\n    // This shortest path from node 0 to node 4 is -Infinity\n    // This shortest path from node 0 to node 5 is -Infinity\n    // This shortest path from node 0 to node 6 is 6.000\n    // This shortest path from node 1 to node 0 is Infinity\n    // This shortest path from node 1 to node 1 is 0.000\n    // This shortest path from node 1 to node 2 is 2.000\n    // This shortest path from node 1 to node 3 is Infinity\n    // ...\n\n    System.out.println();\n\n    // Reconstructs the shortest paths from all nodes to every other nodes.\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < n; j++) {\n        List<Integer> path = solver.reconstructShortestPath(i, j);\n        String str;\n        if (path == null) {\n          str = \"HAS AN \u221e NUMBER OF SOLUTIONS! (negative cycle case)\";\n        } else if (path.size() == 0) {\n          str = String.format(\"DOES NOT EXIST (node %d doesn't reach node %d)\", i, j);\n        } else {\n          str =\n              String.join(\n                  \" -> \",\n                  path.stream()\n                      .map(Object::toString)\n                      .collect(java.util.stream.Collectors.toList()));\n          str = \"is: [\" + str + \"]\";\n        }\n\n        System.out.printf(\"The shortest path from node %d to node %d %s\\n\", i, j, str);\n      }\n    }\n\n    // Prints:\n    // The shortest path from node 0 to node 0 is: [0]\n    // The shortest path from node 0 to node 1 is: [0 -> 1]\n    // The shortest path from node 0 to node 2 is: [0 -> 1 -> 2]\n    // The shortest path from node 0 to node 3 DOES NOT EXIST (node 0 doesn't reach node 3)\n    // The shortest path from node 0 to node 4 HAS AN \u221e NUMBER OF SOLUTIONS! (negative cycle case)\n    // The shortest path from node 0 to node 5 HAS AN \u221e NUMBER OF SOLUTIONS! (negative cycle case)\n    // The shortest path from node 0 to node 6 is: [0 -> 1 -> 2 -> 6]\n    // The shortest path from node 1 to node 0 DOES NOT EXIST (node 1 doesn't reach node 0)\n    // The shortest path from node 1 to node 1 is: [1]\n    // The shortest path from node 1 to node 2 is: [1 -> 2]\n    // The shortest path from node 1 to node 3 DOES NOT EXIST (node 1 doesn't reach node 3)\n    // The shortest path from node 1 to node 4 HAS AN \u221e NUMBER OF SOLUTIONS! (negative cycle case)\n    // The shortest path from node 1 to node 5 HAS AN \u221e NUMBER OF SOLUTIONS! (negative cycle case)\n    // The shortest path from node 1 to node 6 is: [1 -> 2 -> 6]\n    // The shortest path from node 2 to node 0 DOES NOT EXIST (node 2 doesn't reach node 0)\n    // ...\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.graphtheory;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.*;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class FloydWarshallSolverTest {\n\n  static final double INF = Double.POSITIVE_INFINITY;\n  static final double NEG_INF = Double.NEGATIVE_INFINITY;\n\n  static double[][] matrix1, matrix2, matrix3;\n\n  @Before\n  public void setup() {\n    matrix1 =\n        new double[][] {\n          {0, INF, INF, INF, INF},\n          {1, 0, 7, INF, INF},\n          {INF, 3, 0, INF, INF},\n          {13, INF, 4, 0, INF},\n          {INF, INF, 3, 0, 0}\n        };\n    matrix2 =\n        new double[][] {\n          {0, 3, 1, 8, INF},\n          {2, 0, 9, 4, INF},\n          {INF, INF, 0, INF, -2},\n          {INF, INF, 1, 0, INF},\n          {INF, INF, INF, 0, 0}\n        };\n    matrix3 =\n        new double[][] {\n          {0, 6, INF, 25, 3},\n          {1, 0, 6, 1, 3},\n          {INF, 1, 0, 2, 3},\n          {4, 4, 4, 0, INF},\n          {4, 3, 5, INF, 0}\n        };\n  }\n\n  private static double[][] createMatrix(int n) {\n    double[][] m = new double[n][n];\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < n; j++) {\n        m[i][j] = Double.POSITIVE_INFINITY;\n        m[i][i] = 0;\n      }\n    }\n    return m;\n  }\n\n  private static void addRandomEdges(double[][] matrix, int count, boolean allowNegativeEdges) {\n    int n = matrix.length;\n    while (count-- > 0) {\n      int i = (int) (Math.random() * n);\n      int j = (int) (Math.random() * n);\n      if (i == j) continue;\n      int v = (int) (Math.random() * 100);\n      // Allow negative edges but only very rarely since even one\n      // negative edge can start an avalanche of negative cycles.\n      if (allowNegativeEdges) v = (Math.random() > 0.005) ? v : -v;\n      matrix[i][j] = v;\n    }\n  }\n\n  @Test\n  public void testDirectedGraph() {\n    FloydWarshallSolver solver = new FloydWarshallSolver(matrix1);\n    double[][] soln = solver.getApspMatrix();\n\n    assertThat(soln[0][0]).isEqualTo(0.0);\n    assertThat(soln[1][0]).isEqualTo(1.0);\n    assertThat(soln[1][1]).isEqualTo(0.0);\n    assertThat(soln[1][2]).isEqualTo(7.0);\n    assertThat(soln[2][0]).isEqualTo(4.0);\n    assertThat(soln[2][1]).isEqualTo(3.0);\n    assertThat(soln[2][2]).isEqualTo(0.0);\n    assertThat(soln[3][0]).isEqualTo(8.0);\n    assertThat(soln[3][1]).isEqualTo(7.0);\n    assertThat(soln[3][2]).isEqualTo(4.0);\n    assertThat(soln[3][3]).isEqualTo(0.0);\n    assertThat(soln[4][0]).isEqualTo(7.0);\n    assertThat(soln[4][1]).isEqualTo(6.0);\n    assertThat(soln[4][2]).isEqualTo(3.0);\n    assertThat(soln[4][3]).isEqualTo(0.0);\n    assertThat(soln[4][4]).isEqualTo(0.0);\n  }\n\n  @Test\n  public void testNegativeCycleGraph() {\n    FloydWarshallSolver solver = new FloydWarshallSolver(matrix2);\n    double[][] soln = solver.getApspMatrix();\n\n    assertThat(soln[0][0]).isEqualTo(0.0);\n    assertThat(soln[0][1]).isEqualTo(3.0);\n    assertThat(soln[0][2]).isEqualTo(NEG_INF);\n    assertThat(soln[0][3]).isEqualTo(NEG_INF);\n    assertThat(soln[0][4]).isEqualTo(NEG_INF);\n    assertThat(soln[1][0]).isEqualTo(2.0);\n    assertThat(soln[1][1]).isEqualTo(0.0);\n    assertThat(soln[1][2]).isEqualTo(NEG_INF);\n    assertThat(soln[1][3]).isEqualTo(NEG_INF);\n    assertThat(soln[1][4]).isEqualTo(NEG_INF);\n    assertThat(soln[2][2]).isEqualTo(NEG_INF);\n    assertThat(soln[2][3]).isEqualTo(NEG_INF);\n    assertThat(soln[2][4]).isEqualTo(NEG_INF);\n    assertThat(soln[3][2]).isEqualTo(NEG_INF);\n    assertThat(soln[3][3]).isEqualTo(NEG_INF);\n    assertThat(soln[3][4]).isEqualTo(NEG_INF);\n    assertThat(soln[4][2]).isEqualTo(NEG_INF);\n    assertThat(soln[4][3]).isEqualTo(NEG_INF);\n    assertThat(soln[4][4]).isEqualTo(NEG_INF);\n  }\n\n  @Test\n  public void testApspAgainstBellmanFord_nonNegativeEdgeWeights() {\n    final int TRAILS = 10;\n    for (int n = 2; n <= 25; n++) {\n      for (int trail = 1; trail <= TRAILS; trail++) {\n        double[][] m = createMatrix(n);\n        int numRandomEdges = Math.max(1, (int) (Math.random() * n * n));\n        addRandomEdges(m, numRandomEdges, false);\n        double[][] fw = new FloydWarshallSolver(m).getApspMatrix();\n\n        for (int s = 0; s < n; s++) {\n          double[] bf = new BellmanFordAdjacencyMatrix(s, m).getShortestPaths();\n          assertThat(bf).isEqualTo(fw[s]);\n        }\n      }\n    }\n  }\n\n  @Test\n  public void testApspAgainstBellmanFord_withNegativeEdgeWeights() {\n    final int TRAILS = 10;\n    for (int n = 2; n <= 25; n++) {\n      for (int trail = 1; trail <= TRAILS; trail++) {\n\n        double[][] m = createMatrix(n);\n        int numRandomEdges = Math.max(1, (int) (Math.random() * n * n));\n        addRandomEdges(m, numRandomEdges, true);\n        double[][] fw = new FloydWarshallSolver(m).getApspMatrix();\n\n        for (int s = 0; s < n; s++) {\n          double[] bf = new BellmanFordAdjacencyMatrix(s, m).getShortestPaths();\n          assertThat(bf).isEqualTo(fw[s]);\n        }\n      }\n    }\n  }\n\n  // Tests for a mismatch in how both algorithms detect the existence of\n  // a negative cycle on the shortest path from s -> e.\n  @Test\n  public void testPathReconstructionBellmanFord_nonNegativeEdgeWeights() {\n    final int TRAILS = 50;\n    for (int n = 2; n <= 25; n++) {\n      for (int trail = 1; trail <= TRAILS; trail++) {\n\n        double[][] m = createMatrix(n);\n        int numRandomEdges = Math.max(1, (int) (Math.random() * n * n));\n        addRandomEdges(m, numRandomEdges, true);\n        FloydWarshallSolver fwSolver = new FloydWarshallSolver(m);\n        fwSolver.solve();\n\n        for (int s = 0; s < n; s++) {\n          BellmanFordAdjacencyMatrix bfSolver = new BellmanFordAdjacencyMatrix(s, m);\n          for (int e = 0; e < n; e++) {\n\n            // Make sure that if 'fwp' returns null that 'bfp' also returns null or\n            // that if 'fwp' is not null that 'bfp' is also not null.\n            List<Integer> fwp = fwSolver.reconstructShortestPath(s, e);\n            List<Integer> bfp = bfSolver.reconstructShortestPath(e);\n            if ((fwp == null) ^ (bfp == null)) {\n              org.junit.Assert.fail(\"Mismatch.\");\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @Test\n  public void testSimpleNegativeCycleDetection() {\n    int n = 3, s = 0, e = 2;\n    double[][] m = createMatrix(n);\n    m[0][1] = 100;\n    m[0][2] = 5;\n    m[1][2] = 0;\n    m[1][1] = -1; // negative self loop.\n    FloydWarshallSolver fw = new FloydWarshallSolver(m);\n    List<Integer> fwPath = fw.reconstructShortestPath(s, e);\n    assertThat(fwPath).isNull();\n  }\n\n  @Test\n  public void testNegativeCyclePropagation() {\n    int n = 100, s = 0, e = n - 1;\n    double[][] m = createMatrix(n);\n    for (int i = 1; i < n; i++) m[i - 1][i] = 10;\n    m[1][0] = -11;\n    FloydWarshallSolver fw = new FloydWarshallSolver(m);\n    List<Integer> fwPath = fw.reconstructShortestPath(s, e);\n    assertThat(fwPath).isNull();\n  }\n\n  @Test\n  public void testSingleNodeNegativeCycleDetection() {\n    int n = 3, s = 0, e = n - 1;\n    double[][] m = createMatrix(n);\n    m[1][2] = 1000;\n    m[2][2] = -1;\n    m[1][0] = 1;\n    m[2][0] = 1;\n\n    FloydWarshallSolver solver = new FloydWarshallSolver(m);\n    double[][] soln = solver.getApspMatrix();\n\n    // 1 reaches 2 with cost 1000 and then it can go through the edge from 2 to 2 (which is -1) as\n    // many times as wanted and\n    // thus reach 2 with arbitrarily little cost\n    assertThat(soln[1][2]).isEqualTo(NEG_INF);\n    assertThat(soln[1][0]).isEqualTo(NEG_INF);\n  }\n}\n"}
{"code_source": "/**\n * A generic k-dimensional tree implementation.\n *\n * @author David Jagnow\n */\npackage com.williamfiset.algorithms.datastructures.kdtree;\n\npublic class GeneralKDTree<T extends Comparable<T>> {\n\n  private int k;\n  private KDNode<T> root;\n\n  /* KDTREE DEFINITION */\n  public GeneralKDTree(int dimensions) {\n    if (dimensions <= 0)\n      throw new IllegalArgumentException(\"Error: GeneralKDTree must have positive dimensions\");\n    k = dimensions;\n    root = null;\n  }\n\n  /* ATTRIBUTE METHODS */\n  public int getDimensions() {\n    return k;\n  }\n\n  public T[] getRootPoint() {\n    return (root == null) ? null : root.point;\n  }\n\n  /* TREE METHODS */\n  // Insert Method\n  public void insert(T[] toAdd) {\n    // Create the new node and make it the root if the root is null\n    KDNode<T> newNode = new KDNode<T>(toAdd);\n    if (root == null) root = newNode;\n    // Otherwise, insert the node recursively\n    else insertRecursive(newNode, root, 0);\n  }\n\n  private void insertRecursive(KDNode<T> toAdd, KDNode<T> curr, int axis) {\n    // If the new point should go to the left, go left and insert where a spot is available\n    if ((toAdd.point[axis]).compareTo(curr.point[axis]) < 0) {\n      if (curr.left == null) curr.left = toAdd;\n      else insertRecursive(toAdd, curr.left, (++axis) % k);\n    }\n    // Otherwise, go right and insert where a spot is available\n    else {\n      if (curr.right == null) curr.right = toAdd;\n      else insertRecursive(toAdd, curr.right, (++axis) % k);\n    }\n  }\n\n  // Search Method\n  public boolean search(T[] element) {\n    KDNode<T> elemNode = new KDNode<T>(element);\n    return searchRecursive(elemNode, root, 0);\n  }\n\n  private boolean searchRecursive(KDNode<T> toSearch, KDNode<T> curr, int axis) {\n    // If the search fails, the point is not in the tree\n    if (curr == null) return false;\n    // If the search succeeds, the point is in the tree\n    if ((curr.point).equals(toSearch.point)) return true;\n    // Otherwise, go where the point would go if it was inserted into the tree\n    KDNode<T> nextNode =\n        ((toSearch.point[axis]).compareTo(curr.point[axis]) < 0) ? curr.left : curr.right;\n    return searchRecursive(toSearch, nextNode, (++axis) % k);\n  }\n\n  // FindMin Method\n  public T[] findMin(int dim) {\n    if (dim < 0 || dim >= k) throw new IllegalArgumentException(\"Error: Dimension out of bounds\");\n    return findMinRecursive(dim, root, 0);\n  }\n\n  private T[] findMinRecursive(int dim, KDNode<T> curr, int axis) {\n    // If nothing is found, return nothing\n    if (curr == null) return null;\n    // If the axis and dimension match, follow typical search procedure\n    if (dim == axis) {\n      if (curr.left == null) return curr.point;\n      return findMinRecursive(dim, curr.left, (axis + 1) % k);\n    }\n    // If there are no children, return what you have\n    if (curr.left == null && curr.right == null) return curr.point;\n    // If there is at least one child, search the children of the current node\n    T[] leftSubTree = findMinRecursive(dim, curr.left, (axis + 1) % k);\n    T[] rightSubTree = findMinRecursive(dim, curr.right, (axis + 1) % k);\n    T[] minSubTree;\n    // If a child is null, pick the non-null child\n    if (leftSubTree == null || rightSubTree == null) {\n      minSubTree = (rightSubTree == null) ? leftSubTree : rightSubTree;\n    }\n    // Otherwise, compare them\n    else {\n      minSubTree =\n          ((leftSubTree[dim]).compareTo(rightSubTree[dim]) < 0) ? leftSubTree : rightSubTree;\n    }\n    // Compare with the value in the current node and return the point with the smallest value in\n    // the given dimension\n    T[] min = ((curr.point[dim]).compareTo(minSubTree[dim]) < 0) ? curr.point : minSubTree;\n    return min;\n  }\n\n  // Remove Method\n  public T[] delete(T[] toRemove) {\n    // Return nothing if the point is not present\n    if (!search(toRemove)) return null;\n    // Delete and return root if it should be removed\n    if (toRemove.equals(root.point)) return deleteRecursiveRoot();\n    // Create the comparison point to delete and remove recursively\n    KDNode<T> removeElem = new KDNode<T>(toRemove);\n    return deleteRecursiveSearch(removeElem, root, 0);\n  }\n\n  private T[] deleteRecursiveRoot() {\n    // Store the point to remove\n    T[] replacedPoint = root.point;\n    // Set the root to null if it has no children\n    if (root.left == null && root.right == null) {\n      root = null;\n      return replacedPoint;\n    }\n    // If a right child exists, find a minimum to replace the root point\n    else if (root.right != null) {\n      root.point = findMinRecursive(0, root.right, 1 % k);\n      deleteRecursiveSearch(new KDNode<T>(root.point), root, 0);\n      return replacedPoint;\n    }\n    // Otherwise, get the minimum from the left subtree and make it the right subtree\n    else {\n      root.point = findMinRecursive(0, root.left, 1 % k);\n      deleteRecursiveSearch(new KDNode<T>(root.point), root, 0);\n      root.right = root.left;\n      root.left = null;\n      return replacedPoint;\n    }\n  }\n\n  private T[] deleteRecursiveSearch(KDNode<T> toRemove, KDNode<T> curr, int axis) {\n    // If the node to remove is a direct child, extract it and remove it\n    if (curr.right != null && (toRemove.point).equals(curr.right.point)) {\n      T[] removed = deleteRecursiveExtract(toRemove, curr.right, (axis + 1) % k);\n      if (removed == null) curr.right = null;\n      return toRemove.point;\n    } else if (curr.left != null && (toRemove.point).equals(curr.left.point)) {\n      T[] removed = deleteRecursiveExtract(toRemove, curr.left, (axis + 1) % k);\n      if (removed == null) curr.left = null;\n      return toRemove.point;\n    }\n    // Otherwise, search again at the child that the node would be a child of\n    else {\n      KDNode<T> nextNode =\n          ((toRemove.point[axis]).compareTo(curr.point[axis]) < 0) ? curr.left : curr.right;\n      return deleteRecursiveSearch(toRemove, nextNode, (axis + 1) % k);\n    }\n  }\n\n  private T[] deleteRecursiveExtract(KDNode<T> toRemove, KDNode<T> curr, int axis) {\n    // Store the point to remove\n    T[] replacedPoint = curr.point;\n    // Set the node to null if it has no children\n    if (curr.left == null && curr.right == null) return null;\n    // If a right child exists, find a minimum to replace the root point\n    else if (curr.right != null) {\n      curr.point = findMinRecursive(axis, curr.right, (axis + 1) % k);\n      deleteRecursiveSearch(new KDNode<T>(curr.point), curr, axis);\n      return replacedPoint;\n    }\n    // Otherwise, get the minimum from the left subtree and make it the right subtree\n    else {\n      curr.point = findMinRecursive(axis, curr.left, (axis + 1) % k);\n      deleteRecursiveSearch(new KDNode<T>(curr.point), curr, axis);\n      curr.right = curr.left;\n      curr.left = null;\n      return replacedPoint;\n    }\n  }\n\n  /* KDTREE NODE DEFINITION */\n  private class KDNode<E extends Comparable<E>> {\n\n    private E[] point;\n    private KDNode<E> left;\n    private KDNode<E> right;\n\n    public KDNode(E[] coords) {\n      if (coords == null) throw new IllegalArgumentException(\"Error: Null coordinate set passed\");\n      if (coords.length != k)\n        throw new IllegalArgumentException(\n            \"Error: Expected \" + k + \"dimensions, but given \" + coords.length);\n      point = coords;\n      left = null;\n      right = null;\n    }\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.kdtree;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport org.junit.Test;\n\npublic class GeneralKDTreeTest {\n\n  /* TREE CREATION TESTS */\n  @Test(expected = IllegalArgumentException.class)\n  public void testDimensionsZero() {\n    new GeneralKDTree<>(0);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testDimensionsNegative() {\n    new GeneralKDTree<>(-5);\n  }\n\n  /* INSERT METHOD TESTS */\n  @Test\n  public void testInsert() {\n    GeneralKDTree<Integer> kdTree = new GeneralKDTree<Integer>(3);\n    assertThat(kdTree.getRootPoint() == null).isTrue();\n    Integer[] pointRoot = {3, 4, 3};\n    Integer[] pointLeft = {1, 7, 6};\n    Integer[] pointRight = {3, 0, 2};\n    kdTree.insert(pointRoot);\n    kdTree.insert(pointLeft);\n    kdTree.insert(pointRight);\n    assertThat(kdTree.getRootPoint() != null).isTrue();\n    assertThat(kdTree.getRootPoint() == pointRoot).isTrue();\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testInsertNull() {\n    GeneralKDTree<Integer> kdTree = new GeneralKDTree<Integer>(2);\n    kdTree.insert(null);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testInsertMismatchDimensions() {\n    GeneralKDTree<Integer> kdTree = new GeneralKDTree<Integer>(2);\n    kdTree.insert(new Integer[] {1, 2, 3});\n  }\n\n  /* SEARCH METHOD TESTS */\n  @Test\n  public void testSearch() {\n    GeneralKDTree<Integer> kdTree = new GeneralKDTree<Integer>(4);\n    assertThat(kdTree.search(new Integer[] {7, 5, 4, 9})).isFalse();\n    Integer[] point1 = {3, 4, 3, 9};\n    Integer[] point2 = {2, 1, 5, 9};\n    Integer[] point3 = {5, 6, 9, 9};\n    Integer[] point4 = {4, 4, 0, 9};\n    kdTree.insert(point1);\n    kdTree.insert(point2);\n    kdTree.insert(point3);\n    kdTree.insert(point4);\n    assertThat(kdTree.search(point1)).isTrue();\n    assertThat(kdTree.search(point2)).isTrue();\n    assertThat(kdTree.search(point3)).isTrue();\n    assertThat(kdTree.search(point4)).isTrue();\n    assertThat(kdTree.search(new Integer[] {7, 5, 4, 9})).isFalse();\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testSearchNull() {\n    GeneralKDTree<Integer> kdTree = new GeneralKDTree<Integer>(2);\n    kdTree.search(null);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testSearchMismatchDimensions() {\n    GeneralKDTree<Integer> kdTree = new GeneralKDTree<Integer>(2);\n    kdTree.search(new Integer[] {1, 2, 3});\n  }\n\n  /* FINDMIN METHOD TESTS */\n  @Test\n  public void testFindMin() {\n    GeneralKDTree<Integer> kdTree = new GeneralKDTree<Integer>(3);\n    assertThat(kdTree.findMin(0) == null).isTrue();\n    Integer[] min1 = {0, 5, 4};\n    Integer[] min2 = {3, 0, 7};\n    Integer[] min3 = {6, 6, 0};\n    kdTree.insert(new Integer[] {3, 7, 9});\n    kdTree.insert(min1);\n    kdTree.insert(min3);\n    kdTree.insert(min2);\n    kdTree.insert(new Integer[] {4, 7, 5});\n    kdTree.insert(new Integer[] {3, 4, 8});\n    kdTree.insert(new Integer[] {7, 7, 2});\n    kdTree.insert(new Integer[] {8, 9, 8});\n    assertThat(kdTree.findMin(0) == min1).isTrue();\n    assertThat(kdTree.findMin(1) == min2).isTrue();\n    assertThat(kdTree.findMin(2) == min3).isTrue();\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testFindMinOutOfBounds() {\n    GeneralKDTree<Integer> kdTree = new GeneralKDTree<Integer>(2);\n    kdTree.findMin(2);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testFindMinNegative() {\n    GeneralKDTree<Integer> kdTree = new GeneralKDTree<Integer>(2);\n    kdTree.findMin(-1);\n  }\n\n  /* DELETE METHOD TESTS */\n  @Test\n  public void testDeleteEmpty() {\n    GeneralKDTree<Integer> kdTree = new GeneralKDTree<Integer>(2);\n    assertThat(kdTree.delete(new Integer[] {1, 2}) == null).isTrue();\n  }\n\n  @Test\n  public void testDeleteRoot() {\n    // General Setup\n    GeneralKDTree<Integer> kdTreeBarren = new GeneralKDTree<Integer>(3);\n    GeneralKDTree<Integer> kdTreeLeft = new GeneralKDTree<Integer>(3);\n    GeneralKDTree<Integer> kdTreeRight = new GeneralKDTree<Integer>(3);\n    GeneralKDTree<Integer> kdTreeTwo = new GeneralKDTree<Integer>(3);\n    Integer[] rootPoint = {2, 2, 2};\n    Integer[] leftPoint = {1, 1, 1};\n    Integer[] rightPoint = {3, 3, 3};\n    // No child test\n    kdTreeBarren.insert(rootPoint);\n    assertThat(kdTreeBarren.delete(rootPoint) == rootPoint).isTrue();\n    // Left child test\n    kdTreeLeft.insert(rootPoint);\n    kdTreeLeft.insert(leftPoint);\n    assertThat(kdTreeLeft.delete(rootPoint) == rootPoint).isTrue();\n    // Right child test\n    kdTreeRight.insert(rootPoint);\n    kdTreeRight.insert(rightPoint);\n    assertThat(kdTreeRight.delete(rootPoint) == rootPoint).isTrue();\n    // Both children test\n    kdTreeTwo.insert(rootPoint);\n    kdTreeTwo.insert(leftPoint);\n    kdTreeTwo.insert(rightPoint);\n    assertThat(kdTreeTwo.delete(rootPoint) == rootPoint).isTrue();\n  }\n\n  @Test\n  public void testDelete() {\n    // Tree Setup\n    GeneralKDTree<Integer> kdTree = new GeneralKDTree<Integer>(3);\n    assertThat(kdTree.findMin(0) == null).isTrue();\n    Integer[] point1 = {3, 7, 9};\n    Integer[] point2 = {0, 5, 4};\n    Integer[] point3 = {6, 6, 0};\n    Integer[] point4 = {3, 0, 7};\n    Integer[] point5 = {4, 7, 5};\n    Integer[] point6 = {3, 4, 8};\n    Integer[] point7 = {7, 7, 2};\n    Integer[] point8 = {8, 9, 8};\n    kdTree.insert(point1);\n    kdTree.insert(point2);\n    kdTree.insert(point3);\n    kdTree.insert(point4);\n    kdTree.insert(point5);\n    kdTree.insert(point6);\n    kdTree.insert(point7);\n    kdTree.insert(point8);\n    // Delete Action Assertions\n    assertThat(kdTree.delete(point8) == point8).isTrue();\n    assertThat(kdTree.delete(point5) == point5).isTrue();\n    assertThat(kdTree.delete(point3) == point3).isTrue();\n    assertThat(kdTree.delete(point8) == null).isTrue();\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testDeleteNull() {\n    GeneralKDTree<Integer> kdTree = new GeneralKDTree<Integer>(2);\n    kdTree.delete(null);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testDeleteMismatchDimensions() {\n    GeneralKDTree<Integer> kdTree = new GeneralKDTree<Integer>(2);\n    kdTree.delete(new Integer[] {1, 2, 3});\n  }\n}\n"}
{"code_source": "/**\n * A generic segment tree implementation that supports several range update and aggregation\n * functions. This implementation of the segment tree differs from the `GenericSegmentTree2` impl in\n * that it stores the segment tree information inside multiple arrays for node.\n *\n * <p>Run with: ./gradlew run -Palgorithm=datastructures.segmenttree.GenericSegmentTree\n *\n * <p>Several thanks to cp-algorithms for their great article on segment trees:\n * https://cp-algorithms.com/data_structures/segment_tree.html\n *\n * <p>NOTE: This file is still a WIP\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.segmenttree;\n\nimport java.util.function.BinaryOperator;\n\npublic class GenericSegmentTree {\n\n  // The type of segment combination function to use\n  public static enum SegmentCombinationFn {\n    SUM,\n    MIN,\n    MAX,\n    GCD,\n    PRODUCT\n  }\n\n  // When updating the value of a specific index position, or a range of values,\n  // modify the affected values using the following function:\n  public static enum RangeUpdateFn {\n    // When a range update is issued, assign all the values in the range [l, r] to be `x`\n    ASSIGN,\n    // When a range update is issued, add a value of `x` to all the elements in the range [l, r]\n    ADDITION,\n    // When a range update is issued, multiply all elements in the range [l, r] by a value of `x`\n    MULTIPLICATION\n  }\n\n  // The number of elements in the original input values array.\n  private int n;\n\n  // The segment tree represented as a binary tree of ranges where t[0] is the\n  // root node and the left and right children of node i are i*2+1 and i*2+2.\n  private Long[] t;\n\n  // The delta values associates with each segment. Used for lazy propagation\n  // when doing range updates.\n  private Long[] lazy;\n\n  // The chosen range combination function\n  private BinaryOperator<Long> combinationFn;\n\n  // The Range Update Function (RUF) interface.\n  private interface Ruf {\n    // base = the existing value\n    // tl, tr = the index value of the left/right endpoints, i.e: [tl, tr]\n    // delta = the delta value\n    // TODO(william): reorder to be base, delta, tl, tr\n    Long apply(Long base, long tl, long tr, Long delta);\n  }\n\n  // The Range Update Function (RUF) that chooses how a lazy delta value is\n  // applied to a segment.\n  private Ruf ruf;\n\n  // The Lazy Range Update Function (LRUF) associated with the RUF. How you\n  // propagate the lazy delta values is sometimes different than how you apply\n  // them to the current segment (but most of the time the RUF = LRUF).\n  private Ruf lruf;\n\n  private long safeSum(Long a, Long b) {\n    if (a == null) a = 0L;\n    if (b == null) b = 0L;\n    return a + b;\n  }\n\n  private Long safeMul(Long a, Long b) {\n    if (a == null) a = 1L;\n    if (b == null) b = 1L;\n    return a * b;\n  }\n\n  private Long safeMin(Long a, Long b) {\n    if (a == null) return b;\n    if (b == null) return a;\n    return Math.min(a, b);\n  }\n\n  private Long safeMax(Long a, Long b) {\n    if (a == null) return b;\n    if (b == null) return a;\n    return Math.max(a, b);\n  }\n\n  private BinaryOperator<Long> sumCombinationFn = (a, b) -> safeSum(a, b);\n  private BinaryOperator<Long> minCombinationFn = (a, b) -> safeMin(a, b);\n  private BinaryOperator<Long> maxCombinationFn = (a, b) -> safeMax(a, b);\n  private BinaryOperator<Long> productCombinationFn = (a, b) -> safeMul(a, b);\n  private BinaryOperator<Long> gcdCombinationFn =\n      (a, b) -> {\n        if (a == null) return b;\n        if (b == null) return a;\n        long gcd = a;\n        while (b != 0) {\n          gcd = b;\n          b = a % b;\n          a = gcd;\n        }\n        return Math.abs(gcd);\n      };\n\n  // TODO(william): Document the justification for each function below\n\n  // Range update functions\n  private Ruf minQuerySumUpdate = (b, tl, tr, d) -> safeSum(b, d);\n  private Ruf lminQuerySumUpdate = (b, tl, tr, d) -> safeSum(b, d);\n\n  // TODO(issue/208): Can negative multiplication updates be supported?\n  private Ruf minQueryMulUpdate = (b, tl, tr, d) -> safeMul(b, d);\n  private Ruf lminQueryMulUpdate = (b, tl, tr, d) -> safeMul(b, d);\n\n  private Ruf minQueryAssignUpdate = (b, tl, tr, d) -> d;\n  private Ruf lminQueryAssignUpdate = (b, tl, tr, d) -> d;\n\n  private Ruf maxQuerySumUpdate = (b, tl, tr, d) -> safeSum(b, d);\n  private Ruf lmaxQuerySumUpdate = (b, tl, tr, d) -> safeSum(b, d);\n\n  // TODO(issue/208): Can negative multiplication updates be supported?\n  private Ruf maxQueryMulUpdate = (b, tl, tr, d) -> safeMul(b, d);\n  private Ruf lmaxQueryMulUpdate = (b, tl, tr, d) -> safeMul(b, d);\n\n  private Ruf maxQueryAssignUpdate = (b, tl, tr, d) -> d;\n  private Ruf lmaxQueryAssignUpdate = (b, tl, tr, d) -> d;\n\n  private Ruf sumQuerySumUpdate = (b, tl, tr, d) -> b + (tr - tl + 1) * d;\n  private Ruf lsumQuerySumUpdate = (b, tl, tr, d) -> safeSum(b, d);\n\n  private Ruf sumQueryMulUpdate = (b, tl, tr, d) -> safeMul(b, d);\n  private Ruf lsumQueryMulUpdate = (b, tl, tr, d) -> safeMul(b, d);\n\n  private Ruf sumQueryAssignUpdate = (b, tl, tr, d) -> (tr - tl + 1) * d;\n  private Ruf lsumQueryAssignUpdate = (b, tl, tr, d) -> d;\n\n  // TODO(william): confirm this cannot be supported? Can we maintain additional\n  // information to make it possible?\n  private Ruf gcdQuerySumUpdate = (b, tl, tr, d) -> null;\n  private Ruf lgcdQuerySumUpdate = (b, tl, tr, d) -> null;\n\n  private Ruf gcdQueryMulUpdate = (b, tl, tr, d) -> safeMul(b, d);\n  private Ruf lgcdQueryMulUpdate = (b, tl, tr, d) -> safeMul(b, d);\n\n  private Ruf gcdQueryAssignUpdate = (b, tl, tr, d) -> d;\n  private Ruf lgcdQueryAssignUpdate = (b, tl, tr, d) -> d;\n\n  private Ruf productQuerySumUpdate = (b, tl, tr, d) -> b + (long) (Math.pow(d, (tr - tl + 1)));\n  private Ruf lproductQuerySumUpdate = (b, tl, tr, d) -> safeSum(b, d);\n\n  private Ruf productQueryMulUpdate = (b, tl, tr, d) -> b * (long) (Math.pow(d, (tr - tl + 1)));\n  private Ruf lproductQueryMulUpdate =\n      (b, tl, tr, d) -> safeMul(b, d); // safeMul(b, (long)(Math.pow(d, (tr - tl + 1))));\n\n  private Ruf productQueryAssignUpdate = (b, tl, tr, d) -> d;\n  private Ruf lproductQueryAssignUpdate = (b, tl, tr, d) -> d;\n\n  public GenericSegmentTree(\n      long[] values,\n      SegmentCombinationFn segmentCombinationFunction,\n      RangeUpdateFn rangeUpdateFunction) {\n    if (values == null) {\n      throw new IllegalArgumentException(\"Segment tree values cannot be null.\");\n    }\n    if (segmentCombinationFunction == null) {\n      throw new IllegalArgumentException(\"Please specify a valid segment combination function.\");\n    }\n    if (rangeUpdateFunction == null) {\n      throw new IllegalArgumentException(\"Please specify a valid range update function.\");\n    }\n    n = values.length;\n\n    // The size of the segment tree `t`\n    //\n    // TODO(william): Investigate to reduce this space. There are only 2n-1 segments, so we should\n    // be able to reduce the space, but may need to reorganize the tree/queries. One idea is to use\n    // the Eulerian tour structure of the tree to densely pack the segments.\n    int N = 4 * n;\n\n    t = new Long[N];\n    // TODO(william): Change this to be of size n to reduce memory from O(4n) to O(3n)\n    lazy = new Long[N];\n\n    // Select the specified combination function\n    if (segmentCombinationFunction == SegmentCombinationFn.SUM) {\n      combinationFn = sumCombinationFn;\n      if (rangeUpdateFunction == RangeUpdateFn.ADDITION) {\n        ruf = sumQuerySumUpdate;\n        lruf = lsumQuerySumUpdate;\n      } else if (rangeUpdateFunction == RangeUpdateFn.ASSIGN) {\n        ruf = sumQueryAssignUpdate;\n        lruf = lsumQueryAssignUpdate;\n      } else if (rangeUpdateFunction == RangeUpdateFn.MULTIPLICATION) {\n        ruf = sumQueryMulUpdate;\n        lruf = lsumQueryMulUpdate;\n      }\n    } else if (segmentCombinationFunction == SegmentCombinationFn.MIN) {\n      combinationFn = minCombinationFn;\n      if (rangeUpdateFunction == RangeUpdateFn.ADDITION) {\n        ruf = minQuerySumUpdate;\n        lruf = lminQuerySumUpdate;\n      } else if (rangeUpdateFunction == RangeUpdateFn.ASSIGN) {\n        ruf = minQueryAssignUpdate;\n        lruf = lminQueryAssignUpdate;\n      } else if (rangeUpdateFunction == RangeUpdateFn.MULTIPLICATION) {\n        ruf = minQueryMulUpdate;\n        lruf = lminQueryMulUpdate;\n      }\n    } else if (segmentCombinationFunction == SegmentCombinationFn.MAX) {\n      combinationFn = maxCombinationFn;\n      if (rangeUpdateFunction == RangeUpdateFn.ADDITION) {\n        ruf = maxQuerySumUpdate;\n        lruf = lmaxQuerySumUpdate;\n      } else if (rangeUpdateFunction == RangeUpdateFn.ASSIGN) {\n        ruf = maxQueryAssignUpdate;\n        lruf = lmaxQueryAssignUpdate;\n      } else if (rangeUpdateFunction == RangeUpdateFn.MULTIPLICATION) {\n        ruf = maxQueryMulUpdate;\n        lruf = lmaxQueryMulUpdate;\n      }\n    } else if (segmentCombinationFunction == SegmentCombinationFn.GCD) {\n      combinationFn = gcdCombinationFn;\n      if (rangeUpdateFunction == RangeUpdateFn.ADDITION) {\n        ruf = gcdQuerySumUpdate;\n        lruf = lgcdQuerySumUpdate;\n      } else if (rangeUpdateFunction == RangeUpdateFn.ASSIGN) {\n        ruf = gcdQueryAssignUpdate;\n        lruf = lgcdQueryAssignUpdate;\n      } else if (rangeUpdateFunction == RangeUpdateFn.MULTIPLICATION) {\n        ruf = gcdQueryMulUpdate;\n        lruf = lgcdQueryMulUpdate;\n      }\n    } else if (segmentCombinationFunction == SegmentCombinationFn.PRODUCT) {\n      combinationFn = productCombinationFn;\n      if (rangeUpdateFunction == RangeUpdateFn.ADDITION) {\n        ruf = productQuerySumUpdate;\n        lruf = lproductQuerySumUpdate;\n      } else if (rangeUpdateFunction == RangeUpdateFn.ASSIGN) {\n        ruf = productQueryAssignUpdate;\n        lruf = lproductQueryAssignUpdate;\n      } else if (rangeUpdateFunction == RangeUpdateFn.MULTIPLICATION) {\n        ruf = productQueryMulUpdate;\n        lruf = lproductQueryMulUpdate;\n      }\n    } else {\n      throw new UnsupportedOperationException(\n          \"Combination function not supported: \" + segmentCombinationFunction);\n    }\n\n    buildSegmentTree(0, 0, n - 1, values);\n  }\n\n  /**\n   * Builds a segment tree by starting with the leaf nodes and combining segment values on callback.\n   *\n   * @param i the index of the segment in the segment tree\n   * @param tl the left index (inclusive) of the segment range\n   * @param tr the right index (inclusive) of the segment range\n   * @param values the initial values array\n   */\n  private void buildSegmentTree(int i, int tl, int tr, long[] values) {\n    if (tl == tr) {\n      t[i] = values[tl];\n      return;\n    }\n    int tm = (tl + tr) / 2;\n    buildSegmentTree(2 * i + 1, tl, tm, values);\n    buildSegmentTree(2 * i + 2, tm + 1, tr, values);\n\n    t[i] = combinationFn.apply(t[2 * i + 1], t[2 * i + 2]);\n  }\n\n  /**\n   * Returns the query of the range [l, r] on the original `values` array (+ any updates made to it)\n   *\n   * @param l the left endpoint of the range query (inclusive)\n   * @param r the right endpoint of the range query (inclusive)\n   */\n  public Long rangeQuery1(int l, int r) {\n    return rangeQuery1(0, 0, n - 1, l, r);\n  }\n\n  /**\n   * Returns the range query value of the range [l, r]\n   *\n   * @param i the index of the current segment in the tree\n   * @param tl the left endpoint (inclusive) of the current segment\n   * @param tr the right endpoint (inclusive) of the current segment\n   * @param l the target left endpoint (inclusive) for the range query\n   * @param r the target right endpoint (inclusive) for the range query\n   */\n  private Long rangeQuery1(int i, int tl, int tr, int l, int r) {\n    // Different segment tree types have different base cases\n    if (l > r) {\n      return null;\n    }\n    propagate1(i, tl, tr);\n    if (tl == l && tr == r) {\n      return t[i];\n    }\n    int tm = (tl + tr) / 2;\n    // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n    // [l, r], simply recurse on both segments and let the base case return the\n    // default value for invalid intervals.\n    return combinationFn.apply(\n        rangeQuery1(2 * i + 1, tl, tm, l, Math.min(tm, r)),\n        rangeQuery1(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r));\n  }\n\n  // Apply the lazy delta value to the current node and push it to the child segments\n  private void propagate1(int i, int tl, int tr) {\n    // No lazy value to propagate\n    if (lazy[i] == null) {\n      return;\n    }\n    // Apply the lazy delta to the current segment.\n    t[i] = ruf.apply(t[i], tl, tr, lazy[i]);\n    // Push the lazy delta to left/right segments for non-leaf nodes\n    propagateLazy1(i, tl, tr, lazy[i]);\n    lazy[i] = null;\n  }\n\n  private void propagateLazy1(int i, int tl, int tr, long delta) {\n    // Ignore leaf segments\n    if (tl == tr) return;\n    lazy[2 * i + 1] = lruf.apply(lazy[2 * i + 1], tl, tr, delta);\n    lazy[2 * i + 2] = lruf.apply(lazy[2 * i + 2], tl, tr, delta);\n  }\n\n  public void rangeUpdate1(int l, int r, long x) {\n    rangeUpdate1(0, 0, n - 1, l, r, x);\n  }\n\n  private void rangeUpdate1(int i, int tl, int tr, int l, int r, long x) {\n    propagate1(i, tl, tr);\n    if (l > r) {\n      return;\n    }\n\n    if (tl == l && tr == r) {\n      t[i] = ruf.apply(t[i], tl, tr, x);\n      propagateLazy1(i, tl, tr, x);\n    } else {\n      int tm = (tl + tr) / 2;\n      // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n      // [l, r], simply recurse on both segments and let the base case disregard\n      // invalid intervals.\n      rangeUpdate1(2 * i + 1, tl, tm, l, Math.min(tm, r), x);\n      rangeUpdate1(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r, x);\n\n      t[i] = combinationFn.apply(t[2 * i + 1], t[2 * i + 2]);\n    }\n  }\n\n  // // Updates the value at index `i` in the original `values` array to be `newValue`.\n  // public void pointUpdate(int i, long newValue) {\n  //   pointUpdate(0, i, 0, n - 1, newValue);\n  // }\n\n  // /**\n  //  * Update a point value to a new value and update all affected segments, O(log(n))\n  //  *\n  //  * <p>Do this by performing a binary search to find the interval containing the point, then\n  // update\n  //  * the leaf segment with the new value, and re-compute all affected segment values on the\n  //  * callback.\n  //  *\n  //  * @param i the index of the current segment in the tree\n  //  * @param pos the target position to update\n  //  * @param tl the left segment endpoint (inclusive)\n  //  * @param tr the right segment endpoint (inclusive)\n  //  * @param newValue the new value to update\n  //  */\n  // private void pointUpdate(int i, int pos, int tl, int tr, long newValue) {\n  //   if (tl == tr) { // `tl == pos && tr == pos` might be clearer\n  //     t[i] = newValue;\n  //     return;\n  //   }\n  //   int tm = (tl + tr) / 2;\n  //   if (pos <= tm) {\n  //     // The point index `pos` is contained within the left segment [tl, tm]\n  //     pointUpdate(2 * i + 1, pos, tl, tm, newValue);\n  //   } else {\n  //     // The point index `pos` is contained within the right segment [tm+1, tr]\n  //     pointUpdate(2 * i + 2, pos, tm + 1, tr, newValue);\n  //   }\n  //   // Re-compute the segment value of the current segment on the callback\n  //   // t[i] = rangeUpdateFn.apply(t[2 * i + 1], t[2 * i + 2]);\n  //   t[i] = combinationFn.apply(t[2 * i + 1], t[2 * i + 2]);\n  // }\n\n  public void printDebugInfo() {\n    printDebugInfo(0, 0, n - 1);\n    System.out.println();\n  }\n\n  private void printDebugInfo(int i, int tl, int tr) {\n    System.out.printf(\"[%d, %d], t[i] = %d, lazy[i] = %d\\n\", tl, tr, t[i], lazy[i]);\n    if (tl == tr) {\n      return;\n    }\n    int tm = (tl + tr) / 2;\n    printDebugInfo(2 * i + 1, tl, tm);\n    printDebugInfo(2 * i + 2, tm + 1, tr);\n  }\n\n  ////////////////////////////////////////////////////\n  //              Example usage:                    //\n  ////////////////////////////////////////////////////\n\n  public static void main(String[] args) {\n    t();\n    // sumQuerySumUpdateExample();\n    // minQueryAssignUpdateExample();\n    // gcdQueryMulUpdateExample();\n    // gcdQueryAssignUpdateExample();\n    // productQueryMulUpdateExample();\n  }\n\n  private static void productQueryMulUpdateExample() {\n    //        0, 1, 2, 3\n    long[] v = {3, 2, 2, 1};\n    GenericSegmentTree st =\n        new GenericSegmentTree(v, SegmentCombinationFn.PRODUCT, RangeUpdateFn.MULTIPLICATION);\n\n    int l = 0;\n    int r = 3;\n    long q = st.rangeQuery1(l, r);\n    if (q != 12) System.out.println(\"Error\");\n    System.out.printf(\"The product between indeces [%d, %d] is: %d\\n\", l, r, q);\n\n    // 3, 8, 8, 1\n    // 3 * 8 * 8 * 1 = 192\n    st.rangeUpdate1(1, 2, 4);\n    q = st.rangeQuery1(l, r);\n    if (q != 192) System.out.println(\"Error\");\n    System.out.printf(\"The product between indeces [%d, %d] is: %d\\n\", l, r, st.rangeQuery1(l, r));\n\n    // 3, 8, 16, 2\n    // 3 * 8 * 16 * 2 = 768\n    st.rangeUpdate1(2, 3, 2);\n    q = st.rangeQuery1(l, r);\n    if (q != 768) System.out.println(\"Error\");\n    System.out.printf(\"The product between indeces [%d, %d] is: %d\\n\", l, r, st.rangeQuery1(l, r));\n\n    // 12, 24, 24, 24, 48\n    // st.rangeUpdate1(2, 3, 24);\n    // l = 0;\n    // r = 4;\n    // q = st.rangeQuery1(l, r);\n    // if (q != 12) System.out.println(\"Error\");\n    // System.out.printf(\"The product between indeces [%d, %d] is: %d\\n\", l, r, st.rangeQuery1(l,\n    // r));\n  }\n\n  private static void gcdQueryMulUpdateExample() {\n    //           0,  1, 2, 3,  4\n    long[] v = {12, 24, 3, 4, -1};\n    GenericSegmentTree st =\n        new GenericSegmentTree(v, SegmentCombinationFn.GCD, RangeUpdateFn.MULTIPLICATION);\n\n    int l = 0;\n    int r = 2;\n    long q = st.rangeQuery1(l, r);\n    if (q != 3) System.out.println(\"Error\");\n    System.out.printf(\"The gcd between indeces [%d, %d] is: %d\\n\", l, r, q);\n    st.rangeUpdate1(2, 2, 2);\n    q = st.rangeQuery1(l, r);\n    if (q != 6) System.out.println(\"Error\");\n    System.out.printf(\"The gcd between indeces [%d, %d] is: %d\\n\", l, r, st.rangeQuery1(l, r));\n\n    r = 1; // [l, r] = [0, 1]\n    q = st.rangeQuery1(l, r);\n    if (q != 12) System.out.println(\"Error\");\n    System.out.printf(\"The gcd between indeces [%d, %d] is: %d\\n\", l, r, st.rangeQuery1(l, r));\n  }\n\n  private static void gcdQueryAssignUpdateExample() {\n    //           0,  1, 2, 3,  4\n    long[] v = {12, 24, 3, 12, 48};\n    GenericSegmentTree st =\n        new GenericSegmentTree(v, SegmentCombinationFn.GCD, RangeUpdateFn.ASSIGN);\n\n    int l = 0;\n    int r = 2;\n    long q = st.rangeQuery1(l, r);\n    if (q != 3) System.out.println(\"Error\");\n    System.out.printf(\"The gcd between indeces [%d, %d] is: %d\\n\", l, r, q);\n\n    // 12, 24, 48, 12, 48\n    st.rangeUpdate1(2, 2, 48);\n    q = st.rangeQuery1(l, r);\n    if (q != 12) System.out.println(\"Error\");\n    System.out.printf(\"The gcd between indeces [%d, %d] is: %d\\n\", l, r, st.rangeQuery1(l, r));\n\n    // 12, 24, 24, 24, 48\n    st.rangeUpdate1(2, 3, 24);\n    l = 0;\n    r = 4;\n    q = st.rangeQuery1(l, r);\n    if (q != 12) System.out.println(\"Error\");\n    System.out.printf(\"The gcd between indeces [%d, %d] is: %d\\n\", l, r, st.rangeQuery1(l, r));\n  }\n\n  private static void sumQuerySumUpdateExample() {\n    //          0, 1, 2, 3,  4\n    long[] v = {2, 1, 3, 4, -1};\n    GenericSegmentTree st =\n        new GenericSegmentTree(v, SegmentCombinationFn.SUM, RangeUpdateFn.ADDITION);\n\n    int l = 1;\n    int r = 3;\n    long q = st.rangeQuery1(l, r);\n    if (q != 8) System.out.println(\"Error\");\n    System.out.printf(\"The sum between indeces [%d, %d] is: %d\\n\", l, r, q);\n    st.rangeUpdate1(1, 3, 3);\n    q = st.rangeQuery1(l, r);\n    if (q != 17) System.out.println(\"Error\");\n    System.out.printf(\"The sum between indeces [%d, %d] is: %d\\n\", l, r, st.rangeQuery1(l, r));\n  }\n\n  private static void t() {\n    long[] v = {1, 4, 3, 0, 5, 8, -2, 7, 5, 2, 9};\n    GenericSegmentTree st =\n        new GenericSegmentTree(v, SegmentCombinationFn.MIN, RangeUpdateFn.ASSIGN);\n    st.printDebugInfo();\n  }\n\n  private static void minQueryAssignUpdateExample() {\n    //          0, 1, 2, 3,  4\n    long[] v = {2, 1, 3, 4, -1};\n    GenericSegmentTree st =\n        new GenericSegmentTree(v, SegmentCombinationFn.MIN, RangeUpdateFn.ASSIGN);\n\n    // System.out.println(java.util.Arrays.toString(st.t));\n\n    int l = 1;\n    int r = 3;\n    long q = st.rangeQuery1(l, r);\n    if (q != 1) System.out.println(\"Error\");\n    System.out.printf(\"The min between indeces [%d, %d] is: %d\\n\", l, r, q);\n    st.rangeUpdate1(1, 3, 3);\n    l = 0;\n    r = 1;\n    q = st.rangeQuery1(l, r);\n    if (q != 2) System.out.println(\"Error\");\n    System.out.printf(\"The min between indeces [%d, %d] is: %d\\n\", l, r, st.rangeQuery1(l, r));\n  }\n}\n", "test_case": "/**\n * gradle test --info --tests\n * \"com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTreeTest\"\n */\npackage com.williamfiset.algorithms.datastructures.segmenttree;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.williamfiset.algorithms.utils.TestUtils;\nimport org.junit.Test;\n\npublic class GenericSegmentTreeTest {\n\n  static int ITERATIONS = 250;\n  static int MAX_N = 17;\n\n  // @Before\n  // public void setup() {}\n\n  // @Test\n  // public void testSumQuerySumUpdate_Simple() {\n  //   long[] values = {1, 2, 3, 4, 5};\n  //   GenericSegmentTree st =\n  //       new GenericSegmentTree(\n  //           values,\n  //           GenericSegmentTree.SegmentCombinationFn.SUM,\n  //           GenericSegmentTree.RangeUpdateFn.ADDITION);\n\n  //   assertThat(st.rangeQuery1(0, 1)).isEqualTo(3);\n  //   assertThat(st.rangeQuery1(2, 2)).isEqualTo(3);\n  //   assertThat(st.rangeQuery1(0, 4)).isEqualTo(15);\n  // }\n\n  // @Test\n  // public void testSumQuerySumUpdate_RangeUpdate() {\n  //   //           0, 1, 2, 3, 4\n  //   long[] ar = {1, 2, 1, 2, 1};\n  //   GenericSegmentTree st =\n  //       new GenericSegmentTree(\n  //           ar,\n  //           GenericSegmentTree.SegmentCombinationFn.SUM,\n  //           GenericSegmentTree.RangeUpdateFn.ADDITION);\n\n  //   // Do multiple range updates\n  //   st.rangeUpdate1(0, 1, 5);\n  //   st.rangeUpdate1(3, 4, 2);\n  //   st.rangeUpdate1(0, 4, 3);\n\n  //   // Point queries\n  //   assertThat(st.rangeQuery1(0, 0)).isEqualTo(1 + 3 + 5);\n  //   assertThat(st.rangeQuery1(1, 1)).isEqualTo(2 + 3 + 5);\n  //   assertThat(st.rangeQuery1(2, 2)).isEqualTo(1 + 3);\n  //   assertThat(st.rangeQuery1(3, 3)).isEqualTo(2 + 3 + 2);\n  //   assertThat(st.rangeQuery1(4, 4)).isEqualTo(2 + 3 + 1);\n\n  //   // Range queries\n  //   assertThat(st.rangeQuery1(0, 1)).isEqualTo(2 * 5 + 2 * 3 + 1 + 2);\n  //   assertThat(st.rangeQuery1(0, 2)).isEqualTo(2 * 5 + 3 * 3 + 1 + 2 + 1);\n  //   assertThat(st.rangeQuery1(3, 4)).isEqualTo(2 * 2 + 2 * 3 + 2 + 1);\n  //   assertThat(st.rangeQuery1(0, 4)).isEqualTo(2 * 5 + 2 * 2 + 3 * 5 + 1 + 1 + 1 + 2 + 2);\n  // }\n\n  // @Test\n  // public void testSumQueryAssignUpdate_simple() {\n  //   long[] ar = {2, 1, 3, 4, -1};\n  //   GenericSegmentTree st =\n  //       new GenericSegmentTree(\n  //           ar,\n  //           GenericSegmentTree.SegmentCombinationFn.SUM,\n  //           GenericSegmentTree.RangeUpdateFn.ASSIGN);\n\n  //   st.rangeUpdate1(3, 4, 2);\n\n  //   assertThat(st.rangeQuery1(0, 4)).isEqualTo(10);\n  //   assertThat(st.rangeQuery1(3, 4)).isEqualTo(4);\n  //   assertThat(st.rangeQuery1(3, 3)).isEqualTo(2);\n  //   assertThat(st.rangeQuery1(4, 4)).isEqualTo(2);\n\n  //   st.rangeUpdate1(1, 3, 4);\n\n  //   assertThat(st.rangeQuery1(0, 4)).isEqualTo(16);\n  //   assertThat(st.rangeQuery1(0, 1)).isEqualTo(6);\n  //   assertThat(st.rangeQuery1(3, 4)).isEqualTo(6);\n  //   assertThat(st.rangeQuery1(1, 1)).isEqualTo(4);\n  //   assertThat(st.rangeQuery1(2, 2)).isEqualTo(4);\n  //   assertThat(st.rangeQuery1(3, 3)).isEqualTo(4);\n  //   assertThat(st.rangeQuery1(1, 3)).isEqualTo(12);\n  //   assertThat(st.rangeQuery1(2, 3)).isEqualTo(8);\n  //   assertThat(st.rangeQuery1(1, 2)).isEqualTo(8);\n\n  //   st.rangeUpdate1(2, 2, 5);\n\n  //   assertThat(st.rangeQuery1(0, 4)).isEqualTo(17);\n  //   assertThat(st.rangeQuery1(0, 2)).isEqualTo(11);\n  //   assertThat(st.rangeQuery1(2, 4)).isEqualTo(11);\n  //   assertThat(st.rangeQuery1(1, 3)).isEqualTo(13);\n  //   assertThat(st.rangeQuery1(2, 2)).isEqualTo(5);\n  // }\n\n  // @Test\n  // public void testSumQueryMulUpdate_simple() {\n  //   long[] ar = {1, 4, 5, 3, 2};\n  //   GenericSegmentTree st =\n  //       new GenericSegmentTree(\n  //           ar,\n  //           GenericSegmentTree.SegmentCombinationFn.SUM,\n  //           GenericSegmentTree.RangeUpdateFn.MULTIPLICATION);\n\n  //   st.rangeUpdate1(1, 3, 3);\n\n  //   assertThat(st.rangeQuery1(1, 3)).isEqualTo(4 * 3 + 5 * 3 + 3 * 3);\n  //   assertThat(st.rangeQuery1(0, 4)).isEqualTo(1 + 4 * 3 + 5 * 3 + 3 * 3 + 2);\n  //   assertThat(st.rangeQuery1(0, 2)).isEqualTo(1 + 4 * 3 + 5 * 3);\n  //   assertThat(st.rangeQuery1(2, 4)).isEqualTo(5 * 3 + 3 * 3 + 2);\n\n  //   st.rangeUpdate1(1, 3, 2);\n  //   assertThat(st.rangeQuery1(1, 3)).isEqualTo(4 * 3 * 2 + 5 * 3 * 2 + 3 * 3 * 2);\n  // }\n\n  // @Test\n  // public void minQuerySumUpdates_simple() {\n  //   long[] ar = {2, 1, 3, 4, -1};\n  //   GenericSegmentTree st =\n  //       new GenericSegmentTree(\n  //           ar,\n  //           GenericSegmentTree.SegmentCombinationFn.MIN,\n  //           GenericSegmentTree.RangeUpdateFn.ADDITION);\n\n  //   st.rangeUpdate1(0, 4, 1);\n\n  //   assertThat(st.rangeQuery1(0, 4)).isEqualTo(0);\n  //   assertThat(st.rangeQuery1(1, 3)).isEqualTo(2);\n  //   assertThat(st.rangeQuery1(2, 4)).isEqualTo(0);\n  //   assertThat(st.rangeQuery1(3, 3)).isEqualTo(5);\n\n  //   st.rangeUpdate1(3, 4, 4);\n\n  //   assertThat(st.rangeQuery1(0, 4)).isEqualTo(2);\n  //   assertThat(st.rangeQuery1(0, 1)).isEqualTo(2);\n  //   assertThat(st.rangeQuery1(3, 4)).isEqualTo(4);\n  //   assertThat(st.rangeQuery1(1, 1)).isEqualTo(2);\n  //   assertThat(st.rangeQuery1(2, 2)).isEqualTo(4);\n  //   assertThat(st.rangeQuery1(3, 3)).isEqualTo(9);\n  //   assertThat(st.rangeQuery1(1, 3)).isEqualTo(2);\n  //   assertThat(st.rangeQuery1(2, 3)).isEqualTo(4);\n  //   assertThat(st.rangeQuery1(1, 2)).isEqualTo(2);\n\n  //   st.rangeUpdate1(1, 3, 3);\n\n  //   assertThat(st.rangeQuery1(0, 4)).isEqualTo(3);\n  //   assertThat(st.rangeQuery1(0, 2)).isEqualTo(3);\n  //   assertThat(st.rangeQuery1(2, 4)).isEqualTo(4);\n  //   assertThat(st.rangeQuery1(1, 3)).isEqualTo(5);\n  //   assertThat(st.rangeQuery1(0, 0)).isEqualTo(3);\n  //   assertThat(st.rangeQuery1(1, 1)).isEqualTo(5);\n  //   assertThat(st.rangeQuery1(2, 2)).isEqualTo(7);\n  //   assertThat(st.rangeQuery1(3, 3)).isEqualTo(12);\n  //   assertThat(st.rangeQuery1(4, 4)).isEqualTo(4);\n  // }\n\n  // @Test\n  // public void maxQuerySumUpdate_simple() {\n  //   long[] ar = {2, 1, 3, 4, -1};\n  //   GenericSegmentTree st =\n  //       new GenericSegmentTree(\n  //           ar,\n  //           GenericSegmentTree.SegmentCombinationFn.MAX,\n  //           GenericSegmentTree.RangeUpdateFn.ADDITION);\n\n  //   st.printDebugInfo();\n  //   st.rangeUpdate1(0, 4, 1);\n  //   st.printDebugInfo();\n\n  //   assertThat(st.rangeQuery1(0, 4)).isEqualTo(5);\n  //   assertThat(st.rangeQuery1(0, 1)).isEqualTo(3);\n  //   assertThat(st.rangeQuery1(1, 2)).isEqualTo(4);\n  //   assertThat(st.rangeQuery1(1, 3)).isEqualTo(5);\n\n  //   st.rangeUpdate1(3, 4, 4);\n\n  //   assertThat(st.rangeQuery1(0, 4)).isEqualTo(9);\n  //   assertThat(st.rangeQuery1(0, 1)).isEqualTo(3);\n  //   assertThat(st.rangeQuery1(3, 4)).isEqualTo(9);\n  //   assertThat(st.rangeQuery1(1, 1)).isEqualTo(2);\n  //   assertThat(st.rangeQuery1(2, 2)).isEqualTo(4);\n  //   assertThat(st.rangeQuery1(3, 3)).isEqualTo(9);\n  //   assertThat(st.rangeQuery1(1, 3)).isEqualTo(9);\n  //   assertThat(st.rangeQuery1(2, 3)).isEqualTo(9);\n  //   assertThat(st.rangeQuery1(1, 2)).isEqualTo(4);\n\n  //   st.rangeUpdate1(1, 3, 3);\n\n  //   assertThat(st.rangeQuery1(0, 4)).isEqualTo(12);\n  //   assertThat(st.rangeQuery1(0, 2)).isEqualTo(7);\n  //   assertThat(st.rangeQuery1(2, 4)).isEqualTo(12);\n  //   assertThat(st.rangeQuery1(1, 3)).isEqualTo(12);\n  //   assertThat(st.rangeQuery1(0, 0)).isEqualTo(3);\n  //   assertThat(st.rangeQuery1(1, 1)).isEqualTo(5);\n  //   assertThat(st.rangeQuery1(2, 2)).isEqualTo(7);\n  //   assertThat(st.rangeQuery1(3, 3)).isEqualTo(12);\n  //   assertThat(st.rangeQuery1(4, 4)).isEqualTo(4);\n  // }\n\n  // @Test\n  // public void maxQueryMulUpdate_simple() {\n  //   long[] ar = {2, 1, 3, 4, -1};\n  //   GenericSegmentTree st =\n  //       new GenericSegmentTree(\n  //           ar,\n  //           GenericSegmentTree.SegmentCombinationFn.MAX,\n  //           GenericSegmentTree.RangeUpdateFn.MULTIPLICATION);\n\n  //   st.rangeUpdate1(0, 4, 1);\n  //   assertThat(st.rangeQuery1(0, 4)).isEqualTo(4);\n\n  //   // TODO(issue/208): Negative numbers are a known issue\n  //   // st.rangeUpdate1(0, 4, -2);\n  //   // assertThat(st.rangeQuery1(0, 4)).isEqualTo(2); // Returns -8 as max but should be 2\n  // }\n\n  @Test\n  public void testAllFunctionCombinations() {\n    GenericSegmentTree.SegmentCombinationFn[] combinationFns = {\n      GenericSegmentTree.SegmentCombinationFn.SUM,\n      GenericSegmentTree.SegmentCombinationFn.MIN,\n      GenericSegmentTree.SegmentCombinationFn.MAX,\n      GenericSegmentTree.SegmentCombinationFn.GCD,\n      // GenericSegmentTree.SegmentCombinationFn.PRODUCT,\n    };\n\n    GenericSegmentTree.RangeUpdateFn[] rangeUpdateFns = {\n      GenericSegmentTree.RangeUpdateFn.ADDITION,\n      GenericSegmentTree.RangeUpdateFn.ASSIGN,\n      GenericSegmentTree.RangeUpdateFn.MULTIPLICATION\n    };\n\n    for (GenericSegmentTree.SegmentCombinationFn combinationFn : combinationFns) {\n      for (GenericSegmentTree.RangeUpdateFn rangeUpdateFn : rangeUpdateFns) {\n\n        // TODO(issue/208): The multiplication range update function seems to be suffering\n        // from overflow issues and not being able to handle negative numbers.\n        //\n        // One idea might be to also track the min value for the max query and vice versa\n        // and swap values when a negative number is found?\n        if (rangeUpdateFn == GenericSegmentTree.RangeUpdateFn.MULTIPLICATION\n            && (combinationFn == GenericSegmentTree.SegmentCombinationFn.MIN\n                || combinationFn == GenericSegmentTree.SegmentCombinationFn.MAX)) {\n          continue;\n        }\n\n        if (combinationFn == GenericSegmentTree.SegmentCombinationFn.GCD\n            && rangeUpdateFn == GenericSegmentTree.RangeUpdateFn.ADDITION) {\n          // Not supported\n          continue;\n        }\n\n        for (int n = 5, loop = 0; loop < ITERATIONS; loop++, n++) {\n\n          // Prevent overflow for gcd multiplication tests\n          if (n > MAX_N && combinationFn == GenericSegmentTree.SegmentCombinationFn.GCD) {\n            n = MAX_N;\n          }\n\n          long[] ar = generateRandomArrayByTestType(n, combinationFn);\n          GenericSegmentTree st = new GenericSegmentTree(ar, combinationFn, rangeUpdateFn);\n\n          for (int i = 0; i < n; i++) {\n            // System.out.printf(\"i = %d\\n\", i);\n            int j = TestUtils.randValue(0, n - 1);\n            int k = TestUtils.randValue(0, n - 1);\n            int i1 = Math.min(j, k);\n            int i2 = Math.max(j, k);\n\n            j = TestUtils.randValue(0, n - 1);\n            k = TestUtils.randValue(0, n - 1);\n            int i3 = Math.min(j, k);\n            int i4 = Math.max(j, k);\n\n            // Range update\n            long randValue = getRandValueByTestType(combinationFn);\n            // System.out.printf(\"UPDATE [%d, %d] with %d\\n\", i3, i4, randValue);\n\n            if (rangeUpdateFn == GenericSegmentTree.RangeUpdateFn.ADDITION) {\n              bruteForceSumRangeUpdate(ar, i3, i4, randValue);\n            } else if (rangeUpdateFn == GenericSegmentTree.RangeUpdateFn.ASSIGN) {\n              bruteForceAssignRangeUpdate(ar, i3, i4, randValue);\n            } else if (rangeUpdateFn == GenericSegmentTree.RangeUpdateFn.MULTIPLICATION) {\n              bruteForceMulRangeUpdate(ar, i3, i4, randValue);\n            }\n\n            st.rangeUpdate1(i3, i4, randValue);\n\n            // Range query\n            long bf = 0;\n\n            if (combinationFn == GenericSegmentTree.SegmentCombinationFn.SUM) {\n              bf = bruteForceSum(ar, i1, i2);\n            } else if (combinationFn == GenericSegmentTree.SegmentCombinationFn.MIN) {\n              bf = bruteForceMin(ar, i1, i2);\n            } else if (combinationFn == GenericSegmentTree.SegmentCombinationFn.MAX) {\n              bf = bruteForceMax(ar, i1, i2);\n            } else if (combinationFn == GenericSegmentTree.SegmentCombinationFn.GCD) {\n              bf = bruteForceGcd(ar, i1, i2);\n            } else if (combinationFn == GenericSegmentTree.SegmentCombinationFn.PRODUCT) {\n              bf = bruteForceMul(ar, i1, i2);\n            }\n\n            long segTreeAnswer = st.rangeQuery1(i1, i2);\n            if (bf != segTreeAnswer) {\n\n              System.out.printf(\n                  \"Range query type: %s, range update type: %s, QUERY [%d, %d], want = %d, got = %d\\n\",\n                  combinationFn, rangeUpdateFn, i1, i2, bf, segTreeAnswer);\n\n              System.out.println(java.util.Arrays.toString(ar));\n            }\n            assertThat(segTreeAnswer).isEqualTo(bf);\n          }\n        }\n      }\n    }\n  }\n\n  private static long getRandValueByTestType(\n      GenericSegmentTree.SegmentCombinationFn combinationFn) {\n    if (combinationFn != GenericSegmentTree.SegmentCombinationFn.GCD) {\n      return TestUtils.randValue(-10, 10);\n    }\n    return TestUtils.randValue(1, 10);\n  }\n\n  private static long[] generateRandomArrayByTestType(\n      int n, GenericSegmentTree.SegmentCombinationFn combinationFn) {\n    // GCD doesn't play well with negative numbers\n    if (combinationFn != GenericSegmentTree.SegmentCombinationFn.GCD) {\n      return TestUtils.randomLongArray(n, -100, +100);\n    }\n    return TestUtils.randomLongArray(n, 1, +10);\n  }\n\n  // Finds the sum in an array between [l, r] in the `values` array\n  private static long bruteForceSum(long[] values, int l, int r) {\n    long s = 0;\n    for (int i = l; i <= r; i++) {\n      s += values[i];\n    }\n    return s;\n  }\n\n  // Finds the min value in an array between [l, r] in the `values` array\n  private static long bruteForceMin(long[] values, int l, int r) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) {\n      m = Math.min(m, values[i]);\n    }\n    return m;\n  }\n\n  // Finds the max value in an array between [l, r] in the `values` array\n  private static long bruteForceMax(long[] values, int l, int r) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) {\n      m = Math.max(m, values[i]);\n    }\n    return m;\n  }\n\n  private static long bruteForceMul(long[] values, int l, int r) {\n    long m = 1L;\n    for (int i = l; i <= r; i++) {\n      m *= values[i];\n    }\n    return m;\n  }\n\n  private static long gcd(long a, long b) {\n    long gcd = a;\n    while (b != 0) {\n      gcd = b;\n      b = a % b;\n      a = gcd;\n    }\n    return Math.abs(gcd);\n  }\n\n  // Finds the sum in an array between [l, r] in the `values` array\n  private static long bruteForceGcd(long[] values, int l, int r) {\n    long s = values[l];\n    for (int i = l; i <= r; i++) {\n      s = gcd(s, values[i]);\n    }\n    return s;\n  }\n\n  private static void bruteForceSumRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] += x;\n    }\n  }\n\n  private static void bruteForceMulRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] *= x;\n    }\n  }\n\n  private static void bruteForceAssignRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] = x;\n    }\n  }\n}\n"}
{"code_source": "/**\n * A generic segment tree implementation that supports several range update and aggregation\n * functions.\n *\n * <p>Run with: ./gradlew run -Palgorithm=datastructures.segmenttree.GenericSegmentTree2\n *\n * <p>Several thanks to cp-algorithms for their great article on segment trees:\n * https://cp-algorithms.com/data_structures/segment_tree.html\n *\n * <p>NOTE: This file is still a WIP\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.segmenttree;\n\nimport java.util.function.BinaryOperator;\n\npublic class GenericSegmentTree2 {\n\n  // The type of segment combination function to use\n  public static enum SegmentCombinationFn {\n    SUM,\n    MIN,\n    MAX\n  }\n\n  // When updating the value of a specific index position, or a range of values,\n  // modify the affected values using the following function:\n  public static enum RangeUpdateFn {\n    // When a range update is issued, assign all the values in the range [l, r] to be `x`\n    ASSIGN,\n    // When a range update is issued, add a value of `x` to all the elements in the range [l, r]\n    ADDITION,\n    // When a range update is issued, multiply all elements in the range [l, r] by a value of `x`\n    MULTIPLICATION\n  }\n\n  private static class Segment { // implements PrintableNode\n    // TODO(william): investigate if we really need this, it's unlikely that we do since it should\n    // be able to implicitly determine the index.\n    int i;\n\n    Long value;\n    Long lazy;\n\n    // Used only for Min/Max mul queries. Used in an attempt to resolve:\n    // https://github.com/williamfiset/Algorithms/issues/208\n    Long min;\n    Long max;\n\n    // The range of the segment [tl, tr]\n    int tl;\n    int tr;\n\n    public Segment(int i, Long value, Long min, Long max, int tl, int tr) {\n      this.i = i;\n      this.value = value;\n      this.min = min;\n      this.max = max;\n      this.tl = tl;\n      this.tr = tr;\n    }\n\n    // @Override\n    // public PrintableNode getLeft() {\n    //   return left;\n    // }\n\n    // @Override\n    // public PrintableNode getRight() {\n    //   return right;\n    // }\n\n    // @Override\n    // public String getText() {\n    //   return value.toString();\n    // }\n\n    @Override\n    public String toString() {\n      return String.format(\"[%d, %d], value = %d, lazy = %d\", tl, tr, value, lazy);\n    }\n  }\n\n  // The number of elements in the original input values array.\n  private int n;\n\n  // The segment tree represented as a binary tree of ranges where st[0] is the\n  // root node and the left and right children of node i are i*2+1 and i*2+2.\n  private Segment[] st;\n\n  // The chosen range combination function\n  private BinaryOperator<Long> combinationFn;\n\n  private interface Ruf {\n    Long apply(Segment segment, Long delta);\n  }\n\n  // The Range Update Function (RUF) that chooses how a lazy delta value is\n  // applied to a segment.\n  private Ruf ruf;\n\n  // The Lazy Range Update Function (LRUF) associated with the RUF. How you\n  // propagate the lazy delta values is sometimes different than how you apply\n  // them to the current segment (but most of the time the RUF = LRUF).\n  private Ruf lruf;\n\n  private long safeSum(Long a, Long b) {\n    if (a == null) a = 0L;\n    if (b == null) b = 0L;\n    return a + b;\n  }\n\n  private Long safeMul(Long a, Long b) {\n    if (a == null) a = 1L;\n    if (b == null) b = 1L;\n    return a * b;\n  }\n\n  private Long safeMin(Long a, Long b) {\n    if (a == null) return b;\n    if (b == null) return a;\n    return Math.min(a, b);\n  }\n\n  private Long safeMax(Long a, Long b) {\n    if (a == null) return b;\n    if (b == null) return a;\n    return Math.max(a, b);\n  }\n\n  private BinaryOperator<Long> sumCombinationFn = (a, b) -> safeSum(a, b);\n  private BinaryOperator<Long> minCombinationFn = (a, b) -> safeMin(a, b);\n  private BinaryOperator<Long> maxCombinationFn = (a, b) -> safeMax(a, b);\n\n  // TODO(william): Document the justification for each function below\n\n  // Range update functions\n  private Ruf minQuerySumUpdate = (s, x) -> safeSum(s.value, x);\n  private Ruf lminQuerySumUpdate = (s, x) -> safeSum(s.lazy, x);\n\n  // // TODO(issue/208): support this multiplication update\n  private Ruf minQueryMulUpdate =\n      (s, x) -> {\n        if (x == 0) {\n          return 0L;\n        } else if (x < 0) {\n          // s.min was already calculated\n          if (safeMul(s.value, x) == s.min) {\n            return s.max;\n          } else {\n            return s.min;\n          }\n        } else {\n          return safeMul(s.value, x);\n        }\n      };\n  private Ruf lminQueryMulUpdate = (s, x) -> safeMul(s.lazy, x);\n\n  private Ruf minQueryAssignUpdate = (s, x) -> x;\n  private Ruf lminQueryAssignUpdate = (s, x) -> x;\n\n  private Ruf maxQuerySumUpdate = (s, x) -> safeSum(s.value, x);\n  private Ruf lmaxQuerySumUpdate = (s, x) -> safeSum(s.lazy, x);\n\n  // TODO(issue/208): support this multiplication update\n  private Ruf maxQueryMulUpdate =\n      (s, x) -> {\n        if (x == 0) {\n          return 0L;\n        } else if (x < 0) {\n          if (safeMul(s.value, x) == s.min) {\n            return s.max;\n          } else {\n            return s.min;\n          }\n        } else {\n          return safeMul(s.value, x);\n        }\n      };\n  private Ruf lmaxQueryMulUpdate = (s, x) -> safeMul(s.lazy, x);\n\n  private Ruf maxQueryAssignUpdate = (s, x) -> x;\n  private Ruf lmaxQueryAssignUpdate = (s, x) -> x;\n\n  private Ruf sumQuerySumUpdate = (s, x) -> s.value + (s.tr - s.tl + 1) * x;\n  private Ruf lsumQuerySumUpdate = (s, x) -> safeSum(s.lazy, x);\n\n  private Ruf sumQueryMulUpdate = (s, x) -> safeMul(s.value, x);\n  private Ruf lsumQueryMulUpdate = (s, x) -> safeMul(s.lazy, x);\n\n  private Ruf sumQueryAssignUpdate = (s, x) -> (s.tr - s.tl + 1) * x;\n  private Ruf lsumQueryAssignUpdate = (s, x) -> x;\n\n  public GenericSegmentTree2(\n      long[] values,\n      SegmentCombinationFn segmentCombinationFunction,\n      RangeUpdateFn rangeUpdateFunction) {\n    if (values == null) {\n      throw new IllegalArgumentException(\"Segment tree values cannot be null.\");\n    }\n    if (segmentCombinationFunction == null) {\n      throw new IllegalArgumentException(\"Please specify a valid segment combination function.\");\n    }\n    if (rangeUpdateFunction == null) {\n      throw new IllegalArgumentException(\"Please specify a valid range update function.\");\n    }\n    n = values.length;\n\n    // The size of the segment tree `t`\n    //\n    // TODO(william): Investigate to reduce this space. There are only 2n-1 segments, so we should\n    // be able to reduce the space, but may need to reorganize the tree/queries. One idea is to use\n    // the Eulerian tour structure of the tree to densely pack the segments.\n    int N = 4 * n;\n\n    st = new Segment[N];\n\n    // Select the specified combination function\n    if (segmentCombinationFunction == SegmentCombinationFn.SUM) {\n      combinationFn = sumCombinationFn;\n      if (rangeUpdateFunction == RangeUpdateFn.ADDITION) {\n        ruf = sumQuerySumUpdate;\n        lruf = lsumQuerySumUpdate;\n      } else if (rangeUpdateFunction == RangeUpdateFn.ASSIGN) {\n        ruf = sumQueryAssignUpdate;\n        lruf = lsumQueryAssignUpdate;\n      } else if (rangeUpdateFunction == RangeUpdateFn.MULTIPLICATION) {\n        ruf = sumQueryMulUpdate;\n        lruf = lsumQueryMulUpdate;\n      }\n    } else if (segmentCombinationFunction == SegmentCombinationFn.MIN) {\n      combinationFn = minCombinationFn;\n      if (rangeUpdateFunction == RangeUpdateFn.ADDITION) {\n        ruf = minQuerySumUpdate;\n        lruf = lminQuerySumUpdate;\n      } else if (rangeUpdateFunction == RangeUpdateFn.ASSIGN) {\n        ruf = minQueryAssignUpdate;\n        lruf = lminQueryAssignUpdate;\n      } else if (rangeUpdateFunction == RangeUpdateFn.MULTIPLICATION) {\n        ruf = minQueryMulUpdate;\n        lruf = lminQueryMulUpdate;\n      }\n    } else if (segmentCombinationFunction == SegmentCombinationFn.MAX) {\n      combinationFn = maxCombinationFn;\n      if (rangeUpdateFunction == RangeUpdateFn.ADDITION) {\n        ruf = maxQuerySumUpdate;\n        lruf = lmaxQuerySumUpdate;\n      } else if (rangeUpdateFunction == RangeUpdateFn.ASSIGN) {\n        ruf = maxQueryAssignUpdate;\n        lruf = lmaxQueryAssignUpdate;\n      } else if (rangeUpdateFunction == RangeUpdateFn.MULTIPLICATION) {\n        ruf = maxQueryMulUpdate;\n        lruf = lmaxQueryMulUpdate;\n      }\n    } else {\n      throw new UnsupportedOperationException(\n          \"Combination function not supported: \" + segmentCombinationFunction);\n    }\n\n    buildSegmentTree(0, 0, n - 1, values);\n  }\n\n  /**\n   * Builds a segment tree by starting with the leaf nodes and combining segment values on callback.\n   *\n   * @param i the index of the segment in the segment tree\n   * @param tl the left index (inclusive) of the segment range\n   * @param tr the right index (inclusive) of the segment range\n   * @param values the initial values array\n   */\n  private void buildSegmentTree(int i, int tl, int tr, long[] values) {\n    if (tl == tr) {\n      st[i] = new Segment(i, values[tl], values[tl], values[tl], tl, tr);\n      return;\n    }\n    int tm = (tl + tr) / 2;\n    buildSegmentTree(2 * i + 1, tl, tm, values);\n    buildSegmentTree(2 * i + 2, tm + 1, tr, values);\n\n    Long segmentValue = combinationFn.apply(st[2 * i + 1].value, st[2 * i + 2].value);\n    Long minValue = Math.min(st[2 * i + 1].min, st[2 * i + 2].min);\n    Long maxValue = Math.max(st[2 * i + 1].max, st[2 * i + 2].max);\n    Segment segment = new Segment(i, segmentValue, minValue, maxValue, tl, tr);\n\n    st[i] = segment;\n  }\n\n  /**\n   * Returns the query of the range [l, r] on the original `values` array (+ any updates made to it)\n   *\n   * @param l the left endpoint of the range query (inclusive)\n   * @param r the right endpoint of the range query (inclusive)\n   */\n  public Long rangeQuery1(int l, int r) {\n    return rangeQuery1(0, 0, n - 1, l, r);\n  }\n\n  /**\n   * Returns the range query value of the range [l, r]\n   *\n   * @param i the index of the current segment in the tree\n   * @param tl the left endpoint (inclusive) of the current segment\n   * @param tr the right endpoint (inclusive) of the current segment\n   * @param l the target left endpoint (inclusive) for the range query\n   * @param r the target right endpoint (inclusive) for the range query\n   */\n  private Long rangeQuery1(int i, int tl, int tr, int l, int r) {\n    // Different segment tree types have different base cases\n    if (l > r) {\n      return null;\n    }\n    propagate1(i, tl, tr);\n    if (tl == l && tr == r) {\n      return st[i].value;\n    }\n    int tm = (tl + tr) / 2;\n    // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n    // [l, r], simply recurse on both segments and let the base case return the\n    // default value for invalid intervals.\n    return combinationFn.apply(\n        rangeQuery1(2 * i + 1, tl, tm, l, Math.min(tm, r)),\n        rangeQuery1(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r));\n  }\n\n  // Apply the delta value to the current node and push it to the child segments\n  private void propagate1(int i, int tl, int tr) {\n    if (st[i].lazy != null) {\n      // Only used for min/max mul queries\n      st[i].min = st[i].min * st[i].lazy;\n      st[i].max = st[i].max * st[i].lazy;\n\n      // Apply the delta to the current segment.\n      st[i].value = ruf.apply(st[i], st[i].lazy);\n      // Push the delta to left/right segments for non-leaf nodes\n      propagateLazy1(i, tl, tr, st[i].lazy);\n      st[i].lazy = null;\n    }\n  }\n\n  private void propagateLazy1(int i, int tl, int tr, long delta) {\n    // Ignore leaf segments\n    if (tl == tr) return;\n    st[2 * i + 1].lazy = lruf.apply(st[2 * i + 1], delta);\n    st[2 * i + 2].lazy = lruf.apply(st[2 * i + 2], delta);\n  }\n\n  public void rangeUpdate1(int l, int r, long x) {\n    rangeUpdate1(0, 0, n - 1, l, r, x);\n  }\n\n  private void rangeUpdate1(int i, int tl, int tr, int l, int r, long x) {\n    propagate1(i, tl, tr);\n    if (l > r) {\n      return;\n    }\n\n    if (tl == l && tr == r) {\n      // Only used for min/max mul queries\n      st[i].min = st[i].min * x;\n      st[i].max = st[i].max * x;\n\n      st[i].value = ruf.apply(st[i], x);\n      propagateLazy1(i, tl, tr, x);\n    } else {\n      int tm = (tl + tr) / 2;\n      // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n      // [l, r], simply recurse on both segments and let the base case disregard\n      // invalid intervals.\n      rangeUpdate1(2 * i + 1, tl, tm, l, Math.min(tm, r), x);\n      rangeUpdate1(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r, x);\n\n      st[i].value = combinationFn.apply(st[2 * i + 1].value, st[2 * i + 2].value);\n      st[i].max = Math.max(st[2 * i + 1].max, st[2 * i + 2].max);\n      st[i].min = Math.min(st[2 * i + 1].min, st[2 * i + 2].min);\n    }\n  }\n\n  // // Updates the value at index `i` in the original `values` array to be `newValue`.\n  // public void pointUpdate(int i, long newValue) {\n  //   pointUpdate(0, i, 0, n - 1, newValue);\n  // }\n\n  // /**\n  //  * Update a point value to a new value and update all affected segments, O(log(n))\n  //  *\n  //  * <p>Do this by performing a binary search to find the interval containing the point, then\n  // update\n  //  * the leaf segment with the new value, and re-compute all affected segment values on the\n  //  * callback.\n  //  *\n  //  * @param i the index of the current segment in the tree\n  //  * @param pos the target position to update\n  //  * @param tl the left segment endpoint (inclusive)\n  //  * @param tr the right segment endpoint (inclusive)\n  //  * @param newValue the new value to update\n  //  */\n  // private void pointUpdate(int i, int pos, int tl, int tr, long newValue) {\n  //   if (tl == tr) { // `tl == pos && tr == pos` might be clearer\n  //     t[i] = newValue;\n  //     return;\n  //   }\n  //   int tm = (tl + tr) / 2;\n  //   if (pos <= tm) {\n  //     // The point index `pos` is contained within the left segment [tl, tm]\n  //     pointUpdate(2 * i + 1, pos, tl, tm, newValue);\n  //   } else {\n  //     // The point index `pos` is contained within the right segment [tm+1, tr]\n  //     pointUpdate(2 * i + 2, pos, tm + 1, tr, newValue);\n  //   }\n  //   // Re-compute the segment value of the current segment on the callback\n  //   // t[i] = rangeUpdateFn.apply(t[2 * i + 1], t[2 * i + 2]);\n  //   t[i] = combinationFn.apply(t[2 * i + 1], t[2 * i + 2]);\n  // }\n\n  public void printDebugInfo() {\n    printDebugInfo(0);\n    System.out.println();\n  }\n\n  private void printDebugInfo(int i) {\n    System.out.println(st[i]);\n    if (st[i].tl == st[i].tr) {\n      return;\n    }\n    printDebugInfo(2 * i + 1);\n    printDebugInfo(2 * i + 2);\n  }\n\n  ////////////////////////////////////////////////////\n  //              Example usage:                    //\n  ////////////////////////////////////////////////////\n\n  public static void main(String[] args) {\n    minQuerySumUpdate();\n    sumQuerySumUpdateExample();\n    minQueryAssignUpdateExample();\n  }\n\n  private static void minQuerySumUpdate() {\n    //          0, 1, 2, 3,  4\n    long[] v = {2, 1, 3, 4, -1};\n    GenericSegmentTree2 st =\n        new GenericSegmentTree2(v, SegmentCombinationFn.MIN, RangeUpdateFn.ADDITION);\n\n    int l = 1;\n    int r = 3;\n    long q = st.rangeQuery1(l, r);\n    if (q != 1) System.out.println(\"Error\");\n    System.out.printf(\"The min between indeces [%d, %d] is: %d\\n\", l, r, q);\n\n    st.printDebugInfo();\n  }\n\n  private static void sumQuerySumUpdateExample() {\n    //          0, 1, 2, 3,  4\n    long[] v = {2, 1, 3, 4, -1};\n    GenericSegmentTree2 st =\n        new GenericSegmentTree2(v, SegmentCombinationFn.SUM, RangeUpdateFn.ADDITION);\n\n    int l = 1;\n    int r = 3;\n    long q = st.rangeQuery1(l, r);\n    if (q != 8) System.out.println(\"Error\");\n    System.out.printf(\"The sum between indeces [%d, %d] is: %d\\n\", l, r, q);\n    st.rangeUpdate1(1, 3, 3);\n    q = st.rangeQuery1(l, r);\n    if (q != 17) System.out.println(\"Error\");\n    System.out.printf(\"The sum between indeces [%d, %d] is: %d\\n\", l, r, st.rangeQuery1(l, r));\n  }\n\n  private static void minQueryAssignUpdateExample() {\n    //          0, 1, 2, 3,  4\n    long[] v = {2, 1, 3, 4, -1};\n    GenericSegmentTree2 st =\n        new GenericSegmentTree2(v, SegmentCombinationFn.MIN, RangeUpdateFn.ASSIGN);\n\n    int l = 1;\n    int r = 3;\n    long q = st.rangeQuery1(l, r);\n    if (q != 1) System.out.println(\"Error\");\n    System.out.printf(\"The min between indeces [%d, %d] is: %d\\n\", l, r, q);\n    st.rangeUpdate1(1, 3, 3);\n    l = 0;\n    r = 1;\n    q = st.rangeQuery1(l, r);\n    if (q != 2) System.out.println(\"Error\");\n    System.out.printf(\"The min between indeces [%d, %d] is: %d\\n\", l, r, st.rangeQuery1(l, r));\n  }\n}\n", "test_case": "/**\n * gradle test --info --tests\n * \"com.williamfiset.algorithms.datastructures.segmenttree.GenericSegmentTree2Test\"\n */\npackage com.williamfiset.algorithms.datastructures.segmenttree;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.williamfiset.algorithms.utils.TestUtils;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class GenericSegmentTree2Test {\n\n  static int ITERATIONS = 100;\n  static int MAX_N = 28;\n\n  @Before\n  public void setup() {}\n\n  @Test\n  public void testSumQuerySumUpdate_Simple() {\n    long[] values = {1, 2, 3, 4, 5};\n    GenericSegmentTree2 st =\n        new GenericSegmentTree2(\n            values,\n            GenericSegmentTree2.SegmentCombinationFn.SUM,\n            GenericSegmentTree2.RangeUpdateFn.ADDITION);\n\n    assertThat(st.rangeQuery1(0, 1)).isEqualTo(3);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(3);\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(15);\n  }\n\n  @Test\n  public void testSumQuerySumUpdate_RangeUpdate() {\n    //           0, 1, 2, 3, 4\n    long[] ar = {1, 2, 1, 2, 1};\n    GenericSegmentTree2 st =\n        new GenericSegmentTree2(\n            ar,\n            GenericSegmentTree2.SegmentCombinationFn.SUM,\n            GenericSegmentTree2.RangeUpdateFn.ADDITION);\n\n    // Do multiple range updates\n    st.rangeUpdate1(0, 1, 5);\n    st.rangeUpdate1(3, 4, 2);\n    st.rangeUpdate1(0, 4, 3);\n\n    // Point queries\n    assertThat(st.rangeQuery1(0, 0)).isEqualTo(1 + 3 + 5);\n    assertThat(st.rangeQuery1(1, 1)).isEqualTo(2 + 3 + 5);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(1 + 3);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(2 + 3 + 2);\n    assertThat(st.rangeQuery1(4, 4)).isEqualTo(2 + 3 + 1);\n\n    // Range queries\n    assertThat(st.rangeQuery1(0, 1)).isEqualTo(2 * 5 + 2 * 3 + 1 + 2);\n    assertThat(st.rangeQuery1(0, 2)).isEqualTo(2 * 5 + 3 * 3 + 1 + 2 + 1);\n    assertThat(st.rangeQuery1(3, 4)).isEqualTo(2 * 2 + 2 * 3 + 2 + 1);\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(2 * 5 + 2 * 2 + 3 * 5 + 1 + 1 + 1 + 2 + 2);\n  }\n\n  @Test\n  public void testSumQueryAssignUpdate_simple() {\n    long[] ar = {2, 1, 3, 4, -1};\n    GenericSegmentTree2 st =\n        new GenericSegmentTree2(\n            ar,\n            GenericSegmentTree2.SegmentCombinationFn.SUM,\n            GenericSegmentTree2.RangeUpdateFn.ASSIGN);\n\n    st.rangeUpdate1(3, 4, 2);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(10);\n    assertThat(st.rangeQuery1(3, 4)).isEqualTo(4);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(2);\n    assertThat(st.rangeQuery1(4, 4)).isEqualTo(2);\n\n    st.rangeUpdate1(1, 3, 4);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(16);\n    assertThat(st.rangeQuery1(0, 1)).isEqualTo(6);\n    assertThat(st.rangeQuery1(3, 4)).isEqualTo(6);\n    assertThat(st.rangeQuery1(1, 1)).isEqualTo(4);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(4);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(4);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(12);\n    assertThat(st.rangeQuery1(2, 3)).isEqualTo(8);\n    assertThat(st.rangeQuery1(1, 2)).isEqualTo(8);\n\n    st.rangeUpdate1(2, 2, 5);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(17);\n    assertThat(st.rangeQuery1(0, 2)).isEqualTo(11);\n    assertThat(st.rangeQuery1(2, 4)).isEqualTo(11);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(13);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(5);\n  }\n\n  @Test\n  public void testSumQueryMulUpdate_simple() {\n    long[] ar = {1, 4, 5, 3, 2};\n    GenericSegmentTree2 st =\n        new GenericSegmentTree2(\n            ar,\n            GenericSegmentTree2.SegmentCombinationFn.SUM,\n            GenericSegmentTree2.RangeUpdateFn.MULTIPLICATION);\n\n    st.rangeUpdate1(1, 3, 3);\n\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(4 * 3 + 5 * 3 + 3 * 3);\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(1 + 4 * 3 + 5 * 3 + 3 * 3 + 2);\n    assertThat(st.rangeQuery1(0, 2)).isEqualTo(1 + 4 * 3 + 5 * 3);\n    assertThat(st.rangeQuery1(2, 4)).isEqualTo(5 * 3 + 3 * 3 + 2);\n\n    st.rangeUpdate1(1, 3, 2);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(4 * 3 * 2 + 5 * 3 * 2 + 3 * 3 * 2);\n  }\n\n  @Test\n  public void minQuerySumUpdates_simple() {\n    long[] ar = {2, 1, 3, 4, -1};\n    GenericSegmentTree2 st =\n        new GenericSegmentTree2(\n            ar,\n            GenericSegmentTree2.SegmentCombinationFn.MIN,\n            GenericSegmentTree2.RangeUpdateFn.ADDITION);\n\n    st.rangeUpdate1(0, 4, 1);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(0);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(2);\n    assertThat(st.rangeQuery1(2, 4)).isEqualTo(0);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(5);\n\n    st.rangeUpdate1(3, 4, 4);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(2);\n    assertThat(st.rangeQuery1(0, 1)).isEqualTo(2);\n    assertThat(st.rangeQuery1(3, 4)).isEqualTo(4);\n    assertThat(st.rangeQuery1(1, 1)).isEqualTo(2);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(4);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(9);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(2);\n    assertThat(st.rangeQuery1(2, 3)).isEqualTo(4);\n    assertThat(st.rangeQuery1(1, 2)).isEqualTo(2);\n\n    st.rangeUpdate1(1, 3, 3);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(3);\n    assertThat(st.rangeQuery1(0, 2)).isEqualTo(3);\n    assertThat(st.rangeQuery1(2, 4)).isEqualTo(4);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(5);\n    assertThat(st.rangeQuery1(0, 0)).isEqualTo(3);\n    assertThat(st.rangeQuery1(1, 1)).isEqualTo(5);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(7);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(12);\n    assertThat(st.rangeQuery1(4, 4)).isEqualTo(4);\n  }\n\n  @Test\n  public void maxQuerySumUpdate_simple() {\n    long[] ar = {2, 1, 3, 4, -1};\n    GenericSegmentTree2 st =\n        new GenericSegmentTree2(\n            ar,\n            GenericSegmentTree2.SegmentCombinationFn.MAX,\n            GenericSegmentTree2.RangeUpdateFn.ADDITION);\n\n    // st.printDebugInfo();\n    st.rangeUpdate1(0, 4, 1);\n    // st.printDebugInfo();\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(5);\n    // st.printDebugInfo();\n    assertThat(st.rangeQuery1(0, 1)).isEqualTo(3);\n\n    assertThat(st.rangeQuery1(1, 2)).isEqualTo(4);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(5);\n\n    st.rangeUpdate1(3, 4, 4);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(9);\n    assertThat(st.rangeQuery1(0, 1)).isEqualTo(3);\n    assertThat(st.rangeQuery1(3, 4)).isEqualTo(9);\n    assertThat(st.rangeQuery1(1, 1)).isEqualTo(2);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(4);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(9);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(9);\n    assertThat(st.rangeQuery1(2, 3)).isEqualTo(9);\n    assertThat(st.rangeQuery1(1, 2)).isEqualTo(4);\n\n    st.rangeUpdate1(1, 3, 3);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(12);\n    assertThat(st.rangeQuery1(0, 2)).isEqualTo(7);\n    assertThat(st.rangeQuery1(2, 4)).isEqualTo(12);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(12);\n    assertThat(st.rangeQuery1(0, 0)).isEqualTo(3);\n    assertThat(st.rangeQuery1(1, 1)).isEqualTo(5);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(7);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(12);\n    assertThat(st.rangeQuery1(4, 4)).isEqualTo(4);\n  }\n\n  @Test\n  public void maxminQueryMulUpdate_simple() {\n    long[] ar = {2, 1, 3, 4, -1};\n    GenericSegmentTree2 st1 =\n        new GenericSegmentTree2(\n            ar,\n            GenericSegmentTree2.SegmentCombinationFn.MAX,\n            GenericSegmentTree2.RangeUpdateFn.MULTIPLICATION);\n    GenericSegmentTree2 st2 =\n        new GenericSegmentTree2(\n            ar,\n            GenericSegmentTree2.SegmentCombinationFn.MIN,\n            GenericSegmentTree2.RangeUpdateFn.MULTIPLICATION);\n\n    st1.rangeUpdate1(0, 4, 1);\n    st2.rangeUpdate1(0, 4, 1);\n\n    assertThat(st1.rangeQuery1(0, 4)).isEqualTo(4);\n    assertThat(st2.rangeQuery1(0, 4)).isEqualTo(-1);\n\n    // TODO(issue/208): Negative numbers are a known issue\n    st1.rangeUpdate1(0, 4, -2);\n    st2.rangeUpdate1(0, 4, -2);\n\n    assertThat(st1.rangeQuery1(0, 4)).isEqualTo(2);\n    assertThat(st2.rangeQuery1(0, 4)).isEqualTo(-8);\n\n    st1.rangeUpdate1(0, 4, -1);\n    st2.rangeUpdate1(0, 4, -1);\n\n    assertThat(st1.rangeQuery1(0, 4)).isEqualTo(8);\n    assertThat(st2.rangeQuery1(0, 4)).isEqualTo(-2);\n  }\n\n  @Test\n  public void maxQueryMulUpdate_simple() {\n    long[] ar = {2, 1, 3, 4, -1};\n    GenericSegmentTree2 st1 =\n        new GenericSegmentTree2(\n            ar,\n            GenericSegmentTree2.SegmentCombinationFn.MAX,\n            GenericSegmentTree2.RangeUpdateFn.MULTIPLICATION);\n\n    // [4, 2, 6, 8, -2]\n    st1.rangeUpdate1(0, 4, 2);\n    assertThat(st1.rangeQuery1(0, 4)).isEqualTo(8);\n    assertThat(st1.rangeQuery1(0, 0)).isEqualTo(4);\n    assertThat(st1.rangeQuery1(0, 1)).isEqualTo(4);\n    assertThat(st1.rangeQuery1(0, 2)).isEqualTo(6);\n    assertThat(st1.rangeQuery1(1, 3)).isEqualTo(8);\n\n    // [4, 2, 6, -16, 4]\n    st1.rangeUpdate1(3, 4, -2);\n    assertThat(st1.rangeQuery1(0, 4)).isEqualTo(6);\n    assertThat(st1.rangeQuery1(0, 0)).isEqualTo(4);\n    assertThat(st1.rangeQuery1(0, 1)).isEqualTo(4);\n    assertThat(st1.rangeQuery1(0, 2)).isEqualTo(6);\n    assertThat(st1.rangeQuery1(1, 3)).isEqualTo(6);\n    assertThat(st1.rangeQuery1(3, 4)).isEqualTo(4);\n  }\n\n  @Test\n  public void minQueryMulUpdate_simple() {\n    long[] ar = {2, 1, 3, 4, -1};\n    GenericSegmentTree2 st1 =\n        new GenericSegmentTree2(\n            ar,\n            GenericSegmentTree2.SegmentCombinationFn.MIN,\n            GenericSegmentTree2.RangeUpdateFn.MULTIPLICATION);\n\n    // [4, 2, 6, 8, -2]\n    st1.rangeUpdate1(0, 4, 2);\n    assertThat(st1.rangeQuery1(0, 4)).isEqualTo(-2);\n    assertThat(st1.rangeQuery1(0, 0)).isEqualTo(4);\n    assertThat(st1.rangeQuery1(0, 1)).isEqualTo(2);\n    assertThat(st1.rangeQuery1(0, 2)).isEqualTo(2);\n    assertThat(st1.rangeQuery1(1, 3)).isEqualTo(2);\n\n    // [4, 2, 6, -16, 4]\n    st1.rangeUpdate1(3, 4, -2);\n    assertThat(st1.rangeQuery1(0, 4)).isEqualTo(-16);\n    assertThat(st1.rangeQuery1(0, 0)).isEqualTo(4);\n    assertThat(st1.rangeQuery1(0, 1)).isEqualTo(2);\n    assertThat(st1.rangeQuery1(0, 2)).isEqualTo(2);\n    assertThat(st1.rangeQuery1(1, 3)).isEqualTo(-16);\n    assertThat(st1.rangeQuery1(3, 4)).isEqualTo(-16);\n  }\n\n  // Test segment tree min/max with mul range updates. These tests have smaller\n  // values to avoid overflow\n  // @Test\n  // public void testMinMax_mul() {\n  //   GenericSegmentTree2.SegmentCombinationFn[] combinationFns = {\n  //     GenericSegmentTree2.SegmentCombinationFn.MIN, GenericSegmentTree2.SegmentCombinationFn.MAX\n  //   };\n\n  //   GenericSegmentTree2.RangeUpdateFn[] rangeUpdateFns = {\n  //     GenericSegmentTree2.RangeUpdateFn.MULTIPLICATION\n  //   };\n\n  //   for (GenericSegmentTree2.SegmentCombinationFn combinationFn : combinationFns) {\n  //     for (GenericSegmentTree2.RangeUpdateFn rangeUpdateFn : rangeUpdateFns) {\n\n  //       for (int n = 5; n < 20; n++) {\n  //         long[] ar = TestUtils.randomLongArray(n, -5, +5);\n  //         GenericSegmentTree2 st =\n  //             new GenericSegmentTree2(\n  //                 ar, GenericSegmentTree2.SegmentCombinationFn.MIN, rangeUpdateFn);\n  //         GenericSegmentTree2 st2 =\n  //             new GenericSegmentTree2(\n  //                 ar, GenericSegmentTree2.SegmentCombinationFn.MAX, rangeUpdateFn);\n  //         System.out.println();\n\n  //         for (int i = 0; i < n; i++) {\n  //           int j = TestUtils.randValue(0, n - 1);\n  //           int k = TestUtils.randValue(0, n - 1);\n  //           int i1 = Math.min(j, k);\n  //           int i2 = Math.max(j, k);\n\n  //           j = TestUtils.randValue(0, n - 1);\n  //           k = TestUtils.randValue(0, n - 1);\n  //           int i3 = Math.min(j, k);\n  //           int i4 = Math.max(j, k);\n\n  //           // Range update\n  //           long randValue = TestUtils.randValue(-10, 10);\n  //           System.out.printf(\"UPDATE [%d, %d] with %d\\n\", i3, i4, randValue);\n\n  //           if (rangeUpdateFn == GenericSegmentTree2.RangeUpdateFn.ADDITION) {\n  //             bruteForceSumRangeUpdate(ar, i3, i4, randValue);\n  //           } else if (rangeUpdateFn == GenericSegmentTree2.RangeUpdateFn.ASSIGN) {\n  //             bruteForceAssignRangeUpdate(ar, i3, i4, randValue);\n  //           } else if (rangeUpdateFn == GenericSegmentTree2.RangeUpdateFn.MULTIPLICATION) {\n  //             bruteForceMulRangeUpdate(ar, i3, i4, randValue);\n  //           }\n\n  //           st.rangeUpdate1(i3, i4, randValue);\n  //           st2.rangeUpdate1(i3, i4, randValue);\n\n  //           long bf = 0;\n\n  //           if (combinationFn == GenericSegmentTree2.SegmentCombinationFn.SUM) {\n  //             bf = bruteForceSum(ar, i1, i2);\n  //           } else if (combinationFn == GenericSegmentTree2.SegmentCombinationFn.MIN) {\n  //             bf = bruteForceMin(ar, i1, i2);\n  //           } else if (combinationFn == GenericSegmentTree2.SegmentCombinationFn.MAX) {\n  //             bf = bruteForceMax(ar, i1, i2);\n  //           }\n\n  //           long segTreeAnswer = st.rangeQuery1(i1, i2);\n  //           long segTreeAnswer2 = st2.rangeQuery1(i1, i2);\n  //           System.out.printf(\n  //               \"QUERY [%d, %d] want: %d, got: %d, got2: %d\\n\",\n  //               i1, i2, bf, segTreeAnswer, segTreeAnswer2);\n  //           // System.out.printf(\"QUERY [%d, %d] want: %d, got: %d\\n\", i1, i2, bf,\n  // segTreeAnswer2);\n  //           if (bf != segTreeAnswer) {\n  //             System.out.printf(\n  //                 \"(%s query, %s range update) | [%d, %d], want = %d, got = %d, got2 = %d\\n\",\n  //                 combinationFn, rangeUpdateFn, i1, i2, bf, segTreeAnswer, segTreeAnswer2);\n  //           }\n  //           assertThat(bf).isEqualTo(segTreeAnswer);\n  //         }\n  //       }\n  //     }\n  //   }\n  // }\n\n  @Test\n  public void testAllFunctionCombinations() {\n    GenericSegmentTree2.SegmentCombinationFn[] combinationFns = {\n      GenericSegmentTree2.SegmentCombinationFn.SUM,\n      GenericSegmentTree2.SegmentCombinationFn.MIN,\n      GenericSegmentTree2.SegmentCombinationFn.MAX,\n    };\n\n    GenericSegmentTree2.RangeUpdateFn[] rangeUpdateFns = {\n      GenericSegmentTree2.RangeUpdateFn.ADDITION,\n      GenericSegmentTree2.RangeUpdateFn.ASSIGN,\n      GenericSegmentTree2.RangeUpdateFn.MULTIPLICATION\n    };\n\n    for (GenericSegmentTree2.SegmentCombinationFn combinationFn : combinationFns) {\n      for (GenericSegmentTree2.RangeUpdateFn rangeUpdateFn : rangeUpdateFns) {\n\n        // TODO(issue/208): The multiplication range update function seems to be suffering\n        // from overflow issues and not being able to handle negative numbers.\n        //\n        // One idea might be to also track the min value for the max query and vice versa\n        // and swap values when a negative number is found?\n        if (rangeUpdateFn == GenericSegmentTree2.RangeUpdateFn.MULTIPLICATION\n            && (combinationFn == GenericSegmentTree2.SegmentCombinationFn.MIN\n                || combinationFn == GenericSegmentTree2.SegmentCombinationFn.MAX)) {\n          continue;\n        }\n\n        for (int n = 5; n < ITERATIONS; n++) {\n          long[] ar = TestUtils.randomLongArray(n, -100, +100);\n          GenericSegmentTree2 st = new GenericSegmentTree2(ar, combinationFn, rangeUpdateFn);\n\n          for (int i = 0; i < n; i++) {\n            int j = TestUtils.randValue(0, n - 1);\n            int k = TestUtils.randValue(0, n - 1);\n            int i1 = Math.min(j, k);\n            int i2 = Math.max(j, k);\n\n            j = TestUtils.randValue(0, n - 1);\n            k = TestUtils.randValue(0, n - 1);\n            int i3 = Math.min(j, k);\n            int i4 = Math.max(j, k);\n\n            // Range update\n            long randValue = TestUtils.randValue(-10, 10);\n            // System.out.printf(\"UPDATE [%d, %d] with %d\\n\", i3, i4, randValue);\n\n            if (rangeUpdateFn == GenericSegmentTree2.RangeUpdateFn.ADDITION) {\n              bruteForceSumRangeUpdate(ar, i3, i4, randValue);\n            } else if (rangeUpdateFn == GenericSegmentTree2.RangeUpdateFn.ASSIGN) {\n              bruteForceAssignRangeUpdate(ar, i3, i4, randValue);\n            } else if (rangeUpdateFn == GenericSegmentTree2.RangeUpdateFn.MULTIPLICATION) {\n              bruteForceMulRangeUpdate(ar, i3, i4, randValue);\n            }\n\n            st.rangeUpdate1(i3, i4, randValue);\n\n            long bf = 0;\n\n            if (combinationFn == GenericSegmentTree2.SegmentCombinationFn.SUM) {\n              bf = bruteForceSum(ar, i1, i2);\n            } else if (combinationFn == GenericSegmentTree2.SegmentCombinationFn.MIN) {\n              bf = bruteForceMin(ar, i1, i2);\n            } else if (combinationFn == GenericSegmentTree2.SegmentCombinationFn.MAX) {\n              bf = bruteForceMax(ar, i1, i2);\n            }\n\n            long segTreeAnswer = st.rangeQuery1(i1, i2);\n            if (bf != segTreeAnswer) {\n              System.out.printf(\n                  \"(%s query, %s range update) | [%d, %d], want = %d, got = %d\\n\",\n                  combinationFn, rangeUpdateFn, i1, i2, bf, segTreeAnswer);\n            }\n            assertThat(bf).isEqualTo(segTreeAnswer);\n          }\n        }\n      }\n    }\n  }\n\n  // Finds the sum in an array between [l, r] in the `values` array\n  private static long bruteForceSum(long[] values, int l, int r) {\n    long s = 0;\n    for (int i = l; i <= r; i++) {\n      s += values[i];\n    }\n    return s;\n  }\n\n  // Finds the min value in an array between [l, r] in the `values` array\n  private static long bruteForceMin(long[] values, int l, int r) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) {\n      m = Math.min(m, values[i]);\n    }\n    return m;\n  }\n\n  // Finds the max value in an array between [l, r] in the `values` array\n  private static long bruteForceMax(long[] values, int l, int r) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) {\n      m = Math.max(m, values[i]);\n    }\n    return m;\n  }\n\n  private static void bruteForceSumRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] += x;\n    }\n  }\n\n  private static void bruteForceMulRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] *= x;\n    }\n  }\n\n  private static void bruteForceAssignRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] = x;\n    }\n  }\n}\n"}
{"code_source": "/**\n * An implementation of a hashtable using double hashing as a collision resolution technique.\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.hashtable;\n\nimport java.math.BigInteger;\n\npublic class HashTableDoubleHashing<K extends SecondaryHash, V>\n    extends HashTableOpenAddressingBase<K, V> {\n\n  private int hash;\n\n  public HashTableDoubleHashing() {\n    super();\n  }\n\n  public HashTableDoubleHashing(int capacity) {\n    super(capacity);\n  }\n\n  // Designated constructor\n  public HashTableDoubleHashing(int capacity, double loadFactor) {\n    super(capacity, loadFactor);\n  }\n\n  @Override\n  protected void setupProbing(K key) {\n    // Cache second hash value.\n    hash = normalizeIndex(key.hashCode2());\n\n    // Fail safe to avoid infinite loop.\n    if (hash == 0) hash = 1;\n  }\n\n  @Override\n  protected int probe(int x) {\n    return x * hash;\n  }\n\n  // Adjust the capacity until it is a prime number. The reason for\n  // doing this is to help ensure that the GCD(hash, capacity) = 1 when\n  // probing so that all the cells can be reached.\n  @Override\n  protected void adjustCapacity() {\n    while (!(new BigInteger(String.valueOf(capacity)).isProbablePrime(20))) {\n      capacity++;\n    }\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.hashtable;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.*;\nimport org.junit.*;\n\npublic class HashTableDoubleHashingTest {\n\n  static final Random RANDOM = new Random();\n  static int LOOPS, MAX_SIZE, MAX_RAND_NUM;\n\n  static {\n    LOOPS = 500;\n    MAX_SIZE = randInt(1, 750);\n    MAX_RAND_NUM = randInt(1, 350);\n  }\n\n  HashTableDoubleHashing<DoubleHashingTestObject, Integer> map;\n\n  @Before\n  public void setup() {\n    map = new HashTableDoubleHashing<>();\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testNullKey() {\n    map.put(null, 5);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testIllegalCreation1() {\n    new HashTableDoubleHashing<>(-3, 0.5);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testIllegalCreation2() {\n    new HashTableDoubleHashing<>(5, Double.POSITIVE_INFINITY);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testIllegalCreation3() {\n    new HashTableDoubleHashing<>(6, -0.5);\n  }\n\n  @Test\n  public void testLegalCreation() {\n    // System.out.println(\"testLegalCreation\");\n    new HashTableDoubleHashing<>(6, 0.9);\n  }\n\n  @Test\n  public void testUpdatingValue() {\n    // System.out.println(\"testUpdatingValue\");\n    DoubleHashingTestObject o1 = new DoubleHashingTestObject(1);\n    DoubleHashingTestObject o5 = new DoubleHashingTestObject(5);\n    DoubleHashingTestObject on7 = new DoubleHashingTestObject(-7);\n\n    map.add(o1, 1);\n    assertThat(map.get(o1)).isEqualTo(1);\n\n    map.add(o5, 5);\n    assertThat(map.get(o5)).isEqualTo(5);\n\n    map.add(on7, -7);\n    assertThat(map.get(on7)).isEqualTo(-7);\n  }\n\n  @Test\n  public void testIterator() {\n\n    HashMap<DoubleHashingTestObject, DoubleHashingTestObject> jmap = new HashMap<>();\n    HashTableDoubleHashing<DoubleHashingTestObject, DoubleHashingTestObject> mmap =\n        new HashTableDoubleHashing<>();\n    map = null; // Mark null to make sure is not used\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      mmap.clear();\n      jmap.clear();\n      assertThat(mmap.isEmpty()).isTrue();\n\n      List<DoubleHashingTestObject> rand_nums = genRandList(MAX_SIZE);\n      for (DoubleHashingTestObject key : rand_nums)\n        assertThat(mmap.add(key, key)).isEqualTo(jmap.put(key, key));\n\n      int count = 0;\n      for (DoubleHashingTestObject key : mmap) {\n        assertThat(mmap.get(key)).isEqualTo(key);\n        assertThat(mmap.get(key)).isEqualTo(jmap.get(key));\n        assertThat(mmap.hasKey(key)).isTrue();\n        assertThat(rand_nums.contains(key)).isTrue();\n        count++;\n      }\n\n      for (DoubleHashingTestObject key : jmap.keySet()) {\n        assertThat(mmap.get(key)).isEqualTo(key);\n      }\n\n      Set<DoubleHashingTestObject> set = new HashSet<>();\n      for (DoubleHashingTestObject n : rand_nums) set.add(n);\n\n      // System.out.println(set.size() + \" \" + jmap.size() + \" \" + count);\n\n      assertThat(set.size()).isEqualTo(count);\n      assertThat(jmap.size()).isEqualTo(count);\n    }\n  }\n\n  @Test(expected = java.util.ConcurrentModificationException.class)\n  public void testConcurrentModificationException() {\n    // System.out.println(\"testConcurrentModificationException\");\n    DoubleHashingTestObject o1 = new DoubleHashingTestObject(1);\n    DoubleHashingTestObject o2 = new DoubleHashingTestObject(2);\n    DoubleHashingTestObject o3 = new DoubleHashingTestObject(3);\n    DoubleHashingTestObject o4 = new DoubleHashingTestObject(4);\n    map.add(o1, 1);\n    map.add(o2, 1);\n    map.add(o3, 1);\n    for (DoubleHashingTestObject key : map) map.add(o4, 4);\n  }\n\n  @Test(expected = java.util.ConcurrentModificationException.class)\n  public void testConcurrentModificationException2() {\n    DoubleHashingTestObject o1 = new DoubleHashingTestObject(1);\n    DoubleHashingTestObject o2 = new DoubleHashingTestObject(2);\n    DoubleHashingTestObject o3 = new DoubleHashingTestObject(3);\n    map.add(o1, 1);\n    map.add(o2, 1);\n    map.add(o3, 1);\n    for (DoubleHashingTestObject key : map) map.remove(o2);\n  }\n\n  @Test\n  public void randomRemove() {\n\n    HashTableDoubleHashing<DoubleHashingTestObject, Integer> map;\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      map = new HashTableDoubleHashing<>();\n      map.clear();\n\n      // Add some random values\n      Set<DoubleHashingTestObject> keys_set = new HashSet<>();\n      for (int i = 0; i < MAX_SIZE; i++) {\n        int randomVal = randInt(-MAX_RAND_NUM, MAX_RAND_NUM);\n        DoubleHashingTestObject obj = new DoubleHashingTestObject(randomVal);\n        keys_set.add(obj);\n        map.put(obj, 5);\n      }\n\n      assertThat(map.size()).isEqualTo(keys_set.size());\n\n      List<DoubleHashingTestObject> keys = map.keys();\n      for (DoubleHashingTestObject key : keys) map.remove(key);\n\n      assertThat(map.isEmpty()).isTrue();\n    }\n  }\n\n  @Test\n  public void removeTest() {\n\n    HashTableDoubleHashing<DoubleHashingTestObject, Integer> map = new HashTableDoubleHashing<>(7);\n\n    DoubleHashingTestObject o11 = new DoubleHashingTestObject(11);\n    DoubleHashingTestObject o12 = new DoubleHashingTestObject(12);\n    DoubleHashingTestObject o13 = new DoubleHashingTestObject(13);\n\n    // Add three elements\n    map.put(o11, 0);\n    map.put(o12, 0);\n    map.put(o13, 0);\n    assertThat(map.size()).isEqualTo(3);\n\n    // Add ten more\n    for (int i = 1; i <= 10; i++) map.put(new DoubleHashingTestObject(i), 0);\n    assertThat(map.size()).isEqualTo(13);\n\n    // Remove ten\n    for (int i = 1; i <= 10; i++) map.remove(new DoubleHashingTestObject(i));\n    assertThat(map.size()).isEqualTo(3);\n\n    // remove three\n    map.remove(o11);\n    map.remove(o12);\n    map.remove(o13);\n    assertThat(map.size()).isEqualTo(0);\n  }\n\n  @Test\n  public void testRandomMapOperations() {\n\n    HashMap<DoubleHashingTestObject, Integer> jmap = new HashMap<>();\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      map.clear();\n      jmap.clear();\n      assertThat(jmap.size()).isEqualTo(map.size());\n\n      map = new HashTableDoubleHashing<>();\n\n      final double probability1 = Math.random();\n      final double probability2 = Math.random();\n\n      List<DoubleHashingTestObject> nums = genRandList(MAX_SIZE);\n      for (int i = 0; i < MAX_SIZE; i++) {\n\n        double r = Math.random();\n\n        DoubleHashingTestObject key = nums.get(i);\n        int val = i;\n\n        if (r < probability1) assertThat(jmap.put(key, val)).isEqualTo(map.put(key, val));\n\n        assertThat(jmap.get(key)).isEqualTo(map.get(key));\n        assertThat(jmap.containsKey(key)).isEqualTo(map.containsKey(key));\n        assertThat(jmap.size()).isEqualTo(map.size());\n\n        if (r > probability2) assertThat(map.remove(key)).isEqualTo(jmap.remove(key));\n\n        assertThat(jmap.get(key)).isEqualTo(map.get(key));\n        assertThat(jmap.containsKey(key)).isEqualTo(map.containsKey(key));\n        assertThat(jmap.size()).isEqualTo(map.size());\n      }\n    }\n  }\n\n  @Test\n  public void randomIteratorTests() {\n\n    HashTableDoubleHashing<DoubleHashingTestObject, LinkedList<Integer>> m =\n        new HashTableDoubleHashing<>();\n    HashMap<DoubleHashingTestObject, LinkedList<Integer>> hm = new HashMap<>();\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      m.clear();\n      hm.clear();\n      assertThat(m.size()).isEqualTo(hm.size());\n\n      int sz = randInt(1, MAX_SIZE);\n      m = new HashTableDoubleHashing<>(sz);\n      hm = new HashMap<>(sz);\n\n      final double probability = Math.random();\n\n      for (int i = 0; i < MAX_SIZE; i++) {\n\n        int keyValue = randInt(0, MAX_SIZE - 1);\n        DoubleHashingTestObject key = new DoubleHashingTestObject(keyValue);\n        LinkedList<Integer> l1 = m.get(key);\n        LinkedList<Integer> l2 = hm.get(key);\n\n        if (l2 == null) {\n          l1 = new LinkedList<Integer>();\n          l2 = new LinkedList<Integer>();\n          m.put(key, l1);\n          hm.put(key, l2);\n        }\n\n        int randVal = randInt(-MAX_SIZE, MAX_SIZE);\n\n        if (Math.random() < probability) {\n\n          l1.removeFirstOccurrence(randVal);\n          l2.removeFirstOccurrence(randVal);\n\n        } else {\n\n          l1.add(randVal);\n          l2.add(randVal);\n        }\n\n        assertThat(m.size()).isEqualTo(hm.size());\n        assertThat(l1).isEqualTo(l2);\n      }\n    }\n  }\n\n  static int randInt(int min, int max) {\n    return RANDOM.nextInt((max - min) + 1) + min;\n  }\n\n  // Generate a list of random numbers\n  static List<DoubleHashingTestObject> genRandList(int sz) {\n\n    List<DoubleHashingTestObject> lst = new ArrayList<>(sz);\n    for (int i = 0; i < sz; i++) {\n      int randNum = randInt(-MAX_RAND_NUM, MAX_RAND_NUM);\n      DoubleHashingTestObject obj = new DoubleHashingTestObject(randNum);\n      lst.add(obj);\n    }\n    Collections.shuffle(lst);\n    return lst;\n  }\n\n  // Generate a list of unique random numbers\n  static List<DoubleHashingTestObject> genUniqueRandList(int sz) {\n    List<DoubleHashingTestObject> lst = new ArrayList<>(sz);\n    for (int i = 0; i < sz; i++) {\n      DoubleHashingTestObject obj = new DoubleHashingTestObject(i);\n      lst.add(obj);\n    }\n    Collections.shuffle(lst);\n    return lst;\n  }\n}\n"}
{"code_source": "/**\n * An implementation of a hash-table using open addressing with linear probing as a collision\n * resolution method.\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.hashtable;\n\npublic class HashTableLinearProbing<K, V> extends HashTableOpenAddressingBase<K, V> {\n\n  // This is the linear constant used in the linear probing, it can be\n  // any positive number. The table capacity will be adjusted so that\n  // the GCD(capacity, LINEAR_CONSTANT) = 1 so that all buckets can be probed.\n  private static final int LINEAR_CONSTANT = 17;\n\n  public HashTableLinearProbing() {\n    super();\n  }\n\n  public HashTableLinearProbing(int capacity) {\n    super(capacity);\n  }\n\n  public HashTableLinearProbing(int capacity, double loadFactor) {\n    super(capacity, loadFactor);\n  }\n\n  @Override\n  protected void setupProbing(K key) {}\n\n  @Override\n  protected int probe(int x) {\n    return LINEAR_CONSTANT * x;\n  }\n\n  // Adjust the capacity so that the linear constant and\n  // the table capacity are relatively prime.\n  @Override\n  protected void adjustCapacity() {\n    while (gcd(LINEAR_CONSTANT, capacity) != 1) {\n      capacity++;\n    }\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.hashtable;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.*;\nimport org.junit.*;\n\npublic class HashTableLinearProbingTest {\n\n  // You can set the hash value of this object to be whatever you want\n  // This makes it great for testing special cases.\n  static class HashObject {\n    final int hash, data;\n\n    public HashObject(int hash, int data) {\n      this.hash = hash;\n      this.data = data;\n    }\n\n    @Override\n    public int hashCode() {\n      return hash;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      HashObject ho = (HashObject) o;\n      return hashCode() == ho.hashCode() && data == ho.data;\n    }\n  }\n\n  static final Random RANDOM = new Random();\n  static int LOOPS, MAX_SIZE, MAX_RAND_NUM;\n\n  static {\n    LOOPS = 500;\n    MAX_SIZE = randInt(1, 750);\n    MAX_RAND_NUM = randInt(1, 350);\n  }\n\n  HashTableLinearProbing<Integer, Integer> map;\n\n  @Before\n  public void setup() {\n    map = new HashTableLinearProbing<>();\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testNullKey() {\n    map.put(null, 5);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testIllegalCreation1() {\n    new HashTableLinearProbing<>(-3, 0.5);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testIllegalCreation2() {\n    new HashTableLinearProbing<>(5, Double.POSITIVE_INFINITY);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testIllegalCreation3() {\n    new HashTableLinearProbing<>(6, -0.5);\n  }\n\n  @Test\n  public void testLegalCreation() {\n    new HashTableLinearProbing<>(6, 0.9);\n  }\n\n  @Test\n  public void testUpdatingValue() {\n\n    map.add(1, 1);\n    assertThat(map.get(1)).isEqualTo(1);\n\n    map.add(1, 5);\n    assertThat(map.get(1)).isEqualTo(5);\n\n    map.add(1, -7);\n    assertThat(map.get(1)).isEqualTo(-7);\n  }\n\n  @Test\n  public void testIterator() {\n\n    HashMap<Integer, Integer> map2 = new HashMap<>();\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      map.clear();\n      map2.clear();\n      assertThat(map.isEmpty()).isTrue();\n\n      map = new HashTableLinearProbing<>();\n\n      List<Integer> rand_nums = genRandList(MAX_SIZE);\n      for (Integer key : rand_nums) assertThat(map.add(key, key)).isEqualTo(map2.put(key, key));\n\n      int count = 0;\n      for (Integer key : map) {\n        assertThat(map.get(key)).isEqualTo(key);\n        assertThat(map.get(key)).isEqualTo(map2.get(key));\n        assertThat(map.hasKey(key)).isTrue();\n        assertThat(rand_nums.contains(key)).isTrue();\n        count++;\n      }\n\n      for (Integer key : map2.keySet()) {\n        assertThat(map.get(key)).isEqualTo(key);\n      }\n\n      Set<Integer> set = new HashSet<>();\n      for (int n : rand_nums) set.add(n);\n\n      assertThat(set.size()).isEqualTo(count);\n      assertThat(map2.size()).isEqualTo(count);\n    }\n  }\n\n  @Test(expected = java.util.ConcurrentModificationException.class)\n  public void testConcurrentModificationException() {\n    map.add(1, 1);\n    map.add(2, 1);\n    map.add(3, 1);\n    for (Integer key : map) map.add(4, 4);\n  }\n\n  @Test(expected = java.util.ConcurrentModificationException.class)\n  public void testConcurrentModificationException2() {\n    map.add(1, 1);\n    map.add(2, 1);\n    map.add(3, 1);\n    for (Integer key : map) map.remove(2);\n  }\n\n  @Test\n  public void randomRemove() {\n\n    HashTableLinearProbing<Integer, Integer> map;\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      map = new HashTableLinearProbing<>();\n      map.clear();\n\n      // Add some random values\n      Set<Integer> keys_set = new HashSet<>();\n      for (int i = 0; i < MAX_SIZE; i++) {\n        int randomVal = randInt(-MAX_RAND_NUM, MAX_RAND_NUM);\n        keys_set.add(randomVal);\n        map.put(randomVal, 5);\n      }\n\n      assertThat(map.size()).isEqualTo(keys_set.size());\n\n      List<Integer> keys = map.keys();\n      for (Integer key : keys) map.remove(key);\n\n      assertThat(map.isEmpty()).isTrue();\n    }\n  }\n\n  @Test\n  public void removeTest() {\n\n    HashTableLinearProbing<Integer, Integer> map = new HashTableLinearProbing<>(7);\n\n    // Add three elements\n    map.put(11, 0);\n    map.put(12, 0);\n    map.put(13, 0);\n    assertThat(map.size()).isEqualTo(3);\n\n    // Add ten more\n    for (int i = 1; i <= 10; i++) map.put(i, 0);\n    assertThat(map.size()).isEqualTo(13);\n\n    // Remove ten\n    for (int i = 1; i <= 10; i++) map.remove(i);\n    assertThat(map.size()).isEqualTo(3);\n\n    // remove three\n    map.remove(11);\n    map.remove(12);\n    map.remove(13);\n    assertThat(map.size()).isEqualTo(0);\n  }\n\n  @Test\n  public void removeTestComplex1() {\n\n    HashTableLinearProbing<HashObject, Integer> map = new HashTableLinearProbing<>();\n\n    HashObject o1 = new HashObject(88, 1);\n    HashObject o2 = new HashObject(88, 2);\n    HashObject o3 = new HashObject(88, 3);\n    HashObject o4 = new HashObject(88, 4);\n\n    map.add(o1, 111);\n    map.add(o2, 111);\n    map.add(o3, 111);\n    map.add(o4, 111);\n\n    map.remove(o2);\n    map.remove(o3);\n    map.remove(o1);\n    map.remove(o4);\n\n    assertThat(map.size()).isEqualTo(0);\n  }\n\n  @Test\n  public void testRandomMapOperations() {\n\n    HashMap<Integer, Integer> jmap = new HashMap<>();\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      map.clear();\n      jmap.clear();\n      assertThat(jmap.size()).isEqualTo(map.size());\n\n      map = new HashTableLinearProbing<>();\n\n      final double probability1 = Math.random();\n      final double probability2 = Math.random();\n\n      List<Integer> nums = genRandList(MAX_SIZE);\n      for (int i = 0; i < MAX_SIZE; i++) {\n\n        double r = Math.random();\n\n        int key = nums.get(i);\n        int val = i;\n\n        if (r < probability1) assertThat(jmap.put(key, val)).isEqualTo(map.put(key, val));\n\n        assertThat(jmap.get(key)).isEqualTo(map.get(key));\n        assertThat(jmap.containsKey(key)).isEqualTo(map.containsKey(key));\n        assertThat(jmap.size()).isEqualTo(map.size());\n\n        if (r > probability2) assertThat(map.remove(key)).isEqualTo(jmap.remove(key));\n\n        assertThat(jmap.get(key)).isEqualTo(map.get(key));\n        assertThat(jmap.containsKey(key)).isEqualTo(map.containsKey(key));\n        assertThat(jmap.size()).isEqualTo(map.size());\n      }\n    }\n  }\n\n  @Test\n  public void randomIteratorTests() {\n\n    HashTableLinearProbing<Integer, LinkedList<Integer>> m = new HashTableLinearProbing<>();\n    HashMap<Integer, LinkedList<Integer>> hm = new HashMap<>();\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      m.clear();\n      hm.clear();\n      assertThat(m.size()).isEqualTo(hm.size());\n\n      int sz = randInt(1, MAX_SIZE);\n      m = new HashTableLinearProbing<>(sz);\n      hm = new HashMap<>(sz);\n\n      final double probability = Math.random();\n\n      for (int i = 0; i < MAX_SIZE; i++) {\n\n        int index = randInt(0, MAX_SIZE - 1);\n        LinkedList<Integer> l1 = m.get(index);\n        LinkedList<Integer> l2 = hm.get(index);\n\n        if (l2 == null) {\n          l1 = new LinkedList<Integer>();\n          l2 = new LinkedList<Integer>();\n          m.put(index, l1);\n          hm.put(index, l2);\n        }\n\n        int rand_val = randInt(-MAX_SIZE, MAX_SIZE);\n\n        if (Math.random() < probability) {\n\n          l1.removeFirstOccurrence(rand_val);\n          l2.removeFirstOccurrence(rand_val);\n\n        } else {\n\n          l1.add(rand_val);\n          l2.add(rand_val);\n        }\n\n        assertThat(m.size()).isEqualTo(hm.size());\n        assertThat(l1).isEqualTo(l2);\n      }\n    }\n  }\n\n  static int randInt(int min, int max) {\n    return RANDOM.nextInt((max - min) + 1) + min;\n  }\n\n  // Generate a list of random numbers\n  static List<Integer> genRandList(int sz) {\n\n    List<Integer> lst = new ArrayList<>(sz);\n    for (int i = 0; i < sz; i++) lst.add(randInt(-MAX_RAND_NUM, MAX_RAND_NUM));\n    Collections.shuffle(lst);\n    return lst;\n  }\n\n  // Generate a list of unique random numbers\n  static List<Integer> genUniqueRandList(int sz) {\n    List<Integer> lst = new ArrayList<>(sz);\n    for (int i = 0; i < sz; i++) lst.add(i);\n    Collections.shuffle(lst);\n    return lst;\n  }\n}\n"}
{"code_source": "/**\n * An implementation of a hash-table using open addressing with quadratic probing as a collision\n * resolution method.\n *\n * <p>In this implementation we are using the following probing function: H(k, x) = h(k) + f(x) mod\n * 2^n\n *\n * <p>Where h(k) is the hash for the given key, f(x) = (x + x^2) / 2 and n is a natural number. We\n * are using this probing function because it is guaranteed to find an empty cell (i.e it generates\n * all the numbers in the range [0, 2^n) without repetition for the first 2^n numbers).\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.hashtable;\n\npublic class HashTableQuadraticProbing<K, V> extends HashTableOpenAddressingBase<K, V> {\n\n  public HashTableQuadraticProbing() {\n    super();\n  }\n\n  public HashTableQuadraticProbing(int capacity) {\n    super(capacity);\n  }\n\n  // Designated constructor\n  public HashTableQuadraticProbing(int capacity, double loadFactor) {\n    super(capacity, loadFactor);\n  }\n\n  // Given a number this method finds the next\n  // power of two above this value.\n  private static int nextPowerOfTwo(int n) {\n    return Integer.highestOneBit(n) << 1;\n  }\n\n  // No setup required for quadratic probing.\n  @Override\n  protected void setupProbing(K key) {}\n\n  @Override\n  protected int probe(int x) {\n    // Quadratic probing function (x^2+x)/2\n    return (x * x + x) >> 1;\n  }\n\n  // Increase the capacity of the hashtable to the next power of two.\n  @Override\n  protected void increaseCapacity() {\n    capacity = nextPowerOfTwo(capacity);\n  }\n\n  // Adjust the capacity of the hashtable to be a power of two.\n  @Override\n  protected void adjustCapacity() {\n    int pow2 = Integer.highestOneBit(capacity);\n    if (capacity == pow2) return;\n    increaseCapacity();\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.hashtable;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.*;\nimport org.junit.*;\n\npublic class HashTableQuadraticProbingTest {\n\n  // You can set the hash value of this object to be whatever you want\n  // This makes it great for testing special cases.\n  static class HashObject {\n    final int hash, data;\n\n    public HashObject(int hash, int data) {\n      this.hash = hash;\n      this.data = data;\n    }\n\n    @Override\n    public int hashCode() {\n      return hash;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      HashObject ho = (HashObject) o;\n      return hashCode() == ho.hashCode() && data == ho.data;\n    }\n  }\n\n  static final Random RANDOM = new Random();\n  static int LOOPS, MAX_SIZE, MAX_RAND_NUM;\n\n  static {\n    LOOPS = 500;\n    MAX_SIZE = randInt(1, 750);\n    MAX_RAND_NUM = randInt(1, 350);\n  }\n\n  HashTableQuadraticProbing<Integer, Integer> map;\n\n  @Before\n  public void setup() {\n    map = new HashTableQuadraticProbing<>();\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testNullKey() {\n    map.put(null, 5);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testIllegalCreation1() {\n    new HashTableQuadraticProbing<>(-3, 0.5);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testIllegalCreation2() {\n    new HashTableQuadraticProbing<>(5, Double.POSITIVE_INFINITY);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testIllegalCreation3() {\n    new HashTableQuadraticProbing<>(6, -0.5);\n  }\n\n  @Test\n  public void testLegalCreation() {\n    new HashTableQuadraticProbing<>(6, 0.9);\n  }\n\n  @Test\n  public void testUpdatingValue() {\n\n    map.add(1, 1);\n    assertThat(map.get(1)).isEqualTo(1);\n\n    map.add(1, 5);\n    assertThat(map.get(1)).isEqualTo(5);\n\n    map.add(1, -7);\n    assertThat(map.get(1)).isEqualTo(-7);\n  }\n\n  private void assertCapacityIsPowerOfTwo(HashTableQuadraticProbing<Integer, Integer> ht) {\n    int sz = ht.getCapacity();\n    if (sz == 0) return;\n    assertThat((sz & (sz - 1))).isEqualTo(0);\n  }\n\n  // Test that as the table size increases the hashtable\n  // remains as a power of two.\n  @Test\n  public void testTableSize() {\n    int loops = 10000;\n    for (int sz = 1; sz <= 32; sz++) {\n      HashTableQuadraticProbing<Integer, Integer> ht;\n      ht = new HashTableQuadraticProbing<>(sz);\n      for (int i = 0; i < loops; i++) {\n        assertCapacityIsPowerOfTwo(ht);\n        ht.add(i, i);\n      }\n    }\n  }\n\n  @Test\n  public void testIterator() {\n\n    HashMap<Integer, Integer> map2 = new HashMap<>();\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      map.clear();\n      map2.clear();\n      assertThat(map.isEmpty()).isTrue();\n\n      map = new HashTableQuadraticProbing<>();\n\n      List<Integer> rand_nums = genRandList(MAX_SIZE);\n      for (Integer key : rand_nums) assertThat(map.add(key, key)).isEqualTo(map2.put(key, key));\n\n      int count = 0;\n      for (Integer key : map) {\n        assertThat(map.get(key)).isEqualTo(key);\n        assertThat(map.get(key)).isEqualTo(map2.get(key));\n        assertThat(map.hasKey(key)).isTrue();\n        assertThat(rand_nums.contains(key)).isTrue();\n        count++;\n      }\n\n      for (Integer key : map2.keySet()) {\n        assertThat(map.get(key)).isEqualTo(key);\n      }\n\n      Set<Integer> set = new HashSet<>();\n      for (int n : rand_nums) set.add(n);\n\n      assertThat(set.size()).isEqualTo(count);\n      assertThat(map2.size()).isEqualTo(count);\n    }\n  }\n\n  @Test(expected = java.util.ConcurrentModificationException.class)\n  public void testConcurrentModificationException() {\n    map.add(1, 1);\n    map.add(2, 1);\n    map.add(3, 1);\n    for (Integer key : map) map.add(4, 4);\n  }\n\n  @Test(expected = java.util.ConcurrentModificationException.class)\n  public void testConcurrentModificationException2() {\n    map.add(1, 1);\n    map.add(2, 1);\n    map.add(3, 1);\n    for (Integer key : map) map.remove(2);\n  }\n\n  @Test\n  public void randomRemove() {\n\n    HashTableQuadraticProbing<Integer, Integer> map;\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      map = new HashTableQuadraticProbing<>();\n      map.clear();\n\n      // Add some random values\n      Set<Integer> keys_set = new HashSet<>();\n      for (int i = 0; i < MAX_SIZE; i++) {\n        int randomVal = randInt(-MAX_RAND_NUM, MAX_RAND_NUM);\n        keys_set.add(randomVal);\n        map.put(randomVal, 5);\n      }\n\n      assertThat(map.size()).isEqualTo(keys_set.size());\n\n      List<Integer> keys = map.keys();\n      for (Integer key : keys) map.remove(key);\n\n      assertThat(map.isEmpty()).isTrue();\n    }\n  }\n\n  @Test\n  public void removeTest() {\n\n    HashTableQuadraticProbing<Integer, Integer> map = new HashTableQuadraticProbing<>(7);\n\n    // Add three elements\n    map.put(11, 0);\n    map.put(12, 0);\n    map.put(13, 0);\n    assertThat(map.size()).isEqualTo(3);\n\n    // Add ten more\n    for (int i = 1; i <= 10; i++) map.put(i, 0);\n    assertThat(map.size()).isEqualTo(13);\n\n    // Remove ten\n    for (int i = 1; i <= 10; i++) map.remove(i);\n    assertThat(map.size()).isEqualTo(3);\n\n    // remove three\n    map.remove(11);\n    map.remove(12);\n    map.remove(13);\n    assertThat(map.size()).isEqualTo(0);\n  }\n\n  @Test\n  public void removeTestComplex1() {\n\n    HashTableQuadraticProbing<HashObject, Integer> map = new HashTableQuadraticProbing<>();\n\n    HashObject o1 = new HashObject(88, 1);\n    HashObject o2 = new HashObject(88, 2);\n    HashObject o3 = new HashObject(88, 3);\n    HashObject o4 = new HashObject(88, 4);\n\n    map.add(o1, 111);\n    map.add(o2, 111);\n    map.add(o3, 111);\n    map.add(o4, 111);\n\n    map.remove(o2);\n    map.remove(o3);\n    map.remove(o1);\n    map.remove(o4);\n\n    assertThat(map.size()).isEqualTo(0);\n  }\n\n  @Test\n  public void testRandomMapOperations() {\n\n    HashMap<Integer, Integer> jmap = new HashMap<>();\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      map.clear();\n      jmap.clear();\n      assertThat(jmap.size()).isEqualTo(map.size());\n\n      map = new HashTableQuadraticProbing<>();\n\n      final double probability1 = Math.random();\n      final double probability2 = Math.random();\n\n      List<Integer> nums = genRandList(MAX_SIZE);\n      for (int i = 0; i < MAX_SIZE; i++) {\n\n        double r = Math.random();\n\n        int key = nums.get(i);\n        int val = i;\n\n        if (r < probability1) assertThat(jmap.put(key, val)).isEqualTo(map.put(key, val));\n\n        assertThat(jmap.get(key)).isEqualTo(map.get(key));\n        assertThat(jmap.containsKey(key)).isEqualTo(map.containsKey(key));\n        assertThat(jmap.size()).isEqualTo(map.size());\n\n        if (r > probability2) assertThat(map.remove(key)).isEqualTo(jmap.remove(key));\n\n        assertThat(jmap.get(key)).isEqualTo(map.get(key));\n        assertThat(jmap.containsKey(key)).isEqualTo(map.containsKey(key));\n        assertThat(jmap.size()).isEqualTo(map.size());\n      }\n    }\n  }\n\n  @Test\n  public void randomIteratorTests() {\n\n    HashTableQuadraticProbing<Integer, LinkedList<Integer>> m = new HashTableQuadraticProbing<>();\n    HashMap<Integer, LinkedList<Integer>> hm = new HashMap<>();\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      m.clear();\n      hm.clear();\n      assertThat(m.size()).isEqualTo(hm.size());\n\n      int sz = randInt(1, MAX_SIZE);\n      m = new HashTableQuadraticProbing<>(sz);\n      hm = new HashMap<>(sz);\n\n      final double probability = Math.random();\n\n      for (int i = 0; i < MAX_SIZE; i++) {\n\n        int index = randInt(0, MAX_SIZE - 1);\n        LinkedList<Integer> l1 = m.get(index);\n        LinkedList<Integer> l2 = hm.get(index);\n\n        if (l2 == null) {\n          l1 = new LinkedList<Integer>();\n          l2 = new LinkedList<Integer>();\n          m.put(index, l1);\n          hm.put(index, l2);\n        }\n\n        int rand_val = randInt(-MAX_SIZE, MAX_SIZE);\n\n        if (Math.random() < probability) {\n\n          l1.removeFirstOccurrence(rand_val);\n          l2.removeFirstOccurrence(rand_val);\n\n        } else {\n\n          l1.add(rand_val);\n          l2.add(rand_val);\n        }\n\n        assertThat(m.size()).isEqualTo(hm.size());\n        assertThat(l1).isEqualTo(l2);\n      }\n    }\n  }\n\n  static int randInt(int min, int max) {\n    return RANDOM.nextInt((max - min) + 1) + min;\n  }\n\n  // Generate a list of random numbers\n  static List<Integer> genRandList(int sz) {\n\n    List<Integer> lst = new ArrayList<>(sz);\n    for (int i = 0; i < sz; i++) lst.add(randInt(-MAX_RAND_NUM, MAX_RAND_NUM));\n    Collections.shuffle(lst);\n    return lst;\n  }\n\n  // Generate a list of unique random numbers\n  static List<Integer> genUniqueRandList(int sz) {\n    List<Integer> lst = new ArrayList<>(sz);\n    for (int i = 0; i < sz; i++) lst.add(i);\n    Collections.shuffle(lst);\n    return lst;\n  }\n}\n"}
{"code_source": "/**\n * An implementation of a hash-table using separate chaining with a linked list.\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.hashtable;\n\nimport java.util.*;\n\nclass Entry<K, V> {\n\n  int hash;\n  K key;\n  V value;\n\n  public Entry(K key, V value) {\n    this.key = key;\n    this.value = value;\n    this.hash = key.hashCode();\n  }\n\n  // We are not overriding the Object equals method\n  // No casting is required with this method.\n  public boolean equals(Entry<K, V> other) {\n    if (hash != other.hash) return false;\n    return key.equals(other.key);\n  }\n\n  @Override\n  public String toString() {\n    return key + \" => \" + value;\n  }\n}\n\n@SuppressWarnings(\"unchecked\")\npublic class HashTableSeparateChaining<K, V> implements Iterable<K> {\n\n  private static final int DEFAULT_CAPACITY = 3;\n  private static final double DEFAULT_LOAD_FACTOR = 0.75;\n\n  private double maxLoadFactor;\n  private int capacity, threshold, size = 0;\n  private LinkedList<Entry<K, V>>[] table;\n\n  public HashTableSeparateChaining() {\n    this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);\n  }\n\n  public HashTableSeparateChaining(int capacity) {\n    this(capacity, DEFAULT_LOAD_FACTOR);\n  }\n\n  // Designated constructor\n  public HashTableSeparateChaining(int capacity, double maxLoadFactor) {\n    if (capacity < 0) throw new IllegalArgumentException(\"Illegal capacity\");\n    if (maxLoadFactor <= 0 || Double.isNaN(maxLoadFactor) || Double.isInfinite(maxLoadFactor))\n      throw new IllegalArgumentException(\"Illegal maxLoadFactor\");\n    this.maxLoadFactor = maxLoadFactor;\n    this.capacity = Math.max(DEFAULT_CAPACITY, capacity);\n    threshold = (int) (this.capacity * maxLoadFactor);\n    table = new LinkedList[this.capacity];\n  }\n\n  // Returns the number of elements currently inside the hash-table\n  public int size() {\n    return size;\n  }\n\n  // Returns true/false depending on whether the hash-table is empty\n  public boolean isEmpty() {\n    return size == 0;\n  }\n\n  // Converts a hash value to an index. Essentially, this strips the\n  // negative sign and places the hash value in the domain [0, capacity)\n  private int normalizeIndex(int keyHash) {\n    return (keyHash & 0x7FFFFFFF) % capacity;\n  }\n\n  // Clears all the contents of the hash-table\n  public void clear() {\n    Arrays.fill(table, null);\n    size = 0;\n  }\n\n  public boolean containsKey(K key) {\n    return hasKey(key);\n  }\n\n  // Returns true/false depending on whether a key is in the hash table\n  public boolean hasKey(K key) {\n    int bucketIndex = normalizeIndex(key.hashCode());\n    return bucketSeekEntry(bucketIndex, key) != null;\n  }\n\n  // Insert, put and add all place a value in the hash-table\n  public V put(K key, V value) {\n    return insert(key, value);\n  }\n\n  public V add(K key, V value) {\n    return insert(key, value);\n  }\n\n  public V insert(K key, V value) {\n\n    if (key == null) throw new IllegalArgumentException(\"Null key\");\n    Entry<K, V> newEntry = new Entry<>(key, value);\n    int bucketIndex = normalizeIndex(newEntry.hash);\n    return bucketInsertEntry(bucketIndex, newEntry);\n  }\n\n  // Gets a key's values from the map and returns the value.\n  // NOTE: returns null if the value is null AND also returns\n  // null if the key does not exists, so watch out..\n  public V get(K key) {\n\n    if (key == null) return null;\n    int bucketIndex = normalizeIndex(key.hashCode());\n    Entry<K, V> entry = bucketSeekEntry(bucketIndex, key);\n    if (entry != null) return entry.value;\n    return null;\n  }\n\n  // Removes a key from the map and returns the value.\n  // NOTE: returns null if the value is null AND also returns\n  // null if the key does not exists.\n  public V remove(K key) {\n\n    if (key == null) return null;\n    int bucketIndex = normalizeIndex(key.hashCode());\n    return bucketRemoveEntry(bucketIndex, key);\n  }\n\n  // Removes an entry from a given bucket if it exists\n  private V bucketRemoveEntry(int bucketIndex, K key) {\n\n    Entry<K, V> entry = bucketSeekEntry(bucketIndex, key);\n    if (entry != null) {\n      LinkedList<Entry<K, V>> links = table[bucketIndex];\n      links.remove(entry);\n      --size;\n      return entry.value;\n    } else return null;\n  }\n\n  // Inserts an entry in a given bucket only if the entry does not already\n  // exist in the given bucket, but if it does then update the entry value\n  private V bucketInsertEntry(int bucketIndex, Entry<K, V> entry) {\n\n    LinkedList<Entry<K, V>> bucket = table[bucketIndex];\n    if (bucket == null) table[bucketIndex] = bucket = new LinkedList<>();\n\n    Entry<K, V> existentEntry = bucketSeekEntry(bucketIndex, entry.key);\n    if (existentEntry == null) {\n      bucket.add(entry);\n      if (++size > threshold) resizeTable();\n      return null; // Use null to indicate that there was no previous entry\n    } else {\n      V oldVal = existentEntry.value;\n      existentEntry.value = entry.value;\n      return oldVal;\n    }\n  }\n\n  // Finds and returns a particular entry in a given bucket if it exists, returns null otherwise\n  private Entry<K, V> bucketSeekEntry(int bucketIndex, K key) {\n\n    if (key == null) return null;\n    LinkedList<Entry<K, V>> bucket = table[bucketIndex];\n    if (bucket == null) return null;\n    for (Entry<K, V> entry : bucket) if (entry.key.equals(key)) return entry;\n    return null;\n  }\n\n  // Resizes the internal table holding buckets of entries\n  private void resizeTable() {\n\n    capacity *= 2;\n    threshold = (int) (capacity * maxLoadFactor);\n\n    LinkedList<Entry<K, V>>[] newTable = new LinkedList[capacity];\n\n    for (int i = 0; i < table.length; i++) {\n      if (table[i] != null) {\n\n        for (Entry<K, V> entry : table[i]) {\n          int bucketIndex = normalizeIndex(entry.hash);\n          LinkedList<Entry<K, V>> bucket = newTable[bucketIndex];\n          if (bucket == null) newTable[bucketIndex] = bucket = new LinkedList<>();\n          bucket.add(entry);\n        }\n\n        // Avoid memory leak. Help the GC\n        table[i].clear();\n        table[i] = null;\n      }\n    }\n\n    table = newTable;\n  }\n\n  // Returns the list of keys found within the hash table\n  public List<K> keys() {\n\n    List<K> keys = new ArrayList<>(size());\n    for (LinkedList<Entry<K, V>> bucket : table)\n      if (bucket != null) for (Entry<K, V> entry : bucket) keys.add(entry.key);\n    return keys;\n  }\n\n  // Returns the list of values found within the hash table\n  public List<V> values() {\n\n    List<V> values = new ArrayList<>(size());\n    for (LinkedList<Entry<K, V>> bucket : table)\n      if (bucket != null) for (Entry<K, V> entry : bucket) values.add(entry.value);\n    return values;\n  }\n\n  // Return an iterator to iterate over all the keys in this map\n  @Override\n  public java.util.Iterator<K> iterator() {\n    final int elementCount = size();\n    return new java.util.Iterator<K>() {\n\n      int bucketIndex = 0;\n      java.util.Iterator<Entry<K, V>> bucketIter = (table[0] == null) ? null : table[0].iterator();\n\n      @Override\n      public boolean hasNext() {\n\n        // An item was added or removed while iterating\n        if (elementCount != size) throw new java.util.ConcurrentModificationException();\n\n        // No iterator or the current iterator is empty\n        if (bucketIter == null || !bucketIter.hasNext()) {\n\n          // Search next buckets until a valid iterator is found\n          while (++bucketIndex < capacity) {\n            if (table[bucketIndex] != null) {\n\n              // Make sure this iterator actually has elements -_-\n              java.util.Iterator<Entry<K, V>> nextIter = table[bucketIndex].iterator();\n              if (nextIter.hasNext()) {\n                bucketIter = nextIter;\n                break;\n              }\n            }\n          }\n        }\n        return bucketIndex < capacity;\n      }\n\n      @Override\n      public K next() {\n        return bucketIter.next().key;\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n  // Returns a string representation of this hash table\n  @Override\n  public String toString() {\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"{\");\n    for (int i = 0; i < capacity; i++) {\n      if (table[i] == null) continue;\n      for (Entry<K, V> entry : table[i]) sb.append(entry + \", \");\n    }\n    sb.append(\"}\");\n    return sb.toString();\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.hashtable;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.*;\nimport org.junit.*;\n\npublic class HashTableSeparateChainingTest {\n\n  // You can set the hash value of this object to be whatever you want\n  // This makes it great for testing special cases.\n  static class HashObject {\n    final int hash, data;\n\n    public HashObject(int hash, int data) {\n      this.hash = hash;\n      this.data = data;\n    }\n\n    @Override\n    public int hashCode() {\n      return hash;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      HashObject ho = (HashObject) o;\n      return hashCode() == ho.hashCode() && data == ho.data;\n    }\n  }\n\n  static final Random RANDOM = new Random();\n  static int LOOPS, MAX_SIZE, MAX_RAND_NUM;\n\n  static {\n    LOOPS = 500;\n    MAX_SIZE = randInt(1, 750);\n    MAX_RAND_NUM = randInt(1, 350);\n  }\n\n  HashTableSeparateChaining<Integer, Integer> map;\n\n  @Before\n  public void setup() {\n    map = new HashTableSeparateChaining<>();\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testNullKey() {\n    map.put(null, 5);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testIllegalCreation1() {\n    new HashTableSeparateChaining<>(-3, 0.5);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testIllegalCreation2() {\n    new HashTableSeparateChaining<>(5, Double.POSITIVE_INFINITY);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testIllegalCreation3() {\n    new HashTableSeparateChaining<>(6, -0.5);\n  }\n\n  @Test\n  public void testLegalCreation() {\n    new HashTableSeparateChaining<>(6, 0.9);\n  }\n\n  @Test\n  public void testUpdatingValue() {\n\n    map.add(1, 1);\n    assertThat(map.get(1)).isEqualTo(1);\n\n    map.add(1, 5);\n    assertThat(map.get(1)).isEqualTo(5);\n\n    map.add(1, -7);\n    assertThat(map.get(1)).isEqualTo(-7);\n  }\n\n  @Test\n  public void testIterator() {\n\n    HashMap<Integer, Integer> map2 = new HashMap<>();\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      map.clear();\n      map2.clear();\n      assertThat(map.isEmpty()).isTrue();\n\n      map = new HashTableSeparateChaining<>();\n\n      List<Integer> rand_nums = genRandList(MAX_SIZE);\n      for (Integer key : rand_nums) assertThat(map.add(key, key)).isEqualTo(map2.put(key, key));\n\n      int count = 0;\n      for (Integer key : map) {\n        assertThat(map.get(key)).isEqualTo(key);\n        assertThat(map.get(key)).isEqualTo(map2.get(key));\n        assertThat(map.hasKey(key)).isTrue();\n        assertThat(rand_nums.contains(key)).isTrue();\n        count++;\n      }\n\n      for (Integer key : map2.keySet()) {\n        assertThat(map.get(key)).isEqualTo(key);\n      }\n\n      Set<Integer> set = new HashSet<>();\n      for (int n : rand_nums) set.add(n);\n\n      assertThat(set.size()).isEqualTo(count);\n      assertThat(map2.size()).isEqualTo(count);\n    }\n  }\n\n  @Test(expected = java.util.ConcurrentModificationException.class)\n  public void testConcurrentModificationException() {\n    map.add(1, 1);\n    map.add(2, 1);\n    map.add(3, 1);\n    for (Integer key : map) map.add(4, 4);\n  }\n\n  @Test(expected = java.util.ConcurrentModificationException.class)\n  public void testConcurrentModificationException2() {\n    map.add(1, 1);\n    map.add(2, 1);\n    map.add(3, 1);\n    for (Integer key : map) map.remove(2);\n  }\n\n  @Test\n  public void randomRemove() {\n\n    HashTableSeparateChaining<Integer, Integer> map;\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      map = new HashTableSeparateChaining<>();\n      map.clear();\n\n      // Add some random values\n      Set<Integer> keys_set = new HashSet<>();\n      for (int i = 0; i < MAX_SIZE; i++) {\n        int randomVal = randInt(-MAX_RAND_NUM, MAX_RAND_NUM);\n        keys_set.add(randomVal);\n        map.put(randomVal, 5);\n      }\n\n      assertThat(map.size()).isEqualTo(keys_set.size());\n\n      List<Integer> keys = map.keys();\n      for (Integer key : keys) map.remove(key);\n\n      assertThat(map.isEmpty()).isTrue();\n    }\n  }\n\n  @Test\n  public void removeTest() {\n\n    HashTableSeparateChaining<Integer, Integer> map = new HashTableSeparateChaining<>(7);\n\n    // Add three elements\n    map.put(11, 0);\n    map.put(12, 0);\n    map.put(13, 0);\n    assertThat(map.size()).isEqualTo(3);\n\n    // Add ten more\n    for (int i = 1; i <= 10; i++) map.put(i, 0);\n    assertThat(map.size()).isEqualTo(13);\n\n    // Remove ten\n    for (int i = 1; i <= 10; i++) map.remove(i);\n    assertThat(map.size()).isEqualTo(3);\n\n    // remove three\n    map.remove(11);\n    map.remove(12);\n    map.remove(13);\n    assertThat(map.size()).isEqualTo(0);\n  }\n\n  @Test\n  public void removeTestComplex1() {\n\n    HashTableSeparateChaining<HashObject, Integer> map = new HashTableSeparateChaining<>();\n\n    HashObject o1 = new HashObject(88, 1);\n    HashObject o2 = new HashObject(88, 2);\n    HashObject o3 = new HashObject(88, 3);\n    HashObject o4 = new HashObject(88, 4);\n\n    map.add(o1, 111);\n    map.add(o2, 111);\n    map.add(o3, 111);\n    map.add(o4, 111);\n\n    map.remove(o2);\n    map.remove(o3);\n    map.remove(o1);\n    map.remove(o4);\n\n    assertThat(map.size()).isEqualTo(0);\n  }\n\n  @Test\n  public void testRandomMapOperations() {\n\n    HashMap<Integer, Integer> jmap = new HashMap<>();\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      map.clear();\n      jmap.clear();\n      assertThat(jmap.size()).isEqualTo(map.size());\n\n      map = new HashTableSeparateChaining<>();\n\n      final double probability1 = Math.random();\n      final double probability2 = Math.random();\n\n      List<Integer> nums = genRandList(MAX_SIZE);\n      for (int i = 0; i < MAX_SIZE; i++) {\n\n        double r = Math.random();\n\n        int key = nums.get(i);\n        int val = i;\n\n        if (r < probability1) assertThat(jmap.put(key, val)).isEqualTo(map.put(key, val));\n\n        assertThat(jmap.get(key)).isEqualTo(map.get(key));\n        assertThat(jmap.containsKey(key)).isEqualTo(map.containsKey(key));\n        assertThat(jmap.size()).isEqualTo(map.size());\n\n        if (r > probability2) assertThat(map.remove(key)).isEqualTo(jmap.remove(key));\n\n        assertThat(jmap.get(key)).isEqualTo(map.get(key));\n        assertThat(jmap.containsKey(key)).isEqualTo(map.containsKey(key));\n        assertThat(jmap.size()).isEqualTo(map.size());\n      }\n    }\n  }\n\n  @Test\n  public void randomIteratorTests() {\n\n    HashTableSeparateChaining<Integer, LinkedList<Integer>> m = new HashTableSeparateChaining<>();\n    HashMap<Integer, LinkedList<Integer>> hm = new HashMap<>();\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      m.clear();\n      hm.clear();\n      assertThat(m.size()).isEqualTo(hm.size());\n\n      int sz = randInt(1, MAX_SIZE);\n      m = new HashTableSeparateChaining<>(sz);\n      hm = new HashMap<>(sz);\n\n      final double probability = Math.random();\n\n      for (int i = 0; i < MAX_SIZE; i++) {\n\n        int index = randInt(0, MAX_SIZE - 1);\n        LinkedList<Integer> l1 = m.get(index);\n        LinkedList<Integer> l2 = hm.get(index);\n\n        if (l2 == null) {\n          l1 = new LinkedList<Integer>();\n          l2 = new LinkedList<Integer>();\n          m.put(index, l1);\n          hm.put(index, l2);\n        }\n\n        int rand_val = randInt(-MAX_SIZE, MAX_SIZE);\n\n        if (Math.random() < probability) {\n\n          l1.removeFirstOccurrence(rand_val);\n          l2.removeFirstOccurrence(rand_val);\n\n        } else {\n\n          l1.add(rand_val);\n          l2.add(rand_val);\n        }\n\n        assertThat(m.size()).isEqualTo(hm.size());\n        assertThat(l1).isEqualTo(l2);\n      }\n    }\n  }\n\n  static int randInt(int min, int max) {\n    return RANDOM.nextInt((max - min) + 1) + min;\n  }\n\n  // Generate a list of random numbers\n  static List<Integer> genRandList(int sz) {\n\n    List<Integer> lst = new ArrayList<>(sz);\n    for (int i = 0; i < sz; i++) lst.add(randInt(-MAX_RAND_NUM, MAX_RAND_NUM));\n    Collections.shuffle(lst);\n    return lst;\n  }\n\n  // Generate a list of unique random numbers\n  static List<Integer> genUniqueRandList(int sz) {\n    List<Integer> lst = new ArrayList<>(sz);\n    for (int i = 0; i < sz; i++) lst.add(i);\n    Collections.shuffle(lst);\n    return lst;\n  }\n}\n"}
{"code_source": "package com.williamfiset.algorithms.datastructures.set;\n\npublic class HSet<T> implements Iterable<T> {\n\n  private static final Object DUMMY = new Object();\n  private static final int DEFAULT_CAPACITY = 3;\n  private static final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n  private java.util.Map<T, Object> map;\n\n  public HSet() {\n    this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);\n  }\n\n  public HSet(int capacity) {\n    this(capacity, DEFAULT_LOAD_FACTOR);\n  }\n\n  public HSet(int capacity, float load_factor) {\n    map = new java.util.HashMap<>(capacity, load_factor);\n  }\n\n  public int size() {\n    return map.size();\n  }\n\n  public void clear() {\n    map.clear();\n  }\n\n  public boolean isEmpty() {\n    return map.isEmpty();\n  }\n\n  public boolean add(T elem) {\n    return map.put(elem, DUMMY) == DUMMY;\n  }\n\n  public boolean remove(T elem) {\n    return map.remove(elem) == DUMMY;\n  }\n\n  public boolean contains(T elem) {\n    return map.containsKey(elem);\n  }\n\n  public java.util.Iterator<T> iterator() {\n    return map.keySet().iterator();\n  }\n\n  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[\");\n    for (T key : map.keySet()) sb.append(key + \", \");\n    sb.append(\"]\");\n    return sb.toString();\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.set;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Random;\nimport org.junit.*;\n\n// You can set the hash value of this object to be whatever you want\n// This makes it great for testing special cases.\nclass ConstObj {\n  int hash, data;\n\n  public ConstObj(int hash, int data) {\n    this.hash = hash;\n    this.data = data;\n  }\n\n  @Override\n  public int hashCode() {\n    return hash;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    return data == ((ConstObj) o).data;\n  }\n}\n\npublic class HSetTest {\n\n  static Random r = new Random();\n\n  static final int LOOPS = 100;\n  static final int TEST_SZ = 1000;\n  static final int MAX_RAND_NUM = 50000;\n\n  HSet<Integer> hs;\n\n  @Before\n  public void setup() {\n    hs = new HSet<>();\n  }\n\n  @Test\n  public void testAddRemove() {\n    hs.add(5);\n    assertThat(hs.size()).isEqualTo(1);\n    hs.remove(5);\n    assertThat(hs.size()).isEqualTo(0);\n    hs.add(0);\n    assertThat(hs.size()).isEqualTo(1);\n    hs.remove(0);\n    assertThat(hs.size()).isEqualTo(0);\n    hs.add(-5);\n    assertThat(hs.size()).isEqualTo(1);\n    hs.remove(-5);\n    assertThat(hs.size()).isEqualTo(0);\n  }\n\n  @Test\n  public void randomizedSetTest() {\n    HashSet<Integer> s = new HashSet<>();\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      s.clear();\n      hs.clear();\n\n      List<Integer> nums = genRandList(TEST_SZ);\n      for (int i = 0; i < TEST_SZ; i++) {\n\n        int num = nums.get(i);\n        // assertThat(hs.add(num)).isEqualTo(s.add(num));\n        hs.add(num);\n        s.add(num);\n\n        // Make sure this is a bijection\n        for (Integer n : s) hs.contains(n);\n        for (Integer n : hs) s.contains(n);\n\n        assertThat(s.size()).isEqualTo(hs.size());\n      }\n    }\n  }\n\n  @Test\n  public void randomizedSetTest2() {\n\n    HashSet<ConstObj> s = new HashSet<>();\n\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      int sz = (int) (Math.random() * TEST_SZ) + 1;\n      HSet<ConstObj> hs = new HSet<>(sz);\n\n      s.clear();\n\n      List<Integer> nums = genRandList(TEST_SZ);\n      for (int i = 0; i < TEST_SZ; i++) {\n\n        int num = nums.get(i);\n        ConstObj obj = new ConstObj(java.util.Objects.hash(num), num);\n        // assertThat(hs.add(num)).isEqualTo(s.add(num));\n        hs.add(obj);\n        s.add(obj);\n\n        // Make sure this is a bijection\n        for (ConstObj n : s) hs.contains(n);\n        for (ConstObj n : hs) s.contains(n);\n\n        assertThat(s.size()).isEqualTo(hs.size());\n      }\n    }\n  }\n\n  @Test\n  public void t() {\n\n    ConstObj ch1 = new ConstObj(29827, 1);\n    ConstObj ch2 = new ConstObj(29807, 3);\n\n    HSet<ConstObj> s = new HSet<ConstObj>();\n\n    s.add(ch1);\n    assertThat(s.size()).isEqualTo(1);\n    s.remove(ch1);\n    assertThat(s.size()).isEqualTo(0);\n    s.add(ch2);\n    assertThat(s.size()).isEqualTo(1);\n    s.remove(ch2);\n    assertThat(s.size()).isEqualTo(0);\n  }\n\n  // Generate a list of random numbers\n  static List<Integer> genRandList(int sz) {\n    List<Integer> lst = new ArrayList<>(sz);\n    for (int i = 0; i < sz; i++) lst.add((int) (Math.random() * MAX_RAND_NUM));\n    Collections.shuffle(lst);\n    return lst;\n  }\n\n  // Generate a list of unique random numbers\n  static List<Integer> genUniqueRandList(int sz) {\n    List<Integer> lst = new ArrayList<>(sz);\n    for (int i = 0; i < sz; i++) lst.add(i);\n    Collections.shuffle(lst);\n    return lst;\n  }\n}\n"}
{"code_source": "/**\n * An implementation of interpolation search\n *\n * <p>Time Complexity: O(log(log(n))) if data is uniform O(n) in worst case\n */\npackage com.williamfiset.algorithms.search;\n\npublic class InterpolationSearch {\n\n  /**\n   * A fast alternative to a binary search when the elements are uniformly distributed. This\n   * algorithm runs in a time complexity of ~O(log(log(n))).\n   *\n   * @param nums - an ordered list containing uniformly distributed values.\n   * @param val - the value we're looking for in 'nums'\n   */\n  public static int interpolationSearch(int[] nums, int val) {\n    int lo = 0, mid = 0, hi = nums.length - 1;\n    while (nums[lo] <= val && nums[hi] >= val) {\n      mid = lo + ((val - nums[lo]) * (hi - lo)) / (nums[hi] - nums[lo]);\n      if (nums[mid] < val) {\n        lo = mid + 1;\n      } else if (nums[mid] > val) {\n        hi = mid - 1;\n      } else return mid;\n    }\n    if (nums[lo] == val) return lo;\n    return -1;\n  }\n\n  public static void main(String[] args) {\n\n    int[] values = {10, 20, 25, 35, 50, 70, 85, 100, 110, 120, 125};\n\n    // Since 25 exists in the values array the interpolation search\n    // returns that it has found 25 at the index 2\n    System.out.println(interpolationSearch(values, 25));\n\n    // 111 does not exist so we get -1 as an index value\n    System.out.println(interpolationSearch(values, 111));\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.search;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport org.junit.Test;\n\npublic class InterpolationSearchTest {\n\n  @Test\n  public void testCoverage1() {\n    int[] arr = {0, 1, 2, 3, 4, 5};\n    int index = InterpolationSearch.interpolationSearch(arr, 2);\n    assertThat(index).isEqualTo(2);\n  }\n\n  @Test\n  public void testCoverage2() {\n    int[] arr = {0, 1, 2, 3, 4, 5};\n    int index = InterpolationSearch.interpolationSearch(arr, 5);\n    assertThat(index).isEqualTo(5);\n  }\n\n  @Test\n  public void testCoverage3() {\n    int[] arr = {0, 1, 2, 3, 4, 5};\n    int index = InterpolationSearch.interpolationSearch(arr, -1);\n    assertThat(index).isEqualTo(-1);\n  }\n\n  @Test\n  public void testCoverage4() {\n    int[] arr = {0, 1, 2, 3, 4, 5};\n    int index = InterpolationSearch.interpolationSearch(arr, 8);\n    assertThat(index).isEqualTo(-1);\n  }\n}\n"}
{"code_source": "/**\n * This file contains an implementation of an integer only queue which is extremely quick and\n * lightweight. In terms of performance it can outperform java.util.ArrayDeque (Java's fastest queue\n * implementation) by a factor of 40+! See the benchmark test below for proof. However, the downside\n * is you need to know an upper bound on the number of elements that will be inside the queue at any\n * given time for this queue to work.\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com, liujingkun, liujkon@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.queue;\n\npublic class IntQueue implements Queue<Integer> {\n\n  private int[] data;\n  private int front, end;\n  private int size;\n\n  // maxSize is the maximum number of items\n  // that can be in the queue at any given time\n  public IntQueue(int maxSize) {\n    front = end = size = 0;\n    data = new int[maxSize];\n  }\n\n  // Return true/false on whether the queue is empty\n  public boolean isEmpty() {\n    return size == 0;\n  }\n\n  // Return the number of elements inside the queue\n  public int size() {\n    return size;\n  }\n\n  @Override\n  public Integer peek() {\n    if (isEmpty()) {\n      throw new RuntimeException(\"Queue is empty\");\n    }\n    front = front % data.length;\n    return data[front];\n  }\n\n  public boolean isFull() {\n    return size == data.length;\n  }\n\n  // Add an element to the queue\n  @Override\n  public void offer(Integer value) {\n    if (isFull()) {\n      throw new RuntimeException(\"Queue too small!\");\n    }\n    data[end++] = value;\n    size++;\n    end = end % data.length;\n  }\n\n  // Make sure you check is the queue is not empty before calling poll!\n  @Override\n  public Integer poll() {\n    if (size == 0) {\n      throw new RuntimeException(\"Queue is empty\");\n    }\n    size--;\n    front = front % data.length;\n    return data[front++];\n  }\n\n  // Example usage\n  public static void main(String[] args) {\n\n    IntQueue q = new IntQueue(5);\n\n    q.offer(1);\n    q.offer(2);\n    q.offer(3);\n    q.offer(4);\n    q.offer(5);\n\n    System.out.println(q.poll()); // 1\n    System.out.println(q.poll()); // 2\n    System.out.println(q.poll()); // 3\n    System.out.println(q.poll()); // 4\n\n    System.out.println(q.isEmpty()); // false\n\n    q.offer(1);\n    q.offer(2);\n    q.offer(3);\n\n    System.out.println(q.poll()); // 5\n    System.out.println(q.poll()); // 1\n    System.out.println(q.poll()); // 2\n    System.out.println(q.poll()); // 3\n\n    System.out.println(q.isEmpty()); // true\n\n    //    benchMarkTest();\n  }\n\n  // BenchMark IntQueue vs ArrayDeque.\n  private static void benchMarkTest() {\n\n    int n = 10000000;\n    IntQueue intQ = new IntQueue(n);\n\n    // IntQueue times at around 0.0324 seconds\n    long start = System.nanoTime();\n    for (int i = 0; i < n; i++) intQ.offer(i);\n    for (int i = 0; i < n; i++) intQ.poll();\n    long end = System.nanoTime();\n    System.out.println(\"IntQueue Time: \" + (end - start) / 1e9);\n\n    // ArrayDeque times at around 1.438 seconds\n    java.util.ArrayDeque<Integer> arrayDeque = new java.util.ArrayDeque<>();\n    // java.util.ArrayDeque <Integer> arrayDeque = new java.util.ArrayDeque<>(n); // strangely the\n    // ArrayQueue is slower when you give it an initial capacity.\n    start = System.nanoTime();\n    for (int i = 0; i < n; i++) arrayDeque.offer(i);\n    for (int i = 0; i < n; i++) arrayDeque.poll();\n    end = System.nanoTime();\n    System.out.println(\"ArrayDeque Time: \" + (end - start) / 1e9);\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.queue;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.*;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class IntQueueTest {\n\n  @Before\n  public void setup() {}\n\n  @Test\n  public void testEmptyQueue() {\n    IntQueue queue = new IntQueue(0);\n    assertThat(queue.isEmpty()).isTrue();\n    assertThat(queue.size()).isEqualTo(0);\n  }\n\n  // Doesn't apply to this implementation because of wrap\n  // @Test(expected=Exception.class)\n  // public void testPollOnEmpty() {\n  //   IntQueue queue = new IntQueue(0);\n  //   queue.poll();\n  // }\n\n  // Doesn't apply to this implementation because of wrap\n  // @Test(expected=Exception.class)\n  // public void testPeekOnEmpty() {\n  //   IntQueue queue = new IntQueue(0);\n  //   queue.peek();\n  // }\n\n  @Test\n  public void testofferOneElement() {\n    IntQueue queue = new IntQueue(1);\n    queue.offer(77);\n    assertThat(queue.size()).isEqualTo(1);\n  }\n\n  @Test\n  public void testAll() {\n    int n = 5;\n    IntQueue queue = new IntQueue(10);\n    assertThat(queue.isEmpty()).isTrue();\n    for (int i = 1; i <= n; i++) {\n      queue.offer(i);\n      assertThat(queue.isEmpty()).isFalse();\n    }\n    for (int i = 1; i <= n; i++) {\n      assertThat((int) queue.peek()).isEqualTo(i);\n      assertThat((int) queue.poll()).isEqualTo(i);\n      assertThat(queue.size()).isEqualTo(n - i);\n    }\n    assertThat(queue.isEmpty()).isTrue();\n    n = 8;\n    for (int i = 1; i <= n; i++) {\n      queue.offer(i);\n      assertThat(queue.isEmpty()).isFalse();\n    }\n    for (int i = 1; i <= n; i++) {\n      assertThat((int) queue.peek()).isEqualTo(i);\n      assertThat((int) queue.poll()).isEqualTo(i);\n      assertThat(queue.size()).isEqualTo(n - i);\n    }\n    assertThat(queue.isEmpty()).isTrue();\n    n = 9;\n    for (int i = 1; i <= n; i++) {\n      queue.offer(i);\n      assertThat(queue.isEmpty()).isFalse();\n    }\n    for (int i = 1; i <= n; i++) {\n      assertThat((int) queue.peek()).isEqualTo(i);\n      assertThat((int) queue.poll()).isEqualTo(i);\n      assertThat(queue.size()).isEqualTo(n - i);\n    }\n    assertThat(queue.isEmpty()).isTrue();\n    n = 10;\n    for (int i = 1; i <= n; i++) {\n      queue.offer(i);\n      assertThat(queue.isEmpty()).isFalse();\n    }\n    for (int i = 1; i <= n; i++) {\n      assertThat((int) queue.peek()).isEqualTo(i);\n      assertThat((int) queue.poll()).isEqualTo(i);\n      assertThat(queue.size()).isEqualTo(n - i);\n    }\n    assertThat(queue.isEmpty()).isTrue();\n  }\n\n  @Test\n  public void testPeekOneElement() {\n    IntQueue queue = new IntQueue(1);\n    queue.offer(77);\n    assertThat(queue.peek()).isEqualTo(77);\n    assertThat(queue.size()).isEqualTo(1);\n  }\n\n  @Test\n  public void testpollOneElement() {\n    IntQueue queue = new IntQueue(1);\n    queue.offer(77);\n    assertThat(queue.poll()).isEqualTo(77);\n    assertThat(queue.size()).isEqualTo(0);\n  }\n\n  @Test\n  public void testRandom() {\n\n    for (int qSize = 1; qSize <= 50; qSize++) {\n\n      IntQueue intQ = new IntQueue(qSize);\n      ArrayDeque<Integer> javaQ = new ArrayDeque<>(qSize);\n\n      assertThat(javaQ.isEmpty()).isEqualTo(intQ.isEmpty());\n      assertThat(javaQ.size()).isEqualTo(intQ.size());\n\n      for (int operations = 0; operations < 5000; operations++) {\n\n        double r = Math.random();\n\n        if (r < 0.60) {\n          int elem = (int) (1000 * Math.random());\n          if (javaQ.size() < qSize) {\n            javaQ.offer(elem);\n            intQ.offer(elem);\n          }\n        } else {\n          if (!javaQ.isEmpty()) {\n            assertThat((int) javaQ.poll()).isEqualTo((int) intQ.poll());\n          }\n        }\n\n        assertThat(javaQ.isEmpty()).isEqualTo(intQ.isEmpty());\n        assertThat(javaQ.size()).isEqualTo(intQ.size());\n      }\n    }\n  }\n}\n"}
{"code_source": "/**\n * Implementation of Kahn's algorithm to find a topological ordering\n *\n * <p>Kahn's algorithm finds a topological ordering by iteratively removing nodes in the graph which\n * have no incoming edges. When a node is removed from the graph, it is added to the topological\n * ordering and all its edges are removed allowing for the next set of nodes with no incoming edges\n * to be selected.\n *\n * <p>Verified against: https://open.kattis.com/problems/builddeps\n *\n * <p>./gradlew run -Palgorithm=graphtheory.Kahns\n *\n * <p>Time complexity: O(V+E)\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.graphtheory;\n\nimport static com.williamfiset.algorithms.utils.graphutils.Utils.addDirectedEdge;\nimport static com.williamfiset.algorithms.utils.graphutils.Utils.createEmptyAdjacencyList;\n\nimport java.util.*;\n\npublic class Kahns {\n\n  // Given a an acyclic graph `g` represented as a adjacency list, return a\n  // topological ordering on the nodes of the graph.\n  public int[] kahns(List<List<Integer>> g) {\n    int n = g.size();\n\n    // Calculate the in-degree of each node.\n    int[] inDegree = new int[n];\n    for (List<Integer> edges : g) {\n      for (int to : edges) {\n        inDegree[to]++;\n      }\n    }\n\n    // q always contains the set nodes with no incoming edges.\n    Queue<Integer> q = new ArrayDeque<>();\n\n    // Find all start nodes.\n    for (int i = 0; i < n; i++) {\n      if (inDegree[i] == 0) {\n        q.offer(i);\n      }\n    }\n\n    int index = 0;\n    int[] order = new int[n];\n    while (!q.isEmpty()) {\n      int at = q.poll();\n      order[index++] = at;\n      for (int to : g.get(at)) {\n        inDegree[to]--;\n        if (inDegree[to] == 0) {\n          q.offer(to);\n        }\n      }\n    }\n    if (index != n) {\n      throw new IllegalArgumentException(\"Graph is not acyclic! Detected a cycle.\");\n    }\n    return order;\n  }\n\n  // Example usage:\n  public static void main(String[] args) {\n    exampleFromSlides();\n    // test1();\n    // test2();\n    // cycleTest();\n  }\n\n  private static void exampleFromSlides() {\n    List<List<Integer>> g = createEmptyAdjacencyList(14);\n    addDirectedEdge(g, 0, 2);\n    addDirectedEdge(g, 0, 3);\n    addDirectedEdge(g, 0, 6);\n    addDirectedEdge(g, 1, 4);\n    addDirectedEdge(g, 2, 6);\n    addDirectedEdge(g, 3, 1);\n    addDirectedEdge(g, 3, 4);\n    addDirectedEdge(g, 4, 5);\n    addDirectedEdge(g, 4, 8);\n    addDirectedEdge(g, 6, 7);\n    addDirectedEdge(g, 6, 11);\n    addDirectedEdge(g, 7, 4);\n    addDirectedEdge(g, 7, 12);\n    addDirectedEdge(g, 9, 2);\n    addDirectedEdge(g, 9, 10);\n    addDirectedEdge(g, 10, 6);\n    addDirectedEdge(g, 11, 12);\n    addDirectedEdge(g, 12, 8);\n\n    Kahns solver = new Kahns();\n    int[] ordering = solver.kahns(g);\n\n    // Prints: [0, 9, 13, 3, 2, 10, 1, 6, 7, 11, 4, 12, 5, 8]\n    System.out.println(java.util.Arrays.toString(ordering));\n  }\n\n  private static void test1() {\n    List<List<Integer>> g = createEmptyAdjacencyList(6);\n    addDirectedEdge(g, 0, 1);\n    addDirectedEdge(g, 0, 2);\n    addDirectedEdge(g, 1, 2);\n    addDirectedEdge(g, 3, 1);\n    addDirectedEdge(g, 3, 2);\n    addDirectedEdge(g, 2, 4);\n    addDirectedEdge(g, 4, 5);\n    Kahns solver = new Kahns();\n    System.out.println(java.util.Arrays.toString(solver.kahns(g)));\n  }\n\n  private static void test2() {\n    List<List<Integer>> g = createEmptyAdjacencyList(6);\n    addDirectedEdge(g, 0, 1);\n    addDirectedEdge(g, 0, 2);\n    addDirectedEdge(g, 0, 5);\n    addDirectedEdge(g, 1, 2);\n    addDirectedEdge(g, 1, 3);\n    addDirectedEdge(g, 2, 3);\n    addDirectedEdge(g, 2, 4);\n    addDirectedEdge(g, 3, 4);\n    addDirectedEdge(g, 5, 4);\n    Kahns solver = new Kahns();\n    System.out.println(java.util.Arrays.toString(solver.kahns(g)));\n  }\n\n  private static void cycleTest() {\n    List<List<Integer>> g = createEmptyAdjacencyList(4);\n    addDirectedEdge(g, 0, 1);\n    addDirectedEdge(g, 1, 2);\n    addDirectedEdge(g, 2, 3);\n    addDirectedEdge(g, 3, 0);\n    Kahns solver = new Kahns();\n    System.out.println(java.util.Arrays.toString(solver.kahns(g)));\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.graphtheory;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.williamfiset.algorithms.utils.graphutils.GraphGenerator;\nimport com.williamfiset.algorithms.utils.graphutils.Utils;\nimport java.util.*;\nimport org.junit.*;\n\npublic class KahnsTest {\n\n  private static boolean find(List<List<Integer>> g, boolean[] vis, int at, int target) {\n    List<Integer> edges = g.get(at);\n    if (edges.size() == 0 || vis[at]) {\n      return false;\n    }\n    if (at == target) {\n      return true;\n    }\n    vis[at] = true;\n    for (int next : edges) {\n      if (find(g, vis, next, target)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Verifies that the topological ordering is not violated, O(n^2)\n  private static boolean isTopsortOrdering(List<List<Integer>> g, int[] order) {\n    int n = g.size();\n    for (int i = 0; i < n; i++) {\n      for (int j = i + 1; j < n; j++) {\n        // Check that `node j` appears before `node i`\n        if (find(g, new boolean[n], order[j], order[i])) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void cycleInGraph() {\n    List<List<Integer>> g = Utils.createEmptyAdjacencyList(4);\n    Utils.addDirectedEdge(g, 0, 1);\n    Utils.addDirectedEdge(g, 1, 2);\n    Utils.addDirectedEdge(g, 2, 3);\n    Utils.addDirectedEdge(g, 3, 0);\n    Kahns solver = new Kahns();\n    solver.kahns(g);\n  }\n\n  @Test\n  public void verifyIsTopsortOrdering() {\n    List<List<Integer>> g = Utils.createEmptyAdjacencyList(3);\n    Utils.addDirectedEdge(g, 0, 1);\n    Utils.addDirectedEdge(g, 1, 2);\n    int[] order = {2, 1, 0};\n    assertThat(isTopsortOrdering(g, order)).isEqualTo(false);\n  }\n\n  @Test\n  public void randomTest() {\n    GraphGenerator.DagGenerator dagGen = new GraphGenerator.DagGenerator(10, 10, 5, 5, 0.86);\n    List<List<Integer>> g = dagGen.createDag();\n    Kahns solver = new Kahns();\n    int[] order = solver.kahns(g);\n    assertThat(isTopsortOrdering(g, order)).isEqualTo(true);\n  }\n\n  @Test\n  public void randomTests() {\n    for (double p = 0.7; p <= 1.0; p += 0.02) {\n      GraphGenerator.DagGenerator dagGen = new GraphGenerator.DagGenerator(2, 20, 4, 15, p);\n      List<List<Integer>> g = dagGen.createDag();\n      Kahns solver = new Kahns();\n      int[] order = solver.kahns(g);\n      assertThat(isTopsortOrdering(g, order)).isEqualTo(true);\n    }\n  }\n}\n"}
{"code_source": "/**\n * Implementation of Kosaraju's SCC algorithm\n *\n * <p>Verified against:\n *\n * <ul>\n *   <li>https://open.kattis.com/problems/equivalences\n *   <li>https://open.kattis.com/problems/runningmom\n * </ul>\n *\n * <p>./gradlew run -Palgorithm=graphtheory.Kosaraju\n */\npackage com.williamfiset.algorithms.graphtheory;\n\nimport java.util.*;\n\npublic class Kosaraju {\n\n  private int n;\n  private int sccCount;\n  private boolean solved;\n  private int[] sccs;\n  private boolean[] visited;\n\n  // The post order forest traversal of the original graph resulting from the first DFS.\n  private List<Integer> postOrderTraversal;\n\n  private List<List<Integer>> graph;\n  private List<List<Integer>> transposeGraph;\n\n  public Kosaraju(List<List<Integer>> graph) {\n    if (graph == null) throw new IllegalArgumentException(\"Graph cannot be null.\");\n    this.graph = graph;\n    n = graph.size();\n  }\n\n  // Returns the number of strongly connected components in the graph.\n  public int sccCount() {\n    if (!solved) solve();\n    return sccCount;\n  }\n\n  // Get the connected components of this graph. If two indexes\n  // have the same value then they're in the same SCC.\n  public int[] getSccs() {\n    if (!solved) solve();\n    return sccs;\n  }\n\n  private void solve() {\n    sccCount = 0;\n    sccs = new int[n];\n    visited = new boolean[n];\n    postOrderTraversal = new ArrayList<>();\n\n    for (int i = 0; i < n; i++) {\n      dfs1(i);\n    }\n\n    Arrays.fill(visited, false);\n    createTransposeGraph();\n\n    // Reverse the post order traversal to make iterating through it\n    // in the next step more intuitive.\n    Collections.reverse(postOrderTraversal);\n\n    for (int node : postOrderTraversal) {\n      if (!visited[node]) {\n        dfs2(node);\n        sccCount++;\n      }\n    }\n\n    solved = true;\n  }\n\n  // Traverse the original graph and add nodes to the post order traversal on the callback.\n  private void dfs1(int from) {\n    if (visited[from]) {\n      return;\n    }\n    visited[from] = true;\n    for (int to : graph.get(from)) {\n      dfs1(to);\n    }\n    postOrderTraversal.add(from);\n  }\n\n  // Traverse the transverse graph and label all the encountered nodes as part of the sane SCC.\n  private void dfs2(int from) {\n    if (visited[from]) {\n      return;\n    }\n    visited[from] = true;\n    for (int to : transposeGraph.get(from)) {\n      dfs2(to);\n    }\n    sccs[from] = sccCount;\n  }\n\n  private void createTransposeGraph() {\n    transposeGraph = createGraph(n);\n    for (int u = 0; u < n; u++) {\n      for (int v : graph.get(u)) {\n        addEdge(transposeGraph, v, u);\n      }\n    }\n  }\n\n  // Initializes adjacency list with n nodes.\n  public static List<List<Integer>> createGraph(int n) {\n    List<List<Integer>> graph = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) graph.add(new ArrayList<>());\n    return graph;\n  }\n\n  // Adds a directed edge from node 'from' to node 'to'\n  public static void addEdge(List<List<Integer>> graph, int from, int to) {\n    graph.get(from).add(to);\n  }\n\n  public static void main(String[] args) {\n    example1();\n    // example2();\n    // example3();\n    // example4();\n    // exampleFromCp4();\n  }\n\n  private static void exampleFromCp4() {\n    int n = 8;\n    List<List<Integer>> graph = createGraph(n);\n\n    addEdge(graph, 0, 1);\n    addEdge(graph, 1, 3);\n    addEdge(graph, 2, 1);\n    addEdge(graph, 3, 2);\n    addEdge(graph, 3, 4);\n    addEdge(graph, 4, 5);\n    addEdge(graph, 5, 7);\n    addEdge(graph, 6, 4);\n    addEdge(graph, 7, 6);\n\n    runKosaraju(graph);\n  }\n\n  private static void example4() {\n    int n = 8;\n    List<List<Integer>> graph = createGraph(n);\n\n    // [0, 3, 2, 1, 7, 6, 5, 4]\n    addEdge(graph, 0, 2);\n    addEdge(graph, 0, 3);\n    addEdge(graph, 0, 5);\n    addEdge(graph, 1, 4);\n    addEdge(graph, 1, 7);\n    addEdge(graph, 2, 1);\n    addEdge(graph, 3, 0);\n    addEdge(graph, 3, 4);\n    addEdge(graph, 4, 2);\n    addEdge(graph, 5, 7);\n    addEdge(graph, 6, 5);\n    addEdge(graph, 7, 6);\n\n    runKosaraju(graph);\n  }\n\n  private static void example3() {\n    int n = 6;\n    List<List<Integer>> graph = createGraph(n);\n\n    // [4, 2, 5, 0, 3, 1]\n    addEdge(graph, 0, 2);\n    addEdge(graph, 0, 5);\n    addEdge(graph, 1, 0);\n    addEdge(graph, 1, 3);\n    addEdge(graph, 2, 4);\n    addEdge(graph, 3, 1);\n    addEdge(graph, 3, 5);\n    addEdge(graph, 4, 0);\n\n    runKosaraju(graph);\n  }\n\n  private static void example2() {\n    // [8, 9, 5, 4, 7, 3, 2, 6, 1, 0]\n    // [5, 4, 8, 9, 3, 2, 7, 1, 6, 0]\n    int n = 10;\n    List<List<Integer>> graph = createGraph(n);\n\n    addEdge(graph, 0, 1);\n    addEdge(graph, 1, 2);\n    addEdge(graph, 1, 6);\n    addEdge(graph, 2, 3);\n    addEdge(graph, 3, 4);\n    addEdge(graph, 3, 7);\n    addEdge(graph, 4, 5);\n    addEdge(graph, 5, 9);\n    addEdge(graph, 6, 1);\n    addEdge(graph, 7, 2);\n    addEdge(graph, 8, 4);\n    addEdge(graph, 9, 8);\n\n    runKosaraju(graph);\n  }\n\n  private static void example1() {\n    int n = 8;\n    List<List<Integer>> graph = createGraph(n);\n\n    addEdge(graph, 6, 0);\n    addEdge(graph, 6, 2);\n    addEdge(graph, 3, 4);\n    addEdge(graph, 6, 4);\n    addEdge(graph, 2, 0);\n    addEdge(graph, 0, 1);\n    addEdge(graph, 4, 5);\n    addEdge(graph, 5, 6);\n    addEdge(graph, 3, 7);\n    addEdge(graph, 7, 5);\n    addEdge(graph, 1, 2);\n    addEdge(graph, 7, 3);\n    addEdge(graph, 5, 0);\n\n    // Prints:\n    // Number of Strongly Connected Components: 3\n    // Nodes: [3, 7] form a Strongly Connected Component.\n    // Nodes: [4, 5, 6] form a Strongly Connected Component.\n    // Nodes: [0, 1, 2] form a Strongly Connected Component.\n    runKosaraju(graph);\n  }\n\n  private static void runKosaraju(List<List<Integer>> graph) {\n    int n = graph.size();\n    Kosaraju solver = new Kosaraju(graph);\n    int[] sccs = solver.getSccs();\n    Map<Integer, List<Integer>> multimap = new HashMap<>();\n    for (int i = 0; i < n; i++) {\n      if (!multimap.containsKey(sccs[i])) multimap.put(sccs[i], new ArrayList<>());\n      multimap.get(sccs[i]).add(i);\n    }\n\n    System.out.printf(\"Number of Strongly Connected Components: %d\\n\", solver.sccCount());\n    for (List<Integer> scc : multimap.values()) {\n      System.out.println(\"Nodes: \" + scc + \" form a Strongly Connected Component.\");\n    }\n  }\n}\n", "test_case": "/**\n * Tests for Kosaraju's algorithm\n *\n * <p>gradle test --info --tests \"com.williamfiset.algorithms.graphtheory.KosarajuTest\"\n */\npackage com.williamfiset.algorithms.graphtheory;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.google.common.collect.ImmutableList;\nimport java.util.*;\nimport org.junit.*;\n\npublic class KosarajuTest {\n\n  // Initialize graph with 'n' nodes.\n  public static List<List<Integer>> createGraph(int n) {\n    List<List<Integer>> graph = new ArrayList<>();\n    for (int i = 0; i < n; i++) graph.add(new ArrayList<>());\n    return graph;\n  }\n\n  // Add directed edge to graph.\n  public static void addEdge(List<List<Integer>> graph, int from, int to) {\n    graph.get(from).add(to);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void nullGraphConstructor() {\n    new Kosaraju(null);\n  }\n\n  @Test\n  public void singletonCase() {\n    int n = 1;\n    List<List<Integer>> g = createGraph(n);\n\n    Kosaraju solver = new Kosaraju(g);\n\n    int[] actual = solver.getSccs();\n    int[] expected = new int[n];\n    assertThat(actual).isEqualTo(expected);\n    assertThat(solver.sccCount()).isEqualTo(1);\n  }\n\n  @Test\n  public void testTwoDisjointComponents() {\n    int n = 5;\n    List<List<Integer>> g = createGraph(n);\n\n    addEdge(g, 0, 1);\n    addEdge(g, 1, 0);\n\n    addEdge(g, 2, 3);\n    addEdge(g, 3, 4);\n    addEdge(g, 4, 2);\n\n    Kosaraju solver = new Kosaraju(g);\n\n    List<List<Integer>> expectedSccs =\n        ImmutableList.of(ImmutableList.of(0, 1), ImmutableList.of(2, 3, 4));\n\n    assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n    assertThat(isScc(solver.getSccs(), expectedSccs)).isTrue();\n  }\n\n  @Test\n  public void testButterflyCase() {\n    int n = 5;\n    List<List<Integer>> g = createGraph(n);\n\n    addEdge(g, 0, 1);\n    addEdge(g, 1, 2);\n    addEdge(g, 2, 3);\n    addEdge(g, 3, 1);\n    addEdge(g, 1, 4);\n    addEdge(g, 4, 0);\n\n    Kosaraju solver = new Kosaraju(g);\n\n    List<List<Integer>> expectedSccs = ImmutableList.of(ImmutableList.of(0, 1, 2, 3, 4));\n\n    assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n    assertThat(isScc(solver.getSccs(), expectedSccs)).isTrue();\n  }\n\n  @Test\n  public void testDisjointTree() {\n    int n = 7;\n    List<List<Integer>> g = createGraph(n);\n\n    addEdge(g, 0, 1);\n    addEdge(g, 1, 2);\n\n    addEdge(g, 4, 3);\n    addEdge(g, 5, 3);\n    addEdge(g, 6, 3);\n\n    Kosaraju solver = new Kosaraju(g);\n\n    List<List<Integer>> expectedSccs =\n        ImmutableList.of(\n            ImmutableList.of(0),\n            ImmutableList.of(1),\n            ImmutableList.of(2),\n            ImmutableList.of(3),\n            ImmutableList.of(4),\n            ImmutableList.of(5),\n            ImmutableList.of(6));\n\n    assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n    assertThat(isScc(solver.getSccs(), expectedSccs)).isTrue();\n  }\n\n  @Test\n  public void testDisjointTreeFromHackerrank() {\n    // https://www.hackerearth.com/practice/algorithms/graphs/strongly-connected-components/tutorial\n    int n = 16; // node 0 not used since these are 1 based\n    List<List<Integer>> g = createGraph(n);\n\n    addEdge(g, 3, 1);\n    addEdge(g, 12, 11);\n    addEdge(g, 10, 9);\n    addEdge(g, 8, 5);\n    addEdge(g, 1, 12);\n    addEdge(g, 10, 2);\n    addEdge(g, 1, 14);\n    addEdge(g, 7, 9);\n    addEdge(g, 10, 13);\n    addEdge(g, 11, 1);\n    addEdge(g, 6, 5);\n    addEdge(g, 1, 15);\n    addEdge(g, 2, 11);\n    addEdge(g, 2, 6);\n    addEdge(g, 9, 11);\n\n    Kosaraju solver = new Kosaraju(g);\n\n    List<List<Integer>> expectedSccs =\n        ImmutableList.of(\n            ImmutableList.of(0),\n            ImmutableList.of(2),\n            ImmutableList.of(3),\n            ImmutableList.of(4),\n            ImmutableList.of(5),\n            ImmutableList.of(6),\n            ImmutableList.of(7),\n            ImmutableList.of(8),\n            ImmutableList.of(9),\n            ImmutableList.of(10),\n            ImmutableList.of(1, 11, 12),\n            ImmutableList.of(13),\n            ImmutableList.of(14),\n            ImmutableList.of(15));\n\n    assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n    assertThat(isScc(solver.getSccs(), expectedSccs)).isTrue();\n  }\n\n  @Test\n  public void testFirstGraphInSlides() {\n    int n = 9;\n    List<List<Integer>> g = createGraph(n);\n\n    addEdge(g, 0, 1);\n    addEdge(g, 1, 0);\n    addEdge(g, 0, 8);\n    addEdge(g, 8, 0);\n    addEdge(g, 8, 7);\n    addEdge(g, 7, 6);\n    addEdge(g, 6, 7);\n    addEdge(g, 1, 7);\n    addEdge(g, 2, 1);\n    addEdge(g, 2, 6);\n    addEdge(g, 5, 6);\n    addEdge(g, 2, 5);\n    addEdge(g, 5, 3);\n    addEdge(g, 3, 2);\n    addEdge(g, 4, 3);\n    addEdge(g, 4, 5);\n\n    Kosaraju solver = new Kosaraju(g);\n\n    List<List<Integer>> expectedSccs =\n        ImmutableList.of(\n            ImmutableList.of(0, 1, 8),\n            ImmutableList.of(7, 6),\n            ImmutableList.of(2, 3, 5),\n            ImmutableList.of(4));\n\n    assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n    assertThat(isScc(solver.getSccs(), expectedSccs)).isTrue();\n  }\n\n  @Test\n  public void testLastGraphInSlides() {\n    int n = 8;\n    List<List<Integer>> g = createGraph(n);\n\n    addEdge(g, 0, 1);\n    addEdge(g, 1, 2);\n    addEdge(g, 2, 0);\n    addEdge(g, 3, 4);\n    addEdge(g, 3, 7);\n    addEdge(g, 4, 5);\n    addEdge(g, 5, 0);\n    addEdge(g, 5, 6);\n    addEdge(g, 6, 0);\n    addEdge(g, 6, 2);\n    addEdge(g, 6, 4);\n    addEdge(g, 7, 3);\n    addEdge(g, 7, 5);\n\n    Kosaraju solver = new Kosaraju(g);\n\n    List<List<Integer>> expectedSccs =\n        ImmutableList.of(\n            ImmutableList.of(6, 5, 4), ImmutableList.of(3, 7), ImmutableList.of(0, 2, 1));\n    assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n    assertThat(isScc(solver.getSccs(), expectedSccs)).isTrue();\n  }\n\n  private static boolean isScc(int[] ids, List<List<Integer>> expectedSccs) {\n    Set<Integer> set = new HashSet<>();\n    Set<Integer> sccComponentIds = new HashSet<>();\n    for (List<Integer> indexes : expectedSccs) {\n      set.clear();\n      int componentId = 0;\n      for (int index : indexes) {\n        componentId = ids[index];\n        set.add(componentId);\n      }\n      if (sccComponentIds.contains(componentId)) return false;\n      if (set.size() != 1) return false;\n      sccComponentIds.add(componentId);\n    }\n    return true;\n  }\n}\n"}
{"code_source": "/**\n * The LazyRangerAdder is a handy class for performing addition range updates of constant values on\n * an array. This range adder is especially useful for offline algorithms which know all range\n * updates ahead of time.\n *\n * <p>Time complexity to update O(1) but time complexity to finalize all additions is O(n)\n *\n * @author Atharva Thorve, aaathorve@gmail.com\n */\npackage com.williamfiset.algorithms.other;\n\npublic class LazyRangeAdder {\n\n  // The number of elements in the input array.\n  private int n;\n\n  // The original input array\n  private int[] array;\n\n  // The difference array with the deltas between values, size n+1\n  private int[] differenceArray;\n\n  // Initialize an instance of a LazyRangeAdder on some input values\n  public LazyRangeAdder(int[] array) {\n    this.array = array;\n    this.n = array.length;\n\n    differenceArray = new int[n + 1];\n    differenceArray[0] = array[0];\n    for (int i = 1; i < n; i++) {\n      differenceArray[i] = array[i] - array[i - 1];\n    }\n  }\n\n  // Add `x` to the range [l, r] inclusive\n  public void add(int l, int r, int x) {\n    differenceArray[l] += x;\n    differenceArray[r + 1] -= x;\n  }\n\n  // IMPORTANT: Make certain to call this method once all the additions\n  // have been made with add(l, r, x)\n  public void done() {\n    for (int i = 0; i < n; i++) {\n      if (i == 0) {\n        array[i] = differenceArray[i];\n      } else {\n        array[i] = differenceArray[i] + array[i - 1];\n      }\n    }\n  }\n\n  public static void main(String[] args) {\n    // Array to be updated\n    int[] array = {10, 4, 6, 13, 8, 15, 17, 22};\n    LazyRangeAdder lazyRangeAdder = new LazyRangeAdder(array);\n\n    // After below add(l, r, x), the\n    // elements should become [10, 14, 16, 23, 18, 15, 17, 22]\n    lazyRangeAdder.add(1, 4, 10);\n    lazyRangeAdder.done();\n    System.out.println(java.util.Arrays.toString(array));\n\n    // After below add(l, r, x), the\n    // elements should become [22, 26, 28, 30, 25, 22, 24, 34]\n    lazyRangeAdder.add(3, 6, -5);\n    lazyRangeAdder.add(0, 7, 12);\n    lazyRangeAdder.done();\n    System.out.println(java.util.Arrays.toString(array));\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.other;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport org.junit.Test;\n\npublic class LazyRangeAdderTest {\n\n  @Test\n  public void rangeUpdateTest1() {\n    int[] a = {10, 5, 20, 40};\n    LazyRangeAdder lazyRangeAdder = new LazyRangeAdder(a);\n    lazyRangeAdder.add(0, 1, 10);\n    lazyRangeAdder.add(1, 3, 20);\n    lazyRangeAdder.add(2, 2, 30);\n    lazyRangeAdder.done();\n    int[] expected = {20, 35, 70, 60};\n    assertThat(a).isEqualTo(expected);\n  }\n\n  @Test\n  public void rangeUpdateTest2() {\n    int[] a = {270, 311, 427, 535, 334, 193, 174};\n    LazyRangeAdder lazyRangeAdder = new LazyRangeAdder(a);\n    lazyRangeAdder.add(2, 5, 32);\n    lazyRangeAdder.add(0, 4, 101);\n    lazyRangeAdder.add(5, 6, -73);\n    lazyRangeAdder.done();\n    int[] expected = {371, 412, 560, 668, 467, 152, 101};\n    assertThat(a).isEqualTo(expected);\n  }\n\n  @Test\n  public void randomRangeAdditionTests() {\n    // Try several different array sizes\n    for (int n = 1; n < 1000; n++) {\n\n      int[] arr1 = new int[n];\n      randomFill(arr1);\n      int[] arr2 = arr1.clone();\n\n      LazyRangeAdder lazyRangeAdder = new LazyRangeAdder(arr1);\n\n      // Do 50 random range adds\n      for (int i = 0; i < 50; i++) {\n        // Generate a random range\n        int l = randValue(0, n);\n        int r = randValue(0, n);\n        l = Math.min(l, r);\n        r = Math.max(l, r);\n\n        int x = randValue(-100, 100);\n        lazyRangeAdder.add(l, r, x);\n        slowRangeAdd(arr2, l, r, x);\n      }\n\n      lazyRangeAdder.done();\n\n      assertThat(arr1).isEqualTo(arr2);\n    }\n  }\n\n  // Adds `x` to the range [l, r] in arr\n  private static void slowRangeAdd(int[] arr, int l, int r, int x) {\n    for (int i = l; i <= r; i++) {\n      arr[i] += x;\n    }\n  }\n\n  private static void randomFill(int[] arr) {\n    for (int i = 0; i < arr.length; i++) {\n      arr[i] = randValue(0, 1000);\n    }\n  }\n\n  // Generates a random number between [min, max)\n  private static int randValue(int min, int max) {\n    return min + (int) (Math.random() * ((max - min)));\n  }\n}\n"}
{"code_source": "/**\n * This file contains an implementation of finding the Longest Common Substring (LCS) between two\n * strings using dynamic programming.\n *\n * <p>Time Complexity: O(nm)\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.dp;\n\npublic class LongestCommonSubstring {\n\n  // Returns a non unique Longest Common Substring\n  // between the strings str1 and str2 in O(nm)\n  public static String lcs(char[] A, char[] B) {\n\n    if (A == null || B == null) return null;\n\n    final int n = A.length;\n    final int m = B.length;\n\n    if (n == 0 || m == 0) return null;\n\n    int[][] dp = new int[n + 1][m + 1];\n\n    // Suppose A = a1a2..an-1an and B = b1b2..bn-1bn\n    for (int i = 1; i <= n; i++) {\n      for (int j = 1; j <= m; j++) {\n\n        // If ends match the LCS(a1a2..an-1an, b1b2..bn-1bn) = LCS(a1a2..an-1, b1b2..bn-1) + 1\n        if (A[i - 1] == B[j - 1]) dp[i][j] = dp[i - 1][j - 1] + 1;\n\n        // If the ends do not match the LCS of a1a2..an-1an and b1b2..bn-1bn is\n        // max( LCS(a1a2..an-1, b1b2..bn-1bn), LCS(a1a2..an-1an, b1b2..bn-1) )\n        else dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n      }\n    }\n\n    int lcsLen = dp[n][m];\n    char[] lcs = new char[lcsLen];\n    int index = 0;\n\n    // Backtrack to find a LCS. We search for the cells\n    // where we included an element which are those with\n    // dp[i][j] != dp[i-1][j] and dp[i][j] != dp[i][j-1])\n    int i = n, j = m;\n    while (i >= 1 && j >= 1) {\n\n      int v = dp[i][j];\n\n      // The order of these may output different LCSs\n      while (i > 1 && dp[i - 1][j] == v) i--;\n      while (j > 1 && dp[i][j - 1] == v) j--;\n\n      // Make sure there is a match before adding\n      if (v > 0) lcs[lcsLen - index++ - 1] = A[i - 1]; // or B[j-1];\n\n      i--;\n      j--;\n    }\n\n    return new String(lcs, 0, lcsLen);\n  }\n\n  public static void main(String[] args) {\n\n    char[] A = {'A', 'X', 'B', 'C', 'Y'};\n    char[] B = {'Z', 'A', 'Y', 'W', 'B', 'C'};\n    System.out.println(lcs(A, B)); // ABC\n\n    A = new char[] {'3', '9', '8', '3', '9', '7', '9', '7', '0'};\n    B = new char[] {'3', '3', '9', '9', '9', '1', '7', '2', '0', '6'};\n    System.out.println(lcs(A, B)); // 339970\n  }\n}\n", "test_case": "/**\n * Run like: $ gradle test --tests \"com.williamfiset.algorithms.strings.LongestCommonSubstringTest\"\n */\npackage com.williamfiset.algorithms.strings;\n\nimport static com.google.common.truth.Truth.assertThat;\nimport static com.williamfiset.algorithms.strings.LongestCommonSubstring.LcsSolver;\n\nimport com.google.common.collect.ImmutableList;\nimport com.williamfiset.algorithms.utils.TestUtils;\nimport java.util.*;\nimport org.junit.*;\n\npublic class LongestCommonSubstringTest {\n\n  private static class SlowLcsSolver {\n    String[] strings;\n\n    public SlowLcsSolver(String[] strings) {\n      if (strings == null || strings.length < 2)\n        throw new IllegalArgumentException(\"Invalid strings input to SlowLcsSolver.\");\n      this.strings = strings;\n    }\n\n    public TreeSet<String> getLongestCommonSubstrings(int k) {\n\n      Set<String> allSubstrings = new HashSet<>();\n      List<Set<String>> sets = new ArrayList<>();\n      for (int h = 0; h < strings.length; h++) {\n        String string = strings[h];\n        Set<String> set = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n          for (int j = i + 1; j <= string.length(); j++) {\n            String substring = string.substring(i, j);\n            set.add(substring);\n            allSubstrings.add(substring);\n          }\n        }\n        sets.add(set);\n      }\n\n      TreeSet<String> ans = new TreeSet<>();\n      for (String substring : allSubstrings) {\n        int count = 0;\n        for (Set<String> set : sets) {\n          if (set.contains(substring)) {\n            count++;\n          }\n        }\n        if (count < k) continue;\n        if (ans.size() == 0) {\n          ans.add(substring);\n        } else {\n          String x = ans.last();\n          if (substring.length() > x.length()) {\n            ans.clear();\n            ans.add(substring);\n          } else if (substring.length() == x.length()) {\n            ans.add(substring);\n          }\n        }\n      }\n\n      return ans;\n    }\n  }\n\n  public void verifyMultipleKValues(String[] strings, Map<Integer, TreeSet<String>> answers) {\n    for (int k : answers.keySet()) {\n      TreeSet<String> expectedLcss = answers.get(k);\n\n      LcsSolver solver = new LcsSolver(strings);\n      TreeSet<String> lcss = solver.getLongestCommonSubstrings(k);\n      assertThat(expectedLcss).isEqualTo(lcss);\n    }\n  }\n\n  @Test\n  public void multipleKValueTest1() {\n    String[] strs = {\"TAAAAT\", \"ATAAAAT\", \"TATA\", \"ATA\", \"AAT\", \"TTTT\", \"TT\"};\n    Map<Integer, TreeSet<String>> answers = new HashMap<>();\n\n    answers.put(2, new TreeSet<>(ImmutableList.of(\"TAAAAT\")));\n    answers.put(3, new TreeSet<>(ImmutableList.of(\"ATA\", \"AAT\")));\n    answers.put(4, new TreeSet<>(ImmutableList.of(\"AT\", \"TA\")));\n    answers.put(5, new TreeSet<>(ImmutableList.of(\"AT\")));\n    answers.put(6, new TreeSet<>(ImmutableList.of(\"T\")));\n    answers.put(7, new TreeSet<>(ImmutableList.of(\"T\")));\n\n    verifyMultipleKValues(strs, answers);\n  }\n\n  @Test\n  public void multipleKValueTest2() {\n    String[] strs = {\"AABAABA\", \"BBAABA\", \"BAABA\", \"ABBABB\", \"BBA\", \"ABA\"};\n    Map<Integer, TreeSet<String>> answers = new HashMap<>();\n\n    answers.put(2, new TreeSet<>(ImmutableList.of(\"BAABA\")));\n    answers.put(3, new TreeSet<>(ImmutableList.of(\"BAABA\")));\n    answers.put(4, new TreeSet<>(ImmutableList.of(\"ABA\")));\n\n    verifyMultipleKValues(strs, answers);\n  }\n\n  @Test\n  public void multipleKValueTest3() {\n    String[] strs = {\"A\", \"CA\", \"EB\", \"CB\", \"D\", \"EDA\"};\n    Map<Integer, TreeSet<String>> answers = new HashMap<>();\n\n    answers.put(2, new TreeSet<>(ImmutableList.of(\"A\", \"B\", \"C\", \"D\", \"E\")));\n    verifyMultipleKValues(strs, answers);\n  }\n\n  @Test\n  public void multipleKValueTest4() {\n    String[] strs = {\"ABCBDAB\", \"BDCABA\", \"BADACB\"};\n    Map<Integer, TreeSet<String>> answers = new HashMap<>();\n\n    answers.put(2, new TreeSet<>(ImmutableList.of(\"AB\", \"CB\", \"BD\", \"DA\", \"BA\")));\n    verifyMultipleKValues(strs, answers);\n  }\n\n  @Test\n  public void multipleKValueTest5() {\n    String[] strs = {\"abcde\", \"f\", \"ghij\", \"kmlop\", \"qrs\", \"tu\", \"v\", \"wxyz\"};\n    Map<Integer, TreeSet<String>> answers = new HashMap<>();\n\n    answers.put(2, new TreeSet<>());\n    answers.put(3, new TreeSet<>());\n    answers.put(4, new TreeSet<>());\n    answers.put(5, new TreeSet<>());\n    answers.put(6, new TreeSet<>());\n    answers.put(7, new TreeSet<>());\n    answers.put(8, new TreeSet<>());\n    verifyMultipleKValues(strs, answers);\n  }\n\n  @Test\n  public void noLongestCommonSubstringTest() {\n    int k = 2;\n    String[] strs = {\"abcd\", \"efgh\"};\n\n    TreeSet<String> ans = new TreeSet<>();\n    LcsSolver solver = new LcsSolver(strs);\n    TreeSet<String> lcss = solver.getLongestCommonSubstrings(k);\n\n    assertThat(ans.size()).isEqualTo(lcss.size());\n  }\n\n  @Test\n  public void simple1() {\n    int k = 2;\n    String[] strs = {\"abcde\", \"habcab\", \"ghabcdf\"};\n\n    TreeSet<String> ans = new TreeSet<>();\n    ans.add(\"abcd\");\n    ans.add(\"habc\");\n\n    LcsSolver solver = new LcsSolver(strs);\n    TreeSet<String> lcss = solver.getLongestCommonSubstrings(k);\n    assertThat(ans).isEqualTo(lcss);\n  }\n\n  @Test\n  public void simple2() {\n    int k = 3;\n    String[] strs = {\"AAGAAGC\", \"AGAAGT\", \"CGAAGC\"};\n\n    TreeSet<String> ans = new TreeSet<>();\n    ans.add(\"GAAG\");\n\n    LcsSolver solver = new LcsSolver(strs);\n    TreeSet<String> lcss = solver.getLongestCommonSubstrings(k);\n    assertThat(ans).isEqualTo(lcss);\n  }\n\n  @Test\n  public void simple3() {\n    int k = 2;\n    String[] strs = {\"AABC\", \"BCDC\", \"BCDE\", \"CDED\", \"CDCABC\"};\n\n    TreeSet<String> ans = new TreeSet<>();\n    ans.add(\"ABC\");\n    ans.add(\"BCD\");\n    ans.add(\"CDC\");\n    ans.add(\"CDE\");\n\n    LcsSolver solver = new LcsSolver(strs);\n    TreeSet<String> lcss = solver.getLongestCommonSubstrings(k);\n    assertThat(ans).isEqualTo(lcss);\n  }\n\n  @Test\n  public void simple4() {\n    int k = 4;\n    String[] strs = {\n      \"XXXXXXX\", \"VVV\",\n      \"XXXXXXX\", \"ZZZ\",\n      \"XXXXXXX\", \"YYY\",\n      \"XXXXXXX\"\n    };\n\n    TreeSet<String> ans = new TreeSet<>();\n    ans.add(\"XXXXXXX\");\n\n    LcsSolver solver = new LcsSolver(strs);\n    TreeSet<String> lcss = solver.getLongestCommonSubstrings(k);\n    assertThat(ans).isEqualTo(lcss);\n  }\n\n  @Test\n  public void simple5() {\n    int k = 2;\n    String[] strs = {\"AABC\", \"BCDC\", \"BCDE\", \"CDED\"};\n    TreeSet<String> ans = new TreeSet<>();\n    ans.add(\"BCD\");\n    ans.add(\"CDE\");\n\n    LcsSolver solver = new LcsSolver(strs);\n    TreeSet<String> lcss = solver.getLongestCommonSubstrings(k);\n    assertThat(ans).isEqualTo(lcss);\n  }\n\n  @Test\n  public void kValueTest() {\n    int k = 5;\n    String[] strs = {\n      \"AAAAA\", \"AAAAA\", \"AAAAA\", \"BB\", \"BB\", \"BB\", \"BB\", \"CC\", \"CC\", \"CC\", \"CC\", \"CC\"\n    };\n\n    // The 'A's are not included because we need four of them.\n    TreeSet<String> ans = new TreeSet<>();\n    ans.add(\"CC\");\n\n    LcsSolver solver = new LcsSolver(strs);\n    TreeSet<String> lcss = solver.getLongestCommonSubstrings(k);\n    assertThat(ans).isEqualTo(lcss);\n  }\n\n  @Test\n  public void kValueTest2() {\n    int k = 4;\n    String[] strs = {\n      \"AAAAA\", \"AAAAA\", \"AAAAA\", \"BB\", \"BB\", \"BB\", \"BB\", \"CC\", \"CC\", \"CC\", \"CC\", \"CC\"\n    };\n\n    // The 'A's are not included because we need four of them.\n    TreeSet<String> ans = new TreeSet<>();\n    ans.add(\"BB\");\n    ans.add(\"CC\");\n\n    LcsSolver solver = new LcsSolver(strs);\n    TreeSet<String> lcss = solver.getLongestCommonSubstrings(k);\n    assertThat(ans).isEqualTo(lcss);\n  }\n\n  @Test\n  public void kValueTest3() {\n    int k = 3;\n    String[] strs = {\n      \"AAAAA\", \"AAAAA\", \"AAAAA\", \"BB\", \"BB\", \"BB\", \"BB\", \"CC\", \"CC\", \"CC\", \"CC\", \"CC\"\n    };\n\n    // The 'A's are not included because we need four of them.\n    TreeSet<String> ans = new TreeSet<>();\n    ans.add(\"AAAAA\");\n\n    LcsSolver solver = new LcsSolver(strs);\n    TreeSet<String> lcss = solver.getLongestCommonSubstrings(k);\n    assertThat(ans).isEqualTo(lcss);\n  }\n\n  @Test\n  public void kValueTest4() {\n    int k = 2;\n    String[] strs = {\n      \"AAAAA\", \"AAAAA\", \"AAAAA\", \"BB\", \"BB\", \"BB\", \"BB\", \"CC\", \"CC\", \"CC\", \"CC\", \"CC\"\n    };\n\n    // The 'A's are not included because we need four of them.\n    TreeSet<String> ans = new TreeSet<>();\n    ans.add(\"AAAAA\");\n\n    LcsSolver solver = new LcsSolver(strs);\n    TreeSet<String> lcss = solver.getLongestCommonSubstrings(k);\n    assertThat(ans).isEqualTo(lcss);\n  }\n\n  @Test\n  public void smallStrings() {\n    int k = 6;\n    String[] strs = {\n      \"A\", \"A\", \"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"C\", \"C\", \"C\", \"C\", \"C\", \"C\", \"D\",\n      \"D\", \"D\", \"D\", \"D\", \"D\", \"E\", \"E\", \"E\", \"E\", \"E\", \"F\", \"F\", \"F\", \"F\", \"G\", \"G\", \"G\", \"H\", \"H\",\n      \"I\"\n    };\n\n    TreeSet<String> ans = new TreeSet<>();\n    ans.add(\"A\");\n    ans.add(\"B\");\n    ans.add(\"C\");\n    ans.add(\"D\");\n\n    LcsSolver solver = new LcsSolver(strs);\n    TreeSet<String> lcss = solver.getLongestCommonSubstrings(k);\n    assertThat(ans).isEqualTo(lcss);\n  }\n\n  @Test\n  public void randomLcssWithBruteForceSolver1() {\n    for (int len = 2; len < 20; len++) {\n      String[] strings = createRandomStrings(len, 12, 20, 3);\n      for (int k = 2; k <= len; k++) {\n        LcsSolver solver = new LcsSolver(strings);\n        TreeSet<String> lcss = solver.getLongestCommonSubstrings(k);\n\n        SlowLcsSolver slowSolver = new SlowLcsSolver(strings);\n        TreeSet<String> lcss2 = slowSolver.getLongestCommonSubstrings(k);\n        assertThat(lcss).isEqualTo(lcss2);\n      }\n    }\n  }\n\n  // This test makes sure the LCS behaves well with longer strings that have\n  // lots of matchings.\n  @Test\n  public void randomLcssWithBruteForceSolver2() {\n    for (int len = 2; len < 10; len++) {\n      String[] strings = createRandomStrings(len, 150, 200, 2);\n      for (int k = 2; k <= len; k++) {\n        LcsSolver solver = new LcsSolver(strings);\n        TreeSet<String> lcss = solver.getLongestCommonSubstrings(k);\n\n        SlowLcsSolver slowSolver = new SlowLcsSolver(strings);\n        TreeSet<String> lcss2 = slowSolver.getLongestCommonSubstrings(k);\n        assertThat(lcss).isEqualTo(lcss2);\n      }\n    }\n  }\n\n  @Test\n  public void randomLcssWithBruteForceSolver3() {\n    for (int len = 2; len < 10; len++) {\n      String[] strings = createRandomStrings(len, 6, 10, 15);\n      for (int k = 2; k <= len; k++) {\n        LcsSolver solver = new LcsSolver(strings);\n        TreeSet<String> lcss = solver.getLongestCommonSubstrings(k);\n\n        SlowLcsSolver slowSolver = new SlowLcsSolver(strings);\n        TreeSet<String> lcss2 = slowSolver.getLongestCommonSubstrings(k);\n        assertThat(lcss).isEqualTo(lcss2);\n      }\n    }\n  }\n\n  static String[] createRandomStrings(int numStrings, int minSz, int maxSz, int alphabetSize) {\n    String[] strings = new String[numStrings];\n    for (int i = 0; i < numStrings; i++) {\n      strings[i] = createString(minSz, maxSz, alphabetSize);\n    }\n    return strings;\n  }\n\n  static String createString(int minSz, int maxSz, int alphabetSize) {\n    int sz = TestUtils.randValue(minSz, maxSz + 1);\n    char[] chrs = new char[sz];\n    for (int i = 0; i < sz; i++) {\n      chrs[i] = (char) ('A' + TestUtils.randValue(0, alphabetSize));\n    }\n    return new String(chrs);\n  }\n\n  // TODO(williamfiset): crank up the numbers once implementation is faster.\n  @Test\n  public void testLargeAlphabet() {\n    for (int k = 2; k <= 10; k++) {\n      String[] strs = new String[k];\n      for (int i = 0; i < k; i++) strs[i] = \"ABABAB\";\n\n      TreeSet<String> ans = new TreeSet<>();\n      ans.add(\"ABABAB\");\n\n      LcsSolver solver = new LcsSolver(strs);\n      TreeSet<String> lcss = solver.getLongestCommonSubstrings(k);\n      assertThat(ans).isEqualTo(lcss);\n    }\n  }\n}\n"}
{"code_source": "package com.williamfiset.algorithms.graphtheory.treealgorithms;\n\nimport java.util.*;\n\npublic class LowestCommonAncestor {\n\n  public static class TreeNode {\n    // Number of nodes in the subtree. Computed when tree is built.\n    private int n;\n\n    private int id;\n    private TreeNode parent;\n    private List<TreeNode> children;\n\n    // Useful constructor for root node.\n    public TreeNode(int id) {\n      this(id, /*parent=*/ null);\n    }\n\n    public TreeNode(int id, TreeNode parent) {\n      this.id = id;\n      this.parent = parent;\n      children = new LinkedList<>();\n    }\n\n    public void addChildren(TreeNode... nodes) {\n      for (TreeNode node : nodes) {\n        children.add(node);\n      }\n    }\n\n    public void setSize(int n) {\n      this.n = n;\n    }\n\n    // Number of nodes in the subtree (including the node itself)\n    public int size() {\n      return n;\n    }\n\n    public int id() {\n      return id;\n    }\n\n    public TreeNode parent() {\n      return parent;\n    }\n\n    public List<TreeNode> children() {\n      return children;\n    }\n\n    public static TreeNode rootTree(List<List<Integer>> graph, int rootId) {\n      TreeNode root = new TreeNode(rootId);\n      return buildTree(graph, root);\n    }\n\n    // Do dfs to construct rooted tree.\n    private static TreeNode buildTree(List<List<Integer>> graph, TreeNode node) {\n      int subtreeNodeCount = 1;\n      for (int neighbor : graph.get(node.id())) {\n        // Ignore adding an edge pointing back to parent.\n        if (node.parent() != null && neighbor == node.parent().id()) {\n          continue;\n        }\n\n        TreeNode child = new TreeNode(neighbor, node);\n        node.addChildren(child);\n\n        buildTree(graph, child);\n        subtreeNodeCount += child.size();\n      }\n      node.setSize(subtreeNodeCount);\n      return node;\n    }\n\n    @Override\n    public String toString() {\n      return String.valueOf(id);\n    }\n  }\n\n  private TreeNode lcaNode = null;\n  private TreeNode root;\n\n  public LowestCommonAncestor(TreeNode root) {\n    this.root = root;\n  }\n\n  // Finds the lowest common ancestor of the nodes with id1 and id2.\n  public TreeNode lca(int id1, int id2) {\n    lcaNode = null;\n    helper(root, id1, id2);\n    return lcaNode;\n  }\n\n  private boolean helper(TreeNode node, int id1, int id2) {\n    if (node == null) {\n      return false;\n    }\n    int count = 0;\n    if (node.id() == id1) {\n      count++;\n    }\n    if (node.id() == id2) {\n      count++;\n    }\n    for (TreeNode child : node.children()) {\n      if (helper(child, id1, id2)) {\n        count++;\n      }\n    }\n    if (count == 2) {\n      lcaNode = node;\n    }\n    return count > 0;\n  }\n\n  /* Graph/Tree creation helper methods. */\n\n  // Create a graph as a adjacency list with 'n' nodes.\n  public static List<List<Integer>> createEmptyGraph(int n) {\n    List<List<Integer>> graph = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) graph.add(new LinkedList<>());\n    return graph;\n  }\n\n  public static void addUndirectedEdge(List<List<Integer>> graph, int from, int to) {\n    graph.get(from).add(to);\n    graph.get(to).add(from);\n  }\n\n  public static void main(String[] args) {\n    TreeNode root = createFirstTreeFromSlides();\n    LowestCommonAncestor solver = new LowestCommonAncestor(root);\n    System.out.println(solver.lca(10, 15).id());\n  }\n\n  private static TreeNode createFirstTreeFromSlides() {\n    int n = 17;\n    List<List<Integer>> tree = createEmptyGraph(n);\n\n    addUndirectedEdge(tree, 0, 1);\n    addUndirectedEdge(tree, 0, 2);\n    addUndirectedEdge(tree, 1, 3);\n    addUndirectedEdge(tree, 1, 4);\n    addUndirectedEdge(tree, 2, 5);\n    addUndirectedEdge(tree, 2, 6);\n    addUndirectedEdge(tree, 2, 7);\n    addUndirectedEdge(tree, 3, 8);\n    addUndirectedEdge(tree, 3, 9);\n    addUndirectedEdge(tree, 5, 10);\n    addUndirectedEdge(tree, 5, 11);\n    addUndirectedEdge(tree, 7, 12);\n    addUndirectedEdge(tree, 7, 13);\n    addUndirectedEdge(tree, 11, 14);\n    addUndirectedEdge(tree, 11, 15);\n    addUndirectedEdge(tree, 11, 16);\n\n    return TreeNode.rootTree(tree, 0);\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.graphtheory.treealgorithms;\n\nimport static com.google.common.truth.Truth.assertThat;\nimport static com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestor.addUndirectedEdge;\nimport static com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestor.createEmptyGraph;\n\nimport com.williamfiset.algorithms.graphtheory.treealgorithms.LowestCommonAncestor.TreeNode;\nimport java.util.*;\nimport org.junit.*;\n\npublic class LowestCommonAncestorTest {\n\n  private TreeNode createFirstTreeFromSlides() {\n    int n = 17;\n    List<List<Integer>> tree = createEmptyGraph(n);\n\n    addUndirectedEdge(tree, 0, 1);\n    addUndirectedEdge(tree, 0, 2);\n    addUndirectedEdge(tree, 1, 3);\n    addUndirectedEdge(tree, 1, 4);\n    addUndirectedEdge(tree, 2, 5);\n    addUndirectedEdge(tree, 2, 6);\n    addUndirectedEdge(tree, 2, 7);\n    addUndirectedEdge(tree, 3, 8);\n    addUndirectedEdge(tree, 3, 9);\n    addUndirectedEdge(tree, 5, 10);\n    addUndirectedEdge(tree, 5, 11);\n    addUndirectedEdge(tree, 7, 12);\n    addUndirectedEdge(tree, 7, 13);\n    addUndirectedEdge(tree, 11, 14);\n    addUndirectedEdge(tree, 11, 15);\n    addUndirectedEdge(tree, 11, 16);\n\n    return LowestCommonAncestor.TreeNode.rootTree(tree, 0);\n  }\n\n  @Test\n  public void testLcaTreeFromSlides1() {\n    TreeNode root = createFirstTreeFromSlides();\n    LowestCommonAncestor solver = new LowestCommonAncestor(root);\n    assertThat(solver.lca(14, 13).id()).isEqualTo(2);\n    assertThat(solver.lca(10, 16).id()).isEqualTo(5);\n    assertThat(solver.lca(9, 11).id()).isEqualTo(0);\n  }\n\n  @Test\n  public void testLcaTreeFromSlides2() {\n    TreeNode root = createFirstTreeFromSlides();\n    LowestCommonAncestor solver = new LowestCommonAncestor(root);\n    assertThat(solver.lca(8, 9).id()).isEqualTo(3);\n    assertThat(solver.lca(4, 8).id()).isEqualTo(1);\n    assertThat(solver.lca(6, 13).id()).isEqualTo(2);\n    assertThat(solver.lca(7, 13).id()).isEqualTo(7);\n    assertThat(solver.lca(10, 5).id()).isEqualTo(5);\n    assertThat(solver.lca(2, 16).id()).isEqualTo(2);\n  }\n\n  @Test\n  public void testLcaOfTheSameNodeIsItself() {\n    TreeNode root = createFirstTreeFromSlides();\n    LowestCommonAncestor solver = new LowestCommonAncestor(root);\n    // Try all nodes\n    for (int id = 0; id < root.size(); id++) {\n      assertThat(solver.lca(id, id).id()).isEqualTo(id);\n    }\n  }\n}\n"}
{"code_source": "/**\n * Implementation of finding the Lowest Common Ancestor (LCA) of a tree. This impl first finds an\n * Euler tour from the root node which visits all the nodes in the tree. The node height values\n * obtained from the Euler tour can then be used in combination with a sparse table to find the LCA\n * in O(1).\n *\n * <p>Time Complexity: O(1) queries, O(n*log2(n)) pre-processing.\n *\n * <p>Space Complexity: O(n*log2(n))\n *\n * <p>To run script:\n *\n * <p>./gradlew run -Palgorithm=graphtheory.treealgorithms.LowestCommonAncestorEulerTour\n *\n * @author William Fiset\n */\npackage com.williamfiset.algorithms.graphtheory.treealgorithms;\n\nimport java.util.*;\n\npublic class LowestCommonAncestorEulerTour {\n\n  public static void main(String[] args) {\n    TreeNode root = createFirstTreeFromSlides();\n    LowestCommonAncestorEulerTour solver = new LowestCommonAncestorEulerTour(root);\n\n    // LCA of 13 and 14 = 2\n    TreeNode lca = solver.lca(13, 14);\n    System.out.printf(\"LCA of 13 and 14 = %s\\n\", lca);\n    if (lca.index() != 2) {\n      System.out.println(\"Error, expected lca to be 2\");\n    }\n\n    // LCA of 9 and 11 = 0\n    lca = solver.lca(9, 11);\n    System.out.printf(\"LCA of 9 and 11 = %s\\n\", lca);\n    if (lca.index() != 0) {\n      System.out.println(\"Error, expected lca to be 0\");\n    }\n\n    // LCA of 12 and 12 = 12\n    lca = solver.lca(12, 12);\n    System.out.printf(\"LCA of 12 and 12 = %s\\n\", lca);\n    if (lca.index() != 12) {\n      System.out.println(\"Error, expected lca to be 12\");\n    }\n  }\n\n  private static TreeNode createFirstTreeFromSlides() {\n    int n = 17;\n    List<List<Integer>> tree = createEmptyGraph(n);\n\n    addUndirectedEdge(tree, 0, 1);\n    addUndirectedEdge(tree, 0, 2);\n    addUndirectedEdge(tree, 1, 3);\n    addUndirectedEdge(tree, 1, 4);\n    addUndirectedEdge(tree, 2, 5);\n    addUndirectedEdge(tree, 2, 6);\n    addUndirectedEdge(tree, 2, 7);\n    addUndirectedEdge(tree, 3, 8);\n    addUndirectedEdge(tree, 3, 9);\n    addUndirectedEdge(tree, 5, 10);\n    addUndirectedEdge(tree, 5, 11);\n    addUndirectedEdge(tree, 7, 12);\n    addUndirectedEdge(tree, 7, 13);\n    addUndirectedEdge(tree, 11, 14);\n    addUndirectedEdge(tree, 11, 15);\n    addUndirectedEdge(tree, 11, 16);\n\n    return TreeNode.rootTree(tree, 0);\n  }\n\n  /* Graph/Tree creation helper methods. */\n\n  // Create a graph as a adjacency list with 'n' nodes.\n  public static List<List<Integer>> createEmptyGraph(int n) {\n    List<List<Integer>> graph = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) graph.add(new LinkedList<>());\n    return graph;\n  }\n\n  public static void addUndirectedEdge(List<List<Integer>> graph, int from, int to) {\n    graph.get(from).add(to);\n    graph.get(to).add(from);\n  }\n\n  public static class TreeNode {\n    // Number of nodes in the subtree. Computed when tree is built.\n    private int n;\n\n    private int index;\n    private TreeNode parent;\n    private List<TreeNode> children;\n\n    // Useful constructor for root node.\n    public TreeNode(int index) {\n      this(index, /*parent=*/ null);\n    }\n\n    public TreeNode(int index, TreeNode parent) {\n      this.index = index;\n      this.parent = parent;\n      children = new LinkedList<>();\n    }\n\n    public void addChildren(TreeNode... nodes) {\n      for (TreeNode node : nodes) {\n        children.add(node);\n      }\n    }\n\n    public void setSize(int n) {\n      this.n = n;\n    }\n\n    // Number of nodes in the subtree (including the node itself)\n    public int size() {\n      return n;\n    }\n\n    public int index() {\n      return index;\n    }\n\n    public TreeNode parent() {\n      return parent;\n    }\n\n    public List<TreeNode> children() {\n      return children;\n    }\n\n    public static TreeNode rootTree(List<List<Integer>> graph, int rootId) {\n      TreeNode root = new TreeNode(rootId);\n      TreeNode rootedTree = buildTree(graph, root);\n      if (rootedTree.size() < graph.size()) {\n        System.out.println(\n            \"WARNING: Input graph malformed. Did you forget to include all n-1 edges?\");\n      }\n      return rootedTree;\n    }\n\n    // Do dfs to construct rooted tree.\n    private static TreeNode buildTree(List<List<Integer>> graph, TreeNode node) {\n      int subtreeNodeCount = 1;\n      for (int neighbor : graph.get(node.index())) {\n        // Ignore adding an edge pointing back to parent.\n        if (node.parent() != null && neighbor == node.parent().index()) {\n          continue;\n        }\n\n        TreeNode child = new TreeNode(neighbor, node);\n        node.addChildren(child);\n\n        buildTree(graph, child);\n        subtreeNodeCount += child.size();\n      }\n      node.setSize(subtreeNodeCount);\n      return node;\n    }\n\n    @Override\n    public String toString() {\n      return String.valueOf(index);\n    }\n  }\n\n  private final int n;\n\n  private int tourIndex = 0;\n\n  // Populated when constructing Euler Tour.\n  private long[] nodeDepth;\n  private TreeNode[] nodeOrder;\n\n  // The last occurrence mapping. This mapping keeps track of the last occurrence of a TreeNode in\n  // the Euler tour for easy indexing.\n  private int[] last;\n\n  // Sparse table impl which can efficiently do Range Minimum Queries (RMQs).\n  private MinSparseTable sparseTable;\n\n  public LowestCommonAncestorEulerTour(TreeNode root) {\n    this.n = root.size();\n    setup(root);\n  }\n\n  private void setup(TreeNode root) {\n    int eulerTourSize = 2 * n - 1;\n    nodeOrder = new TreeNode[eulerTourSize];\n    nodeDepth = new long[eulerTourSize];\n    last = new int[n];\n\n    // Do depth first search to construct Euler tour.\n    dfs(root, /*depth=*/ 0);\n\n    // Initialize and build sparse table on the `nodeDepth` array which will\n    // allow us to index into the `nodeOrder` array and return the LCA.\n    sparseTable = new MinSparseTable(nodeDepth);\n  }\n\n  // Construct Euler Tour by populating the `nodeDepth` and `nodeOrder` arrays.\n  private void dfs(TreeNode node, long depth) {\n    if (node == null) {\n      return;\n    }\n\n    visit(node, depth);\n    for (TreeNode child : node.children()) {\n      dfs(child, depth + 1);\n      visit(node, depth);\n    }\n  }\n\n  private void visit(TreeNode node, long depth) {\n    nodeOrder[tourIndex] = node;\n    nodeDepth[tourIndex] = depth;\n    last[node.index()] = tourIndex;\n    tourIndex++;\n  }\n\n  // Finds the lowest common ancestor of the nodes with `index1` and `index2`.\n  public TreeNode lca(int index1, int index2) {\n    int l = Math.min(last[index1], last[index2]);\n    int r = Math.max(last[index1], last[index2]);\n    int i = sparseTable.queryIndex(l, r);\n    return nodeOrder[i];\n  }\n\n  // Sparse table for efficient minimum range queries in O(1) with O(nlogn) space\n  private static class MinSparseTable {\n\n    // The number of elements in the original input array.\n    private int n;\n\n    // The maximum power of 2 needed. This value is floor(log2(n))\n    private int P;\n\n    // Fast log base 2 logarithm lookup table, 1 <= i <= n\n    private int[] log2;\n\n    // The sparse table values.\n    private long[][] dp;\n\n    // Index Table (IT) associated with the values in the sparse table.\n    private int[][] it;\n\n    public MinSparseTable(long[] values) {\n      init(values);\n    }\n\n    private void init(long[] v) {\n      n = v.length;\n      P = (int) (Math.log(n) / Math.log(2));\n      dp = new long[P + 1][n];\n      it = new int[P + 1][n];\n\n      for (int i = 0; i < n; i++) {\n        dp[0][i] = v[i];\n        it[0][i] = i;\n      }\n\n      log2 = new int[n + 1];\n      for (int i = 2; i <= n; i++) {\n        log2[i] = log2[i / 2] + 1;\n      }\n\n      // Build sparse table combining the values of the previous intervals.\n      for (int p = 1; p <= P; p++) {\n        for (int i = 0; i + (1 << p) <= n; i++) {\n          long leftInterval = dp[p - 1][i];\n          long rightInterval = dp[p - 1][i + (1 << (p - 1))];\n          dp[p][i] = Math.min(leftInterval, rightInterval);\n\n          // Propagate the index of the best value\n          if (leftInterval <= rightInterval) {\n            it[p][i] = it[p - 1][i];\n          } else {\n            it[p][i] = it[p - 1][i + (1 << (p - 1))];\n          }\n        }\n      }\n    }\n\n    // Returns the index of the minimum element in the range [l, r].\n    public int queryIndex(int l, int r) {\n      int len = r - l + 1;\n      int p = log2[r - l + 1];\n      long leftInterval = dp[p][l];\n      long rightInterval = dp[p][r - (1 << p) + 1];\n      if (leftInterval <= rightInterval) {\n        return it[p][l];\n      } else {\n        return it[p][r - (1 << p) + 1];\n      }\n    }\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.graphtheory.treealgorithms;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.*;\nimport org.junit.*;\n\npublic class LowestCommonAncestorEulerTourTest {\n\n  private LowestCommonAncestorEulerTour.TreeNode createFirstTreeFromSlides() {\n    int n = 17;\n    List<List<Integer>> tree = LowestCommonAncestorEulerTour.createEmptyGraph(n);\n\n    LowestCommonAncestorEulerTour.addUndirectedEdge(tree, 0, 1);\n    LowestCommonAncestorEulerTour.addUndirectedEdge(tree, 0, 2);\n    LowestCommonAncestorEulerTour.addUndirectedEdge(tree, 1, 3);\n    LowestCommonAncestorEulerTour.addUndirectedEdge(tree, 1, 4);\n    LowestCommonAncestorEulerTour.addUndirectedEdge(tree, 2, 5);\n    LowestCommonAncestorEulerTour.addUndirectedEdge(tree, 2, 6);\n    LowestCommonAncestorEulerTour.addUndirectedEdge(tree, 2, 7);\n    LowestCommonAncestorEulerTour.addUndirectedEdge(tree, 3, 8);\n    LowestCommonAncestorEulerTour.addUndirectedEdge(tree, 3, 9);\n    LowestCommonAncestorEulerTour.addUndirectedEdge(tree, 5, 10);\n    LowestCommonAncestorEulerTour.addUndirectedEdge(tree, 5, 11);\n    LowestCommonAncestorEulerTour.addUndirectedEdge(tree, 7, 12);\n    LowestCommonAncestorEulerTour.addUndirectedEdge(tree, 7, 13);\n    LowestCommonAncestorEulerTour.addUndirectedEdge(tree, 11, 14);\n    LowestCommonAncestorEulerTour.addUndirectedEdge(tree, 11, 15);\n    LowestCommonAncestorEulerTour.addUndirectedEdge(tree, 11, 16);\n\n    return LowestCommonAncestorEulerTour.TreeNode.rootTree(tree, 0);\n  }\n\n  @Test\n  public void testLcaTreeFromSlides1() {\n    LowestCommonAncestorEulerTour.TreeNode root = createFirstTreeFromSlides();\n    LowestCommonAncestorEulerTour fastSolver = new LowestCommonAncestorEulerTour(root);\n    assertThat(fastSolver.lca(14, 13).index()).isEqualTo(2);\n    assertThat(fastSolver.lca(10, 16).index()).isEqualTo(5);\n    assertThat(fastSolver.lca(9, 11).index()).isEqualTo(0);\n  }\n\n  @Test\n  public void testLcaTreeFromSlides2() {\n    LowestCommonAncestorEulerTour.TreeNode root = createFirstTreeFromSlides();\n    LowestCommonAncestorEulerTour fastSolver = new LowestCommonAncestorEulerTour(root);\n    assertThat(fastSolver.lca(8, 9).index()).isEqualTo(3);\n    assertThat(fastSolver.lca(4, 8).index()).isEqualTo(1);\n    assertThat(fastSolver.lca(6, 13).index()).isEqualTo(2);\n    assertThat(fastSolver.lca(7, 13).index()).isEqualTo(7);\n    assertThat(fastSolver.lca(10, 5).index()).isEqualTo(5);\n    assertThat(fastSolver.lca(2, 16).index()).isEqualTo(2);\n  }\n\n  @Test\n  public void testLcaOfTheSameNodeIsItself() {\n    LowestCommonAncestorEulerTour.TreeNode root = createFirstTreeFromSlides();\n    LowestCommonAncestorEulerTour fastSolver = new LowestCommonAncestorEulerTour(root);\n\n    // Try all nodes\n    for (int id = 0; id < root.size(); id++) {\n      assertThat(fastSolver.lca(id, id).index()).isEqualTo(id);\n    }\n  }\n\n  @Test\n  public void randomizedLcaQueriesVsOtherImpl() {\n    for (int n = 1; n < 1000; n++) {\n      List<List<Integer>> g = generateRandomTree(n);\n\n      LowestCommonAncestor.TreeNode root1 = LowestCommonAncestor.TreeNode.rootTree(g, 0);\n      LowestCommonAncestorEulerTour.TreeNode root2 =\n          LowestCommonAncestorEulerTour.TreeNode.rootTree(g, 0);\n\n      LowestCommonAncestor slowSolver = new LowestCommonAncestor(root1);\n      LowestCommonAncestorEulerTour fastSolver = new LowestCommonAncestorEulerTour(root2);\n\n      for (int i = 0; i < 100; i++) {\n        int l = (int) (Math.random() * n);\n        int r = (int) (Math.random() * n);\n        int L = Math.min(l, r);\n        int R = Math.max(l, r);\n\n        LowestCommonAncestor.TreeNode lca1 = slowSolver.lca(L, R);\n        LowestCommonAncestorEulerTour.TreeNode lca2 = fastSolver.lca(L, R);\n\n        assertThat(lca1).isNotNull();\n        assertThat(lca2).isNotNull();\n        assertThat(lca1.id()).isEqualTo(lca2.index());\n      }\n    }\n  }\n\n  public static List<List<Integer>> generateRandomTree(int n) {\n    List<Integer> nodes = new ArrayList<>();\n    nodes.add(0);\n\n    List<List<Integer>> g = LowestCommonAncestorEulerTour.createEmptyGraph(n);\n    for (int nextNode = 1; nodes.size() != n; nextNode++) {\n      int randomNode = nodes.get((int) (Math.random() * nodes.size()));\n      LowestCommonAncestorEulerTour.addUndirectedEdge(g, randomNode, nextNode);\n      nodes.add(nextNode);\n    }\n    return g;\n  }\n}\n"}
{"code_source": "/**\n * Run with: ./gradlew run -Palgorithm=datastructures.segmenttree.MaxQuerySumUpdateSegmentTree\n *\n * <p>Several thanks to cp-algorithms for their great article on segment trees:\n * https://cp-algorithms.com/data_structures/segment_tree.html\n *\n * <p>NOTE: This file is still a WIP\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.segmenttree;\n\npublic class MaxQuerySumUpdateSegmentTree {\n\n  // The number of elements in the original input values array.\n  private final int n;\n\n  // The segment tree represented as a binary tree of ranges where t[0] is the\n  // root node and the left and right children of node i are i*2+1 and i*2+2.\n  private Long[] t;\n\n  // The delta values associates with each segment. Used for lazy propagation\n  // when doing range updates.\n  private Long[] lazy;\n\n  private Long maxFunction(Long a, Long b) {\n    if (a == null && b == null) return null;\n    if (a == null) return b;\n    if (b == null) return a;\n    return Math.max(a, b);\n  }\n\n  private Long sumFunction(Long a, Long b) {\n    if (a == null) a = 0L;\n    if (b == null) b = 0L;\n    return a + b;\n  }\n\n  private Long minSegmentUpdateFn(long base, int tl, int tr, long x) {\n    return base + x;\n  }\n\n  public MaxQuerySumUpdateSegmentTree(long[] values) {\n    if (values == null) {\n      throw new IllegalArgumentException(\"Segment tree values cannot be null.\");\n    }\n    n = values.length;\n\n    // The size of the segment tree `t`\n    //\n    // TODO(william): Investigate to reduce this space. There are only 2n-1 segments, so we should\n    // be able to reduce the space, but may need to reorganize the tree/queries. One idea is to use\n    // the Eulerian tour structure of the tree to densely pack the segments.\n    int N = 4 * n;\n\n    t = new Long[N];\n    lazy = new Long[N];\n\n    buildSegmentTree(0, 0, n - 1, values);\n  }\n\n  /**\n   * Builds a segment tree by starting with the leaf nodes and combining segment values on callback.\n   *\n   * @param i the index of the segment in the segment tree\n   * @param tl the left index (inclusive) of the segment range\n   * @param tr the right index (inclusive) of the segment range\n   * @param values the initial values array\n   */\n  private void buildSegmentTree(int i, int tl, int tr, long[] values) {\n    if (tl == tr) {\n      t[i] = values[tl];\n      return;\n    }\n    int tm = (tl + tr) / 2;\n    buildSegmentTree(2 * i + 1, tl, tm, values);\n    buildSegmentTree(2 * i + 2, tm + 1, tr, values);\n\n    t[i] = maxFunction(t[2 * i + 1], t[2 * i + 2]);\n  }\n\n  /**\n   * Returns the query of the range [l, r] on the original `values` array (+ any updates made to it)\n   *\n   * @param l the left endpoint of the range query (inclusive)\n   * @param r the right endpoint of the range query (inclusive)\n   */\n  public Long rangeQuery1(int l, int r) {\n    return rangeQuery1(0, 0, n - 1, l, r);\n  }\n\n  /**\n   * Returns the range query value of the range [l, r]\n   *\n   * @param i the index of the current segment in the tree\n   * @param tl the left endpoint (inclusive) of the current segment\n   * @param tr the right endpoint (inclusive) of the current segment\n   * @param l the target left endpoint (inclusive) for the range query\n   * @param r the target right endpoint (inclusive) for the range query\n   */\n  private Long rangeQuery1(int i, int tl, int tr, int l, int r) {\n    if (l > r) {\n      return null;\n    }\n    propagate1(i, tl, tr);\n    if (tl == l && tr == r) {\n      return t[i];\n    }\n    int tm = (tl + tr) / 2;\n    // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n    // [l, r], simply recurse on both segments and let the base case return the\n    // default value for invalid intervals.\n    return maxFunction(\n        rangeQuery1(2 * i + 1, tl, tm, l, Math.min(tm, r)),\n        rangeQuery1(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r));\n  }\n\n  public void rangeUpdate1(int l, int r, long x) {\n    rangeUpdate1(0, 0, n - 1, l, r, x);\n  }\n\n  private void propagateLazy(int i, int tl, int tr, long delta) {\n    // Ignore leaf segments\n    if (tl == tr) return;\n    // TODO(william): should this also used the minSegmentUpdateFn\n    lazy[2 * i + 1] = sumFunction(lazy[2 * i + 1], delta);\n    lazy[2 * i + 2] = sumFunction(lazy[2 * i + 2], delta);\n  }\n\n  private void propagate1(int i, int tl, int tr) {\n    // Check for default value because you don't want to assign to the lazy\n    // value if it's the default value.\n    if (lazy[i] != null) {\n      // The minimum value increases by the delta over the whole range.\n      t[i] = minSegmentUpdateFn(t[i], /*unused*/ 0, /*unused*/ 0, lazy[i]);\n      // Push delta to left/right segments for non-leaf nodes\n      propagateLazy(i, tl, tr, lazy[i]);\n      lazy[i] = null;\n    }\n  }\n\n  private void rangeUpdate1(int i, int tl, int tr, int l, int r, long x) {\n    propagate1(i, tl, tr);\n    if (l > r) {\n      return;\n    }\n\n    if (tl == l && tr == r) {\n      t[i] = minSegmentUpdateFn(t[i], /*unused*/ 0, /*unused*/ 0, x);\n      propagateLazy(i, tl, tr, x);\n      // TODO(william): confirm if this is needed if we already propagated?\n      lazy[i] = null;\n    } else {\n      int tm = (tl + tr) / 2;\n      // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n      // [l, r], simply recurse on both segments and let the base case disregard\n      // invalid intervals.\n      rangeUpdate1(2 * i + 1, tl, tm, l, Math.min(tm, r), x);\n      rangeUpdate1(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r, x);\n\n      t[i] = maxFunction(t[2 * i + 1], t[2 * i + 2]);\n    }\n  }\n\n  public void printDebugInfo() {\n    printDebugInfo(0, 0, n - 1);\n    System.out.println();\n  }\n\n  private void printDebugInfo(int i, int tl, int tr) {\n    System.out.printf(\"[%d, %d], t[i] = %d, lazy[i] = %d\\n\", tl, tr, t[i], lazy[i]);\n    if (tl == tr) {\n      return;\n    }\n    int tm = (tl + tr) / 2;\n    printDebugInfo(2 * i + 1, tl, tm);\n    printDebugInfo(2 * i + 2, tm + 1, tr);\n  }\n\n  ////////////////////////////////////////////////////\n  //              Example usage:                    //\n  ////////////////////////////////////////////////////\n\n  public static void main(String[] args) {\n    //          0, 1, 2, 3,  4\n    long[] v = {2, 1, 3, 4, -1};\n    MaxQuerySumUpdateSegmentTree st = new MaxQuerySumUpdateSegmentTree(v);\n  }\n}\n", "test_case": "/**\n * gradle test --info --tests\n * \"com.williamfiset.algorithms.datastructures.segmenttree.MaxQuerySumUpdateSegmentTreeTest\"\n */\npackage com.williamfiset.algorithms.datastructures.segmenttree;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.williamfiset.algorithms.utils.TestUtils;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class MaxQuerySumUpdateSegmentTreeTest {\n\n  static int ITERATIONS = 1000;\n\n  @Before\n  public void setup() {}\n\n  @Test\n  public void simpleTest() {\n    long[] ar = {2, 1, 3, 4, -1};\n    MaxQuerySumUpdateSegmentTree st = new MaxQuerySumUpdateSegmentTree(ar);\n\n    st.rangeUpdate1(0, 4, 1);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(5);\n    assertThat(st.rangeQuery1(0, 1)).isEqualTo(3);\n    assertThat(st.rangeQuery1(1, 2)).isEqualTo(4);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(5);\n\n    st.rangeUpdate1(3, 4, 4);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(9);\n    assertThat(st.rangeQuery1(0, 1)).isEqualTo(3);\n    assertThat(st.rangeQuery1(3, 4)).isEqualTo(9);\n    assertThat(st.rangeQuery1(1, 1)).isEqualTo(2);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(4);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(9);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(9);\n    assertThat(st.rangeQuery1(2, 3)).isEqualTo(9);\n    assertThat(st.rangeQuery1(1, 2)).isEqualTo(4);\n\n    st.rangeUpdate1(1, 3, 3);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(12);\n    assertThat(st.rangeQuery1(0, 2)).isEqualTo(7);\n    assertThat(st.rangeQuery1(2, 4)).isEqualTo(12);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(12);\n    assertThat(st.rangeQuery1(0, 0)).isEqualTo(3);\n    assertThat(st.rangeQuery1(1, 1)).isEqualTo(5);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(7);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(12);\n    assertThat(st.rangeQuery1(4, 4)).isEqualTo(4);\n  }\n\n  @Test\n  public void testRandomRangeSumUpdatesWithSumRangeQueries() {\n    for (int n = 5; n < ITERATIONS; n++) {\n      long[] ar = TestUtils.randomLongArray(n, -100, +100);\n      MaxQuerySumUpdateSegmentTree st = new MaxQuerySumUpdateSegmentTree(ar);\n\n      for (int i = 0; i < n; i++) {\n        // System.out.printf(\"n = %d, i = %d\\n\", n, i);\n        int j = TestUtils.randValue(0, n - 1);\n        int k = TestUtils.randValue(0, n - 1);\n        int i1 = Math.min(j, k);\n        int i2 = Math.max(j, k);\n\n        j = TestUtils.randValue(0, n - 1);\n        k = TestUtils.randValue(0, n - 1);\n        int i3 = Math.min(j, k);\n        int i4 = Math.max(j, k);\n\n        // Range update\n        long randValue = TestUtils.randValue(-10, 10);\n        // System.out.printf(\"UPDATE [%d, %d] with %d\\n\", i3, i4, randValue);\n        bruteForceSumRangeUpdate(ar, i3, i4, randValue);\n        st.rangeUpdate1(i3, i4, randValue);\n\n        // Range query\n        long bfMax = bruteForceMax(ar, i1, i2);\n        long segTreeMax = st.rangeQuery1(i1, i2);\n        // System.out.printf(\"QUERY [%d, %d], want = %d, got = %d\\n\", i1, i2, bfMax, segTreeMax);\n        assertThat(bfMax).isEqualTo(segTreeMax);\n      }\n    }\n  }\n\n  // Finds the sum in an array between [l, r] in the `values` array\n  private static long bruteForceSum(long[] values, int l, int r) {\n    long s = 0;\n    for (int i = l; i <= r; i++) {\n      s += values[i];\n    }\n    return s;\n  }\n\n  // Finds the min value in an array between [l, r] in the `values` array\n  private static long bruteForceMin(long[] values, int l, int r) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) {\n      m = Math.min(m, values[i]);\n    }\n    return m;\n  }\n\n  // Finds the max value in an array between [l, r] in the `values` array\n  private static long bruteForceMax(long[] values, int l, int r) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) {\n      m = Math.max(m, values[i]);\n    }\n    return m;\n  }\n\n  private static void bruteForceSumRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] += x;\n    }\n  }\n\n  private static void bruteForceMulRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] *= x;\n    }\n  }\n\n  private static void bruteForceAssignRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] = x;\n    }\n  }\n}\n"}
{"code_source": "/**\n * A generic implementation of a D-ary heap inspired by the work of David Brink.\n *\n * @author David Brink, William Fiset\n */\npackage com.williamfiset.algorithms.datastructures.priorityqueue;\n\n@SuppressWarnings(\"unchecked\")\npublic class MinDHeap<T extends Comparable<T>> {\n\n  private T[] heap;\n  private int d, n, sz;\n  private int[] child, parent;\n\n  // Initializes a D-ary heap with a maximum capacity of n\n  public MinDHeap(int degree, int maxNodes) {\n    d = Math.max(2, degree);\n    n = Math.max(d, maxNodes);\n\n    heap = (T[]) new Comparable[n];\n    child = new int[n];\n    parent = new int[n];\n    for (int i = 0; i < n; i++) {\n      parent[i] = (i - 1) / d;\n      child[i] = i * d + 1;\n    }\n  }\n\n  // Returns the number of elements currently present inside the PQ\n  public int size() {\n    return sz;\n  }\n\n  // Returns true/false depending on whether the PQ is empty\n  public boolean isEmpty() {\n    return sz == 0;\n  }\n\n  // Clears all the elements inside the PQ\n  public void clear() {\n    java.util.Arrays.fill(heap, null);\n    sz = 0;\n  }\n\n  // Returns the element at the top of the PQ or null if the PQ is empty\n  public T peek() {\n    if (isEmpty()) return null;\n    return heap[0];\n  }\n\n  // Polls an element from the priority queue.\n  // Make sure the queue is not empty before calling.\n  public T poll() {\n    if (isEmpty()) return null;\n    T root = heap[0];\n    heap[0] = heap[--sz];\n    heap[sz] = null;\n    sink(0);\n    return root;\n  }\n\n  // Adds a none null element to the priority queue\n  public void add(T elem) {\n    if (elem == null) throw new IllegalArgumentException(\"No null elements please :)\");\n    heap[sz] = elem;\n    swim(sz);\n    sz++;\n  }\n\n  private void sink(int i) {\n    for (int j = minChild(i); j != -1; ) {\n      swap(i, j);\n      i = j;\n      j = minChild(i);\n    }\n  }\n\n  private void swim(int i) {\n    while (less(i, parent[i])) {\n      swap(i, parent[i]);\n      i = parent[i];\n    }\n  }\n\n  // From the parent node at index i find the minimum child below it\n  private int minChild(int i) {\n    int index = -1, from = child[i], to = Math.min(sz, from + d);\n    for (int j = from; j < to; j++) if (less(j, i)) index = i = j;\n    return index;\n  }\n\n  private boolean less(int i, int j) {\n    return heap[i].compareTo(heap[j]) < 0;\n  }\n\n  private void swap(int i, int j) {\n    T tmp = heap[i];\n    heap[i] = heap[j];\n    heap[j] = tmp;\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.priorityqueue;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.PriorityQueue;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class MinDHeapTest {\n\n  static final int LOOPS = 1000;\n  static final int MAX_SZ = 100;\n\n  @Before\n  public void setup() {}\n\n  @Test\n  public void testEmpty() {\n    MinDHeap<Integer> q = new MinDHeap<>(4, 0);\n    assertThat(q.size()).isEqualTo(0);\n    assertThat(q.isEmpty()).isTrue();\n    assertThat(q.poll()).isNull();\n    assertThat(q.peek()).isNull();\n  }\n\n  @Test\n  public void testHeapProperty() {\n\n    MinDHeap<Integer> q = new MinDHeap<>(3, 30);\n    Integer[] nums = {3, 2, 5, 6, 7, 9, 4, 8, 1};\n\n    // Try manually creating heap\n    for (int n : nums) q.add(n);\n    for (int i = 1; i <= 9; i++) assertThat(q.poll()).isEqualTo(i);\n  }\n\n  @Test\n  public void testPriorityQueueSizeParam() {\n    for (int i = 1; i < LOOPS; i++) {\n\n      Integer[] lst = genRandArray(i);\n\n      MinDHeap<Integer> pq = new MinDHeap<>(i, lst.length);\n      PriorityQueue<Integer> pq2 = new PriorityQueue<>(i);\n\n      for (int x : lst) {\n        pq2.add(x);\n        pq.add(x);\n      }\n      while (!pq2.isEmpty()) assertThat(pq.poll()).isEqualTo(pq2.poll());\n    }\n  }\n\n  @Test\n  public void testPriorityRandomOperations() {\n    for (int loop = 0; loop < LOOPS; loop++) {\n\n      double p1 = Math.random();\n      double p2 = Math.random();\n      if (p2 < p1) {\n        double tmp = p1;\n        p1 = p2;\n        p2 = tmp;\n      }\n\n      Integer[] ar = genRandArray(LOOPS);\n      int d = 2 + (int) (Math.random() * 6);\n      MinDHeap<Integer> pq = new MinDHeap<>(d, LOOPS);\n      PriorityQueue<Integer> pq2 = new PriorityQueue<>(LOOPS);\n\n      for (int i = 0; i < LOOPS; i++) {\n        int e = ar[i];\n        double r = Math.random();\n        if (0 <= r && r <= p1) {\n          pq.add(e);\n          pq2.add(e);\n        } else if (p1 < r && r <= p2) {\n          if (!pq2.isEmpty()) assertThat(pq.poll()).isEqualTo(pq2.poll());\n        } else {\n          pq.clear();\n          pq2.clear();\n        }\n      }\n\n      assertThat(pq.peek()).isEqualTo(pq2.peek());\n    }\n  }\n\n  @Test\n  public void testClear() {\n    String[] strs = {\"aa\", \"bb\", \"cc\", \"dd\", \"ee\"};\n    MinDHeap<String> q = new MinDHeap<>(2, strs.length);\n    for (String s : strs) q.add(s);\n    q.clear();\n    assertThat(q.size()).isEqualTo(0);\n    assertThat(q.isEmpty()).isTrue();\n  }\n\n  /*\n  @Test\n  public void testContainmentRandomized() {\n\n    for (int i = 0; i < LOOPS; i++) {\n\n      List <Integer> randNums = genRandList(100);\n      PriorityQueue <Integer> PQ = new PriorityQueue<>();\n      PQueue <Integer> pq = new PQueue<>();\n      for (int j = 0; j < randNums.size(); j++) {\n        pq.add(randNums.get(j));\n        PQ.add(randNums.get(j));\n      }\n\n      for (int j = 0; j < randNums.size(); j++) {\n\n        int randVal = randNums.get(j);\n        assertThat( pq.contains(randVal)).isEqualTo(PQ.contains(randVal) );\n        pq.remove(randVal); PQ.remove(randVal);\n        assertThat( pq.contains(randVal)).isEqualTo(PQ.contains(randVal) );\n\n      }\n\n    }\n\n  }\n\n  public void sequentialRemoving(Integer[] in, Integer[] removeOrder) {\n\n    assertThat(in.length, removeOrder.length);\n\n    PQueue <Integer> pq = new PQueue<>(in);\n    PriorityQueue <Integer> PQ = new PriorityQueue<>();\n    for (int value : in) PQ.offer(value);\n\n    assertThat(pq.isMinHeap(0)).isTrue();\n\n    for (int i = 0; i < removeOrder.length; i++) {\n\n      int elem = removeOrder[i];\n\n      assertThat(pq.peek()).isEqualTo(PQ.peek());\n      assertThat( pq.remove(elem)).isEqualTo(PQ.remove(elem));\n      assertThat(pq.size()).isEqualTo(PQ.size());\n      assertThat(pq.isMinHeap(0)).isTrue();\n\n    }\n\n    assertThat(pq.isEmpty()).isTrue();\n\n  }\n\n  @Test\n  public void testRemoving() {\n\n    Integer [] in = {1,2,3,4,5,6,7};\n    Integer [] removeOrder = { 1,3,6,4,5,7,2 };\n    sequentialRemoving(in, removeOrder);\n\n    in = new Integer[] {1,2,3,4,5,6,7,8,9,10,11};\n    removeOrder = new Integer[] {7,4,6,10,2,5,11,3,1,8,9};\n    sequentialRemoving(in, removeOrder);\n\n    in = new Integer[] {8, 1, 3, 3, 5, 3};\n    removeOrder = new Integer[] {3,3,5,8,1,3};\n    sequentialRemoving(in, removeOrder);\n\n    in = new Integer[] {7, 7, 3, 1, 1, 2};\n    removeOrder = new Integer[] {2, 7, 1, 3, 7, 1};\n    sequentialRemoving(in, removeOrder);\n\n    in = new Integer[] {32, 66, 93, 42, 41, 91, 54, 64, 9, 35};\n    removeOrder = new Integer[] {64, 93, 54, 41, 35, 9, 66, 42, 32, 91};\n    sequentialRemoving(in, removeOrder);\n\n  }\n  */\n\n  @Test\n  public void testRemovingDuplicates() {\n\n    Integer[] in = new Integer[] {2, 7, 2, 11, 7, 13, 2};\n    MinDHeap<Integer> pq = new MinDHeap<>(3, in.length + 1);\n\n    for (Integer x : in) pq.add(x);\n    assertThat(pq.peek()).isEqualTo(2);\n    pq.add(3);\n\n    assertThat(pq.poll()).isEqualTo(2);\n    assertThat(pq.poll()).isEqualTo(2);\n    assertThat(pq.poll()).isEqualTo(2);\n    assertThat(pq.poll()).isEqualTo(3);\n    assertThat(pq.poll()).isEqualTo(7);\n    assertThat(pq.poll()).isEqualTo(7);\n    assertThat(pq.poll()).isEqualTo(11);\n    assertThat(pq.poll()).isEqualTo(13);\n  }\n  /*\n  @Test\n  public void testRandomizedPolling() {\n\n    for (int i = 0; i < LOOPS; i++) {\n\n      int sz = i;\n      List <Integer> randNums = genRandList(sz);\n      PriorityQueue <Integer> pq1 = new PriorityQueue<>();\n      PQueue <Integer> pq2 = new PQueue<>();\n\n      // Add all the elements to both priority queues\n      for (Integer value : randNums) {\n        pq1.offer(value);\n        pq2.add(value);\n      }\n\n      while( !pq1.isEmpty() ) {\n\n        assertThat(pq2.isMinHeap(0)).isTrue();\n        assertThat(pq1.size()).isEqualTo(pq2.size());\n        assertThat(pq1.peek()).isEqualTo(pq2.peek());\n        assertThat(pq1.contains(pq1.peek())).isEqualTo(pq2.contains(pq2.peek()));\n\n        Integer v1 = pq1.poll();\n        Integer v2 = pq2.poll();\n\n        assertThat(v1).isEqualTo(v2);\n        assertThat(pq1.peek()).isEqualTo(pq2.peek());\n        assertThat(pq1.size()).isEqualTo(pq2.size());\n        assertThat(pq2.isMinHeap(0)).isTrue();\n\n      }\n\n    }\n\n  }\n\n  @Test\n  public void testRandomizedRemoving() {\n\n    for (int i = 0; i < LOOPS; i++) {\n\n      int sz = i;\n      List <Integer> randNums = genRandList(sz);\n      PriorityQueue <Integer> pq1 = new PriorityQueue<>();\n      PQueue <Integer> pq2 = new PQueue<>();\n\n      // Add all the elements to both priority queues\n      for (Integer value : randNums) {\n        pq1.offer(value);\n        pq2.add(value);\n      }\n\n      Collections.shuffle(randNums);\n      int index = 0;\n\n      while( !pq1.isEmpty() ) {\n\n        int removeNum = randNums.get(index++);\n\n        assertThat(pq2.isMinHeap(0)).isTrue();\n        assertThat( pq1.size()).isEqualTo(pq2.size());\n        assertThat( pq1.peek()).isEqualTo(pq2.peek());\n        pq1.remove(removeNum); pq2.remove(removeNum);\n        assertThat( pq1.peek()).isEqualTo(pq2.peek());\n        assertThat( pq1.size()).isEqualTo(pq2.size());\n        assertThat(pq2.isMinHeap(0)).isTrue();\n\n      }\n\n    }\n\n  }\n\n  @Test\n  public void testPQReusability() {\n\n    List <Integer> SZs = genUniqueRandList(LOOPS);\n\n    PriorityQueue <Integer> PQ = new PriorityQueue<>();\n    PQueue <Integer> pq = new PQueue<>();\n\n    for (int sz : SZs) {\n\n      pq.clear();\n      PQ.clear();\n\n      List <Integer> nums = genRandList(sz);\n      for (int n : nums) {\n        pq.add(n);\n        PQ.add(n);\n      }\n\n      Collections.shuffle(nums);\n\n      for (int i = 0; i < sz/2; i++) {\n\n        // Sometimes add a new number into the Pqueue\n        if (0.25 < Math.random()) {\n          int randNum = (int) (Math.random() * 10000);\n          PQ.add(randNum);\n          pq.add(randNum);\n        }\n\n        int removeNum = nums.get(i);\n\n        assertThat(pq.isMinHeap(0)).isTrue();\n        assertThat( PQ.size()).isEqualTo(pq.size());\n        assertThat( PQ.peek().isEqualTo(pq.peek());\n\n        PQ.remove(removeNum);\n        pq.remove(removeNum);\n\n        assertThat( PQ.peek().isEqualTo(pq.peek());\n        assertThat( PQ.size().isEqualTo(pq.size());\n        assertThat(pq.isMinHeap(0)).isTrue();\n\n      }\n\n    }\n\n  }\n  */\n\n  static Integer[] genRandArray(int sz) {\n    Integer[] lst = new Integer[sz];\n    for (int i = 0; i < sz; i++) lst[i] = (int) (Math.random() * MAX_SZ);\n    return lst;\n  }\n\n  // Generate a list of random numbers\n  static List<Integer> genRandList(int sz) {\n    List<Integer> lst = new ArrayList<>(sz);\n    for (int i = 0; i < sz; i++) lst.add((int) (Math.random() * MAX_SZ));\n    return lst;\n  }\n\n  // Generate a list of unique random numbers\n  static List<Integer> genUniqueRandList(int sz) {\n    List<Integer> lst = new ArrayList<>(sz);\n    for (int i = 0; i < sz; i++) lst.add(i);\n    Collections.shuffle(lst);\n    return lst;\n  }\n}\n"}
{"code_source": "/**\n * This file shows you how to find the minimum cost convex polygon triangulation of a set of points.\n * Points must be in either clockwise or counterclockwise order.\n *\n * <p>Time Complexity: O(n^3)\n *\n * @author Bryan Bowles\n */\npackage com.williamfiset.algorithms.geometry;\n\nimport java.awt.geom.Point2D;\n\n// Problem explanation: https://www.geeksforgeeks.org/minimum-cost-polygon-triangulation/\npublic class MinimumCostConvexPolygonTriangulation {\n\n  // Returns the perimeter (cost) of the triangle\n  private static double cost(Point2D i, Point2D j, Point2D k) {\n    return i.distance(j) + i.distance(k) + j.distance(k);\n  }\n\n  // Input must be a convex polygon with points in CW or CCW order.\n  public static double minimumCostTriangulation(Point2D[] polygon) {\n    int len = polygon.length;\n    if (len < 3) return 0;\n\n    double[][] dp = new double[len][len];\n    for (int i = 2; i < len; i++) {\n      for (int j = 0; j + i < len; j++) {\n        dp[j][j + i] = Integer.MAX_VALUE;\n        for (int k = j + 1; k < j + i; k++) {\n          dp[j][j + i] =\n              Math.min(\n                  dp[j][j + i],\n                  dp[j][k] + dp[k][j + i] + cost(polygon[j], polygon[j + i], polygon[k]));\n        }\n      }\n    }\n    return dp[0][len - 1];\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.geometry;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.awt.geom.*;\nimport org.junit.*;\n\npublic class MinimumCostConvexPolygonTriangulationTest {\n\n  private static final double TOLERANCE = 1e-3;\n\n  @Test\n  public void MinimumCostConvexPolygonTriangulationBasicTest() {\n    Point2D[] pts = new Point2D[5];\n\n    pts[0] = new Point2D.Double(0, 0);\n    pts[1] = new Point2D.Double(1, 0);\n    pts[2] = new Point2D.Double(2, 1);\n    pts[3] = new Point2D.Double(1, 2);\n    pts[4] = new Point2D.Double(0, 2);\n\n    double cost = MinimumCostConvexPolygonTriangulation.minimumCostTriangulation(pts);\n    assertThat(cost).isWithin(TOLERANCE).of(15.3);\n  }\n\n  @Test\n  public void MinimumCostConvexPolygonTriangulationInvalidTest() {\n    Point2D[] pts = new Point2D[2];\n\n    pts[0] = new Point2D.Double(0, 0);\n    pts[1] = new Point2D.Double(1, 0);\n\n    double cost = MinimumCostConvexPolygonTriangulation.minimumCostTriangulation(pts);\n    assertThat(cost).isEqualTo(0);\n  }\n\n  @Test\n  public void MinimumCostConvexPolygonTriangulationConvex() {\n    Point2D[] pts = new Point2D[6];\n\n    pts[0] = new Point2D.Double(0, 0);\n    pts[1] = new Point2D.Double(4, 0);\n    pts[2] = new Point2D.Double(4, 2);\n    pts[3] = new Point2D.Double(1, 3);\n    pts[4] = new Point2D.Double(0, 2);\n    pts[5] = new Point2D.Double(0, 1);\n\n    double cost = MinimumCostConvexPolygonTriangulation.minimumCostTriangulation(pts);\n    assertThat(cost).isWithin(TOLERANCE).of(31.386);\n  }\n}\n"}
{"code_source": "/**\n * An implementation of an indexed binary heap priority queue.\n *\n * <p>This implementation supports arbitrary keys with comparable values. To use arbitrary keys\n * (such as strings or objects) first map all your keys to the integer domain [0, N) where N is the\n * number of keys you have and then use the mapping with this indexed priority queue.\n *\n * <p>As convention, I denote 'ki' as the index value in the domain [0, N) associated with key k,\n * therefore: ki = map[k]\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.priorityqueue;\n\npublic class MinIndexedBinaryHeap<T extends Comparable<T>> extends MinIndexedDHeap<T> {\n  public MinIndexedBinaryHeap(int maxSize) {\n    super(2, maxSize);\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.priorityqueue;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.PriorityQueue;\nimport java.util.Random;\nimport org.junit.*;\n\npublic class MinIndexedBinaryHeapTest {\n\n  @Before\n  public void setup() {}\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testIllegalSizeOfNegativeOne() {\n    new MinIndexedBinaryHeap<String>(-1);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testIllegalSizeOfZero() {\n    new MinIndexedBinaryHeap<String>(0);\n  }\n\n  @Test\n  public void testLegalSize() {\n    new MinIndexedBinaryHeap<String>(1);\n  }\n\n  @Test\n  public void testContainsValidKey() {\n    MinIndexedBinaryHeap<String> pq = new MinIndexedBinaryHeap<String>(10);\n    pq.insert(5, \"abcdef\");\n    assertThat(pq.contains(5)).isTrue();\n  }\n\n  @Test\n  public void testContainsInvalidKey() {\n    MinIndexedBinaryHeap<String> pq = new MinIndexedBinaryHeap<String>(10);\n    pq.insert(5, \"abcdef\");\n    assertThat(pq.contains(3)).isFalse();\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testDuplicateKeys() {\n    MinIndexedBinaryHeap<String> pq = new MinIndexedBinaryHeap<String>(10);\n    pq.insert(5, \"abcdef\");\n    pq.insert(5, \"xyz\");\n  }\n\n  @Test\n  public void testUpdateKeyValue() {\n    MinIndexedBinaryHeap<String> pq = new MinIndexedBinaryHeap<String>(10);\n    pq.insert(5, \"abcdef\");\n    pq.update(5, \"xyz\");\n    assertThat(pq.valueOf(5)).isEqualTo(\"xyz\");\n  }\n\n  @Test\n  public void testTestDecreaseKey() {\n    MinIndexedBinaryHeap<Integer> pq = new MinIndexedBinaryHeap<Integer>(10);\n    pq.insert(3, 5);\n    pq.decrease(3, 4);\n    assertThat(pq.valueOf(3)).isEqualTo(4);\n  }\n\n  @Test\n  public void testTestDecreaseKeyNoUpdate() {\n    MinIndexedBinaryHeap<Integer> pq = new MinIndexedBinaryHeap<Integer>(10);\n    pq.insert(3, 5);\n    pq.decrease(3, 6);\n    assertThat(pq.valueOf(3)).isEqualTo(5);\n  }\n\n  @Test\n  public void testTestIncreaseKey() {\n    MinIndexedBinaryHeap<Integer> pq = new MinIndexedBinaryHeap<Integer>(10);\n    pq.insert(3, 5);\n    pq.increase(3, 6);\n    assertThat(pq.valueOf(3)).isEqualTo(6);\n  }\n\n  @Test\n  public void testTestIncreaseKeyNoUpdate() {\n    MinIndexedBinaryHeap<Integer> pq = new MinIndexedBinaryHeap<Integer>(10);\n    pq.insert(3, 5);\n    pq.increase(3, 4);\n    assertThat(pq.valueOf(3)).isEqualTo(5);\n  }\n\n  @Test\n  public void testPeekAndPollMinIndex() {\n    // pairs[i][0] is the index\n    // pairs[i][1] is the value\n    Integer[][] pairs = {\n      {4, 1},\n      {7, 5},\n      {1, 6},\n      {5, 8},\n      {3, 7},\n      {6, 9},\n      {8, 0},\n      {2, 4},\n      {9, 3},\n      {0, 2}\n    };\n    sortPairsByValue(pairs);\n\n    int n = pairs.length;\n    MinIndexedBinaryHeap<Integer> pq = new MinIndexedBinaryHeap<Integer>(n);\n    for (int i = 0; i < n; i++) pq.insert(pairs[i][0], pairs[i][1]);\n\n    Integer minIndex;\n    for (int i = 0; i < n; i++) {\n      minIndex = pq.peekMinKeyIndex();\n      assertThat(minIndex).isEqualTo(pairs[i][0]);\n      minIndex = pq.pollMinKeyIndex();\n      assertThat(minIndex).isEqualTo(pairs[i][0]);\n    }\n  }\n\n  @Test\n  public void testPeekAndPollMinValue() {\n    // pairs[i][0] is the index\n    // pairs[i][1] is the value\n    Integer[][] pairs = {\n      {4, 1},\n      {7, 5},\n      {1, 6},\n      {5, 8},\n      {3, 7},\n      {6, 9},\n      {8, 0},\n      {2, 4},\n      {9, 3},\n      {0, 2}\n    };\n    sortPairsByValue(pairs);\n\n    int n = pairs.length;\n    MinIndexedBinaryHeap<Integer> pq = new MinIndexedBinaryHeap<Integer>(n);\n    for (int i = 0; i < n; i++) pq.insert(pairs[i][0], pairs[i][1]);\n\n    Integer minValue;\n    for (int i = 0; i < n; i++) {\n      assertThat(pq.valueOf(pairs[i][0])).isEqualTo(pairs[i][1]);\n      minValue = pq.peekMinValue();\n      assertThat(minValue).isEqualTo(pairs[i][1]);\n      minValue = pq.pollMinValue();\n      assertThat(minValue).isEqualTo(pairs[i][1]);\n    }\n  }\n\n  @Test\n  public void testInsertionAndValueOf() {\n    String[] names = {\"jackie\", \"wilson\", \"catherine\", \"jason\", \"bobby\", \"sia\"};\n    MinIndexedBinaryHeap<String> pq = new MinIndexedBinaryHeap<String>(names.length);\n    for (int i = 0; i < names.length; i++) pq.insert(i, names[i]);\n    for (int i = 0; i < names.length; i++) assertThat(pq.valueOf(i)).isEqualTo(names[i]);\n  }\n\n  @Test\n  public void testOperations() {\n    int n = 7;\n    MinIndexedBinaryHeap<Integer> pq = new MinIndexedBinaryHeap<Integer>(n);\n\n    pq.insert(4, 4);\n    assertThat(pq.contains(4)).isTrue();\n    assertThat(pq.peekMinValue()).isEqualTo(4);\n    assertThat(pq.peekMinKeyIndex()).isEqualTo(4);\n    pq.update(4, 8);\n    assertThat(pq.peekMinValue()).isEqualTo(8);\n    assertThat(pq.pollMinKeyIndex()).isEqualTo(4);\n    assertThat(pq.contains(4)).isFalse();\n    pq.insert(3, 99);\n    pq.insert(1, 101);\n    pq.insert(2, 60);\n    assertThat(pq.peekMinValue()).isEqualTo(60);\n    assertThat(pq.peekMinKeyIndex()).isEqualTo(2);\n    pq.increase(2, 150);\n    assertThat(pq.peekMinValue()).isEqualTo(99);\n    assertThat(pq.peekMinKeyIndex()).isEqualTo(3);\n    pq.increase(3, 250);\n    assertThat(pq.peekMinValue()).isEqualTo(101);\n    assertThat(pq.peekMinKeyIndex()).isEqualTo(1);\n    pq.decrease(3, -500);\n    assertThat(pq.peekMinValue()).isEqualTo(-500);\n    assertThat(pq.peekMinKeyIndex()).isEqualTo(3);\n    assertThat(pq.contains(3)).isTrue();\n    pq.delete(3);\n    assertThat(pq.contains(3)).isFalse();\n    assertThat(pq.peekMinValue()).isEqualTo(101);\n    assertThat(pq.peekMinKeyIndex()).isEqualTo(1);\n    assertThat(pq.valueOf(1)).isEqualTo(101);\n  }\n\n  @Test\n  public void testRandomInsertionsAndPolls() {\n    for (int n = 1; n < 1500; n++) {\n      int bound = 100000;\n      int[] randomValues = genRandArray(n, -bound, +bound);\n      MinIndexedBinaryHeap<Integer> pq1 = new MinIndexedBinaryHeap<Integer>(n);\n      PriorityQueue<Integer> pq2 = new PriorityQueue<Integer>(n);\n\n      final double p = Math.random();\n\n      for (int i = 0; i < n; i++) {\n        pq1.insert(i, randomValues[i]);\n        pq2.add(randomValues[i]);\n\n        if (Math.random() < p) {\n          if (!pq2.isEmpty()) {\n            assertThat(pq1.pollMinValue()).isEqualTo(pq2.poll());\n          }\n        }\n\n        assertThat(pq1.size()).isEqualTo(pq2.size());\n        assertThat(pq1.isEmpty()).isEqualTo(pq2.isEmpty());\n        if (!pq2.isEmpty()) assertThat(pq1.peekMinValue()).isEqualTo(pq2.peek());\n      }\n    }\n  }\n\n  @Test\n  public void testRandomInsertionsAndRemovals() {\n    for (int n = 1; n < 500; n++) {\n      List<Integer> indexes = genUniqueRandList(n);\n      MinIndexedBinaryHeap<Integer> pq1 = new MinIndexedBinaryHeap<Integer>(n);\n      PriorityQueue<Integer> pq2 = new PriorityQueue<Integer>(n);\n      List<Integer> indexesToRemove = new ArrayList<>();\n\n      final double p = Math.random();\n      for (int i = 0; i < n; i++) {\n        int ii = indexes.get(i);\n        pq1.insert(ii, ii);\n        pq2.add(ii);\n        indexesToRemove.add(ii);\n        assertThat(pq1.isMinHeap()).isTrue();\n\n        if (Math.random() < p) {\n          int itemsToRemove = (int) (Math.random() * 10);\n          while (itemsToRemove-- > 0 && indexesToRemove.size() > 0) {\n            int iii = (int) (Math.random() * indexesToRemove.size());\n            int indexToRemove = indexesToRemove.get(iii);\n            boolean contains1 = pq1.contains(indexToRemove);\n            boolean contains2 = pq2.contains(indexToRemove);\n            assertThat(contains1).isEqualTo(contains2);\n            assertThat(pq1.isMinHeap()).isTrue();\n            if (contains2) {\n              pq1.delete(indexToRemove);\n              pq2.remove(indexToRemove);\n              indexesToRemove.remove(iii);\n            }\n            if (!pq2.isEmpty()) assertThat(pq1.peekMinValue()).isEqualTo(pq2.peek());\n          }\n        }\n\n        for (int index : indexesToRemove) {\n          assertThat(pq2.contains(index)).isTrue(); // Sanity check.\n          assertThat(pq1.contains(index)).isTrue();\n        }\n\n        assertThat(pq1.size()).isEqualTo(pq2.size());\n        assertThat(pq1.isEmpty()).isEqualTo(pq2.isEmpty());\n        if (!pq2.isEmpty()) assertThat(pq1.peekMinValue()).isEqualTo(pq2.peek());\n      }\n    }\n  }\n\n  static int[] genRandArray(int n, int lo, int hi) {\n    return new Random().ints(n, lo, hi).toArray();\n  }\n\n  static void sortPairsByValue(Integer[][] pairs) {\n    Arrays.sort(\n        pairs,\n        new Comparator<Integer[]>() {\n          @Override\n          public int compare(Integer[] pair1, Integer[] pair2) {\n            return pair1[1] - pair2[1];\n          }\n        });\n  }\n\n  // Generate a list of unique random numbers\n  static List<Integer> genUniqueRandList(int sz) {\n    List<Integer> lst = new ArrayList<>(sz);\n    for (int i = 0; i < sz; i++) lst.add(i);\n    Collections.shuffle(lst);\n    return lst;\n  }\n}\n"}
{"code_source": "/**\n * Run with: ./gradlew run -Palgorithm=datastructures.segmenttree.MinQueryAssignUpdateSegmentTree\n *\n * <p>Several thanks to cp-algorithms for their great article on segment trees:\n * https://cp-algorithms.com/data_structures/segment_tree.html\n *\n * <p>NOTE: This file is still a WIP\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.segmenttree;\n\npublic class MinQueryAssignUpdateSegmentTree {\n\n  // The number of elements in the original input values array.\n  private int n;\n\n  // The segment tree represented as a binary tree of ranges where t[0] is the\n  // root node and the left and right children of node i are i*2+1 and i*2+2.\n  private Long[] t;\n\n  // The delta values associates with each segment. Used for lazy propagation\n  // when doing range updates.\n  private Long[] lazy;\n\n  private Long minFunction(Long a, Long b) {\n    if (a == null && b == null) return null;\n    if (a == null) return b;\n    if (b == null) return a;\n    return Math.min(a, b);\n  }\n\n  public MinQueryAssignUpdateSegmentTree(long[] values) {\n    if (values == null) {\n      throw new IllegalArgumentException(\"Segment tree values cannot be null.\");\n    }\n\n    n = values.length;\n\n    // The size of the segment tree `t`\n    //\n    // TODO(william): Investigate to reduce this space. There are only 2n-1 segments, so we should\n    // be able to reduce the space, but may need to reorganize the tree/queries. One idea is to use\n    // the Eulerian tour structure of the tree to densely pack the segments.\n    int N = 4 * n;\n\n    t = new Long[N];\n    lazy = new Long[N];\n\n    buildSegmentTree(0, 0, n - 1, values);\n  }\n\n  /**\n   * Builds a segment tree by starting with the leaf nodes and combining segment values on callback.\n   *\n   * @param i the index of the segment in the segment tree\n   * @param tl the left index (inclusive) of the segment range\n   * @param tr the right index (inclusive) of the segment range\n   * @param values the initial values array\n   */\n  private void buildSegmentTree(int i, int tl, int tr, long[] values) {\n    if (tl == tr) {\n      t[i] = values[tl];\n      return;\n    }\n    int tm = (tl + tr) / 2;\n    buildSegmentTree(2 * i + 1, tl, tm, values);\n    buildSegmentTree(2 * i + 2, tm + 1, tr, values);\n\n    t[i] = minFunction(t[2 * i + 1], t[2 * i + 2]);\n  }\n\n  /**\n   * Returns the query of the range [l, r] on the original `values` array (+ any updates made to it)\n   *\n   * @param l the left endpoint of the range query (inclusive)\n   * @param r the right endpoint of the range query (inclusive)\n   */\n  public long rangeQuery1(int l, int r) {\n    return rangeQuery1(0, 0, n - 1, l, r);\n  }\n\n  /**\n   * Returns the range query value of the range [l, r]\n   *\n   * @param i the index of the current segment in the tree\n   * @param tl the left endpoint (inclusive) of the current segment\n   * @param tr the right endpoint (inclusive) of the current segment\n   * @param l the target left endpoint (inclusive) for the range query\n   * @param r the target right endpoint (inclusive) for the range query\n   */\n  private Long rangeQuery1(int i, int tl, int tr, int l, int r) {\n    if (l > r) {\n      return null;\n    }\n    propagate1(i, tl, tr);\n    if (tl == l && tr == r) {\n      return t[i];\n    }\n    int tm = (tl + tr) / 2;\n    // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n    // [l, r], simply recurse on both segments and let the base case return the\n    // default value for invalid intervals.\n    return minFunction(\n        rangeQuery1(2 * i + 1, tl, tm, l, Math.min(tm, r)),\n        rangeQuery1(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r));\n  }\n\n  public void rangeUpdate1(int l, int r, long x) {\n    rangeUpdate1(0, 0, n - 1, l, r, x);\n  }\n\n  // TODO(william): cleanup this function\n  private Long assignFunction(Long a, Long b) {\n    return b;\n  }\n\n  private void propagateLazy(int i, int tl, int tr, long val) {\n    // Ignore leaf segments\n    if (tl == tr) return;\n    lazy[2 * i + 1] = assignFunction(/*unused*/ 0L, val);\n    lazy[2 * i + 2] = assignFunction(/*unused*/ 0L, val);\n  }\n\n  private void propagate1(int i, int tl, int tr) {\n    // Check for default value because you don't want to assign to the lazy\n    // value if it's the default value.\n    if (lazy[i] != null) {\n      t[i] = lazy[i];\n      // Push delta to left/right segments for non-leaf nodes\n      propagateLazy(i, tl, tr, lazy[i]);\n      lazy[i] = null;\n    }\n  }\n\n  private void rangeUpdate1(int i, int tl, int tr, int l, int r, long x) {\n    propagate1(i, tl, tr);\n    if (l > r) {\n      return;\n    }\n\n    if (tl == l && tr == r) {\n      t[i] = x;\n      propagateLazy(i, tl, tr, x);\n      // TODO(william): confirm if this is needed if we already propagated?\n      lazy[i] = null;\n    } else {\n      int tm = (tl + tr) / 2;\n      // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n      // [l, r], simply recurse on both segments and let the base case disregard\n      // invalid intervals.\n      rangeUpdate1(2 * i + 1, tl, tm, l, Math.min(tm, r), x);\n      rangeUpdate1(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r, x);\n\n      t[i] = minFunction(t[2 * i + 1], t[2 * i + 2]);\n    }\n  }\n\n  // /**\n  //  * Returns the query of the range [l, r] on the original `values` array (+ any updates made to\n  // it)\n  //  *\n  //  * @param l the left endpoint of the range query (inclusive)\n  //  * @param r the right endpoint of the range query (inclusive)\n  //  */\n  // public long rangeQuery2(int l, int r) {\n  //   return rangeQuery2(0, 0, n - 1, l, r);\n  // }\n\n  // /**\n  //  * Returns the range query value of the range [l, r]\n  //  *\n  //  * <p>An alternative implementation of the range query function that intelligently only digs\n  // into\n  //  * the branches of the segment tree which overlap with the query [l, r].\n  //  *\n  //  * <p>This version of the range query implementation has the advantage that it doesn't need to\n  //  * know the explicit base case value for each range query type.\n  //  *\n  //  * @param i the index of the current segment in the tree\n  //  * @param tl the left endpoint (inclusive) of the current segment\n  //  * @param tr the right endpoint (inclusive) of the current segment\n  //  * @param l the target left endpoint (inclusive) for the range query\n  //  * @param r the target right endpoint (inclusive) for the range query\n  //  */\n  // private Long rangeQuery2(int i, int tl, int tr, int l, int r) {\n  //   if (tl == l && tr == r) {\n  //     return t[i];\n  //   }\n  //   propagate2(i, tl, tr);\n  //   int tm = (tl + tr) / 2;\n  //   // Test how the left and right segments of the interval [tl, tr] overlap with the query [l,\n  // r]\n  //   boolean overlapsLeftSegment = (l <= tm);\n  //   boolean overlapsRightSegment = (r > tm);\n  //   if (overlapsLeftSegment && overlapsRightSegment) {\n  //     return minFunction(\n  //         rangeQuery2(2 * i + 1, tl, tm, l, Math.min(tm, r)),\n  //         rangeQuery2(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r));\n  //   } else if (overlapsLeftSegment) {\n  //     return rangeQuery2(2 * i + 1, tl, tm, l, Math.min(tm, r));\n  //   } else {\n  //     return rangeQuery2(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r);\n  //   }\n  // }\n\n  // Alternative range update impl that propagates a little differently.\n  // public void rangeUpdate2(int l, int r, long x) {\n  //   rangeUpdate2(0, 0, n - 1, l, r, x);\n  // }\n\n  // // Propagates ahead so that when you lookup a value of a node it's already pre-propagated\n  // // in a sense. Cleans up the code a bit. You don't want to call this method on the leaf nodes.\n  // private void propagate2(int i, int tl, int tr) {\n  //   // Check for default value because you don't want to assign to the lazy\n  //   // value if it's the default value.\n  //   if (lazy[i] != null) {\n  //     t[2 * i + 1] = lazy[i];\n  //     lazy[2 * i + 1] = lazy[i];\n  //     t[2 * i + 2] = lazy[i];\n  //     lazy[2 * i + 2] = lazy[i];\n  //     lazy[i] = null;\n  //   }\n  // }\n\n  // private void rangeUpdate2(int i, int tl, int tr, int l, int r, long x) {\n  //   if (l > r) {\n  //     return;\n  //   }\n\n  //   if (tl == l && tr == r) {\n  //     t[i] = x;\n  //     lazy[i] = x;\n  //   } else {\n  //     propagate2(i, tl, tr);\n  //     int tm = (tl + tr) / 2;\n  //     // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n  //     // [l, r], simply recurse on both segments and let the base case disregard\n  //     // invalid intervals.\n  //     rangeUpdate2(2 * i + 1, tl, tm, l, Math.min(tm, r), x);\n  //     rangeUpdate2(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r, x);\n\n  //     t[i] = minFunction(t[2 * i + 1], t[2 * i + 2]);\n  //   }\n  // }\n\n  public void printDebugInfo() {\n    printDebugInfo(0, 0, n - 1);\n    System.out.println();\n  }\n\n  private void printDebugInfo(int i, int tl, int tr) {\n    System.out.printf(\"[%d, %d], t[i] = %d, lazy[i] = %d\\n\", tl, tr, t[i], lazy[i]);\n    if (tl == tr) {\n      return;\n    }\n    int tm = (tl + tr) / 2;\n    printDebugInfo(2 * i + 1, tl, tm);\n    printDebugInfo(2 * i + 2, tm + 1, tr);\n  }\n\n  ////////////////////////////////////////////////////\n  //              Example usage:                    //\n  ////////////////////////////////////////////////////\n\n  public static void main(String[] args) {\n    //          0, 1, 2, 3,  4\n    long[] v = {2, 1, 3, 4, -1};\n    MinQueryAssignUpdateSegmentTree st = new MinQueryAssignUpdateSegmentTree(v);\n    st.printDebugInfo();\n    System.out.println(st.rangeQuery1(0, 4)); // -1\n    System.out.println(st.rangeQuery1(3, 3)); // 4\n    System.out.println(st.rangeQuery1(4, 4)); // -1\n    System.out.println(st.rangeQuery1(3, 4)); // -1\n    System.out.println();\n\n    //          0, 1, 2, 3, 4\n    //     v = {2, 1, 3, 2, 2};\n    st.rangeUpdate1(3, 4, 2);\n\n    System.out.println(st.rangeQuery1(0, 4)); // 1\n    System.out.println(st.rangeQuery1(3, 4)); // 2\n    System.out.println(st.rangeQuery1(3, 3)); // 2\n    System.out.println(st.rangeQuery1(4, 4)); // 2\n\n    //          0, 1, 2, 3, 4\n    //     v = {2, 4, 4, 4, 2};\n    st.printDebugInfo();\n    st.rangeUpdate1(1, 3, 4);\n    st.printDebugInfo();\n\n    System.out.println(st.rangeQuery1(0, 4)); // 2\n    System.out.println(st.rangeQuery1(0, 1)); // 2\n    System.out.println(st.rangeQuery1(3, 4)); // 2\n    System.out.println(st.rangeQuery1(1, 1)); // 4\n    System.out.println(st.rangeQuery1(2, 2)); // 4\n    System.out.println(st.rangeQuery1(3, 3)); // 4\n    System.out.println(st.rangeQuery1(1, 3)); // 4\n    System.out.println(st.rangeQuery1(2, 3)); // 4\n    System.out.println(st.rangeQuery1(1, 2)); // 4\n  }\n}\n", "test_case": "/**\n * gradle test --info --tests\n * \"com.williamfiset.algorithms.datastructures.segmenttree.MinQueryAssignUpdateSegmentTreeTest\"\n */\npackage com.williamfiset.algorithms.datastructures.segmenttree;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.williamfiset.algorithms.utils.TestUtils;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class MinQueryAssignUpdateSegmentTreeTest {\n\n  static int ITERATIONS = 500;\n\n  @Before\n  public void setup() {}\n\n  @Test\n  public void testRandomRangeAssignUpdates1WithMinRangeQueries1() {\n    for (int n = 5; n < ITERATIONS; n++) {\n      long[] ar = TestUtils.randomLongArray(n, -1000, +1000);\n      MinQueryAssignUpdateSegmentTree st = new MinQueryAssignUpdateSegmentTree(ar);\n\n      for (int i = 0; i < n; i++) {\n        // System.out.printf(\"n = %d, i = %d\\n\", n, i);\n        int j = TestUtils.randValue(0, n - 1);\n        int k = TestUtils.randValue(0, n - 1);\n        int i1 = Math.min(j, k);\n        int i2 = Math.max(j, k);\n\n        // Range query\n        long bfMin = bruteForceMin(ar, i1, i2);\n        long segTreeMin = st.rangeQuery1(i1, i2);\n        assertThat(bfMin).isEqualTo(segTreeMin);\n\n        // Range update\n        j = TestUtils.randValue(0, n - 1);\n        k = TestUtils.randValue(0, n - 1);\n        int i3 = Math.min(j, k);\n        int i4 = Math.max(j, k);\n        long randValue = TestUtils.randValue(-1000, 1000);\n        st.rangeUpdate1(i3, i4, randValue);\n        bruteForceAssignRangeUpdate(ar, i3, i4, randValue);\n      }\n    }\n  }\n\n  // @Test\n  // public void testRandomRangeAssignUpdates2WithMinRangeQueries1() {\n  //   for (int n = 5; n < ITERATIONS; n++) {\n  //     long[] ar = TestUtils.randomLongArray(n, -1000, +1000);\n  //     MinQueryAssignUpdateSegmentTree st = new MinQueryAssignUpdateSegmentTree(ar);\n\n  //     for (int i = 0; i < n; i++) {\n  //       // System.out.printf(\"n = %d, i = %d\\n\", n, i);\n  //       int j = TestUtils.randValue(0, n - 1);\n  //       int k = TestUtils.randValue(0, n - 1);\n  //       int i1 = Math.min(j, k);\n  //       int i2 = Math.max(j, k);\n\n  //       // Range query\n  //       long bfMin = bruteForceMin(ar, i1, i2);\n  //       long segTreeMin = st.rangeQuery2(i1, i2);\n  //       assertThat(bfMin).isEqualTo(segTreeMin);\n\n  //       // Range update\n  //       j = TestUtils.randValue(0, n - 1);\n  //       k = TestUtils.randValue(0, n - 1);\n  //       int i3 = Math.min(j, k);\n  //       int i4 = Math.max(j, k);\n  //       long randValue = TestUtils.randValue(-1000, 1000);\n  //       st.rangeUpdate2(i3, i4, randValue);\n  //       bruteForceAssignRangeUpdate(ar, i3, i4, randValue);\n  //     }\n  //   }\n  // }\n\n  // Finds the sum in an array between [l, r] in the `values` array\n  private static long bruteForceSum(long[] values, int l, int r) {\n    long s = 0;\n    for (int i = l; i <= r; i++) {\n      s += values[i];\n    }\n    return s;\n  }\n\n  // Finds the min value in an array between [l, r] in the `values` array\n  private static long bruteForceMin(long[] values, int l, int r) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) {\n      m = Math.min(m, values[i]);\n    }\n    return m;\n  }\n\n  // Finds the max value in an array between [l, r] in the `values` array\n  private static long bruteForceMax(long[] values, int l, int r) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) {\n      m = Math.max(m, values[i]);\n    }\n    return m;\n  }\n\n  private static void bruteForceSumRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] += x;\n    }\n  }\n\n  private static void bruteForceMulRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] *= x;\n    }\n  }\n\n  private static void bruteForceAssignRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] = x;\n    }\n  }\n}\n"}
{"code_source": "/**\n * Run with: ./gradlew run -Palgorithm=datastructures.segmenttree.MinQuerySumUpdateSegmentTree\n *\n * <p>Several thanks to cp-algorithms for their great article on segment trees:\n * https://cp-algorithms.com/data_structures/segment_tree.html\n *\n * <p>NOTE: This file is still a WIP\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.segmenttree;\n\npublic class MinQuerySumUpdateSegmentTree {\n\n  // The number of elements in the original input values array.\n  private final int n;\n\n  // The segment tree represented as a binary tree of ranges where t[0] is the\n  // root node and the left and right children of node i are i*2+1 and i*2+2.\n  private Long[] t;\n\n  // The delta values associates with each segment. Used for lazy propagation\n  // when doing range updates.\n  private Long[] lazy;\n\n  // Min function\n  private Long minFunction(Long a, Long b) {\n    if (a == null && b == null) return null;\n    if (a == null) return b;\n    if (b == null) return a;\n    return Math.min(a, b);\n  }\n\n  private Long sumFunction(Long a, Long b) {\n    if (a == null) a = 0L;\n    if (b == null) b = 0L;\n    return a + b;\n  }\n\n  private Long minSegmentUpdateFn(long base, int tl, int tr, long x) {\n    return base + x;\n  }\n\n  public MinQuerySumUpdateSegmentTree(long[] values) {\n    if (values == null) {\n      throw new IllegalArgumentException(\"Segment tree values cannot be null.\");\n    }\n    n = values.length;\n\n    // The size of the segment tree `t`\n    //\n    // TODO(william): Investigate to reduce this space. There are only 2n-1 segments, so we should\n    // be able to reduce the space, but may need to reorganize the tree/queries. One idea is to use\n    // the Eulerian tour structure of the tree to densely pack the segments.\n    int N = 4 * n;\n\n    t = new Long[N];\n    lazy = new Long[N];\n\n    buildSegmentTree(0, 0, n - 1, values);\n  }\n\n  /**\n   * Builds a segment tree by starting with the leaf nodes and combining segment values on callback.\n   *\n   * @param i the index of the segment in the segment tree\n   * @param tl the left index (inclusive) of the segment range\n   * @param tr the right index (inclusive) of the segment range\n   * @param values the initial values array\n   */\n  private void buildSegmentTree(int i, int tl, int tr, long[] values) {\n    if (tl == tr) {\n      t[i] = values[tl];\n      return;\n    }\n    int tm = (tl + tr) / 2;\n    buildSegmentTree(2 * i + 1, tl, tm, values);\n    buildSegmentTree(2 * i + 2, tm + 1, tr, values);\n\n    t[i] = minFunction(t[2 * i + 1], t[2 * i + 2]);\n  }\n\n  /**\n   * Returns the query of the range [l, r] on the original `values` array (+ any updates made to it)\n   *\n   * @param l the left endpoint of the range query (inclusive)\n   * @param r the right endpoint of the range query (inclusive)\n   */\n  public Long rangeQuery1(int l, int r) {\n    return rangeQuery1(0, 0, n - 1, l, r);\n  }\n\n  /**\n   * Returns the range query value of the range [l, r]\n   *\n   * @param i the index of the current segment in the tree\n   * @param tl the left endpoint (inclusive) of the current segment\n   * @param tr the right endpoint (inclusive) of the current segment\n   * @param l the target left endpoint (inclusive) for the range query\n   * @param r the target right endpoint (inclusive) for the range query\n   */\n  private Long rangeQuery1(int i, int tl, int tr, int l, int r) {\n    if (l > r) {\n      return null;\n    }\n    propagate1(i, tl, tr);\n    if (tl == l && tr == r) {\n      return t[i];\n    }\n    int tm = (tl + tr) / 2;\n    // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n    // [l, r], simply recurse on both segments and let the base case return the\n    // default value for invalid intervals.\n    return minFunction(\n        rangeQuery1(2 * i + 1, tl, tm, l, Math.min(tm, r)),\n        rangeQuery1(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r));\n  }\n\n  public void rangeUpdate1(int l, int r, long x) {\n    rangeUpdate1(0, 0, n - 1, l, r, x);\n  }\n\n  private void propagateLazy(int i, int tl, int tr, long delta) {\n    // Ignore leaf segments\n    if (tl == tr) return;\n    // TODO(william): should this also used the minSegmentUpdateFn\n    lazy[2 * i + 1] = sumFunction(lazy[2 * i + 1], delta);\n    lazy[2 * i + 2] = sumFunction(lazy[2 * i + 2], delta);\n  }\n\n  private void propagate1(int i, int tl, int tr) {\n    // Check for default value because you don't want to assign to the lazy\n    // value if it's the default value.\n    if (lazy[i] != null) {\n      // The minimum value increases by the delta over the whole range.\n      t[i] = minSegmentUpdateFn(t[i], /*unused*/ 0, /*unused*/ 0, lazy[i]);\n      // Push delta to left/right segments for non-leaf nodes\n      propagateLazy(i, tl, tr, lazy[i]);\n      lazy[i] = null;\n    }\n  }\n\n  private void rangeUpdate1(int i, int tl, int tr, int l, int r, long x) {\n    propagate1(i, tl, tr);\n    if (l > r) {\n      return;\n    }\n\n    if (tl == l && tr == r) {\n      t[i] = minSegmentUpdateFn(t[i], /*unused*/ 0, /*unused*/ 0, x);\n      propagateLazy(i, tl, tr, x);\n    } else {\n      int tm = (tl + tr) / 2;\n      // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n      // [l, r], simply recurse on both segments and let the base case disregard\n      // invalid intervals.\n      rangeUpdate1(2 * i + 1, tl, tm, l, Math.min(tm, r), x);\n      rangeUpdate1(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r, x);\n\n      t[i] = minFunction(t[2 * i + 1], t[2 * i + 2]);\n    }\n  }\n\n  public void printDebugInfo() {\n    printDebugInfo(0, 0, n - 1);\n    System.out.println();\n  }\n\n  private void printDebugInfo(int i, int tl, int tr) {\n    System.out.printf(\"[%d, %d], t[i] = %d, lazy[i] = %d\\n\", tl, tr, t[i], lazy[i]);\n    if (tl == tr) {\n      return;\n    }\n    int tm = (tl + tr) / 2;\n    printDebugInfo(2 * i + 1, tl, tm);\n    printDebugInfo(2 * i + 2, tm + 1, tr);\n  }\n\n  ////////////////////////////////////////////////////\n  //              Example usage:                    //\n  ////////////////////////////////////////////////////\n\n  public static void main(String[] args) {\n    //          0, 1, 2, 3,  4\n    long[] v = {2, 1, 3, 4, -1};\n    MinQuerySumUpdateSegmentTree st = new MinQuerySumUpdateSegmentTree(v);\n  }\n}\n", "test_case": "/**\n * gradle test --info --tests\n * \"com.williamfiset.algorithms.datastructures.segmenttree.MinQuerySumUpdateSegmentTreeTest\"\n */\npackage com.williamfiset.algorithms.datastructures.segmenttree;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.williamfiset.algorithms.utils.TestUtils;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class MinQuerySumUpdateSegmentTreeTest {\n\n  static int ITERATIONS = 1000;\n\n  @Before\n  public void setup() {}\n\n  @Test\n  public void simpleTest() {\n    long[] ar = {2, 1, 3, 4, -1};\n    MinQuerySumUpdateSegmentTree st = new MinQuerySumUpdateSegmentTree(ar);\n\n    st.rangeUpdate1(0, 4, 1);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(0);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(2);\n    assertThat(st.rangeQuery1(2, 4)).isEqualTo(0);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(5);\n\n    st.rangeUpdate1(3, 4, 4);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(2);\n    assertThat(st.rangeQuery1(0, 1)).isEqualTo(2);\n    assertThat(st.rangeQuery1(3, 4)).isEqualTo(4);\n    assertThat(st.rangeQuery1(1, 1)).isEqualTo(2);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(4);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(9);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(2);\n    assertThat(st.rangeQuery1(2, 3)).isEqualTo(4);\n    assertThat(st.rangeQuery1(1, 2)).isEqualTo(2);\n\n    st.rangeUpdate1(1, 3, 3);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(3);\n    assertThat(st.rangeQuery1(0, 2)).isEqualTo(3);\n    assertThat(st.rangeQuery1(2, 4)).isEqualTo(4);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(5);\n    assertThat(st.rangeQuery1(0, 0)).isEqualTo(3);\n    assertThat(st.rangeQuery1(1, 1)).isEqualTo(5);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(7);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(12);\n    assertThat(st.rangeQuery1(4, 4)).isEqualTo(4);\n  }\n\n  @Test\n  public void testRandomRangeSumUpdatesWithSumRangeQueries() {\n    for (int n = 5; n < ITERATIONS; n++) {\n      long[] ar = TestUtils.randomLongArray(n, -100, +100);\n      MinQuerySumUpdateSegmentTree st = new MinQuerySumUpdateSegmentTree(ar);\n\n      for (int i = 0; i < n; i++) {\n        // System.out.printf(\"n = %d, i = %d\\n\", n, i);\n        int j = TestUtils.randValue(0, n - 1);\n        int k = TestUtils.randValue(0, n - 1);\n        int i1 = Math.min(j, k);\n        int i2 = Math.max(j, k);\n\n        j = TestUtils.randValue(0, n - 1);\n        k = TestUtils.randValue(0, n - 1);\n        int i3 = Math.min(j, k);\n        int i4 = Math.max(j, k);\n\n        // Range update\n        long randValue = TestUtils.randValue(-10, 10);\n        // System.out.printf(\"UPDATE [%d, %d] with %d\\n\", i3, i4, randValue);\n        bruteForceSumRangeUpdate(ar, i3, i4, randValue);\n        st.rangeUpdate1(i3, i4, randValue);\n\n        // Range query\n        long bfMin = bruteForceMin(ar, i1, i2);\n        long segTreeMin = st.rangeQuery1(i1, i2);\n        // System.out.printf(\"QUERY [%d, %d], want = %d, got = %d\\n\", i1, i2, bfMin, segTreeMin);\n        assertThat(bfMin).isEqualTo(segTreeMin);\n      }\n    }\n  }\n\n  // Finds the sum in an array between [l, r] in the `values` array\n  private static long bruteForceSum(long[] values, int l, int r) {\n    long s = 0;\n    for (int i = l; i <= r; i++) {\n      s += values[i];\n    }\n    return s;\n  }\n\n  // Finds the min value in an array between [l, r] in the `values` array\n  private static long bruteForceMin(long[] values, int l, int r) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) {\n      m = Math.min(m, values[i]);\n    }\n    return m;\n  }\n\n  // Finds the max value in an array between [l, r] in the `values` array\n  private static long bruteForceMax(long[] values, int l, int r) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) {\n      m = Math.max(m, values[i]);\n    }\n    return m;\n  }\n\n  private static void bruteForceSumRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] += x;\n    }\n  }\n\n  private static void bruteForceMulRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] *= x;\n    }\n  }\n\n  private static void bruteForceAssignRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] = x;\n    }\n  }\n}\n"}
{"code_source": "/**\n * A QuadTree implementation with integer coordinates.\n *\n * <p>NOTE: THIS FILE IS STILL UNDER DEVELOPMENT!\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.quadtree;\n\nimport static java.lang.Double.POSITIVE_INFINITY;\n\nimport java.util.*;\n\npublic class QuadTree {\n\n  private static int NORTH_EAST = 1;\n  private static int NORTH_WEST = 2;\n  private static int SOUTH_EAST = 3;\n  private static int SOUTH_WEST = 4;\n\n  private static boolean isNorth(int dir) {\n    return dir == NORTH_EAST || dir == NORTH_WEST;\n  }\n\n  class Pt {\n    long x, y;\n\n    public Pt(long xx, long yy) {\n      y = yy;\n      x = xx;\n    }\n\n    @Override\n    public String toString() {\n      return \"(\" + x + \",\" + y + \")\";\n    }\n  }\n\n  static class SortedPt implements Comparable<SortedPt> {\n    Pt pt;\n    double dist;\n\n    public SortedPt(double dist, Pt pt) {\n      this.dist = dist;\n      this.pt = pt;\n    }\n\n    @Override\n    public int compareTo(SortedPt other) {\n      return Double.compare(dist, other.dist);\n    }\n\n    @Override\n    public String toString() {\n      return dist + \" - \" + pt;\n    }\n  }\n\n  // Node that represents a regions with points inside this region.\n  class Node {\n\n    // Keeps track of how many points are currently\n    // contained within this quad tree node.\n    private int ptCount = 0;\n\n    // Tracks the (x,y) coordinates of points within this quad tree node.\n    private long[] X, Y;\n\n    // Define four Quad Tree nodes to subdivide the region we're\n    // considering into four parts: north west (nw), north east (ne),\n    // south west(sw) and south east(se).\n    private Node nw, ne, sw, se;\n\n    // The region this node encompasses\n    private Rect region;\n\n    // Construct a quad tree for a particular region.\n    public Node(Rect region) {\n      if (region == null) throw new IllegalArgumentException(\"Illegal argument\");\n      this.region = region;\n      X = new long[NUM_POINTS];\n      Y = new long[NUM_POINTS];\n    }\n\n    // Try adding a point to the current region and if the\n    // region is already full subdivide and recurse until\n    // you are able to place the point inside a smaller region\n    private boolean add(long x, long y) {\n\n      // Point is not within this region.\n      if (!region.contains(x, y)) return false;\n\n      // The point is within this region and there is room for it.\n      if (ptCount < NUM_POINTS) {\n\n        X[ptCount] = x;\n        Y[ptCount] = y;\n        ptCount++;\n\n        return true;\n\n        // This region is full, so subdivide the region into four\n        // quadrants and try adding the point to these new regions\n      } else {\n\n        // Find the center of this region at (cx, cy)\n        long cx = (region.x1 + region.x2) / 2;\n        long cy = (region.y1 + region.y2) / 2;\n\n        // Lazily subdivide each of the regions into four parts\n        // one by one as needed to save memory.\n\n        if (sw == null) sw = new Node(new Rect(region.x1, region.y1, cx, cy));\n        if (sw.add(x, y)) return true;\n\n        if (nw == null) nw = new Node(new Rect(region.x1, cy, cx, region.y2));\n        if (nw.add(x, y)) return true;\n\n        if (ne == null) ne = new Node(new Rect(cx, cy, region.x2, region.y2));\n        if (ne.add(x, y)) return true;\n\n        if (se == null) se = new Node(new Rect(cx, region.y1, region.x2, cy));\n        return se.add(x, y);\n      }\n    }\n\n    // Count how many points are found within a certain rectangular region\n    private int count(Rect area) {\n\n      if (area == null || !region.intersects(area)) return 0;\n\n      int count = 0;\n\n      // The area we're considering fully contains\n      // the region of this node, so simply add the\n      // number of points within this region to the count\n      if (area.contains(region)) {\n        count = ptCount;\n\n        // Our regions overlap, so some points in this\n        // region may intersect with the area we're considering\n      } else {\n        for (int i = 0; i < ptCount; i++) if (area.contains(X[i], Y[i])) count++;\n      }\n\n      // Dig into each of the quadrants and count all points\n      // which overlap with the area and sum their count\n      if (nw != null) count += nw.count(area);\n      if (ne != null) count += ne.count(area);\n      if (sw != null) count += sw.count(area);\n      if (se != null) count += se.count(area);\n\n      return count;\n    }\n\n    private List<Pt> kNearestNeighbors(int k, long x, long y) {\n      PriorityQueue<SortedPt> heap = new PriorityQueue<>(k, Collections.reverseOrder());\n      knn(k, x, y, heap);\n\n      List<Pt> neighbors = new ArrayList<>();\n      for (SortedPt n : heap) neighbors.add(n.pt);\n      return neighbors;\n    }\n\n    // Find the k-nearest neighbors.\n    private void knn(int k, long x, long y, PriorityQueue<SortedPt> heap) {\n\n      for (int i = 0; i < ptCount; i++) {\n        long xx = X[i], yy = Y[i];\n\n        // Get largest radius.\n        double radius = heap.isEmpty() ? POSITIVE_INFINITY : heap.peek().dist;\n\n        // Get distance from point to this point.\n        double distance = Math.sqrt((xx - x) * (xx - x) + (yy - y) * (yy - y));\n\n        // Add node to heap.\n        if (heap.size() < k) {\n          heap.add(new SortedPt(distance, new Pt(xx, yy)));\n        } else if (distance < radius) {\n          heap.poll();\n          // System.out.println(\"POLLED: \" + heap.poll());\n          heap.add(new SortedPt(distance, new Pt(xx, yy)));\n        }\n      }\n\n      int pointQuadrant = 0;\n\n      // Dig to find the quadrant (x, y) belongs to.\n      if (nw != null && region.contains(x, y)) {\n        nw.knn(k, x, y, heap);\n        pointQuadrant = NORTH_WEST;\n      } else if (ne != null && region.contains(x, y)) {\n        ne.knn(k, x, y, heap);\n        pointQuadrant = NORTH_EAST;\n      } else if (sw != null && region.contains(x, y)) {\n        sw.knn(k, x, y, heap);\n        pointQuadrant = SOUTH_WEST;\n      } else if (se != null && region.contains(x, y)) { // Use else clause?\n        se.knn(k, x, y, heap);\n        pointQuadrant = SOUTH_EAST;\n      }\n\n      if (pointQuadrant == 0) {\n        // System.out.println(\"UNDEFINED QUADRANT?\");\n        // return;\n      }\n\n      // Get largest radius.\n      double radius = heap.isEmpty() ? POSITIVE_INFINITY : heap.peek().dist;\n\n      // Find the center of this region at (cx, cy)\n      long cx = (region.x1 + region.x2) / 2;\n      long cy = (region.y1 + region.y2) / 2;\n\n      // Compute the horizontal (dx) and vertical (dy) distance from the\n      // point (x, y) to the nearest cell.\n      long dx = Math.abs(x - cx);\n      long dy = Math.abs(y - cy);\n\n      boolean checkHorizontalCell = radius >= dx;\n      boolean checkVerticalCell = radius >= dy;\n      boolean checkDiagonalCell = checkHorizontalCell && checkVerticalCell;\n\n      // TODO(williamfiset): Refactor.\n      if (heap.size() == k) {\n\n        if (isNorth(pointQuadrant)) {\n          if (pointQuadrant == NORTH_WEST) {\n            if (checkHorizontalCell) if (ne != null) ne.knn(k, x, y, heap);\n            if (checkVerticalCell) if (sw != null) sw.knn(k, x, y, heap);\n            if (checkDiagonalCell) if (se != null) se.knn(k, x, y, heap);\n          } else {\n            if (checkHorizontalCell) if (nw != null) nw.knn(k, x, y, heap);\n            if (checkVerticalCell) if (se != null) se.knn(k, x, y, heap);\n            if (checkDiagonalCell) if (nw != null) nw.knn(k, x, y, heap);\n          }\n        } else {\n          if (pointQuadrant == SOUTH_WEST) {\n            if (checkHorizontalCell) if (se != null) se.knn(k, x, y, heap);\n            if (checkVerticalCell) if (nw != null) nw.knn(k, x, y, heap);\n            if (checkDiagonalCell) if (ne != null) ne.knn(k, x, y, heap);\n          } else {\n            if (checkHorizontalCell) if (sw != null) sw.knn(k, x, y, heap);\n            if (checkVerticalCell) if (ne != null) ne.knn(k, x, y, heap);\n            if (checkDiagonalCell) if (nw != null) nw.knn(k, x, y, heap);\n          }\n        }\n\n        // Still need to find k - heap.size() nodes!\n      } else {\n\n        // explore all quadrants ?\n        // Do it lazy? Inspect return val after each call?\n\n        for (int quadrant = 1; quadrant <= 4; quadrant++) {\n\n          if (quadrant == pointQuadrant) continue;\n          radius = heap.isEmpty() ? POSITIVE_INFINITY : heap.peek().dist;\n          checkHorizontalCell = radius >= dx;\n          checkVerticalCell = radius >= dy;\n          checkDiagonalCell = checkHorizontalCell && checkVerticalCell;\n\n          // No validation\n          if (heap.size() != k) {\n            if (isNorth(pointQuadrant)) {\n              if (pointQuadrant == NORTH_WEST) {\n                if (ne != null) ne.knn(k, x, y, heap);\n                if (sw != null) sw.knn(k, x, y, heap);\n                if (se != null) se.knn(k, x, y, heap);\n              } else {\n                if (nw != null) nw.knn(k, x, y, heap);\n                if (se != null) se.knn(k, x, y, heap);\n                if (nw != null) nw.knn(k, x, y, heap);\n              }\n            } else {\n              if (pointQuadrant == SOUTH_WEST) {\n                if (se != null) se.knn(k, x, y, heap);\n                if (nw != null) nw.knn(k, x, y, heap);\n                if (ne != null) ne.knn(k, x, y, heap);\n              } else {\n                if (sw != null) sw.knn(k, x, y, heap);\n                if (ne != null) ne.knn(k, x, y, heap);\n                if (nw != null) nw.knn(k, x, y, heap);\n              }\n            }\n\n            // must intersect\n          } else {\n\n            if (isNorth(pointQuadrant)) {\n              if (pointQuadrant == NORTH_WEST) {\n                if (checkHorizontalCell) if (ne != null) ne.knn(k, x, y, heap);\n                if (checkVerticalCell) if (sw != null) sw.knn(k, x, y, heap);\n                if (checkDiagonalCell) if (se != null) se.knn(k, x, y, heap);\n              } else {\n                if (checkHorizontalCell) if (nw != null) nw.knn(k, x, y, heap);\n                if (checkVerticalCell) if (se != null) se.knn(k, x, y, heap);\n                if (checkDiagonalCell) if (nw != null) nw.knn(k, x, y, heap);\n              }\n            } else {\n              if (pointQuadrant == SOUTH_WEST) {\n                if (checkHorizontalCell) if (se != null) se.knn(k, x, y, heap);\n                if (checkVerticalCell) if (nw != null) nw.knn(k, x, y, heap);\n                if (checkDiagonalCell) if (ne != null) ne.knn(k, x, y, heap);\n              } else {\n                if (checkHorizontalCell) if (sw != null) sw.knn(k, x, y, heap);\n                if (checkVerticalCell) if (ne != null) ne.knn(k, x, y, heap);\n                if (checkDiagonalCell) if (nw != null) nw.knn(k, x, y, heap);\n              }\n            }\n          }\n        } // for\n      } // if\n    } // method\n  } // node\n\n  public static class Rect {\n\n    long x1, y1, x2, y2;\n\n    // Define a rectangle as a pair of points (x1, y1) in the bottom left corner\n    // and (x2, y2) in the top right corner of the rectangle.\n    public Rect(long x1, long y1, long x2, long y2) {\n      if (x1 > x2 || y1 > y2) throw new IllegalArgumentException(\"Illegal rectangle coordinates\");\n      this.x1 = x1;\n      this.y1 = y1;\n      this.x2 = x2;\n      this.y2 = y2;\n    }\n\n    // Check for an intersection between two rectangles. The easiest way to do this is to\n    // check if the two rectangles do not intersect and negate the logic afterwards.\n    public boolean intersects(Rect r) {\n      return r != null && !(r.x2 < x1 || r.x1 > x2 || r.y1 > y2 || r.y2 < y1);\n    }\n\n    // Check if a point (x, y) is within this rectangle, this\n    // includes the boundary of the rectangle.\n    public boolean contains(long x, long y) {\n      return (x1 <= x && x <= x2) && (y1 <= y && y <= y2);\n    }\n\n    // Check if another rectangle is strictly contained within this rectangle.\n    public boolean contains(Rect r) {\n      return r != null && contains(r.x1, r.y1) && contains(r.x2, r.y2);\n    }\n  }\n\n  // This is the maximum number of points each quad tree node can\n  // sustain before it has to subdivide into four more regions.\n  // This variable can have a significant impact on performance.\n  final int NUM_POINTS;\n\n  public static final int DEFAULT_NUM_POINTS = 16;\n\n  // Root node of the quad tree. Public for testing.\n  public Node root;\n\n  public QuadTree(Rect region) {\n    this.NUM_POINTS = DEFAULT_NUM_POINTS;\n    root = new Node(region);\n  }\n\n  public QuadTree(Rect region, int pointsPerNode) {\n    this.NUM_POINTS = pointsPerNode;\n    root = new Node(region);\n  }\n\n  public boolean add(long x, long y) {\n    return root.add(x, y);\n  }\n\n  public int count(Rect region) {\n    return root.count(region);\n  }\n\n  public List<Pt> kNearestNeighbors(int k, long x, long y) {\n    return root.kNearestNeighbors(k, x, y);\n  }\n\n  public List<Pt> getPoints() {\n    List<Pt> points = new ArrayList<>();\n    getPoints(root, points);\n    return points;\n  }\n\n  private void getPoints(Node node, List<Pt> points) {\n    if (node == null) return;\n    for (int i = 0; i < node.ptCount; i++) points.add(new Pt(node.X[i], node.Y[i]));\n    getPoints(node.nw, points);\n    getPoints(node.ne, points);\n    getPoints(node.sw, points);\n    getPoints(node.se, points);\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.quadtree;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class QuadTreeTest {\n\n  static final int LOOPS = 50;\n  static final int TEST_SZ = 1000;\n  static final int MAX_RAND_NUM = +2000;\n\n  @Before\n  public void setup() {}\n\n  @Test\n  public void testRectIntersection() {\n\n    QuadTree.Rect r1 = new QuadTree.Rect(0, 0, 5, 5);\n\n    QuadTree.Rect r1Center = new QuadTree.Rect(1, 1, 4, 4);\n    QuadTree.Rect r1NWCorner = new QuadTree.Rect(-1, 5, 0, 6);\n    QuadTree.Rect r1SWCorner = new QuadTree.Rect(-1, -1, 0, 0);\n    QuadTree.Rect r1SECorner = new QuadTree.Rect(5, -1, 6, 0);\n    QuadTree.Rect r1NECorner = new QuadTree.Rect(5, 5, 6, 6);\n    QuadTree.Rect r1Above = new QuadTree.Rect(2, 6, 3, 8);\n    QuadTree.Rect r1Below = new QuadTree.Rect(2, -5, 5, -1);\n    QuadTree.Rect r1Left = new QuadTree.Rect(-5, -4, -1, 8);\n    QuadTree.Rect r1Right = new QuadTree.Rect(6, -3, 7, 8);\n\n    assertThat(r1.intersects(r1)).isTrue();\n\n    assertThat(r1.intersects(r1Center)).isTrue();\n    assertThat(r1Center.intersects(r1)).isTrue();\n\n    assertThat(r1.intersects(r1NWCorner)).isTrue();\n    assertThat(r1NWCorner.intersects(r1)).isTrue();\n\n    assertThat(r1.intersects(r1NECorner)).isTrue();\n    assertThat(r1NECorner.intersects(r1)).isTrue();\n\n    assertThat(r1.intersects(r1SECorner)).isTrue();\n    assertThat(r1SECorner.intersects(r1)).isTrue();\n\n    assertThat(r1.intersects(r1SWCorner)).isTrue();\n    assertThat(r1SWCorner.intersects(r1)).isTrue();\n\n    assertThat(r1.intersects(r1Above)).isFalse();\n    assertThat(r1Above.intersects(r1)).isFalse();\n\n    assertThat(r1.intersects(r1Below)).isFalse();\n    assertThat(r1Below.intersects(r1)).isFalse();\n\n    assertThat(r1.intersects(r1Left)).isFalse();\n    assertThat(r1Left.intersects(r1)).isFalse();\n\n    assertThat(r1.intersects(r1Right)).isFalse();\n    assertThat(r1Right.intersects(r1)).isFalse();\n  }\n\n  @Test\n  public void testRectContainment() {\n\n    QuadTree.Rect r1 = new QuadTree.Rect(0, 0, 5, 5);\n\n    QuadTree.Rect r1Center = new QuadTree.Rect(1, 1, 4, 4);\n    QuadTree.Rect r1NWCorner = new QuadTree.Rect(-1, 5, 0, 6);\n    QuadTree.Rect r1SWCorner = new QuadTree.Rect(-1, -1, 0, 0);\n    QuadTree.Rect r1SECorner = new QuadTree.Rect(5, -1, 6, 0);\n    QuadTree.Rect r1NECorner = new QuadTree.Rect(5, 5, 6, 6);\n    QuadTree.Rect r1Above = new QuadTree.Rect(2, 6, 3, 8);\n    QuadTree.Rect r1Below = new QuadTree.Rect(2, -5, 5, -1);\n    QuadTree.Rect r1Left = new QuadTree.Rect(-5, -4, -1, 8);\n    QuadTree.Rect r1Right = new QuadTree.Rect(6, -3, 7, 8);\n\n    assertThat(r1.contains(r1)).isTrue();\n\n    assertThat(r1.contains(r1Center)).isTrue();\n    assertThat(r1Center.contains(r1)).isFalse();\n\n    assertThat(r1.contains(r1NWCorner)).isFalse();\n    assertThat(r1NWCorner.contains(r1)).isFalse();\n\n    assertThat(r1.contains(r1NECorner)).isFalse();\n    assertThat(r1NECorner.contains(r1)).isFalse();\n\n    assertThat(r1.contains(r1SECorner)).isFalse();\n    assertThat(r1SECorner.contains(r1)).isFalse();\n\n    assertThat(r1.contains(r1SWCorner)).isFalse();\n    assertThat(r1SWCorner.contains(r1)).isFalse();\n\n    assertThat(r1.contains(r1Above)).isFalse();\n    assertThat(r1Above.contains(r1)).isFalse();\n\n    assertThat(r1.contains(r1Below)).isFalse();\n    assertThat(r1Below.contains(r1)).isFalse();\n\n    assertThat(r1.contains(r1Left)).isFalse();\n    assertThat(r1Left.contains(r1)).isFalse();\n\n    assertThat(r1.contains(r1Right)).isFalse();\n    assertThat(r1Right.contains(r1)).isFalse();\n  }\n\n  @Test\n  public void testPointContainment() {\n\n    QuadTree.Rect r1 = new QuadTree.Rect(0, 0, 5, 5);\n\n    // Corner check\n    assertThat(r1.contains(0, 0)).isTrue();\n    assertThat(r1.contains(0, 5)).isTrue();\n    assertThat(r1.contains(5, 0)).isTrue();\n    assertThat(r1.contains(5, 5)).isTrue();\n\n    // Side check\n    assertThat(r1.contains(0, 1)).isTrue();\n    assertThat(r1.contains(0, 2)).isTrue();\n    assertThat(r1.contains(0, 3)).isTrue();\n    assertThat(r1.contains(0, 4)).isTrue();\n\n    // Side check\n    assertThat(r1.contains(1, 0)).isTrue();\n    assertThat(r1.contains(2, 0)).isTrue();\n    assertThat(r1.contains(3, 0)).isTrue();\n    assertThat(r1.contains(4, 0)).isTrue();\n\n    // Side check\n    assertThat(r1.contains(1, 5)).isTrue();\n    assertThat(r1.contains(2, 5)).isTrue();\n    assertThat(r1.contains(3, 5)).isTrue();\n    assertThat(r1.contains(4, 5)).isTrue();\n\n    // Side check\n    assertThat(r1.contains(5, 1)).isTrue();\n    assertThat(r1.contains(5, 2)).isTrue();\n    assertThat(r1.contains(5, 3)).isTrue();\n    assertThat(r1.contains(5, 4)).isTrue();\n\n    // Inside check\n    assertThat(r1.contains(2, 3)).isTrue();\n    assertThat(r1.contains(1, 1)).isTrue();\n    assertThat(r1.contains(4, 3)).isTrue();\n    assertThat(r1.contains(3, 1)).isTrue();\n\n    // Outside check\n    assertThat(r1.contains(-1, 3)).isFalse();\n    assertThat(r1.contains(-2, -2)).isFalse();\n    assertThat(r1.contains(6, 3)).isFalse();\n    assertThat(r1.contains(3, 6)).isFalse();\n    assertThat(r1.contains(3, -6)).isFalse();\n    assertThat(r1.contains(-3, 6)).isFalse();\n  }\n\n  @Test\n  public void testCountingPoints() {\n\n    final int SZ = 100;\n    QuadTree.Rect region = new QuadTree.Rect(0, 0, SZ, SZ);\n    QuadTree quadTree = new QuadTree(region);\n\n    // Add points on a diagonal\n    for (int i = 0; i <= SZ; i++) quadTree.add(i, i);\n\n    // Query entire region there should be 101 points\n    assertThat(quadTree.count(region)).isEqualTo(101);\n  }\n\n  public int bruteForceCount(int[][] grid, int x1, int y1, int x2, int y2) {\n    int sum = 0;\n    for (int i = y1; i <= y2; i++) for (int j = x1; j <= x2; j++) sum += grid[i][j];\n    return sum;\n  }\n\n  @Test\n  public void randomizedQueryTests() {\n\n    for (int test = 0; test < LOOPS; test++) {\n\n      int W = 1 + (int) (Math.random() * MAX_RAND_NUM);\n      int H = 1 + (int) (Math.random() * MAX_RAND_NUM);\n\n      QuadTree quadTree = new QuadTree(new QuadTree.Rect(0, 0, W, H));\n      int[][] grid = new int[H + 1][W + 1];\n\n      for (int i = 0; i < TEST_SZ; i++) {\n        int x = (int) (Math.random() * (W + 1));\n        int y = (int) (Math.random() * (H + 1));\n        assertThat(quadTree.add(x, y)).isTrue();\n        grid[y][x]++;\n        // System.out.printf(\"(%d, %d)\\n\",x,y);\n      }\n\n      // for (int i = H; i >= 0; i--) System.out.println(Arrays.toString(grid[i]));\n\n      for (int i = 0; i < TEST_SZ; ) {\n\n        int x1 = (int) (Math.random() * (W));\n        int y1 = (int) (Math.random() * (H));\n        int x2 = x1 + (int) (Math.random() * (W - x1));\n        int y2 = y1 + (int) (Math.random() * (H - y1));\n\n        // Make sure region is valid\n        if (x1 <= x2 && y1 <= y2) {\n\n          // System.out.printf(\"(%d, %d) (%d %d)\\n\", x1,y1,x2,y2);\n\n          QuadTree.Rect region = new QuadTree.Rect(x1, y1, x2, y2);\n          int expectedPts = bruteForceCount(grid, x1, y1, x2, y2);\n          int quadTreeCount = quadTree.count(region);\n          // System.out.printf(\"EXPECTED: %d, GOT: %d\\n\", expectedPts, quadTreeCount);\n          assertThat(quadTreeCount).isEqualTo(expectedPts);\n\n          // Increment because we have a valid region\n          i++;\n        }\n      }\n    }\n  }\n\n  /*\n  @Test\n  public void testKNN1() {\n\n    int W = 99, H = 99, NUM_NODES = 2;\n    QuadTree quadTree = new QuadTree(new QuadTree.Rect(0,0,W,H), NUM_NODES);\n\n    int x = 46, y = 92, k = 7;\n\n    // Cluster surrounding point\n    quadTree.add(x, y - 1); // Below\n    quadTree.add(x, y + 1); // Above\n    quadTree.add(x - 1, y); // Left\n    quadTree.add(x + 1, y); // Right\n\n    // Noise points far away left from point in NW quadrant.\n    quadTree.add(0, 77);\n    quadTree.add(4, 56);\n    quadTree.add(2, 80);\n    quadTree.add(6, 60);\n    quadTree.add(8, 90);\n\n    // Noise points in quadrants\n    quadTree.add(25, 25);\n    quadTree.add(75, 25);\n    quadTree.add(25, 75); // Target point in NW quadrant.\n    quadTree.add(75, 75);\n\n    // NE quadrant target points\n    quadTree.add(52, y);\n    quadTree.add(52, y+1);\n    quadTree.add(52, y-1);\n\n    List<QuadTree.Pt> points = quadTree.kNearestNeighbors(k, x, y);\n    System.out.println(points);\n\n    List<QuadTree.SortedPt> sPoints = new ArrayList<>();\n    for (QuadTree.Pt p : quadTree.getPoints()) {\n      sPoints.add(new QuadTree.SortedPt(Math.hypot(p.x - x, p.y - y), p));\n    }\n    Collections.sort(sPoints);\n    for (QuadTree.SortedPt p : sPoints) {\n      System.out.println(p);\n    }\n\n  }\n  */\n\n}\n"}
{"code_source": "package com.williamfiset.algorithms.datastructures.queue;\n\n/**\n * @author liujingkun, liujkon@gmail.com\n * @param <T> the type of element held int the queue\n */\npublic interface Queue<T> {\n  public void offer(T elem);\n\n  public T poll();\n\n  public T peek();\n\n  public int size();\n\n  public boolean isEmpty();\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.queue;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class QueueTest {\n\n  private List<Queue<Integer>> queues = new ArrayList<>();\n\n  @Before\n  public void setup() {\n    queues.add(new ArrayQueue<Integer>(2));\n    queues.add(new LinkedQueue<Integer>());\n    queues.add(new IntQueue(2));\n  }\n\n  @Test\n  public void testEmptyQueue() {\n    for (Queue queue : queues) {\n      assertThat(queue.isEmpty()).isTrue();\n      assertThat(queue.size()).isEqualTo(0);\n    }\n  }\n\n  @Test(expected = Exception.class)\n  public void testPollOnEmpty() {\n    for (Queue queue : queues) {\n      queue.poll();\n    }\n  }\n\n  @Test(expected = Exception.class)\n  public void testPeekOnEmpty() {\n    for (Queue queue : queues) {\n      queue.peek();\n    }\n  }\n\n  @Test\n  public void testOffer() {\n    for (Queue<Integer> queue : queues) {\n      queue.offer(2);\n      assertThat(queue.size()).isEqualTo(1);\n    }\n  }\n\n  @Test\n  public void testPeek() {\n    for (Queue<Integer> queue : queues) {\n      queue.offer(2);\n      assertThat((int) queue.peek()).isEqualTo(2);\n      assertThat(queue.size()).isEqualTo(1);\n    }\n  }\n\n  @Test\n  public void testPoll() {\n    for (Queue<Integer> queue : queues) {\n      queue.offer(2);\n      assertThat((int) queue.poll()).isEqualTo(2);\n      assertThat(queue.size()).isEqualTo(0);\n    }\n  }\n\n  @Test\n  public void testExhaustively() {\n    for (Queue<Integer> queue : queues) {\n      assertThat(queue.isEmpty()).isTrue();\n      queue.offer(1);\n      assertThat(queue.isEmpty()).isFalse();\n      queue.offer(2);\n      assertThat(queue.size()).isEqualTo(2);\n      assertThat((int) queue.peek()).isEqualTo(1);\n      assertThat(queue.size()).isEqualTo(2);\n      assertThat((int) queue.poll()).isEqualTo(1);\n      assertThat(queue.size()).isEqualTo(1);\n      assertThat((int) queue.peek()).isEqualTo(2);\n      assertThat(queue.size()).isEqualTo(1);\n      assertThat((int) queue.poll()).isEqualTo(2);\n      assertThat(queue.size()).isEqualTo(0);\n      assertThat(queue.isEmpty()).isTrue();\n    }\n  }\n}\n"}
{"code_source": "package com.williamfiset.algorithms.sorting;\n\npublic class QuickSelect {\n\n  public Integer quickSelect(int[] ar, int k) {\n    if (ar == null) return null;\n    if (k > ar.length) return null;\n    if (k < 1) return null;\n    return quickSelect(ar, k, 0, ar.length - 1);\n  }\n\n  // Sort interval [lo, hi] inplace recursively, returns value when splitPoint == k - 1\n  private static Integer quickSelect(int[] ar, int k, int lo, int hi) {\n    int index = k - 1;\n    if (lo < hi) {\n      int splitPoint = partition(ar, lo, hi);\n      if (splitPoint == index) {\n        return ar[splitPoint];\n      } else if (splitPoint > index) {\n        return quickSelect(ar, k, lo, splitPoint);\n      }\n      return quickSelect(ar, k, splitPoint + 1, hi);\n    }\n    return ar[lo];\n  }\n\n  // Performs Hoare partition algorithm for quick select, taken from QuickSelect implementation\n  private static int partition(int[] ar, int lo, int hi) {\n    int pivot = ar[lo];\n    int i = lo - 1, j = hi + 1;\n    while (true) {\n      do {\n        i++;\n      } while (ar[i] < pivot);\n      do {\n        j--;\n      } while (ar[j] > pivot);\n      if (i < j) swap(ar, i, j);\n      else return j;\n    }\n  }\n\n  // Swap two elements\n  private static void swap(int[] ar, int i, int j) {\n    int tmp = ar[i];\n    ar[i] = ar[j];\n    ar[j] = tmp;\n  }\n\n  public static void main(String[] args) {\n    QuickSelect quickSelect = new QuickSelect();\n    int[] array = {-10, 4, 6, 4, 8, -13, 1, 3};\n    int kthLargestElement = quickSelect.quickSelect(array, 3);\n    // Prints: 1\n    System.out.println(kthLargestElement);\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.sorting;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.williamfiset.algorithms.utils.TestUtils;\nimport java.util.Arrays;\nimport org.junit.Test;\n\npublic class QuickSelectTest {\n\n  @Test\n  public void testQuickSelect() {\n    for (int size = 1; size < 500; size++) {\n      // Given\n      QuickSelect quickSelect = new QuickSelect();\n      int[] values = TestUtils.randomIntegerArray(size, -100, 100);\n\n      for (int k = 1; k <= size; k++) {\n        int[] copy = values.clone();\n        Arrays.sort(values);\n\n        // When\n        int kthLargestElement = quickSelect.quickSelect(copy, k);\n\n        // Then\n        assertThat(kthLargestElement).isEqualTo(values[k - 1]);\n      }\n    }\n  }\n}\n"}
{"code_source": "/**\n * An implementation of Radix Sort.\n *\n * <p>See https://en.wikipedia.org/wiki/Radix_sort for details on runtime and complexity Radix sorts\n * operates in O(nw) time, where n is the number of keys, and w is the key length where w is\n * constant on primitive types like Integer which gives it a better performance than other\n * compare-based sort algorithms, like i.e. QuickSort\n *\n * <p>Time Complexity: O(nw)\n *\n * <p>Run with:\n *\n * <p>$ ./gradlew run -Palgorithm=sorting.RadixSort\n *\n * @author EAlexa\n */\npackage com.williamfiset.algorithms.sorting;\n\npublic class RadixSort implements InplaceSort {\n\n  @Override\n  public void sort(int[] values) {\n    RadixSort.radixSort(values);\n  }\n\n  static int getMax(int[] array) {\n    int max = array[0];\n    for (int i = 0; i < array.length; i++) {\n      if (array[i] > max) {\n        max = array[i];\n      }\n    }\n    return max;\n  }\n\n  static int calculateNumberOfDigits(int number) {\n    return (int) Math.log10(number) + 1;\n  }\n\n  // Requires all numbers to be greater than or equal to 1\n  public static void radixSort(int[] numbers) {\n    if (numbers == null || numbers.length <= 1) {\n      return;\n    }\n    int maximum = getMax(numbers);\n    int numberOfDigits = calculateNumberOfDigits(maximum);\n    int placeValue = 1;\n    while (numberOfDigits-- > 0) {\n      countSort(numbers, placeValue);\n      placeValue *= 10;\n    }\n  }\n\n  private static void countSort(int[] numbers, int placeValue) {\n    int range = 10;\n\n    int[] frequency = new int[range];\n    int[] sortedValues = new int[numbers.length];\n\n    for (int i = 0; i < numbers.length; i++) {\n      int digit = (numbers[i] / placeValue) % range;\n      frequency[digit]++;\n    }\n\n    for (int i = 1; i < range; i++) {\n      frequency[i] += frequency[i - 1];\n    }\n\n    for (int i = numbers.length - 1; i >= 0; i--) {\n      int digit = (numbers[i] / placeValue) % range;\n      sortedValues[frequency[digit] - 1] = numbers[i];\n      frequency[digit]--;\n    }\n\n    System.arraycopy(sortedValues, 0, numbers, 0, numbers.length);\n  }\n\n  public static void main(String[] args) {\n    InplaceSort sorter = new RadixSort();\n    int[] numbers = {387, 468, 134, 123, 68, 221, 769, 37, 7, 890, 1, 587};\n    sorter.sort(numbers);\n    // Prints:\n    // [1, 7, 37, 68, 123, 134, 221, 387, 468, 587, 769, 890]\n    System.out.println(java.util.Arrays.toString(numbers));\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.sorting;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.Arrays;\nimport java.util.Random;\nimport org.junit.Test;\n\npublic class RadixSortTest {\n  static Random random = new Random();\n\n  @Test\n  public void testGetMax() {\n    int[] array = {5, 7, 1, 13, 1013, 287, 912};\n    assertThat(RadixSort.getMax(array)).isEqualTo(1013);\n  }\n\n  @Test\n  public void testCalculateNumberOfDigits() {\n    assertThat(RadixSort.calculateNumberOfDigits(1089)).isEqualTo(4);\n    assertThat(RadixSort.calculateNumberOfDigits(19)).isEqualTo(2);\n  }\n\n  @Test\n  public void randomRadixSort_smallNumbers() {\n    for (int size = 0; size < 1000; size++) {\n      int[] values = new int[size];\n      for (int i = 0; i < size; i++) {\n        values[i] = randInt(1, 50);\n      }\n      int[] copy = values.clone();\n\n      Arrays.sort(values);\n      RadixSort.radixSort(copy);\n\n      assertThat(values).isEqualTo(copy);\n    }\n  }\n\n  @Test\n  public void randomRadixSort_largeNumbers() {\n    for (int size = 0; size < 1000; size++) {\n      int[] values = new int[size];\n      for (int i = 0; i < size; i++) {\n        values[i] = randInt(1, Integer.MAX_VALUE);\n      }\n      int[] copy = values.clone();\n\n      Arrays.sort(values);\n      RadixSort.radixSort(copy);\n\n      assertThat(values).isEqualTo(copy);\n    }\n  }\n\n  // return a random number between [min, max]\n  static int randInt(int min, int max) {\n    return random.nextInt((max - min) + 1) + min;\n  }\n}\n"}
{"code_source": "/**\n * This file contains an implementation of a Red-Black tree. A RB tree is a special type of binary\n * tree which self balances itself to keep operations logarithmic.\n *\n * <p>Great visualization tool: https://www.cs.usfca.edu/~galles/visualization/RedBlack.html\n *\n * @author nishantc1527\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.balancedtree;\n\nimport java.awt.*;\n\npublic class RedBlackTree<T extends Comparable<T>> implements Iterable<T> {\n\n  public static final boolean RED = true;\n  public static final boolean BLACK = false;\n\n  public class Node {\n\n    // The color of this node. By default all nodes start red.\n    public boolean color = RED;\n\n    // The value/data contained within the node.\n    public T value;\n\n    // The left, right and parent references of this node.\n    public Node left, right, parent;\n\n    public Node(T value, Node parent) {\n      this.value = value;\n      this.parent = parent;\n    }\n\n    public Node(boolean color, T value) {\n      this.color = color;\n      this.value = value;\n    }\n\n    Node(T key, boolean color, Node parent, Node left, Node right) {\n      this.value = key;\n      this.color = color;\n\n      if (parent == null && left == null && right == null) {\n        parent = this;\n        left = this;\n        right = this;\n      }\n\n      this.parent = parent;\n      this.left = left;\n      this.right = right;\n    }\n\n    public boolean getColor() {\n      return color;\n    }\n\n    public void setColor(boolean color) {\n      this.color = color;\n    }\n\n    public T getValue() {\n      return value;\n    }\n\n    public void setValue(T value) {\n      this.value = value;\n    }\n\n    public Node getLeft() {\n      return left;\n    }\n\n    public void setLeft(Node left) {\n      this.left = left;\n    }\n\n    public Node getRight() {\n      return right;\n    }\n\n    public void setRight(Node right) {\n      this.right = right;\n    }\n\n    public Node getParent() {\n      return parent;\n    }\n\n    public void setParent(Node parent) {\n      this.parent = parent;\n    }\n  }\n\n  // The root node of the RB tree.\n  public Node root;\n\n  // Tracks the number of nodes inside the tree.\n  private int nodeCount = 0;\n\n  public final Node NIL;\n\n  public RedBlackTree() {\n    NIL = new Node(BLACK, null);\n    NIL.left = NIL;\n    NIL.right = NIL;\n    NIL.parent = NIL;\n\n    root = NIL;\n  }\n\n  // Returns the number of nodes in the tree.\n  public int size() {\n    return nodeCount;\n  }\n\n  // Returns whether or not the tree is empty.\n  public boolean isEmpty() {\n    return size() == 0;\n  }\n\n  public boolean contains(T value) {\n\n    Node node = root;\n\n    if (node == null || value == null) return false;\n\n    while (node != NIL) {\n\n      // Compare current value to the value in the node.\n      int cmp = value.compareTo(node.value);\n\n      // Dig into left subtree.\n      if (cmp < 0) node = node.left;\n\n      // Dig into right subtree.\n      else if (cmp > 0) node = node.right;\n\n      // Found value in tree.\n      else return true;\n    }\n\n    return false;\n  }\n\n  public boolean insert(T val) {\n    if (val == null) {\n      throw new IllegalArgumentException(\"Red-Black tree does not allow null values.\");\n    }\n\n    Node x = root, y = NIL;\n\n    while (x != NIL) {\n      y = x;\n\n      if (x.getValue().compareTo(val) > 0) {\n        x = x.left;\n      } else if (x.getValue().compareTo(val) < 0) {\n        x = x.right;\n      } else {\n        return false;\n      }\n    }\n\n    Node z = new Node(val, RED, y, NIL, NIL);\n\n    if (y == NIL) {\n      root = z;\n    } else if (z.getValue().compareTo(y.getValue()) < 0) {\n      y.left = z;\n    } else {\n      y.right = z;\n    }\n    insertFix(z);\n\n    nodeCount++;\n    return true;\n  }\n\n  private void insertFix(Node z) {\n    Node y;\n    while (z.parent.color == RED) {\n      if (z.parent == z.parent.parent.left) {\n        y = z.parent.parent.right;\n        if (y.color == RED) {\n          z.parent.color = BLACK;\n          y.color = BLACK;\n          z.parent.parent.color = RED;\n          z = z.parent.parent;\n        } else {\n          if (z == z.parent.right) {\n            z = z.parent;\n            leftRotate(z);\n          }\n          z.parent.color = BLACK;\n          z.parent.parent.color = RED;\n          rightRotate(z.parent.parent);\n        }\n      } else {\n        y = z.parent.parent.left;\n        if (y.color == RED) {\n          z.parent.color = BLACK;\n          y.color = BLACK;\n          z.parent.parent.color = RED;\n          z = z.parent.parent;\n        } else {\n          if (z == z.parent.left) {\n            z = z.parent;\n            rightRotate(z);\n          }\n          z.parent.color = BLACK;\n          z.parent.parent.color = RED;\n          leftRotate(z.parent.parent);\n        }\n      }\n    }\n    root.setColor(BLACK);\n    NIL.setParent(null);\n  }\n\n  private void leftRotate(Node x) {\n    Node y = x.right;\n    x.setRight(y.getLeft());\n    if (y.getLeft() != NIL) y.getLeft().setParent(x);\n    y.setParent(x.getParent());\n    if (x.getParent() == NIL) root = y;\n    if (x == x.getParent().getLeft()) x.getParent().setLeft(y);\n    else x.getParent().setRight(y);\n    y.setLeft(x);\n    x.setParent(y);\n  }\n\n  private void rightRotate(Node y) {\n    Node x = y.left;\n    y.left = x.right;\n    if (x.right != NIL) x.right.parent = y;\n    x.parent = y.parent;\n    if (y.parent == NIL) root = x;\n    if (y == y.parent.left) y.parent.left = x;\n    else y.parent.right = x;\n    x.right = y;\n    y.parent = x;\n  }\n\n  public boolean delete(T key) {\n    Node z;\n    if (key == null || (z = (search(key, root))) == NIL) return false;\n    Node x;\n    Node y = z; // temporary reference y\n    boolean y_original_color = y.getColor();\n\n    if (z.getLeft() == NIL) {\n      x = z.getRight();\n      transplant(z, z.getRight());\n    } else if (z.getRight() == NIL) {\n      x = z.getLeft();\n      transplant(z, z.getLeft());\n    } else {\n      y = successor(z.getRight());\n      y_original_color = y.getColor();\n      x = y.getRight();\n      if (y.getParent() == z) x.setParent(y);\n      else {\n        transplant(y, y.getRight());\n        y.setRight(z.getRight());\n        y.getRight().setParent(y);\n      }\n      transplant(z, y);\n      y.setLeft(z.getLeft());\n      y.getLeft().setParent(y);\n      y.setColor(z.getColor());\n    }\n    if (y_original_color == BLACK) deleteFix(x);\n    nodeCount--;\n    return true;\n  }\n\n  private void deleteFix(Node x) {\n    while (x != root && x.getColor() == BLACK) {\n      if (x == x.getParent().getLeft()) {\n        Node w = x.getParent().getRight();\n        if (w.getColor() == RED) {\n          w.setColor(BLACK);\n          x.getParent().setColor(RED);\n          leftRotate(x.parent);\n          w = x.getParent().getRight();\n        }\n        if (w.getLeft().getColor() == BLACK && w.getRight().getColor() == BLACK) {\n          w.setColor(RED);\n          x = x.getParent();\n          continue;\n        } else if (w.getRight().getColor() == BLACK) {\n          w.getLeft().setColor(BLACK);\n          w.setColor(RED);\n          rightRotate(w);\n          w = x.getParent().getRight();\n        }\n        if (w.getRight().getColor() == RED) {\n          w.setColor(x.getParent().getColor());\n          x.getParent().setColor(BLACK);\n          w.getRight().setColor(BLACK);\n          leftRotate(x.getParent());\n          x = root;\n        }\n      } else {\n        Node w = (x.getParent().getLeft());\n        if (w.color == RED) {\n          w.color = BLACK;\n          x.getParent().setColor(RED);\n          rightRotate(x.getParent());\n          w = (x.getParent()).getLeft();\n        }\n        if (w.right.color == BLACK && w.left.color == BLACK) {\n          w.color = RED;\n          x = x.getParent();\n          continue;\n        } else if (w.left.color == BLACK) {\n          w.right.color = BLACK;\n          w.color = RED;\n          leftRotate(w);\n          w = (x.getParent().getLeft());\n        }\n        if (w.left.color == RED) {\n          w.color = x.getParent().getColor();\n          x.getParent().setColor(BLACK);\n          w.left.color = BLACK;\n          rightRotate(x.getParent());\n          x = root;\n        }\n      }\n    }\n    x.setColor(BLACK);\n  }\n\n  private Node successor(Node root) {\n    if (root == NIL || root.left == NIL) return root;\n    else return successor(root.left);\n  }\n\n  private void transplant(Node u, Node v) {\n    if (u.parent == NIL) {\n      root = v;\n    } else if (u == u.parent.left) {\n      u.parent.left = v;\n    } else u.parent.right = v;\n    v.parent = u.parent;\n  }\n\n  private Node search(T val, Node curr) {\n    if (curr == NIL) return NIL;\n    else if (curr.value.equals(val)) return curr;\n    else if (curr.value.compareTo(val) < 0) return search(val, curr.right);\n    else return search(val, curr.left);\n  }\n\n  public int height() {\n    return height(root);\n  }\n\n  private int height(Node curr) {\n    if (curr == NIL) {\n      return 0;\n    }\n    if (curr.left == NIL && curr.right == NIL) {\n      return 1;\n    }\n\n    return 1 + Math.max(height(curr.left), height(curr.right));\n  }\n\n  private void swapColors(Node a, Node b) {\n    boolean tmpColor = a.color;\n    a.color = b.color;\n    b.color = tmpColor;\n  }\n\n  // Sometimes the left or right child node of a parent changes and the\n  // parent's reference needs to be updated to point to the new child.\n  // This is a helper method to do just that.\n  private void updateParentChildLink(Node parent, Node oldChild, Node newChild) {\n    if (parent != NIL) {\n      if (parent.left == oldChild) {\n        parent.left = newChild;\n      } else {\n        parent.right = newChild;\n      }\n    }\n  }\n\n  // Helper method to find the leftmost node (which has the smallest value)\n  private Node findMin(Node node) {\n    while (node.left != NIL) node = node.left;\n    return node;\n  }\n\n  // Helper method to find the rightmost node (which has the largest value)\n  private Node findMax(Node node) {\n    while (node.right != NIL) node = node.right;\n    return node;\n  }\n\n  // Returns as iterator to traverse the tree in order.\n  @Override\n  public java.util.Iterator<T> iterator() {\n\n    final int expectedNodeCount = nodeCount;\n    final java.util.Stack<Node> stack = new java.util.Stack<>();\n    stack.push(root);\n\n    return new java.util.Iterator<T>() {\n      Node trav = root;\n\n      @Override\n      public boolean hasNext() {\n        if (expectedNodeCount != nodeCount) throw new java.util.ConcurrentModificationException();\n        return root != NIL && !stack.isEmpty();\n      }\n\n      @Override\n      public T next() {\n\n        if (expectedNodeCount != nodeCount) throw new java.util.ConcurrentModificationException();\n\n        while (trav != NIL && trav.left != NIL) {\n          stack.push(trav.left);\n          trav = trav.left;\n        }\n\n        Node node = stack.pop();\n\n        if (node.right != NIL) {\n          stack.push(node.right);\n          trav = node.right;\n        }\n\n        return node.value;\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n  // Example usage of RB tree:\n  public static void main(String[] args) {\n\n    int[] values = {5, 8, 1, -4, 6, -2, 0, 7};\n    RedBlackTree<Integer> rbTree = new RedBlackTree<>();\n    for (int v : values) rbTree.insert(v);\n\n    System.out.printf(\"RB tree contains %d: %s\\n\", 6, rbTree.contains(6));\n    System.out.printf(\"RB tree contains %d: %s\\n\", -5, rbTree.contains(-5));\n    System.out.printf(\"RB tree contains %d: %s\\n\", 1, rbTree.contains(1));\n    System.out.printf(\"RB tree contains %d: %s\\n\", 99, rbTree.contains(99));\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.balancedtree;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.*;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class RedBlackTreeTest {\n\n  static final int MAX_RAND_NUM = +100000;\n  static final int MIN_RAND_NUM = -100000;\n\n  static final int TEST_SZ = 9000;\n\n  private RedBlackTree<Integer> tree;\n\n  @Before\n  public void setup() {\n    tree = new RedBlackTree<>();\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testNullInsertion() {\n    tree.insert(null);\n  }\n\n  @Test\n  public void testTreeContainsNull() {\n    assertThat(tree.contains(null)).isFalse();\n  }\n\n  @Test\n  public void testLeftLeftRotation() {\n\n    tree.insert(3);\n    tree.insert(2);\n    tree.insert(1);\n\n    assertThat(tree.root.value.intValue()).isEqualTo(2);\n    assertThat(tree.root.left.value.intValue()).isEqualTo(1);\n    assertThat(tree.root.right.value.intValue()).isEqualTo(3);\n\n    assertThat(tree.root.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.left.color).isEqualTo(RedBlackTree.RED);\n    assertThat(tree.root.right.color).isEqualTo(RedBlackTree.RED);\n\n    assertThat(tree.root).isEqualTo(tree.root.left.parent);\n    assertThat(tree.root).isEqualTo(tree.root.right.parent);\n\n    assertNullChildren(tree, tree.root.left, tree.root.right);\n    assertCorrectParentLinks(tree, tree.root, tree.NIL);\n  }\n\n  @Test\n  public void testLeftRightRotation() {\n\n    tree.insert(3);\n    tree.insert(1);\n    tree.insert(2);\n\n    assertThat(tree.root.value.intValue()).isEqualTo(2);\n    assertThat(tree.root.left.value.intValue()).isEqualTo(1);\n    assertThat(tree.root.right.value.intValue()).isEqualTo(3);\n\n    assertThat(tree.root.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.left.color).isEqualTo(RedBlackTree.RED);\n    assertThat(tree.root.right.color).isEqualTo(RedBlackTree.RED);\n\n    assertThat(tree.root).isEqualTo(tree.root.left.parent);\n    assertThat(tree.root).isEqualTo(tree.root.right.parent);\n\n    assertNullChildren(tree, tree.root.left, tree.root.right);\n    assertCorrectParentLinks(tree, tree.root, tree.NIL);\n  }\n\n  @Test\n  public void testRightLeftRotation() {\n\n    tree.insert(1);\n    tree.insert(3);\n    tree.insert(2);\n\n    assertThat(tree.root.value.intValue()).isEqualTo(2);\n    assertThat(tree.root.left.value.intValue()).isEqualTo(1);\n    assertThat(tree.root.right.value.intValue()).isEqualTo(3);\n\n    assertThat(tree.root.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.left.color).isEqualTo(RedBlackTree.RED);\n    assertThat(tree.root.right.color).isEqualTo(RedBlackTree.RED);\n\n    assertThat(tree.root).isEqualTo(tree.root.left.parent);\n    assertThat(tree.root).isEqualTo(tree.root.right.parent);\n\n    assertNullChildren(tree, tree.root.left, tree.root.right);\n    assertCorrectParentLinks(tree, tree.root, tree.NIL);\n  }\n\n  @Test\n  public void testRightRightRotation() {\n\n    tree.insert(1);\n    tree.insert(2);\n    tree.insert(3);\n\n    assertThat(tree.root.value.intValue()).isEqualTo(2);\n    assertThat(tree.root.left.value.intValue()).isEqualTo(1);\n    assertThat(tree.root.right.value.intValue()).isEqualTo(3);\n\n    assertThat(tree.root.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.left.color).isEqualTo(RedBlackTree.RED);\n    assertThat(tree.root.right.color).isEqualTo(RedBlackTree.RED);\n\n    assertThat(tree.root).isEqualTo(tree.root.left.parent);\n    assertThat(tree.root).isEqualTo(tree.root.right.parent);\n\n    assertNullChildren(tree, tree.root.left, tree.root.right);\n    assertCorrectParentLinks(tree, tree.root, tree.NIL);\n  }\n\n  @Test\n  public void testLeftUncleCase() {\n\n    /* Red left uncle case. */\n\n    tree.insert(1);\n    tree.insert(2);\n    tree.insert(3);\n    tree.insert(4);\n\n    assertThat(tree.root.value.intValue()).isEqualTo(2);\n    assertThat(tree.root.left.value.intValue()).isEqualTo(1);\n    assertThat(tree.root.right.value.intValue()).isEqualTo(3);\n    assertThat(tree.root.right.right.value.intValue()).isEqualTo(4);\n\n    assertThat(tree.root.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.left.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.right.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.right.right.color).isEqualTo(RedBlackTree.RED);\n\n    assertThat(tree.root.right.left).isEqualTo(tree.NIL);\n    assertNullChildren(tree, tree.root.left, tree.root.right.right);\n    assertCorrectParentLinks(tree, tree.root, tree.NIL);\n\n    /* Black left uncle case. */\n\n    tree.insert(5);\n\n    assertThat(tree.root.value.intValue()).isEqualTo(2);\n    assertThat(tree.root.left.value.intValue()).isEqualTo(1);\n    assertThat(tree.root.right.value.intValue()).isEqualTo(4);\n    assertThat(tree.root.right.left.value.intValue()).isEqualTo(3);\n    assertThat(tree.root.right.right.value.intValue()).isEqualTo(5);\n\n    assertThat(tree.root.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.left.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.right.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.right.left.color).isEqualTo(RedBlackTree.RED);\n    assertThat(tree.root.right.right.color).isEqualTo(RedBlackTree.RED);\n    assertCorrectParentLinks(tree, tree.root, tree.NIL);\n  }\n\n  @Test\n  public void testRightUncleCase() {\n\n    /* Red right uncle case. */\n\n    tree.insert(2);\n    tree.insert(3);\n    tree.insert(4);\n    tree.insert(1);\n\n    assertThat(tree.root.value.intValue()).isEqualTo(3);\n    assertThat(tree.root.left.value.intValue()).isEqualTo(2);\n    assertThat(tree.root.right.value.intValue()).isEqualTo(4);\n    assertThat(tree.root.left.left.value.intValue()).isEqualTo(1);\n\n    assertThat(tree.root.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.left.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.right.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.left.left.color).isEqualTo(RedBlackTree.RED);\n\n    assertThat(tree.root.right.left).isEqualTo(tree.NIL);\n    assertThat(tree.root.left.right).isEqualTo(tree.NIL);\n    assertNullChildren(tree, tree.root.right, tree.root.left.left);\n    assertCorrectParentLinks(tree, tree.root, tree.NIL);\n\n    /* Black right uncle case. */\n\n    tree.insert(0);\n\n    assertThat(tree.root.value.intValue()).isEqualTo(3);\n    assertThat(tree.root.left.value.intValue()).isEqualTo(1);\n    assertThat(tree.root.right.value.intValue()).isEqualTo(4);\n    assertThat(tree.root.left.left.value.intValue()).isEqualTo(0);\n    assertThat(tree.root.left.right.value.intValue()).isEqualTo(2);\n\n    assertThat(tree.root.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.left.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.right.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.left.left.color).isEqualTo(RedBlackTree.RED);\n    assertThat(tree.root.left.right.color).isEqualTo(RedBlackTree.RED);\n    assertCorrectParentLinks(tree, tree.root, tree.NIL);\n  }\n\n  @Test\n  public void interestingCase1() {\n\n    int[] values = {41, 44, 95, 83, 72, 66, 94, 90, 59};\n    for (int v : values) tree.insert(v);\n\n    assertThat(tree.root.value.intValue()).isEqualTo(44);\n\n    assertThat(tree.root.left.value.intValue()).isEqualTo(41);\n    assertThat(tree.root.right.value.intValue()).isEqualTo(83);\n\n    assertThat(tree.root.right.left.value.intValue()).isEqualTo(66);\n    assertThat(tree.root.right.right.value.intValue()).isEqualTo(94);\n\n    assertThat(tree.root.right.left.left.value.intValue()).isEqualTo(59);\n    assertThat(tree.root.right.left.right.value.intValue()).isEqualTo(72);\n    assertThat(tree.root.right.right.left.value.intValue()).isEqualTo(90);\n    assertThat(tree.root.right.right.right.value.intValue()).isEqualTo(95);\n\n    assertThat(tree.root.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.left.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.right.color).isEqualTo(RedBlackTree.RED);\n    assertThat(tree.root.right.left.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.right.right.color).isEqualTo(RedBlackTree.BLACK);\n    assertThat(tree.root.right.left.left.color).isEqualTo(RedBlackTree.RED);\n    assertThat(tree.root.right.left.right.color).isEqualTo(RedBlackTree.RED);\n    assertThat(tree.root.right.right.left.color).isEqualTo(RedBlackTree.RED);\n    assertThat(tree.root.right.right.right.color).isEqualTo(RedBlackTree.RED);\n  }\n\n  @Test\n  public void testRandomizedValueInsertionsAgainstTreeSet() {\n\n    TreeSet<Integer> set = new TreeSet<>();\n    for (int i = 0; i < TEST_SZ; i++) {\n      int v = randValue();\n      assertThat(tree.insert(v)).isEqualTo(set.add(v));\n      assertThat(tree.size()).isEqualTo(tree.size());\n      assertThat(tree.contains(v)).isTrue();\n      assertBinarySearchTreeInvariant(tree, tree.root);\n    }\n  }\n\n  @Test\n  public void testRemoval() {\n    tree.insert(5);\n    tree.insert(7);\n    tree.insert(9);\n\n    tree.delete(5);\n    assertThat(tree.contains(5)).isFalse();\n\n    tree.delete(7);\n    assertThat(tree.contains(7)).isFalse();\n\n    tree.delete(9);\n    assertThat(tree.contains(9)).isFalse();\n  }\n\n  @Test\n  public void testNullRemoval() {\n    assertThat(tree.delete(null)).isFalse();\n  }\n\n  @Test\n  public void testNumberDoesntExist() {\n    assertThat(tree.delete(0)).isFalse();\n  }\n\n  @Test\n  public void randomRemoveTests() {\n    TreeSet<Integer> ts = new TreeSet<>();\n    for (int i = 0; i < TEST_SZ; i++) {\n\n      List<Integer> lst = genRandList(i);\n      for (Integer value : lst) {\n        tree.insert(value);\n        ts.add(value);\n      }\n      Collections.shuffle(lst);\n\n      for (int j = 0; j < i; j++) {\n\n        Integer value = lst.get(j);\n        boolean treeSetRemove = ts.remove(value);\n        boolean treeRemove = tree.delete(value);\n        assertThat(treeSetRemove).isEqualTo(treeRemove);\n        assertThat(tree.contains(value)).isFalse();\n        assertThat(tree.size()).isEqualTo(i - j - 1);\n      }\n      assertThat(ts.isEmpty()).isEqualTo(tree.isEmpty());\n    }\n  }\n\n  @Test\n  public void testTreeHeight() {\n    for (int n = 1; n <= TEST_SZ; n++) {\n\n      tree.insert(randValue());\n      double height = tree.height();\n\n      // RB tree height upper bound:\n      // https://en.wikipedia.org/wiki/AVL_tree#Comparison_to_other_structures\n      double upperBound = 2 * (Math.log(n + 1) / Math.log(2));\n\n      assertThat(height).isAtMost(upperBound);\n    }\n  }\n\n  static void assertNullChildren(RedBlackTree tree, RedBlackTree.Node... nodes) {\n    for (RedBlackTree.Node node : nodes) {\n      assertThat(node.left).isEqualTo(tree.NIL);\n      assertThat(node.right).isEqualTo(tree.NIL);\n    }\n  }\n\n  static void assertCorrectParentLinks(\n      RedBlackTree tree, RedBlackTree.Node node, RedBlackTree.Node parent) {\n    if (node == tree.NIL) return;\n    try {\n      assertThat(node.parent).isEqualTo(parent);\n    } catch (AssertionError e) {\n      e.printStackTrace();\n    }\n    assertCorrectParentLinks(tree, node.left, node);\n    assertCorrectParentLinks(tree, node.right, node);\n  }\n\n  // Make sure all left child nodes are smaller in value than their parent and\n  // make sure all right child nodes are greater in value than their parent.\n  // (Used only for testing)\n  boolean assertBinarySearchTreeInvariant(RedBlackTree tree, RedBlackTree<Integer>.Node node) {\n    if (node == tree.NIL) return true;\n    boolean isValid = true;\n    if (node.left != tree.NIL) isValid = node.left.value.compareTo(node.value) < 0;\n    if (node.right != tree.NIL) isValid = isValid && node.right.value.compareTo(node.value) > 0;\n    return isValid\n        && assertBinarySearchTreeInvariant(tree, node.left)\n        && assertBinarySearchTreeInvariant(tree, node.right);\n  }\n\n  // Used for testing.\n  boolean validateParentLinksAreCorrect(RedBlackTree.Node node, RedBlackTree.Node parent) {\n    if (node == tree.NIL) return true;\n    if (node.parent != parent) return false;\n    return validateParentLinksAreCorrect(node.left, node)\n        && validateParentLinksAreCorrect(node.right, node);\n  }\n\n  static List<Integer> genRandList(int sz) {\n    List<Integer> lst = new ArrayList<>(sz);\n    for (int i = 0; i < sz; i++) lst.add(i); // unique values.\n    Collections.shuffle(lst);\n    return lst;\n  }\n\n  public static int randValue() {\n    return (int) (Math.random() * MAX_RAND_NUM * 2) + MIN_RAND_NUM;\n  }\n}\n"}
{"code_source": "/**\n * Often when working with trees we are given them as a graph with undirected edges, however\n * sometimes a better representation is a rooted tree.\n *\n * <p>Time Complexity: O(V+E)\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.graphtheory.treealgorithms;\n\nimport java.util.*;\n\npublic class RootingTree {\n\n  public static class TreeNode {\n    private int id;\n    private TreeNode parent;\n    private List<TreeNode> children;\n\n    // Useful constructor for root node.\n    public TreeNode(int id) {\n      this(id, /*parent=*/ null);\n    }\n\n    public TreeNode(int id, TreeNode parent) {\n      this.id = id;\n      this.parent = parent;\n      children = new LinkedList<>();\n    }\n\n    public void addChildren(TreeNode... nodes) {\n      for (TreeNode node : nodes) {\n        children.add(node);\n      }\n    }\n\n    public int id() {\n      return id;\n    }\n\n    public TreeNode parent() {\n      return parent;\n    }\n\n    public List<TreeNode> children() {\n      return children;\n    }\n\n    @Override\n    public String toString() {\n      return String.valueOf(id);\n    }\n\n    // Only checks id equality not subtree equality.\n    @Override\n    public boolean equals(Object obj) {\n      if (obj instanceof TreeNode) {\n        return id() == ((TreeNode) obj).id();\n      }\n      return false;\n    }\n  }\n\n  public static TreeNode rootTree(List<List<Integer>> graph, int rootId) {\n    TreeNode root = new TreeNode(rootId);\n    return buildTree(graph, root);\n  }\n\n  // Do dfs to construct rooted tree.\n  private static TreeNode buildTree(List<List<Integer>> graph, TreeNode node) {\n    for (int childId : graph.get(node.id())) {\n      // Ignore adding an edge pointing back to parent.\n      if (node.parent() != null && childId == node.parent().id()) {\n        continue;\n      }\n\n      TreeNode child = new TreeNode(childId, node);\n      node.addChildren(child);\n\n      buildTree(graph, child);\n    }\n    return node;\n  }\n\n  /** ********** TESTING ********* */\n\n  // Create a graph as a adjacency list\n  private static List<List<Integer>> createGraph(int n) {\n    List<List<Integer>> graph = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) graph.add(new LinkedList<>());\n    return graph;\n  }\n\n  private static void addUndirectedEdge(List<List<Integer>> graph, int from, int to) {\n    graph.get(from).add(to);\n    graph.get(to).add(from);\n  }\n\n  public static void main(String[] args) {\n\n    List<List<Integer>> graph = createGraph(9);\n    addUndirectedEdge(graph, 0, 1);\n    addUndirectedEdge(graph, 2, 1);\n    addUndirectedEdge(graph, 2, 3);\n    addUndirectedEdge(graph, 3, 4);\n    addUndirectedEdge(graph, 5, 3);\n    addUndirectedEdge(graph, 2, 6);\n    addUndirectedEdge(graph, 6, 7);\n    addUndirectedEdge(graph, 6, 8);\n\n    // Rooted at 6 the tree should look like:\n    //           6\n    //      2    7     8\n    //    1   3\n    //  0    4 5\n\n    TreeNode root = rootTree(graph, 6);\n\n    // Layer 0: [6]\n    System.out.println(root);\n\n    // Layer 1: [2, 7, 8]\n    System.out.println(root.children);\n\n    // Layer 2: [1, 3]\n    System.out.println(root.children.get(0).children);\n\n    // Layer 3: [0], [4, 5]\n    System.out.println(\n        root.children.get(0).children.get(0).children\n            + \", \"\n            + root.children.get(0).children.get(1).children);\n\n    // Rooted at 3 the tree should look like:\n    //               3\n    //     2         4        5\n    //  6     1\n    // 7 8    0\n\n    // Layer 0: [3]\n    root = rootTree(graph, 3);\n    System.out.println();\n    System.out.println(root);\n\n    // Layer 1: [2, 4, 5]\n    System.out.println(root.children);\n\n    // Layer 2: [1, 6]\n    System.out.println(root.children.get(0).children);\n\n    // Layer 3: [0], [7, 8]\n    System.out.println(\n        root.children.get(0).children.get(0).children\n            + \", \"\n            + root.children.get(0).children.get(1).children);\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.graphtheory.treealgorithms;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.williamfiset.algorithms.graphtheory.treealgorithms.RootingTree.TreeNode;\nimport java.util.*;\nimport org.junit.*;\n\npublic class RootingTreeTest {\n\n  // Create a graph as a adjacency list\n  private static List<List<Integer>> createGraph(int n) {\n    List<List<Integer>> graph = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) graph.add(new LinkedList<>());\n    return graph;\n  }\n\n  private static void addUndirectedEdge(List<List<Integer>> graph, int from, int to) {\n    graph.get(from).add(to);\n    graph.get(to).add(from);\n  }\n\n  private static List<List<Integer>> getGraph1() {\n    List<List<Integer>> graph = createGraph(9);\n    addUndirectedEdge(graph, 0, 1);\n    addUndirectedEdge(graph, 2, 1);\n    addUndirectedEdge(graph, 2, 3);\n    addUndirectedEdge(graph, 3, 4);\n    addUndirectedEdge(graph, 5, 3);\n    addUndirectedEdge(graph, 2, 6);\n    addUndirectedEdge(graph, 6, 7);\n    addUndirectedEdge(graph, 6, 8);\n    return graph;\n  }\n\n  @Test\n  public void testSimpleRooting1() {\n    List<List<Integer>> graph1 = getGraph1();\n    // Graph 1 rooted at 6 should look like:\n    //           6\n    //      2    7     8\n    //    1   3\n    //  0    4 5\n\n    TreeNode node6 = RootingTree.rootTree(graph1, 6);\n\n    // Layer 0: [6]\n    assertThat(node6.id()).isEqualTo(6);\n    assertThat(node6.parent()).isEqualTo(null);\n\n    // Layer 1: [2, 7, 8]\n    List<TreeNode> children = node6.children();\n    TreeNode node2 = new TreeNode(2, node6);\n    TreeNode node7 = new TreeNode(7, node6);\n    TreeNode node8 = new TreeNode(8, node6);\n    assertThat(children).containsExactly(node2, node7, node8);\n\n    // Layer 2: [1, 3]\n    TreeNode node1 = new TreeNode(1, node2);\n    TreeNode node3 = new TreeNode(3, node2);\n    assertThat(node6.children().get(0).children()).containsExactly(node1, node3);\n\n    // Layer 3: [0], [4, 5]\n    TreeNode node0 = new TreeNode(0, node1);\n    TreeNode node4 = new TreeNode(4, node3);\n    TreeNode node5 = new TreeNode(5, node3);\n    assertThat(node6.children().get(0).children().get(0).children()).containsExactly(node0);\n    assertThat(node6.children().get(0).children().get(1).children()).containsExactly(node4, node5);\n\n    // TODO(williamfiset): also verify the parent pointers are pointing at the correct nodes.\n  }\n}\n"}
{"code_source": "/**\n * SkipList is a data structure that is useful for dealing with dynamic sorted data. In particular\n * it gives O(log(n)) average complexity of insertion, removal, and find operations. This\n * implementation has been augmented with a method for determining the index of an element in the\n * SkipList. Finding the index of an element is also O(log(n)) on average. The complexities are\n * average complexities since this algorithm is dependent on randomisation to achieve nice balanced\n * properties. To make this efficient, instantiate the SkipList with a height equal to, or just\n * greater than, log(n) where n is the number of elements that will be in the list. On average, this\n * data structure uses O(n) space. Worst case space is O(nlog(n)), and worst case for all other\n * operations is O(n)\n *\n * @author Finn Lidbetter\n *     <p>Refactored and rewritten by:\n * @author Daniel Gustafsson\n * @author Timmy Lindholm\n * @author Anja Studic\n * @author Christian Stjernberg\n */\npackage com.williamfiset.algorithms.datastructures.skiplist;\n\nimport java.util.Random;\n\nclass SkipList {\n  private Random rand = new Random();\n  private int height;\n  private Node head;\n  private Node tail;\n\n  /**\n   * This function creates a new skip list with the specified height and minimum and maximum values.\n   */\n  public SkipList(int height, int minValue, int maxValue) {\n    // Height goes from 0 to height-1\n    this.height = height;\n    head = new Node(minValue);\n    tail = new Node(maxValue);\n    Node currLeft = head;\n    Node currRight = tail;\n    // Setup links between all levels of head and tail nodes\n    for (int i = 1; i < height; i++) {\n      setHeadTail(height - i, currLeft, currRight);\n      // Create and setup down node\n      currLeft.down = new Node(currLeft.value);\n      currLeft.down.up = currLeft;\n      currRight.down = new Node(currRight.value);\n      currRight.down.up = currRight;\n      currLeft = currLeft.down;\n      currRight = currRight.down;\n    }\n    // Set last level\n    setHeadTail(0, currLeft, currRight);\n  }\n\n  private static void setHeadTail(int height, Node nLeft, Node nRight) {\n    nLeft.right = nRight;\n    nRight.left = nLeft;\n    nLeft.index = 0;\n    nRight.index = 1;\n    nLeft.height = height;\n    nRight.height = height;\n  }\n\n  public int size() {\n    return this.tail.index + 1;\n  }\n\n  /** Return true if the number is in the list. False otherwise. */\n  public boolean find(int num) {\n    return (search(num).value == num);\n  }\n\n  // Search for closest node by number\n  private Node search(int num) {\n    return search(num, this.head);\n  }\n\n  // Helper method for search\n  private Node search(int num, Node node) {\n    // Check if the next right node is still less than num\n    if (node.compareTo(num) < 0) {\n      if (node.down != null) return search(num, node.down);\n      else if (node.right != null && node.right.compareTo(num) <= 0) return search(num, node.right);\n    }\n    return node;\n  }\n\n  /** Inserts the number into the list. */\n  public boolean insert(int num) {\n    if (num < head.value || num > tail.value) return false;\n    Node node = search(num);\n    if (node.value == num) return false;\n    int nodeHeight = 0;\n    // 0.5 probability of having height 1, 0.25 for height 2\n    while (rand.nextBoolean() && nodeHeight < (height - 1)) {\n      nodeHeight++;\n    }\n    insert(node, new Node(num), null, nodeHeight, node.index + 1);\n    return true;\n  }\n\n  /** Helper method for insert */\n  private void insert(Node startNode, Node insertNode, Node lower, int insertHeight, int distance) {\n    if (startNode.height <= insertHeight) {\n      insertNode.left = startNode;\n      insertNode.right = startNode.right;\n      // If not at lowest level\n      if (lower != null) {\n        lower.up = insertNode;\n        insertNode.down = lower;\n      }\n      // If at lowest level, update ranks of following\n      else if (startNode.height == 0) {\n        increaseRank(insertNode.right);\n      }\n      startNode.right.left = insertNode;\n      startNode.right = insertNode;\n      insertNode.height = startNode.height;\n      insertNode.index = distance;\n      Node curr = startNode;\n      while (curr.up == null && curr.left != null) {\n        curr = curr.left;\n      }\n      if (curr.up != null) {\n        curr = curr.up;\n        insert(curr, new Node(insertNode.value), insertNode, insertHeight, distance);\n      }\n    }\n  }\n\n  /**\n   * Remove a the number from the list with the given value. Returns true if value was successfully\n   * removed. False otherwise.\n   */\n  public boolean remove(int num) {\n    if (num == head.value || num == tail.value) return false;\n    // Get the node to remove\n    Node node = search(num);\n    if (node.value != num) return false;\n    // Re-number all nodes to the right\n    decreaseRank(node.right);\n\n    // Connect the left and right nodes to each other\n    while (node.up != null) {\n      node.left.right = node.right;\n      node.right.left = node.left;\n      node = node.up;\n    }\n    node.left.right = node.right;\n    node.right.left = node.left;\n\n    return true;\n  }\n\n  // Decrease the index for all nodes to the right of the start node\n  private void decreaseRank(Node startNode) {\n    modifyRank(startNode, -1);\n  }\n\n  // Increase the index for all nodes to the right of the start node\n  private void increaseRank(Node startNode) {\n    modifyRank(startNode, 1);\n  }\n\n  // Modify the index for all nodes to the right of the start node\n  private void modifyRank(Node startNode, int change) {\n    Node node = startNode;\n    // Check all nodes to the right\n    while (startNode != null) {\n      node = startNode;\n      // Check all nodes upwards\n      while (node.up != null) {\n        node.index += change;\n        node = node.up;\n      }\n      node.index += change;\n      startNode = startNode.right;\n    }\n  }\n\n  /** Returns the index of the number in the list or -1 if not found. */\n  public int getIndex(int num) {\n    Node node = search(num);\n    return num == node.value ? node.index : -1;\n  }\n\n  class Node implements Comparable<Node> {\n    Node left;\n    Node right;\n    Node up;\n    Node down;\n    int height;\n    int index;\n    int value;\n\n    public Node(int value) {\n      this.value = value;\n    }\n\n    public int compareTo(Node n2) {\n      return Integer.compare(this.value, n2.value);\n    }\n\n    public int compareTo(int num) {\n      return Integer.compare(this.value, num);\n    }\n  }\n}\n", "test_case": "/**\n * Tests the SkipList data structure implementation.\n *\n * @author Daniel Gustafsson\n * @author Timmy Lindholm\n * @author Anja Studic\n * @author Christian Stjernberg\n */\npackage com.williamfiset.algorithms.datastructures.skiplist;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.*;\n\npublic class SkipListTest {\n\n  @Test\n  // Tests the getIndex method, supposed to return the index of an element\n  // in the list\n  public void testIndex() {\n    SkipList sl = new SkipList(4, 1, 45);\n\n    sl.insert(10);\n    sl.insert(25);\n    assertTrue(\"Index should be 2\", sl.getIndex(25) == 2);\n\n    sl.insert(13);\n    sl.insert(14);\n    assertTrue(\"Index should be 3\", sl.getIndex(14) == 3);\n  }\n\n  @Test\n  // GetIndex shall return -1 if trying to get the index of a non existing object\n  public void testIndexWithNonExistingValue() {\n    SkipList sl = new SkipList(4, 1, 45);\n\n    assertTrue(\"Index should be -1\", sl.getIndex(44) == -1);\n  }\n\n  @Test\n  // Insert shall return false if trying to insert an object with a\n  // key that is greater than the initialized MAX value\n  public void testInsertGreaterThanMaxValue() {\n    SkipList sl = new SkipList(3, 1, 65);\n\n    assertTrue(\"Insert should return false\", sl.insert(66) == false);\n    assertTrue(\"Insert should return false\", sl.insert(103) == false);\n    assertTrue(\"Insert should return false\", sl.insert(67) == false);\n  }\n\n  @Test\n  // Insert shall return false if trying to insert an object with a\n  // key that is lesser than the initialized MIN value\n  public void testInsertLesserThanMinValue() {\n    SkipList sl = new SkipList(3, 10, 83);\n\n    assertTrue(\"Insert should return false\", sl.insert(5) == false);\n    assertTrue(\"Insert should return false\", sl.insert(4) == false);\n    assertTrue(\"Insert should return false\", sl.insert(3) == false);\n    assertTrue(\"Insert should return false\", sl.insert(2) == false);\n  }\n\n  @Test\n  // Tests the basic functionlity of the data structure\n  public void testSimpleFunctionality() {\n    SkipList sl = new SkipList(1, 0, 10);\n    sl.insert(5);\n    sl.insert(8);\n\n    assertTrue(\"Size should be 4\", sl.size() == 4);\n    assertTrue(\"Object with key 5 should be found\", sl.find(5));\n    assertTrue(\"Object with key 8 should be found\", sl.find(8));\n\n    sl.remove(5);\n\n    assertTrue(\"Size should be 3\", sl.size() == 3);\n    assertFalse(\"Object with key 5 shouldn't be found\", sl.find(5));\n  }\n\n  @Test\n  // Tests the size method, should initialy be 2 becuase of min and max.\n  public void testSize() {\n    SkipList sl = new SkipList(3, 1, 10);\n\n    assertTrue(\"Size should be initialized to 2\", sl.size() == 2);\n\n    sl.insert(3);\n    sl.insert(4);\n    sl.insert(5);\n\n    assertTrue(\"Size should be 5\", sl.size() == 5);\n    assertFalse(\"Size shouldn't be 4\", sl.size() == 4);\n\n    sl.remove(3);\n    sl.remove(4);\n\n    assertTrue(\"Size should be 3\", sl.size() == 3);\n  }\n\n  @Test\n  // Tests the find method, find should return true when given an existing\n  // element key and return false when given a key of a non existing element\n  public void testFind() {\n    SkipList sl = new SkipList(4, 1, 45);\n    sl.insert(9);\n    sl.insert(18);\n    sl.insert(2);\n    sl.insert(6);\n    sl.insert(43);\n    sl.insert(36);\n    sl.insert(20);\n    sl.insert(30);\n    sl.insert(24);\n\n    assertTrue(\"Size should be 11\", sl.size() == 11);\n    assertTrue(\"Object with key 43 should be found\", sl.find(43));\n    assertFalse(\"Object with key 44 shouldn't be found\", sl.find(44));\n\n    sl.remove(43);\n\n    assertFalse(\"Object with key 43 shouldn't be found\", sl.find(43));\n  }\n\n  @Test\n  // Insert shall return false if trying to insert an object with the\n  // same key as an already existing object\n  public void testDuplicate() {\n    SkipList sl = new SkipList(2, 2, 5);\n    sl.insert(4);\n\n    assertFalse(\"Duplicate insert should return false\", sl.insert(4));\n    assertTrue(\"Duplicate should not exist, size should be 3\", sl.size() == 3);\n\n    sl.remove(4);\n\n    assertFalse(\"Element exist after removal\", sl.find(4));\n  }\n\n  @Test\n  // Tests removing non-existing key\n  public void testRemoveNonExisting() {\n    SkipList sl = new SkipList(2, 2, 5);\n\n    assertFalse(\"Remove should return false when Object does not exist\", sl.remove(4));\n\n    sl.insert(4);\n\n    assertTrue(\"Object should be removable\", sl.remove(4));\n    assertFalse(\"Remove should return false when it has already been removed\", sl.remove(4));\n  }\n\n  @Test\n  // Tests removing head and tail nodes, should return false\n  public void testRemoveHeadTail() {\n    SkipList sl = new SkipList(3, 1, 10);\n\n    assertFalse(\"Head shouldn't be removable\", sl.remove(1));\n    assertFalse(\"Tail shouldn't be removable\", sl.remove(10));\n  }\n}\n"}
{"code_source": "/**\n * This file contain an implementation of the maximum sliding window problem. This code has been\n * tested against the judge data on:\n *\n * <p>https://leetcode.com/problems/sliding-window-maximum/description/\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.other;\n\nimport java.util.ArrayDeque;\nimport java.util.Deque;\n\npublic class SlidingWindowMaximum {\n\n  int[] values;\n  public int N, lo, hi;\n\n  Deque<Integer> deque = new ArrayDeque<>();\n\n  public SlidingWindowMaximum(int[] values) {\n    if (values == null) throw new IllegalArgumentException();\n    this.values = values;\n    N = values.length;\n  }\n\n  // Advances the front of the window by one unit\n  public void advance() {\n\n    // Remove all the worse values in the back of the deque\n    while (!deque.isEmpty() && values[deque.peekLast()] < values[hi])\n      deque.removeLast(); // Change the '<' sign here ^^^ to '>' for minimum sliding window\n\n    // Add the next index to the back of the deque\n    deque.addLast(hi);\n\n    // Increase the window size\n    hi++;\n  }\n\n  // Retracks the back of the window by one unit\n  public void shrink() {\n\n    // Decrease window size by pushing it forward\n    lo++;\n\n    // Remove elements in the front of the queue whom are no longer\n    // valid in the reduced window.\n    while (!deque.isEmpty() && deque.peekFirst() < lo) deque.removeFirst();\n  }\n\n  // Query the current maximum value in the window\n  public int getMax() {\n    if (lo >= hi) throw new IllegalStateException(\"Make sure lo < hi\");\n    return values[deque.peekFirst()];\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.other;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport org.junit.*;\n\npublic class SlidingWindowMaximumTest {\n\n  final int TESTS = 1500;\n\n  @Test\n  public void smallWindowTest() {\n\n    int[] values = {1, 2, 1, 3, 0, 4};\n    SlidingWindowMaximum w = new SlidingWindowMaximum(values);\n\n    w.advance();\n    assertThat(w.getMax()).isEqualTo(1);\n    w.advance();\n    assertThat(w.getMax()).isEqualTo(2);\n    w.advance();\n    assertThat(w.getMax()).isEqualTo(2);\n    w.shrink();\n    assertThat(w.getMax()).isEqualTo(2);\n    w.shrink();\n    assertThat(w.getMax()).isEqualTo(1);\n    w.advance();\n    assertThat(w.getMax()).isEqualTo(3);\n    w.advance();\n    assertThat(w.getMax()).isEqualTo(3);\n    w.advance();\n    assertThat(w.getMax()).isEqualTo(4);\n    w.shrink();\n    assertThat(w.getMax()).isEqualTo(4);\n    w.shrink();\n    assertThat(w.getMax()).isEqualTo(4);\n    w.shrink();\n    assertThat(w.getMax()).isEqualTo(4);\n  }\n\n  @Test\n  public void randomizedSlidingWindowTest() {\n    for (int sz = 1; sz <= TESTS; sz++) {\n      randomizedTest(sz);\n    }\n  }\n\n  private static void fillRandom(int[] ar) {\n    for (int i = 0; i < ar.length; i++) {\n      if (Math.random() < 0.5) {\n        ar[i] = (int) (Math.random() * +25);\n      } else {\n        ar[i] = (int) (Math.random() * -25);\n      }\n    }\n  }\n\n  public static void randomizedTest(int n) {\n\n    double r = Math.max(0.1, Math.random());\n    int[] ar = new int[n];\n    fillRandom(ar);\n\n    SlidingWindowMaximum window = new SlidingWindowMaximum(ar);\n    int lo = 0, hi = 0;\n    while (hi < n) {\n\n      // increase hi\n      if (Math.random() < r) {\n        window.advance();\n        hi++;\n\n        // increase lo if we can\n      } else {\n        if (lo + 1 < hi) {\n          lo++;\n          window.shrink();\n        }\n      }\n\n      // Ignore invalid queries\n      if (window.lo == window.hi) continue;\n\n      // Manually find the window maximum\n      int max = Integer.MIN_VALUE;\n      for (int i = lo; i < hi; i++) max = Math.max(max, ar[i]);\n\n      assertThat(window.getMax()).isEqualTo(max);\n    }\n  }\n}\n"}
{"code_source": "/**\n * Implementation of a sparse table which is a data structure that can very quickly query a range on\n * a static array in O(1) for overlap friendly functions (idempotent functions) like min, max and\n * gcd using O(n*logn) memory\n *\n * <p>Main inspiration: https://cp-algorithms.com/data_structures/sparse-table.html\n *\n * <p>Tested against: https://www.spoj.com/problems/RMQSQ\n *\n * <p>To run this file:\n *\n * <p>./gradlew run -Pmain=com.williamfiset.algorithms.datastructures.sparsetable.SparseTable\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.sparsetable;\n\nimport java.util.function.BinaryOperator;\n\npublic class SparseTable {\n\n  // The number of elements in the original input array.\n  private int n;\n\n  // The maximum power of 2 needed. This value is floor(log2(n))\n  private int P;\n\n  // Fast log base 2 logarithm lookup table for i, 1 <= i <= n\n  private int[] log2;\n\n  // The sparse table values.\n  private long[][] dp;\n\n  // Index Table (IT) associated with the values in the sparse table.\n  private int[][] it;\n\n  // The various supported query operations on this sparse table.\n  public enum Operation {\n    MIN,\n    MAX,\n    SUM,\n    MULT,\n    GCD\n  };\n\n  private Operation op;\n\n  // All functions must be associative, e.g: a * (b * c) = (a * b) * c for some operation '*'\n  private BinaryOperator<Long> sumFn = (a, b) -> a + b;\n  private BinaryOperator<Long> minFn = (a, b) -> Math.min(a, b);\n  private BinaryOperator<Long> maxFn = (a, b) -> Math.max(a, b);\n  private BinaryOperator<Long> multFn = (a, b) -> a * b;\n  private BinaryOperator<Long> gcdFn =\n      (a, b) -> {\n        long gcd = a;\n        while (b != 0) {\n          gcd = b;\n          b = a % b;\n          a = gcd;\n        }\n        return Math.abs(gcd);\n      };\n\n  public SparseTable(long[] values, Operation op) {\n    // TODO(william): Lazily call init in query methods instead of initializing in constructor?\n    this.op = op;\n    init(values);\n  }\n\n  private void init(long[] v) {\n    n = v.length;\n\n    // Tip: to get the floor of the logarithm base 2 in Java you can also do:\n    // Integer.numberOfTrailingZeros(Integer.highestOneBit(n)).\n    P = (int) (Math.log(n) / Math.log(2));\n    dp = new long[P + 1][n];\n    it = new int[P + 1][n];\n\n    for (int i = 0; i < n; i++) {\n      dp[0][i] = v[i];\n      it[0][i] = i;\n    }\n\n    log2 = new int[n + 1];\n    for (int i = 2; i <= n; i++) {\n      log2[i] = log2[i / 2] + 1;\n    }\n\n    // Build sparse table combining the values of the previous intervals.\n    for (int i = 1; i <= P; i++) {\n      for (int j = 0; j + (1 << i) <= n; j++) {\n        long leftInterval = dp[i - 1][j];\n        long rightInterval = dp[i - 1][j + (1 << (i - 1))];\n        if (op == Operation.MIN) {\n          dp[i][j] = minFn.apply(leftInterval, rightInterval);\n          // Propagate the index of the best value\n          if (leftInterval <= rightInterval) {\n            it[i][j] = it[i - 1][j];\n          } else {\n            it[i][j] = it[i - 1][j + (1 << (i - 1))];\n          }\n        } else if (op == Operation.MAX) {\n          dp[i][j] = maxFn.apply(leftInterval, rightInterval);\n          // Propagate the index of the best value\n          if (leftInterval >= rightInterval) {\n            it[i][j] = it[i - 1][j];\n          } else {\n            it[i][j] = it[i - 1][j + (1 << (i - 1))];\n          }\n        } else if (op == Operation.SUM) {\n          dp[i][j] = sumFn.apply(leftInterval, rightInterval);\n        } else if (op == Operation.MULT) {\n          dp[i][j] = multFn.apply(leftInterval, rightInterval);\n        } else if (op == Operation.GCD) {\n          dp[i][j] = gcdFn.apply(leftInterval, rightInterval);\n        }\n      }\n    }\n    // Uncomment for debugging\n    // printTable();\n  }\n\n  // For debugging, testing and slides.\n  private void printTable() {\n    for (long[] r : dp) {\n      for (int i = 0; i < r.length; i++) {\n        System.out.printf(\"%02d, \", r[i]);\n      }\n      System.out.println();\n    }\n  }\n\n  // Queries [l, r] for the operation set on this sparse table.\n  public long query(int l, int r) {\n    // Fast queries types, O(1)\n    if (op == Operation.MIN) {\n      return query(l, r, minFn);\n    } else if (op == Operation.MAX) {\n      return query(l, r, maxFn);\n    } else if (op == Operation.GCD) {\n      return query(l, r, gcdFn);\n    }\n\n    // Slower query types, O(log2(n))\n    if (op == Operation.SUM) {\n      return sumQuery(l, r);\n    } else {\n      return multQuery(l, r);\n    }\n  }\n\n  public int queryIndex(int l, int r) {\n    if (op == Operation.MIN) {\n      return minQueryIndex(l, r);\n    } else if (op == Operation.MAX) {\n      return maxQueryIndex(l, r);\n    }\n    throw new UnsupportedOperationException(\n        \"Operation type: \" + op + \" doesn't support index queries :/\");\n  }\n\n  private int minQueryIndex(int l, int r) {\n    int len = r - l + 1;\n    int p = log2[len];\n    long leftInterval = dp[p][l];\n    long rightInterval = dp[p][r - (1 << p) + 1];\n    if (leftInterval <= rightInterval) {\n      return it[p][l];\n    } else {\n      return it[p][r - (1 << p) + 1];\n    }\n  }\n\n  private int maxQueryIndex(int l, int r) {\n    int len = r - l + 1;\n    int p = log2[len];\n    long leftInterval = dp[p][l];\n    long rightInterval = dp[p][r - (1 << p) + 1];\n    if (leftInterval >= rightInterval) {\n      return it[p][l];\n    } else {\n      return it[p][r - (1 << p) + 1];\n    }\n  }\n\n  // Do sum query [l, r] in O(log2(n)).\n  //\n  // Perform a cascading query which shrinks the left endpoint while summing over all the intervals\n  // which are powers of 2 between [l, r].\n  //\n  // WARNING: This method can easily produces values that overflow.\n  //\n  // NOTE: You can achieve a faster time complexity and use less memory with a simple prefix sum\n  // array. This method is here more as a proof of concept than for its usefulness.\n  private long sumQuery(int l, int r) {\n    long sum = 0;\n    for (int p = log2[r - l + 1]; l <= r; p = log2[r - l + 1]) {\n      sum += dp[p][l];\n      l += (1 << p);\n    }\n    return sum;\n  }\n\n  private long multQuery(int l, int r) {\n    long result = 1;\n    for (int p = log2[r - l + 1]; l <= r; p = log2[r - l + 1]) {\n      result *= dp[p][l];\n      l += (1 << p);\n    }\n    return result;\n  }\n\n  // Do either a min, max or gcd query on the interval [l, r] in O(1).\n  //\n  // We can get O(1) query by finding the smallest power of 2 that fits within the interval length\n  // which we'll call k. Then we can query the intervals [l, l+k] and [r-k+1, r] (which likely\n  // overlap) and apply the function again. Some functions (like min and max) don't care about\n  // overlapping intervals so this trick works, but for a function like sum this would return the\n  // wrong result since it is not an idempotent binary function.\n  private long query(int l, int r, BinaryOperator<Long> fn) {\n    int len = r - l + 1;\n    int p = log2[len];\n    return fn.apply(dp[p][l], dp[p][r - (1 << p) + 1]);\n  }\n\n  /* Example usage: */\n\n  public static void main(String[] args) {\n    // example1();\n    // example2();\n    example3();\n  }\n\n  private static void example1() {\n    long[] values = {1, 2, -3, 2, 4, -1, 5};\n\n    // Initialize sparse table to do range minimum queries.\n    SparseTable sparseTable = new SparseTable(values, SparseTable.Operation.MULT);\n\n    System.out.println(sparseTable.query(2, 3));\n  }\n\n  private static void exampleFromSlides() {\n    long[] values = {4, 2, 3, 7, 1, 5, 3, 3, 9, 6, 7, -1, 4};\n\n    // Initialize sparse table to do range minimum queries.\n    SparseTable sparseTable = new SparseTable(values, SparseTable.Operation.MIN);\n\n    System.out.printf(\"Min value between [2, 7] = %d\\n\", sparseTable.query(2, 7));\n  }\n\n  private static void example3() {\n    long[] values = {4, 4, 4, 4, 4, 4};\n    // Initialize sparse table to do range minimum queries.\n    SparseTable sparseTable = new SparseTable(values, SparseTable.Operation.SUM);\n\n    System.out.printf(\"%d\\n\", sparseTable.query(0, values.length - 1));\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.sparsetable;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.*;\nimport org.junit.*;\n\npublic class SparseTableTest {\n\n  private void queryResultTest(\n      long[] values, int l, int r, long actual, int index, SparseTable.Operation op) {\n    if (op == SparseTable.Operation.MIN) {\n      minQuery(values, l, r, actual, index);\n    } else if (op == SparseTable.Operation.MAX) {\n      maxQuery(values, l, r, actual, index);\n    } else if (op == SparseTable.Operation.SUM) {\n      sumQuery(values, l, r, actual);\n    } else if (op == SparseTable.Operation.MULT) {\n      multQuery(values, l, r, actual);\n    } else if (op == SparseTable.Operation.GCD) {\n      gcdQuery(values, l, r, actual);\n    }\n  }\n\n  private void minQuery(long[] values, int l, int r, long actual, int index) {\n    long m = Long.MAX_VALUE;\n    for (int i = l; i <= r; i++) m = Math.min(m, values[i]);\n    assertThat(actual).isEqualTo(m);\n    assertThat(values[index]).isEqualTo(m);\n  }\n\n  private void maxQuery(long[] values, int l, int r, long actual, int index) {\n    long m = Long.MIN_VALUE;\n    for (int i = l; i <= r; i++) m = Math.max(m, values[i]);\n    assertThat(actual).isEqualTo(m);\n    assertThat(values[index]).isEqualTo(m);\n  }\n\n  private void sumQuery(long[] values, int l, int r, long actual) {\n    long m = 0;\n    for (int i = l; i <= r; i++) m += values[i];\n    assertThat(m).isEqualTo(actual);\n  }\n\n  private void multQuery(long[] values, int l, int r, long actual) {\n    long m = 1;\n    for (int i = l; i <= r; i++) m *= values[i];\n    assertThat(m).isEqualTo(actual);\n  }\n\n  // Computes the Greatest Common Divisor (GCD) of a & b\n  // This method ensures that the value returned is non negative\n  public static long gcd(long a, long b) {\n    return b == 0 ? (a < 0 ? -a : a) : gcd(b, a % b);\n  }\n\n  private void gcdQuery(long[] values, int l, int r, long actual) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) m = gcd(m, values[i]);\n    assertThat(m).isEqualTo(actual);\n  }\n\n  private void testAllOperations(long[] values) {\n    SparseTable min_st = new SparseTable(values, SparseTable.Operation.MIN);\n    SparseTable max_st = new SparseTable(values, SparseTable.Operation.MAX);\n    SparseTable sum_st = new SparseTable(values, SparseTable.Operation.SUM);\n    SparseTable mult_st = new SparseTable(values, SparseTable.Operation.MULT);\n    SparseTable gcd_st = new SparseTable(values, SparseTable.Operation.GCD);\n\n    for (int i = 0; i < values.length; i++) {\n      for (int j = i; j < values.length; j++) {\n        queryResultTest(\n            values, i, j, min_st.query(i, j), min_st.queryIndex(i, j), SparseTable.Operation.MIN);\n        queryResultTest(\n            values, i, j, max_st.query(i, j), max_st.queryIndex(i, j), SparseTable.Operation.MAX);\n        queryResultTest(\n            values, i, j, sum_st.query(i, j), -1 /* unused */, SparseTable.Operation.SUM);\n        queryResultTest(\n            values, i, j, mult_st.query(i, j), -1 /* unused */, SparseTable.Operation.MULT);\n        queryResultTest(\n            values, i, j, gcd_st.query(i, j), -1 /* unused */, SparseTable.Operation.GCD);\n      }\n    }\n  }\n\n  @Test\n  public void simple() {\n    long[] values = {1, 0, 1, -2, 3, -4, 5, -6, 7, -8, 9};\n    testAllOperations(values);\n  }\n\n  @Test\n  public void smallRangeRandomArrayTests() {\n    for (int i = 1; i < 100; i++) {\n      long[] values = genRandArray(i, -10, 10);\n      testAllOperations(values);\n    }\n  }\n\n  @Test\n  public void randomArrayTests() {\n    for (int i = 1; i < 100; i++) {\n      long[] values = genRandArray(i, -100000, 100000);\n      testAllOperations(values);\n    }\n  }\n\n  @Test\n  public void verifyIndexIsAlwaysLeftmostPositionWhenThereAreCollisions() {\n    long[] values = {5, 4, 3, 3, 3, 3, 3, 5, 6, 7};\n    SparseTable st = new SparseTable(values, SparseTable.Operation.MIN);\n\n    for (int i = 0; i < values.length; i++) {\n      for (int j = i; j < values.length; j++) {\n        long min = Long.MAX_VALUE;\n        int minIndex = 0;\n        for (int k = i; k <= j; k++) {\n          if (values[k] < min) {\n            min = values[k];\n            minIndex = k;\n          }\n        }\n\n        assertThat(st.query(i, j)).isEqualTo(min);\n        assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n        assertThat(st.queryIndex(i, j)).isEqualTo(minIndex);\n      }\n    }\n  }\n\n  @Test\n  public void verifyIndexIsAlwaysLeftmostPosition_randomized() {\n    for (int loop = 2; loop < 100; loop++) {\n      long[] values = genRandArray(loop, -100, +100);\n      SparseTable min_st = new SparseTable(values, SparseTable.Operation.MIN);\n      SparseTable max_st = new SparseTable(values, SparseTable.Operation.MAX);\n\n      for (int i = 0; i < values.length; i++) {\n        for (int j = i; j < values.length; j++) {\n          long min = Long.MAX_VALUE, max = Long.MIN_VALUE;\n          int minIndex = 0, maxIndex = 0;\n          ;\n          for (int k = i; k <= j; k++) {\n            if (values[k] < min) {\n              min = values[k];\n              minIndex = k;\n            }\n            if (values[k] > max) {\n              max = values[k];\n              maxIndex = k;\n            }\n          }\n          assertThat(min_st.query(i, j)).isEqualTo(min);\n          assertThat(i <= minIndex && minIndex <= j).isEqualTo(true);\n          assertThat(min_st.queryIndex(i, j)).isEqualTo(minIndex);\n\n          assertThat(max_st.query(i, j)).isEqualTo(max);\n          assertThat(i <= maxIndex && maxIndex <= j).isEqualTo(true);\n          assertThat(max_st.queryIndex(i, j)).isEqualTo(maxIndex);\n        }\n      }\n    }\n  }\n\n  private static long[] genRandArray(int n, int lo, int hi) {\n    return new Random().longs(n, lo, hi).toArray();\n  }\n}\n"}
{"code_source": "// javac -d classes -sourcepath src/main/java\n// src/main/java/com/williamfiset/algorithms/datastructures/binarysearchtree/SplayTree.java\n// java -cp classes com.williamfiset.algorithms.datastructures.binarysearchtree.SplayTreeRun\n\npackage com.williamfiset.algorithms.datastructures.binarysearchtree;\n\nimport com.williamfiset.algorithms.datastructures.utils.TreePrinter;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n * Standard Splay Tree Implementation, supports generic data(must implement Comparable)\n *\n * <p>The Basic Concept of SplayTree is to keep frequently used nodes close to the root of the tree\n * It performs basic operations such as insertion,search,delete,findMin,findMax in O(log n)\n * amortized time Having frequently-used nodes near to the root can be useful in implementing many\n * algorithms. e.g: Implementing caches, garbage collection algorithms etc Primary disadvantage of\n * the splay tree can be the fact that its height can go linear. This causes the worst case running\n * times to go O(n) However, the amortized costs of this worst case situation is logarithmic, O(log\n * n)\n *\n * @author Ashiqur Rahman,https://github.com/ashiqursuperfly\n */\npublic class SplayTree<T extends Comparable<T>> {\n\n  private BinaryTree<T> root;\n\n  public static class BinaryTree<T extends Comparable<T>> implements TreePrinter.PrintableNode {\n    private T data;\n    private BinaryTree<T> leftChild, rightChild;\n\n    public BinaryTree(T data) {\n      if (data == null) {\n        try {\n          throw new Exception(\"Null data not allowed into tree\");\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n      } else this.data = data;\n    }\n\n    @Override\n    public BinaryTree<T> getLeft() {\n      return leftChild;\n    }\n\n    public void setLeft(BinaryTree<T> leftChild) {\n      this.leftChild = leftChild;\n    }\n\n    @Override\n    public BinaryTree<T> getRight() {\n      return rightChild;\n    }\n\n    public void setRight(BinaryTree<T> rightChild) {\n      this.rightChild = rightChild;\n    }\n\n    @Override\n    public String getText() {\n      return data.toString();\n    }\n\n    public T getData() {\n      return data;\n    }\n\n    public void setData(T data) {\n      if (data == null) {\n        try {\n          throw new Exception(\"Null data not allowed into tree\");\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n      } else this.data = data;\n    }\n\n    @Override\n    public String toString() {\n\n      return TreePrinter.getTreeDisplay(this);\n    }\n  }\n\n  /** Public Methods * */\n  public SplayTree() {\n    this.root = null;\n  }\n\n  public SplayTree(BinaryTree<T> root) {\n    this.root = root;\n  }\n\n  public BinaryTree<T> getRoot() {\n    return root;\n  }\n\n  /** Searches a node and splays it on top,returns the new root * */\n  public BinaryTree<T> search(T node) {\n    if (root == null) return null;\n\n    this.root = splayUtil(root, node);\n\n    return this.root.getData().compareTo(node) == 0 ? this.root : null;\n  }\n\n  /** Inserts a node into the tree and splays it on top, returns the new root* */\n  public BinaryTree<T> insert(T node) {\n    if (root == null) {\n      root = new BinaryTree<>(node);\n      return root;\n    }\n    splay(node);\n\n    ArrayList<BinaryTree<T>> l_r = split(node);\n\n    BinaryTree<T> left = l_r.get(0);\n    BinaryTree<T> right = l_r.get(1);\n\n    root = new BinaryTree<>(node);\n    root.setLeft(left);\n    root.setRight(right);\n\n    return root;\n  }\n\n  /** Deletes a node,returns the new root * */\n  public BinaryTree<T> delete(T node) {\n    if (root == null) return null;\n\n    BinaryTree<T> searchResult = splay(node);\n\n    if (searchResult.getData().compareTo(node) != 0) return null;\n\n    BinaryTree<T> leftSubtree = root.getLeft();\n    BinaryTree<T> rightSubtree = root.getRight();\n\n    // Set the 'to be deleted' key ready for garbage collection\n    root.setLeft(null);\n    root.setRight(null);\n\n    root = join(leftSubtree, rightSubtree);\n\n    return root;\n  }\n\n  /** To FindMax Of Entire Tree * */\n  public T findMax() {\n    BinaryTree<T> temp = root;\n    while (temp.getRight() != null) temp = temp.getRight();\n    return temp.getData();\n  }\n\n  /** To FindMin Of Entire Tree * */\n  public T findMin() {\n    BinaryTree<T> temp = root;\n    while (temp.getLeft() != null) temp = temp.getLeft();\n    return temp.getData();\n  }\n\n  /** * To FindMax Of Tree with specified root * */\n  public T findMax(BinaryTree<T> root) {\n    BinaryTree<T> temp = root;\n    while (temp.getRight() != null) temp = temp.getRight();\n    return temp.getData();\n  }\n\n  /** * To FindMin Of Tree with specified root * */\n  public T findMin(BinaryTree<T> root) {\n    BinaryTree<T> temp = root;\n    while (temp.getLeft() != null) temp = temp.getLeft();\n    return temp.getData();\n  }\n\n  @Override\n  public String toString() {\n\n    System.out.println(\"Elements:\" + inorder(root, new ArrayList<>()));\n    return (root != null) ? root.toString() : null;\n  }\n\n  /** Private Methods * */\n  private BinaryTree<T> rightRotate(BinaryTree<T> node) {\n    BinaryTree<T> p = node.getLeft();\n    node.setLeft(p.getRight());\n    p.setRight(node);\n    return p;\n  }\n\n  private BinaryTree<T> leftRotate(BinaryTree<T> node) {\n    BinaryTree<T> p = node.getRight();\n    node.setRight(p.getLeft());\n    p.setLeft(node);\n    return p;\n  }\n\n  private BinaryTree<T> splayUtil(BinaryTree<T> root, T key) {\n    if (root == null || root.getData() == key) return root;\n\n    if (root.getData().compareTo(key) > 0) {\n      if (root.getLeft() == null) return root;\n\n      if (root.getLeft().getData().compareTo(key) > 0) {\n\n        root.getLeft().setLeft(splayUtil(root.getLeft().getLeft(), key));\n\n        root = rightRotate(root);\n      } else if (root.getLeft().getData().compareTo(key) < 0) {\n\n        root.getLeft().setRight(splayUtil(root.getLeft().getRight(), key));\n\n        if (root.getLeft().getRight() != null) root.setLeft(leftRotate(root.getLeft()));\n      }\n      return (root.getLeft() == null) ? root : rightRotate(root);\n    } else {\n      if (root.getRight() == null) return root;\n\n      if (root.getRight().getData().compareTo(key) > 0) {\n        root.getRight().setLeft(splayUtil(root.getRight().getLeft(), key));\n        if (root.getRight().getLeft() != null) root.setRight(rightRotate(root.getRight()));\n      } else if (root.getRight().getData().compareTo(key) < 0) // Zag-Zag (Right Right)\n      {\n        root.getRight().setRight(splayUtil(root.getRight().getRight(), key));\n        root = leftRotate(root);\n      }\n\n      return (root.getRight() == null) ? root : leftRotate(root);\n    }\n  }\n\n  private BinaryTree<T> splay(T node) {\n    if (root == null) return null;\n\n    this.root = splayUtil(root, node);\n\n    return this.root;\n  }\n\n  private ArrayList<BinaryTree<T>> split(T node) {\n    BinaryTree<T> right;\n    BinaryTree<T> left;\n\n    if (node.compareTo(root.getData()) > 0) {\n      right = root.getRight();\n      left = root;\n      left.setRight(null);\n    } else {\n      left = root.getLeft();\n      right = root;\n      right.setLeft(null);\n    }\n    ArrayList<BinaryTree<T>> l_r = new ArrayList<>();\n    l_r.add(left);\n    l_r.add(right);\n\n    return l_r;\n  }\n\n  private BinaryTree<T> join(BinaryTree<T> L, BinaryTree<T> R) {\n\n    if (L == null) {\n      root = R;\n      return R;\n    }\n    root = splayUtil(L, findMax(L));\n    root.setRight(R);\n    return root;\n  }\n\n  private ArrayList<T> inorder(BinaryTree<T> root, ArrayList<T> sorted) {\n\n    if (root == null) {\n      return sorted;\n    }\n    inorder(root.getLeft(), sorted);\n    sorted.add(root.getData());\n    inorder(root.getRight(), sorted);\n    return sorted;\n  }\n}\n\nclass SplayTreeRun {\n\n  public static void main(String[] args) {\n\n    SplayTree<Integer> splayTree = new SplayTree<>();\n    Scanner sc = new Scanner(System.in);\n    int[] data = {2, 29, 26, -1, 10, 0, 2, 11};\n    int c = 0;\n    for (int i : data) {\n      splayTree.insert(i);\n    }\n\n    while (c != 7) {\n      System.out.println(\"1. Insert 2. Delete 3. Search 4.FindMin 5.FindMax 6. PrintTree 7. Exit\");\n      c = sc.nextInt();\n      switch (c) {\n        case 1:\n          System.out.println(\"Enter Data :\");\n          splayTree.insert(sc.nextInt());\n          break;\n        case 2:\n          System.out.println(\"Enter Element to be Deleted:\");\n          splayTree.delete(sc.nextInt());\n          break;\n        case 3:\n          System.out.println(\"Enter Element to be Searched and Splayed:\");\n          splayTree.search(sc.nextInt());\n          break;\n        case 4:\n          System.out.println(\"Min: \" + splayTree.findMin());\n          break;\n        case 5:\n          System.out.println(\"Max: \" + splayTree.findMax());\n          break;\n        case 6:\n          System.out.println(splayTree);\n          break;\n        case 7:\n          sc.close();\n          break;\n      }\n    }\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.binarysearchtree;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.williamfiset.algorithms.datastructures.utils.TestUtils;\nimport java.util.*;\nimport org.junit.Test;\n\npublic class SplayTreeTest {\n\n  public static final int MAX = Integer.MAX_VALUE / 4, MIN = Integer.MIN_VALUE / 4;\n\n  @Test\n  public void getRoot() {\n    SplayTree<Integer> splayTree = new SplayTree<>();\n    List<Integer> data = TestUtils.randomIntegerList(100, MIN, MAX);\n    for (int i : data) {\n      splayTree.insert(i);\n      assertThat(splayTree.getRoot().getData()).isEqualTo(i);\n    }\n  }\n\n  @Test\n  public void splayInsertDeleteSearch() {\n    SplayTree<Integer> splayTree = new SplayTree<>();\n    List<Integer> data =\n        TestUtils.randomUniformUniqueIntegerList(\n            100); // Note : we dont want duplicate values here to test \"search\" after \"delete\"\n    // should assertNull\n    for (int i : data) {\n      splayTree.insert(i);\n      assertThat(splayTree.getRoot().getData()).isEqualTo(i);\n    }\n    for (int i : data) {\n      assertThat(splayTree.search(i)).isNotNull();\n    }\n    for (int i : data) {\n      splayTree.delete(i);\n      assertThat(splayTree.search(i)).isNull();\n    }\n  }\n\n  @Test\n  public void insertSearch() {\n    SplayTree<Integer> splayTree = new SplayTree<>();\n    List<Integer> data = TestUtils.randomIntegerList(100, MIN, MAX);\n    for (int i : data) {\n      splayTree.insert(i);\n      assertThat(splayTree.getRoot().getData()).isEqualTo(i);\n    }\n  }\n\n  @Test\n  public void findMax() {\n    SplayTree<Integer> splayTree = new SplayTree<>();\n    List<Integer> data = TestUtils.sortedIntegerList(-50, 50);\n    for (int i : data) {\n      splayTree.insert(i);\n      assertThat(splayTree.findMax(splayTree.getRoot())).isEqualTo(i);\n    }\n  }\n\n  /** Comparison With Built In Priority Queue* */\n  @Test\n  public void splayTreePriorityQueueConsistencyTest() {\n    SplayTree<Integer> splayTree = new SplayTree<>();\n    List<Integer> data = TestUtils.randomUniformUniqueIntegerList(100);\n    Queue<Integer> pq = new PriorityQueue<>(100, Collections.reverseOrder());\n\n    // insertion\n    for (int i : data) {\n      assertThat(pq.add(i)).isEqualTo(splayTree.insert(i) != null);\n    }\n    // searching\n    for (int i : data) {\n      assertThat(splayTree.search(i).getData().equals(i)).isEqualTo(pq.contains(i));\n    }\n    // findMax & delete\n    while (!pq.isEmpty()) {\n      Integer splayTreeMax = splayTree.findMax();\n      assertThat(pq.peek()).isEqualTo(splayTreeMax);\n\n      splayTree.delete(splayTreeMax);\n      assertThat(splayTree.search(splayTreeMax)).isNull();\n      pq.remove(splayTreeMax);\n      assertThat(pq.contains(splayTreeMax)).isFalse();\n    }\n  }\n}\n"}
{"code_source": "package com.williamfiset.algorithms.datastructures.stack;\n\n/** @author liujingkun */\npublic interface Stack<T> {\n  // return the number of elements in the stack\n  public int size();\n\n  // return if the stack is empty\n  public boolean isEmpty();\n\n  // push the element on the stack\n  public void push(T elem);\n\n  // pop the element off the stack\n  public T pop();\n\n  public T peek();\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.stack;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class StackTest {\n\n  private List<Stack<Integer>> stacks = new ArrayList<>();\n\n  @Before\n  public void setup() {\n    stacks.add(new ListStack<Integer>());\n    stacks.add(new ArrayStack<Integer>());\n    stacks.add(new IntStack(2));\n  }\n\n  @Test\n  public void testEmptyStack() {\n    for (Stack stack : stacks) {\n      assertThat(stack.isEmpty()).isTrue();\n      assertThat(stack.size()).isEqualTo(0);\n    }\n  }\n\n  @Test(expected = Exception.class)\n  public void testPopOnEmpty() {\n    for (Stack stack : stacks) {\n      stack.pop();\n    }\n  }\n\n  @Test(expected = Exception.class)\n  public void testPeekOnEmpty() {\n    for (Stack stack : stacks) {\n      stack.peek();\n    }\n  }\n\n  @Test\n  public void testPush() {\n    for (Stack<Integer> stack : stacks) {\n      stack.push(2);\n      assertThat(stack.size()).isEqualTo(1);\n    }\n  }\n\n  @Test\n  public void testPeek() {\n    for (Stack<Integer> stack : stacks) {\n      stack.push(2);\n      assertThat((int) (Integer) stack.peek()).isEqualTo(2);\n      assertThat(stack.size()).isEqualTo(1);\n    }\n  }\n\n  @Test\n  public void testPop() {\n    for (Stack<Integer> stack : stacks) {\n      stack.push(2);\n      assertThat((int) stack.pop()).isEqualTo(2);\n      assertThat(stack.size()).isEqualTo(0);\n    }\n  }\n\n  @Test\n  public void testExhaustively() {\n    for (Stack<Integer> stack : stacks) {\n      assertThat(stack.isEmpty()).isTrue();\n      stack.push(1);\n      assertThat(stack.isEmpty()).isFalse();\n      stack.push(2);\n      assertThat(stack.size()).isEqualTo(2);\n      assertThat((int) stack.peek()).isEqualTo(2);\n      assertThat(stack.size()).isEqualTo(2);\n      assertThat((int) stack.pop()).isEqualTo(2);\n      assertThat(stack.size()).isEqualTo(1);\n      assertThat((int) stack.peek()).isEqualTo(1);\n      assertThat(stack.size()).isEqualTo(1);\n      assertThat((int) stack.pop()).isEqualTo(1);\n      assertThat(stack.size()).isEqualTo(0);\n      assertThat(stack.isEmpty()).isTrue();\n    }\n  }\n}\n"}
{"code_source": "/**\n * This file contains an implementation of a Steiner Tree algorithm, which finds the cheapest cost\n * to connect a given subset of nodes (which we will refer to as terminal nodes) in an undirected\n * graph. These nodes may be either directly or indirectly connected, possibly connecting to\n * intermediate nodes which are not terminal nodes.\n *\n * <p>Time Complexity: O(V^3 + V^2 * 2^T + V * 3^T)\n *\n * @author Matt Fontaine, Micah Stairs Source: https://www.youtube.com/watch?v=BG4vAoV5kWw\n */\npackage com.williamfiset.algorithms.graphtheory;\n\nimport java.util.*;\n\npublic class SteinerTree {\n\n  /**\n   * Finds the cheapest cost to connect a given subset of nodes (which we will refer to as terminal\n   * nodes). These nodes may be either directly or indirectly connected, possibly connecting to\n   * intermediate nodes which are not terminal nodes.\n   *\n   * @param distances - The adjacency matrix for the undirected graph\n   * @param subsetToConnect - The 0-based indices of the terminal nodes\n   * @return the minimum cost required to connect the terminal nodes\n   */\n  public static double minLengthSteinerTree(double[][] distances, int[] subsetToConnect) {\n\n    int v = distances.length;\n    int t = subsetToConnect.length;\n\n    // Already implicitly connected\n    if (t <= 1) {\n      return 0;\n    }\n\n    // Find the shortest distance between all pairs of nodes\n    floydWarshall(distances);\n\n    // This array is indexed using a mask (which says which terminal nodes are\n    // connected so far) and node we are currently at (our root)\n    double[][] dp = new double[1 << t][v];\n    for (int i = 0; i < dp.length; i++) {\n      Arrays.fill(dp[i], Double.POSITIVE_INFINITY);\n    }\n\n    // Initialize the dynamic programming array with our base cases (starting with\n    // each terminal node and going to all other nodes)\n    for (int mask = 0; mask < t; mask++) {\n      for (int j = 0; j < v; j++) {\n        dp[1 << mask][j] = distances[subsetToConnect[mask]][j];\n      }\n    }\n\n    // Iterate over all of the sets of terminal nodes\n    for (int mask = 1; mask < 1 << t; mask++) {\n\n      // Iterate over all of the nodes\n      for (int j = 0; j < v; j++) {\n\n        // Effeciently iterate over all subsets of the mask\n        for (int subMask = (mask - 1) & mask; subMask > 0; subMask = (subMask - 1) & mask) {\n\n          // Find the distance between the mask and the submask and see if we\n          // can use it to get a better answer\n          dp[mask][j] = Math.min(dp[mask][j], dp[subMask][j] + dp[mask ^ subMask][j]);\n        }\n      }\n\n      // Try moving our roots to see if we can get a better answer\n      for (int j = 0; j < v; j++) {\n        for (int k = 0; k < v; k++) {\n          dp[mask][j] = Math.min(dp[mask][j], dp[mask][k] + distances[k][j]);\n        }\n      }\n    }\n\n    // Return answer by looking up the mask with all of the bits set (which\n    // represents that all terminal nodes are connected)\n    return dp[(1 << t) - 1][subsetToConnect[0]];\n  }\n\n  /**\n   * Given an adjacency matrix with edge weights between nodes, where Double.POSITIVE_INFINITY is\n   * used to indicate that two nodes are not, connected, this method mutates the given matrix in\n   * order to give the shortest distance between all pairs of nodes. Double.NEGATIVE_INFINITY is\n   * used to indicate that the edge between node i and node j is part of a negative cycle.\n   *\n   * <p>NOTE: Usually the diagonal of the adjacency matrix is all zeros (i.e. distance[i][i] = 0 for\n   * all i) since there is typically no cost to go from a node to itself, but this may depend on\n   * your graph and the problem you are trying to solve.\n   */\n  public static void floydWarshall(double[][] distance) {\n\n    int n = distance.length;\n\n    // Compute all pairs shortest paths\n    for (int k = 0; k < n; k++)\n      for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n          if (distance[i][k] + distance[k][j] < distance[i][j])\n            distance[i][j] = distance[i][k] + distance[k][j];\n\n    // Identify negative cycles (you can comment this\n    // out if you know that no negative cycles exist)\n    for (int k = 0; k < n; k++)\n      for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n          if (distance[i][k] + distance[k][j] < distance[i][j])\n            distance[i][j] = Double.NEGATIVE_INFINITY;\n  }\n\n  // Examples\n  public static void main(String[] args) {\n\n    final double INF = Double.POSITIVE_INFINITY;\n\n    /**\n     * Visualization of the graph:\n     *\n     * <p>[O] / \\ 3 4 / \\ [1] [2] | | 5 6 | | [3] [4]\n     */\n    double[][] matrix1 =\n        new double[][] {\n          {0, 3, 4, INF, INF},\n          {3, 0, INF, 5, INF},\n          {4, INF, 0, INF, 6},\n          {INF, 5, INF, 0, INF},\n          {INF, INF, 6, INF, 0}\n        };\n\n    System.out.println(minLengthSteinerTree(matrix1, new int[] {})); // Expected answer: 0.0\n    System.out.println(minLengthSteinerTree(matrix1, new int[] {2})); // Expected answer: 0.0\n    System.out.println(minLengthSteinerTree(matrix1, new int[] {2, 4})); // Expected answer: 6.0\n    System.out.println(minLengthSteinerTree(matrix1, new int[] {0, 3})); // Expected answer: 8.0\n    System.out.println(minLengthSteinerTree(matrix1, new int[] {1, 2, 4})); // Expected answer: 13.0\n    System.out.println(minLengthSteinerTree(matrix1, new int[] {4, 1, 2})); // Expected answer: 13.0\n    System.out.println(minLengthSteinerTree(matrix1, new int[] {3, 0, 4})); // Expected answer: 18.0\n    System.out.println(\n        minLengthSteinerTree(matrix1, new int[] {0, 1, 2, 3, 4})); // Expected answer: 18.0\n\n    /**\n     * Visualization of the graph:\n     *\n     * <p>[0]-3-[1] | | 5 4 | | [2] [3] | \\ | 7 8 1 | \\ | [4]-2-[5]\n     */\n    double[][] matrix2 =\n        new double[][] {\n          {0, 3, 5, INF, INF, INF},\n          {3, 0, INF, 4, INF, INF},\n          {5, INF, 0, INF, 7, 8},\n          {INF, 4, INF, 0, INF, 1},\n          {INF, INF, 7, INF, 0, 2},\n          {INF, INF, 8, 1, 2, 0}\n        };\n\n    System.out.println(minLengthSteinerTree(matrix2, new int[] {})); // Expected answer: 0.0\n    System.out.println(minLengthSteinerTree(matrix2, new int[] {4})); // Expected answer: 0.0\n    System.out.println(minLengthSteinerTree(matrix2, new int[] {0, 5})); // Expected answer: 8.0\n    System.out.println(minLengthSteinerTree(matrix2, new int[] {5, 0})); // Expected answer: 8.0\n    System.out.println(minLengthSteinerTree(matrix2, new int[] {4, 0})); // Expected answer: 10.0\n    System.out.println(minLengthSteinerTree(matrix2, new int[] {2, 4, 5})); // Expected answer: 9.0\n    System.out.println(minLengthSteinerTree(matrix2, new int[] {3, 1, 0})); // Expected answer: 7.0\n    System.out.println(minLengthSteinerTree(matrix2, new int[] {3, 0})); // Expected answer: 7.0\n    System.out.println(minLengthSteinerTree(matrix2, new int[] {3, 0, 5})); // Expected answer: 8.0\n    System.out.println(minLengthSteinerTree(matrix2, new int[] {0, 4, 5})); // Expected answer: 10.0\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.graphtheory;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport org.junit.*;\n\npublic class SteinerTreeTest {\n\n  static final double INF = Double.POSITIVE_INFINITY;\n\n  ///////////////////////////////////\n  //                               //\n  //  Visualization of the graph:  //\n  //                               //\n  //            [O]                //\n  //            / \\                //\n  //           3   4               //\n  //          /     \\              //\n  //        [1]     [2]            //\n  //         |       |             //\n  //         5       6             //\n  //         |       |             //\n  //        [3]     [4]            //\n  //                               //\n  ///////////////////////////////////\n  static double[][] matrix1 =\n      new double[][] {\n        {0, 3, 4, INF, INF},\n        {3, 0, INF, 5, INF},\n        {4, INF, 0, INF, 6},\n        {INF, 5, INF, 0, INF},\n        {INF, INF, 6, INF, 0}\n      };\n\n  ///////////////////////////////////\n  //                               //\n  //  Visualization of the graph:  //\n  //                               //\n  //           [0]-3-[1]           //\n  //            |     |            //\n  //            5     4            //\n  //            |     |            //\n  //           [2]   [3]           //\n  //            | \\   |            //\n  //            7  8  1            //\n  //            |   \\ |            //\n  //           [4]-2-[5]           //\n  //                               //\n  ///////////////////////////////////\n  static double[][] matrix2 =\n      new double[][] {\n        {0, 3, 5, INF, INF, INF},\n        {3, 0, INF, 4, INF, INF},\n        {5, INF, 0, INF, 7, 8},\n        {INF, 4, INF, 0, INF, 1},\n        {INF, INF, 7, INF, 0, 2},\n        {INF, INF, 8, 1, 2, 0}\n      };\n\n  @Test\n  public void testNoTerminalNodesGivesZero() {\n    assertThat(testSteiner(matrix1)).isEqualTo(0.0);\n    assertThat(testSteiner(matrix2)).isEqualTo(0.0);\n  }\n\n  @Test\n  public void testOneTerminalNodeGivesZero() {\n    for (int i = 0; i < matrix1.length; i++) {\n      assertThat(testSteiner(matrix1, 0)).isEqualTo(0.0);\n    }\n    for (int i = 0; i < matrix2.length; i++) {\n      assertThat(testSteiner(matrix2, 0)).isEqualTo(0.0);\n    }\n  }\n\n  @Test\n  public void testTreeGraph() {\n    assertThat(testSteiner(matrix1, 2, 4)).isEqualTo(6.0);\n    assertThat(testSteiner(matrix1, 0, 3)).isEqualTo(8.0);\n    assertThat(testSteiner(matrix1, 1, 2, 4)).isEqualTo(13.0);\n    assertThat(testSteiner(matrix1, 4, 2, 1)).isEqualTo(13.0);\n    assertThat(testSteiner(matrix1, 3, 0, 4)).isEqualTo(18.0);\n    assertThat(testSteiner(matrix1, 1, 2, 3, 4)).isEqualTo(18.0);\n  }\n\n  @Test\n  public void testCycleGraph() {\n    assertThat(testSteiner(matrix2, 0, 5)).isEqualTo(8.0);\n    assertThat(testSteiner(matrix2, 5, 0)).isEqualTo(8.0);\n    assertThat(testSteiner(matrix2, 4, 0)).isEqualTo(10.0);\n    assertThat(testSteiner(matrix2, 2, 4, 5)).isEqualTo(9.0);\n    assertThat(testSteiner(matrix2, 3, 1, 0)).isEqualTo(7.0);\n    assertThat(testSteiner(matrix2, 3, 0)).isEqualTo(7.0);\n    assertThat(testSteiner(matrix2, 3, 0, 5)).isEqualTo(8.0);\n    assertThat(testSteiner(matrix2, 0, 4, 5)).isEqualTo(10.0);\n  }\n\n  private double testSteiner(double[][] distances, int... subsetToConnect) {\n    return SteinerTree.minLengthSteinerTree(distances, subsetToConnect);\n  }\n}\n"}
{"code_source": "/**\n * Abstract class that captures the behavior of a suffix array.\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.suffixarray;\n\npublic abstract class SuffixArray {\n\n  // Length of the suffix array\n  protected final int N;\n\n  // T is the text\n  protected int[] T;\n\n  // The sorted suffix array values.\n  protected int[] sa;\n\n  // Longest Common Prefix array\n  protected int[] lcp;\n\n  private boolean constructedSa = false;\n  private boolean constructedLcpArray = false;\n\n  public SuffixArray(int[] text) {\n    if (text == null) throw new IllegalArgumentException(\"Text cannot be null.\");\n    this.T = text;\n    this.N = text.length;\n  }\n\n  public int getTextLength() {\n    return T.length;\n  }\n\n  // Returns the suffix array.\n  public int[] getSa() {\n    buildSuffixArray();\n    return sa;\n  }\n\n  // Returns the LCP array.\n  public int[] getLcpArray() {\n    buildLcpArray();\n    return lcp;\n  }\n\n  // Builds the suffix array by calling the construct() method.\n  protected void buildSuffixArray() {\n    if (constructedSa) return;\n    construct();\n    constructedSa = true;\n  }\n\n  // Builds the LCP array by first creating the SA and then running the kasai algorithm.\n  protected void buildLcpArray() {\n    if (constructedLcpArray) return;\n    buildSuffixArray();\n    kasai();\n    constructedLcpArray = true;\n  }\n\n  protected static int[] toIntArray(String s) {\n    if (s == null) return null;\n    int[] t = new int[s.length()];\n    for (int i = 0; i < s.length(); i++) t[i] = s.charAt(i);\n    return t;\n  }\n\n  // The suffix array construction algorithm is left undefined\n  // as there are multiple ways to do this.\n  protected abstract void construct();\n\n  // Use Kasai algorithm to build LCP array\n  // http://www.mi.fu-berlin.de/wiki/pub/ABI/RnaSeqP4/suffix-array.pdf\n  private void kasai() {\n    lcp = new int[N];\n    int[] inv = new int[N];\n    for (int i = 0; i < N; i++) inv[sa[i]] = i;\n    for (int i = 0, len = 0; i < N; i++) {\n      if (inv[i] > 0) {\n        int k = sa[inv[i] - 1];\n        while ((i + len < N) && (k + len < N) && T[i + len] == T[k + len]) len++;\n        lcp[inv[i]] = len;\n        if (len > 0) len--;\n      }\n    }\n  }\n\n  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"-----i-----SA-----LCP---Suffix\\n\");\n\n    for (int i = 0; i < N; i++) {\n      int suffixLen = N - sa[i];\n      char[] suffixArray = new char[suffixLen];\n      for (int j = sa[i], k = 0; j < N; j++, k++) suffixArray[k] = (char) T[j];\n      String suffix = new String(suffixArray);\n      String formattedStr = String.format(\"% 7d % 7d % 7d %s\\n\", i, sa[i], lcp[i], suffix);\n      sb.append(formattedStr);\n    }\n    return sb.toString();\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.suffixarray;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.security.SecureRandom;\nimport java.util.Random;\nimport org.junit.*;\n\npublic class SuffixArrayTest {\n\n  static final SecureRandom random = new SecureRandom();\n  static final Random rand = new Random();\n\n  static final int LOOPS = 1000;\n  static final int TEST_SZ = 40;\n  static final int NUM_NULLS = TEST_SZ / 5;\n  static final int MAX_RAND_NUM = 250;\n\n  String ASCII_LETTERS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n  @Before\n  public void setup() {}\n\n  @Test\n  public void suffixArrayLength() {\n    String str = \"ABCDE\";\n\n    SuffixArray sa1 = new SuffixArraySlow(str);\n    SuffixArray sa2 = new SuffixArrayMed(str);\n    SuffixArray sa3 = new SuffixArrayFast(str);\n\n    assertThat(sa1.getSa().length).isEqualTo(str.length());\n    assertThat(sa2.getSa().length).isEqualTo(str.length());\n    assertThat(sa3.getSa().length).isEqualTo(str.length());\n  }\n\n  @Test\n  public void lcsUniqueCharacters() {\n\n    SuffixArray sa1 = new SuffixArraySlow(ASCII_LETTERS);\n    SuffixArray sa2 = new SuffixArrayMed(ASCII_LETTERS);\n    SuffixArray sa3 = new SuffixArrayFast(ASCII_LETTERS);\n\n    SuffixArray[] suffixArrays = {sa1, sa2, sa3};\n\n    for (SuffixArray sa : suffixArrays) {\n      for (int i = 0; i < sa.getSa().length; i++) {\n        assertThat(sa.getLcpArray()[i]).isEqualTo(0);\n      }\n    }\n  }\n\n  @Test\n  public void increasingLCPTest() {\n\n    String UNIQUE_CHARS = \"KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\";\n\n    SuffixArray sa1 = new SuffixArraySlow(UNIQUE_CHARS);\n    SuffixArray sa2 = new SuffixArrayMed(UNIQUE_CHARS);\n    SuffixArray sa3 = new SuffixArrayFast(UNIQUE_CHARS);\n\n    SuffixArray[] suffixArrays = {sa1, sa2, sa3};\n\n    for (SuffixArray sa : suffixArrays) {\n      for (int i = 0; i < sa.getSa().length; i++) {\n        assertThat(sa.getLcpArray()[i]).isEqualTo(i);\n      }\n    }\n  }\n\n  @Test\n  public void lcpTest1() {\n\n    String text = \"ABBABAABAA\";\n    int[] lcpValues = {0, 1, 2, 1, 4, 2, 0, 3, 2, 1};\n\n    SuffixArray sa1 = new SuffixArraySlow(text);\n    SuffixArray sa2 = new SuffixArrayMed(text);\n    SuffixArray sa3 = new SuffixArrayFast(text);\n\n    SuffixArray[] suffixArrays = {sa1, sa2, sa3};\n\n    for (SuffixArray sa : suffixArrays) {\n      for (int i = 0; i < sa.getSa().length; i++) {\n        assertThat(lcpValues[i]).isEqualTo(sa.getLcpArray()[i]);\n      }\n    }\n  }\n\n  @Test\n  public void lcpTest2() {\n    String text = \"ABABABAABB\";\n    int[] lcpValues = {0, 1, 3, 5, 2, 0, 1, 2, 4, 1};\n\n    SuffixArray sa1 = new SuffixArraySlow(text);\n    SuffixArray sa2 = new SuffixArrayMed(text);\n    SuffixArray sa3 = new SuffixArrayFast(text);\n\n    SuffixArray[] suffixArrays = {sa1, sa2, sa3};\n\n    for (SuffixArray sa : suffixArrays) {\n      for (int i = 0; i < sa.getSa().length; i++) {\n        assertThat(lcpValues[i]).isEqualTo(sa.getLcpArray()[i]);\n      }\n    }\n  }\n\n  @Test\n  public void saConstruction() {\n    // Test inspired by LCS. Make sure constructed SAs are equal.\n    // Use digits 0-9 to fake unique tokens\n    String text = \"BAAAAB0ABAAAAB1BABA2ABA3AAB4BBBB5BB\";\n\n    SuffixArray sa1 = new SuffixArraySlow(text);\n    SuffixArray sa2 = new SuffixArrayMed(text);\n    SuffixArray sa3 = new SuffixArrayFast(text);\n    SuffixArray[] suffixArrays = {sa1, sa2, sa3};\n\n    for (int i = 0; i < suffixArrays.length; i++) {\n      for (int j = i + 1; j < suffixArrays.length; j++) {\n        SuffixArray s1 = suffixArrays[i];\n        SuffixArray s2 = suffixArrays[j];\n        for (int k = 0; k < s1.getSa().length; k++) {\n          assertThat(s1.getSa()[k]).isEqualTo(s2.getSa()[k]);\n        }\n      }\n    }\n  }\n}\n"}
{"code_source": "/**\n * Run with: ./gradlew run -Palgorithm=datastructures.segmenttree.SumQueryAssignUpdateSegmentTree\n *\n * <p>Several thanks to cp-algorithms for their great article on segment trees:\n * https://cp-algorithms.com/data_structures/segment_tree.html\n *\n * <p>NOTE: This file is still a WIP\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.segmenttree;\n\npublic class SumQueryAssignUpdateSegmentTree {\n\n  // The number of elements in the original input values array.\n  private int n;\n\n  // The segment tree represented as a binary tree of ranges where t[0] is the\n  // root node and the left and right children of node i are i*2+1 and i*2+2.\n  private Long[] t;\n\n  // The delta values associates with each segment. Used for lazy propagation\n  // when doing range updates.\n  private Long[] lazy;\n\n  private Long sumCombinationFn(Long a, Long b) {\n    if (a == null && b == null) return null;\n    if (a == null) return b;\n    if (b == null) return a;\n    return a + b;\n  }\n\n  // Return the segment value if `x` was added to every element in the segment [tl, tr]\n  // during an assign update.\n  private Long sumRangeUpdateAssignFn(long base, int tl, int tr, long x) {\n    return (tr - tl + 1) * x;\n  }\n\n  public SumQueryAssignUpdateSegmentTree(long[] values) {\n    if (values == null) {\n      throw new IllegalArgumentException(\"Segment tree values cannot be null.\");\n    }\n\n    n = values.length;\n\n    // The size of the segment tree `t`\n    //\n    // TODO(william): Investigate to reduce this space. There are only 2n-1 segments, so we should\n    // be able to reduce the space, but may need to reorganize the tree/queries. One idea is to use\n    // the Eulerian tour structure of the tree to densely pack the segments.\n    int N = 4 * n;\n\n    t = new Long[N];\n    lazy = new Long[N];\n\n    buildSegmentTree(0, 0, n - 1, values);\n  }\n\n  /**\n   * Builds a segment tree by starting with the leaf nodes and combining segment values on callback.\n   *\n   * @param i the index of the segment in the segment tree\n   * @param tl the left index (inclusive) of the segment range\n   * @param tr the right index (inclusive) of the segment range\n   * @param values the initial values array\n   */\n  private void buildSegmentTree(int i, int tl, int tr, long[] values) {\n    if (tl == tr) {\n      t[i] = values[tl];\n      return;\n    }\n    int tm = (tl + tr) / 2;\n    buildSegmentTree(2 * i + 1, tl, tm, values);\n    buildSegmentTree(2 * i + 2, tm + 1, tr, values);\n\n    t[i] = sumCombinationFn(t[2 * i + 1], t[2 * i + 2]);\n  }\n\n  /**\n   * Returns the query of the range [l, r] on the original `values` array (+ any updates made to it)\n   *\n   * @param l the left endpoint of the range query (inclusive)\n   * @param r the right endpoint of the range query (inclusive)\n   */\n  public Long rangeQuery1(int l, int r) {\n    return rangeQuery1(0, 0, n - 1, l, r);\n  }\n\n  /**\n   * Returns the range query value of the range [l, r]\n   *\n   * @param i the index of the current segment in the tree\n   * @param tl the left endpoint (inclusive) of the current segment\n   * @param tr the right endpoint (inclusive) of the current segment\n   * @param l the target left endpoint (inclusive) for the range query\n   * @param r the target right endpoint (inclusive) for the range query\n   */\n  private Long rangeQuery1(int i, int tl, int tr, int l, int r) {\n    if (l > r) {\n      return null;\n    }\n    propagate1(i, tl, tr);\n    if (tl == l && tr == r) {\n      // System.out.printf(\"[%d, %d], t[i] = %d, lazy[i] = %d\\n\", tl, tr, t[i], lazy[i]);\n      return t[i];\n    }\n    // System.out.printf(\"[%d, %d]\\n\", tl, tr);\n    int tm = (tl + tr) / 2;\n    // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n    // [l, r], simply recurse on both segments and let the base case return the\n    // default value for invalid intervals.\n    return sumCombinationFn(\n        rangeQuery1(2 * i + 1, tl, tm, l, Math.min(tm, r)),\n        rangeQuery1(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r));\n  }\n\n  public void rangeUpdate1(int l, int r, long x) {\n    rangeUpdate1(0, 0, n - 1, l, r, x);\n  }\n\n  // TODO(william): cleanup this function\n  private Long assignFunction(Long a, Long b) {\n    return b;\n  }\n\n  private void propagateLazy(int i, int tl, int tr, long val) {\n    // Ignore leaf segments\n    if (tl == tr) return;\n    lazy[2 * i + 1] = assignFunction(/*unused*/ 0L, val);\n    lazy[2 * i + 2] = assignFunction(/*unused*/ 0L, val);\n  }\n\n  private void propagate1(int i, int tl, int tr) {\n    // Check for default value because you don't want to assign to the lazy\n    // value if it's the default value.\n    if (lazy[i] != null) {\n      t[i] = sumRangeUpdateAssignFn(/*unused*/ 0L, tl, tr, lazy[i]);\n      // Push delta to left/right segments for non-leaf nodes\n      propagateLazy(i, tl, tr, lazy[i]);\n      lazy[i] = null;\n    }\n  }\n\n  private void rangeUpdate1(int i, int tl, int tr, int l, int r, long x) {\n    propagate1(i, tl, tr);\n    if (l > r) {\n      return;\n    }\n\n    if (tl == l && tr == r) {\n      t[i] = sumRangeUpdateAssignFn(/*unused*/ 0L, tl, tr, x);\n      propagateLazy(i, tl, tr, x);\n    } else {\n      int tm = (tl + tr) / 2;\n      // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n      // [l, r], simply recurse on both segments and let the base case disregard\n      // invalid intervals.\n      rangeUpdate1(2 * i + 1, tl, tm, l, Math.min(tm, r), x);\n      rangeUpdate1(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r, x);\n\n      t[i] = sumCombinationFn(t[2 * i + 1], t[2 * i + 2]);\n    }\n  }\n\n  public void printDebugInfo() {\n    printDebugInfo(0, 0, n - 1);\n    System.out.println();\n  }\n\n  private void printDebugInfo(int i, int tl, int tr) {\n    System.out.printf(\"[%d, %d], t[i] = %d, lazy[i] = %d\\n\", tl, tr, t[i], lazy[i]);\n    if (tl == tr) {\n      return;\n    }\n    int tm = (tl + tr) / 2;\n    printDebugInfo(2 * i + 1, tl, tm);\n    printDebugInfo(2 * i + 2, tm + 1, tr);\n  }\n\n  ////////////////////////////////////////////////////\n  //              Example usage:                    //\n  ////////////////////////////////////////////////////\n\n  public static void main(String[] args) {\n    //          0, 1, 2, 3,  4\n    long[] v = {2, 1, 3, 4, -1};\n    SumQueryAssignUpdateSegmentTree st = new SumQueryAssignUpdateSegmentTree(v);\n  }\n}\n", "test_case": "/**\n * gradle test --info --tests\n * \"com.williamfiset.algorithms.datastructures.segmenttree.SumQueryAssignUpdateSegmentTreeTest\"\n */\npackage com.williamfiset.algorithms.datastructures.segmenttree;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.williamfiset.algorithms.utils.TestUtils;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class SumQueryAssignUpdateSegmentTreeTest {\n\n  static int ITERATIONS = 100;\n\n  @Before\n  public void setup() {}\n\n  @Test\n  public void simpleTest() {\n    long[] ar = {2, 1, 3, 4, -1};\n    SumQueryAssignUpdateSegmentTree st = new SumQueryAssignUpdateSegmentTree(ar);\n\n    st.rangeUpdate1(3, 4, 2);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(10);\n    assertThat(st.rangeQuery1(3, 4)).isEqualTo(4);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(2);\n    assertThat(st.rangeQuery1(4, 4)).isEqualTo(2);\n\n    st.rangeUpdate1(1, 3, 4);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(16);\n    assertThat(st.rangeQuery1(0, 1)).isEqualTo(6);\n    assertThat(st.rangeQuery1(3, 4)).isEqualTo(6);\n    assertThat(st.rangeQuery1(1, 1)).isEqualTo(4);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(4);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(4);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(12);\n    assertThat(st.rangeQuery1(2, 3)).isEqualTo(8);\n    assertThat(st.rangeQuery1(1, 2)).isEqualTo(8);\n\n    st.rangeUpdate1(2, 2, 5);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(17);\n    assertThat(st.rangeQuery1(0, 2)).isEqualTo(11);\n    assertThat(st.rangeQuery1(2, 4)).isEqualTo(11);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(13);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(5);\n  }\n\n  @Test\n  public void testRandomRangeAssignUpdatesWithSumRangeQueries() {\n    for (int n = 5; n < ITERATIONS; n++) {\n      long[] ar = TestUtils.randomLongArray(n, -100, +100);\n      SumQueryAssignUpdateSegmentTree st = new SumQueryAssignUpdateSegmentTree(ar);\n\n      for (int i = 0; i < n; i++) {\n        // System.out.printf(\"n = %d, i = %d\\n\", n, i);\n        int j = TestUtils.randValue(0, n - 1);\n        int k = TestUtils.randValue(0, n - 1);\n        int i1 = Math.min(j, k);\n        int i2 = Math.max(j, k);\n\n        // Range query\n        long bfSum = bruteForceSum(ar, i1, i2);\n        long segTreeSum = st.rangeQuery1(i1, i2);\n        assertThat(bfSum).isEqualTo(segTreeSum);\n\n        // Range update\n        j = TestUtils.randValue(0, n - 1);\n        k = TestUtils.randValue(0, n - 1);\n        int i3 = Math.min(j, k);\n        int i4 = Math.max(j, k);\n        long randValue = TestUtils.randValue(-100, 100);\n        // System.out.printf(\"Update [%d, %d] to %d\\n\", i3, i4, randValue);\n        st.rangeUpdate1(i3, i4, randValue);\n        bruteForceAssignRangeUpdate(ar, i3, i4, randValue);\n      }\n    }\n  }\n\n  // Finds the sum in an array between [l, r] in the `values` array\n  private static long bruteForceSum(long[] values, int l, int r) {\n    long s = 0;\n    for (int i = l; i <= r; i++) {\n      s += values[i];\n    }\n    return s;\n  }\n\n  // Finds the min value in an array between [l, r] in the `values` array\n  private static long bruteForceMin(long[] values, int l, int r) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) {\n      m = Math.min(m, values[i]);\n    }\n    return m;\n  }\n\n  // Finds the max value in an array between [l, r] in the `values` array\n  private static long bruteForceMax(long[] values, int l, int r) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) {\n      m = Math.max(m, values[i]);\n    }\n    return m;\n  }\n\n  private static void bruteForceSumRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] += x;\n    }\n  }\n\n  private static void bruteForceMulRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] *= x;\n    }\n  }\n\n  private static void bruteForceAssignRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] = x;\n    }\n  }\n}\n"}
{"code_source": "/**\n * Run with: ./gradlew run -Palgorithm=datastructures.segmenttree.SumQuerySumUpdateSegmentTree\n *\n * <p>Several thanks to cp-algorithms for their great article on segment trees:\n * https://cp-algorithms.com/data_structures/segment_tree.html\n *\n * <p>NOTE: This file is still a WIP\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.segmenttree;\n\npublic class SumQueryMultiplicationUpdateSegmentTree {\n\n  // The number of elements in the original input values array.\n  private final int n;\n\n  // The segment tree represented as a binary tree of ranges where t[0] is the\n  // root node and the left and right children of node i are i*2+1 and i*2+2.\n  private Long[] t;\n\n  // The delta values associates with each segment. Used for lazy propagation\n  // when doing range updates.\n  private Long[] lazy;\n\n  // Sum sumFunction\n  private Long sumFunction(Long a, Long b) {\n    if (a == null) a = 0L;\n    if (b == null) b = 0L;\n    return a + b;\n  }\n\n  // Multiplication range update function\n  private Long multRuf(Long base, int tl, int tr, Long delta) {\n    // When we hit a null value, multiply by 1 since this is the\n    // multiplication identity, i.e: 1*x = x\n    if (base == null) base = 1L;\n    if (delta == null) delta = 1L;\n    return base * delta;\n  }\n\n  // Lazy multiplication range update function\n  private long multLruf(Long delta1, Long delta2) {\n    // When we hit a null value, multiply by 1 since this is the\n    // multiplication identity, i.e: 1*x = x\n    if (delta1 == null) delta1 = 1L;\n    if (delta2 == null) delta2 = 1L;\n    // Multiply together the existing delta and the new delta to properly\n    // propagate the changes.\n    return delta1 * delta2;\n  }\n\n  public SumQueryMultiplicationUpdateSegmentTree(long[] values) {\n    if (values == null) {\n      throw new IllegalArgumentException(\"Segment tree values cannot be null.\");\n    }\n    n = values.length;\n\n    // The size of the segment tree `t`\n    //\n    // TODO(william): Investigate to reduce this space. There are only 2n-1 segments, so we should\n    // be able to reduce the space, but may need to reorganize the tree/queries. One idea is to use\n    // the Eulerian tour structure of the tree to densely pack the segments.\n    int N = 4 * n;\n\n    t = new Long[N];\n    lazy = new Long[N];\n\n    buildSegmentTree(0, 0, n - 1, values);\n  }\n\n  /**\n   * Builds a segment tree by starting with the leaf nodes and combining segment values on callback.\n   *\n   * @param i the index of the segment in the segment tree\n   * @param tl the left index (inclusive) of the segment range\n   * @param tr the right index (inclusive) of the segment range\n   * @param values the initial values array\n   */\n  private void buildSegmentTree(int i, int tl, int tr, long[] values) {\n    if (tl == tr) {\n      t[i] = values[tl];\n      return;\n    }\n    int tm = (tl + tr) / 2;\n    buildSegmentTree(2 * i + 1, tl, tm, values);\n    buildSegmentTree(2 * i + 2, tm + 1, tr, values);\n\n    t[i] = sumFunction(t[2 * i + 1], t[2 * i + 2]);\n  }\n\n  /**\n   * Returns the query of the range [l, r] on the original `values` array (+ any updates made to it)\n   *\n   * @param l the left endpoint of the range query (inclusive)\n   * @param r the right endpoint of the range query (inclusive)\n   */\n  public Long rangeQuery1(int l, int r) {\n    return rangeQuery1(0, 0, n - 1, l, r);\n  }\n\n  /**\n   * Returns the range query value of the range [l, r]\n   *\n   * @param i the index of the current segment in the tree\n   * @param tl the left endpoint (inclusive) of the current segment\n   * @param tr the right endpoint (inclusive) of the current segment\n   * @param l the target left endpoint (inclusive) for the range query\n   * @param r the target right endpoint (inclusive) for the range query\n   */\n  private Long rangeQuery1(int i, int tl, int tr, int l, int r) {\n    if (l > r) {\n      return null;\n    }\n    propagate1(i, tl, tr);\n    if (tl == l && tr == r) {\n      return t[i];\n    }\n    int tm = (tl + tr) / 2;\n    // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n    // [l, r], simply recurse on both segments and let the base case return the\n    // default value for invalid intervals.\n    return sumFunction(\n        rangeQuery1(2 * i + 1, tl, tm, l, Math.min(tm, r)),\n        rangeQuery1(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r));\n  }\n\n  public void rangeUpdate1(int l, int r, long x) {\n    rangeUpdate1(0, 0, n - 1, l, r, x);\n  }\n\n  private void propagateLazy(int i, int tl, int tr, long val) {\n    // Ignore leaf segments\n    if (tl == tr) return;\n    lazy[2 * i + 1] = multLruf(lazy[2 * i + 1], val);\n    lazy[2 * i + 2] = multLruf(lazy[2 * i + 2], val);\n  }\n\n  private void propagate1(int i, int tl, int tr) {\n    // Check for default value because you don't want to assign to the lazy\n    // value if it's the default value.\n    if (lazy[i] != null) {\n      t[i] = multRuf(t[i], /*unused*/ 0, /*unused*/ 0, lazy[i]);\n      // Push delta to left/right segments for non-leaf nodes\n      propagateLazy(i, tl, tr, lazy[i]);\n      lazy[i] = null;\n    }\n  }\n\n  private void rangeUpdate1(int i, int tl, int tr, int l, int r, long x) {\n    propagate1(i, tl, tr);\n    if (l > r) {\n      return;\n    }\n\n    if (tl == l && tr == r) {\n      t[i] = multRuf(t[i], /*unused*/ 0, /*unused*/ 0, x);\n      propagateLazy(i, tl, tr, x);\n    } else {\n      int tm = (tl + tr) / 2;\n      // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n      // [l, r], simply recurse on both segments and let the base case disregard\n      // invalid intervals.\n      rangeUpdate1(2 * i + 1, tl, tm, l, Math.min(tm, r), x);\n      rangeUpdate1(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r, x);\n\n      t[i] = sumFunction(t[2 * i + 1], t[2 * i + 2]);\n    }\n  }\n\n  public void printDebugInfo() {\n    printDebugInfo(0, 0, n - 1);\n    System.out.println();\n  }\n\n  private void printDebugInfo(int i, int tl, int tr) {\n    System.out.printf(\"[%d, %d], t[i] = %d, lazy[i] = %d\\n\", tl, tr, t[i], lazy[i]);\n    if (tl == tr) {\n      return;\n    }\n    int tm = (tl + tr) / 2;\n    printDebugInfo(2 * i + 1, tl, tm);\n    printDebugInfo(2 * i + 2, tm + 1, tr);\n  }\n\n  ////////////////////////////////////////////////////\n  //              Example usage:                    //\n  ////////////////////////////////////////////////////\n\n  public static void main(String[] args) {\n    //          0, 1, 2, 3,  4\n    long[] v = {2, 1, 3, 4, -1};\n    SumQuerySumUpdateSegmentTree st = new SumQuerySumUpdateSegmentTree(v);\n  }\n}\n", "test_case": "/**\n * gradle test --info --tests\n * \"com.williamfiset.algorithms.datastructures.segmenttree.SumQueryMultiplicationUpdateSegmentTreeTest\"\n */\npackage com.williamfiset.algorithms.datastructures.segmenttree;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.williamfiset.algorithms.utils.TestUtils;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class SumQueryMultiplicationUpdateSegmentTreeTest {\n\n  static int ITERATIONS = 100;\n  static int MAX_N = 28;\n\n  @Before\n  public void setup() {}\n\n  @Test\n  public void simpleTest() {\n    long[] ar = {1, 4, 5, 3, 2};\n    SumQueryMultiplicationUpdateSegmentTree st = new SumQueryMultiplicationUpdateSegmentTree(ar);\n\n    st.rangeUpdate1(1, 3, 3);\n\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(4 * 3 + 5 * 3 + 3 * 3);\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(1 + 4 * 3 + 5 * 3 + 3 * 3 + 2);\n    assertThat(st.rangeQuery1(0, 2)).isEqualTo(1 + 4 * 3 + 5 * 3);\n    assertThat(st.rangeQuery1(2, 4)).isEqualTo(5 * 3 + 3 * 3 + 2);\n\n    st.rangeUpdate1(1, 3, 2);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(4 * 3 * 2 + 5 * 3 * 2 + 3 * 3 * 2);\n  }\n\n  @Test\n  public void testRandomRangeSumUpdatesWithSumRangeQueries() {\n    for (int n = 5; n < MAX_N; n++) {\n      long[] ar = TestUtils.randomLongArray(n, -10, +10);\n      SumQueryMultiplicationUpdateSegmentTree st =\n          new SumQueryMultiplicationUpdateSegmentTree(ar.clone());\n\n      for (int i = 0; i < ITERATIONS; i++) {\n        int j = TestUtils.randValue(0, n - 1);\n        int k = TestUtils.randValue(0, n - 1);\n        int i1 = Math.min(j, k);\n        int i2 = Math.max(j, k);\n\n        j = TestUtils.randValue(0, n - 1);\n        k = TestUtils.randValue(0, n - 1);\n        int i3 = Math.min(j, k);\n        int i4 = Math.max(j, k);\n\n        // Range update.\n        // Yes, these values will likely cause overflow through excessive\n        // multiplication of segment values\n        long randValue = TestUtils.randValue(-100, +100);\n        bruteForceMulRangeUpdate(ar, i3, i4, randValue);\n        st.rangeUpdate1(i3, i4, randValue);\n\n        // Range query\n        long bfSum = bruteForceSum(ar, i1, i2);\n        long segTreeSum = st.rangeQuery1(i1, i2);\n        assertThat(bfSum).isEqualTo(segTreeSum);\n      }\n    }\n  }\n\n  // Finds the sum in an array between [l, r] in the `values` array\n  private static long bruteForceSum(long[] values, int l, int r) {\n    long s = 0;\n    for (int i = l; i <= r; i++) {\n      s += values[i];\n    }\n    return s;\n  }\n\n  // Finds the min value in an array between [l, r] in the `values` array\n  private static long bruteForceMin(long[] values, int l, int r) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) {\n      m = Math.min(m, values[i]);\n    }\n    return m;\n  }\n\n  // Finds the max value in an array between [l, r] in the `values` array\n  private static long bruteForceMax(long[] values, int l, int r) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) {\n      m = Math.max(m, values[i]);\n    }\n    return m;\n  }\n\n  private static void bruteForceSumRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] += x;\n    }\n  }\n\n  private static void bruteForceMulRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] *= x;\n    }\n  }\n\n  private static void bruteForceAssignRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] = x;\n    }\n  }\n}\n"}
{"code_source": "/**\n * Run with: ./gradlew run -Palgorithm=datastructures.segmenttree.SumQuerySumUpdateSegmentTree\n *\n * <p>Several thanks to cp-algorithms for their great article on segment trees:\n * https://cp-algorithms.com/data_structures/segment_tree.html\n *\n * <p>NOTE: This file is still a WIP\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.segmenttree;\n\npublic class SumQuerySumUpdateSegmentTree {\n\n  // The number of elements in the original input values array.\n  private final int n;\n\n  // The segment tree represented as a binary tree of ranges where t[0] is the\n  // root node and the left and right children of node i are i*2+1 and i*2+2.\n  private Long[] t;\n\n  // The delta values associates with each segment. Used for lazy propagation\n  // when doing range updates.\n  private Long[] lazy;\n\n  // Sum sumFunction\n  private Long sumFunction(Long a, Long b) {\n    if (a == null) a = 0L;\n    if (b == null) b = 0L;\n    return a + b;\n  }\n\n  public SumQuerySumUpdateSegmentTree(long[] values) {\n    if (values == null) {\n      throw new IllegalArgumentException(\"Segment tree values cannot be null.\");\n    }\n    n = values.length;\n\n    // The size of the segment tree `t`\n    //\n    // TODO(william): Investigate to reduce this space. There are only 2n-1 segments, so we should\n    // be able to reduce the space, but may need to reorganize the tree/queries. One idea is to use\n    // the Eulerian tour structure of the tree to densely pack the segments.\n    int N = 4 * n;\n\n    t = new Long[N];\n    lazy = new Long[N];\n\n    buildSegmentTree(0, 0, n - 1, values);\n  }\n\n  /**\n   * Builds a segment tree by starting with the leaf nodes and combining segment values on callback.\n   *\n   * @param i the index of the segment in the segment tree\n   * @param tl the left index (inclusive) of the segment range\n   * @param tr the right index (inclusive) of the segment range\n   * @param values the initial values array\n   */\n  private void buildSegmentTree(int i, int tl, int tr, long[] values) {\n    if (tl == tr) {\n      t[i] = values[tl];\n      return;\n    }\n    int tm = (tl + tr) / 2;\n    buildSegmentTree(2 * i + 1, tl, tm, values);\n    buildSegmentTree(2 * i + 2, tm + 1, tr, values);\n\n    t[i] = sumFunction(t[2 * i + 1], t[2 * i + 2]);\n  }\n\n  /**\n   * Returns the query of the range [l, r] on the original `values` array (+ any updates made to it)\n   *\n   * @param l the left endpoint of the range query (inclusive)\n   * @param r the right endpoint of the range query (inclusive)\n   */\n  public Long rangeQuery1(int l, int r) {\n    return rangeQuery1(0, 0, n - 1, l, r);\n  }\n\n  /**\n   * Returns the range query value of the range [l, r]\n   *\n   * @param i the index of the current segment in the tree\n   * @param tl the left endpoint (inclusive) of the current segment\n   * @param tr the right endpoint (inclusive) of the current segment\n   * @param l the target left endpoint (inclusive) for the range query\n   * @param r the target right endpoint (inclusive) for the range query\n   */\n  private Long rangeQuery1(int i, int tl, int tr, int l, int r) {\n    if (l > r) {\n      return null;\n    }\n    propagate1(i, tl, tr);\n    if (tl == l && tr == r) {\n      return t[i];\n    }\n    int tm = (tl + tr) / 2;\n    // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n    // [l, r], simply recurse on both segments and let the base case return the\n    // default value for invalid intervals.\n    return sumFunction(\n        rangeQuery1(2 * i + 1, tl, tm, l, Math.min(tm, r)),\n        rangeQuery1(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r));\n  }\n\n  public void rangeUpdate1(int l, int r, long x) {\n    rangeUpdate1(0, 0, n - 1, l, r, x);\n  }\n\n  private void propagateLazy(int i, int tl, int tr, long val) {\n    // Ignore leaf segments\n    if (tl == tr) return;\n    lazy[2 * i + 1] = sumFunction(lazy[2 * i + 1], val);\n    lazy[2 * i + 2] = sumFunction(lazy[2 * i + 2], val);\n  }\n\n  private void propagate1(int i, int tl, int tr) {\n    // Check for default value because you don't want to assign to the lazy\n    // value if it's the default value.\n    if (lazy[i] != null) {\n      long rangeSum = (tr - tl + 1) * lazy[i];\n      t[i] = sumFunction(t[i], rangeSum);\n      // Push delta to left/right segments for non-leaf nodes\n      propagateLazy(i, tl, tr, lazy[i]);\n      lazy[i] = null;\n    }\n  }\n\n  private void rangeUpdate1(int i, int tl, int tr, int l, int r, long x) {\n    propagate1(i, tl, tr);\n    if (l > r) {\n      return;\n    }\n\n    if (tl == l && tr == r) {\n      long rangeSum = (tr - tl + 1) * x;\n      t[i] = sumFunction(t[i], rangeSum);\n      propagateLazy(i, tl, tr, x);\n    } else {\n      int tm = (tl + tr) / 2;\n      // Instead of checking if [tl, tm] overlaps [l, r] and [tm+1, tr] overlaps\n      // [l, r], simply recurse on both segments and let the base case disregard\n      // invalid intervals.\n      rangeUpdate1(2 * i + 1, tl, tm, l, Math.min(tm, r), x);\n      rangeUpdate1(2 * i + 2, tm + 1, tr, Math.max(l, tm + 1), r, x);\n\n      t[i] = sumFunction(t[2 * i + 1], t[2 * i + 2]);\n    }\n  }\n\n  public void printDebugInfo() {\n    printDebugInfo(0, 0, n - 1);\n    System.out.println();\n  }\n\n  private void printDebugInfo(int i, int tl, int tr) {\n    System.out.printf(\"[%d, %d], t[i] = %d, lazy[i] = %d\\n\", tl, tr, t[i], lazy[i]);\n    if (tl == tr) {\n      return;\n    }\n    int tm = (tl + tr) / 2;\n    printDebugInfo(2 * i + 1, tl, tm);\n    printDebugInfo(2 * i + 2, tm + 1, tr);\n  }\n\n  ////////////////////////////////////////////////////\n  //              Example usage:                    //\n  ////////////////////////////////////////////////////\n\n  public static void main(String[] args) {\n    //          0, 1, 2, 3,  4\n    long[] v = {2, 1, 3, 4, -1};\n    SumQuerySumUpdateSegmentTree st = new SumQuerySumUpdateSegmentTree(v);\n\n    int l = 1;\n    int r = 3;\n    st.printDebugInfo();\n    System.out.printf(\"The sum between indeces [%d, %d] is: %d\\n\", l, r, st.rangeQuery1(l, r));\n    st.rangeUpdate1(l, r, 3);\n    st.printDebugInfo();\n    System.out.printf(\"The sum between indeces [%d, %d] is: %d\\n\", l, r, st.rangeQuery1(l, r));\n  }\n}\n", "test_case": "/**\n * gradle test --info --tests\n * \"com.williamfiset.algorithms.datastructures.segmenttree.SumQuerySumUpdateSegmentTreeTest\"\n */\npackage com.williamfiset.algorithms.datastructures.segmenttree;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.williamfiset.algorithms.utils.TestUtils;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class SumQuerySumUpdateSegmentTreeTest {\n\n  static int ITERATIONS = 100;\n\n  @Before\n  public void setup() {}\n\n  @Test\n  public void simpleTest() {\n    long[] ar = {2, 1, 3, 4, -1};\n    SumQuerySumUpdateSegmentTree st = new SumQuerySumUpdateSegmentTree(ar);\n\n    st.rangeUpdate1(0, 4, 1);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(14);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(11);\n    assertThat(st.rangeQuery1(2, 4)).isEqualTo(9);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(5);\n\n    st.rangeUpdate1(3, 4, 4);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(3 + 2 + 4 + 9 + 4);\n    assertThat(st.rangeQuery1(0, 1)).isEqualTo(3 + 2);\n    assertThat(st.rangeQuery1(3, 4)).isEqualTo(9 + 4);\n    assertThat(st.rangeQuery1(1, 1)).isEqualTo(2);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(4);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(9);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(15);\n    assertThat(st.rangeQuery1(2, 3)).isEqualTo(13);\n    assertThat(st.rangeQuery1(1, 2)).isEqualTo(6);\n\n    st.rangeUpdate1(1, 3, 3);\n\n    assertThat(st.rangeQuery1(0, 4)).isEqualTo(3 + 5 + 7 + 12 + 4);\n    assertThat(st.rangeQuery1(0, 2)).isEqualTo(3 + 5 + 7);\n    assertThat(st.rangeQuery1(2, 4)).isEqualTo(7 + 12 + 4);\n    assertThat(st.rangeQuery1(1, 3)).isEqualTo(5 + 7 + 12);\n    assertThat(st.rangeQuery1(0, 0)).isEqualTo(3);\n    assertThat(st.rangeQuery1(1, 1)).isEqualTo(5);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(7);\n    assertThat(st.rangeQuery1(3, 3)).isEqualTo(12);\n    assertThat(st.rangeQuery1(4, 4)).isEqualTo(4);\n  }\n\n  @Test\n  public void simpleTest2() {\n    long[] ar = {0, 0, 0, 0, 0};\n    SumQuerySumUpdateSegmentTree st = new SumQuerySumUpdateSegmentTree(ar);\n\n    st.rangeUpdate1(1, 2, 7);\n    assertThat(st.rangeQuery1(0, 1)).isEqualTo(7);\n\n    st.rangeUpdate1(0, 1, -1);\n    assertThat(st.rangeQuery1(0, 1)).isEqualTo(5);\n  }\n\n  @Test\n  public void simpleTest3() {\n    long[] ar = {0, 0, 0, 0, 0};\n    SumQuerySumUpdateSegmentTree st = new SumQuerySumUpdateSegmentTree(ar);\n\n    st.rangeUpdate1(2, 3, 6);\n    assertThat(st.rangeQuery1(0, 0)).isEqualTo(0);\n\n    st.rangeUpdate1(0, 0, -5);\n    assertThat(st.rangeQuery1(2, 3)).isEqualTo(12);\n\n    st.rangeUpdate1(1, 3, -4);\n    assertThat(st.rangeQuery1(1, 2)).isEqualTo(-2);\n  }\n\n  @Test\n  public void simpleTest4() {\n    long[] ar = {0, 0, 0, 0, 0};\n    SumQuerySumUpdateSegmentTree st = new SumQuerySumUpdateSegmentTree(ar);\n\n    st.rangeUpdate1(0, 2, 2);\n    assertThat(st.rangeQuery1(0, 1)).isEqualTo(4);\n\n    st.rangeUpdate1(0, 2, -3);\n    assertThat(st.rangeQuery1(0, 2)).isEqualTo(-3);\n  }\n\n  @Test\n  public void simpleTest5() {\n    long[] ar = {0, 0, 0, 0, 0};\n    SumQuerySumUpdateSegmentTree st = new SumQuerySumUpdateSegmentTree(ar);\n\n    st.rangeUpdate1(1, 2, -8);\n    assertThat(st.rangeQuery1(2, 2)).isEqualTo(-8);\n\n    st.rangeUpdate1(0, 3, -4);\n    assertThat(st.rangeQuery1(2, 3)).isEqualTo(-16);\n  }\n\n  @Test\n  public void testRandomRangeSumUpdatesWithSumRangeQueries() {\n    for (int n = 5; n < ITERATIONS; n++) {\n      long[] ar = TestUtils.randomLongArray(n, -100, +100);\n      SumQuerySumUpdateSegmentTree st = new SumQuerySumUpdateSegmentTree(ar.clone());\n\n      for (int i = 0; i < n; i++) {\n        int j = TestUtils.randValue(0, n - 1);\n        int k = TestUtils.randValue(0, n - 1);\n        int i1 = Math.min(j, k);\n        int i2 = Math.max(j, k);\n\n        j = TestUtils.randValue(0, n - 1);\n        k = TestUtils.randValue(0, n - 1);\n        int i3 = Math.min(j, k);\n        int i4 = Math.max(j, k);\n\n        // Range update\n        long randValue = TestUtils.randValue(-10, 10);\n        bruteForceSumRangeUpdate(ar, i3, i4, randValue);\n        st.rangeUpdate1(i3, i4, randValue);\n\n        // Range query\n        long bfSum = bruteForceSum(ar, i1, i2);\n        long segTreeSum = st.rangeQuery1(i1, i2);\n        assertThat(bfSum).isEqualTo(segTreeSum);\n      }\n    }\n  }\n\n  // Finds the sum in an array between [l, r] in the `values` array\n  private static long bruteForceSum(long[] values, int l, int r) {\n    long s = 0;\n    for (int i = l; i <= r; i++) {\n      s += values[i];\n    }\n    return s;\n  }\n\n  // Finds the min value in an array between [l, r] in the `values` array\n  private static long bruteForceMin(long[] values, int l, int r) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) {\n      m = Math.min(m, values[i]);\n    }\n    return m;\n  }\n\n  // Finds the max value in an array between [l, r] in the `values` array\n  private static long bruteForceMax(long[] values, int l, int r) {\n    long m = values[l];\n    for (int i = l; i <= r; i++) {\n      m = Math.max(m, values[i]);\n    }\n    return m;\n  }\n\n  private static void bruteForceSumRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] += x;\n    }\n  }\n\n  private static void bruteForceMulRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] *= x;\n    }\n  }\n\n  private static void bruteForceAssignRangeUpdate(long[] values, int l, int r, long x) {\n    for (int i = l; i <= r; i++) {\n      values[i] = x;\n    }\n  }\n}\n"}
{"code_source": "/**\n * An implementation of Tarjan's Strongly Connected Components algorithm using an adjacency list.\n *\n * <p>Verified against:\n *\n * <ul>\n *   <li>https://open.kattis.com/problems/equivalences\n *   <li>https://open.kattis.com/problems/runningmom\n *   <li>https://www.hackerearth.com/practice/algorithms/graphs/strongly-connected-components/tutorial\n * </ul>\n *\n * <p>Time complexity: O(V+E)\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.graphtheory;\n\nimport static java.lang.Math.min;\n\nimport java.util.*;\n\npublic class TarjanSccSolverAdjacencyList {\n\n  private int n;\n  private List<List<Integer>> graph;\n\n  private boolean solved;\n  private int sccCount, id;\n  private boolean[] visited;\n  private int[] ids, low, sccs;\n  private Deque<Integer> stack;\n\n  private static final int UNVISITED = -1;\n\n  public TarjanSccSolverAdjacencyList(List<List<Integer>> graph) {\n    if (graph == null) throw new IllegalArgumentException(\"Graph cannot be null.\");\n    n = graph.size();\n    this.graph = graph;\n  }\n\n  // Returns the number of strongly connected components in the graph.\n  public int sccCount() {\n    if (!solved) solve();\n    return sccCount;\n  }\n\n  // Get the connected components of this graph. If two indexes\n  // have the same value then they're in the same SCC.\n  public int[] getSccs() {\n    if (!solved) solve();\n    return sccs;\n  }\n\n  public void solve() {\n    if (solved) return;\n\n    ids = new int[n];\n    low = new int[n];\n    sccs = new int[n];\n    visited = new boolean[n];\n    stack = new ArrayDeque<>();\n    Arrays.fill(ids, UNVISITED);\n\n    for (int i = 0; i < n; i++) {\n      if (ids[i] == UNVISITED) {\n        dfs(i);\n      }\n    }\n\n    solved = true;\n  }\n\n  private void dfs(int at) {\n    ids[at] = low[at] = id++;\n    stack.push(at);\n    visited[at] = true;\n\n    for (int to : graph.get(at)) {\n      if (ids[to] == UNVISITED) {\n        dfs(to);\n      }\n      if (visited[to]) {\n        low[at] = min(low[at], low[to]);\n      }\n      /*\n       TODO(william): investigate whether the proper way to update the lowlinks\n       is the following bit of code. From my experience this doesn't seem to\n       matter if the output is placed in a separate output array, but this needs\n       further investigation.\n\n       if (ids[to] == UNVISITED) {\n         dfs(to);\n         low[at] = min(low[at], low[to]);\n       }\n       if (visited[to]) {\n         low[at] = min(low[at], ids[to]);\n       }\n      */\n\n    }\n\n    // On recursive callback, if we're at the root node (start of SCC)\n    // empty the seen stack until back to root.\n    if (ids[at] == low[at]) {\n      for (int node = stack.pop(); ; node = stack.pop()) {\n        visited[node] = false;\n        sccs[node] = sccCount;\n        if (node == at) break;\n      }\n      sccCount++;\n    }\n  }\n\n  // Initializes adjacency list with n nodes.\n  public static List<List<Integer>> createGraph(int n) {\n    List<List<Integer>> graph = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) graph.add(new ArrayList<>());\n    return graph;\n  }\n\n  // Adds a directed edge from node 'from' to node 'to'\n  public static void addEdge(List<List<Integer>> graph, int from, int to) {\n    graph.get(from).add(to);\n  }\n\n  /* Example usage: */\n\n  public static void main(String[] arg) {\n    int n = 8;\n    List<List<Integer>> graph = createGraph(n);\n\n    addEdge(graph, 6, 0);\n    addEdge(graph, 6, 2);\n    addEdge(graph, 3, 4);\n    addEdge(graph, 6, 4);\n    addEdge(graph, 2, 0);\n    addEdge(graph, 0, 1);\n    addEdge(graph, 4, 5);\n    addEdge(graph, 5, 6);\n    addEdge(graph, 3, 7);\n    addEdge(graph, 7, 5);\n    addEdge(graph, 1, 2);\n    addEdge(graph, 7, 3);\n    addEdge(graph, 5, 0);\n\n    TarjanSccSolverAdjacencyList solver = new TarjanSccSolverAdjacencyList(graph);\n\n    int[] sccs = solver.getSccs();\n    Map<Integer, List<Integer>> multimap = new HashMap<>();\n    for (int i = 0; i < n; i++) {\n      if (!multimap.containsKey(sccs[i])) multimap.put(sccs[i], new ArrayList<>());\n      multimap.get(sccs[i]).add(i);\n    }\n\n    // Prints:\n    // Number of Strongly Connected Components: 3\n    // Nodes: [0, 1, 2] form a Strongly Connected Component.\n    // Nodes: [3, 7] form a Strongly Connected Component.\n    // Nodes: [4, 5, 6] form a Strongly Connected Component.\n    System.out.printf(\"Number of Strongly Connected Components: %d\\n\", solver.sccCount());\n    for (List<Integer> scc : multimap.values()) {\n      System.out.println(\"Nodes: \" + scc + \" form a Strongly Connected Component.\");\n    }\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.graphtheory;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.google.common.collect.ImmutableList;\nimport java.util.*;\nimport org.junit.*;\n\npublic class TarjanSccSolverAdjacencyListTest {\n\n  // Initialize graph with 'n' nodes.\n  public static List<List<Integer>> createGraph(int n) {\n    List<List<Integer>> graph = new ArrayList<>();\n    for (int i = 0; i < n; i++) graph.add(new ArrayList<>());\n    return graph;\n  }\n\n  // Add directed edge to graph.\n  public static void addEdge(List<List<Integer>> graph, int from, int to) {\n    graph.get(from).add(to);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void nullGraphConstructor() {\n    new TarjanSccSolverAdjacencyList(null);\n  }\n\n  @Test\n  public void singletonCase() {\n    int n = 1;\n    List<List<Integer>> g = createGraph(n);\n\n    TarjanSccSolverAdjacencyList solver = new TarjanSccSolverAdjacencyList(g);\n    solver.solve();\n\n    int[] actual = solver.getSccs();\n    int[] expected = new int[n];\n    assertThat(actual).isEqualTo(expected);\n    assertThat(solver.sccCount()).isEqualTo(1);\n  }\n\n  @Test\n  public void testTwoDisjointComponents() {\n    int n = 5;\n    List<List<Integer>> g = createGraph(n);\n\n    addEdge(g, 0, 1);\n    addEdge(g, 1, 0);\n\n    addEdge(g, 2, 3);\n    addEdge(g, 3, 4);\n    addEdge(g, 4, 2);\n\n    TarjanSccSolverAdjacencyList solver = new TarjanSccSolverAdjacencyList(g);\n    solver.solve();\n\n    List<List<Integer>> expectedSccs =\n        ImmutableList.of(ImmutableList.of(0, 1), ImmutableList.of(2, 3, 4));\n\n    assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n    assertThat(isScc(solver.getSccs(), expectedSccs)).isTrue();\n  }\n\n  @Test\n  public void testButterflyCase() {\n    int n = 5;\n    List<List<Integer>> g = createGraph(n);\n\n    addEdge(g, 0, 1);\n    addEdge(g, 1, 2);\n    addEdge(g, 2, 3);\n    addEdge(g, 3, 1);\n    addEdge(g, 1, 4);\n    addEdge(g, 4, 0);\n\n    TarjanSccSolverAdjacencyList solver = new TarjanSccSolverAdjacencyList(g);\n    solver.solve();\n\n    List<List<Integer>> expectedSccs = ImmutableList.of(ImmutableList.of(0, 1, 2, 3, 4));\n\n    assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n    assertThat(isScc(solver.getSccs(), expectedSccs)).isTrue();\n  }\n\n  @Test\n  public void testDisjointTree() {\n    int n = 7;\n    List<List<Integer>> g = createGraph(n);\n\n    addEdge(g, 0, 1);\n    addEdge(g, 1, 2);\n\n    addEdge(g, 4, 3);\n    addEdge(g, 5, 3);\n    addEdge(g, 6, 3);\n\n    TarjanSccSolverAdjacencyList solver = new TarjanSccSolverAdjacencyList(g);\n    solver.solve();\n\n    List<List<Integer>> expectedSccs =\n        ImmutableList.of(\n            ImmutableList.of(0),\n            ImmutableList.of(1),\n            ImmutableList.of(2),\n            ImmutableList.of(3),\n            ImmutableList.of(4),\n            ImmutableList.of(5),\n            ImmutableList.of(6));\n\n    assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n    assertThat(isScc(solver.getSccs(), expectedSccs)).isTrue();\n  }\n\n  @Test\n  public void testDisjointTreeFromHackerrank() {\n    // https://www.hackerearth.com/practice/algorithms/graphs/strongly-connected-components/tutorial\n    int n = 16; // node 0 not used since these are 1 based\n    List<List<Integer>> g = createGraph(n);\n\n    addEdge(g, 3, 1);\n    addEdge(g, 12, 11);\n    addEdge(g, 10, 9);\n    addEdge(g, 8, 5);\n    addEdge(g, 1, 12);\n    addEdge(g, 10, 2);\n    addEdge(g, 1, 14);\n    addEdge(g, 7, 9);\n    addEdge(g, 10, 13);\n    addEdge(g, 11, 1);\n    addEdge(g, 6, 5);\n    addEdge(g, 1, 15);\n    addEdge(g, 2, 11);\n    addEdge(g, 2, 6);\n    addEdge(g, 9, 11);\n\n    TarjanSccSolverAdjacencyList solver = new TarjanSccSolverAdjacencyList(g);\n    solver.solve();\n\n    List<List<Integer>> expectedSccs =\n        ImmutableList.of(\n            ImmutableList.of(0),\n            ImmutableList.of(2),\n            ImmutableList.of(3),\n            ImmutableList.of(4),\n            ImmutableList.of(5),\n            ImmutableList.of(6),\n            ImmutableList.of(7),\n            ImmutableList.of(8),\n            ImmutableList.of(9),\n            ImmutableList.of(10),\n            ImmutableList.of(1, 11, 12),\n            ImmutableList.of(13),\n            ImmutableList.of(14),\n            ImmutableList.of(15));\n\n    assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n    assertThat(isScc(solver.getSccs(), expectedSccs)).isTrue();\n  }\n\n  @Test\n  public void testFirstGraphInSlides() {\n    int n = 9;\n    List<List<Integer>> g = createGraph(n);\n\n    addEdge(g, 0, 1);\n    addEdge(g, 1, 0);\n    addEdge(g, 0, 8);\n    addEdge(g, 8, 0);\n    addEdge(g, 8, 7);\n    addEdge(g, 7, 6);\n    addEdge(g, 6, 7);\n    addEdge(g, 1, 7);\n    addEdge(g, 2, 1);\n    addEdge(g, 2, 6);\n    addEdge(g, 5, 6);\n    addEdge(g, 2, 5);\n    addEdge(g, 5, 3);\n    addEdge(g, 3, 2);\n    addEdge(g, 4, 3);\n    addEdge(g, 4, 5);\n\n    TarjanSccSolverAdjacencyList solver = new TarjanSccSolverAdjacencyList(g);\n    solver.solve();\n\n    List<List<Integer>> expectedSccs =\n        ImmutableList.of(\n            ImmutableList.of(0, 1, 8),\n            ImmutableList.of(7, 6),\n            ImmutableList.of(2, 3, 5),\n            ImmutableList.of(4));\n\n    assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n    assertThat(isScc(solver.getSccs(), expectedSccs)).isTrue();\n  }\n\n  @Test\n  public void testLastGraphInSlides() {\n    int n = 8;\n    List<List<Integer>> g = createGraph(n);\n\n    addEdge(g, 0, 1);\n    addEdge(g, 1, 2);\n    addEdge(g, 2, 0);\n    addEdge(g, 3, 4);\n    addEdge(g, 3, 7);\n    addEdge(g, 4, 5);\n    addEdge(g, 5, 0);\n    addEdge(g, 5, 6);\n    addEdge(g, 6, 0);\n    addEdge(g, 6, 2);\n    addEdge(g, 6, 4);\n    addEdge(g, 7, 3);\n    addEdge(g, 7, 5);\n\n    TarjanSccSolverAdjacencyList solver = new TarjanSccSolverAdjacencyList(g);\n    solver.solve();\n\n    List<List<Integer>> expectedSccs =\n        ImmutableList.of(\n            ImmutableList.of(6, 5, 4), ImmutableList.of(3, 7), ImmutableList.of(0, 2, 1));\n    assertThat(solver.sccCount()).isEqualTo(expectedSccs.size());\n    assertThat(isScc(solver.getSccs(), expectedSccs)).isTrue();\n  }\n\n  private static boolean isScc(int[] ids, List<List<Integer>> expectedSccs) {\n    Set<Integer> set = new HashSet<>();\n    Set<Integer> sccComponentIds = new HashSet<>();\n    for (List<Integer> indexes : expectedSccs) {\n      set.clear();\n      int componentId = 0;\n      for (int index : indexes) {\n        componentId = ids[index];\n        set.add(componentId);\n      }\n      if (sccComponentIds.contains(componentId)) return false;\n      if (set.size() != 1) return false;\n      sccComponentIds.add(componentId);\n    }\n    return true;\n  }\n}\n"}
{"code_source": "/**\n * This file contains an implementation of a Treap Class. Any comparable data is allowed within this\n * tree(numbers, strings, comparable Objects, etc...) this is a max heap implementation(highest\n * priority at top) Supported operations include: insert(x) remove(x) contains(x)\n *\n * @author JZ Chang, jzisheng@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.balancedtree;\n\nimport com.williamfiset.algorithms.datastructures.utils.TreePrinter;\nimport java.awt.*;\nimport java.util.Random;\n\npublic class TreapTree<T extends Comparable<T>> {\n\n  static final int MAX_RAND_NUM = 100;\n\n  private Random random;\n\n  public class Node implements TreePrinter.PrintableNode {\n\n    // The value/data contained within the node\n    public T value;\n\n    // The int priority of this node for Treap\n    public int priority;\n\n    // The left and right references of this node\n    public Node left, right;\n\n    public Node(T value, int priority) {\n      this.value = value;\n      this.left = this.right = null;\n      this.priority = priority;\n    }\n\n    public T getValue() {\n      return value;\n    }\n\n    public void setValue(T value) {\n      this.value = value;\n    }\n\n    @Override\n    public TreePrinter.PrintableNode getLeft() {\n      return left;\n    }\n\n    @Override\n    public TreePrinter.PrintableNode getRight() {\n      return right;\n    }\n\n    @Override\n    public String getText() {\n      return value.toString();\n    }\n  }\n  // The root node of the Treap tree.\n  public Node root;\n\n  // Tracks the number of nodes inside the tree\n  private int nodeCount = 0;\n\n  public TreapTree() {\n    random = new Random();\n  }\n\n  // returns the number of nodes in the tree\n  public int size() {\n    return this.nodeCount;\n  }\n\n  public boolean contains(T value) {\n    return contains(root, value);\n  }\n\n  private boolean contains(Node node, T value) {\n    if (node == null) return false;\n\n    int cmp = value.compareTo(node.getValue());\n\n    if (cmp < 0) return contains(node.left, value);\n    else if (cmp > 0) return contains(node.right, value);\n    else return true;\n  }\n\n  public boolean isEmpty() {\n    return nodeCount == 0;\n  }\n\n  public boolean insert(T val, int priority) {\n    if (val == null) {\n      throw new IllegalArgumentException(\"TreapTree does not allow null values\");\n    }\n    if (!contains(root, val)) {\n      root = insert(this.root, val, priority);\n      nodeCount++;\n      return true;\n    }\n    return false;\n  }\n\n  public boolean insert(T val) {\n    return insert(val, random.nextInt(MAX_RAND_NUM));\n  }\n\n  private Node insert(Node node, T value, int priority) {\n    if (node == null) {\n      return new Node(value, priority);\n    }\n\n    int cmp = value.compareTo(node.value);\n\n    if (cmp < 0) {\n      node.left = insert(node.left, value, priority);\n      if (node.left.priority > node.priority) {\n        node = rightRotation(node);\n      }\n    } else if (cmp > 0) {\n      node.right = insert(node.right, value, priority);\n      if (node.right.priority > node.priority) {\n        node = leftRotation(node);\n      }\n    }\n    return node;\n  }\n\n  private Node leftRotation(Node node) {\n    Node newParent = node.right;\n    node.right = newParent.left;\n    newParent.left = node;\n    return newParent;\n  }\n\n  private Node rightRotation(Node node) {\n    Node newParent = node.left;\n    node.left = newParent.right;\n    newParent.right = node;\n    return newParent;\n  }\n\n  public boolean remove(T elem) {\n    if (elem == null) return false;\n    if (contains(root, elem)) {\n      root = remove(root, elem);\n      nodeCount--;\n      return true;\n    }\n    return false;\n  }\n\n  private Node remove(Node t, T x) {\n    if (t == null) {\n      return t;\n    }\n\n    int cmp = x.compareTo(t.value);\n    if (cmp < 0) t.left = remove(t.left, x);\n    else if (cmp > 0) t.right = remove(t.right, x);\n    else {\n      if (t.left == null) return t.right;\n      if (t.right == null) return t.left;\n\n      if (t.left.priority > t.right.priority) {\n        t = rightRotation(t);\n        t.right = remove(t.right, x);\n      } else {\n        t = leftRotation(t);\n        t.left = remove(t.left, x);\n      }\n    }\n\n    return t;\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.balancedtree;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.TreeSet;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class TreapTreeTest {\n\n  static final int MAX_RAND_NUM = +100000;\n  static final int MIN_RAND_NUM = -100000;\n\n  static final int TEST_SZ = 500;\n\n  private TreapTree<Integer> tree;\n\n  @Before\n  public void setup() {\n    tree = new TreapTree<>();\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testNullInsertion() {\n    tree.insert(null);\n  }\n\n  @Test\n  public void testTreeContainsNull() {\n    assertThat(tree.contains(null)).isFalse();\n  }\n\n  @Test\n  public void LeftLeftCase() {\n    tree.insert(15, 15);\n    tree.insert(10, 8);\n    tree.insert(20, 10);\n    tree.insert(30, 9);\n\n    assertThat(tree.root.left.getValue()).isEqualTo(10);\n    assertThat(tree.root.getValue()).isEqualTo(15);\n    assertThat(tree.root.right.getValue()).isEqualTo(20);\n    assertThat(tree.root.right.right.getValue()).isEqualTo(30);\n\n    tree.insert(32, 14);\n\n    assertThat(tree.root.left.getValue()).isEqualTo(10);\n    assertThat(tree.root.getValue()).isEqualTo(15);\n    assertThat(tree.root.right.getValue()).isEqualTo(32);\n    assertThat(tree.root.right.left.getValue()).isEqualTo(20);\n    assertThat(tree.root.right.left.right.getValue()).isEqualTo(30);\n\n    assertThat(tree.root.right.left.right.left).isNull();\n    assertThat(tree.root.right.left.right.right).isNull();\n    assertThat(tree.root.right.left.left).isNull();\n    assertThat(tree.root.right.right).isNull();\n    assertThat(tree.root.left.left).isNull();\n    assertThat(tree.root.left.right).isNull();\n  }\n\n  @Test\n  public void testLeftRightCase() {\n    tree.insert(20, 10);\n    tree.insert(17, 5);\n    tree.insert(26, 7);\n\n    assertThat(tree.root.getValue()).isEqualTo(20);\n    assertThat(tree.root.left.getValue()).isEqualTo(17);\n    assertThat(tree.root.right.getValue()).isEqualTo(26);\n\n    tree.insert(18, 15);\n    assertThat(tree.root.getValue()).isEqualTo(18);\n    assertThat(tree.root.left.getValue()).isEqualTo(17);\n    assertThat(tree.root.right.getValue()).isEqualTo(20);\n    assertThat(tree.root.right.right.getValue()).isEqualTo(26);\n\n    assertThat(tree.root.left.left).isNull();\n    assertThat(tree.root.left.right).isNull();\n    assertThat(tree.root.right.left).isNull();\n    assertThat(tree.root.right.right.left).isNull();\n    assertThat(tree.root.right.right.right).isNull();\n  }\n\n  @Test\n  public void testRightRightCase() {\n    tree.insert(10, 2);\n    tree.insert(8, 1);\n\n    assertThat(tree.root.getValue()).isEqualTo(10);\n    assertThat(tree.root.left.getValue()).isEqualTo(8);\n\n    tree.insert(7, 3);\n\n    assertThat(tree.root.getValue()).isEqualTo(7);\n    assertThat(tree.root.right.getValue()).isEqualTo(10);\n    assertThat(tree.root.right.left.getValue()).isEqualTo(8);\n\n    assertThat(tree.root.left).isNull();\n    assertThat(tree.root.right.right).isNull();\n    assertThat(tree.root.right.left.right).isNull();\n    assertThat(tree.root.right.left.left).isNull();\n  }\n\n  @Test\n  public void testRightLeftCase() {\n    tree.insert(15, 10);\n    tree.insert(16, 8);\n\n    assertThat(tree.root.getValue()).isEqualTo(15);\n    assertThat(tree.root.right.getValue()).isEqualTo(16);\n\n    tree.insert(13, 11);\n\n    assertThat(tree.root.getValue()).isEqualTo(13);\n    assertThat(tree.root.right.getValue()).isEqualTo(15);\n    assertThat(tree.root.right.right.getValue()).isEqualTo(16);\n\n    assertThat(tree.root.left).isNull();\n    assertThat(tree.root.right.left).isNull();\n    assertThat(tree.root.right.right.left).isNull();\n    assertThat(tree.root.right.right.right).isNull();\n  }\n\n  @Test\n  public void randomTreapOperations() {\n    TreeSet<Integer> ts = new TreeSet<>();\n    for (int i = 0; i < TEST_SZ; i++) {\n\n      int size = i;\n      List<Integer> lst = genRandList(size);\n      for (Integer value : lst) {\n        tree.insert(value);\n        ts.add(value);\n      }\n      Collections.shuffle(lst);\n\n      // Remove all the elements we just placed in the tree.\n      for (int j = 0; j < size; j++) {\n\n        Integer value = lst.get(j);\n\n        assertThat(tree.remove(value)).isEqualTo(ts.remove(value));\n        assertThat(tree.contains(value)).isFalse();\n        assertThat(tree.size()).isEqualTo(size - j - 1);\n      }\n\n      assertThat(tree.isEmpty()).isTrue();\n    }\n  }\n\n  static List<Integer> genRandList(int sz) {\n    List<Integer> lst = new ArrayList<>(sz);\n    for (int i = 0; i < sz; i++) lst.add(i); // unique values.\n    Collections.shuffle(lst);\n    return lst;\n  }\n\n  public static int randValue() {\n    return (int) (Math.random() * MAX_RAND_NUM * 2) + MIN_RAND_NUM;\n  }\n}\n"}
{"code_source": "/**\n * This algorithm finds the center(s) of a tree.\n *\n * <p>Time complexity: O(V+E)\n *\n * @author Original author: Jeffrey Xiao, https://github.com/jeffrey-xiao\n * @author Modifications by: William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.graphtheory.treealgorithms;\n\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class TreeCenter {\n\n  public static List<Integer> findTreeCenters(List<List<Integer>> tree) {\n    final int n = tree.size();\n    int[] degree = new int[n];\n\n    // Find all leaf nodes\n    List<Integer> leaves = new ArrayList<>();\n    for (int i = 0; i < n; i++) {\n      List<Integer> edges = tree.get(i);\n      degree[i] = edges.size();\n      if (degree[i] <= 1) {\n        leaves.add(i);\n        degree[i] = 0;\n      }\n    }\n\n    int processedLeafs = leaves.size();\n\n    // Remove leaf nodes and decrease the degree of each node adding new leaf nodes progressively\n    // until only the centers remain.\n    while (processedLeafs < n) {\n      List<Integer> newLeaves = new ArrayList<>();\n      for (int node : leaves) {\n        for (int neighbor : tree.get(node)) {\n          if (--degree[neighbor] == 1) {\n            newLeaves.add(neighbor);\n          }\n        }\n        degree[node] = 0;\n      }\n      processedLeafs += newLeaves.size();\n      leaves = newLeaves;\n    }\n\n    return leaves;\n  }\n\n  /** ********** TESTING ********* */\n\n  // Create an empty tree as a adjacency list.\n  public static List<List<Integer>> createEmptyTree(int n) {\n    List<List<Integer>> tree = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) tree.add(new LinkedList<>());\n    return tree;\n  }\n\n  public static void addUndirectedEdge(List<List<Integer>> tree, int from, int to) {\n    tree.get(from).add(to);\n    tree.get(to).add(from);\n  }\n\n  public static void main(String[] args) {\n\n    List<List<Integer>> graph = createEmptyTree(9);\n    addUndirectedEdge(graph, 0, 1);\n    addUndirectedEdge(graph, 2, 1);\n    addUndirectedEdge(graph, 2, 3);\n    addUndirectedEdge(graph, 3, 4);\n    addUndirectedEdge(graph, 5, 3);\n    addUndirectedEdge(graph, 2, 6);\n    addUndirectedEdge(graph, 6, 7);\n    addUndirectedEdge(graph, 6, 8);\n\n    // Centers are 2\n    System.out.println(findTreeCenters(graph));\n\n    // Centers are 0\n    List<List<Integer>> graph2 = createEmptyTree(1);\n    System.out.println(findTreeCenters(graph2));\n\n    // Centers are 0,1\n    List<List<Integer>> graph3 = createEmptyTree(2);\n    addUndirectedEdge(graph3, 0, 1);\n    System.out.println(findTreeCenters(graph3));\n\n    // Centers are 1\n    List<List<Integer>> graph4 = createEmptyTree(3);\n    addUndirectedEdge(graph4, 0, 1);\n    addUndirectedEdge(graph4, 1, 2);\n    System.out.println(findTreeCenters(graph4));\n\n    // Centers are 1,2\n    List<List<Integer>> graph5 = createEmptyTree(4);\n    addUndirectedEdge(graph5, 0, 1);\n    addUndirectedEdge(graph5, 1, 2);\n    addUndirectedEdge(graph5, 2, 3);\n    System.out.println(findTreeCenters(graph5));\n\n    // Centers are 2,3\n    List<List<Integer>> graph6 = createEmptyTree(7);\n    addUndirectedEdge(graph6, 0, 1);\n    addUndirectedEdge(graph6, 1, 2);\n    addUndirectedEdge(graph6, 2, 3);\n    addUndirectedEdge(graph6, 3, 4);\n    addUndirectedEdge(graph6, 4, 5);\n    addUndirectedEdge(graph6, 4, 6);\n    System.out.println(findTreeCenters(graph6));\n  }\n}\n", "test_case": "// To run this test in isolation from root folder:\n//\n// $ gradle test --tests\n// com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenterTest\n\npackage com.williamfiset.algorithms.graphtheory.treealgorithms;\n\nimport static com.google.common.truth.Truth.assertThat;\nimport static com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenter.addUndirectedEdge;\nimport static com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenter.createEmptyTree;\nimport static com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenter.findTreeCenters;\n\nimport java.util.*;\nimport org.junit.*;\n\npublic class TreeCenterTest {\n\n  @Test\n  public void simpleTest1() {\n    List<List<Integer>> graph = createEmptyTree(9);\n    addUndirectedEdge(graph, 0, 1);\n    addUndirectedEdge(graph, 2, 1);\n    addUndirectedEdge(graph, 2, 3);\n    addUndirectedEdge(graph, 3, 4);\n    addUndirectedEdge(graph, 5, 3);\n    addUndirectedEdge(graph, 2, 6);\n    addUndirectedEdge(graph, 6, 7);\n    addUndirectedEdge(graph, 6, 8);\n    assertThat(findTreeCenters(graph)).containsExactly(2);\n  }\n\n  @Test\n  public void singleton() {\n    assertThat(findTreeCenters(createEmptyTree(1))).containsExactly(0);\n  }\n\n  @Test\n  public void twoNodeTree() {\n    List<List<Integer>> graph = createEmptyTree(2);\n    addUndirectedEdge(graph, 0, 1);\n    assertThat(findTreeCenters(graph)).containsExactly(0, 1);\n  }\n\n  @Test\n  public void simpleTest2() {\n    List<List<Integer>> graph = createEmptyTree(3);\n    addUndirectedEdge(graph, 0, 1);\n    addUndirectedEdge(graph, 1, 2);\n    assertThat(findTreeCenters(graph)).containsExactly(1);\n  }\n\n  @Test\n  public void simpleTest3() {\n    List<List<Integer>> graph = createEmptyTree(4);\n    addUndirectedEdge(graph, 0, 1);\n    addUndirectedEdge(graph, 1, 2);\n    addUndirectedEdge(graph, 2, 3);\n    assertThat(findTreeCenters(graph)).containsExactly(1, 2);\n  }\n\n  @Test\n  public void simpleTest4() {\n    List<List<Integer>> graph = createEmptyTree(7);\n    addUndirectedEdge(graph, 0, 1);\n    addUndirectedEdge(graph, 1, 2);\n    addUndirectedEdge(graph, 2, 3);\n    addUndirectedEdge(graph, 3, 4);\n    addUndirectedEdge(graph, 4, 5);\n    addUndirectedEdge(graph, 4, 6);\n    assertThat(findTreeCenters(graph)).containsExactly(2, 3);\n  }\n\n  @Test\n  public void testTreeCenterVsOtherImpl() {\n    for (int n = 1; n < 500; n++) {\n      for (int loops = 0; loops < 100; loops++) {\n        List<List<Integer>> tree = generateRandomTree(n);\n\n        List<Integer> impl1 = findTreeCenters(tree);\n        List<Integer> impl2 =\n            com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenterLongestPathImpl\n                .findTreeCenters(tree);\n\n        assertThat(impl1).containsExactlyElementsIn(impl2);\n      }\n    }\n  }\n\n  public static List<List<Integer>> generateRandomTree(int n) {\n    List<Integer> nodes = new ArrayList<>();\n    nodes.add(0);\n\n    List<List<Integer>> g = createEmptyTree(n);\n    for (int nextNode = 1; nodes.size() != n; nextNode++) {\n      int randomNode = nodes.get((int) (Math.random() * nodes.size()));\n      addUndirectedEdge(g, randomNode, nextNode);\n      nodes.add(nextNode);\n    }\n    return g;\n  }\n}\n"}
{"code_source": "/**\n * Finds the center(s) of a tree by finding the longest path through the tree.\n *\n * <p>./gradlew run\n * -Pmain=com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenterLongestPathImpl\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.graphtheory.treealgorithms;\n\nimport java.util.*;\n\npublic class TreeCenterLongestPathImpl {\n\n  private static class DfsResult {\n    // The distance to the furthest node (from where the DFS started)\n    int distance;\n\n    // The index of the furthest node (from where the DFS started)\n    int index;\n\n    public DfsResult(int distance, int index) {\n      this.distance = distance;\n      this.index = index;\n    }\n  }\n\n  private static DfsResult dfs(\n      List<List<Integer>> graph, boolean[] visited, int[] prev, int at, int parent) {\n\n    // Already visited this node\n    if (visited[at]) return new DfsResult(0, parent);\n\n    // Visit this node\n    visited[at] = true;\n\n    // Remember where we came from to rebuild path later on.\n    prev[at] = parent;\n\n    int bestDist = 0, index = -1;\n    List<Integer> edges = graph.get(at);\n\n    for (int to : edges) {\n      DfsResult result = dfs(graph, visited, prev, to, at);\n      int dist = result.distance + 1;\n      if (dist > bestDist) {\n        bestDist = dist;\n        index = result.index;\n      }\n    }\n\n    return new DfsResult(bestDist, index);\n  }\n\n  public static List<Integer> findTreeCenters(List<List<Integer>> graph) {\n    List<Integer> centers = new ArrayList<>();\n    if (graph == null) return centers;\n\n    int n = graph.size();\n    boolean[] visited = new boolean[n];\n    int[] prev = new int[n];\n\n    // Do DFS to find furthest node from the start\n    DfsResult result = dfs(graph, visited, prev, 0, -1);\n    int furthestNode1 = result.index;\n\n    // Singleton\n    if (furthestNode1 == -1) {\n      centers.add(0);\n      return centers;\n    }\n\n    // Do another DFS, but this time from the furthest node.\n    Arrays.fill(visited, false);\n    Arrays.fill(prev, 0);\n\n    result = dfs(graph, visited, prev, furthestNode1, -1);\n    int furthestNode2 = result.index;\n\n    List<Integer> path = new LinkedList<>();\n    for (int i = furthestNode2; i != -1; i = prev[i]) {\n      path.add(i);\n    }\n\n    if (path.size() % 2 == 0) {\n      centers.add(path.get(path.size() / 2 - 1));\n    }\n    centers.add(path.get(path.size() / 2));\n    return centers;\n  }\n\n  /** ********** TESTING ********* */\n\n  // Create an empty tree as a adjacency list.\n  public static List<List<Integer>> createEmptyTree(int n) {\n    List<List<Integer>> tree = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) tree.add(new LinkedList<>());\n    return tree;\n  }\n\n  public static void addUndirectedEdge(List<List<Integer>> tree, int from, int to) {\n    tree.get(from).add(to);\n    tree.get(to).add(from);\n  }\n\n  public static void main(String[] args) {\n\n    List<List<Integer>> graph = createEmptyTree(9);\n    addUndirectedEdge(graph, 0, 1);\n    addUndirectedEdge(graph, 2, 1);\n    addUndirectedEdge(graph, 2, 3);\n    addUndirectedEdge(graph, 3, 4);\n    addUndirectedEdge(graph, 5, 3);\n    addUndirectedEdge(graph, 2, 6);\n    addUndirectedEdge(graph, 6, 7);\n    addUndirectedEdge(graph, 6, 8);\n\n    // Centers are 2\n    System.out.println(findTreeCenters(graph));\n\n    // Centers are 0\n    List<List<Integer>> graph2 = createEmptyTree(1);\n    System.out.println(findTreeCenters(graph2));\n\n    // Centers are 0,1\n    List<List<Integer>> graph3 = createEmptyTree(2);\n    addUndirectedEdge(graph3, 0, 1);\n    System.out.println(findTreeCenters(graph3));\n\n    // Centers are 1\n    List<List<Integer>> graph4 = createEmptyTree(3);\n    addUndirectedEdge(graph4, 0, 1);\n    addUndirectedEdge(graph4, 1, 2);\n    System.out.println(findTreeCenters(graph4));\n\n    // Centers are 1,2\n    List<List<Integer>> graph5 = createEmptyTree(4);\n    addUndirectedEdge(graph5, 0, 1);\n    addUndirectedEdge(graph5, 1, 2);\n    addUndirectedEdge(graph5, 2, 3);\n    System.out.println(findTreeCenters(graph5));\n\n    // Centers are 2,3\n    List<List<Integer>> graph6 = createEmptyTree(7);\n    addUndirectedEdge(graph6, 0, 1);\n    addUndirectedEdge(graph6, 1, 2);\n    addUndirectedEdge(graph6, 2, 3);\n    addUndirectedEdge(graph6, 3, 4);\n    addUndirectedEdge(graph6, 4, 5);\n    addUndirectedEdge(graph6, 4, 6);\n    System.out.println(findTreeCenters(graph6));\n  }\n}\n", "test_case": "// To run this test in isolation from root folder:\n//\n// $ gradle test --tests\n// com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenterLongestPathImplTest\n\npackage com.williamfiset.algorithms.graphtheory.treealgorithms;\n\nimport static com.google.common.truth.Truth.assertThat;\nimport static com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenterLongestPathImpl.addUndirectedEdge;\nimport static com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenterLongestPathImpl.createEmptyTree;\nimport static com.williamfiset.algorithms.graphtheory.treealgorithms.TreeCenterLongestPathImpl.findTreeCenters;\n\nimport java.util.*;\nimport org.junit.*;\n\npublic class TreeCenterLongestPathImplTest {\n\n  @Test\n  public void simpleTest1() {\n    List<List<Integer>> graph = createEmptyTree(9);\n    addUndirectedEdge(graph, 0, 1);\n    addUndirectedEdge(graph, 2, 1);\n    addUndirectedEdge(graph, 2, 3);\n    addUndirectedEdge(graph, 3, 4);\n    addUndirectedEdge(graph, 5, 3);\n    addUndirectedEdge(graph, 2, 6);\n    addUndirectedEdge(graph, 6, 7);\n    addUndirectedEdge(graph, 6, 8);\n    assertThat(findTreeCenters(graph)).containsExactly(2);\n  }\n\n  @Test\n  public void singleton() {\n    assertThat(findTreeCenters(createEmptyTree(1))).containsExactly(0);\n  }\n\n  @Test\n  public void twoNodeTree() {\n    List<List<Integer>> graph = createEmptyTree(2);\n    addUndirectedEdge(graph, 0, 1);\n    assertThat(findTreeCenters(graph)).containsExactly(0, 1);\n  }\n\n  @Test\n  public void simpleTest2() {\n    List<List<Integer>> graph = createEmptyTree(3);\n    addUndirectedEdge(graph, 0, 1);\n    addUndirectedEdge(graph, 1, 2);\n    assertThat(findTreeCenters(graph)).containsExactly(1);\n  }\n\n  @Test\n  public void simpleTest3() {\n    List<List<Integer>> graph = createEmptyTree(4);\n    addUndirectedEdge(graph, 0, 1);\n    addUndirectedEdge(graph, 1, 2);\n    addUndirectedEdge(graph, 2, 3);\n    assertThat(findTreeCenters(graph)).containsExactly(1, 2);\n  }\n\n  @Test\n  public void simpleTest4() {\n    List<List<Integer>> graph = createEmptyTree(7);\n    addUndirectedEdge(graph, 0, 1);\n    addUndirectedEdge(graph, 1, 2);\n    addUndirectedEdge(graph, 2, 3);\n    addUndirectedEdge(graph, 3, 4);\n    addUndirectedEdge(graph, 4, 5);\n    addUndirectedEdge(graph, 4, 6);\n    assertThat(findTreeCenters(graph)).containsExactly(2, 3);\n  }\n}\n"}
{"code_source": "/**\n * Determines if two unrooted trees are isomorphic. This algorithm can easily be modified to support\n * checking if two rooted trees are isomorphic.\n *\n * <p>Tested code against: https://uva.onlinejudge.org/external/124/p12489.pdf\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.graphtheory.treealgorithms;\n\nimport java.util.*;\n\npublic class TreeIsomorphism {\n\n  public static class TreeNode {\n    private int id;\n    private TreeNode parent;\n    private List<TreeNode> children;\n\n    // Useful constructor for root node.\n    public TreeNode(int id) {\n      this(id, /*parent=*/ null);\n    }\n\n    public TreeNode(int id, TreeNode parent) {\n      this.id = id;\n      this.parent = parent;\n      children = new LinkedList<>();\n    }\n\n    public void addChildren(TreeNode... nodes) {\n      for (TreeNode node : nodes) {\n        children.add(node);\n      }\n    }\n\n    public int id() {\n      return id;\n    }\n\n    public TreeNode parent() {\n      return parent;\n    }\n\n    public List<TreeNode> children() {\n      return children;\n    }\n\n    @Override\n    public String toString() {\n      return String.valueOf(id);\n    }\n  }\n\n  // Determines if two unrooted trees are isomorphic\n  public static boolean treesAreIsomorphic(List<List<Integer>> tree1, List<List<Integer>> tree2) {\n    if (tree1.isEmpty() || tree2.isEmpty()) {\n      throw new IllegalArgumentException(\"Empty tree input\");\n    }\n\n    List<Integer> centers1 = findTreeCenters(tree1);\n    List<Integer> centers2 = findTreeCenters(tree2);\n\n    TreeNode rootedTree1 = rootTree(tree1, centers1.get(0));\n    String tree1Encoding = encode(rootedTree1);\n\n    for (int center : centers2) {\n      TreeNode rootedTree2 = rootTree(tree2, center);\n      String tree2Encoding = encode(rootedTree2);\n\n      if (tree1Encoding.equals(tree2Encoding)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private static List<Integer> findTreeCenters(List<List<Integer>> tree) {\n    int n = tree.size();\n\n    int[] degree = new int[n];\n    List<Integer> leaves = new ArrayList<>();\n\n    // Find the first outer layer of leaf nodes.\n    for (int i = 0; i < n; i++) {\n      List<Integer> edges = tree.get(i);\n      degree[i] = edges.size();\n      if (degree[i] <= 1) {\n        leaves.add(i);\n        degree[i] = 0;\n      }\n    }\n\n    int processedLeafs = leaves.size();\n\n    // Iteratively remove leaf nodes layer by layer until only the centers remain.\n    while (processedLeafs < n) {\n      List<Integer> newLeaves = new ArrayList<>();\n      for (int node : leaves) {\n        for (int neighbor : tree.get(node)) {\n          if (--degree[neighbor] == 1) {\n            newLeaves.add(neighbor);\n          }\n        }\n        degree[node] = 0;\n      }\n      processedLeafs += newLeaves.size();\n      leaves = newLeaves;\n    }\n\n    return leaves;\n  }\n\n  private static TreeNode rootTree(List<List<Integer>> graph, int rootId) {\n    TreeNode root = new TreeNode(rootId);\n    return buildTree(graph, root);\n  }\n\n  // Do dfs to construct rooted tree.\n  private static TreeNode buildTree(List<List<Integer>> graph, TreeNode node) {\n    for (int neighbor : graph.get(node.id())) {\n      // Ignore adding an edge pointing back to parent.\n      if (node.parent() != null && neighbor == node.parent().id()) {\n        continue;\n      }\n\n      TreeNode child = new TreeNode(neighbor, node);\n      node.addChildren(child);\n\n      buildTree(graph, child);\n    }\n    return node;\n  }\n\n  // Constructs the canonical form representation of a tree as a string.\n  public static String encode(TreeNode node) {\n    if (node == null) {\n      return \"\";\n    }\n    List<String> labels = new LinkedList<>();\n    for (TreeNode child : node.children()) {\n      labels.add(encode(child));\n    }\n    Collections.sort(labels);\n    StringBuilder sb = new StringBuilder();\n    for (String label : labels) {\n      sb.append(label);\n    }\n    return \"(\" + sb.toString() + \")\";\n  }\n\n  /* Graph/Tree creation helper methods. */\n\n  // Create a graph as a adjacency list with 'n' nodes.\n  public static List<List<Integer>> createEmptyGraph(int n) {\n    List<List<Integer>> graph = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) graph.add(new LinkedList<>());\n    return graph;\n  }\n\n  public static void addUndirectedEdge(List<List<Integer>> graph, int from, int to) {\n    graph.get(from).add(to);\n    graph.get(to).add(from);\n  }\n\n  /* Example usage */\n\n  public static void main(String[] args) {\n    simpleIsomorphismTest();\n    testEncodingTreeFromSlides();\n  }\n\n  // Test if two tree are isomorphic, meaning they are structurally equivalent\n  // but are labeled differently.\n  private static void simpleIsomorphismTest() {\n    List<List<Integer>> tree1 = createEmptyGraph(5);\n    addUndirectedEdge(tree1, 2, 0);\n    addUndirectedEdge(tree1, 3, 4);\n    addUndirectedEdge(tree1, 2, 1);\n    addUndirectedEdge(tree1, 2, 3);\n\n    List<List<Integer>> tree2 = createEmptyGraph(5);\n    addUndirectedEdge(tree2, 1, 0);\n    addUndirectedEdge(tree2, 2, 4);\n    addUndirectedEdge(tree2, 1, 3);\n    addUndirectedEdge(tree2, 1, 2);\n\n    if (!treesAreIsomorphic(tree1, tree2)) {\n      System.out.println(\"Oops, these tree should be isomorphic!\");\n    }\n  }\n\n  private static void testEncodingTreeFromSlides() {\n    List<List<Integer>> tree = createEmptyGraph(10);\n    addUndirectedEdge(tree, 0, 2);\n    addUndirectedEdge(tree, 0, 1);\n    addUndirectedEdge(tree, 0, 3);\n    addUndirectedEdge(tree, 2, 6);\n    addUndirectedEdge(tree, 2, 7);\n    addUndirectedEdge(tree, 1, 4);\n    addUndirectedEdge(tree, 1, 5);\n    addUndirectedEdge(tree, 5, 9);\n    addUndirectedEdge(tree, 3, 8);\n\n    TreeNode root0 = rootTree(tree, 0);\n\n    if (!encode(root0).equals(\"(((())())(()())(()))\")) {\n      System.out.println(\"Tree encoding is wrong: \" + encode(root0));\n    }\n  }\n}\n", "test_case": "// To run this test in isolation from root folder:\n//\n// $ gradle test --tests\n// com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismTest\n\npackage com.williamfiset.algorithms.graphtheory.treealgorithms;\n\nimport static com.google.common.truth.Truth.assertThat;\nimport static com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphism.addUndirectedEdge;\nimport static com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphism.createEmptyGraph;\nimport static com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphism.treesAreIsomorphic;\n\nimport java.util.*;\nimport org.junit.*;\n\npublic class TreeIsomorphismTest {\n\n  @Test(expected = IllegalArgumentException.class)\n  public void emptyTreeThrowsException() {\n    treesAreIsomorphic(createEmptyGraph(0), createEmptyGraph(1));\n  }\n\n  @Test\n  public void singletonTreesAreIsomorphic() {\n    assertThat(treesAreIsomorphic(createEmptyGraph(1), createEmptyGraph(1))).isEqualTo(true);\n  }\n\n  @Test\n  public void testTwoNodeTree() {\n    List<List<Integer>> tree1 = createEmptyGraph(2);\n    List<List<Integer>> tree2 = createEmptyGraph(2);\n    addUndirectedEdge(tree1, 0, 1);\n    addUndirectedEdge(tree2, 1, 0);\n    assertThat(treesAreIsomorphic(tree1, tree2)).isEqualTo(true);\n  }\n\n  @Test\n  public void testSmall() {\n    List<List<Integer>> tree1 = createEmptyGraph(5);\n    List<List<Integer>> tree2 = createEmptyGraph(5);\n\n    addUndirectedEdge(tree1, 2, 0);\n    addUndirectedEdge(tree1, 2, 1);\n    addUndirectedEdge(tree1, 2, 3);\n    addUndirectedEdge(tree1, 3, 4);\n\n    addUndirectedEdge(tree2, 1, 3);\n    addUndirectedEdge(tree2, 1, 0);\n    addUndirectedEdge(tree2, 1, 2);\n    addUndirectedEdge(tree2, 2, 4);\n\n    assertThat(treesAreIsomorphic(tree1, tree2)).isEqualTo(true);\n  }\n\n  @Test\n  public void testSimilarChains() {\n    // Trees 1 and 3 are equal\n    int n = 10;\n    List<List<Integer>> tree1 = createEmptyGraph(n);\n    List<List<Integer>> tree2 = createEmptyGraph(n);\n    List<List<Integer>> tree3 = createEmptyGraph(n);\n\n    addUndirectedEdge(tree1, 0, 1);\n    addUndirectedEdge(tree1, 1, 3);\n    addUndirectedEdge(tree1, 3, 5);\n    addUndirectedEdge(tree1, 5, 7);\n    addUndirectedEdge(tree1, 7, 8);\n    addUndirectedEdge(tree1, 8, 9);\n    addUndirectedEdge(tree1, 2, 1);\n    addUndirectedEdge(tree1, 4, 3);\n    addUndirectedEdge(tree1, 6, 5);\n\n    addUndirectedEdge(tree2, 0, 1);\n    addUndirectedEdge(tree2, 1, 3);\n    addUndirectedEdge(tree2, 3, 5);\n    addUndirectedEdge(tree2, 5, 6);\n    addUndirectedEdge(tree2, 6, 8);\n    addUndirectedEdge(tree2, 8, 9);\n    addUndirectedEdge(tree2, 6, 7);\n    addUndirectedEdge(tree2, 4, 3);\n    addUndirectedEdge(tree2, 2, 1);\n\n    addUndirectedEdge(tree3, 0, 1);\n    addUndirectedEdge(tree3, 1, 8);\n    addUndirectedEdge(tree3, 1, 6);\n    addUndirectedEdge(tree3, 6, 4);\n    addUndirectedEdge(tree3, 6, 5);\n    addUndirectedEdge(tree3, 5, 3);\n    addUndirectedEdge(tree3, 5, 7);\n    addUndirectedEdge(tree3, 7, 2);\n    addUndirectedEdge(tree3, 2, 9);\n\n    assertThat(treesAreIsomorphic(tree1, tree2)).isEqualTo(false);\n    assertThat(treesAreIsomorphic(tree1, tree3)).isEqualTo(true);\n    assertThat(treesAreIsomorphic(tree2, tree3)).isEqualTo(false);\n  }\n\n  @Test\n  public void simpleTest() {\n    List<List<Integer>> tree1 = createEmptyGraph(5);\n    List<List<Integer>> tree2 = createEmptyGraph(5);\n\n    addUndirectedEdge(tree1, 2, 0);\n    addUndirectedEdge(tree1, 3, 4);\n    addUndirectedEdge(tree1, 2, 1);\n    addUndirectedEdge(tree1, 2, 3);\n\n    addUndirectedEdge(tree2, 1, 0);\n    addUndirectedEdge(tree2, 2, 4);\n    addUndirectedEdge(tree2, 1, 3);\n    addUndirectedEdge(tree2, 1, 2);\n\n    assertThat(treesAreIsomorphic(tree1, tree2)).isEqualTo(true);\n  }\n\n  @Test\n  public void differentNumberOfNodes() {\n    List<List<Integer>> tree1 = createEmptyGraph(2);\n    List<List<Integer>> tree2 = createEmptyGraph(3);\n\n    addUndirectedEdge(tree1, 0, 1);\n\n    addUndirectedEdge(tree2, 0, 1);\n    addUndirectedEdge(tree2, 1, 2);\n\n    assertThat(treesAreIsomorphic(tree1, tree2)).isEqualTo(false);\n  }\n\n  @Test\n  public void testIsomorphismEquivilanceAgainstOtherImpl() {\n    for (int n = 1; n < 50; n++) {\n      for (int loops = 0; loops < 1000; loops++) {\n        List<List<Integer>> tree1 = generateRandomTree(n);\n        List<List<Integer>> tree2 = generateRandomTree(n);\n\n        boolean impl1 = treesAreIsomorphic(tree1, tree2);\n        boolean impl2 =\n            com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismWithBfs\n                .treesAreIsomorphic(tree1, tree2);\n        if (impl1 != impl2) {\n          System.err.println(\"TreeIsomorphism algorithms disagree!\");\n          System.err.println(tree1);\n          System.err.println(tree2);\n        }\n        assertThat(impl1).isEqualTo(impl2);\n      }\n    }\n  }\n\n  public static List<List<Integer>> generateRandomTree(int n) {\n    List<Integer> nodes = new ArrayList<>();\n    nodes.add(0);\n\n    List<List<Integer>> g = createEmptyGraph(n);\n    for (int nextNode = 1; nodes.size() != n; nextNode++) {\n      int randomNode = nodes.get((int) (Math.random() * nodes.size()));\n      addUndirectedEdge(g, randomNode, nextNode);\n      nodes.add(nextNode);\n    }\n    return g;\n  }\n}\n"}
{"code_source": "/**\n * The graph isomorphism problem for general graphs can be quite difficult, however there exists an\n * elegant solution to uniquely encode a graph if it is a tree. Here is a brilliant explanation with\n * animations:\n *\n * <p>http://webhome.cs.uvic.ca/~wendym/courses/582/16/notes/582_12_tree_can_form.pdf\n *\n * <p>This implementation uses a breadth first search on an undirected graph to generate the tree's\n * canonical encoding.\n *\n * <p>Tested code against: https://uva.onlinejudge.org/external/124/p12489.pdf\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.graphtheory.treealgorithms;\n\nimport java.util.*;\n\npublic class TreeIsomorphismWithBfs {\n\n  public static List<List<Integer>> createEmptyTree(int n) {\n    List<List<Integer>> tree = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) tree.add(new ArrayList<>());\n    return tree;\n  }\n\n  public static void addUndirectedEdge(List<List<Integer>> tree, int from, int to) {\n    tree.get(from).add(to);\n    tree.get(to).add(from);\n  }\n\n  private static List<Integer> findTreeCenters(List<List<Integer>> tree) {\n    final int n = tree.size();\n    int[] degrees = new int[n];\n\n    // Find all leaf nodes\n    List<Integer> leaves = new ArrayList<>();\n    for (int i = 0; i < n; i++) {\n      List<Integer> edges = tree.get(i);\n      degrees[i] = edges.size();\n      if (degrees[i] <= 1) leaves.add(i);\n    }\n\n    int processedLeafs = leaves.size();\n\n    // Remove leaf nodes and decrease the degree of\n    // each node adding new leaf nodes progressively\n    // until only the centers remain.\n    while (processedLeafs < n) {\n      List<Integer> newLeaves = new ArrayList<>();\n      for (int node : leaves)\n        for (int neighbor : tree.get(node)) if (--degrees[neighbor] == 1) newLeaves.add(neighbor);\n      processedLeafs += newLeaves.size();\n      leaves = newLeaves;\n    }\n\n    return leaves;\n  }\n\n  // Encodes a tree as a string such that any isomorphic tree\n  // also has the same encoding.\n  // TODO(william): make this method private and test only with the treesAreIsomorphic method\n  public static String encodeTree(List<List<Integer>> tree) {\n    if (tree == null || tree.size() == 0) return \"\";\n    if (tree.size() == 1) return \"()\";\n    final int n = tree.size();\n\n    int root = findTreeCenters(tree).get(0);\n\n    int[] degree = new int[n];\n    int[] parent = new int[n];\n    boolean[] visited = new boolean[n];\n    List<Integer> leafs = new ArrayList<>();\n\n    Queue<Integer> q = new ArrayDeque<>();\n    visited[root] = true;\n    parent[root] = -1; // unused.\n    q.offer(root);\n\n    // Do a BFS to find all the leaf nodes\n    while (!q.isEmpty()) {\n      int at = q.poll();\n      List<Integer> edges = tree.get(at);\n      degree[at] = edges.size();\n      for (int next : edges) {\n        if (!visited[next]) {\n          visited[next] = true;\n          parent[next] = at;\n          q.offer(next);\n        }\n      }\n      if (degree[at] == 1) leafs.add(at);\n    }\n\n    List<Integer> newLeafs = new ArrayList<>();\n    String[] map = new String[n];\n    for (int i = 0; i < n; i++) {\n      visited[i] = false;\n      map[i] = \"()\";\n    }\n\n    int treeSize = n;\n    while (treeSize > 2) {\n      for (int leaf : leafs) {\n\n        // Find parent of leaf node and check if the parent\n        // is a candidate for the next cycle of leaf nodes\n        visited[leaf] = true;\n        int p = parent[leaf];\n        if (--degree[p] == 1) newLeafs.add(p);\n\n        treeSize--;\n      }\n\n      // Update parent labels\n      for (int p : newLeafs) {\n\n        List<String> labels = new ArrayList<>();\n        for (int child : tree.get(p))\n          // Recall edges are bidirectional so we don't want to\n          // access the parent's parent here.\n          if (visited[child]) labels.add(map[child]);\n\n        String parentInnerParentheses = map[p].substring(1, map[p].length() - 1);\n        labels.add(parentInnerParentheses);\n\n        Collections.sort(labels);\n        map[p] = \"(\".concat(String.join(\"\", labels)).concat(\")\");\n      }\n\n      leafs.clear();\n      leafs.addAll(newLeafs);\n      newLeafs.clear();\n    }\n\n    // Only one node remains and it holds the canonical form\n    String l1 = map[leafs.get(0)];\n    if (treeSize == 1) return l1;\n\n    // Two nodes remain and we need to combine their labels\n    String l2 = map[leafs.get(1)];\n    return ((l1.compareTo(l2) < 0) ? (l1 + l2) : (l2 + l1));\n  }\n\n  public static boolean treesAreIsomorphic(List<List<Integer>> tree1, List<List<Integer>> tree2) {\n    return encodeTree(tree1).equals(encodeTree(tree2));\n  }\n\n  /* Example usage */\n\n  public static void main(String[] args) {\n    // Test if two tree are isomorphic, meaning they are structurally equivalent\n    // but are labeled differently.\n    List<List<Integer>> tree1 = createEmptyTree(5);\n    List<List<Integer>> tree2 = createEmptyTree(5);\n\n    addUndirectedEdge(tree1, 2, 0);\n    addUndirectedEdge(tree1, 3, 4);\n    addUndirectedEdge(tree1, 2, 1);\n    addUndirectedEdge(tree1, 2, 3);\n\n    addUndirectedEdge(tree2, 1, 0);\n    addUndirectedEdge(tree2, 2, 4);\n    addUndirectedEdge(tree2, 1, 3);\n    addUndirectedEdge(tree2, 1, 2);\n\n    String encoding1 = encodeTree(tree1);\n    String encoding2 = encodeTree(tree2);\n\n    System.out.println(\"Tree1 encoding: \" + encoding1);\n    System.out.println(\"Tree2 encoding: \" + encoding1);\n    System.out.println(\"Trees are isomorphic: \" + (encoding1.equals(encoding2)));\n\n    // Print:\n    // Tree1 encoding: (()())(())\n    // Tree2 encoding: (()())(())\n    // Trees are isomorphic: true\n  }\n}\n", "test_case": "// To run this test in isolation from root folder:\n//\n// $ gradle test --tests\n// com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismWithBfsTest\n\npackage com.williamfiset.algorithms.graphtheory.treealgorithms;\n\nimport static com.google.common.truth.Truth.assertThat;\nimport static com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphism.TreeNode;\nimport static com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismWithBfs.addUndirectedEdge;\nimport static com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismWithBfs.createEmptyTree;\nimport static com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismWithBfs.encodeTree;\nimport static com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphismWithBfs.treesAreIsomorphic;\n\nimport java.util.*;\nimport org.junit.*;\n\npublic class TreeIsomorphismWithBfsTest {\n\n  @Test\n  public void testSingleton() {\n    List<List<Integer>> tree1 = createEmptyTree(1);\n    List<List<Integer>> tree2 = createEmptyTree(1);\n    assertThat(treesAreIsomorphic(tree1, tree2)).isEqualTo(true);\n  }\n\n  @Test\n  public void testTwoNodeTree() {\n    List<List<Integer>> tree1 = createEmptyTree(2);\n    List<List<Integer>> tree2 = createEmptyTree(2);\n\n    addUndirectedEdge(tree1, 0, 1);\n    addUndirectedEdge(tree2, 1, 0);\n\n    assertThat(treesAreIsomorphic(tree1, tree2)).isEqualTo(true);\n  }\n\n  @Test\n  public void testSmall() {\n    List<List<Integer>> tree1 = createEmptyTree(5);\n    List<List<Integer>> tree2 = createEmptyTree(5);\n\n    addUndirectedEdge(tree1, 2, 0);\n    addUndirectedEdge(tree1, 2, 1);\n    addUndirectedEdge(tree1, 2, 3);\n    addUndirectedEdge(tree1, 3, 4);\n\n    addUndirectedEdge(tree2, 1, 3);\n    addUndirectedEdge(tree2, 1, 0);\n    addUndirectedEdge(tree2, 1, 2);\n    addUndirectedEdge(tree2, 2, 4);\n\n    assertThat(treesAreIsomorphic(tree1, tree2)).isEqualTo(true);\n  }\n\n  @Test\n  public void testSimilarChains() {\n    // Trees 1 and 3 are equal\n    int n = 10;\n    List<List<Integer>> tree1 = createEmptyTree(n);\n    List<List<Integer>> tree2 = createEmptyTree(n);\n    List<List<Integer>> tree3 = createEmptyTree(n);\n\n    addUndirectedEdge(tree1, 0, 1);\n    addUndirectedEdge(tree1, 1, 3);\n    addUndirectedEdge(tree1, 3, 5);\n    addUndirectedEdge(tree1, 5, 7);\n    addUndirectedEdge(tree1, 7, 8);\n    addUndirectedEdge(tree1, 8, 9);\n    addUndirectedEdge(tree1, 2, 1);\n    addUndirectedEdge(tree1, 4, 3);\n    addUndirectedEdge(tree1, 6, 5);\n\n    addUndirectedEdge(tree2, 0, 1);\n    addUndirectedEdge(tree2, 1, 3);\n    addUndirectedEdge(tree2, 3, 5);\n    addUndirectedEdge(tree2, 5, 6);\n    addUndirectedEdge(tree2, 6, 8);\n    addUndirectedEdge(tree2, 8, 9);\n    addUndirectedEdge(tree2, 6, 7);\n    addUndirectedEdge(tree2, 4, 3);\n    addUndirectedEdge(tree2, 2, 1);\n\n    addUndirectedEdge(tree3, 0, 1);\n    addUndirectedEdge(tree3, 1, 8);\n    addUndirectedEdge(tree3, 1, 6);\n    addUndirectedEdge(tree3, 6, 4);\n    addUndirectedEdge(tree3, 6, 5);\n    addUndirectedEdge(tree3, 5, 3);\n    addUndirectedEdge(tree3, 5, 7);\n    addUndirectedEdge(tree3, 7, 2);\n    addUndirectedEdge(tree3, 2, 9);\n\n    assertThat(treesAreIsomorphic(tree1, tree2)).isEqualTo(false);\n    assertThat(treesAreIsomorphic(tree1, tree3)).isEqualTo(true);\n    assertThat(treesAreIsomorphic(tree2, tree3)).isEqualTo(false);\n  }\n\n  @Test\n  public void testSlidesExample() {\n    // Setup tree structure from:\n    // http://webhome.cs.uvic.ca/~wendym/courses/582/16/notes/582_12_tree_can_form.pdf\n    List<List<Integer>> tree = createEmptyTree(19);\n\n    addUndirectedEdge(tree, 6, 2);\n    addUndirectedEdge(tree, 6, 7);\n    addUndirectedEdge(tree, 6, 11);\n    addUndirectedEdge(tree, 7, 8);\n    addUndirectedEdge(tree, 7, 9);\n    addUndirectedEdge(tree, 7, 10);\n    addUndirectedEdge(tree, 11, 12);\n    addUndirectedEdge(tree, 11, 13);\n    addUndirectedEdge(tree, 11, 16);\n    addUndirectedEdge(tree, 13, 14);\n    addUndirectedEdge(tree, 13, 15);\n    addUndirectedEdge(tree, 16, 17);\n    addUndirectedEdge(tree, 16, 18);\n    addUndirectedEdge(tree, 2, 0);\n    addUndirectedEdge(tree, 2, 1);\n    addUndirectedEdge(tree, 2, 3);\n    addUndirectedEdge(tree, 2, 4);\n    addUndirectedEdge(tree, 4, 5);\n\n    String treeEncoding = encodeTree(tree);\n    String expectedEncoding = \"(((()())(()())())((())()()())(()()()))\";\n    assertThat(treeEncoding).isEqualTo(expectedEncoding);\n  }\n\n  @Test\n  public void t() {\n    List<List<Integer>> tree = createEmptyTree(10);\n\n    TreeNode node0 = new TreeNode(0);\n    TreeNode node1 = new TreeNode(1);\n    TreeNode node2 = new TreeNode(2);\n    TreeNode node3 = new TreeNode(3);\n    TreeNode node4 = new TreeNode(4);\n    TreeNode node5 = new TreeNode(5);\n    TreeNode node6 = new TreeNode(6);\n    TreeNode node7 = new TreeNode(7);\n    TreeNode node8 = new TreeNode(8);\n    TreeNode node9 = new TreeNode(9);\n\n    node0.addChildren(node1, node2, node3);\n    node1.addChildren(node4, node5);\n    node5.addChildren(node9);\n    node2.addChildren(node6, node7);\n    node3.addChildren(node8);\n\n    // TODO(william): finish this test to check for \"(((())())(()())(()))\" encoding\n    // System.out.println(\n    // com.williamfiset.algorithms.graphtheory.treealgorithms.TreeIsomorphism.encode(node0));\n\n    // (((())())(()())(()))\n    //  ((())())\n    //          (()())\n    //                (())\n    //\n\n    // (()())\n    // (())\n    // (())\n\n    // ((()())(()))\n    // ((())())\n    //\n    // ((()())(()))((())())\n\n    // (((()())(()))((())()))\n    //   (()())\n    //         (())\n    //\n    //             ((())())\n    //\n  }\n}\n"}
{"code_source": "package com.williamfiset.algorithms.datastructures.trie;\n\npublic class Trie {\n\n  // The root character is an arbitrarily picked\n  // character chosen for the root node.\n  private final char rootCharacter = '\\0';\n  private Node root = new Node(rootCharacter);\n\n  private static class Node {\n\n    char ch;\n    int count = 0;\n    boolean isWordEnding = false;\n    java.util.Map<Character, Node> children = new java.util.HashMap<>();\n\n    public Node(char ch) {\n      this.ch = ch;\n    }\n\n    public void addChild(Node node, char c) {\n      children.put(c, node);\n    }\n  }\n\n  // Returns true if the string being inserted\n  // contains a prefix already in the trie\n  public boolean insert(String key, int numInserts) {\n\n    if (key == null) throw new IllegalArgumentException(\"Null not permitted in trie\");\n    if (numInserts <= 0)\n      throw new IllegalArgumentException(\"numInserts has to be greater than zero\");\n\n    Node node = root;\n    boolean created_new_node = false;\n    boolean is_prefix = false;\n\n    // Process each character one at a time\n    for (int i = 0; i < key.length(); ++i) {\n\n      char ch = key.charAt(i);\n      Node nextNode = node.children.get(ch);\n\n      // The next character in this string does not yet exist in trie\n      if (nextNode == null) {\n\n        nextNode = new Node(ch);\n        node.addChild(nextNode, ch);\n        created_new_node = true;\n\n        // Next character exists in trie.\n      } else {\n        if (nextNode.isWordEnding) is_prefix = true;\n      }\n\n      node = nextNode;\n      node.count += numInserts;\n    }\n\n    // The root itself is not a word ending. It is simply a placeholder.\n    if (node != root) node.isWordEnding = true;\n\n    return is_prefix || !created_new_node;\n  }\n\n  // Returns true if the string being inserted\n  // contains a prefix already in the trie\n  public boolean insert(String key) {\n    return insert(key, 1);\n  }\n\n  // This delete function allows you to delete keys from the trie\n  // (even those which were not previously inserted into the trie).\n  // This means that it may be the case that you delete a prefix which\n  // cuts off the access to numerous other strings starting with\n  // that prefix.\n  public boolean delete(String key, int numDeletions) {\n\n    // We cannot delete something that doesn't exist\n    if (!contains(key)) return false;\n\n    if (numDeletions <= 0) throw new IllegalArgumentException(\"numDeletions has to be positive\");\n\n    Node node = root;\n    for (int i = 0; i < key.length(); i++) {\n\n      char ch = key.charAt(i);\n      Node curNode = node.children.get(ch);\n      curNode.count -= numDeletions;\n\n      // Cut this edge if the current node has a count <= 0\n      // This means that all the prefixes below this point are inaccessible\n      if (curNode.count <= 0) {\n        node.children.remove(ch);\n        curNode.children = null;\n        curNode = null;\n        return true;\n      }\n\n      node = curNode;\n    }\n    return true;\n  }\n\n  public boolean delete(String key) {\n    return delete(key, 1);\n  }\n\n  // Returns true if this string is contained inside the trie\n  public boolean contains(String key) {\n    return count(key) != 0;\n  }\n\n  // Returns the count of a particular prefix\n  public int count(String key) {\n\n    if (key == null) throw new IllegalArgumentException(\"Null not permitted\");\n\n    Node node = root;\n\n    // Dig down into trie until we reach the bottom or stop\n    // early because the string we're looking for doesn't exist\n    for (int i = 0; i < key.length(); i++) {\n      char ch = key.charAt(i);\n      if (node == null) return 0;\n      node = node.children.get(ch);\n    }\n\n    if (node != null) return node.count;\n    return 0;\n  }\n\n  // Recursively clear the trie freeing memory to help GC\n  private void clear(Node node) {\n\n    if (node == null) return;\n\n    for (Character ch : node.children.keySet()) {\n      Node nextNode = node.children.get(ch);\n      clear(nextNode);\n      nextNode = null;\n    }\n\n    node.children.clear();\n    node.children = null;\n  }\n\n  // Clear the trie\n  public void clear() {\n\n    root.children = null;\n    root = new Node(rootCharacter);\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.trie;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport org.junit.*;\n\npublic class TrieTest {\n\n  // @Before public void setup() { }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testBadTrieDelete1() {\n    Trie t = new Trie();\n    t.insert(\"some string\");\n    t.delete(\"some string\", 0);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testBadTrieDelete2() {\n    Trie t = new Trie();\n    t.insert(\"some string\");\n    t.delete(\"some string\", -1);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testBadTrieDelete3() {\n    Trie t = new Trie();\n    t.insert(\"some string\");\n    t.delete(\"some string\", -345);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testBadTrieInsert() {\n    (new Trie()).insert(null);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testBadTrieCount() {\n    (new Trie()).count(null);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testBadTrieContains() {\n    (new Trie()).contains(null);\n  }\n\n  @Test\n  public void testContains() {\n\n    Trie t1 = new Trie();\n\n    // This implementation doesn't count the empty string as\n    // a valid string to be inserted into the trie (although it\n    // would be easy to account for)\n    t1.insert(\"\");\n    assertThat(t1.contains(\"\")).isFalse();\n    t1.insert(\"\");\n    assertThat(t1.contains(\"\")).isFalse();\n    t1.insert(\"\");\n    assertThat(t1.contains(\"\")).isFalse();\n\n    Trie t2 = new Trie();\n    t2.insert(\"aaaaa\");\n    t2.insert(\"aaaaa\");\n    t2.insert(\"aaaaa\");\n    t2.insert(\"aaaaa\");\n    t2.insert(\"aaaaa\");\n    assertThat(t2.contains(\"aaaaa\")).isTrue();\n    assertThat(t2.contains(\"aaaa\")).isTrue();\n    assertThat(t2.contains(\"aaa\")).isTrue();\n    assertThat(t2.contains(\"aa\")).isTrue();\n    assertThat(t2.contains(\"a\")).isTrue();\n\n    Trie t3 = new Trie();\n\n    t3.insert(\"AE\");\n    t3.insert(\"AE\");\n    t3.insert(\"AH\");\n    t3.insert(\"AH\");\n    t3.insert(\"AH7\");\n    t3.insert(\"A7\");\n    t3.insert(\"7\");\n    t3.insert(\"7\");\n    t3.insert(\"B\");\n    t3.insert(\"B\");\n    t3.insert(\"B\");\n    t3.insert(\"B\");\n\n    assertThat(t3.contains(\"A\")).isTrue();\n    assertThat(t3.contains(\"AH\")).isTrue();\n    assertThat(t3.contains(\"A7\")).isTrue();\n    assertThat(t3.contains(\"AE\")).isTrue();\n    assertThat(t3.contains(\"AH7\")).isTrue();\n    assertThat(t3.contains(\"7\")).isTrue();\n    assertThat(t3.contains(\"B\")).isTrue();\n\n    assertThat(t3.contains(\"Ar\")).isFalse();\n    assertThat(t3.contains(\"A8\")).isFalse();\n    assertThat(t3.contains(\"AH6\")).isFalse();\n    assertThat(t3.contains(\"C\")).isFalse();\n  }\n\n  @Test\n  public void testCount() {\n\n    Trie t1 = new Trie();\n\n    // This implementation doesn't count the empty string as\n    // a valid string to be inserted into the trie (although it\n    // would be easy to account for)\n    t1.insert(\"\");\n    assertThat(t1.count(\"\")).isEqualTo(0);\n    t1.insert(\"\");\n    assertThat(t1.count(\"\")).isEqualTo(0);\n    t1.insert(\"\");\n    assertThat(t1.count(\"\")).isEqualTo(0);\n\n    Trie t2 = new Trie();\n    t2.insert(\"aaaaa\");\n    t2.insert(\"aaaaa\");\n    t2.insert(\"aaaaa\");\n    t2.insert(\"aaaaa\");\n    t2.insert(\"aaaaa\");\n    assertThat(t2.count(\"aaaaa\")).isEqualTo(5);\n    assertThat(t2.count(\"aaaa\")).isEqualTo(5);\n    assertThat(t2.count(\"aaa\")).isEqualTo(5);\n    assertThat(t2.count(\"aa\")).isEqualTo(5);\n    assertThat(t2.count(\"a\")).isEqualTo(5);\n\n    Trie t3 = new Trie();\n\n    t3.insert(\"AE\");\n    t3.insert(\"AE\");\n    t3.insert(\"AH\");\n    t3.insert(\"AH\");\n    t3.insert(\"AH7\");\n    t3.insert(\"A7\");\n\n    t3.insert(\"7\");\n    t3.insert(\"7\");\n\n    t3.insert(\"B\");\n    t3.insert(\"B\");\n    t3.insert(\"B\");\n    t3.insert(\"B\");\n\n    assertThat(t3.count(\"A\")).isEqualTo(6);\n    assertThat(t3.count(\"AH\")).isEqualTo(3);\n    assertThat(t3.count(\"A7\")).isEqualTo(1);\n    assertThat(t3.count(\"AE\")).isEqualTo(2);\n    assertThat(t3.count(\"AH7\")).isEqualTo(1);\n    assertThat(t3.count(\"7\")).isEqualTo(2);\n    assertThat(t3.count(\"B\")).isEqualTo(4);\n    assertThat(t3.count(\"Ar\")).isEqualTo(0);\n    assertThat(t3.count(\"A8\")).isEqualTo(0);\n    assertThat(t3.count(\"AH6\")).isEqualTo(0);\n    assertThat(t3.count(\"C\")).isEqualTo(0);\n  }\n\n  @Test\n  public void testInsert() {\n\n    Trie t = new Trie();\n    assertThat(t.insert(\"a\")).isFalse();\n    assertThat(t.insert(\"b\")).isFalse();\n    assertThat(t.insert(\"c\")).isFalse();\n    assertThat(t.insert(\"d\")).isFalse();\n    assertThat(t.insert(\"x\")).isFalse();\n\n    assertThat(t.insert(\"ab\")).isTrue();\n    assertThat(t.insert(\"xkcd\")).isTrue();\n    assertThat(t.insert(\"dogs\")).isTrue();\n    assertThat(t.insert(\"bears\")).isTrue();\n\n    assertThat(t.insert(\"mo\")).isFalse();\n    assertThat(t.insert(\"mooooose\")).isTrue();\n\n    t.clear();\n\n    assertThat(t.insert(\"aaaa\", 4)).isFalse();\n    assertThat(t.count(\"aaaa\")).isEqualTo(4);\n\n    assertThat(t.insert(\"aaa\", 3)).isTrue();\n    assertThat(t.count(\"a\")).isEqualTo(7);\n    assertThat(t.count(\"aa\")).isEqualTo(7);\n    assertThat(t.count(\"aaa\")).isEqualTo(7);\n    assertThat(t.count(\"aaaa\")).isEqualTo(4);\n    assertThat(t.count(\"aaaaa\")).isEqualTo(0);\n\n    assertThat(t.insert(\"a\", 5)).isTrue();\n    assertThat(t.count(\"a\")).isEqualTo(12);\n    assertThat(t.count(\"aa\")).isEqualTo(7);\n    assertThat(t.count(\"aaa\")).isEqualTo(7);\n    assertThat(t.count(\"aaaa\")).isEqualTo(4);\n    assertThat(t.count(\"aaaaa\")).isEqualTo(0);\n  }\n\n  @Test\n  public void testClear() {\n\n    Trie t = new Trie();\n\n    assertThat(t.insert(\"a\")).isFalse();\n    assertThat(t.insert(\"b\")).isFalse();\n    assertThat(t.insert(\"c\")).isFalse();\n\n    assertThat(t.contains(\"a\")).isTrue();\n    assertThat(t.contains(\"b\")).isTrue();\n    assertThat(t.contains(\"c\")).isTrue();\n\n    t.clear();\n\n    assertThat(t.contains(\"a\")).isFalse();\n    assertThat(t.contains(\"b\")).isFalse();\n    assertThat(t.contains(\"c\")).isFalse();\n\n    t.insert(\"aaaa\");\n    t.insert(\"aaab\");\n    t.insert(\"aaab5\");\n    t.insert(\"aaac\");\n    t.insert(\"aaacb\");\n\n    assertThat(t.contains(\"aaa\")).isTrue();\n    assertThat(t.contains(\"aaacb\")).isTrue();\n    assertThat(t.contains(\"aaab5\")).isTrue();\n\n    t.clear();\n\n    assertThat(t.contains(\"aaaa\")).isFalse();\n    assertThat(t.contains(\"aaab\")).isFalse();\n    assertThat(t.contains(\"aaab5\")).isFalse();\n    assertThat(t.contains(\"aaac\")).isFalse();\n    assertThat(t.contains(\"aaacb\")).isFalse();\n  }\n\n  @Test\n  public void testDelete() {\n\n    Trie t = new Trie();\n    t.insert(\"AAC\");\n    t.insert(\"AA\");\n    t.insert(\"A\");\n\n    assertThat(t.delete(\"AAC\")).isTrue();\n    assertThat(t.contains(\"AAC\")).isFalse();\n    assertThat(t.contains(\"AA\")).isTrue();\n    assertThat(t.contains(\"A\")).isTrue();\n\n    assertThat(t.delete(\"AA\")).isTrue();\n    assertThat(t.contains(\"AAC\")).isFalse();\n    assertThat(t.contains(\"AA\")).isFalse();\n    assertThat(t.contains(\"A\")).isTrue();\n\n    assertThat(t.delete(\"A\")).isTrue();\n    assertThat(t.contains(\"AAC\")).isFalse();\n    assertThat(t.contains(\"AA\")).isFalse();\n    assertThat(t.contains(\"A\")).isFalse();\n\n    t.clear();\n\n    t.insert(\"AAC\");\n    t.insert(\"AA\");\n    t.insert(\"A\");\n\n    assertThat(t.delete(\"AA\")).isTrue();\n    assertThat(t.delete(\"AA\")).isTrue();\n\n    assertThat(t.contains(\"AAC\")).isFalse();\n    assertThat(t.contains(\"AA\")).isFalse();\n    assertThat(t.contains(\"A\")).isTrue();\n\n    t.clear();\n\n    t.insert(\"$A\");\n    t.insert(\"$B\");\n    t.insert(\"$C\");\n\n    assertThat(t.delete(\"$\", 3)).isTrue();\n\n    assertThat(t.delete(\"$\")).isFalse();\n    assertThat(t.contains(\"$\")).isFalse();\n    assertThat(t.contains(\"$A\")).isFalse();\n    assertThat(t.contains(\"$B\")).isFalse();\n    assertThat(t.contains(\"$C\")).isFalse();\n    assertThat(t.delete(\"$A\")).isFalse();\n    assertThat(t.delete(\"$B\")).isFalse();\n    assertThat(t.delete(\"$C\")).isFalse();\n\n    t.clear();\n\n    t.insert(\"$A\");\n    t.insert(\"$B\");\n    t.insert(\"$C\");\n\n    assertThat(t.delete(\"$\", 2)).isTrue();\n    assertThat(t.delete(\"$\")).isTrue();\n\n    assertThat(t.contains(\"$\")).isFalse();\n    assertThat(t.contains(\"$A\")).isFalse();\n    assertThat(t.contains(\"$B\")).isFalse();\n    assertThat(t.contains(\"$C\")).isFalse();\n    assertThat(t.delete(\"$A\")).isFalse();\n    assertThat(t.delete(\"$B\")).isFalse();\n    assertThat(t.delete(\"$C\")).isFalse();\n\n    t.clear();\n\n    t.insert(\"$A\");\n    t.insert(\"$B\");\n    t.insert(\"$C\");\n\n    assertThat(t.delete(\"$\", 2)).isTrue();\n\n    assertThat(t.contains(\"$\")).isTrue();\n    assertThat(t.contains(\"$A\")).isTrue();\n    assertThat(t.contains(\"$B\")).isTrue();\n    assertThat(t.contains(\"$C\")).isTrue();\n    assertThat(t.delete(\"$A\")).isTrue();\n    assertThat(t.delete(\"$B\")).isFalse();\n    assertThat(t.delete(\"$C\")).isFalse();\n\n    t.clear();\n\n    t.insert(\"CAT\", 3);\n    t.insert(\"DOG\", 3);\n\n    assertThat(t.delete(\"parrot\", 50)).isFalse();\n\n    t.clear();\n\n    t.insert(\"1234\");\n    t.insert(\"122\", 2);\n    t.insert(\"123\", 3);\n\n    assertThat(t.delete(\"12\", 6)).isTrue();\n    assertThat(t.delete(\"12\")).isFalse();\n    assertThat(t.delete(\"1\")).isFalse();\n    assertThat(t.contains(\"1234\")).isFalse();\n    assertThat(t.contains(\"123\")).isFalse();\n    assertThat(t.contains(\"12\")).isFalse();\n    assertThat(t.contains(\"1\")).isFalse();\n\n    t.clear();\n\n    t.insert(\"1234\");\n    t.insert(\"122\", 2);\n    t.insert(\"123\", 3);\n\n    t.delete(\"12\", 999999);\n\n    assertThat(t.contains(\"1234\")).isFalse();\n    assertThat(t.contains(\"123\")).isFalse();\n    assertThat(t.contains(\"12\")).isFalse();\n    assertThat(t.contains(\"1\")).isFalse();\n\n    t.clear();\n\n    t.insert(\"1234\");\n    t.insert(\"122\", 2);\n    t.insert(\"123\", 3);\n\n    t.delete(\"12\", 999999);\n\n    assertThat(t.contains(\"1234\")).isFalse();\n    assertThat(t.contains(\"123\")).isFalse();\n    assertThat(t.contains(\"12\")).isFalse();\n    assertThat(t.contains(\"1\")).isFalse();\n\n    t.clear();\n\n    t.insert(\"1234\");\n    t.insert(\"122\", 2);\n    t.insert(\"123\", 3);\n\n    assertThat(t.delete(\"1234\")).isTrue();\n    assertThat(t.delete(\"123\", 4)).isTrue();\n    assertThat(t.delete(\"122\", 2)).isTrue();\n\n    assertThat(t.contains(\"1\")).isFalse();\n    assertThat(t.contains(\"12\")).isFalse();\n    assertThat(t.contains(\"122\")).isFalse();\n    assertThat(t.contains(\"123\")).isFalse();\n    assertThat(t.contains(\"1234\")).isFalse();\n  }\n\n  @Test\n  public void testEdgeCases() {\n\n    Trie t = new Trie();\n    assertThat(t.count(\"\")).isEqualTo(0);\n    assertThat(t.count(\"\\0\")).isEqualTo(0);\n    assertThat(t.count(\"\\0\\0\")).isEqualTo(0);\n    assertThat(t.count(\"\\0\\0\\0\")).isEqualTo(0);\n\n    for (char c = 0; c < 128; c++) assertThat(t.count(\"\" + c)).isEqualTo(0);\n\n    assertThat(t.contains(\"\")).isFalse();\n    assertThat(t.contains(\"\\0\")).isFalse();\n    assertThat(t.contains(\"\\0\\0\")).isFalse();\n    assertThat(t.contains(\"\\0\\0\\0\")).isFalse();\n\n    for (char c = 0; c < 128; c++) assertThat(t.contains(\"\" + c)).isFalse();\n  }\n}\n"}
{"code_source": "/** NOTE: This file is still in development! */\npackage com.williamfiset.algorithms.graphtheory;\n\nimport java.util.*;\n\npublic class TwoSatSolverAdjacencyList {\n\n  private int n;\n  private List<List<Integer>> graph;\n\n  private boolean solved;\n  private boolean isSatisfiable;\n  private TarjanSccSolverAdjacencyList sccSolver;\n\n  public TwoSatSolverAdjacencyList(List<List<Integer>> graph) {\n    n = graph.size() / 2;\n    sccSolver = new TarjanSccSolverAdjacencyList(graph);\n  }\n\n  // Returns true/false depending on whether this 2SAT problem is satisfiable\n  public boolean isSatisfiable() {\n    if (!solved) solve();\n    return isSatisfiable;\n  }\n\n  public void solve() {\n    if (solved) return;\n\n    int[] sccs = sccSolver.getSccs();\n    // System.out.println(Arrays.toString(sccs));\n\n    // Assume that this 2SAT problem is satisfiable and try to\n    // disprove it by looking at which SCCs p and ~p belong to.\n    isSatisfiable = true;\n    for (int i = 0; i < sccs.length; i += 2) {\n      if (sccs[i] == sccs[i ^ 1]) {\n        isSatisfiable = false;\n        break;\n      }\n    }\n\n    // Find a truth assignment.\n    if (isSatisfiable) {\n      // get topsort ordering\n    }\n\n    solved = true;\n  }\n\n  // Creates an implication graph.\n  //\n  // NOTE: In the implication graph node i should be stored in position 2i\n  // and its negation in position 2i + 1. This is done so that we can quickly\n  // access the negation of a node by doing an xor operation. For example:\n  // Node 4's negation is 5 since 4 \u2295 1 = 5 and 5's negation is 4 since 5 \u2295 1 = 4.\n  public static List<List<Integer>> createImplicationGraph(int n) {\n    List<List<Integer>> graph = new ArrayList<>(2 * n);\n    for (int i = 0; i < 2 * n; i++) graph.add(new ArrayList<>());\n    return graph;\n  }\n\n  // Make sure 0 <= p, q < 2n\n  public static void addXorClause(List<List<Integer>> graph, int p, int q) {\n    // xor(p, q) = (p or q) and (~p or ~q)\n    addOrClause(graph, p, q);\n    addOrClause(graph, p ^ 1, q ^ 1);\n  }\n\n  // Add p or q to the graph where p, q come from the CNF\n  // Make sure 0 <= p, q < 2n\n  public static void addOrClause(List<List<Integer>> graph, int p, int q) {\n    // Add the edges ~p -> q and ~q -> p to implication graph.\n    // System.out.printf(\"p = %d, ~p = %d, q = %d, ~q = %d\\n\", p, p ^ 1, q, q ^ 1);\n    // System.out.printf(\"%d -> %d\\n\", p^1, q);\n    // System.out.printf(\"%d -> %d\\n\", q^1, p);\n    graph.get(p ^ 1).add(q);\n    graph.get(q ^ 1).add(p);\n  }\n\n  public static void main(String[] args) {\n\n    int n = 2;\n    List<List<Integer>> graph = createImplicationGraph(n);\n\n    // addOrClause(graph, n, 0, negate(1, n));\n    // addOrClause(graph, n, negate(0, n), 2);\n    // addOrClause(graph, n, negate(1, n), negate(3, n));\n    // addOrClause(graph, n, 3, 0);\n    // addOrClause(graph, n, negate(2, n), 4);\n    // addOrClause(graph, n, negate(1, n), 4);\n\n    // addOrClause(graph, n, 0, 1^1);\n    // addOrClause(graph, n, 0, 1);\n    // addOrClause(graph, n, 0^1, 1);\n    // System.out.println(graph);\n\n    // TwoSatSolverAdjacencyList solver = new TwoSatSolverAdjacencyList(graph);\n    // int[] sccs = solver.sccSolver.getSccs();\n    // System.out.println(Arrays.toString(sccs));\n\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.graphtheory;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport java.util.*;\nimport org.junit.*;\n\npublic class TwoSatSolverAdjacencyListTest {\n\n  // Initialize graph with 'n' nodes.\n  public static List<List<Integer>> createGraph(int n) {\n    List<List<Integer>> graph = new ArrayList<>(2 * n);\n    for (int i = 0; i < 2 * n; i++) graph.add(new ArrayList<>());\n    return graph;\n  }\n\n  @Test\n  public void testSimpleSatisfiable() {\n    int n = 1;\n    List<List<Integer>> g = createGraph(n);\n\n    // Full clause: (p or ~p)\n    TwoSatSolverAdjacencyList.addOrClause(g, 0, 0 ^ 1);\n\n    TwoSatSolverAdjacencyList solver = new TwoSatSolverAdjacencyList(g);\n    assertThat(solver.isSatisfiable()).isTrue();\n  }\n\n  @Test\n  public void testSimpleImpossible() {\n    int n = 1;\n    List<List<Integer>> g = createGraph(n);\n\n    // Full clause: (p or p) and (~p or ~p)\n    TwoSatSolverAdjacencyList.addOrClause(g, 0, 0); // (p or p)\n    TwoSatSolverAdjacencyList.addOrClause(g, 0 ^ 1, 0 ^ 1); // (~p or ~p)\n\n    TwoSatSolverAdjacencyList solver = new TwoSatSolverAdjacencyList(g);\n    assertThat(solver.isSatisfiable()).isFalse();\n  }\n\n  @Test\n  public void testImpossibleFourNodeCycle() {\n    int n = 2;\n    List<List<Integer>> g = createGraph(n);\n\n    // Full clause: (p0 or p1) and (p0 or ~p1) and (~p0 or p1) and (~p0 or ~p1)\n    TwoSatSolverAdjacencyList.addOrClause(g, 2 * 0, 2 * 1); // (p0 or p1)\n    TwoSatSolverAdjacencyList.addOrClause(g, 2 * 0, 2 * 1 ^ 1); // (p0 or ~p1)\n    TwoSatSolverAdjacencyList.addOrClause(g, 2 * 0 ^ 1, 2 * 1); // (~p0 or p1)\n    TwoSatSolverAdjacencyList.addOrClause(g, 2 * 0 ^ 1, 2 * 1 ^ 1); // (~p0 or ~p1)\n    // System.out.println(g);\n\n    TwoSatSolverAdjacencyList solver = new TwoSatSolverAdjacencyList(g);\n    assertThat(solver.isSatisfiable()).isFalse();\n  }\n}\n"}
{"code_source": "/**\n * UnionFind/Disjoint Set data structure implementation. This code was inspired by the union find\n * implementation found in 'Algorithms Fourth Edition' by Robert Sedgewick and Kevin Wayne.\n *\n * @author William Fiset, william.alexandre.fiset@gmail.com\n */\npackage com.williamfiset.algorithms.datastructures.unionfind;\n\npublic class UnionFind {\n\n  // The number of elements in this union find\n  private int size;\n\n  // Used to track the size of each of the component\n  private int[] sz;\n\n  // id[i] points to the parent of i, if id[i] = i then i is a root node\n  private int[] id;\n\n  // Tracks the number of components in the union find\n  private int numComponents;\n\n  public UnionFind(int size) {\n\n    if (size <= 0) throw new IllegalArgumentException(\"Size <= 0 is not allowed\");\n\n    this.size = numComponents = size;\n    sz = new int[size];\n    id = new int[size];\n\n    for (int i = 0; i < size; i++) {\n      id[i] = i; // Link to itself (self root)\n      sz[i] = 1; // Each component is originally of size one\n    }\n  }\n\n  // Find which component/set 'p' belongs to, takes amortized constant time.\n  public int find(int p) {\n\n    // Find the root of the component/set\n    int root = p;\n    while (root != id[root]) root = id[root];\n\n    // Compress the path leading back to the root.\n    // Doing this operation is called \"path compression\"\n    // and is what gives us amortized time complexity.\n    while (p != root) {\n      int next = id[p];\n      id[p] = root;\n      p = next;\n    }\n\n    return root;\n  }\n\n  // This is an alternative recursive formulation for the find method\n  // public int find(int p) {\n  //   if (p == id[p]) return p;\n  //   return id[p] = find(id[p]);\n  // }\n\n  // Return whether or not the elements 'p' and\n  // 'q' are in the same components/set.\n  public boolean connected(int p, int q) {\n    return find(p) == find(q);\n  }\n\n  // Return the size of the components/set 'p' belongs to\n  public int componentSize(int p) {\n    return sz[find(p)];\n  }\n\n  // Return the number of elements in this UnionFind/Disjoint set\n  public int size() {\n    return size;\n  }\n\n  // Returns the number of remaining components/sets\n  public int components() {\n    return numComponents;\n  }\n\n  // Unify the components/sets containing elements 'p' and 'q'\n  public void unify(int p, int q) {\n\n    // These elements are already in the same group!\n    if (connected(p, q)) return;\n\n    int root1 = find(p);\n    int root2 = find(q);\n\n    // Merge smaller component/set into the larger one.\n    if (sz[root1] < sz[root2]) {\n      sz[root2] += sz[root1];\n      id[root1] = root2;\n      sz[root1] = 0;\n    } else {\n      sz[root1] += sz[root2];\n      id[root2] = root1;\n      sz[root2] = 0;\n    }\n\n    // Since the roots found are different we know that the\n    // number of components/sets has decreased by one\n    numComponents--;\n  }\n}\n", "test_case": "package com.williamfiset.algorithms.datastructures.unionfind;\n\n// import static org.junit.Assert.*;\nimport static com.google.common.truth.Truth.assertThat;\n\nimport org.junit.*;\n\npublic class UnionFindTest {\n\n  @Test\n  public void testNumComponents() {\n\n    UnionFind uf = new UnionFind(5);\n    assertThat(uf.components()).isEqualTo(5);\n\n    uf.unify(0, 1);\n    assertThat(uf.components()).isEqualTo(4);\n\n    uf.unify(1, 0);\n    assertThat(uf.components()).isEqualTo(4);\n\n    uf.unify(1, 2);\n    assertThat(uf.components()).isEqualTo(3);\n\n    uf.unify(0, 2);\n    assertThat(uf.components()).isEqualTo(3);\n\n    uf.unify(2, 1);\n    assertThat(uf.components()).isEqualTo(3);\n\n    uf.unify(3, 4);\n    assertThat(uf.components()).isEqualTo(2);\n\n    uf.unify(4, 3);\n    assertThat(uf.components()).isEqualTo(2);\n\n    uf.unify(1, 3);\n    assertThat(uf.components()).isEqualTo(1);\n\n    uf.unify(4, 0);\n    assertThat(uf.components()).isEqualTo(1);\n  }\n\n  @Test\n  public void testComponentSize() {\n\n    UnionFind uf = new UnionFind(5);\n    assertThat(uf.componentSize(0)).isEqualTo(1);\n    assertThat(uf.componentSize(1)).isEqualTo(1);\n    assertThat(uf.componentSize(2)).isEqualTo(1);\n    assertThat(uf.componentSize(3)).isEqualTo(1);\n    assertThat(uf.componentSize(4)).isEqualTo(1);\n\n    uf.unify(0, 1);\n    assertThat(uf.componentSize(0)).isEqualTo(2);\n    assertThat(uf.componentSize(1)).isEqualTo(2);\n    assertThat(uf.componentSize(2)).isEqualTo(1);\n    assertThat(uf.componentSize(3)).isEqualTo(1);\n    assertThat(uf.componentSize(4)).isEqualTo(1);\n\n    uf.unify(1, 0);\n    assertThat(uf.componentSize(0)).isEqualTo(2);\n    assertThat(uf.componentSize(1)).isEqualTo(2);\n    assertThat(uf.componentSize(2)).isEqualTo(1);\n    assertThat(uf.componentSize(3)).isEqualTo(1);\n    assertThat(uf.componentSize(4)).isEqualTo(1);\n\n    uf.unify(1, 2);\n    assertThat(uf.componentSize(0)).isEqualTo(3);\n    assertThat(uf.componentSize(1)).isEqualTo(3);\n    assertThat(uf.componentSize(2)).isEqualTo(3);\n    assertThat(uf.componentSize(3)).isEqualTo(1);\n    assertThat(uf.componentSize(4)).isEqualTo(1);\n\n    uf.unify(0, 2);\n    assertThat(uf.componentSize(0)).isEqualTo(3);\n    assertThat(uf.componentSize(1)).isEqualTo(3);\n    assertThat(uf.componentSize(2)).isEqualTo(3);\n    assertThat(uf.componentSize(3)).isEqualTo(1);\n    assertThat(uf.componentSize(4)).isEqualTo(1);\n\n    uf.unify(2, 1);\n    assertThat(uf.componentSize(0)).isEqualTo(3);\n    assertThat(uf.componentSize(1)).isEqualTo(3);\n    assertThat(uf.componentSize(2)).isEqualTo(3);\n    assertThat(uf.componentSize(3)).isEqualTo(1);\n    assertThat(uf.componentSize(4)).isEqualTo(1);\n\n    uf.unify(3, 4);\n    assertThat(uf.componentSize(0)).isEqualTo(3);\n    assertThat(uf.componentSize(1)).isEqualTo(3);\n    assertThat(uf.componentSize(2)).isEqualTo(3);\n    assertThat(uf.componentSize(3)).isEqualTo(2);\n    assertThat(uf.componentSize(4)).isEqualTo(2);\n\n    uf.unify(4, 3);\n    assertThat(uf.componentSize(0)).isEqualTo(3);\n    assertThat(uf.componentSize(1)).isEqualTo(3);\n    assertThat(uf.componentSize(2)).isEqualTo(3);\n    assertThat(uf.componentSize(3)).isEqualTo(2);\n    assertThat(uf.componentSize(4)).isEqualTo(2);\n\n    uf.unify(1, 3);\n    assertThat(uf.componentSize(0)).isEqualTo(5);\n    assertThat(uf.componentSize(1)).isEqualTo(5);\n    assertThat(uf.componentSize(2)).isEqualTo(5);\n    assertThat(uf.componentSize(3)).isEqualTo(5);\n    assertThat(uf.componentSize(4)).isEqualTo(5);\n\n    uf.unify(4, 0);\n    assertThat(uf.componentSize(0)).isEqualTo(5);\n    assertThat(uf.componentSize(1)).isEqualTo(5);\n    assertThat(uf.componentSize(2)).isEqualTo(5);\n    assertThat(uf.componentSize(3)).isEqualTo(5);\n    assertThat(uf.componentSize(4)).isEqualTo(5);\n  }\n\n  @Test\n  public void testConnectivity() {\n\n    int sz = 7;\n    UnionFind uf = new UnionFind(sz);\n\n    for (int i = 0; i < sz; i++) assertThat(uf.connected(i, i)).isTrue();\n\n    uf.unify(0, 2);\n\n    assertThat(uf.connected(0, 2)).isTrue();\n    assertThat(uf.connected(2, 0)).isTrue();\n\n    assertThat(uf.connected(0, 1)).isFalse();\n    assertThat(uf.connected(3, 1)).isFalse();\n    assertThat(uf.connected(6, 4)).isFalse();\n    assertThat(uf.connected(5, 0)).isFalse();\n\n    for (int i = 0; i < sz; i++) assertThat(uf.connected(i, i)).isTrue();\n\n    uf.unify(3, 1);\n\n    assertThat(uf.connected(0, 2)).isTrue();\n    assertThat(uf.connected(2, 0)).isTrue();\n    assertThat(uf.connected(1, 3)).isTrue();\n    assertThat(uf.connected(3, 1)).isTrue();\n\n    assertThat(uf.connected(0, 1)).isFalse();\n    assertThat(uf.connected(1, 2)).isFalse();\n    assertThat(uf.connected(2, 3)).isFalse();\n    assertThat(uf.connected(1, 0)).isFalse();\n    assertThat(uf.connected(2, 1)).isFalse();\n    assertThat(uf.connected(3, 2)).isFalse();\n\n    assertThat(uf.connected(1, 4)).isFalse();\n    assertThat(uf.connected(2, 5)).isFalse();\n    assertThat(uf.connected(3, 6)).isFalse();\n\n    for (int i = 0; i < sz; i++) assertThat(uf.connected(i, i)).isTrue();\n\n    uf.unify(2, 5);\n    assertThat(uf.connected(0, 2)).isTrue();\n    assertThat(uf.connected(2, 0)).isTrue();\n    assertThat(uf.connected(1, 3)).isTrue();\n    assertThat(uf.connected(3, 1)).isTrue();\n    assertThat(uf.connected(0, 5)).isTrue();\n    assertThat(uf.connected(5, 0)).isTrue();\n    assertThat(uf.connected(5, 2)).isTrue();\n    assertThat(uf.connected(2, 5)).isTrue();\n\n    assertThat(uf.connected(0, 1)).isFalse();\n    assertThat(uf.connected(1, 2)).isFalse();\n    assertThat(uf.connected(2, 3)).isFalse();\n    assertThat(uf.connected(1, 0)).isFalse();\n    assertThat(uf.connected(2, 1)).isFalse();\n    assertThat(uf.connected(3, 2)).isFalse();\n\n    assertThat(uf.connected(4, 6)).isFalse();\n    assertThat(uf.connected(4, 5)).isFalse();\n    assertThat(uf.connected(1, 6)).isFalse();\n\n    for (int i = 0; i < sz; i++) assertThat(uf.connected(i, i)).isTrue();\n\n    // Connect everything\n    uf.unify(1, 2);\n    uf.unify(3, 4);\n    uf.unify(4, 6);\n\n    for (int i = 0; i < sz; i++) {\n      for (int j = 0; j < sz; j++) {\n        assertThat(uf.connected(i, j)).isTrue();\n      }\n    }\n  }\n\n  @Test\n  public void testSize() {\n\n    UnionFind uf = new UnionFind(5);\n    assertThat(uf.size()).isEqualTo(5);\n    uf.unify(0, 1);\n    uf.find(3);\n    assertThat(uf.size()).isEqualTo(5);\n    uf.unify(1, 2);\n    assertThat(uf.size()).isEqualTo(5);\n    uf.unify(0, 2);\n    uf.find(1);\n    assertThat(uf.size()).isEqualTo(5);\n    uf.unify(2, 1);\n    assertThat(uf.size()).isEqualTo(5);\n    uf.unify(3, 4);\n    uf.find(0);\n    assertThat(uf.size()).isEqualTo(5);\n    uf.unify(4, 3);\n    uf.find(3);\n    assertThat(uf.size()).isEqualTo(5);\n    uf.unify(1, 3);\n    assertThat(uf.size()).isEqualTo(5);\n    uf.find(2);\n    uf.unify(4, 0);\n    assertThat(uf.size()).isEqualTo(5);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testBadUnionFindCreation1() {\n    new UnionFind(-1);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testBadUnionFindCreation2() {\n    new UnionFind(-3463);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testBadUnionFindCreation3() {\n    new UnionFind(0);\n  }\n}\n"}
{"code_source": "package com.baeldung.algorithms.ga.annealing;\n\npublic class SimulatedAnnealing {\n\n    private static Travel travel = new Travel(10);\n\n    public static double simulateAnnealing(double startingTemperature, int numberOfIterations, double coolingRate) {\n        System.out.println(\"Starting SA with temperature: \" + startingTemperature + \", # of iterations: \" + numberOfIterations + \" and colling rate: \" + coolingRate);\n        double t = startingTemperature;\n        travel.generateInitialTravel();\n        double bestDistance = travel.getDistance();\n        System.out.println(\"Initial distance of travel: \" + bestDistance);\n        Travel bestSolution = travel;\n        Travel currentSolution = bestSolution;\n\n        for (int i = 0; i < numberOfIterations; i++) {\n            if (t > 0.1) {\n                currentSolution.swapCities();\n                double currentDistance = currentSolution.getDistance();\n                if (currentDistance < bestDistance) {\n                    bestDistance = currentDistance;\n                } else if (Math.exp((bestDistance - currentDistance) / t) < Math.random()) {\n                    currentSolution.revertSwap();\n                }\n                t *= coolingRate;\n            } else {\n                continue;\n            }\n            if (i % 100 == 0) {\n                System.out.println(\"Iteration #\" + i);\n            }\n        }\n        return bestDistance;\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms;\n\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.algorithms.ga.annealing.SimulatedAnnealing;\n\nclass SimulatedAnnealingLongRunningUnitTest {\n\n    @Test\n    void testSimulateAnnealing() {\n        assertTrue(SimulatedAnnealing.simulateAnnealing(10, 1000, 0.9) > 0);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.ga.ant_colony;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.OptionalInt;\nimport java.util.Random;\nimport java.util.stream.IntStream;\n\npublic class AntColonyOptimization {\n\n    private double c = 1.0;\n    private double alpha = 1;\n    private double beta = 5;\n    private double evaporation = 0.5;\n    private double Q = 500;\n    private double antFactor = 0.8;\n    private double randomFactor = 0.01;\n\n    private int maxIterations = 1000;\n\n    private int numberOfCities;\n    private int numberOfAnts;\n    private double graph[][];\n    private double trails[][];\n    private List<Ant> ants = new ArrayList<>();\n    private Random random = new Random();\n    private double probabilities[];\n\n    private int currentIndex;\n\n    private int[] bestTourOrder;\n    private double bestTourLength;\n\n    public AntColonyOptimization(int noOfCities) {\n        graph = generateRandomMatrix(noOfCities);\n        numberOfCities = graph.length;\n        numberOfAnts = (int) (numberOfCities * antFactor);\n\n        trails = new double[numberOfCities][numberOfCities];\n        probabilities = new double[numberOfCities];\n        IntStream.range(0, numberOfAnts)\n            .forEach(i -> ants.add(new Ant(numberOfCities)));\n    }\n\n    /**\n     * Generate initial solution\n     */\n    public double[][] generateRandomMatrix(int n) {\n        double[][] randomMatrix = new double[n][n];\n        IntStream.range(0, n)\n            .forEach(i -> IntStream.range(0, n)\n                .forEach(j -> randomMatrix[i][j] = Math.abs(random.nextInt(100) + 1)));\n        return randomMatrix;\n    }\n\n    /**\n     * Perform ant optimization\n     */\n    public void startAntOptimization() {\n        IntStream.rangeClosed(1, 3)\n            .forEach(i -> {\n                System.out.println(\"Attempt #\" + i);\n                solve();\n            });\n    }\n\n    /**\n     * Use this method to run the main logic\n     */\n    public int[] solve() {\n        setupAnts();\n        clearTrails();\n        IntStream.range(0, maxIterations)\n            .forEach(i -> {\n                moveAnts();\n                updateTrails();\n                updateBest();\n            });\n        System.out.println(\"Best tour length: \" + (bestTourLength - numberOfCities));\n        System.out.println(\"Best tour order: \" + Arrays.toString(bestTourOrder));\n        return bestTourOrder.clone();\n    }\n\n    /**\n     * Prepare ants for the simulation\n     */\n    private void setupAnts() {\n        IntStream.range(0, numberOfAnts)\n            .forEach(i -> {\n                ants.forEach(ant -> {\n                    ant.clear();\n                    ant.visitCity(-1, random.nextInt(numberOfCities));\n                });\n            });\n        currentIndex = 0;\n    }\n\n    /**\n     * At each iteration, move ants\n     */\n    private void moveAnts() {\n        IntStream.range(currentIndex, numberOfCities - 1)\n            .forEach(i -> {\n                ants.forEach(ant -> ant.visitCity(currentIndex, selectNextCity(ant)));\n                currentIndex++;\n            });\n    }\n\n    /**\n     * Select next city for each ant\n     */\n    private int selectNextCity(Ant ant) {\n        int t = random.nextInt(numberOfCities - currentIndex);\n        if (random.nextDouble() < randomFactor) {\n            OptionalInt cityIndex = IntStream.range(0, numberOfCities)\n                .filter(i -> i == t && !ant.visited(i))\n                .findFirst();\n            if (cityIndex.isPresent()) {\n                return cityIndex.getAsInt();\n            }\n        }\n        calculateProbabilities(ant);\n        double r = random.nextDouble();\n        double total = 0;\n        for (int i = 0; i < numberOfCities; i++) {\n            total += probabilities[i];\n            if (total >= r) {\n                return i;\n            }\n        }\n\n        throw new RuntimeException(\"There are no other cities\");\n    }\n\n    /**\n     * Calculate the next city picks probabilites\n     */\n    public void calculateProbabilities(Ant ant) {\n        int i = ant.trail[currentIndex];\n        double pheromone = 0.0;\n        for (int l = 0; l < numberOfCities; l++) {\n            if (!ant.visited(l)) {\n                pheromone += Math.pow(trails[i][l], alpha) * Math.pow(1.0 / graph[i][l], beta);\n            }\n        }\n        for (int j = 0; j < numberOfCities; j++) {\n            if (ant.visited(j)) {\n                probabilities[j] = 0.0;\n            } else {\n                double numerator = Math.pow(trails[i][j], alpha) * Math.pow(1.0 / graph[i][j], beta);\n                probabilities[j] = numerator / pheromone;\n            }\n        }\n    }\n\n    /**\n     * Update trails that ants used\n     */\n    private void updateTrails() {\n        for (int i = 0; i < numberOfCities; i++) {\n            for (int j = 0; j < numberOfCities; j++) {\n                trails[i][j] *= evaporation;\n            }\n        }\n        for (Ant a : ants) {\n            double contribution = Q / a.trailLength(graph);\n            for (int i = 0; i < numberOfCities - 1; i++) {\n                trails[a.trail[i]][a.trail[i + 1]] += contribution;\n            }\n            trails[a.trail[numberOfCities - 1]][a.trail[0]] += contribution;\n        }\n    }\n\n    /**\n     * Update the best solution\n     */\n    private void updateBest() {\n        if (bestTourOrder == null) {\n            bestTourOrder = ants.get(0).trail;\n            bestTourLength = ants.get(0)\n                .trailLength(graph);\n        }\n        for (Ant a : ants) {\n            if (a.trailLength(graph) < bestTourLength) {\n                bestTourLength = a.trailLength(graph);\n                bestTourOrder = a.trail.clone();\n            }\n        }\n    }\n\n    /**\n     * Clear trails after simulation\n     */\n    private void clearTrails() {\n        IntStream.range(0, numberOfCities)\n            .forEach(i -> {\n                IntStream.range(0, numberOfCities)\n                    .forEach(j -> trails[i][j] = c);\n            });\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms;\n\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.algorithms.ga.ant_colony.AntColonyOptimization;\n\nclass AntColonyOptimizationLongRunningUnitTest {\n\n    @Test\n    void testGenerateRandomMatrix() {\n        AntColonyOptimization antTSP = new AntColonyOptimization(5);\n        assertNotNull(antTSP.generateRandomMatrix(5));\n    }\n\n    @Test\n    void testStartAntOptimization() {\n        AntColonyOptimization antTSP = new AntColonyOptimization(5);\n        assertNotNull(antTSP.solve());\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.hillclimbing;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class State {\n    private List<Stack<String>> state;\n    private int heuristics;\n\n    public State(List<Stack<String>> state) {\n        this.state = state;\n    }\n\n    State(List<Stack<String>> state, int heuristics) {\n        this.state = state;\n        this.heuristics = heuristics;\n    }\n\n    State(State state) {\n        if (state != null) {\n            this.state = new ArrayList<>();\n            for (Stack s : state.getState()) {\n                Stack s1;\n                s1 = (Stack) s.clone();\n                this.state.add(s1);\n            }\n            this.heuristics = state.getHeuristics();\n        }\n    }\n\n    public List<Stack<String>> getState() {\n        return state;\n    }\n\n    public int getHeuristics() {\n        return heuristics;\n    }\n\n    public void setHeuristics(int heuristics) {\n        this.heuristics = heuristics;\n    }\n}", "test_case": "package com.baeldung.algorithms;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.algorithms.automata.*;\n\nclass RtFiniteStateMachineLongRunningUnitTest {\n\n    @Test\n    void acceptsSimplePair() {\n        String json = \"{\\\"key\\\":\\\"value\\\"}\";\n        FiniteStateMachine machine = this.buildJsonStateMachine();\n        for (int i = 0; i < json.length(); i++) {\n            machine = machine.switchState(String.valueOf(json.charAt(i)));\n        }\n        assertTrue(machine.canStop());\n    }\n\n    @Test\n    void acceptsMorePairs() {\n        String json = \"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\"}\";\n        FiniteStateMachine machine = this.buildJsonStateMachine();\n        for (int i = 0; i < json.length(); i++) {\n            machine = machine.switchState(String.valueOf(json.charAt(i)));\n        }\n        assertTrue(machine.canStop());\n    }\n\n    @Test\n    void missingColon() {\n        String json = \"{\\\"key\\\"\\\"value\\\"}\";\n        assertThrows(IllegalArgumentException.class, () -> {\n            FiniteStateMachine machine = this.buildJsonStateMachine();\n            for (int i = 0; i < json.length(); i++) {\n                machine = machine.switchState(String.valueOf(json.charAt(i)));\n            }\n        });\n    }\n\n    /**\n     * Builds a finite state machine to validate a simple\n     * Json object.\n     * @return\n     */\n    private FiniteStateMachine buildJsonStateMachine() {\n        State first = new RtState();\n        State second = new RtState();\n        State third = new RtState();\n        State fourth = new RtState();\n        State fifth = new RtState();\n        State sixth = new RtState();\n        State seventh = new RtState();\n        State eighth = new RtState(true);\n\n        first.with(new RtTransition(\"{\", second));\n        second.with(new RtTransition(\"\\\"\", third));\n        //Add transitions with chars 0-9 and a-z\n        for (int i = 0; i < 26; i++) {\n            if (i < 10) {\n                third = third.with(new RtTransition(String.valueOf(i), third));\n                sixth = sixth.with(new RtTransition(String.valueOf(i), sixth));\n            }\n            third = third.with(new RtTransition(String.valueOf((char) ('a' + i)), third));\n            sixth = sixth.with(new RtTransition(String.valueOf((char) ('a' + i)), sixth));\n        }\n        third.with(new RtTransition(\"\\\"\", fourth));\n        fourth.with(new RtTransition(\":\", fifth));\n        fifth.with(new RtTransition(\"\\\"\", sixth));\n        sixth.with(new RtTransition(\"\\\"\", seventh));\n        seventh.with(new RtTransition(\",\", second));\n        seventh.with(new RtTransition(\"}\", eighth));\n        return new RtFiniteStateMachine(first);\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.hillclimbing;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.Stack;\n\npublic class HillClimbing {\n    public static void main(String[] args) {\n        HillClimbing hillClimbing = new HillClimbing();\n        String blockArr[] = { \"B\", \"C\", \"D\", \"A\" };\n        Stack<String> startState = hillClimbing.getStackWithValues(blockArr);\n        String goalBlockArr[] = { \"A\", \"B\", \"C\", \"D\" };\n        Stack<String> goalState = hillClimbing.getStackWithValues(goalBlockArr);\n        try {\n            List<State> solutionSequence = hillClimbing.getRouteWithHillClimbing(startState, goalState);\n            solutionSequence.forEach(HillClimbing::printEachStep);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void printEachStep(State state) {\n        List<Stack<String>> stackList = state.getState();\n        System.out.println(\"----------------\");\n        stackList.forEach(stack -> {\n            while (!stack.isEmpty()) {\n                System.out.println(stack.pop());\n            }\n            System.out.println(\" \");\n        });\n    }\n\n    private Stack<String> getStackWithValues(String[] blocks) {\n        Stack<String> stack = new Stack<>();\n        for (String block : blocks)\n            stack.push(block);\n        return stack;\n    }\n\n    /**\n     * This method prepares path from init state to goal state\n     */\n    public List<State> getRouteWithHillClimbing(Stack<String> initStateStack, Stack<String> goalStateStack) throws Exception {\n        List<Stack<String>> initStateStackList = new ArrayList<>();\n        initStateStackList.add(initStateStack);\n        int initStateHeuristics = getHeuristicsValue(initStateStackList, goalStateStack);\n        State initState = new State(initStateStackList, initStateHeuristics);\n\n        List<State> resultPath = new ArrayList<>();\n        resultPath.add(new State(initState));\n\n        State currentState = initState;\n        boolean noStateFound = false;\n        while (!currentState.getState()\n            .get(0)\n            .equals(goalStateStack) || noStateFound) {\n            noStateFound = true;\n            State nextState = findNextState(currentState, goalStateStack);\n            if (nextState != null) {\n                noStateFound = false;\n                currentState = nextState;\n                resultPath.add(new State(nextState));\n            }\n        }\n\n        return resultPath;\n    }\n\n    /**\n     * This method finds new state from current state based on goal and\n     * heuristics\n     */\n    public State findNextState(State currentState, Stack<String> goalStateStack) {\n        List<Stack<String>> listOfStacks = currentState.getState();\n        int currentStateHeuristics = currentState.getHeuristics();\n\n        return listOfStacks.stream()\n            .map(stack -> {\n                return applyOperationsOnState(listOfStacks, stack, currentStateHeuristics, goalStateStack);\n            })\n            .filter(Objects::nonNull)\n            .findFirst()\n          .orElse(null);\n    }\n\n    /**\n     * This method applies operations on the current state to get a new state\n     */\n    public State applyOperationsOnState(List<Stack<String>> listOfStacks, Stack<String> stack, int currentStateHeuristics, Stack<String> goalStateStack) {\n        State tempState;\n        List<Stack<String>> tempStackList = new ArrayList<>(listOfStacks);\n        String block = stack.pop();\n        if (stack.size() == 0)\n            tempStackList.remove(stack);\n        tempState = pushElementToNewStack(tempStackList, block, currentStateHeuristics, goalStateStack);\n        if (tempState == null) {\n            tempState = pushElementToExistingStacks(stack, tempStackList, block, currentStateHeuristics, goalStateStack);\n        }\n        if (tempState == null)\n            stack.push(block);\n        return tempState;\n    }\n    \n    /**\n     * Operation to be applied on a state in order to find new states. This\n     * operation pushes an element into a new stack\n     */\n    private State pushElementToNewStack(List<Stack<String>> currentStackList, String block, int currentStateHeuristics, Stack<String> goalStateStack) {\n        State newState = null;\n        Stack<String> newStack = new Stack<>();\n        newStack.push(block);\n\n        currentStackList.add(newStack);\n        int newStateHeuristics = getHeuristicsValue(currentStackList, goalStateStack);\n        if (newStateHeuristics > currentStateHeuristics) {\n            newState = new State(currentStackList, newStateHeuristics);\n        } else {\n            currentStackList.remove(newStack);\n        }\n        return newState;\n    }\n\n    /**\n     * Operation to be applied on a state in order to find new states. This\n     * operation pushes an element into one of the other stacks to explore new\n     * states\n     */\n    private State pushElementToExistingStacks(Stack currentStack, List<Stack<String>> currentStackList, String block, int currentStateHeuristics, Stack<String> goalStateStack) {\n\n        Optional<State> newState = currentStackList.stream()\n            .filter(stack -> stack != currentStack)\n            .map(stack -> {\n                return pushElementToStack(stack, block, currentStackList, currentStateHeuristics, goalStateStack);\n            })\n            .filter(Objects::nonNull)\n            .findFirst();\n\n        return newState.orElse(null);\n    }\n    \n    /**\n     * This method pushes a block to the stack and returns new state if its closer to goal\n     */\n    private State pushElementToStack(Stack stack, String block, List<Stack<String>> currentStackList, int currentStateHeuristics, Stack<String> goalStateStack) {\n        stack.push(block);\n        int newStateHeuristics = getHeuristicsValue(currentStackList, goalStateStack);\n        if (newStateHeuristics > currentStateHeuristics) {\n            return new State(currentStackList, newStateHeuristics);\n        }\n        stack.pop();\n        return null;\n    }\n\n    /**\n     * This method returns heuristics value for given state with respect to goal\n     * state\n     */\n    public int getHeuristicsValue(List<Stack<String>> currentState, Stack<String> goalStateStack) {\n        Integer heuristicValue;\n        heuristicValue = currentState.stream()\n            .mapToInt(stack -> {\n                return getHeuristicsValueForStack(stack, currentState, goalStateStack);\n            })\n            .sum();\n        return heuristicValue;\n    }\n    \n    /**\n     * This method returns heuristics value for a particular stack\n     */\n    public int getHeuristicsValueForStack(Stack<String> stack, List<Stack<String>> currentState, Stack<String> goalStateStack) {\n        int stackHeuristics = 0;\n        boolean isPositioneCorrect = true;\n        int goalStartIndex = 0;\n        for (String currentBlock : stack) {\n            if (isPositioneCorrect && currentBlock.equals(goalStateStack.get(goalStartIndex))) {\n                stackHeuristics += goalStartIndex;\n            } else {\n                stackHeuristics -= goalStartIndex;\n                isPositioneCorrect = false;\n            }\n            goalStartIndex++;\n        }\n        return stackHeuristics;\n    }\n\n}", "test_case": "package com.baeldung.algorithms;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.algorithms.hillclimbing.HillClimbing;\nimport com.baeldung.algorithms.hillclimbing.State;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\n\nclass HillClimbingAlgorithmUnitTest {\n    private Stack<String> initStack;\n    private Stack<String> goalStack;\n\n    @BeforeEach\n    public void initStacks() {\n        String blockArr[] = { \"B\", \"C\", \"D\", \"A\" };\n        String goalBlockArr[] = { \"A\", \"B\", \"C\", \"D\" };\n        initStack = new Stack<>();\n        for (String block : blockArr)\n            initStack.push(block);\n        goalStack = new Stack<>();\n        for (String block : goalBlockArr)\n            goalStack.push(block);\n    }\n\n    @Test\n    void givenInitAndGoalState_whenGetPathWithHillClimbing_thenPathFound() {\n        HillClimbing hillClimbing = new HillClimbing();\n\n        List<State> path;\n        try {\n            path = hillClimbing.getRouteWithHillClimbing(initStack, goalStack);\n            assertNotNull(path);\n            assertEquals(path.get(path.size() - 1)\n                .getState()\n                .get(0), goalStack);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Test\n    void givenCurrentState_whenFindNextState_thenBetterHeuristics() {\n        HillClimbing hillClimbing = new HillClimbing();\n        List<Stack<String>> initList = new ArrayList<>();\n        initList.add(initStack);\n        State currentState = new State(initList);\n        currentState.setHeuristics(hillClimbing.getHeuristicsValue(initList, goalStack));\n        State nextState = hillClimbing.findNextState(currentState, goalStack);\n        assertTrue(nextState.getHeuristics() > currentState.getHeuristics());\n    }\n}"}
{"code_source": "package com.baeldung.algorithms.kthlargest;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.stream.IntStream;\n\npublic class FindKthLargest {\n\n    public int findKthLargestBySorting(Integer[] arr, int k) {\n        Arrays.sort(arr);\n        int targetIndex = arr.length - k;\n        return arr[targetIndex];\n    }\n\n    public int findKthLargestBySortingDesc(Integer[] arr, int k) {\n        Arrays.sort(arr, Collections.reverseOrder());\n        return arr[k - 1];\n    }\n\n    public int findKthElementByQuickSelect(Integer[] arr, int left, int right, int k) {\n        if (k >= 0 && k <= right - left + 1) {\n            int pos = partition(arr, left, right);\n            if (pos - left == k) {\n                return arr[pos];\n            }\n            if (pos - left > k) {\n                return findKthElementByQuickSelect(arr, left, pos - 1, k);\n            }\n            return findKthElementByQuickSelect(arr, pos + 1, right, k - pos + left - 1);\n        }\n        return 0;\n    }\n\n    public int findKthElementByQuickSelectWithIterativePartition(Integer[] arr, int left, int right, int k) {\n        if (k >= 0 && k <= right - left + 1) {\n            int pos = partitionIterative(arr, left, right);\n            if (pos - left == k) {\n                return arr[pos];\n            }\n            if (pos - left > k) {\n                return findKthElementByQuickSelectWithIterativePartition(arr, left, pos - 1, k);\n            }\n            return findKthElementByQuickSelectWithIterativePartition(arr, pos + 1, right, k - pos + left - 1);\n        }\n        return 0;\n    }\n\n    private int partition(Integer[] arr, int left, int right) {\n        int pivot = arr[right];\n        Integer[] leftArr;\n        Integer[] rightArr;\n\n        leftArr = IntStream.range(left, right)\n            .filter(i -> arr[i] < pivot)\n            .map(i -> arr[i])\n            .boxed()\n            .toArray(Integer[]::new);\n\n        rightArr = IntStream.range(left, right)\n            .filter(i -> arr[i] > pivot)\n            .map(i -> arr[i])\n            .boxed()\n            .toArray(Integer[]::new);\n\n        int leftArraySize = leftArr.length;\n        System.arraycopy(leftArr, 0, arr, left, leftArraySize);\n        arr[leftArraySize + left] = pivot;\n        System.arraycopy(rightArr, 0, arr, left + leftArraySize + 1, rightArr.length);\n\n        return left + leftArraySize;\n    }\n\n    private int partitionIterative(Integer[] arr, int left, int right) {\n        int pivot = arr[right], i = left;\n        for (int j = left; j <= right - 1; j++) {\n            if (arr[j] <= pivot) {\n                swap(arr, i, j);\n                i++;\n            }\n        }\n        swap(arr, i, right);\n        return i;\n    }\n\n    public int findKthElementByRandomizedQuickSelect(Integer[] arr, int left, int right, int k) {\n        if (k >= 0 && k <= right - left + 1) {\n            int pos = randomPartition(arr, left, right);\n            if (pos - left == k) {\n                return arr[pos];\n            }\n            if (pos - left > k) {\n                return findKthElementByRandomizedQuickSelect(arr, left, pos - 1, k);\n            }\n            return findKthElementByRandomizedQuickSelect(arr, pos + 1, right, k - pos + left - 1);\n        }\n        return 0;\n    }\n\n    private int randomPartition(Integer arr[], int left, int right) {\n        int n = right - left + 1;\n        int pivot = (int) (Math.random() * n);\n        swap(arr, left + pivot, right);\n        return partition(arr, left, right);\n    }\n\n    private void swap(Integer[] arr, int n1, int n2) {\n        int temp = arr[n2];\n        arr[n2] = arr[n1];\n        arr[n1] = temp;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.kthlargest;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nclass FindKthLargestUnitTest {\n\n    private FindKthLargest findKthLargest;\n    private Integer[] arr = { 3, 7, 1, 2, 8, 10, 4, 5, 6, 9 };\n\n    @BeforeEach\n    public void setup() {\n        findKthLargest = new FindKthLargest();\n    }\n\n    @Test\n    void givenIntArray_whenFindKthLargestBySorting_thenGetResult() {\n        int k = 3;\n        assertThat(findKthLargest.findKthLargestBySorting(arr, k)).isEqualTo(8);\n    }\n\n    @Test\n    void givenIntArray_whenFindKthLargestBySortingDesc_thenGetResult() {\n        int k = 3;\n        assertThat(findKthLargest.findKthLargestBySortingDesc(arr, k)).isEqualTo(8);\n    }\n\n    @Test\n    void givenIntArray_whenFindKthLargestByQuickSelect_thenGetResult() {\n        int k = 3;\n        int kthLargest = arr.length - k;\n        assertThat(findKthLargest.findKthElementByQuickSelect(arr, 0, arr.length - 1, kthLargest)).isEqualTo(8);\n    }\n\n    @Test\n    void givenIntArray_whenFindKthElementByQuickSelectIterative_thenGetResult() {\n        int k = 3;\n        int kthLargest = arr.length - k;\n        assertThat(findKthLargest.findKthElementByQuickSelectWithIterativePartition(arr, 0, arr.length - 1, kthLargest)).isEqualTo(8);\n    }\n\n    @Test\n    void givenIntArray_whenFindKthSmallestByQuickSelect_thenGetResult() {\n        int k = 3;\n        assertThat(findKthLargest.findKthElementByQuickSelect(arr, 0, arr.length - 1, k - 1)).isEqualTo(3);\n    }\n\n    @Test\n    void givenIntArray_whenFindKthLargestByRandomizedQuickSelect_thenGetResult() {\n        int k = 3;\n        int kthLargest = arr.length - k;\n        assertThat(findKthLargest.findKthElementByRandomizedQuickSelect(arr, 0, arr.length - 1, kthLargest)).isEqualTo(8);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.astar;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.stream.Collectors;\n\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\npublic class RouteFinder<T extends GraphNode> {\n    private final Graph<T> graph;\n    private final Scorer<T> nextNodeScorer;\n    private final Scorer<T> targetScorer;\n\n    public RouteFinder(Graph<T> graph, Scorer<T> nextNodeScorer, Scorer<T> targetScorer) {\n        this.graph = graph;\n        this.nextNodeScorer = nextNodeScorer;\n        this.targetScorer = targetScorer;\n    }\n\n    public List<T> findRoute(T from, T to) {\n        Map<T, RouteNode<T>> allNodes = new HashMap<>();\n        Queue<RouteNode> openSet = new PriorityQueue<>();\n\n        RouteNode<T> start = new RouteNode<>(from, null, 0d, targetScorer.computeCost(from, to));\n        allNodes.put(from, start);\n        openSet.add(start);\n\n        while (!openSet.isEmpty()) {\n            log.debug(\"Open Set contains: \" + openSet.stream().map(RouteNode::getCurrent).collect(Collectors.toSet()));\n            RouteNode<T> next = openSet.poll();\n            log.debug(\"Looking at node: \" + next);\n            if (next.getCurrent().equals(to)) {\n                log.debug(\"Found our destination!\");\n\n                List<T> route = new ArrayList<>();\n                RouteNode<T> current = next;\n                do {\n                    route.add(0, current.getCurrent());\n                    current = allNodes.get(current.getPrevious());\n                } while (current != null);\n\n                log.debug(\"Route: \" + route);\n                return route;\n            }\n\n            graph.getConnections(next.getCurrent()).forEach(connection -> {\n                double newScore = next.getRouteScore() + nextNodeScorer.computeCost(next.getCurrent(), connection);\n                RouteNode<T> nextNode = allNodes.getOrDefault(connection, new RouteNode<>(connection));\n                allNodes.put(connection, nextNode);\n\n                if (nextNode.getRouteScore() > newScore) {\n                    nextNode.setPrevious(next.getCurrent());\n                    nextNode.setRouteScore(newScore);\n                    nextNode.setEstimatedScore(newScore + targetScorer.computeCost(connection, to));\n                    openSet.add(nextNode);\n                    log.debug(\"Found a better route to node: \" + nextNode);\n                }\n            });\n        }\n\n        throw new IllegalStateException(\"No route found\");\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.astar.underground;\n\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.algorithms.astar.Graph;\nimport com.baeldung.algorithms.astar.RouteFinder;\n\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\nclass RouteFinderIntegrationTest {\n\n    private Graph<Station> underground;\n\n    private RouteFinder<Station> routeFinder;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        Set<Station> stations = new HashSet<>();\n        Map<String, Set<String>> connections = new HashMap<>();\n\n        stations.add(new Station(\"1\", \"Acton Town\", 51.5028, -0.2801));\n        stations.add(new Station(\"2\", \"Aldgate\", 51.5143, -0.0755));\n        stations.add(new Station(\"3\", \"Aldgate East\", 51.5154, -0.0726));\n        stations.add(new Station(\"4\", \"All Saints\", 51.5107, -0.013));\n        stations.add(new Station(\"5\", \"Alperton\", 51.5407, -0.2997));\n        stations.add(new Station(\"6\", \"Amersham\", 51.6736, -0.607));\n        stations.add(new Station(\"7\", \"Angel\", 51.5322, -0.1058));\n        stations.add(new Station(\"8\", \"Archway\", 51.5653, -0.1353));\n        stations.add(new Station(\"9\", \"Arnos Grove\", 51.6164, -0.1331));\n        stations.add(new Station(\"10\", \"Arsenal\", 51.5586, -0.1059));\n        stations.add(new Station(\"11\", \"Baker Street\", 51.5226, -0.1571));\n        stations.add(new Station(\"12\", \"Balham\", 51.4431, -0.1525));\n        stations.add(new Station(\"13\", \"Bank\", 51.5133, -0.0886));\n        stations.add(new Station(\"14\", \"Barbican\", 51.5204, -0.0979));\n        stations.add(new Station(\"15\", \"Barking\", 51.5396, 0.081));\n        stations.add(new Station(\"16\", \"Barkingside\", 51.5856, 0.0887));\n        stations.add(new Station(\"17\", \"Barons Court\", 51.4905, -0.2139));\n        stations.add(new Station(\"18\", \"Bayswater\", 51.5121, -0.1879));\n        stations.add(new Station(\"19\", \"Beckton\", 51.5148, 0.0613));\n        stations.add(new Station(\"20\", \"Beckton Park\", 51.5087, 0.055));\n        stations.add(new Station(\"21\", \"Becontree\", 51.5403, 0.127));\n        stations.add(new Station(\"22\", \"Belsize Park\", 51.5504, -0.1642));\n        stations.add(new Station(\"23\", \"Bermondsey\", 51.4979, -0.0637));\n        stations.add(new Station(\"24\", \"Bethnal Green\", 51.527, -0.0549));\n        stations.add(new Station(\"25\", \"Blackfriars\", 51.512, -0.1031));\n        stations.add(new Station(\"26\", \"Blackhorse Road\", 51.5867, -0.0417));\n        stations.add(new Station(\"27\", \"Blackwall\", 51.5079, -0.0066));\n        stations.add(new Station(\"28\", \"Bond Street\", 51.5142, -0.1494));\n        stations.add(new Station(\"29\", \"Borough\", 51.5011, -0.0943));\n        stations.add(new Station(\"30\", \"Boston Manor\", 51.4956, -0.325));\n        stations.add(new Station(\"31\", \"Bounds Green\", 51.6071, -0.1243));\n        stations.add(new Station(\"32\", \"Bow Church\", 51.5273, -0.0208));\n        stations.add(new Station(\"33\", \"Bow Road\", 51.5269, -0.0247));\n        stations.add(new Station(\"34\", \"Brent Cross\", 51.5766, -0.2136));\n        stations.add(new Station(\"35\", \"Brixton\", 51.4627, -0.1145));\n        stations.add(new Station(\"36\", \"Bromley-By-Bow\", 51.5248, -0.0119));\n        stations.add(new Station(\"37\", \"Buckhurst Hill\", 51.6266, 0.0471));\n        stations.add(new Station(\"38\", \"Burnt Oak\", 51.6028, -0.2641));\n        stations.add(new Station(\"39\", \"Caledonian Road\", 51.5481, -0.1188));\n        stations.add(new Station(\"40\", \"Camden Town\", 51.5392, -0.1426));\n        stations.add(new Station(\"41\", \"Canada Water\", 51.4982, -0.0502));\n        stations.add(new Station(\"42\", \"Canary Wharf\", 51.5051, -0.0209));\n        stations.add(new Station(\"43\", \"Canning Town\", 51.5147, 0.0082));\n        stations.add(new Station(\"44\", \"Cannon Street\", 51.5113, -0.0904));\n        stations.add(new Station(\"45\", \"Canons Park\", 51.6078, -0.2947));\n        stations.add(new Station(\"46\", \"Chalfont & Latimer\", 51.6679, -0.561));\n        stations.add(new Station(\"47\", \"Chalk Farm\", 51.5441, -0.1538));\n        stations.add(new Station(\"48\", \"Chancery Lane\", 51.5185, -0.1111));\n        stations.add(new Station(\"49\", \"Charing Cross\", 51.508, -0.1247));\n        stations.add(new Station(\"50\", \"Chesham\", 51.7052, -0.611));\n        stations.add(new Station(\"51\", \"Chigwell\", 51.6177, 0.0755));\n        stations.add(new Station(\"52\", \"Chiswick Park\", 51.4946, -0.2678));\n        stations.add(new Station(\"53\", \"Chorleywood\", 51.6543, -0.5183));\n        stations.add(new Station(\"54\", \"Clapham Common\", 51.4618, -0.1384));\n        stations.add(new Station(\"55\", \"Clapham North\", 51.4649, -0.1299));\n        stations.add(new Station(\"56\", \"Clapham South\", 51.4527, -0.148));\n        stations.add(new Station(\"57\", \"Cockfosters\", 51.6517, -0.1496));\n        stations.add(new Station(\"58\", \"Colindale\", 51.5955, -0.2502));\n        stations.add(new Station(\"59\", \"Colliers Wood\", 51.418, -0.1778));\n        stations.add(new Station(\"60\", \"Covent Garden\", 51.5129, -0.1243));\n        stations.add(new Station(\"61\", \"Crossharbour & London Arena\", 51.4957, -0.0144));\n        stations.add(new Station(\"62\", \"Croxley\", 51.647, -0.4412));\n        stations.add(new Station(\"63\", \"Custom House\", 51.5095, 0.0276));\n        stations.add(new Station(\"64\", \"Cutty Sark\", 51.4827, -0.0096));\n        stations.add(new Station(\"65\", \"Cyprus\", 51.5085, 0.064));\n        stations.add(new Station(\"66\", \"Dagenham East\", 51.5443, 0.1655));\n        stations.add(new Station(\"67\", \"Dagenham Heathway\", 51.5417, 0.1469));\n        stations.add(new Station(\"68\", \"Debden\", 51.6455, 0.0838));\n        stations.add(new Station(\"69\", \"Deptford Bridge\", 51.474, -0.0216));\n        stations.add(new Station(\"70\", \"Devons Road\", 51.5223, -0.0173));\n        stations.add(new Station(\"71\", \"Dollis Hill\", 51.552, -0.2387));\n        stations.add(new Station(\"72\", \"Ealing Broadway\", 51.5152, -0.3017));\n        stations.add(new Station(\"73\", \"Ealing Common\", 51.5101, -0.2882));\n        stations.add(new Station(\"74\", \"Earl's Court\", 51.492, -0.1973));\n        stations.add(new Station(\"75\", \"Eastcote\", 51.5765, -0.397));\n        stations.add(new Station(\"76\", \"East Acton\", 51.5168, -0.2474));\n        stations.add(new Station(\"77\", \"East Finchley\", 51.5874, -0.165));\n        stations.add(new Station(\"78\", \"East Ham\", 51.5394, 0.0518));\n        stations.add(new Station(\"79\", \"East India\", 51.5093, -0.0021));\n        stations.add(new Station(\"80\", \"East Putney\", 51.4586, -0.2112));\n        stations.add(new Station(\"81\", \"Edgware\", 51.6137, -0.275));\n        stations.add(new Station(\"82\", \"Edgware Road (B)\", 51.5199, -0.1679));\n        stations.add(new Station(\"83\", \"Edgware Road (C)\", 51.5203, -0.17));\n        stations.add(new Station(\"84\", \"Elephant & Castle\", 51.4943, -0.1001));\n        stations.add(new Station(\"85\", \"Elm Park\", 51.5496, 0.1977));\n        stations.add(new Station(\"86\", \"Elverson Road\", 51.4693, -0.0174));\n        stations.add(new Station(\"87\", \"Embankment\", 51.5074, -0.1223));\n        stations.add(new Station(\"88\", \"Epping\", 51.6937, 0.1139));\n        stations.add(new Station(\"89\", \"Euston\", 51.5282, -0.1337));\n        stations.add(new Station(\"90\", \"Euston Square\", 51.526, -0.1359));\n        stations.add(new Station(\"91\", \"Fairlop\", 51.596, 0.0912));\n        stations.add(new Station(\"92\", \"Farringdon\", 51.5203, -0.1053));\n        stations.add(new Station(\"93\", \"Finchley Central\", 51.6012, -0.1932));\n        stations.add(new Station(\"94\", \"Finchley Road\", 51.5472, -0.1803));\n        stations.add(new Station(\"95\", \"Finsbury Park\", 51.5642, -0.1065));\n        stations.add(new Station(\"96\", \"Fulham Broadway\", 51.4804, -0.195));\n        stations.add(new Station(\"97\", \"Gallions Reach\", 51.5096, 0.0716));\n        stations.add(new Station(\"98\", \"Gants Hill\", 51.5765, 0.0663));\n        stations.add(new Station(\"99\", \"Gloucester Road\", 51.4945, -0.1829));\n        stations.add(new Station(\"100\", \"Golders Green\", 51.5724, -0.1941));\n        stations.add(new Station(\"101\", \"Goldhawk Road\", 51.5018, -0.2267));\n        stations.add(new Station(\"102\", \"Goodge Street\", 51.5205, -0.1347));\n        stations.add(new Station(\"103\", \"Grange Hill\", 51.6132, 0.0923));\n        stations.add(new Station(\"104\", \"Great Portland Street\", 51.5238, -0.1439));\n        stations.add(new Station(\"105\", \"Greenford\", 51.5423, -0.3456));\n        stations.add(new Station(\"106\", \"Greenwich\", 51.4781, -0.0149));\n        stations.add(new Station(\"107\", \"Green Park\", 51.5067, -0.1428));\n        stations.add(new Station(\"108\", \"Gunnersbury\", 51.4915, -0.2754));\n        stations.add(new Station(\"109\", \"Hainault\", 51.603, 0.0933));\n        stations.add(new Station(\"110\", \"Hammersmith\", 51.4936, -0.2251));\n        stations.add(new Station(\"111\", \"Hampstead\", 51.5568, -0.178));\n        stations.add(new Station(\"112\", \"Hanger Lane\", 51.5302, -0.2933));\n        stations.add(new Station(\"113\", \"Harlesden\", 51.5362, -0.2575));\n        stations.add(new Station(\"114\", \"Harrow & Wealdston\", 51.5925, -0.3351));\n        stations.add(new Station(\"115\", \"Harrow-on-the-Hill\", 51.5793, -0.3366));\n        stations.add(new Station(\"116\", \"Hatton Cross\", 51.4669, -0.4227));\n        stations.add(new Station(\"117\", \"Heathrow Terminals 1, 2 & 3\", 51.4713, -0.4524));\n        stations.add(new Station(\"118\", \"Heathrow Terminal 4\", 51.4598, -0.4476));\n        stations.add(new Station(\"119\", \"Hendon Central\", 51.5829, -0.2259));\n        stations.add(new Station(\"120\", \"Heron Quays\", 51.5033, -0.0215));\n        stations.add(new Station(\"121\", \"High Barnet\", 51.6503, -0.1943));\n        stations.add(new Station(\"122\", \"High Street Kensington\", 51.5009, -0.1925));\n        stations.add(new Station(\"123\", \"Highbury & Islington\", 51.546, -0.104));\n        stations.add(new Station(\"124\", \"Highgate\", 51.5777, -0.1458));\n        stations.add(new Station(\"125\", \"Hillingdon\", 51.5538, -0.4499));\n        stations.add(new Station(\"126\", \"Holborn\", 51.5174, -0.12));\n        stations.add(new Station(\"127\", \"Holland Park\", 51.5075, -0.206));\n        stations.add(new Station(\"128\", \"Holloway Road\", 51.5526, -0.1132));\n        stations.add(new Station(\"129\", \"Hornchurch\", 51.5539, 0.2184));\n        stations.add(new Station(\"130\", \"Hounslow Central\", 51.4713, -0.3665));\n        stations.add(new Station(\"131\", \"Hounslow East\", 51.4733, -0.3564));\n        stations.add(new Station(\"132\", \"Hounslow West\", 51.4734, -0.3855));\n        stations.add(new Station(\"133\", \"Hyde Park Corner\", 51.5027, -0.1527));\n        stations.add(new Station(\"134\", \"Ickenham\", 51.5619, -0.4421));\n        stations.add(new Station(\"135\", \"Island Gardens\", 51.4871, -0.0101));\n        stations.add(new Station(\"136\", \"Kennington\", 51.4884, -0.1053));\n        stations.add(new Station(\"137\", \"Kensal Green\", 51.5304, -0.225));\n        stations.add(new Station(\"138\", \"Kensington (Olympia)\", 51.4983, -0.2106));\n        stations.add(new Station(\"139\", \"Kentish Town\", 51.5507, -0.1402));\n        stations.add(new Station(\"140\", \"Kenton\", 51.5816, -0.3162));\n        stations.add(new Station(\"141\", \"Kew Gardens\", 51.477, -0.285));\n        stations.add(new Station(\"142\", \"Kilburn\", 51.5471, -0.2047));\n        stations.add(new Station(\"143\", \"Kilburn Park\", 51.5351, -0.1939));\n        stations.add(new Station(\"144\", \"Kingsbury\", 51.5846, -0.2786));\n        stations.add(new Station(\"145\", \"King's Cross St. Pancras\", 51.5308, -0.1238));\n        stations.add(new Station(\"146\", \"Knightsbridge\", 51.5015, -0.1607));\n        stations.add(new Station(\"147\", \"Ladbroke Grove\", 51.5172, -0.2107));\n        stations.add(new Station(\"148\", \"Lambeth North\", 51.4991, -0.1115));\n        stations.add(new Station(\"149\", \"Lancaster Gate\", 51.5119, -0.1756));\n        stations.add(new Station(\"150\", \"Latimer Road\", 51.5139, -0.2172));\n        stations.add(new Station(\"151\", \"Leicester Square\", 51.5113, -0.1281));\n        stations.add(new Station(\"152\", \"Lewisham\", 51.4657, -0.0142));\n        stations.add(new Station(\"153\", \"Leyton\", 51.5566, -0.0053));\n        stations.add(new Station(\"154\", \"Leytonstone\", 51.5683, 0.0083));\n        stations.add(new Station(\"155\", \"Limehouse\", 51.5123, -0.0396));\n        stations.add(new Station(\"156\", \"Liverpool Street\", 51.5178, -0.0823));\n        stations.add(new Station(\"157\", \"London Bridge\", 51.5052, -0.0864));\n        stations.add(new Station(\"158\", \"Loughton\", 51.6412, 0.0558));\n        stations.add(new Station(\"159\", \"Maida Vale\", 51.53, -0.1854));\n        stations.add(new Station(\"160\", \"Manor House\", 51.5712, -0.0958));\n        stations.add(new Station(\"161\", \"Mansion House\", 51.5122, -0.094));\n        stations.add(new Station(\"162\", \"Marble Arch\", 51.5136, -0.1586));\n        stations.add(new Station(\"163\", \"Marylebone\", 51.5225, -0.1631));\n        stations.add(new Station(\"164\", \"Mile End\", 51.5249, -0.0332));\n        stations.add(new Station(\"165\", \"Mill Hill East\", 51.6082, -0.2103));\n        stations.add(new Station(\"166\", \"Monument\", 51.5108, -0.0863));\n        stations.add(new Station(\"167\", \"Moorgate\", 51.5186, -0.0886));\n        stations.add(new Station(\"168\", \"Moor Park\", 51.6294, -0.432));\n        stations.add(new Station(\"169\", \"Morden\", 51.4022, -0.1948));\n        stations.add(new Station(\"170\", \"Mornington Crescent\", 51.5342, -0.1387));\n        stations.add(new Station(\"171\", \"Mudchute\", 51.4902, -0.0145));\n        stations.add(new Station(\"172\", \"Neasden\", 51.5542, -0.2503));\n        stations.add(new Station(\"173\", \"Newbury Park\", 51.5756, 0.0899));\n        stations.add(new Station(\"174\", \"New Cross\", 51.4767, -0.0327));\n        stations.add(new Station(\"175\", \"New Cross Gate\", 51.4757, -0.0402));\n        stations.add(new Station(\"176\", \"Northfields\", 51.4995, -0.3142));\n        stations.add(new Station(\"177\", \"Northolt\", 51.5483, -0.3687));\n        stations.add(new Station(\"178\", \"Northwick Park\", 51.5784, -0.3184));\n        stations.add(new Station(\"179\", \"Northwood\", 51.6111, -0.424));\n        stations.add(new Station(\"180\", \"Northwood Hills\", 51.6004, -0.4092));\n        stations.add(new Station(\"181\", \"North Acton\", 51.5237, -0.2597));\n        stations.add(new Station(\"182\", \"North Ealing\", 51.5175, -0.2887));\n        stations.add(new Station(\"183\", \"North Greenwich\", 51.5005, 0.0039));\n        stations.add(new Station(\"184\", \"North Harrow\", 51.5846, -0.3626));\n        stations.add(new Station(\"185\", \"North Wembley\", 51.5621, -0.3034));\n        stations.add(new Station(\"186\", \"Notting Hill Gate\", 51.5094, -0.1967));\n        stations.add(new Station(\"187\", \"Oakwood\", 51.6476, -0.1318));\n        stations.add(new Station(\"188\", \"Old Street\", 51.5263, -0.0873));\n        stations.add(new Station(\"189\", \"Osterley\", 51.4813, -0.3522));\n        stations.add(new Station(\"190\", \"Oval\", 51.4819, -0.113));\n        stations.add(new Station(\"191\", \"Oxford Circus\", 51.515, -0.1415));\n        stations.add(new Station(\"192\", \"Paddington\", 51.5154, -0.1755));\n        stations.add(new Station(\"193\", \"Park Royal\", 51.527, -0.2841));\n        stations.add(new Station(\"194\", \"Parsons Green\", 51.4753, -0.2011));\n        stations.add(new Station(\"195\", \"Perivale\", 51.5366, -0.3232));\n        stations.add(new Station(\"196\", \"Picadilly Circus\", 51.5098, -0.1342));\n        stations.add(new Station(\"197\", \"Pimlico\", 51.4893, -0.1334));\n        stations.add(new Station(\"198\", \"Pinner\", 51.5926, -0.3805));\n        stations.add(new Station(\"199\", \"Plaistow\", 51.5313, 0.0172));\n        stations.add(new Station(\"200\", \"Poplar\", 51.5077, -0.0173));\n        stations.add(new Station(\"201\", \"Preston Road\", 51.572, -0.2954));\n        stations.add(new Station(\"202\", \"Prince Regent\", 51.5093, 0.0336));\n        stations.add(new Station(\"203\", \"Pudding Mill Lane\", 51.5343, -0.0139));\n        stations.add(new Station(\"204\", \"Putney Bridge\", 51.4682, -0.2089));\n        stations.add(new Station(\"205\", \"Queen's Park\", 51.5341, -0.2047));\n        stations.add(new Station(\"206\", \"Queensbury\", 51.5942, -0.2861));\n        stations.add(new Station(\"207\", \"Queensway\", 51.5107, -0.1877));\n        stations.add(new Station(\"208\", \"Ravenscourt Park\", 51.4942, -0.2359));\n        stations.add(new Station(\"209\", \"Rayners Lane\", 51.5753, -0.3714));\n        stations.add(new Station(\"210\", \"Redbridge\", 51.5763, 0.0454));\n        stations.add(new Station(\"211\", \"Regent's Park\", 51.5234, -0.1466));\n        stations.add(new Station(\"212\", \"Richmond\", 51.4633, -0.3013));\n        stations.add(new Station(\"213\", \"Rickmansworth\", 51.6404, -0.4733));\n        stations.add(new Station(\"214\", \"Roding Valley\", 51.6171, 0.0439));\n        stations.add(new Station(\"215\", \"Rotherhithe\", 51.501, -0.0525));\n        stations.add(new Station(\"216\", \"Royal Albert\", 51.5084, 0.0465));\n        stations.add(new Station(\"217\", \"Royal Oak\", 51.519, -0.188));\n        stations.add(new Station(\"218\", \"Royal Victoria\", 51.5091, 0.0181));\n        stations.add(new Station(\"219\", \"Ruislip\", 51.5715, -0.4213));\n        stations.add(new Station(\"220\", \"Ruislip Gardens\", 51.5606, -0.4103));\n        stations.add(new Station(\"221\", \"Ruislip Manor\", 51.5732, -0.4125));\n        stations.add(new Station(\"222\", \"Russell Square\", 51.523, -0.1244));\n        stations.add(new Station(\"223\", \"Seven Sisters\", 51.5822, -0.0749));\n        stations.add(new Station(\"224\", \"Shadwell\", 51.5117, -0.056));\n        stations.add(new Station(\"225\", \"Shepherd's Bush (C)\", 51.5046, -0.2187));\n        stations.add(new Station(\"226\", \"Shepherd's Bush (H)\", 51.5058, -0.2265));\n        stations.add(new Station(\"227\", \"Shoreditch\", 51.5227, -0.0708));\n        stations.add(new Station(\"228\", \"Sloane Square\", 51.4924, -0.1565));\n        stations.add(new Station(\"229\", \"Snaresbrook\", 51.5808, 0.0216));\n        stations.add(new Station(\"230\", \"Southfields\", 51.4454, -0.2066));\n        stations.add(new Station(\"231\", \"Southgate\", 51.6322, -0.128));\n        stations.add(new Station(\"232\", \"Southwark\", 51.501, -0.1052));\n        stations.add(new Station(\"233\", \"South Ealing\", 51.5011, -0.3072));\n        stations.add(new Station(\"234\", \"South Harrow\", 51.5646, -0.3521));\n        stations.add(new Station(\"235\", \"South Kensington\", 51.4941, -0.1738));\n        stations.add(new Station(\"236\", \"South Kenton\", 51.5701, -0.3081));\n        stations.add(new Station(\"237\", \"South Quay\", 51.5007, -0.0191));\n        stations.add(new Station(\"238\", \"South Ruislip\", 51.5569, -0.3988));\n        stations.add(new Station(\"239\", \"South Wimbledon\", 51.4154, -0.1919));\n        stations.add(new Station(\"240\", \"South Woodford\", 51.5917, 0.0275));\n        stations.add(new Station(\"241\", \"Stamford Brook\", 51.495, -0.2459));\n        stations.add(new Station(\"242\", \"Stanmore\", 51.6194, -0.3028));\n        stations.add(new Station(\"243\", \"Stepney Green\", 51.5221, -0.047));\n        stations.add(new Station(\"244\", \"Stockwell\", 51.4723, -0.123));\n        stations.add(new Station(\"245\", \"Stonebridge Park\", 51.5439, -0.2759));\n        stations.add(new Station(\"246\", \"Stratford\", 51.5416, -0.0042));\n        stations.add(new Station(\"247\", \"St. James's Park\", 51.4994, -0.1335));\n        stations.add(new Station(\"248\", \"St. John's Wood\", 51.5347, -0.174));\n        stations.add(new Station(\"249\", \"St. Paul's\", 51.5146, -0.0973));\n        stations.add(new Station(\"250\", \"Sudbury Hill\", 51.5569, -0.3366));\n        stations.add(new Station(\"251\", \"Sudbury Town\", 51.5507, -0.3156));\n        stations.add(new Station(\"252\", \"Surrey Quays\", 51.4933, -0.0478));\n        stations.add(new Station(\"253\", \"Swiss Cottage\", 51.5432, -0.1738));\n        stations.add(new Station(\"254\", \"Temple\", 51.5111, -0.1141));\n        stations.add(new Station(\"255\", \"Theydon Bois\", 51.6717, 0.1033));\n        stations.add(new Station(\"256\", \"Tooting Bec\", 51.4361, -0.1598));\n        stations.add(new Station(\"257\", \"Tooting Broadway\", 51.4275, -0.168));\n        stations.add(new Station(\"258\", \"Tottenham Court Road\", 51.5165, -0.131));\n        stations.add(new Station(\"259\", \"Tottenham Hale\", 51.5882, -0.0594));\n        stations.add(new Station(\"260\", \"Totteridge & Whetstone\", 51.6302, -0.1791));\n        stations.add(new Station(\"261\", \"Tower Gateway\", 51.5106, -0.0743));\n        stations.add(new Station(\"262\", \"Tower Hill\", 51.5098, -0.0766));\n        stations.add(new Station(\"263\", \"Tufnell Park\", 51.5567, -0.1374));\n        stations.add(new Station(\"264\", \"Turnham Green\", 51.4951, -0.2547));\n        stations.add(new Station(\"265\", \"Turnpike Lane\", 51.5904, -0.1028));\n        stations.add(new Station(\"266\", \"Upminster\", 51.559, 0.251));\n        stations.add(new Station(\"267\", \"Upminster Bridge\", 51.5582, 0.2343));\n        stations.add(new Station(\"268\", \"Upney\", 51.5385, 0.1014));\n        stations.add(new Station(\"269\", \"Upton Park\", 51.5352, 0.0343));\n        stations.add(new Station(\"270\", \"Uxbridge\", 51.5463, -0.4786));\n        stations.add(new Station(\"271\", \"Vauxhall\", 51.4861, -0.1253));\n        stations.add(new Station(\"272\", \"Victoria\", 51.4965, -0.1447));\n        stations.add(new Station(\"273\", \"Walthamstow Central\", 51.583, -0.0195));\n        stations.add(new Station(\"274\", \"Wanstead\", 51.5775, 0.0288));\n        stations.add(new Station(\"275\", \"Wapping\", 51.5043, -0.0558));\n        stations.add(new Station(\"276\", \"Warren Street\", 51.5247, -0.1384));\n        stations.add(new Station(\"277\", \"Warwick Avenue\", 51.5235, -0.1835));\n        stations.add(new Station(\"278\", \"Waterloo\", 51.5036, -0.1143));\n        stations.add(new Station(\"279\", \"Watford\", 51.6573, -0.4177));\n        stations.add(new Station(\"280\", \"Wembley Central\", 51.5519, -0.2963));\n        stations.add(new Station(\"281\", \"Wembley Park\", 51.5635, -0.2795));\n        stations.add(new Station(\"282\", \"Westbourne Park\", 51.521, -0.2011));\n        stations.add(new Station(\"283\", \"Westferry\", 51.5097, -0.0265));\n        stations.add(new Station(\"284\", \"Westminster\", 51.501, -0.1254));\n        stations.add(new Station(\"285\", \"West Acton\", 51.518, -0.2809));\n        stations.add(new Station(\"286\", \"West Brompton\", 51.4872, -0.1953));\n        stations.add(new Station(\"287\", \"West Finchley\", 51.6095, -0.1883));\n        stations.add(new Station(\"288\", \"West Ham\", 51.5287, 0.0056));\n        stations.add(new Station(\"289\", \"West Hampstead\", 51.5469, -0.1906));\n        stations.add(new Station(\"290\", \"West Harrow\", 51.5795, -0.3533));\n        stations.add(new Station(\"291\", \"West India Quay\", 51.507, -0.0203));\n        stations.add(new Station(\"292\", \"West Kensington\", 51.4907, -0.2065));\n        stations.add(new Station(\"293\", \"West Ruislip\", 51.5696, -0.4376));\n        stations.add(new Station(\"294\", \"Whitechapel\", 51.5194, -0.0612));\n        stations.add(new Station(\"295\", \"White City\", 51.512, -0.2239));\n        stations.add(new Station(\"296\", \"Willesden Green\", 51.5492, -0.2215));\n        stations.add(new Station(\"297\", \"Willesden Junction\", 51.5326, -0.2478));\n        stations.add(new Station(\"298\", \"Wimbledon\", 51.4214, -0.2064));\n        stations.add(new Station(\"299\", \"Wimbledon Park\", 51.4343, -0.1992));\n        stations.add(new Station(\"300\", \"Woodford\", 51.607, 0.0341));\n        stations.add(new Station(\"301\", \"Woodside Park\", 51.6179, -0.1856));\n        stations.add(new Station(\"302\", \"Wood Green\", 51.5975, -0.1097));\n\n        connections.put(\"1\", Stream.of(\"52\",\"73\",\"73\",\"233\",\"264\").collect(Collectors.toSet()));\n        connections.put(\"2\", Stream.of(\"156\",\"262\",\"156\").collect(Collectors.toSet()));\n        connections.put(\"3\", Stream.of(\"262\",\"294\",\"156\",\"294\").collect(Collectors.toSet()));\n        connections.put(\"4\", Stream.of(\"70\",\"200\").collect(Collectors.toSet()));\n        connections.put(\"5\", Stream.of(\"193\",\"251\").collect(Collectors.toSet()));\n        connections.put(\"6\", Stream.of(\"46\").collect(Collectors.toSet()));\n        connections.put(\"7\", Stream.of(\"145\",\"188\").collect(Collectors.toSet()));\n        connections.put(\"8\", Stream.of(\"124\",\"263\").collect(Collectors.toSet()));\n        connections.put(\"9\", Stream.of(\"31\",\"231\").collect(Collectors.toSet()));\n        connections.put(\"10\", Stream.of(\"95\",\"128\").collect(Collectors.toSet()));\n        connections.put(\"11\", Stream.of(\"163\",\"211\",\"83\",\"104\",\"83\",\"104\",\"28\",\"248\",\"94\",\"104\").collect(Collectors.toSet()));\n        connections.put(\"12\", Stream.of(\"56\",\"256\").collect(Collectors.toSet()));\n        connections.put(\"13\", Stream.of(\"156\",\"249\",\"224\",\"157\",\"167\",\"278\").collect(Collectors.toSet()));\n        connections.put(\"14\", Stream.of(\"92\",\"167\",\"92\",\"167\",\"92\",\"167\").collect(Collectors.toSet()));\n        connections.put(\"15\", Stream.of(\"78\",\"268\",\"78\").collect(Collectors.toSet()));\n        connections.put(\"16\", Stream.of(\"91\",\"173\").collect(Collectors.toSet()));\n        connections.put(\"17\", Stream.of(\"110\",\"292\",\"74\",\"110\").collect(Collectors.toSet()));\n        connections.put(\"18\", Stream.of(\"186\",\"192\",\"186\",\"192\").collect(Collectors.toSet()));\n        connections.put(\"19\", Stream.of(\"97\").collect(Collectors.toSet()));\n        connections.put(\"20\", Stream.of(\"65\",\"216\").collect(Collectors.toSet()));\n        connections.put(\"21\", Stream.of(\"67\",\"268\").collect(Collectors.toSet()));\n        connections.put(\"22\", Stream.of(\"47\",\"111\").collect(Collectors.toSet()));\n        connections.put(\"23\", Stream.of(\"41\",\"157\").collect(Collectors.toSet()));\n        connections.put(\"24\", Stream.of(\"156\",\"164\").collect(Collectors.toSet()));\n        connections.put(\"25\", Stream.of(\"161\",\"254\",\"161\",\"254\").collect(Collectors.toSet()));\n        connections.put(\"26\", Stream.of(\"259\",\"273\").collect(Collectors.toSet()));\n        connections.put(\"27\", Stream.of(\"79\",\"200\").collect(Collectors.toSet()));\n        connections.put(\"28\", Stream.of(\"162\",\"191\",\"11\",\"107\").collect(Collectors.toSet()));\n        connections.put(\"29\", Stream.of(\"84\",\"157\").collect(Collectors.toSet()));\n        connections.put(\"30\", Stream.of(\"176\",\"189\").collect(Collectors.toSet()));\n        connections.put(\"31\", Stream.of(\"9\",\"302\").collect(Collectors.toSet()));\n        connections.put(\"32\", Stream.of(\"70\",\"203\").collect(Collectors.toSet()));\n        connections.put(\"33\", Stream.of(\"36\",\"164\",\"36\",\"164\").collect(Collectors.toSet()));\n        connections.put(\"34\", Stream.of(\"100\",\"119\").collect(Collectors.toSet()));\n        connections.put(\"35\", Stream.of(\"244\").collect(Collectors.toSet()));\n        connections.put(\"36\", Stream.of(\"33\",\"288\",\"33\",\"288\").collect(Collectors.toSet()));\n        connections.put(\"37\", Stream.of(\"158\",\"300\").collect(Collectors.toSet()));\n        connections.put(\"38\", Stream.of(\"58\",\"81\").collect(Collectors.toSet()));\n        connections.put(\"39\", Stream.of(\"128\",\"145\").collect(Collectors.toSet()));\n        connections.put(\"40\", Stream.of(\"47\",\"89\",\"139\",\"170\").collect(Collectors.toSet()));\n        connections.put(\"41\", Stream.of(\"215\",\"252\",\"23\",\"42\").collect(Collectors.toSet()));\n        connections.put(\"42\", Stream.of(\"120\",\"291\",\"41\",\"183\").collect(Collectors.toSet()));\n        connections.put(\"43\", Stream.of(\"79\",\"218\",\"183\",\"288\").collect(Collectors.toSet()));\n        connections.put(\"44\", Stream.of(\"161\",\"166\",\"161\",\"166\").collect(Collectors.toSet()));\n        connections.put(\"45\", Stream.of(\"206\",\"242\").collect(Collectors.toSet()));\n        connections.put(\"46\", Stream.of(\"6\",\"50\",\"53\").collect(Collectors.toSet()));\n        connections.put(\"47\", Stream.of(\"22\",\"40\").collect(Collectors.toSet()));\n        connections.put(\"48\", Stream.of(\"126\",\"249\").collect(Collectors.toSet()));\n        connections.put(\"49\", Stream.of(\"87\",\"196\",\"87\",\"151\").collect(Collectors.toSet()));\n        connections.put(\"50\", Stream.of(\"46\").collect(Collectors.toSet()));\n        connections.put(\"51\", Stream.of(\"103\",\"214\").collect(Collectors.toSet()));\n        connections.put(\"52\", Stream.of(\"1\",\"264\").collect(Collectors.toSet()));\n        connections.put(\"53\", Stream.of(\"46\",\"213\").collect(Collectors.toSet()));\n        connections.put(\"54\", Stream.of(\"55\",\"56\").collect(Collectors.toSet()));\n        connections.put(\"55\", Stream.of(\"54\",\"244\").collect(Collectors.toSet()));\n        connections.put(\"56\", Stream.of(\"12\",\"54\").collect(Collectors.toSet()));\n        connections.put(\"57\", Stream.of(\"187\").collect(Collectors.toSet()));\n        connections.put(\"58\", Stream.of(\"38\",\"119\").collect(Collectors.toSet()));\n        connections.put(\"59\", Stream.of(\"239\",\"257\").collect(Collectors.toSet()));\n        connections.put(\"60\", Stream.of(\"126\",\"151\").collect(Collectors.toSet()));\n        connections.put(\"61\", Stream.of(\"171\",\"237\").collect(Collectors.toSet()));\n        connections.put(\"62\", Stream.of(\"168\",\"279\").collect(Collectors.toSet()));\n        connections.put(\"63\", Stream.of(\"202\",\"218\").collect(Collectors.toSet()));\n        connections.put(\"64\", Stream.of(\"106\",\"135\").collect(Collectors.toSet()));\n        connections.put(\"65\", Stream.of(\"20\",\"97\").collect(Collectors.toSet()));\n        connections.put(\"66\", Stream.of(\"67\",\"85\").collect(Collectors.toSet()));\n        connections.put(\"67\", Stream.of(\"21\",\"66\").collect(Collectors.toSet()));\n        connections.put(\"68\", Stream.of(\"158\",\"255\").collect(Collectors.toSet()));\n        connections.put(\"69\", Stream.of(\"86\",\"106\").collect(Collectors.toSet()));\n        connections.put(\"70\", Stream.of(\"4\",\"32\").collect(Collectors.toSet()));\n        connections.put(\"71\", Stream.of(\"172\",\"296\").collect(Collectors.toSet()));\n        connections.put(\"72\", Stream.of(\"285\",\"73\").collect(Collectors.toSet()));\n        connections.put(\"73\", Stream.of(\"72\",\"1\",\"1\",\"182\").collect(Collectors.toSet()));\n        connections.put(\"74\", Stream.of(\"99\",\"122\",\"138\",\"286\",\"292\",\"17\",\"99\").collect(Collectors.toSet()));\n        connections.put(\"75\", Stream.of(\"209\",\"221\",\"209\",\"221\").collect(Collectors.toSet()));\n        connections.put(\"76\", Stream.of(\"181\",\"295\").collect(Collectors.toSet()));\n        connections.put(\"77\", Stream.of(\"93\",\"124\").collect(Collectors.toSet()));\n        connections.put(\"78\", Stream.of(\"15\",\"269\",\"15\",\"269\").collect(Collectors.toSet()));\n        connections.put(\"79\", Stream.of(\"27\",\"43\").collect(Collectors.toSet()));\n        connections.put(\"80\", Stream.of(\"204\",\"230\").collect(Collectors.toSet()));\n        connections.put(\"81\", Stream.of(\"38\").collect(Collectors.toSet()));\n        connections.put(\"82\", Stream.of(\"163\",\"192\").collect(Collectors.toSet()));\n        connections.put(\"83\", Stream.of(\"11\",\"192\",\"192\",\"11\",\"192\").collect(Collectors.toSet()));\n        connections.put(\"84\", Stream.of(\"148\",\"29\",\"136\").collect(Collectors.toSet()));\n        connections.put(\"85\", Stream.of(\"66\",\"129\").collect(Collectors.toSet()));\n        connections.put(\"86\", Stream.of(\"69\",\"152\").collect(Collectors.toSet()));\n        connections.put(\"87\", Stream.of(\"49\",\"278\",\"254\",\"284\",\"254\",\"284\",\"49\",\"278\").collect(Collectors.toSet()));\n        connections.put(\"88\", Stream.of(\"255\").collect(Collectors.toSet()));\n        connections.put(\"89\", Stream.of(\"40\",\"145\",\"170\",\"276\",\"145\",\"276\").collect(Collectors.toSet()));\n        connections.put(\"90\", Stream.of(\"104\",\"145\",\"104\",\"145\",\"104\",\"145\").collect(Collectors.toSet()));\n        connections.put(\"91\", Stream.of(\"16\",\"109\").collect(Collectors.toSet()));\n        connections.put(\"92\", Stream.of(\"14\",\"145\",\"14\",\"145\",\"14\",\"145\").collect(Collectors.toSet()));\n        connections.put(\"93\", Stream.of(\"77\",\"165\",\"287\").collect(Collectors.toSet()));\n        connections.put(\"94\", Stream.of(\"253\",\"289\",\"11\",\"281\").collect(Collectors.toSet()));\n        connections.put(\"95\", Stream.of(\"10\",\"160\",\"123\",\"223\").collect(Collectors.toSet()));\n        connections.put(\"96\", Stream.of(\"194\",\"286\").collect(Collectors.toSet()));\n        connections.put(\"97\", Stream.of(\"19\",\"65\").collect(Collectors.toSet()));\n        connections.put(\"98\", Stream.of(\"173\",\"210\").collect(Collectors.toSet()));\n        connections.put(\"99\", Stream.of(\"122\",\"235\",\"74\",\"235\",\"74\",\"235\").collect(Collectors.toSet()));\n        connections.put(\"100\", Stream.of(\"34\",\"111\").collect(Collectors.toSet()));\n        connections.put(\"101\", Stream.of(\"110\",\"226\").collect(Collectors.toSet()));\n        connections.put(\"102\", Stream.of(\"258\",\"276\").collect(Collectors.toSet()));\n        connections.put(\"103\", Stream.of(\"51\",\"109\").collect(Collectors.toSet()));\n        connections.put(\"104\", Stream.of(\"11\",\"90\",\"11\",\"90\",\"11\",\"90\").collect(Collectors.toSet()));\n        connections.put(\"105\", Stream.of(\"177\",\"195\").collect(Collectors.toSet()));\n        connections.put(\"106\", Stream.of(\"64\",\"69\").collect(Collectors.toSet()));\n        connections.put(\"107\", Stream.of(\"28\",\"284\",\"133\",\"196\",\"191\",\"272\").collect(Collectors.toSet()));\n        connections.put(\"108\", Stream.of(\"141\",\"264\").collect(Collectors.toSet()));\n        connections.put(\"109\", Stream.of(\"91\",\"103\").collect(Collectors.toSet()));\n        connections.put(\"110\", Stream.of(\"17\",\"208\",\"101\",\"17\",\"264\").collect(Collectors.toSet()));\n        connections.put(\"111\", Stream.of(\"22\",\"100\").collect(Collectors.toSet()));\n        connections.put(\"112\", Stream.of(\"181\",\"195\").collect(Collectors.toSet()));\n        connections.put(\"113\", Stream.of(\"245\",\"297\").collect(Collectors.toSet()));\n        connections.put(\"114\", Stream.of(\"140\").collect(Collectors.toSet()));\n        connections.put(\"115\", Stream.of(\"178\",\"184\",\"290\").collect(Collectors.toSet()));\n        connections.put(\"116\", Stream.of(\"117\",\"118\",\"132\").collect(Collectors.toSet()));\n        connections.put(\"117\", Stream.of(\"116\",\"118\").collect(Collectors.toSet()));\n        connections.put(\"118\", Stream.of(\"116\",\"117\").collect(Collectors.toSet()));\n        connections.put(\"119\", Stream.of(\"34\",\"58\").collect(Collectors.toSet()));\n        connections.put(\"120\", Stream.of(\"42\",\"237\").collect(Collectors.toSet()));\n        connections.put(\"121\", Stream.of(\"260\").collect(Collectors.toSet()));\n        connections.put(\"122\", Stream.of(\"99\",\"186\",\"74\",\"186\").collect(Collectors.toSet()));\n        connections.put(\"123\", Stream.of(\"95\",\"145\").collect(Collectors.toSet()));\n        connections.put(\"124\", Stream.of(\"8\",\"77\").collect(Collectors.toSet()));\n        connections.put(\"125\", Stream.of(\"134\",\"270\",\"134\",\"270\").collect(Collectors.toSet()));\n        connections.put(\"126\", Stream.of(\"48\",\"258\",\"60\",\"222\").collect(Collectors.toSet()));\n        connections.put(\"127\", Stream.of(\"186\",\"225\").collect(Collectors.toSet()));\n        connections.put(\"128\", Stream.of(\"10\",\"39\").collect(Collectors.toSet()));\n        connections.put(\"129\", Stream.of(\"85\",\"267\").collect(Collectors.toSet()));\n        connections.put(\"130\", Stream.of(\"131\",\"132\").collect(Collectors.toSet()));\n        connections.put(\"131\", Stream.of(\"130\",\"189\").collect(Collectors.toSet()));\n        connections.put(\"132\", Stream.of(\"116\",\"130\").collect(Collectors.toSet()));\n        connections.put(\"133\", Stream.of(\"107\",\"146\").collect(Collectors.toSet()));\n        connections.put(\"134\", Stream.of(\"125\",\"219\",\"125\",\"219\").collect(Collectors.toSet()));\n        connections.put(\"135\", Stream.of(\"64\",\"171\").collect(Collectors.toSet()));\n        connections.put(\"136\", Stream.of(\"84\",\"190\",\"278\").collect(Collectors.toSet()));\n        connections.put(\"137\", Stream.of(\"205\",\"297\").collect(Collectors.toSet()));\n        connections.put(\"138\", Stream.of(\"74\").collect(Collectors.toSet()));\n        connections.put(\"139\", Stream.of(\"40\",\"263\").collect(Collectors.toSet()));\n        connections.put(\"140\", Stream.of(\"114\",\"236\").collect(Collectors.toSet()));\n        connections.put(\"141\", Stream.of(\"108\",\"212\").collect(Collectors.toSet()));\n        connections.put(\"142\", Stream.of(\"289\",\"296\").collect(Collectors.toSet()));\n        connections.put(\"143\", Stream.of(\"159\",\"205\").collect(Collectors.toSet()));\n        connections.put(\"144\", Stream.of(\"206\",\"281\").collect(Collectors.toSet()));\n        connections.put(\"145\", Stream.of(\"90\",\"92\",\"90\",\"92\",\"90\",\"92\",\"7\",\"89\",\"39\",\"222\",\"89\",\"123\").collect(Collectors.toSet()));\n        connections.put(\"146\", Stream.of(\"133\",\"235\").collect(Collectors.toSet()));\n        connections.put(\"147\", Stream.of(\"150\",\"282\").collect(Collectors.toSet()));\n        connections.put(\"148\", Stream.of(\"84\",\"278\").collect(Collectors.toSet()));\n        connections.put(\"149\", Stream.of(\"162\",\"207\").collect(Collectors.toSet()));\n        connections.put(\"150\", Stream.of(\"147\",\"226\").collect(Collectors.toSet()));\n        connections.put(\"151\", Stream.of(\"49\",\"258\",\"60\",\"196\").collect(Collectors.toSet()));\n        connections.put(\"152\", Stream.of(\"86\").collect(Collectors.toSet()));\n        connections.put(\"153\", Stream.of(\"154\",\"246\").collect(Collectors.toSet()));\n        connections.put(\"154\", Stream.of(\"153\",\"229\",\"274\").collect(Collectors.toSet()));\n        connections.put(\"155\", Stream.of(\"224\",\"283\").collect(Collectors.toSet()));\n        connections.put(\"156\", Stream.of(\"13\",\"24\",\"2\",\"167\",\"3\",\"167\",\"2\",\"167\").collect(Collectors.toSet()));\n        connections.put(\"157\", Stream.of(\"23\",\"232\",\"13\",\"29\").collect(Collectors.toSet()));\n        connections.put(\"158\", Stream.of(\"37\",\"68\").collect(Collectors.toSet()));\n        connections.put(\"159\", Stream.of(\"143\",\"277\").collect(Collectors.toSet()));\n        connections.put(\"160\", Stream.of(\"95\",\"265\").collect(Collectors.toSet()));\n        connections.put(\"161\", Stream.of(\"25\",\"44\",\"25\",\"44\").collect(Collectors.toSet()));\n        connections.put(\"162\", Stream.of(\"28\",\"149\").collect(Collectors.toSet()));\n        connections.put(\"163\", Stream.of(\"11\",\"82\").collect(Collectors.toSet()));\n        connections.put(\"164\", Stream.of(\"24\",\"246\",\"33\",\"243\",\"33\",\"243\").collect(Collectors.toSet()));\n        connections.put(\"165\", Stream.of(\"93\").collect(Collectors.toSet()));\n        connections.put(\"166\", Stream.of(\"44\",\"262\",\"44\",\"262\").collect(Collectors.toSet()));\n        connections.put(\"167\", Stream.of(\"14\",\"156\",\"14\",\"156\",\"14\",\"156\",\"13\",\"188\").collect(Collectors.toSet()));\n        connections.put(\"168\", Stream.of(\"62\",\"179\",\"213\").collect(Collectors.toSet()));\n        connections.put(\"169\", Stream.of(\"239\").collect(Collectors.toSet()));\n        connections.put(\"170\", Stream.of(\"40\",\"89\").collect(Collectors.toSet()));\n        connections.put(\"171\", Stream.of(\"61\",\"135\").collect(Collectors.toSet()));\n        connections.put(\"172\", Stream.of(\"71\",\"281\").collect(Collectors.toSet()));\n        connections.put(\"173\", Stream.of(\"16\",\"98\").collect(Collectors.toSet()));\n        connections.put(\"174\", Stream.of(\"252\").collect(Collectors.toSet()));\n        connections.put(\"175\", Stream.of(\"252\").collect(Collectors.toSet()));\n        connections.put(\"176\", Stream.of(\"30\",\"233\").collect(Collectors.toSet()));\n        connections.put(\"177\", Stream.of(\"105\",\"238\").collect(Collectors.toSet()));\n        connections.put(\"178\", Stream.of(\"115\",\"201\").collect(Collectors.toSet()));\n        connections.put(\"179\", Stream.of(\"168\",\"180\").collect(Collectors.toSet()));\n        connections.put(\"180\", Stream.of(\"179\",\"198\").collect(Collectors.toSet()));\n        connections.put(\"181\", Stream.of(\"76\",\"112\",\"285\").collect(Collectors.toSet()));\n        connections.put(\"182\", Stream.of(\"73\",\"193\").collect(Collectors.toSet()));\n        connections.put(\"183\", Stream.of(\"42\",\"43\").collect(Collectors.toSet()));\n        connections.put(\"184\", Stream.of(\"115\",\"198\").collect(Collectors.toSet()));\n        connections.put(\"185\", Stream.of(\"236\",\"280\").collect(Collectors.toSet()));\n        connections.put(\"186\", Stream.of(\"127\",\"207\",\"18\",\"122\",\"18\",\"122\").collect(Collectors.toSet()));\n        connections.put(\"187\", Stream.of(\"57\",\"231\").collect(Collectors.toSet()));\n        connections.put(\"188\", Stream.of(\"7\",\"167\").collect(Collectors.toSet()));\n        connections.put(\"189\", Stream.of(\"30\",\"131\").collect(Collectors.toSet()));\n        connections.put(\"190\", Stream.of(\"136\",\"244\").collect(Collectors.toSet()));\n        connections.put(\"191\", Stream.of(\"196\",\"211\",\"28\",\"258\",\"107\",\"276\").collect(Collectors.toSet()));\n        connections.put(\"192\", Stream.of(\"82\",\"277\",\"18\",\"83\",\"18\",\"83\",\"83\",\"217\").collect(Collectors.toSet()));\n        connections.put(\"193\", Stream.of(\"5\",\"182\").collect(Collectors.toSet()));\n        connections.put(\"194\", Stream.of(\"96\",\"204\").collect(Collectors.toSet()));\n        connections.put(\"195\", Stream.of(\"105\",\"112\").collect(Collectors.toSet()));\n        connections.put(\"196\", Stream.of(\"49\",\"191\",\"107\",\"151\").collect(Collectors.toSet()));\n        connections.put(\"197\", Stream.of(\"271\",\"272\").collect(Collectors.toSet()));\n        connections.put(\"198\", Stream.of(\"180\",\"184\").collect(Collectors.toSet()));\n        connections.put(\"199\", Stream.of(\"269\",\"288\",\"269\",\"288\").collect(Collectors.toSet()));\n        connections.put(\"200\", Stream.of(\"4\",\"27\",\"283\",\"291\").collect(Collectors.toSet()));\n        connections.put(\"201\", Stream.of(\"178\",\"281\").collect(Collectors.toSet()));\n        connections.put(\"202\", Stream.of(\"63\",\"216\").collect(Collectors.toSet()));\n        connections.put(\"203\", Stream.of(\"32\",\"246\").collect(Collectors.toSet()));\n        connections.put(\"204\", Stream.of(\"80\",\"194\").collect(Collectors.toSet()));\n        connections.put(\"205\", Stream.of(\"137\",\"143\").collect(Collectors.toSet()));\n        connections.put(\"206\", Stream.of(\"45\",\"144\").collect(Collectors.toSet()));\n        connections.put(\"207\", Stream.of(\"149\",\"186\").collect(Collectors.toSet()));\n        connections.put(\"208\", Stream.of(\"110\",\"241\").collect(Collectors.toSet()));\n        connections.put(\"209\", Stream.of(\"75\",\"290\",\"75\",\"234\").collect(Collectors.toSet()));\n        connections.put(\"210\", Stream.of(\"98\",\"274\").collect(Collectors.toSet()));\n        connections.put(\"211\", Stream.of(\"11\",\"191\").collect(Collectors.toSet()));\n        connections.put(\"212\", Stream.of(\"141\").collect(Collectors.toSet()));\n        connections.put(\"213\", Stream.of(\"53\",\"168\").collect(Collectors.toSet()));\n        connections.put(\"214\", Stream.of(\"51\",\"300\").collect(Collectors.toSet()));\n        connections.put(\"215\", Stream.of(\"41\",\"275\").collect(Collectors.toSet()));\n        connections.put(\"216\", Stream.of(\"20\",\"202\").collect(Collectors.toSet()));\n        connections.put(\"217\", Stream.of(\"192\",\"282\").collect(Collectors.toSet()));\n        connections.put(\"218\", Stream.of(\"43\",\"63\").collect(Collectors.toSet()));\n        connections.put(\"219\", Stream.of(\"134\",\"221\",\"134\",\"221\").collect(Collectors.toSet()));\n        connections.put(\"220\", Stream.of(\"238\",\"293\").collect(Collectors.toSet()));\n        connections.put(\"221\", Stream.of(\"75\",\"219\",\"75\",\"219\").collect(Collectors.toSet()));\n        connections.put(\"222\", Stream.of(\"126\",\"145\").collect(Collectors.toSet()));\n        connections.put(\"223\", Stream.of(\"95\",\"259\").collect(Collectors.toSet()));\n        connections.put(\"224\", Stream.of(\"13\",\"155\",\"261\",\"275\",\"294\").collect(Collectors.toSet()));\n        connections.put(\"225\", Stream.of(\"127\",\"295\").collect(Collectors.toSet()));\n        connections.put(\"226\", Stream.of(\"101\",\"150\").collect(Collectors.toSet()));\n        connections.put(\"227\", Stream.of(\"294\").collect(Collectors.toSet()));\n        connections.put(\"228\", Stream.of(\"235\",\"272\",\"235\",\"272\").collect(Collectors.toSet()));\n        connections.put(\"229\", Stream.of(\"154\",\"240\").collect(Collectors.toSet()));\n        connections.put(\"230\", Stream.of(\"80\",\"299\").collect(Collectors.toSet()));\n        connections.put(\"231\", Stream.of(\"9\",\"187\").collect(Collectors.toSet()));\n        connections.put(\"232\", Stream.of(\"157\",\"278\").collect(Collectors.toSet()));\n        connections.put(\"233\", Stream.of(\"1\",\"176\").collect(Collectors.toSet()));\n        connections.put(\"234\", Stream.of(\"209\",\"250\").collect(Collectors.toSet()));\n        connections.put(\"235\", Stream.of(\"99\",\"228\",\"99\",\"228\",\"99\",\"146\").collect(Collectors.toSet()));\n        connections.put(\"236\", Stream.of(\"140\",\"185\").collect(Collectors.toSet()));\n        connections.put(\"237\", Stream.of(\"61\",\"120\").collect(Collectors.toSet()));\n        connections.put(\"238\", Stream.of(\"177\",\"220\").collect(Collectors.toSet()));\n        connections.put(\"239\", Stream.of(\"59\",\"169\").collect(Collectors.toSet()));\n        connections.put(\"240\", Stream.of(\"229\",\"300\").collect(Collectors.toSet()));\n        connections.put(\"241\", Stream.of(\"208\",\"264\").collect(Collectors.toSet()));\n        connections.put(\"242\", Stream.of(\"45\").collect(Collectors.toSet()));\n        connections.put(\"243\", Stream.of(\"164\",\"294\",\"164\",\"294\").collect(Collectors.toSet()));\n        connections.put(\"244\", Stream.of(\"55\",\"190\",\"35\",\"271\").collect(Collectors.toSet()));\n        connections.put(\"245\", Stream.of(\"113\",\"280\").collect(Collectors.toSet()));\n        connections.put(\"246\", Stream.of(\"153\",\"164\",\"203\",\"288\").collect(Collectors.toSet()));\n        connections.put(\"247\", Stream.of(\"272\",\"284\",\"272\",\"284\").collect(Collectors.toSet()));\n        connections.put(\"248\", Stream.of(\"11\",\"253\").collect(Collectors.toSet()));\n        connections.put(\"249\", Stream.of(\"13\",\"48\").collect(Collectors.toSet()));\n        connections.put(\"250\", Stream.of(\"234\",\"251\").collect(Collectors.toSet()));\n        connections.put(\"251\", Stream.of(\"5\",\"250\").collect(Collectors.toSet()));\n        connections.put(\"252\", Stream.of(\"41\",\"174\",\"175\").collect(Collectors.toSet()));\n        connections.put(\"253\", Stream.of(\"94\",\"248\").collect(Collectors.toSet()));\n        connections.put(\"254\", Stream.of(\"25\",\"87\",\"25\",\"87\").collect(Collectors.toSet()));\n        connections.put(\"255\", Stream.of(\"68\",\"88\").collect(Collectors.toSet()));\n        connections.put(\"256\", Stream.of(\"12\",\"257\").collect(Collectors.toSet()));\n        connections.put(\"257\", Stream.of(\"59\",\"256\").collect(Collectors.toSet()));\n        connections.put(\"258\", Stream.of(\"126\",\"191\",\"102\",\"151\").collect(Collectors.toSet()));\n        connections.put(\"259\", Stream.of(\"26\",\"223\").collect(Collectors.toSet()));\n        connections.put(\"260\", Stream.of(\"121\",\"301\").collect(Collectors.toSet()));\n        connections.put(\"261\", Stream.of(\"224\").collect(Collectors.toSet()));\n        connections.put(\"262\", Stream.of(\"2\",\"166\",\"3\",\"166\").collect(Collectors.toSet()));\n        connections.put(\"263\", Stream.of(\"8\",\"139\").collect(Collectors.toSet()));\n        connections.put(\"264\", Stream.of(\"52\",\"108\",\"241\",\"1\",\"110\").collect(Collectors.toSet()));\n        connections.put(\"265\", Stream.of(\"160\",\"302\").collect(Collectors.toSet()));\n        connections.put(\"266\", Stream.of(\"267\").collect(Collectors.toSet()));\n        connections.put(\"267\", Stream.of(\"129\",\"266\").collect(Collectors.toSet()));\n        connections.put(\"268\", Stream.of(\"15\",\"21\").collect(Collectors.toSet()));\n        connections.put(\"269\", Stream.of(\"78\",\"199\",\"78\",\"199\").collect(Collectors.toSet()));\n        connections.put(\"270\", Stream.of(\"125\",\"125\").collect(Collectors.toSet()));\n        connections.put(\"271\", Stream.of(\"197\",\"244\").collect(Collectors.toSet()));\n        connections.put(\"272\", Stream.of(\"228\",\"247\",\"228\",\"247\",\"107\",\"197\").collect(Collectors.toSet()));\n        connections.put(\"273\", Stream.of(\"26\").collect(Collectors.toSet()));\n        connections.put(\"274\", Stream.of(\"154\",\"210\").collect(Collectors.toSet()));\n        connections.put(\"275\", Stream.of(\"215\",\"224\").collect(Collectors.toSet()));\n        connections.put(\"276\", Stream.of(\"89\",\"102\",\"89\",\"191\").collect(Collectors.toSet()));\n        connections.put(\"277\", Stream.of(\"159\",\"192\").collect(Collectors.toSet()));\n        connections.put(\"278\", Stream.of(\"87\",\"148\",\"232\",\"284\",\"87\",\"136\",\"13\").collect(Collectors.toSet()));\n        connections.put(\"279\", Stream.of(\"62\").collect(Collectors.toSet()));\n        connections.put(\"280\", Stream.of(\"185\",\"245\").collect(Collectors.toSet()));\n        connections.put(\"281\", Stream.of(\"144\",\"172\",\"94\",\"201\").collect(Collectors.toSet()));\n        connections.put(\"282\", Stream.of(\"147\",\"217\").collect(Collectors.toSet()));\n        connections.put(\"283\", Stream.of(\"155\",\"200\",\"291\").collect(Collectors.toSet()));\n        connections.put(\"284\", Stream.of(\"87\",\"247\",\"87\",\"247\",\"107\",\"278\").collect(Collectors.toSet()));\n        connections.put(\"285\", Stream.of(\"72\",\"181\").collect(Collectors.toSet()));\n        connections.put(\"286\", Stream.of(\"74\",\"96\").collect(Collectors.toSet()));\n        connections.put(\"287\", Stream.of(\"93\",\"301\").collect(Collectors.toSet()));\n        connections.put(\"288\", Stream.of(\"36\",\"199\",\"36\",\"199\",\"43\",\"246\").collect(Collectors.toSet()));\n        connections.put(\"289\", Stream.of(\"94\",\"142\").collect(Collectors.toSet()));\n        connections.put(\"290\", Stream.of(\"115\",\"209\").collect(Collectors.toSet()));\n        connections.put(\"291\", Stream.of(\"42\",\"200\",\"283\").collect(Collectors.toSet()));\n        connections.put(\"292\", Stream.of(\"17\",\"74\").collect(Collectors.toSet()));\n        connections.put(\"293\", Stream.of(\"220\").collect(Collectors.toSet()));\n        connections.put(\"294\", Stream.of(\"3\",\"243\",\"224\",\"227\",\"3\",\"243\").collect(Collectors.toSet()));\n        connections.put(\"295\", Stream.of(\"76\",\"225\").collect(Collectors.toSet()));\n        connections.put(\"296\", Stream.of(\"71\",\"142\").collect(Collectors.toSet()));\n        connections.put(\"297\", Stream.of(\"113\",\"137\").collect(Collectors.toSet()));\n        connections.put(\"298\", Stream.of(\"299\").collect(Collectors.toSet()));\n        connections.put(\"299\", Stream.of(\"230\",\"298\").collect(Collectors.toSet()));\n        connections.put(\"300\", Stream.of(\"37\",\"214\",\"240\").collect(Collectors.toSet()));\n        connections.put(\"301\", Stream.of(\"260\",\"287\").collect(Collectors.toSet()));\n        connections.put(\"302\", Stream.of(\"31\",\"265\").collect(Collectors.toSet()));\n\n        underground = new Graph<>(stations, connections);\n        routeFinder = new RouteFinder<>(underground, new HaversineScorer(), new HaversineScorer());\n    }\n\n    @Test\n    void findRoute() {\n        List<Station> route = routeFinder.findRoute(underground.getNode(\"74\"), underground.getNode(\"7\"));\n        assertThat(route).size().isPositive();\n\n        route.stream().map(Station::getName).collect(Collectors.toList()).forEach(station -> log.debug(station));\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.ga.dijkstra;\n\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.Map.Entry;\nimport java.util.Set;\n\npublic class Dijkstra {\n\n    public static Graph calculateShortestPathFromSource(Graph graph, Node source) {\n\n        source.setDistance(0);\n\n        Set<Node> settledNodes = new HashSet<>();\n        Set<Node> unsettledNodes = new HashSet<>();\n        unsettledNodes.add(source);\n\n        while (unsettledNodes.size() != 0) {\n            Node currentNode = getLowestDistanceNode(unsettledNodes);\n            unsettledNodes.remove(currentNode);\n            for (Entry<Node, Integer> adjacencyPair : currentNode.getAdjacentNodes().entrySet()) {\n                Node adjacentNode = adjacencyPair.getKey();\n                Integer edgeWeigh = adjacencyPair.getValue();\n\n                if (!settledNodes.contains(adjacentNode)) {\n                    CalculateMinimumDistance(adjacentNode, edgeWeigh, currentNode);\n                    unsettledNodes.add(adjacentNode);\n                }\n            }\n            settledNodes.add(currentNode);\n        }\n        return graph;\n    }\n\n    private static void CalculateMinimumDistance(Node evaluationNode, Integer edgeWeigh, Node sourceNode) {\n        Integer sourceDistance = sourceNode.getDistance();\n        if (sourceDistance + edgeWeigh < evaluationNode.getDistance()) {\n            evaluationNode.setDistance(sourceDistance + edgeWeigh);\n            LinkedList<Node> shortestPath = new LinkedList<>(sourceNode.getShortestPath());\n            shortestPath.add(sourceNode);\n            evaluationNode.setShortestPath(shortestPath);\n        }\n    }\n\n    private static Node getLowestDistanceNode(Set<Node> unsettledNodes) {\n        Node lowestDistanceNode = null;\n        int lowestDistance = Integer.MAX_VALUE;\n        for (Node node : unsettledNodes) {\n            int nodeDistance = node.getDistance();\n            if (nodeDistance < lowestDistance) {\n                lowestDistance = nodeDistance;\n                lowestDistanceNode = node;\n            }\n        }\n        return lowestDistanceNode;\n    }\n}\n", "test_case": "package com.baeldung.algorithms;\n\n\n\nimport com.baeldung.algorithms.ga.dijkstra.Dijkstra;\nimport com.baeldung.algorithms.ga.dijkstra.Graph;\nimport com.baeldung.algorithms.ga.dijkstra.Node;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\nclass DijkstraAlgorithmLongRunningUnitTest {\n\n    @Test\n    public void whenSPPSolved_thenCorrect() {\n\n        Node nodeA = new Node(\"A\");\n        Node nodeB = new Node(\"B\");\n        Node nodeC = new Node(\"C\");\n        Node nodeD = new Node(\"D\");\n        Node nodeE = new Node(\"E\");\n        Node nodeF = new Node(\"F\");\n\n        nodeA.addDestination(nodeB, 10);\n        nodeA.addDestination(nodeC, 15);\n\n        nodeB.addDestination(nodeD, 12);\n        nodeB.addDestination(nodeF, 15);\n\n        nodeC.addDestination(nodeE, 10);\n\n        nodeD.addDestination(nodeE, 2);\n        nodeD.addDestination(nodeF, 1);\n\n        nodeF.addDestination(nodeE, 5);\n\n        Graph graph = new Graph();\n\n        graph.addNode(nodeA);\n        graph.addNode(nodeB);\n        graph.addNode(nodeC);\n        graph.addNode(nodeD);\n        graph.addNode(nodeE);\n        graph.addNode(nodeF);\n\n        graph = Dijkstra.calculateShortestPathFromSource(graph, nodeA);\n\n        List<Node> shortestPathForNodeB = Arrays.asList(nodeA);\n        List<Node> shortestPathForNodeC = Arrays.asList(nodeA);\n        List<Node> shortestPathForNodeD = Arrays.asList(nodeA, nodeB);\n        List<Node> shortestPathForNodeE = Arrays.asList(nodeA, nodeB, nodeD);\n        List<Node> shortestPathForNodeF = Arrays.asList(nodeA, nodeB, nodeD);\n\n        for (Node node : graph.getNodes()) {\n            switch (node.getName()) {\n            case \"B\":\n                assertTrue(node\n                  .getShortestPath()\n                  .equals(shortestPathForNodeB));\n                break;\n            case \"C\":\n                assertTrue(node\n                  .getShortestPath()\n                  .equals(shortestPathForNodeC));\n                break;\n            case \"D\":\n                assertTrue(node\n                  .getShortestPath()\n                  .equals(shortestPathForNodeD));\n                break;\n            case \"E\":\n                assertTrue(node\n                  .getShortestPath()\n                  .equals(shortestPathForNodeE));\n                break;\n            case \"F\":\n                assertTrue(node\n                  .getShortestPath()\n                  .equals(shortestPathForNodeF));\n                break;\n            }\n        }\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.linkedlist;\n\npublic class CycleDetectionBruteForce {\n\n    public static <T> CycleDetectionResult<T> detectCycle(Node<T> head) {\n        if (head == null) {\n            return new CycleDetectionResult<>(false, null);\n        }\n\n        Node<T> it1 = head;\n        int nodesTraversedByOuter = 0;\n        while (it1 != null && it1.next != null) {\n            it1 = it1.next;\n            nodesTraversedByOuter++;\n\n            int x = nodesTraversedByOuter;\n            Node<T> it2 = head;\n            int noOfTimesCurrentNodeVisited = 0;\n\n            while (x > 0) {\n                it2 = it2.next;\n\n                if (it2 == it1) {\n                    noOfTimesCurrentNodeVisited++;\n                }\n\n                if (noOfTimesCurrentNodeVisited == 2) {\n                    return new CycleDetectionResult<>(true, it1);\n                }\n\n                x--;\n            }\n        }\n\n        return new CycleDetectionResult<>(false, null);\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.linkedlist;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nclass CycleDetectionBruteForceUnitTest extends CycleDetectionTestBase {\n\n\n    @ParameterizedTest\n    @MethodSource(\"getLists\")\n    void givenList_detectLoop(Node<Integer> head, boolean cycleExists) {\n        assertEquals(cycleExists, CycleDetectionBruteForce.detectCycle(head).cycleExists);\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.linkedlist;\n\npublic class CycleDetectionByFastAndSlowIterators {\n\n    public static <T> CycleDetectionResult<T> detectCycle(Node<T> head) {\n        if (head == null) {\n            return new CycleDetectionResult<>(false, null);\n        }\n\n        Node<T> slow = head;\n        Node<T> fast = head;\n\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n\n            if (slow == fast) {\n                return new CycleDetectionResult<>(true, fast);\n            }\n        }\n\n        return new CycleDetectionResult<>(false, null);\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.linkedlist;\n\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nclass CycleDetectionByFastAndSlowIteratorsUnitTest extends CycleDetectionTestBase {\n\n    @ParameterizedTest\n    @MethodSource(\"getLists\")\n    void givenList_detectLoop(Node<Integer> head, boolean cycleExists) {\n        assertEquals(cycleExists, CycleDetectionByFastAndSlowIterators.detectCycle(head).cycleExists);\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.linkedlist;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class CycleDetectionByHashing {\n\n    public static <T> CycleDetectionResult<T> detectCycle(Node<T> head) {\n        if (head == null) {\n            return new CycleDetectionResult<>(false, null);\n        }\n\n        Set<Node<T>> set = new HashSet<>();\n        Node<T> node = head;\n\n        while (node != null) {\n            if (set.contains(node)) {\n                return new CycleDetectionResult<>(true, node);\n            }\n            set.add(node);\n            node = node.next;\n        }\n\n        return new CycleDetectionResult<>(false, null);\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.linkedlist;\n\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.MethodSource;\n\n\nclass CycleDetectionByHashingUnitTest extends CycleDetectionTestBase {\n\n    @ParameterizedTest\n    @MethodSource(\"getLists\")\n    void givenList_detectLoop(Node<Integer> head, boolean cycleExists) {\n        assertEquals(cycleExists, CycleDetectionByHashing.detectCycle(head).cycleExists);\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.linkedlist;\n\npublic class CycleRemovalBruteForce {\n\n    public static <T> boolean detectAndRemoveCycle(Node<T> head) {\n        CycleDetectionResult<T> result = CycleDetectionByFastAndSlowIterators.detectCycle(head);\n\n        if (result.cycleExists) {\n            removeCycle(result.node, head);\n        }\n\n        return result.cycleExists;\n    }\n\n    /**\n     * @param loopNodeParam - reference to the node where Flyods cycle \n     * finding algorithm ends, i.e. the fast and the slow iterators\n     * meet.\n     * @param head - reference to the head of the list\n     */\n    private static <T> void removeCycle(Node<T> loopNodeParam, Node<T> head) {\n        Node<T> it = head;\n\n        while (it != null) {\n            if (isNodeReachableFromLoopNode(it, loopNodeParam)) {\n                Node<T> loopStart = it;\n                findEndNodeAndBreakCycle(loopStart);\n                break;\n            }\n            it = it.next;\n        }\n    }\n\n    private static <T> boolean isNodeReachableFromLoopNode(Node<T> it, Node<T> loopNodeParam) {\n        Node<T> loopNode = loopNodeParam;\n\n        do {\n            if (it == loopNode) {\n                return true;\n            }\n            loopNode = loopNode.next;\n        } while (loopNode.next != loopNodeParam);\n\n        return false;\n    }\n\n    private static <T> void findEndNodeAndBreakCycle(Node<T> loopStartParam) {\n        Node<T> loopStart = loopStartParam;\n\n        while (loopStart.next != loopStartParam) {\n            loopStart = loopStart.next;\n        }\n\n        loopStart.next = null;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.linkedlist;\n\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.MethodSource;\n\n\nclass CycleRemovalBruteForceUnitTest extends CycleDetectionTestBase {\n\n    @ParameterizedTest\n    @MethodSource(\"getLists\")\n    void givenList_ifLoopExists_thenDetectAndRemoveLoop(Node<Integer> head, boolean cycleExists) {\n        assertEquals(cycleExists, CycleRemovalBruteForce.detectAndRemoveCycle(head));\n        assertFalse(CycleDetectionByFastAndSlowIterators.detectCycle(head).cycleExists);\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.numberwordconverter;\n\nimport java.math.BigDecimal;\n\nimport pl.allegro.finance.tradukisto.MoneyConverters;\n\npublic class NumberWordConverter {\n\n    public static final String INVALID_INPUT_GIVEN = \"Invalid input given\";\n\n    public static final String[] ones = { \"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\" };\n\n    public static final String[] tens = {\n      \"\", // 0\n      \"\", // 1\n      \"twenty\", // 2\n      \"thirty\", // 3\n      \"forty\", // 4\n      \"fifty\", // 5\n      \"sixty\", // 6\n      \"seventy\", // 7\n      \"eighty\", // 8\n      \"ninety\" // 9\n    };\n\n    public static String getMoneyIntoWords(String input) {\n        MoneyConverters converter = MoneyConverters.ENGLISH_BANKING_MONEY_VALUE;\n        return converter.asWords(new BigDecimal(input));\n    }\n\n    public static String getMoneyIntoWords(final double money) {\n        long dollar = (long) money;\n        long cents = Math.round((money - dollar) * 100);\n        if (money == 0D) {\n            return \"\";\n        }\n        if (money < 0) {\n            return INVALID_INPUT_GIVEN;\n        }\n        String dollarPart = \"\";\n        if (dollar > 0) {\n            dollarPart = convert(dollar) + \" dollar\" + (dollar == 1 ? \"\" : \"s\");\n        }\n        String centsPart = \"\";\n        if (cents > 0) {\n            if (dollarPart.length() > 0) {\n                centsPart = \" and \";\n            }\n            centsPart += convert(cents) + \" cent\" + (cents == 1 ? \"\" : \"s\");\n        }\n        return dollarPart + centsPart;\n    }\n\n    private static String convert(final long n) {\n        if (n < 0) {\n            return INVALID_INPUT_GIVEN;\n        }\n        if (n < 20) {\n            return ones[(int) n];\n        }\n        if (n < 100) {\n            return tens[(int) n / 10] + ((n % 10 != 0) ? \" \" : \"\") + ones[(int) n % 10];\n        }\n        if (n < 1000) {\n            return ones[(int) n / 100] + \" hundred\" + ((n % 100 != 0) ? \" \" : \"\") + convert(n % 100);\n        }\n        if (n < 1_000_000) {\n            return convert(n / 1000) + \" thousand\" + ((n % 1000 != 0) ? \" \" : \"\") + convert(n % 1000);\n        }\n        if (n < 1_000_000_000) {\n            return convert(n / 1_000_000) + \" million\" + ((n % 1_000_000 != 0) ? \" \" : \"\") + convert(n % 1_000_000);\n        }\n        return convert(n / 1_000_000_000) + \" billion\" + ((n % 1_000_000_000 != 0) ? \" \" : \"\") + convert(n % 1_000_000_000);\n    }\n}", "test_case": "package com.baeldung.algorithms.moneywords;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.algorithms.numberwordconverter.NumberWordConverter;\n\nclass NumberWordConverterUnitTest {\n\n    @Test\n    void whenMoneyNegative_thenReturnInvalidInput() {\n        assertEquals(NumberWordConverter.INVALID_INPUT_GIVEN, NumberWordConverter.getMoneyIntoWords(-13));\n    }\n\n    @Test\n    void whenZeroDollarsGiven_thenReturnEmptyString() {\n        assertEquals(\"\", NumberWordConverter.getMoneyIntoWords(0));\n    }\n\n    @Test\n    void whenOnlyDollarsGiven_thenReturnWords() {\n        assertEquals(\"one dollar\", NumberWordConverter.getMoneyIntoWords(1));\n    }\n\n    @Test\n    void whenOnlyCentsGiven_thenReturnWords() {\n        assertEquals(\"sixty cents\", NumberWordConverter.getMoneyIntoWords(0.6));\n    }\n    \n    @Test\n    void whenAlmostAMillioDollarsGiven_thenReturnWords() {\n        String expectedResult = \"nine hundred ninety nine thousand nine hundred ninety nine dollars\";\n        assertEquals(expectedResult, NumberWordConverter.getMoneyIntoWords(999_999));\n    }\n    \n    @Test\n    void whenThirtyMillionDollarsGiven_thenReturnWords() {\n        String expectedResult = \"thirty three million three hundred forty eight thousand nine hundred seventy eight dollars\";\n        assertEquals(expectedResult, NumberWordConverter.getMoneyIntoWords(33_348_978));\n    }\n    \n    @Test\n    void whenTwoBillionDollarsGiven_thenReturnWords() {\n        String expectedResult = \"two billion one hundred thirty three million two hundred forty seven thousand eight hundred ten dollars\";\n        assertEquals(expectedResult, NumberWordConverter.getMoneyIntoWords(2_133_247_810));\n    }\n\n    @Test\n    void whenGivenDollarsAndCents_thenReturnWords() {\n        String expectedResult = \"nine hundred twenty four dollars and sixty cents\";\n        assertEquals(expectedResult, NumberWordConverter.getMoneyIntoWords(924.6));\n    }\n\n    @Test\n    void whenOneDollarAndNoCents_thenReturnDollarSingular() {\n        assertEquals(\"one dollar\", NumberWordConverter.getMoneyIntoWords(1));\n    }\n\n    @Test\n    void whenNoDollarsAndOneCent_thenReturnCentSingular() {\n        assertEquals(\"one cent\", NumberWordConverter.getMoneyIntoWords(0.01));\n    }\n\n    @Test\n    void whenNoDollarsAndTwoCents_thenReturnCentsPlural() {\n        assertEquals(\"two cents\", NumberWordConverter.getMoneyIntoWords(0.02));\n    }\n\n    @Test\n    void whenNoDollarsAndNinetyNineCents_thenReturnWords() {\n        assertEquals(\"ninety nine cents\", NumberWordConverter.getMoneyIntoWords(0.99));\n    }\n\n    @Test\n    void whenNoDollarsAndNineFiveNineCents_thenCorrectRounding() {\n        assertEquals(\"ninety six cents\", NumberWordConverter.getMoneyIntoWords(0.959));\n    }\n\n    @Test\n    void whenGivenDollarsAndCents_thenReturnWordsVersionTwo() {\n        assertEquals(\"three hundred ten \u00a3 00/100\", NumberWordConverter.getMoneyIntoWords(\"310\"));\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.checksortedlist;\n\nimport static org.apache.commons.collections4.CollectionUtils.isEmpty;\n\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport com.google.common.collect.Comparators;\nimport com.google.common.collect.Ordering;;\n\npublic class SortedListChecker {\n\n    private SortedListChecker() {\n        throw new AssertionError();\n    }\n\n    public static boolean checkIfSortedUsingIterativeApproach(List<String> listOfStrings) {\n        if (isEmpty(listOfStrings) || listOfStrings.size() == 1) {\n            return true;\n        }\n\n        Iterator<String> iter = listOfStrings.iterator();\n        String current, previous = iter.next();\n        while (iter.hasNext()) {\n            current = iter.next();\n            if (previous.compareTo(current) > 0) {\n                return false;\n            }\n            previous = current;\n        }\n        return true;\n    }\n\n    public static boolean checkIfSortedUsingIterativeApproach(List<Employee> employees, Comparator<Employee> employeeComparator) {\n        if (isEmpty(employees) || employees.size() == 1) {\n            return true;\n        }\n\n        Iterator<Employee> iter = employees.iterator();\n        Employee current, previous = iter.next();\n        while (iter.hasNext()) {\n            current = iter.next();\n            if (employeeComparator.compare(previous, current) > 0) {\n                return false;\n            }\n            previous = current;\n        }\n        return true;\n    }\n\n    public static boolean checkIfSortedUsingRecursion(List<String> listOfStrings) {\n        return isSortedRecursive(listOfStrings, listOfStrings.size());\n    }\n\n    public static boolean isSortedRecursive(List<String> listOfStrings, int index) {\n        if (index < 2) {\n            return true;\n        } else if (listOfStrings.get(index - 2)\n            .compareTo(listOfStrings.get(index - 1)) > 0) {\n            return false;\n        } else {\n            return isSortedRecursive(listOfStrings, index - 1);\n        }\n    }\n\n    public static boolean checkIfSortedUsingOrderingClass(List<String> listOfStrings) {\n        return Ordering.<String> natural()\n            .isOrdered(listOfStrings);\n    }\n\n    public static boolean checkIfSortedUsingOrderingClass(List<Employee> employees, Comparator<Employee> employeeComparator) {\n        return Ordering.from(employeeComparator)\n            .isOrdered(employees);\n    }\n\n    public static boolean checkIfSortedUsingOrderingClassHandlingNull(List<String> listOfStrings) {\n        return Ordering.<String> natural()\n            .nullsLast()\n            .isOrdered(listOfStrings);\n    }\n\n    public static boolean checkIfSortedUsingComparators(List<String> listOfStrings) {\n        return Comparators.isInOrder(listOfStrings, Comparator.<String> naturalOrder());\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.checksortedlist;\n\nimport static com.baeldung.algorithms.checksortedlist.SortedListChecker.checkIfSortedUsingComparators;\nimport static com.baeldung.algorithms.checksortedlist.SortedListChecker.checkIfSortedUsingIterativeApproach;\nimport static com.baeldung.algorithms.checksortedlist.SortedListChecker.checkIfSortedUsingOrderingClass;\nimport static com.baeldung.algorithms.checksortedlist.SortedListChecker.checkIfSortedUsingRecursion;\nimport static java.util.Arrays.asList;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nclass SortedListCheckerUnitTest {\n\n    private List<String> sortedListOfString;\n    private List<String> unsortedListOfString;\n    private List<String> singletonList;\n\n    private List<Employee> employeesSortedByName;\n    private List<Employee> employeesNotSortedByName;\n\n    @BeforeEach\n    public void setUp() {\n        sortedListOfString = asList(\"Canada\", \"HK\", \"LA\", \"NJ\", \"NY\");\n        unsortedListOfString = asList(\"LA\", \"HK\", \"NJ\", \"NY\", \"Canada\");\n        singletonList = Collections.singletonList(\"NY\");\n\n        employeesSortedByName = asList(new Employee(1L, \"John\"), new Employee(2L, \"Kevin\"), new Employee(3L, \"Mike\"));\n        employeesNotSortedByName = asList(new Employee(1L, \"Kevin\"), new Employee(2L, \"John\"), new Employee(3L, \"Mike\"));\n    }\n\n    @Test\n    void givenSortedList_whenUsingIterativeApproach_thenReturnTrue() {\n        assertThat(checkIfSortedUsingIterativeApproach(sortedListOfString)).isTrue();\n    }\n\n    @Test\n    void givenSingleElementList_whenUsingIterativeApproach_thenReturnTrue() {\n        assertThat(checkIfSortedUsingIterativeApproach(singletonList)).isTrue();\n    }\n\n    @Test\n    void givenUnsortedList_whenUsingIterativeApproach_thenReturnFalse() {\n        assertThat(checkIfSortedUsingIterativeApproach(unsortedListOfString)).isFalse();\n    }\n\n    @Test\n    void givenSortedListOfEmployees_whenUsingIterativeApproach_thenReturnTrue() {\n        assertThat(checkIfSortedUsingIterativeApproach(employeesSortedByName, Comparator.comparing(Employee::getName))).isTrue();\n    }\n\n    @Test\n    void givenUnsortedListOfEmployees_whenUsingIterativeApproach_thenReturnFalse() {\n        assertThat(checkIfSortedUsingIterativeApproach(employeesNotSortedByName, Comparator.comparing(Employee::getName))).isFalse();\n    }\n\n    @Test\n    void givenSortedList_whenUsingRecursion_thenReturnTrue() {\n        assertThat(checkIfSortedUsingRecursion(sortedListOfString)).isTrue();\n    }\n\n    @Test\n    void givenSingleElementList_whenUsingRecursion_thenReturnTrue() {\n        assertThat(checkIfSortedUsingRecursion(singletonList)).isTrue();\n    }\n\n    @Test\n    void givenUnsortedList_whenUsingRecursion_thenReturnFalse() {\n        assertThat(checkIfSortedUsingRecursion(unsortedListOfString)).isFalse();\n    }\n\n    @Test\n    void givenSortedList_whenUsingGuavaOrdering_thenReturnTrue() {\n        assertThat(checkIfSortedUsingOrderingClass(sortedListOfString)).isTrue();\n    }\n\n    @Test\n    void givenUnsortedList_whenUsingGuavaOrdering_thenReturnFalse() {\n        assertThat(checkIfSortedUsingOrderingClass(unsortedListOfString)).isFalse();\n    }\n\n    @Test\n    void givenSortedListOfEmployees_whenUsingGuavaOrdering_thenReturnTrue() {\n        assertThat(checkIfSortedUsingOrderingClass(employeesSortedByName, Comparator.comparing(Employee::getName))).isTrue();\n    }\n\n    @Test\n    void givenUnsortedListOfEmployees_whenUsingGuavaOrdering_thenReturnFalse() {\n        assertThat(checkIfSortedUsingOrderingClass(employeesNotSortedByName, Comparator.comparing(Employee::getName))).isFalse();\n    }\n\n    @Test\n    void givenSortedList_whenUsingGuavaComparators_thenReturnTrue() {\n        assertThat(checkIfSortedUsingComparators(sortedListOfString)).isTrue();\n    }\n\n    @Test\n    void givenUnsortedList_whenUsingGuavaComparators_thenReturnFalse() {\n        assertThat(checkIfSortedUsingComparators(unsortedListOfString)).isFalse();\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.enumstatemachine;\n\npublic enum LeaveRequestState {\n\n    Submitted {\n        @Override\n        public LeaveRequestState nextState() {\n            System.out.println(\"Starting the Leave Request and sending to Team Leader for approval.\");\n            return Escalated;\n        }\n\n        @Override\n        public String responsiblePerson() {\n            return \"Employee\";\n        }\n    },\n    Escalated {\n        @Override\n        public LeaveRequestState nextState() {\n            System.out.println(\"Reviewing the Leave Request and escalating to Department Manager.\");\n            return Approved;\n        }\n\n        @Override\n        public String responsiblePerson() {\n            return \"Team Leader\";\n        }\n    },\n    Approved {\n        @Override\n        public LeaveRequestState nextState() {\n            System.out.println(\"Approving the Leave Request.\");\n            return this;\n        }\n\n        @Override\n        public String responsiblePerson() {\n            return \"Department Manager\";\n        }\n    };\n\n    public abstract String responsiblePerson();\n\n    public abstract LeaveRequestState nextState();\n\n}\n", "test_case": "package com.baeldung.algorithms.enumstatemachine;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass LeaveRequestStateUnitTest {\n\n    @Test\n    void givenLeaveRequest_whenStateEscalated_thenResponsibleIsTeamLeader() {\n        LeaveRequestState state = LeaveRequestState.Escalated;\n\n        assertEquals( \"Team Leader\", state.responsiblePerson());\n    }\n\n\n    @Test\n    void givenLeaveRequest_whenStateApproved_thenResponsibleIsDepartmentManager() {\n        LeaveRequestState state = LeaveRequestState.Approved;\n\n        assertEquals( \"Department Manager\" , state.responsiblePerson());\n    }\n\n    @Test\n    void givenLeaveRequest_whenNextStateIsCalled_thenStateIsChanged() {\n        LeaveRequestState state = LeaveRequestState.Submitted;\n\n        state = state.nextState();\n        assertEquals(LeaveRequestState.Escalated, state);\n\n        state = state.nextState();\n        assertEquals(LeaveRequestState.Approved, state);\n\n        state = state.nextState();\n        assertEquals(LeaveRequestState.Approved, state);\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.printtriangles;\n\nimport org.apache.commons.lang3.StringUtils;\n\npublic class PrintTriangleExamples {\n\n    public static String printARightTriangle(int N) {\n        StringBuilder result = new StringBuilder();\n        for (int r = 1; r <= N; r++) {\n            for (int j = 1; j <= r; j++) {\n                result.append(\"*\");\n            }\n            result.append(System.lineSeparator());\n        }\n        return result.toString();\n    }\n\n    public static String printAnIsoscelesTriangle(int N) {\n        StringBuilder result = new StringBuilder();\n        for (int r = 1; r <= N; r++) {\n            for (int sp = 1; sp <= N - r; sp++) {\n                result.append(\" \");\n            }\n            for (int c = 1; c <= (r * 2) - 1; c++) {\n                result.append(\"*\");\n            }\n            result.append(System.lineSeparator());\n        }\n        return result.toString();\n    }\n\n    public static String printAnIsoscelesTriangleUsingStringUtils(int N) {\n        StringBuilder result = new StringBuilder();\n\n        for (int r = 1; r <= N; r++) {\n            result.append(StringUtils.repeat(' ', N - r));\n            result.append(StringUtils.repeat('*', 2 * r - 1));\n            result.append(System.lineSeparator());\n        }\n        return result.toString();\n    }\n\n    public static String printAnIsoscelesTriangleUsingSubstring(int N) {\n        StringBuilder result = new StringBuilder();\n        String helperString = StringUtils.repeat(' ', N - 1) + StringUtils.repeat('*', N * 2 - 1);\n\n        for (int r = 0; r < N; r++) {\n            result.append(helperString.substring(r, N + 2 * r));\n            result.append(System.lineSeparator());\n        }\n        return result.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(printARightTriangle(5));\n        System.out.println(printAnIsoscelesTriangle(5));\n        System.out.println(printAnIsoscelesTriangleUsingStringUtils(5));\n        System.out.println(printAnIsoscelesTriangleUsingSubstring(5));\n    }\n\n}", "test_case": "package com.baeldung.algorithms.printtriangles;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nclass PrintTriangleExamplesUnitTest {\n\n    private static Object[][] rightTriangles() {\n        String expected0 = \"\";\n        \n        String expected2 = \"*\" + System.lineSeparator() \n                         + \"**\" + System.lineSeparator();\n        \n        String expected5 = \"*\" + System.lineSeparator() \n                         + \"**\" + System.lineSeparator()\n                         + \"***\" + System.lineSeparator()\n                         + \"****\" + System.lineSeparator()\n                         + \"*****\" + System.lineSeparator();\n        \n        String expected7 = \"*\" + System.lineSeparator() \n                         + \"**\" + System.lineSeparator()\n                         + \"***\" + System.lineSeparator()\n                         + \"****\" + System.lineSeparator()\n                         + \"*****\" + System.lineSeparator()\n                         + \"******\" + System.lineSeparator()\n                         + \"*******\" + System.lineSeparator();\n        \n        return new Object[][] {\n            { 0, expected0 },\n            { 2, expected2 },\n            { 5, expected5 },\n            { 7, expected7 }\n        };\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"rightTriangles\")\n    void whenPrintARightTriangleIsCalled_ThenTheCorrectStringIsReturned(int nrOfRows, String expected) {\n        String actual = PrintTriangleExamples.printARightTriangle(nrOfRows);\n\n        assertEquals(expected, actual);\n    }\n    \n    private static Object[][] isoscelesTriangles() {\n        String expected0 = \"\"; \n        \n        String expected2 = \" *\" + System.lineSeparator() \n                         + \"***\" + System.lineSeparator();\n        \n        String expected5 = \"    *\" + System.lineSeparator() \n                         + \"   ***\" + System.lineSeparator()\n                         + \"  *****\" + System.lineSeparator()\n                         + \" *******\" + System.lineSeparator()\n                         + \"*********\" + System.lineSeparator();\n        \n        String expected7 = \"      *\" + System.lineSeparator() \n                         + \"     ***\" + System.lineSeparator()\n                         + \"    *****\" + System.lineSeparator()\n                         + \"   *******\" + System.lineSeparator()\n                         + \"  *********\" + System.lineSeparator()\n                         + \" ***********\" + System.lineSeparator()\n                         + \"*************\" + System.lineSeparator();\n        \n        return new Object[][] {\n            { 0, expected0 },\n            { 2, expected2 },\n            { 5, expected5 },\n            { 7, expected7 }\n        };\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"isoscelesTriangles\")\n    void whenPrintAnIsoscelesTriangleIsCalled_ThenTheCorrectStringIsReturned(int nrOfRows, String expected) {\n        String actual = PrintTriangleExamples.printAnIsoscelesTriangle(nrOfRows);\n\n        assertEquals(expected, actual);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"isoscelesTriangles\")\n    public void whenPrintAnIsoscelesTriangleUsingStringUtilsIsCalled_ThenTheCorrectStringIsReturned(int nrOfRows, String expected) {\n        String actual = PrintTriangleExamples.printAnIsoscelesTriangleUsingStringUtils(nrOfRows);\n\n        assertEquals(expected, actual);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"isoscelesTriangles\")\n    public void whenPrintAnIsoscelesTriangleUsingSubstringIsCalled_ThenTheCorrectStringIsReturned(int nrOfRows, String expected) {\n        String actual = PrintTriangleExamples.printAnIsoscelesTriangleUsingSubstring(nrOfRows);\n\n        assertEquals(expected, actual);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.romannumerals;\n\nimport java.util.List;\n\nclass RomanArabicConverter {\n\n    public static int romanToArabic(String input) {\n        String romanNumeral = input.toUpperCase();\n        int result = 0;\n        \n        List<RomanNumeral> romanNumerals = RomanNumeral.getReverseSortedValues();\n\n        int i = 0;\n\n        while ((romanNumeral.length() > 0) && (i < romanNumerals.size())) {\n            RomanNumeral symbol = romanNumerals.get(i);\n            if (romanNumeral.startsWith(symbol.name())) {\n                result += symbol.getValue();\n                romanNumeral = romanNumeral.substring(symbol.name().length());\n            } else {\n                i++;\n            }\n        }\n        if (romanNumeral.length() > 0) {\n            throw new IllegalArgumentException(input + \" cannot be converted to a Roman Numeral\");\n        }\n\n        return result;\n    }\n\n    public static String arabicToRoman(int number) {\n        if ((number <= 0) || (number > 4000)) {\n            throw new IllegalArgumentException(number + \" is not in range (0,4000]\");\n        }\n\n        List<RomanNumeral> romanNumerals = RomanNumeral.getReverseSortedValues();\n\n        int i = 0;\n        StringBuilder sb = new StringBuilder();\n\n        while (number > 0 && i < romanNumerals.size()) {\n            RomanNumeral currentSymbol = romanNumerals.get(i);\n            if (currentSymbol.getValue() <= number) {\n                sb.append(currentSymbol.name());\n                number -= currentSymbol.getValue();\n            } else {\n                i++;\n            }\n        }\n        return sb.toString();\n    }\n}\n", "test_case": "package com.baeldung.algorithms.romannumerals;\n\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.Test;\n\nclass RomanArabicConverterUnitTest {\n\n    @Test\n    void given2018Roman_WhenConvertingToArabic_ThenReturn2018() {\n\n        String roman2018 = \"MMXVIII\";\n\n        int result = RomanArabicConverter.romanToArabic(roman2018);\n\n        assertThat(result).isEqualTo(2018);\n    }\n\n    @Test\n    void given1999Arabic_WhenConvertingToRoman_ThenReturnMCMXCIX() {\n\n        int arabic1999 = 1999;\n\n        String result = RomanArabicConverter.arabicToRoman(arabic1999);\n\n        assertThat(result).isEqualTo(\"MCMXCIX\");\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.twopointertechnique;\n\npublic class LinkedListFindMiddle {\n\n    public <T> T findMiddle(MyNode<T> head) {\n        MyNode<T> slowPointer = head;\n        MyNode<T> fastPointer = head;\n\n        while (fastPointer.next != null && fastPointer.next.next != null) {\n            fastPointer = fastPointer.next.next;\n            slowPointer = slowPointer.next;\n        }\n        return slowPointer.data;\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.twopointertechnique;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.Test;\n\nclass LinkedListFindMiddleUnitTest {\n\n    LinkedListFindMiddle linkedListFindMiddle = new LinkedListFindMiddle();\n\n    @Test\n    void givenLinkedListOfMyNodes_whenLinkedListFindMiddle_thenCorrect() {\n\n        MyNode<String> head = createNodesList(8);\n\n        assertThat(linkedListFindMiddle.findMiddle(head)).isEqualTo(\"4\");\n\n        head = createNodesList(9);\n\n        assertThat(linkedListFindMiddle.findMiddle(head)).isEqualTo(\"5\");\n    }\n\n    private static MyNode<String> createNodesList(int n) {\n\n        MyNode<String> head = new MyNode<String>(\"1\");\n        MyNode<String> current = head;\n\n        for (int i = 2; i <= n; i++) {\n            MyNode<String> newNode = new MyNode<String>(String.valueOf(i));\n            current.setNext(newNode);\n            current = newNode;\n        }\n\n        return head;\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.twopointertechnique;\n\npublic class RotateArray {\n\n    public void rotate(int[] input, int step) {\n        step %= input.length;\n        reverse(input, 0, input.length - 1);\n        reverse(input, 0, step - 1);\n        reverse(input, step, input.length - 1);\n    }\n\n    private void reverse(int[] input, int start, int end) {\n        while (start < end) {\n            int temp = input[start];\n            input[start] = input[end];\n            input[end] = temp;\n            start++;\n            end--;\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.twopointertechnique;\n\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n\nimport org.junit.jupiter.api.Test;\n\nclass RotateArrayUnitTest {\n\n    private RotateArray rotateArray = new RotateArray();\n\n    private int[] inputArray;\n\n    private int step;\n\n    @Test\n    void givenAnArrayOfIntegers_whenRotateKsteps_thenCorrect() {\n\n        inputArray = new int[] { 1, 2, 3, 4, 5, 6, 7 };\n        step = 4;\n\n        rotateArray.rotate(inputArray, step);\n\n        assertThat(inputArray).containsExactly(new int[] { 4, 5, 6, 7, 1, 2, 3 });\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.twopointertechnique;\n\npublic class TwoSum {\n\n    public boolean twoSum(int[] input, int targetValue) {\n\n        int pointerOne = 0;\n        int pointerTwo = input.length - 1;\n\n        while (pointerOne < pointerTwo) {\n            int sum = input[pointerOne] + input[pointerTwo];\n\n            if (sum == targetValue) {\n                return true;\n            } else if (sum < targetValue) {\n                pointerOne++;\n            } else {\n                pointerTwo--;\n            }\n        }\n\n        return false;\n    }\n\n    public boolean twoSumSlow(int[] input, int targetValue) {\n\n        for (int i = 0; i < input.length; i++) {\n            for (int j = 1; j < input.length; j++) {\n                if (input[i] + input[j] == targetValue) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.twopointertechnique;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nclass TwoSumUnitTest {\n\n    private TwoSum twoSum = new TwoSum();\n\n    private int[] sortedArray;\n\n    private int targetValue;\n\n    @Test\n    void givenASortedArrayOfIntegers_whenTwoSumSlow_thenPairExists() {\n\n        sortedArray = new int[] { 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9 };\n\n        targetValue = 12;\n\n        assertTrue(twoSum.twoSumSlow(sortedArray, targetValue));\n    }\n\n    @Test\n    void givenASortedArrayOfIntegers_whenTwoSumSlow_thenPairDoesNotExists() {\n\n        sortedArray = new int[] { 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9 };\n\n        targetValue = 20;\n\n        assertFalse(twoSum.twoSumSlow(sortedArray, targetValue));\n    }\n\n    @Test\n    void givenASortedArrayOfIntegers_whenTwoSum_thenPairExists() {\n\n        sortedArray = new int[] { 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9 };\n\n        targetValue = 12;\n\n        assertTrue(twoSum.twoSum(sortedArray, targetValue));\n    }\n\n    @Test\n    void givenASortedArrayOfIntegers_whenTwoSum_thenPairDoesNotExists() {\n\n        sortedArray = new int[] { 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9 };\n\n        targetValue = 20;\n\n        assertFalse(twoSum.twoSum(sortedArray, targetValue));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.folding;\n\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\n/**\n * Calculate a hash value for the strings using the folding technique.\n * \n * The implementation serves only to the illustration purposes and is far\n * from being the most efficient. \n * \n * @author A.Shcherbakov\n *\n */\npublic class FoldingHash {\n\n    /**\n     * Calculate the hash value of a given string.\n     * \n     * @param str Assume it is not null\n     * @param groupSize the group size in the folding technique\n     * @param maxValue defines a max value that the hash may acquire (exclusive)     \n     * @return integer value from 0 (inclusive) to maxValue (exclusive)\n     */\n    public int hash(String str, int groupSize, int maxValue) {\n        final int[] codes = this.toAsciiCodes(str);\n        return IntStream.range(0, str.length())\n            .filter(i -> i % groupSize == 0)\n            .mapToObj(i -> extract(codes, i, groupSize))\n            .map(block -> concatenate(block))\n            .reduce(0, (a, b) -> (a + b) % maxValue);\n    }\n\n    /**\n     * Returns a new array of given length whose elements are take from \n     * the original one starting from the offset.\n     *  \n     * If the original array has not enough elements, the returning array will contain \n     * element from the offset till the end of the original array.\n     *  \n     * @param numbers original array. Assume it is not null.\n     * @param offset index of the element to start from. Assume it is less than the size of the array \n     * @param length max size of the resulting array\n     * @return\n     */\n    public int[] extract(int[] numbers, int offset, int length) {\n        final int defect = numbers.length - (offset + length);\n        final int s = defect < 0 ? length + defect : length;\n        int[] result = new int[s];\n        for (int index = 0; index < s; index++) {\n            result[index] = numbers[index + offset];\n        }\n        return result;\n    }\n\n    /**\n     * Concatenate the numbers into a single number as if they were strings.\n     * Assume that the procedure does not suffer from the overflow.\n     * @param numbers integers to concatenate\n     * @return\n     */\n    public int concatenate(int[] numbers) {\n        final String merged = IntStream.of(numbers)\n            .mapToObj(number -> \"\" + number)\n            .collect(Collectors.joining());\n        return Integer.parseInt(merged, 10);\n    }\n\n    /**\n     * Convert the string into its characters' ASCII codes.\n     * @param str input string\n     * @return\n     */\n    private int[] toAsciiCodes(String str) {\n        return str.chars()\n            .toArray();\n    }\n}\n", "test_case": "package com.baeldung.folding;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\nclass FoldingHashUnitTest {\n\n    @Test\n    void givenStringJavaLanguage_whenSize2Capacity100000_then48933() throws Exception {\n        final FoldingHash hasher = new FoldingHash();\n        final int value = hasher.hash(\"Java language\", 2, 100_000);\n        assertEquals(value, 48933);\n    }\n\n    @Test\n    void givenStringVaJaLanguage_whenSize2Capacity100000_thenSameAsJavaLanguage() throws Exception {\n        final FoldingHash hasher = new FoldingHash();\n        final int java = hasher.hash(\"Java language\", 2, 100_000);\n        final int vaja = hasher.hash(\"vaJa language\", 2, 100_000);\n        assertTrue(java == vaja);\n    }\n\n    @Test\n    void givenSingleElementArray_whenOffset0Size2_thenSingleElement() throws Exception {\n        final FoldingHash hasher = new FoldingHash();\n        final int[] value = hasher.extract(new int[] { 5 }, 0, 2);\n        assertArrayEquals(new int[] { 5 }, value);\n    }\n\n    @Test\n    void givenFiveElementArray_whenOffset0Size3_thenFirstThreeElements() throws Exception {\n        final FoldingHash hasher = new FoldingHash();\n        final int[] value = hasher.extract(new int[] { 1, 2, 3, 4, 5 }, 0, 3);\n        assertArrayEquals(new int[] { 1, 2, 3 }, value);\n    }\n\n    @Test\n    void givenFiveElementArray_whenOffset1Size2_thenTwoElements() throws Exception {\n        final FoldingHash hasher = new FoldingHash();\n        final int[] value = hasher.extract(new int[] { 1, 2, 3, 4, 5 }, 1, 2);\n        assertArrayEquals(new int[] { 2, 3 }, value);\n    }\n\n    @Test\n    void givenFiveElementArray_whenOffset2SizeTooBig_thenElementsToTheEnd() throws Exception {\n        final FoldingHash hasher = new FoldingHash();\n        final int[] value = hasher.extract(new int[] { 1, 2, 3, 4, 5 }, 2, 2000);\n        assertArrayEquals(new int[] { 3, 4, 5 }, value);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.middleelementlookup;\n\nimport java.util.LinkedList;\nimport java.util.Optional;\n\npublic class MiddleElementLookup {\n\n    public static Optional<String> findMiddleElementLinkedList(LinkedList<String> linkedList) {\n        if (linkedList == null || linkedList.isEmpty()) {\n            return Optional.empty();\n        }\n\n        return Optional.ofNullable(linkedList.get((linkedList.size() - 1) / 2));\n    }\n\n    public static Optional<String> findMiddleElementFromHead(Node head) {\n        if (head == null) {\n            return Optional.empty();\n        }\n\n        // calculate the size of the list\n        Node current = head;\n        int size = 1;\n        while (current.hasNext()) {\n            current = current.next();\n            size++;\n        }\n\n        // iterate till the middle element\n        current = head;\n        for (int i = 0; i < (size - 1) / 2; i++) {\n            current = current.next();\n        }\n\n        return Optional.ofNullable(current.data());\n    }\n\n    public static Optional<String> findMiddleElementFromHead1PassRecursively(Node head) {\n        if (head == null) {\n            return Optional.empty();\n        }\n\n        MiddleAuxRecursion middleAux = new MiddleAuxRecursion();\n        findMiddleRecursively(head, middleAux);\n        return Optional.ofNullable(middleAux.middle.data());\n    }\n\n    private static void findMiddleRecursively(Node node, MiddleAuxRecursion middleAux) {\n        if (node == null) {\n            // reached the end\n            middleAux.length = middleAux.length / 2;\n            return;\n        }\n        middleAux.length++;\n        findMiddleRecursively(node.next(), middleAux);\n\n        if (middleAux.length == 0) {\n            // found the middle\n            middleAux.middle = node;\n        }\n\n        middleAux.length--;\n    }\n\n    public static Optional<String> findMiddleElementFromHead1PassIteratively(Node head) {\n        if (head == null) {\n            return Optional.empty();\n        }\n\n        Node slowPointer = head;\n        Node fastPointer = head;\n\n        while (fastPointer.hasNext() && fastPointer.next()\n            .hasNext()) {\n            fastPointer = fastPointer.next()\n                .next();\n            slowPointer = slowPointer.next();\n        }\n\n        return Optional.ofNullable(slowPointer.data());\n    }\n\n    private static class MiddleAuxRecursion {\n        Node middle;\n        int length = 0;\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\nimport com.baeldung.algorithms.middleelementlookup.MiddleElementLookup;\nimport com.baeldung.algorithms.middleelementlookup.Node;\n\nimport java.util.LinkedList;\n\nimport org.junit.jupiter.api.Test;\n\nclass MiddleElementLookupUnitTest {\n\n    @Test\n    void whenFindingMiddleLinkedList_thenMiddleFound() {\n        assertEquals(\"3\", MiddleElementLookup\n          .findMiddleElementLinkedList(createLinkedList(5))\n          .get());\n        assertEquals(\"2\", MiddleElementLookup\n          .findMiddleElementLinkedList(createLinkedList(4))\n          .get());\n    }\n\n    @Test\n    void whenFindingMiddleFromHead_thenMiddleFound() {\n        assertEquals(\"3\", MiddleElementLookup\n          .findMiddleElementFromHead(createNodesList(5))\n          .get());\n        assertEquals(\"2\", MiddleElementLookup\n          .findMiddleElementFromHead(createNodesList(4))\n          .get());\n    }\n\n    @Test\n    void whenFindingMiddleFromHead1PassRecursively_thenMiddleFound() {\n        assertEquals(\"3\", MiddleElementLookup\n          .findMiddleElementFromHead1PassRecursively(createNodesList(5))\n          .get());\n        assertEquals(\"2\", MiddleElementLookup\n          .findMiddleElementFromHead1PassRecursively(createNodesList(4))\n          .get());\n    }\n\n    @Test\n    void whenFindingMiddleFromHead1PassIteratively_thenMiddleFound() {\n        assertEquals(\"3\", MiddleElementLookup\n          .findMiddleElementFromHead1PassIteratively(createNodesList(5))\n          .get());\n        assertEquals(\"2\", MiddleElementLookup\n          .findMiddleElementFromHead1PassIteratively(createNodesList(4))\n          .get());\n    }\n\n    @Test\n    void whenListEmptyOrNull_thenMiddleNotFound() {\n        // null list\n        assertFalse(MiddleElementLookup\n          .findMiddleElementLinkedList(null)\n          .isPresent());\n        assertFalse(MiddleElementLookup\n          .findMiddleElementFromHead(null)\n          .isPresent());\n        assertFalse(MiddleElementLookup\n          .findMiddleElementFromHead1PassIteratively(null)\n          .isPresent());\n        assertFalse(MiddleElementLookup\n          .findMiddleElementFromHead1PassRecursively(null)\n          .isPresent());\n\n        // empty LinkedList\n        assertFalse(MiddleElementLookup\n          .findMiddleElementLinkedList(new LinkedList<>())\n          .isPresent());\n\n        // LinkedList with nulls\n        LinkedList<String> nullsList = new LinkedList<>();\n        nullsList.add(null);\n        nullsList.add(null);\n        assertFalse(MiddleElementLookup\n          .findMiddleElementLinkedList(nullsList)\n          .isPresent());\n\n        // nodes with null values\n        assertFalse(MiddleElementLookup\n          .findMiddleElementFromHead(new Node(null))\n          .isPresent());\n        assertFalse(MiddleElementLookup\n          .findMiddleElementFromHead1PassIteratively(new Node(null))\n          .isPresent());\n        assertFalse(MiddleElementLookup\n          .findMiddleElementFromHead1PassRecursively(new Node(null))\n          .isPresent());\n    }\n\n    private static LinkedList<String> createLinkedList(int n) {\n        LinkedList<String> list = new LinkedList<>();\n\n        for (int i = 1; i <= n; i++) {\n            list.add(String.valueOf(i));\n        }\n\n        return list;\n    }\n\n    private static Node createNodesList(int n) {\n        Node head = new Node(\"1\");\n        Node current = head;\n\n        for (int i = 2; i <= n; i++) {\n            Node newNode = new Node(String.valueOf(i));\n            current.setNext(newNode);\n            current = newNode;\n        }\n\n        return head;\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.multiswarm;\n\nimport java.util.Arrays;\nimport java.util.Random;\n\n/**\n * Represents a collection of {@link Swarm}.\n * \n * @author Donato Rimenti\n *\n */\npublic class Multiswarm {\n\n\t/**\n\t * The swarms managed by this multiswarm.\n\t */\n\tprivate Swarm[] swarms;\n\n\t/**\n\t * The best position found within all the {@link #swarms}.\n\t */\n\tprivate long[] bestPosition;\n\n\t/**\n\t * The best fitness score found within all the {@link #swarms}.\n\t */\n\tprivate double bestFitness = Double.NEGATIVE_INFINITY;\n\n\t/**\n\t * A random generator.\n\t */\n\tprivate Random random = new Random();\n\n\t/**\n\t * The fitness function used to determine how good is a particle.\n\t */\n\tprivate FitnessFunction fitnessFunction;\n\n\t/**\n\t * Instantiates a new Multiswarm.\n\t * \n\t * @param numSwarms\n\t *            the number of {@link #swarms}\n\t * @param particlesPerSwarm\n\t *            the number of particle for each {@link #swarms}\n\t * @param fitnessFunction\n\t *            the {@link #fitnessFunction}\n\t */\n\tpublic Multiswarm(int numSwarms, int particlesPerSwarm, FitnessFunction fitnessFunction) {\n\t\tthis.fitnessFunction = fitnessFunction;\n\t\tthis.swarms = new Swarm[numSwarms];\n\t\tfor (int i = 0; i < numSwarms; i++) {\n\t\t\tswarms[i] = new Swarm(particlesPerSwarm);\n\t\t}\n\t}\n\n\t/**\n\t * Main loop of the algorithm. Iterates all particles of all\n\t * {@link #swarms}. For each particle, computes the new fitness and checks\n\t * if a new best position has been found among itself, the swarm and all the\n\t * swarms and finally updates the particle position and speed.\n\t */\n\tpublic void mainLoop() {\n\t\tfor (Swarm swarm : swarms) {\n\t\t\tfor (Particle particle : swarm.getParticles()) {\n\n\t\t\t\tlong[] particleOldPosition = particle.getPosition().clone();\n\n\t\t\t\t// Calculate the particle fitness.\n\t\t\t\tparticle.setFitness(fitnessFunction.getFitness(particleOldPosition));\n\n\t\t\t\t// Check if a new best position has been found for the particle\n\t\t\t\t// itself, within the swarm and the multiswarm.\n\t\t\t\tif (particle.getFitness() > particle.getBestFitness()) {\n\t\t\t\t\tparticle.setBestFitness(particle.getFitness());\n\t\t\t\t\tparticle.setBestPosition(particleOldPosition);\n\n\t\t\t\t\tif (particle.getFitness() > swarm.getBestFitness()) {\n\t\t\t\t\t\tswarm.setBestFitness(particle.getFitness());\n\t\t\t\t\t\tswarm.setBestPosition(particleOldPosition);\n\n\t\t\t\t\t\tif (swarm.getBestFitness() > bestFitness) {\n\t\t\t\t\t\t\tbestFitness = swarm.getBestFitness();\n\t\t\t\t\t\t\tbestPosition = swarm.getBestPosition().clone();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Updates the particle position by adding the speed to the\n\t\t\t\t// actual position.\n\t\t\t\tlong[] position = particle.getPosition();\n\t\t\t\tlong[] speed = particle.getSpeed();\n\n\t\t\t\tposition[0] += speed[0];\n\t\t\t\tposition[1] += speed[1];\n\n\t\t\t\t// Updates the particle speed.\n\t\t\t\tspeed[0] = getNewParticleSpeedForIndex(particle, swarm, 0);\n\t\t\t\tspeed[1] = getNewParticleSpeedForIndex(particle, swarm, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Computes a new speed for a given particle of a given swarm on a given\n\t * axis. The new speed is computed using the formula:\n\t * \n\t * <pre>\n\t * ({@link Constants#INERTIA_FACTOR} * {@link Particle#getSpeed()}) + \n\t * (({@link Constants#COGNITIVE_WEIGHT} * random(0,1)) * ({@link Particle#getBestPosition()} - {@link Particle#getPosition()})) +\n\t * (({@link Constants#SOCIAL_WEIGHT} * random(0,1)) * ({@link Swarm#getBestPosition()} - {@link Particle#getPosition()})) + \n\t * (({@link Constants#GLOBAL_WEIGHT} * random(0,1)) * ({@link #bestPosition} - {@link Particle#getPosition()}))\n\t * </pre>\n\t *\n\t * @param particle\n\t *            the particle whose new speed needs to be computed\n\t * @param swarm\n\t *            the swarm which contains the particle\n\t * @param index\n\t *            the index of the particle axis whose speeds needs to be\n\t *            computed\n\t * @return the new speed of the particle passed on the given axis\n\t */\n\tprivate int getNewParticleSpeedForIndex(Particle particle, Swarm swarm, int index) {\n\t\treturn (int) ((Constants.INERTIA_FACTOR * particle.getSpeed()[index])\n\t\t\t\t+ (randomizePercentage(Constants.COGNITIVE_WEIGHT)\n\t\t\t\t\t\t* (particle.getBestPosition()[index] - particle.getPosition()[index]))\n\t\t\t\t+ (randomizePercentage(Constants.SOCIAL_WEIGHT)\n\t\t\t\t\t\t* (swarm.getBestPosition()[index] - particle.getPosition()[index]))\n\t\t\t\t+ (randomizePercentage(Constants.GLOBAL_WEIGHT)\n\t\t\t\t\t\t* (bestPosition[index] - particle.getPosition()[index])));\n\t}\n\n\t/**\n\t * Returns a random number between 0 and the value passed as argument.\n\t *\n\t * @param value\n\t *            the value to randomize\n\t * @return a random value between 0 and the one passed as argument\n\t */\n\tprivate double randomizePercentage(double value) {\n\t\treturn random.nextDouble() * value;\n\t}\n\n\t/**\n\t * Gets the {@link #bestPosition}.\n\t *\n\t * @return the {@link #bestPosition}\n\t */\n\tpublic long[] getBestPosition() {\n\t\treturn bestPosition;\n\t}\n\n\t/**\n\t * Gets the {@link #bestFitness}.\n\t *\n\t * @return the {@link #bestFitness}\n\t */\n\tpublic double getBestFitness() {\n\t\treturn bestFitness;\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see java.lang.Object#hashCode()\n\t */\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tlong temp;\n\t\ttemp = Double.doubleToLongBits(bestFitness);\n\t\tresult = prime * result + (int) (temp ^ (temp >>> 32));\n\t\tresult = prime * result + Arrays.hashCode(bestPosition);\n\t\tresult = prime * result + ((fitnessFunction == null) ? 0 : fitnessFunction.hashCode());\n\t\tresult = prime * result + ((random == null) ? 0 : random.hashCode());\n\t\tresult = prime * result + Arrays.hashCode(swarms);\n\t\treturn result;\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see java.lang.Object#equals(java.lang.Object)\n\t */\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tMultiswarm other = (Multiswarm) obj;\n\t\tif (Double.doubleToLongBits(bestFitness) != Double.doubleToLongBits(other.bestFitness))\n\t\t\treturn false;\n\t\tif (!Arrays.equals(bestPosition, other.bestPosition))\n\t\t\treturn false;\n\t\tif (fitnessFunction == null) {\n\t\t\tif (other.fitnessFunction != null)\n\t\t\t\treturn false;\n\t\t} else if (!fitnessFunction.equals(other.fitnessFunction))\n\t\t\treturn false;\n\t\tif (random == null) {\n\t\t\tif (other.random != null)\n\t\t\t\treturn false;\n\t\t} else if (!random.equals(other.random))\n\t\t\treturn false;\n\t\tif (!Arrays.equals(swarms, other.swarms))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\t/*\n\t * (non-Javadoc)\n\t * \n\t * @see java.lang.Object#toString()\n\t */\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Multiswarm [swarms=\" + Arrays.toString(swarms) + \", bestPosition=\" + Arrays.toString(bestPosition)\n\t\t\t\t+ \", bestFitness=\" + bestFitness + \", random=\" + random + \", fitnessFunction=\" + fitnessFunction + \"]\";\n\t}\n\n}\n", "test_case": "package com.baeldung.algorithms.multiswarm;\n\nimport org.junit.Assert;\nimport org.junit.Rule;\nimport org.junit.Test;\n\nimport com.baeldung.algorithms.support.MayFailRule;\n\n/**\n * Test for {@link Multiswarm}.\n * \n * @author Donato Rimenti\n * \n */\npublic class MultiswarmUnitTest {\n\n\t/**\n\t * Rule for handling expected failures. We use this since this test may\n\t * actually fail due to bad luck in the random generation.\n\t */\n\t@Rule\n\tpublic MayFailRule mayFailRule = new MayFailRule();\n\n\t/**\n\t * Tests the multiswarm algorithm with a generic problem. The problem is the\n\t * following: <br>\n\t * <br>\n\t * In League of Legends, a player's Effective Health when defending against\n\t * physical damage is given by\u00a0E=H(100+A)/100, where\u00a0H\u00a0is health and A is\n\t * armor. Health costs 2.5 gold per unit, and Armor costs 18 gold per unit.\n\t * You have 3600 gold, and you need to optimize the effectiveness E of your\n\t * health and armor to survive as long as possible against the enemy team's\n\t * attacks. How much of each should you buy? <br>\n\t * <br>\n\t * The solution is H = 1080, A = 50 for a total fitness of 1620. Tested with\n\t * 50 swarms each with 1000 particles.\n\t */\n\t@Test\n\tpublic void givenMultiswarm_whenThousandIteration_thenSolutionFound() {\n\t\tMultiswarm multiswarm = new Multiswarm(50, 1000, new LolFitnessFunction());\n\n\t\t// Iterates 1000 times through the main loop and prints the result.\n\t\tfor (int i = 0; i < 1000; i++) {\n\t\t\tmultiswarm.mainLoop();\n\t\t}\n\n\t\tSystem.out.println(\"Best fitness found: \" + multiswarm.getBestFitness() + \"[\" + multiswarm.getBestPosition()[0]\n\t\t\t\t+ \",\" + multiswarm.getBestPosition()[1] + \"]\");\n\t\tAssert.assertEquals(1080, multiswarm.getBestPosition()[0]);\n\t\tAssert.assertEquals(50, multiswarm.getBestPosition()[1]);\n\t\tAssert.assertEquals(1620, (int) multiswarm.getBestFitness());\n\t}\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.stringpermutation;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.collections4.iterators.PermutationIterator;\n\npublic class StringPermutationsApache {\n\n    public List<String> eagerPermutationWithRepetitions(final String string) {\n        final List<Character> characters = Helper.toCharacterList(string);\n        return CollectionUtils.permutations(characters)\n            .stream()\n            .map(Helper::toString)\n            .collect(Collectors.toList());\n    }\n\n    public List<String> lazyPermutationWithoutRepetitions(final String string) {\n        final List<Character> characters = Helper.toCharacterList(string);\n        final PermutationIterator<Character> permutationIterator = new PermutationIterator<>(characters);\n        final List<String> result = new ArrayList<>();\n        while (permutationIterator.hasNext()) {\n            result.add(Helper.toString(permutationIterator.next()));\n        }\n        return result;\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.stringpermutation;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.List;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\n\nclass StringPermutationsApacheUnitTest {\n\n    @ParameterizedTest\n    @CsvSource({\"abc, 6\",\n                \"hello, 120\",\n                \"aaaaaa, 720\"})\n    void testPermutationsWithRepetitions(String string, int numberOfPermutations) {\n        StringPermutationsApache permutationGenerator = new StringPermutationsApache();\n        final List<String> permutations = permutationGenerator.eagerPermutationWithRepetitions(string);\n        final int size = permutations.size();\n        assertThat(permutations)\n            .as(\"\\\"%s\\\" should have %d permutation, but had %d\", string, numberOfPermutations, size)\n            .hasSize(numberOfPermutations);\n    }\n\n    @ParameterizedTest\n    @CsvSource({\"abc, 6\",\n        \"hello, 120\",\n        \"aaaaaa, 720\"})\n    void testPermutationsWithoutRepetitions(String string, int numberOfPermutations) {\n        StringPermutationsApache permutationGenerator = new StringPermutationsApache();\n        final List<String> permutations = permutationGenerator.lazyPermutationWithoutRepetitions(string);\n        int size = permutations.size();\n        assertThat(size)\n            .as(\"\\\"%s\\\" should have %d permutation, but had %d\", string, numberOfPermutations, size)\n            .isEqualTo(numberOfPermutations);\n    }\n}"}
{"code_source": "package com.baeldung.algorithms.stringpermutation;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport org.paukov.combinatorics3.Generator;\nimport org.paukov.combinatorics3.PermutationGenerator.TreatDuplicatesAs;\n\npublic class StringPermutationsCombinatoricsLib {\n\npublic List<String> permutationWithoutRepetitions(final String string) {\n    List<Character> chars = Helper.toCharacterList(string);\n    return Generator.permutation(chars)\n        .simple()\n        .stream()\n        .map(Helper::toString)\n        .collect(Collectors.toList());\n}\n\n    public List<String> permutationWithRepetitions(final String string) {\n        List<Character> chars = Helper.toCharacterList(string);\n        return Generator.permutation(chars)\n            .simple(TreatDuplicatesAs.IDENTICAL)\n            .stream()\n            .map(Helper::toString)\n            .collect(Collectors.toList());\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.stringpermutation;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.List;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\n\nclass StringPermutationsCombinatoricsLibUnitTest {\n\n    @ParameterizedTest\n    @CsvSource({\"abc, 6\",\n                \"hello, 120\",\n                \"aaaaaa, 720\"})\n    void testPermutationsWithRepetitions(String string, int numberOfPermutations) {\n        StringPermutationsCombinatoricsLib permutationGenerator = new StringPermutationsCombinatoricsLib();\n        final List<String> permutations = permutationGenerator.permutationWithRepetitions(string);\n        final int size = permutations.size();\n        assertThat(permutations)\n            .as(\"\\\"%s\\\" should have %d permutation, but had %d\", string, numberOfPermutations, size)\n            .hasSize(numberOfPermutations);\n    }\n\n    @ParameterizedTest\n    @CsvSource({\"abc, 6\",\n                \"hello, 60\",\n                \"aaaaaa, 1\"})\n    void testPermutationsWithoutRepetitions(String string, int numberOfPermutations) {\n        StringPermutationsCombinatoricsLib permutationGenerator = new StringPermutationsCombinatoricsLib();\n        final List<String> permutations = permutationGenerator.permutationWithoutRepetitions(string);\n        final int size = permutations.size();\n        assertThat(permutations)\n            .as(\"\\\"%s\\\" should have %d permutation, but had %d\", string, numberOfPermutations, size)\n            .hasSize(numberOfPermutations);\n    }\n}"}
{"code_source": "package com.baeldung.algorithms.stringpermutation;\n\nimport com.google.common.collect.Collections2;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class StringPermutationsGuava {\n\n    public List<String> permutationWithRepetitions(final String string) {\n        final List<Character> characters = Helper.toCharacterList(string);\n        return Collections2.permutations(characters).stream()\n            .map(Helper::toString)\n            .collect(Collectors.toList());\n    }\n    public List<String> permutationWithoutRepetitions(final String string) {\n        final List<Character> characters = Helper.toCharacterList(string);\n        return Collections2.orderedPermutations(characters).stream()\n            .map(Helper::toString)\n            .collect(Collectors.toList());\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.stringpermutation;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.List;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\n\nclass StringPermutationsGuavaUnitTest {\n\n    @ParameterizedTest\n    @CsvSource({\"abc, 6\",\n        \"hello, 120\",\n        \"aaaaaa, 720\"})\n    void testPermutationsWithRepetitions(String string, int numberOfPermutations) {\n        StringPermutationsGuava permutationGenerator = new StringPermutationsGuava();\n        final List<String> permutations = permutationGenerator.permutationWithRepetitions(string);\n        final int size = permutations.size();\n        assertThat(permutations)\n            .as(\"\\\"%s\\\" should have %d permutation, but had %d\", string, numberOfPermutations, size)\n            .hasSize(numberOfPermutations);\n    }\n\n    @ParameterizedTest\n    @CsvSource({\"abc, 6\",\n        \"hello, 60\",\n        \"aaaaaa, 1\"})\n    void testPermutationsWithoutRepetitions(String string, int numberOfPermutations) {\n        StringPermutationsGuava permutationGenerator = new StringPermutationsGuava();\n        final List<String> permutations = permutationGenerator.permutationWithoutRepetitions(string);\n        final int size = permutations.size();\n        assertThat(permutations)\n            .as(\"\\\"%s\\\" should have %d permutation, but had %d\", string, numberOfPermutations, size)\n            .hasSize(numberOfPermutations);\n    }\n\n}"}
{"code_source": "package com.baeldung.algorithms.smallestinteger;\n\nimport java.util.Arrays;\n\npublic class SmallestMissingPositiveInteger {\n    public static int searchInSortedArray(int[] input) {\n        for (int i = 0; i < input.length; i++) {\n            if (i != input[i]) {\n                return i;\n            }\n        }\n\n        return input.length;\n    }\n\n    public static int searchInUnsortedArraySortingFirst(int[] input) {\n        Arrays.sort(input);\n        return searchInSortedArray(input);\n    }\n\n    public static int searchInUnsortedArrayBooleanArray(int[] input) {\n        boolean[] flags = new boolean[input.length];\n        for (int number : input) {\n            if (number < flags.length) {\n                flags[number] = true;\n            }\n        }\n\n        for (int i = 0; i < flags.length; i++) {\n            if (!flags[i]) {\n                return i;\n            }\n        }\n\n        return flags.length;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.smallestinteger;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass SmallestMissingPositiveIntegerUnitTest {\n    @Test\n    void givenArrayWithThreeMissing_whenSearchInSortedArray_thenThree() {\n        int[] input = new int[] {0, 1, 2, 4, 5};\n\n        int result = SmallestMissingPositiveInteger.searchInSortedArray(input);\n\n        assertThat(result).isEqualTo(3);\n    }\n\n    @Test\n    void givenArrayWithOneAndThreeMissing_whenSearchInSortedArray_thenOne() {\n        int[] input = new int[] {0, 2, 4, 5};\n\n        int result = SmallestMissingPositiveInteger.searchInSortedArray(input);\n\n        assertThat(result).isEqualTo(1);\n    }\n\n    @Test\n    void givenArrayWithoutMissingInteger_whenSearchInSortedArray_thenArrayLength() {\n        int[] input = new int[] {0, 1, 2, 3, 4, 5};\n\n        int result = SmallestMissingPositiveInteger.searchInSortedArray(input);\n\n        assertThat(result).isEqualTo(input.length);\n    }\n\n    @Test\n    void givenArrayWithThreeMissing_whenSearchInUnsortedArraySortingFirst_thenThree() {\n        int[] input = new int[] {1, 4, 0, 5, 2};\n\n        int result = SmallestMissingPositiveInteger.searchInUnsortedArraySortingFirst(input);\n\n        assertThat(result).isEqualTo(3);\n    }\n\n    @Test\n    void givenArrayWithOneAndThreeMissing_whenSearchInUnsortedArraySortingFirst_thenOne() {\n        int[] input = new int[] {4, 2, 0, 5};\n\n        int result = SmallestMissingPositiveInteger.searchInUnsortedArraySortingFirst(input);\n\n        assertThat(result).isEqualTo(1);\n    }\n\n    @Test\n    void givenArrayWithoutMissingInteger_whenSearchInUnsortedArraySortingFirst_thenArrayLength() {\n        int[] input = new int[] {4, 5, 1, 3, 0, 2};\n\n        int result = SmallestMissingPositiveInteger.searchInUnsortedArraySortingFirst(input);\n\n        assertThat(result).isEqualTo(input.length);\n    }\n\n    @Test\n    void givenArrayWithThreeMissing_whenSearchInUnsortedArrayBooleanArray_thenThree() {\n        int[] input = new int[] {1, 4, 0, 5, 2};\n\n        int result = SmallestMissingPositiveInteger.searchInUnsortedArrayBooleanArray(input);\n\n        assertThat(result).isEqualTo(3);\n    }\n\n    @Test\n    void givenArrayWithOneAndThreeMissing_whenSearchInUnsortedArrayBooleanArray_thenOne() {\n        int[] input = new int[] {4, 2, 0, 5};\n\n        int result = SmallestMissingPositiveInteger.searchInUnsortedArrayBooleanArray(input);\n\n        assertThat(result).isEqualTo(1);\n    }\n\n    @Test\n    void givenArrayWithoutMissingInteger_whenSearchInUnsortedArrayBooleanArray_thenArrayLength() {\n        int[] input = new int[] {4, 5, 1, 3, 0, 2};\n\n        int result = SmallestMissingPositiveInteger.searchInUnsortedArrayBooleanArray(input);\n\n        assertThat(result).isEqualTo(input.length);\n    }\n\n    @Test\n    void givenArrayWithoutZero_whenSearchInUnsortedArrayBooleanArray_thenZero() {\n        int[] input = new int[] {11, 13, 14, 15};\n\n        int result = SmallestMissingPositiveInteger.searchInUnsortedArrayBooleanArray(input);\n\n        assertThat(result).isEqualTo(0);\n    }\n}"}
{"code_source": "package com.baeldung.algorithms.string;\n\npublic class EnglishAlphabetLetters {\n\n    public static boolean checkStringForAllTheLetters(String input) {\n        boolean[] visited = new boolean[26];\n\n        int index = 0;\n\n        for (int id = 0; id < input.length(); id++) {\n            if ('a' <= input.charAt(id) && input.charAt(id) <= 'z') {\n                index = input.charAt(id) - 'a';\n            } else if ('A' <= input.charAt(id) && input.charAt(id) <= 'Z') {\n                index = input.charAt(id) - 'A';\n            }\n            visited[index] = true;\n        }\n\n        for (int id = 0; id < 26; id++) {\n            if (!visited[id]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static boolean checkStringForAllLetterUsingStream(String input) {\n        long c = input.toLowerCase().chars().filter(ch -> ch >= 'a' && ch <= 'z').distinct().count();\n        return c == 26;\n    }\n\n    public static void main(String[] args) {\n        checkStringForAllLetterUsingStream(\"intit\");\n    }\n}", "test_case": "package com.baeldung.algorithms.string;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\npublic class EnglishAlphabetLettersUnitTest {\n\n    @Test\n    void givenString_whenContainsAllCharacter_thenTrue() {\n        String input = \"Farmer jack realized that big yellow quilts were expensive\";\n        Assertions.assertTrue(EnglishAlphabetLetters.checkStringForAllTheLetters(input));\n    }\n\n    @Test\n    void givenString_whenContainsAllCharacter_thenUsingStreamExpectTrue() {\n        String input = \"Farmer jack realized that big yellow quilts were expensive\";\n        Assertions.assertTrue(EnglishAlphabetLetters.checkStringForAllLetterUsingStream(input));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.string;\n\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class LongestSubstringNonRepeatingCharacters {\n\n    public static String getUniqueCharacterSubstringBruteForce(String input) {\n        String output = \"\";\n        for (int start = 0; start < input.length(); start++) {\n            Set<Character> visited = new HashSet<>();\n            int end = start;\n            for (; end < input.length(); end++) {\n                char currChar = input.charAt(end);\n                if (visited.contains(currChar)) {\n                    break;\n                } else {\n                    visited.add(currChar);\n                }\n            }\n            if (output.length() < end - start + 1) {\n                output = input.substring(start, end);\n            }\n        }\n        return output;\n    }\n\n    public static String getUniqueCharacterSubstring(String input) {\n        Map<Character, Integer> visited = new HashMap<>();\n        String output = \"\";\n        for (int start = 0, end = 0; end < input.length(); end++) {\n            char currChar = input.charAt(end);\n            if (visited.containsKey(currChar)) {\n                start = Math.max(visited.get(currChar) + 1, start);\n            }\n            if (output.length() < end - start + 1) {\n                output = input.substring(start, end + 1);\n            }\n            visited.put(currChar, end);\n        }\n        return output;\n    }\n\n    public static void main(String[] args) {\n        if(args.length > 0) {\n            System.out.println(getUniqueCharacterSubstring(args[0]));\n        } else {\n            System.err.println(\"This program expects command-line input. Please try again!\");\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.string;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static com.baeldung.algorithms.string.LongestSubstringNonRepeatingCharacters.getUniqueCharacterSubstring;\nimport static com.baeldung.algorithms.string.LongestSubstringNonRepeatingCharacters.getUniqueCharacterSubstringBruteForce;\n\npublic class LongestSubstringNonRepeatingCharactersUnitTest {\n\n    @Test\n    void givenString_whenGetUniqueCharacterSubstringBruteForceCalled_thenResultFoundAsExpectedUnitTest() {\n        assertEquals(\"\", getUniqueCharacterSubstringBruteForce(\"\"));\n        assertEquals(\"A\", getUniqueCharacterSubstringBruteForce(\"A\"));\n        assertEquals(\"ABCDEF\", getUniqueCharacterSubstringBruteForce(\"AABCDEF\"));\n        assertEquals(\"ABCDEF\", getUniqueCharacterSubstringBruteForce(\"ABCDEFF\"));\n        assertEquals(\"NGISAWE\", getUniqueCharacterSubstringBruteForce(\"CODINGISAWESOME\"));\n        assertEquals(\"be coding\", getUniqueCharacterSubstringBruteForce(\"always be coding\"));\n    }\n\n    @Test\n    void givenString_whenGetUniqueCharacterSubstringCalled_thenResultFoundAsExpectedUnitTest() {\n        assertEquals(\"\", getUniqueCharacterSubstring(\"\"));\n        assertEquals(\"A\", getUniqueCharacterSubstring(\"A\"));\n        assertEquals(\"ABCDEF\", getUniqueCharacterSubstring(\"AABCDEF\"));\n        assertEquals(\"ABCDEF\", getUniqueCharacterSubstring(\"ABCDEFF\"));\n        assertEquals(\"NGISAWE\", getUniqueCharacterSubstring(\"CODINGISAWESOME\"));\n        assertEquals(\"be coding\", getUniqueCharacterSubstring(\"always be coding\"));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.string;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SubstringPalindrome {\n\n    public Set<String> findAllPalindromesUsingCenter(String input) {\n        final Set<String> palindromes = new HashSet<>();\n        if (input == null || input.isEmpty()) {\n            return palindromes;\n        }\n        if (input.length() == 1) {\n            palindromes.add(input);\n            return palindromes;\n        }\n        for (int i = 0; i < input.length(); i++) {\n            palindromes.addAll(findPalindromes(input, i, i + 1));\n            palindromes.addAll(findPalindromes(input, i, i));\n        }\n        return palindromes;\n    }\n\n    private Set<String> findPalindromes(String input, int low, int high) {\n        Set<String> result = new HashSet<>();\n        while (low >= 0 && high < input.length() && input.charAt(low) == input.charAt(high)) {\n            result.add(input.substring(low, high + 1));\n            low--;\n            high++;\n        }\n        return result;\n    }\n\n    public Set<String> findAllPalindromesUsingBruteForceApproach(String input) {\n        Set<String> palindromes = new HashSet<>();\n        if (input == null || input.isEmpty()) {\n            return palindromes;\n        }\n        if (input.length() == 1) {\n            palindromes.add(input);\n            return palindromes;\n        }\n        for (int i = 0; i < input.length(); i++) {\n            for (int j = i + 1; j <= input.length(); j++)\n                if (isPalindrome(input.substring(i, j))) {\n                    palindromes.add(input.substring(i, j));\n                }\n        }\n        return palindromes;\n    }\n\n    private boolean isPalindrome(String input) {\n        StringBuilder plain = new StringBuilder(input);\n        StringBuilder reverse = plain.reverse();\n        return (reverse.toString()).equals(input);\n    }\n\n    public Set<String> findAllPalindromesUsingManachersAlgorithm(String input) {\n        Set<String> palindromes = new HashSet<>();\n        String formattedInput = \"@\" + input + \"#\";\n        char inputCharArr[] = formattedInput.toCharArray();\n        int max;\n        int radius[][] = new int[2][input.length() + 1];\n        for (int j = 0; j <= 1; j++) {\n            radius[j][0] = max = 0;\n            int i = 1;\n            while (i <= input.length()) {\n                palindromes.add(Character.toString(inputCharArr[i]));\n                while (inputCharArr[i - max - 1] == inputCharArr[i + j + max])\n                    max++;\n                radius[j][i] = max;\n                int k = 1;\n                while ((radius[j][i - k] != max - k) && (k < max)) {\n                    radius[j][i + k] = Math.min(radius[j][i - k], max - k);\n                    k++;\n                }\n                max = Math.max(max - k, 0);\n                i += k;\n            }\n        }\n        for (int i = 1; i <= input.length(); i++) {\n            for (int j = 0; j <= 1; j++) {\n                for (max = radius[j][i]; max > 0; max--) {\n                    palindromes.add(input.substring(i - max - 1, max + j + i - 1));\n                }\n            }\n        }\n        return palindromes;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.string;\n\nimport static org.junit.Assert.assertEquals;\nimport java.util.HashSet;\nimport java.util.Set;\nimport org.junit.Test;\n\npublic class SubstringPalindromeUnitTest {\n\n    private static final String INPUT_BUBBLE = \"bubble\";\n    private static final String INPUT_CIVIC = \"civic\";\n    private static final String INPUT_INDEED = \"indeed\";\n    private static final String INPUT_ABABAC = \"ababac\";\n\n    Set<String> EXPECTED_PALINDROME_BUBBLE = new HashSet<String>() {\n        {\n            add(\"b\");\n            add(\"u\");\n            add(\"l\");\n            add(\"e\");\n            add(\"bb\");\n            add(\"bub\");\n        }\n    };\n\n    Set<String> EXPECTED_PALINDROME_CIVIC = new HashSet<String>() {\n        {\n            add(\"civic\");\n            add(\"ivi\");\n            add(\"i\");\n            add(\"c\");\n            add(\"v\");\n        }\n    };\n\n    Set<String> EXPECTED_PALINDROME_INDEED = new HashSet<String>() {\n        {\n            add(\"i\");\n            add(\"n\");\n            add(\"d\");\n            add(\"e\");\n            add(\"ee\");\n            add(\"deed\");\n        }\n    };\n\n    Set<String> EXPECTED_PALINDROME_ABABAC = new HashSet<String>() {\n        {\n            add(\"a\");\n            add(\"b\");\n            add(\"c\");\n            add(\"aba\");\n            add(\"bab\");\n            add(\"ababa\");\n        }\n    };\n\n    private SubstringPalindrome palindrome = new SubstringPalindrome();\n\n    @Test\n    public void whenUsingManachersAlgorithm_thenFindsAllPalindromes() {\n        assertEquals(EXPECTED_PALINDROME_BUBBLE, palindrome.findAllPalindromesUsingManachersAlgorithm(INPUT_BUBBLE));\n        assertEquals(EXPECTED_PALINDROME_INDEED, palindrome.findAllPalindromesUsingManachersAlgorithm(INPUT_INDEED));\n        assertEquals(EXPECTED_PALINDROME_CIVIC, palindrome.findAllPalindromesUsingManachersAlgorithm(INPUT_CIVIC));\n        assertEquals(EXPECTED_PALINDROME_ABABAC, palindrome.findAllPalindromesUsingManachersAlgorithm(INPUT_ABABAC));\n    }\n\n    @Test\n    public void whenUsingCenterApproach_thenFindsAllPalindromes() {\n        assertEquals(EXPECTED_PALINDROME_BUBBLE, palindrome.findAllPalindromesUsingCenter(INPUT_BUBBLE));\n        assertEquals(EXPECTED_PALINDROME_INDEED, palindrome.findAllPalindromesUsingCenter(INPUT_INDEED));\n        assertEquals(EXPECTED_PALINDROME_CIVIC, palindrome.findAllPalindromesUsingCenter(INPUT_CIVIC));\n        assertEquals(EXPECTED_PALINDROME_ABABAC, palindrome.findAllPalindromesUsingCenter(INPUT_ABABAC));\n    }\n\n    @Test\n    public void whenUsingBruteForceApproach_thenFindsAllPalindromes() {\n        assertEquals(EXPECTED_PALINDROME_BUBBLE, palindrome.findAllPalindromesUsingBruteForceApproach(INPUT_BUBBLE));\n        assertEquals(EXPECTED_PALINDROME_INDEED, palindrome.findAllPalindromesUsingBruteForceApproach(INPUT_INDEED));\n        assertEquals(EXPECTED_PALINDROME_CIVIC, palindrome.findAllPalindromesUsingBruteForceApproach(INPUT_CIVIC));\n        assertEquals(EXPECTED_PALINDROME_ABABAC, palindrome.findAllPalindromesUsingBruteForceApproach(INPUT_ABABAC));\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.stringpermutation;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Helper {\n\n    private Helper() {\n    }\n\n    static List<Character> toCharacterList(final String string) {\n        return string.chars().mapToObj(s -> ((char) s)).collect(Collectors.toList());\n    }\n\n    static String toString(Collection<Character> collection) {\n        return collection.stream().map(Object::toString).collect(Collectors.joining());\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.stringpermutation;\n\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Stream;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nclass HelperUnitTest {\n\n    @ParameterizedTest\n    @MethodSource(\"stringProvider\")\n    void toListTest(String value, List<Character> expected) {\n        final List<Character> actual = Helper.toCharacterList(value);\n        assertThat(expected).isEqualTo(actual);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"stringProvider\")\n    void toStringTest(String expected, List<Character> value) {\n        final String actual = Helper.toString(value);\n        assertThat(expected).isEqualTo(actual);\n    }\n\n    static Stream<Arguments> stringProvider() {\n        return Stream.of(\n            Arguments.of(\"hello\", Arrays.asList('h', 'e', 'l', 'l', 'o')),\n            Arguments.of(\"abc\", Arrays.asList('a','b','c')),\n            Arguments.of(\"12345\", Arrays.asList('1', '2', '3', '4', '5'))\n        );\n    }\n\n}"}
{"code_source": "package com.baeldung.algorithms.reversingtree;\n\nimport java.util.LinkedList;\n\npublic class TreeReverser {\n\n    public void reverseRecursive(TreeNode treeNode) {\n        if (treeNode == null) {\n            return;\n        }\n\n        TreeNode temp = treeNode.getLeftChild();\n        treeNode.setLeftChild(treeNode.getRightChild());\n        treeNode.setRightChild(temp);\n\n        reverseRecursive(treeNode.getLeftChild());\n        reverseRecursive(treeNode.getRightChild());\n    }\n\n    public void reverseIterative(TreeNode treeNode) {\n        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();\n\n        if (treeNode != null) {\n            queue.add(treeNode);\n        }\n\n        while (!queue.isEmpty()) {\n\n            TreeNode node = queue.poll();\n            if (node.getLeftChild() != null)\n                queue.add(node.getLeftChild());\n            if (node.getRightChild() != null)\n                queue.add(node.getRightChild());\n\n            TreeNode temp = node.getLeftChild();\n            node.setLeftChild(node.getRightChild());\n            node.setRightChild(temp);\n        }\n    }\n\n    public String toString(TreeNode root) {\n        if (root == null) {\n            return \"\";\n        }\n\n        StringBuffer buffer = new StringBuffer(String.valueOf(root.getValue())).append(\" \");\n\n        buffer.append(toString(root.getLeftChild()));\n        buffer.append(toString(root.getRightChild()));\n\n        return buffer.toString();\n    }\n}\n", "test_case": "package com.baeldung.algorithms.reversingtree;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass TreeReverserUnitTest {\n\n    @Test\n    void givenTreeWhenReversingRecursivelyThenReversed() {\n        TreeReverser reverser = new TreeReverser();\n\n        TreeNode treeNode = createBinaryTree();\n\n        reverser.reverseRecursive(treeNode);\n\n        assertEquals(\"4 7 9 6 2 3 1\", reverser.toString(treeNode)\n            .trim());\n    }\n\n    @Test\n    void givenTreeWhenReversingIterativelyThenReversed() {\n        TreeReverser reverser = new TreeReverser();\n\n        TreeNode treeNode = createBinaryTree();\n\n        reverser.reverseIterative(treeNode);\n\n        assertEquals(\"4 7 9 6 2 3 1\", reverser.toString(treeNode)\n            .trim());\n    }\n\n    private TreeNode createBinaryTree() {\n\n        TreeNode leaf1 = new TreeNode(1);\n        TreeNode leaf2 = new TreeNode(3);\n        TreeNode leaf3 = new TreeNode(6);\n        TreeNode leaf4 = new TreeNode(9);\n\n        TreeNode nodeRight = new TreeNode(7, leaf3, leaf4);\n        TreeNode nodeLeft = new TreeNode(2, leaf1, leaf2);\n\n        TreeNode root = new TreeNode(4, nodeLeft, nodeRight);\n\n        return root;\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.binarygap;\n\npublic class BinaryGap {\n    static int calculateBinaryGap(int n) {\n        return calculateBinaryGap(n >>> Integer.numberOfTrailingZeros(n), 0, 0);\n    }\n\n    static int calculateBinaryGap(int n, int current, int maximum) {\n        if (n == 0) {\n            return maximum;\n        } else if ((n & 1) == 0) {\n            return calculateBinaryGap(n >>> 1, current + 1, maximum);\n        } else {\n            return calculateBinaryGap(n >>> 1, 0, Math.max(maximum, current));\n        }\n    }\n}\n", "test_case": "package com.baeldung.algorithms.binarygap;\n\nimport static com.baeldung.algorithms.binarygap.BinaryGap.calculateBinaryGap;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass BinaryGapUnitTest {\n\n    @Test\n    void givenNoOccurrenceOfBoundedZeros_whenCalculateBinaryGap_thenOutputCorrectResult() {\n\n        int result = calculateBinaryGap(63);\n        assertEquals(0, result);\n    }\n\n    @Test\n    void givenTrailingZeros_whenCalculateBinaryGap_thenOutputCorrectResult() {\n\n        int result = calculateBinaryGap(40);\n        assertEquals(1, result);\n    }\n\n    @Test\n    void givenSingleOccurrenceOfBoundedZeros_whenCalculateBinaryGap_thenOutputCorrectResult() {\n\n        int result = calculateBinaryGap(9);\n        assertEquals(2, result);\n    }\n\n    @Test\n    void givenMultipleOccurrenceOfBoundedZeros_whenCalculateBinaryGap_thenOutputCorrectResult() {\n\n        int result = calculateBinaryGap(145);\n        assertEquals(3, result);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.combinatorics;\n\nimport java.util.*;\n\nimport static java.util.Collections.swap;\n\npublic class Combinatorics {\n\n    public static List<List<Integer>> permutations(List<Integer> sequence) {\n        List<List<Integer>> results = new ArrayList<>();\n        permutationsInternal(sequence, results, 0);\n        return results;\n    }\n\n    private static void permutationsInternal(List<Integer> sequence, List<List<Integer>> results, int index) {\n        if (index == sequence.size() - 1) {\n            results.add(new ArrayList<>(sequence));\n        }\n\n        for (int i = index; i < sequence.size(); i++) {\n            swap(sequence, i, index);\n            permutationsInternal(sequence, results, index + 1);\n            swap(sequence, i, index);\n        }\n    }\n\n    public static List<List<Integer>> combinations(List<Integer> inputSet, int k) {\n        List<List<Integer>> results = new ArrayList<>();\n        combinationsInternal(inputSet, k, results, new ArrayList<>(), 0);\n        return results;\n    }\n\n    private static void combinationsInternal(\n      List<Integer> inputSet, int k, List<List<Integer>> results, ArrayList<Integer> accumulator, int index) {\n        int leftToAccumulate = k - accumulator.size();\n        int possibleToAcculumate = inputSet.size() - index;\n\n        if (accumulator.size() == k) {\n            results.add(new ArrayList<>(accumulator));\n        } else if (leftToAccumulate <= possibleToAcculumate) {\n            combinationsInternal(inputSet, k, results, accumulator, index + 1);\n\n            accumulator.add(inputSet.get(index));\n            combinationsInternal(inputSet, k, results, accumulator, index + 1);\n            accumulator.remove(accumulator.size() - 1);\n        }\n    }\n\n    public static List<List<Character>> powerSet(List<Character> sequence) {\n        List<List<Character>> results = new ArrayList<>();\n        powerSetInternal(sequence, results, new ArrayList<>(), 0);\n        return results;\n    }\n\n    private static void powerSetInternal(\n      List<Character> set, List<List<Character>> powerSet, List<Character> accumulator, int index) {\n        if (index == set.size()) {\n            powerSet.add(new ArrayList<>(accumulator));\n        } else {\n            accumulator.add(set.get(index));\n\n            powerSetInternal(set, powerSet, accumulator, index + 1);\n            accumulator.remove(accumulator.size() - 1);\n            powerSetInternal(set, powerSet, accumulator, index + 1);\n        }\n    }\n}\n", "test_case": "package com.baeldung.algorithms.combinatorics;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertSame;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nclass CombinatoricsUnitTest {\n\n    @Test\n    void givenEmptySequence_whenCallingPermutations_ShouldReturnEmptyList() {\n        List<Integer> sequence = Arrays.asList();\n\n        List<List<Integer>> permutations = Combinatorics.permutations(sequence);\n\n        assertEquals(0, permutations.size());\n    }\n\n    @Test\n    void givenOneElementSequence_whenCallingPermutations_ShouldReturnPermutations() {\n        List<Integer> sequence = Arrays.asList(1);\n\n        List<List<Integer>> permutations = Combinatorics.permutations(sequence);\n\n        assertEquals(1, permutations.size());\n        assertEquals(1, permutations.get(0).size());\n        assertSame(1, permutations.get(0).get(0));\n    }\n\n    @Test\n    void givenFourElementsSequence_whenCallingPermutations_ShouldReturnPermutations() {\n        List<Integer> sequence = Arrays.asList(1, 2, 3, 4);\n\n        List<List<Integer>> permutations = Combinatorics.permutations(sequence);\n\n        assertEquals(24, permutations.size());\n        assertEquals(24, new HashSet<>(permutations).size());\n    }\n\n    @Test\n    void givenTwoElements_whenCalling3Combinations_ShouldReturnEmptyList() {\n        List<Integer> set = Arrays.asList(1, 2);\n\n        List<List<Integer>> combinations = Combinatorics.combinations(set, 3);\n\n        assertEquals(0, combinations.size());\n    }\n\n    @Test\n    void givenThreeElements_whenCalling3Combinations_ShouldReturnOneCombination() {\n        List<Integer> set = Arrays.asList(1, 2, 3);\n\n        List<List<Integer>> combinations = Combinatorics.combinations(set, 3);\n\n        assertEquals(1, combinations.size());\n        assertEquals(combinations.get(0), Arrays.asList(1, 2, 3));\n    }\n\n    @Test\n    void givenFourElements_whenCalling2Combinations_ShouldReturnCombinations() {\n        List<Integer> set = Arrays.asList(1, 2, 3, 4);\n\n        List<List<Integer>> combinations = Combinatorics.combinations(set, 2);\n\n        assertEquals(6, combinations.size());\n        assertEquals(6, new HashSet<>(combinations).size());\n    }\n\n    @Test\n    void givenFourElements_whenCallingPowerSet_ShouldReturn15Sets() {\n        List<Character> sequence = Arrays.asList('a', 'b', 'c', 'd');\n\n        List<List<Character>> combinations = Combinatorics.powerSet(sequence);\n\n        assertEquals(16, combinations.size());\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.integerstreammedian;\n\nimport java.util.PriorityQueue;\nimport java.util.Queue;\n\nimport static java.util.Comparator.reverseOrder;\n\npublic class MedianOfIntegerStream {\n\n    private Queue<Integer> minHeap, maxHeap;\n\n    MedianOfIntegerStream() {\n        minHeap = new PriorityQueue<>();\n        maxHeap = new PriorityQueue<>(reverseOrder());\n    }\n\n    void add(int num) {\n        if (!minHeap.isEmpty() && num < minHeap.peek()) {\n            maxHeap.offer(num);\n            if (maxHeap.size() > minHeap.size() + 1) {\n                minHeap.offer(maxHeap.poll());\n            }\n        } else {\n            minHeap.offer(num);\n            if (minHeap.size() > maxHeap.size() + 1) {\n                maxHeap.offer(minHeap.poll());\n            }\n        }\n    }\n\n    double getMedian() {\n        int median;\n        if (minHeap.size() < maxHeap.size()) {\n            median = maxHeap.peek();\n        } else if (minHeap.size() > maxHeap.size()) {\n            median = minHeap.peek();\n        } else {\n            median = (minHeap.peek() + maxHeap.peek()) / 2;\n        }\n        return median;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.integerstreammedian;\n\n\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.Test;\n\nclass MedianOfIntegerStreamUnitTest {\n\n    @Test\n    void givenStreamOfIntegers_whenAnElementIsRead_thenMedianChangesWithApproach1() {\n        MedianOfIntegerStream mis = new MedianOfIntegerStream();\n        for (Map.Entry<Integer, Double> e : testcaseFixture().entrySet()) {\n            mis.add(e.getKey());\n            assertEquals(e.getValue(), (Double) mis.getMedian());\n        }\n    }\n\n    @Test\n    void givenStreamOfIntegers_whenAnElementIsRead_thenMedianChangesWithApproach2() {\n        MedianOfIntegerStream2 mis = new MedianOfIntegerStream2();\n        for (Map.Entry<Integer, Double> e : testcaseFixture().entrySet()) {\n            mis.add(e.getKey());\n            assertEquals(e.getValue(), (Double) mis.getMedian());\n        }\n    }\n\n    private Map<Integer, Double> testcaseFixture() {\n        return new LinkedHashMap<Integer, Double>() {{\n            put(1, 1d);\n            put(7, 4d);\n            put(5, 5d);\n            put(8, 6d);\n            put(3, 5d);\n            put(9, 6d);\n            put(4, 5d);\n        }};\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.knapsack;\n\npublic class Knapsack {\n\n    public int knapsackRec(int[] w, int[] v, int n, int W) {\n        if (n <= 0) {\n            return 0;\n        } else if (w[n - 1] > W) {\n            return knapsackRec(w, v, n - 1, W);\n        } else {\n            return Math.max(knapsackRec(w, v, n - 1, W), v[n - 1] + knapsackRec(w, v, n - 1, W - w[n - 1]));\n        }\n    }\n\n    public int knapsackDP(int[] w, int[] v, int n, int W) {\n        if (n <= 0 || W <= 0) {\n            return 0;\n        }\n\n        int[][] m = new int[n + 1][W + 1];\n        for (int j = 0; j <= W; j++) {\n            m[0][j] = 0;\n        }\n\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= W; j++) {\n                if (w[i - 1] > j) {\n                    m[i][j] = m[i - 1][j];\n                } else {\n                    m[i][j] = Math.max(m[i - 1][j], m[i - 1][j - w[i - 1]] + v[i - 1]);\n                }\n            }\n        }\n        return m[n][W];\n    }\n}\n", "test_case": "package com.baeldung.algorithms.knapsack;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass KnapsackUnitTest {\n\n    @Test\n    void givenWeightsandValues_whenCalculateMax_thenOutputCorrectResult() {\n        final int[] w = new int[] { 23, 26, 20, 18, 32, 27, 29, 26, 30, 27 };\n        final int[] v = new int[] { 505, 352, 458, 220, 354, 414, 498, 545, 473, 543 };\n        final int n = 10;\n        final int W = 67;\n        final Knapsack knapsack = new Knapsack();\n\n        assertEquals(1270, knapsack.knapsackRec(w, v, n, W));\n        assertEquals(1270, knapsack.knapsackDP(w, v, n, W));\n    }\n\n    @Test\n    void givenZeroItems_whenCalculateMax_thenOutputZero() {\n        final int[] w = new int[] {};\n        final int[] v = new int[] {};\n        final int n = 0;\n        final int W = 67;\n        final Knapsack knapsack = new Knapsack();\n\n        assertEquals(0, knapsack.knapsackRec(w, v, n, W));\n        assertEquals(0, knapsack.knapsackDP(w, v, n, W));\n    }\n\n    @Test\n    void givenZeroWeightLimit_whenCalculateMax_thenOutputZero() {\n        final int[] w = new int[] { 23, 26, 20, 18, 32, 27, 29, 26, 30, 27 };\n        final int[] v = new int[] { 505, 352, 458, 220, 354, 414, 498, 545, 473, 543 };\n        final int n = 10;\n        final int W = 0;\n        final Knapsack knapsack = new Knapsack();\n\n        assertEquals(0, knapsack.knapsackRec(w, v, n, W));\n        assertEquals(0, knapsack.knapsackDP(w, v, n, W));\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.maximumsubarray;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class BruteForceAlgorithm {\n\n    private Logger logger = LoggerFactory.getLogger(BruteForceAlgorithm.class.getName());\n\n    public int maxSubArray(int[] arr) {\n\n        int size = arr.length;\n        int maximumSubArraySum = Integer.MIN_VALUE;\n        int start = 0;\n        int end = 0;\n\n        for (int left = 0; left < size; left++) {\n\n            int runningWindowSum = 0;\n\n            for (int right = left; right < size; right++) {\n                runningWindowSum += arr[right];\n\n                if (runningWindowSum > maximumSubArraySum) {\n                    maximumSubArraySum = runningWindowSum;\n                    start = left;\n                    end = right;\n                }\n            }\n        }\n        logger.info(\"Found Maximum Subarray between {} and {}\", start, end);\n        return maximumSubArraySum;\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.maximumsubarray;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass BruteForceAlgorithmUnitTest {\n\n    @Test\n    void givenArrayWithNegativeNumberWhenMaximumSubarrayThenReturns6() {\n        //given\n        int[] arr = new int[]{-3, 1, -8, 4, -1, 2, 1, -5, 5};\n        //when\n        BruteForceAlgorithm algorithm = new BruteForceAlgorithm();\n        int maximumSum = algorithm.maxSubArray(arr);\n        //then\n        assertEquals(6, maximumSum);\n    }\n}"}
{"code_source": "package com.baeldung.algorithms.maximumsubarray;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class KadaneAlgorithm {\n\n    private Logger logger = LoggerFactory.getLogger(BruteForceAlgorithm.class.getName());\n\n    public int maxSubArraySum(int[] arr) {\n\n        int size = arr.length;\n        int start = 0;\n        int end = 0;\n\n        int maxSoFar = arr[0], maxEndingHere = arr[0];\n        for (int i = 1; i < size; i++) {\n\n            if (arr[i] > maxEndingHere + arr[i]) {\n                start = i;\n                maxEndingHere = arr[i];\n            } else {\n                maxEndingHere = maxEndingHere + arr[i];\n            }\n\n            if (maxSoFar < maxEndingHere) {\n                maxSoFar = maxEndingHere;\n                end = i;\n            }\n        }\n        logger.info(\"Found Maximum Subarray between {} and {}\", Math.min(start, end), end);\n        return maxSoFar;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.maximumsubarray;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass KadaneAlgorithmUnitTest {\n\n    @Test\n    void givenArrayWithNegativeNumberWhenMaximumSubarrayThenReturns6() {\n        //given\n        int[] arr = new int[] { -3, 1, -8, 4, -1, 2, 1, -5, 5 };\n        //when\n        KadaneAlgorithm algorithm = new KadaneAlgorithm();\n        int maxSum = algorithm.maxSubArraySum(arr);\n        //then\n        assertEquals(6, maxSum);\n    }\n\n    @Test\n    void givenArrayWithAllNegativeNumbersWhenMaximumSubarrayThenReturnsExpectedResult() {\n        //given\n        int[] arr = new int[] { -8, -7, -5, -4, -3, -1, -2 };\n        //when\n        KadaneAlgorithm algorithm = new KadaneAlgorithm();\n        int maxSum = algorithm.maxSubArraySum(arr);\n        //then\n        assertEquals(-1, maxSum);\n    }\n    \n    @Test\n    void givenArrayWithAllPosiitveNumbersWhenMaximumSubarrayThenReturnsExpectedResult() {\n        //given\n        int[] arr = new int[] {4, 1, 3, 2};\n        //when\n        KadaneAlgorithm algorithm = new KadaneAlgorithm();\n        int maxSum = algorithm.maxSubArraySum(arr);\n        //then\n        assertEquals(10, maxSum);\n    }\n\n}"}
{"code_source": "package com.baeldung.algorithms.mergesortedarrays;\n\npublic class SortedArrays {\n\n    public static int[] merge(int[] foo, int[] bar) {\n\n        int fooLength = foo.length;\n        int barLength = bar.length;\n\n        int[] merged = new int[fooLength + barLength];\n\n        int fooPosition, barPosition, mergedPosition;\n        fooPosition = barPosition = mergedPosition = 0;\n\n        while (fooPosition < fooLength && barPosition < barLength) {\n            if (foo[fooPosition] < bar[barPosition]) {\n                merged[mergedPosition++] = foo[fooPosition++];\n            } else {\n                merged[mergedPosition++] = bar[barPosition++];\n            }\n        }\n\n        while (fooPosition < fooLength) {\n            merged[mergedPosition++] = foo[fooPosition++];\n        }\n\n        while (barPosition < barLength) {\n            merged[mergedPosition++] = bar[barPosition++];\n        }\n\n        return merged;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.mergesortedarrays;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.algorithms.mergesortedarrays.SortedArrays;\n\nclass SortedArraysUnitTest {\n\n    @Test\n    void givenTwoSortedArrays_whenMerged_thenReturnMergedSortedArray() {\n\n        int[] foo = { 3, 7 };\n        int[] bar = { 4, 8, 11 };\n        int[] merged = { 3, 4, 7, 8, 11 };\n\n        assertArrayEquals(merged, SortedArrays.merge(foo, bar));\n    }\n\n    @Test\n    void givenTwoSortedArraysWithDuplicates_whenMerged_thenReturnMergedSortedArray() {\n\n        int[] foo = { 3, 3, 7 };\n        int[] bar = { 4, 8, 8, 11 };\n        int[] merged = { 3, 3, 4, 7, 8, 8, 11 };\n\n        assertArrayEquals(merged, SortedArrays.merge(foo, bar));\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.prim;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.commons.math3.util.Pair;\n\npublic class Prim {\n\n    private List<Vertex> graph;\n\n    public Prim(List<Vertex> graph){\n        this.graph = graph;\n    }\n\n    public void run(){\n        if (graph.size() > 0){\n            graph.get(0).setVisited(true);\n        }\n        while (isDisconnected()){\n            Edge nextMinimum = new Edge(Integer.MAX_VALUE);\n            Vertex nextVertex = graph.get(0);\n            for (Vertex vertex : graph){\n                if (vertex.isVisited()){\n                    Pair<Vertex, Edge> candidate = vertex.nextMinimum();\n                    if (candidate.getValue().getWeight() < nextMinimum.getWeight()){\n                        nextMinimum = candidate.getValue();\n                        nextVertex = candidate.getKey();\n                    }\n                }\n            }\n            nextMinimum.setIncluded(true);\n            nextVertex.setVisited(true);\n        }\n    }\n\n    private boolean isDisconnected(){\n        for (Vertex vertex : graph){\n            if (!vertex.isVisited()){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public String originalGraphToString(){\n        StringBuilder sb = new StringBuilder();\n        for (Vertex vertex : graph){\n            sb.append(vertex.originalToString());\n        }\n        return sb.toString();\n    }\n\n    public void resetPrintHistory(){\n        for (Vertex vertex : graph){\n            Iterator<Map.Entry<Vertex,Edge>> it = vertex.getEdges().entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry<Vertex,Edge> pair = it.next();\n                pair.getValue().setPrinted(false);\n            }\n        }\n    }\n\n    public String minimumSpanningTreeToString(){\n        StringBuilder sb = new StringBuilder();\n        for (Vertex vertex : graph){\n            sb.append(vertex.includedToString());\n        }\n        return sb.toString();\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.prim;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nclass PrimUnitTest {\n\n    @Test\n     void givenAGraph_whenPrimRuns_thenPrintMST() {\n        Prim prim = new Prim(createGraph());\n        System.out.println(prim.originalGraphToString());\n        System.out.println(\"----------------\");\n        prim.run();\n        System.out.println();\n        prim.resetPrintHistory();\n        System.out.println(prim.minimumSpanningTreeToString());\n    }\n\n    public static List<Vertex> createGraph() {\n        List<Vertex> graph = new ArrayList<>();\n        Vertex a = new Vertex(\"A\");\n        Vertex b = new Vertex(\"B\");\n        Vertex c = new Vertex(\"C\");\n        Vertex d = new Vertex(\"D\");\n        Vertex e = new Vertex(\"E\");\n        Edge ab = new Edge(2);\n        a.addEdge(b, ab);\n        b.addEdge(a, ab);\n        Edge ac = new Edge(3);\n        a.addEdge(c, ac);\n        c.addEdge(a, ac);\n        Edge bc = new Edge(2);\n        b.addEdge(c, bc);\n        c.addEdge(b, bc);\n        Edge be = new Edge(5);\n        b.addEdge(e, be);\n        e.addEdge(b, be);\n        Edge cd = new Edge(1);\n        c.addEdge(d, cd);\n        d.addEdge(c, cd);\n        Edge ce = new Edge(1);\n        c.addEdge(e, ce);\n        e.addEdge(c, ce);\n        graph.add(a);\n        graph.add(b);\n        graph.add(c);\n        graph.add(d);\n        graph.add(e);\n        return graph;\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.relativelyprime;\n\nimport java.math.BigInteger;\n\nclass RelativelyPrime {\n\n    static boolean iterativeRelativelyPrime(int a, int b) {\n        return iterativeGCD(a, b) == 1;\n    }\n\n    static boolean recursiveRelativelyPrime(int a, int b) {\n        return recursiveGCD(a, b) == 1;\n    }\n\n    static boolean bigIntegerRelativelyPrime(int a, int b) {\n        return BigInteger.valueOf(a).gcd(BigInteger.valueOf(b)).equals(BigInteger.ONE);\n    }\n\n    private static int iterativeGCD(int a, int b) {\n        int tmp;\n        while (b != 0) {\n            if (a < b) {\n                tmp = a;\n                a = b;\n                b = tmp;\n            }\n            tmp = b;\n            b = a % b;\n            a = tmp;\n        }\n        return a;\n    }\n\n    private static int recursiveGCD(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        if (a < b) {\n            return recursiveGCD(b, a);\n        }\n        return recursiveGCD(b, a % b);\n    }\n\n\n}\n", "test_case": "package com.baeldung.algorithms.relativelyprime;\n\nimport static com.baeldung.algorithms.relativelyprime.RelativelyPrime.*;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.Test;\n\nclass RelativelyPrimeUnitTest {\n\n    @Test\n    void givenNonRelativelyPrimeNumbers_whenCheckingIteratively_shouldReturnFalse() {\n\n        boolean result = iterativeRelativelyPrime(45, 35);\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    void givenRelativelyPrimeNumbers_whenCheckingIteratively_shouldReturnTrue() {\n\n        boolean result = iterativeRelativelyPrime(500, 501);\n        assertThat(result).isTrue();\n    }\n\n    @Test\n    void givenNonRelativelyPrimeNumbers_whenCheckingRecursively_shouldReturnFalse() {\n\n        boolean result = recursiveRelativelyPrime(45, 35);\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    void givenRelativelyPrimeNumbers_whenCheckingRecursively_shouldReturnTrue() {\n\n        boolean result = recursiveRelativelyPrime(500, 501);\n        assertThat(result).isTrue();\n    }\n\n    @Test\n    void givenNonRelativelyPrimeNumbers_whenCheckingUsingBigIntegers_shouldReturnFalse() {\n\n        boolean result = bigIntegerRelativelyPrime(45, 35);\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    void givenRelativelyPrimeNumbers_whenCheckingBigIntegers_shouldReturnTrue() {\n\n        boolean result = bigIntegerRelativelyPrime(500, 501);\n        assertThat(result).isTrue();\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.balancedbrackets;\n\nimport java.util.Deque;\nimport java.util.LinkedList;\n\npublic class BalancedBracketsUsingDeque {\n\n    public boolean isBalanced(String str) {\n        if (null == str || ((str.length() % 2) != 0)) {\n            return false;\n        } else {\n            char[] ch = str.toCharArray();\n            for (char c : ch) {\n                if (!(c == '{' || c == '[' || c == '(' || c == '}' || c == ']' || c == ')')) {\n                    return false;\n                }\n\n            }\n        }\n\n        Deque<Character> deque = new LinkedList<>();\n        for (char ch : str.toCharArray()) {\n            if (ch == '{' || ch == '[' || ch == '(') {\n                deque.addFirst(ch);\n            } else {\n                if (!deque.isEmpty() && ((deque.peekFirst() == '{' && ch == '}') || (deque.peekFirst() == '[' && ch == ']') || (deque.peekFirst() == '(' && ch == ')'))) {\n                    deque.removeFirst();\n                } else {\n                    return false;\n                }\n            }\n        }\n\n        return deque.isEmpty();\n    }\n}", "test_case": "package com.baeldung.algorithms.balancedbrackets;\n\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nclass BalancedBracketsUsingDequeUnitTest {\n    private BalancedBracketsUsingDeque balancedBracketsUsingDeque;\n\n    @BeforeEach\n    public void setup() {\n        balancedBracketsUsingDeque = new BalancedBracketsUsingDeque();\n    }\n\n    @Test\n    void givenNullInput_whenCheckingForBalance_shouldReturnFalse() {\n        boolean result = balancedBracketsUsingDeque.isBalanced(null);\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    void givenEmptyString_whenCheckingForBalance_shouldReturnTrue() {\n        boolean result = balancedBracketsUsingDeque.isBalanced(\"\");\n        assertThat(result).isTrue();\n    }\n\n    @Test\n    void givenInvalidCharacterString_whenCheckingForBalance_shouldReturnFalse() {\n        boolean result = balancedBracketsUsingDeque.isBalanced(\"abc[](){}\");\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    void givenOddLengthString_whenCheckingForBalance_shouldReturnFalse() {\n        boolean result = balancedBracketsUsingDeque.isBalanced(\"{{[]()}}}\");\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    void givenEvenLengthString_whenCheckingForBalance_shouldReturnFalse() {\n        boolean result = balancedBracketsUsingDeque.isBalanced(\"{{[]()}}}}\");\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    void givenEvenLengthUnbalancedString_whenCheckingForBalance_shouldReturnFalse() {\n        boolean result = balancedBracketsUsingDeque.isBalanced(\"{[(])}\");\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    void givenAnotherEvenLengthUnbalancedString_whenCheckingForBalance_shouldReturnFalse() {\n        boolean result = balancedBracketsUsingDeque.isBalanced(\"{{}(\");\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    void givenEvenLengthBalancedString_whenCheckingForBalance_shouldReturnTrue() {\n        boolean result = balancedBracketsUsingDeque.isBalanced(\"{[()]}\");\n        assertThat(result).isTrue();\n    }\n\n    @Test\n    void givenBalancedString_whenCheckingForBalance_shouldReturnTrue() {\n        boolean result = balancedBracketsUsingDeque.isBalanced(\"{{[[(())]]}}\");\n        assertThat(result).isTrue();\n    }\n\n    @Test\n    void givenAnotherBalancedString_whenCheckingForBalance_shouldReturnTrue() {\n        boolean result = balancedBracketsUsingDeque.isBalanced(\"{{([])}}\");\n        assertThat(result).isTrue();\n    }\n\n    @Test\n    void givenUnBalancedString_whenCheckingForBalance_shouldReturnFalse() {\n        boolean result = balancedBracketsUsingDeque.isBalanced(\"{{)[](}}\");\n        assertThat(result).isFalse();\n    }\n\n}"}
{"code_source": "package com.baeldung.algorithms.balancedbrackets;\n\npublic class BalancedBracketsUsingString {\n\n    public boolean isBalanced(String str) {\n        if (null == str || ((str.length() % 2) != 0)) {\n            return false;\n        } else {\n            char[] ch = str.toCharArray();\n            for (char c : ch) {\n                if (!(c == '{' || c == '[' || c == '(' || c == '}' || c == ']' || c == ')')) {\n                    return false;\n                }\n\n            }\n        }\n\n        while (str.contains(\"()\") || str.contains(\"[]\") || str.contains(\"{}\")) {\n            str = str.replaceAll(\"\\\\(\\\\)\", \"\")\n                .replaceAll(\"\\\\[\\\\]\", \"\")\n                .replaceAll(\"\\\\{\\\\}\", \"\");\n        }\n        return (str.length() == 0);\n\n    }\n\n}", "test_case": "package com.baeldung.algorithms.balancedbrackets;\n\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass BalancedBracketsUsingStringUnitTest {\n    private BalancedBracketsUsingString balancedBracketsUsingString;\n\n    @BeforeEach\n    public void setup() {\n        balancedBracketsUsingString = new BalancedBracketsUsingString();\n    }\n\n    @Test\n    void givenNullInput_whenCheckingForBalance_shouldReturnFalse() {\n        boolean result = balancedBracketsUsingString.isBalanced(null);\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    void givenEmptyString_whenCheckingForBalance_shouldReturnTrue() {\n        boolean result = balancedBracketsUsingString.isBalanced(\"\");\n        assertThat(result).isTrue();\n    }\n\n    @Test\n    void givenInvalidCharacterString_whenCheckingForBalance_shouldReturnFalse() {\n        boolean result = balancedBracketsUsingString.isBalanced(\"abc[](){}\");\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    void givenOddLengthString_whenCheckingForBalance_shouldReturnFalse() {\n        boolean result = balancedBracketsUsingString.isBalanced(\"{{[]()}}}\");\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    void givenEvenLengthString_whenCheckingForBalance_shouldReturnFalse() {\n        boolean result = balancedBracketsUsingString.isBalanced(\"{{[]()}}}}\");\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    void givenEvenLengthUnbalancedString_whenCheckingForBalance_shouldReturnFalse() {\n        boolean result = balancedBracketsUsingString.isBalanced(\"{[(])}\");\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    void givenAnotherEvenLengthUnbalancedString_whenCheckingForBalance_shouldReturnFalse() {\n        boolean result = balancedBracketsUsingString.isBalanced(\"{{}(\");\n        assertThat(result).isFalse();\n    }\n\n    @Test\n    void givenEvenLengthBalancedString_whenCheckingForBalance_shouldReturnTrue() {\n        boolean result = balancedBracketsUsingString.isBalanced(\"{[()]}\");\n        assertThat(result).isTrue();\n    }\n\n    @Test\n    void givenBalancedString_whenCheckingForBalance_shouldReturnTrue() {\n        boolean result = balancedBracketsUsingString.isBalanced(\"{{[[(())]]}}\");\n        assertThat(result).isTrue();\n    }\n\n    @Test\n    void givenAnotherBalancedString_whenCheckingForBalance_shouldReturnTrue() {\n        boolean result = balancedBracketsUsingString.isBalanced(\"{{([])}}\");\n        assertThat(result).isTrue();\n    }\n\n    @Test\n    void givenUnBalancedString_whenCheckingForBalance_shouldReturnFalse() {\n        boolean result = balancedBracketsUsingString.isBalanced(\"{{)[](}}\");\n        assertThat(result).isFalse();\n    }\n\n}"}
{"code_source": "package com.baeldung.algorithms.caesarcipher;\n\nimport org.apache.commons.math3.stat.inference.ChiSquareTest;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Arrays;\nimport java.util.stream.IntStream;\n\npublic class CaesarCipher {\n\n    private final Logger log = LoggerFactory.getLogger(CaesarCipher.class);\n\n    private static final char LETTER_A = 'a';\n    private static final char LETTER_Z = 'z';\n    private static final int ALPHABET_SIZE = LETTER_Z - LETTER_A + 1;\n    private static final double[] ENGLISH_LETTERS_PROBABILITIES = {0.073, 0.009, 0.030, 0.044, 0.130, 0.028, 0.016, 0.035, 0.074, 0.002, 0.003, 0.035, 0.025, 0.078, 0.074, 0.027, 0.003, 0.077, 0.063, 0.093, 0.027, 0.013, 0.016, 0.005, 0.019, 0.001};\n\n    public String cipher(String message, int offset) {\n        StringBuilder result = new StringBuilder();\n\n        for (char character : message.toCharArray()) {\n            if (character != ' ') {\n                int originalAlphabetPosition = character - LETTER_A;\n                int newAlphabetPosition = (originalAlphabetPosition + offset) % ALPHABET_SIZE;\n                char newCharacter = (char) (LETTER_A + newAlphabetPosition);\n                result.append(newCharacter);\n            } else {\n                result.append(character);\n            }\n        }\n\n        return result.toString();\n    }\n\n    public String decipher(String message, int offset) {\n        return cipher(message, ALPHABET_SIZE - (offset % ALPHABET_SIZE));\n    }\n\n    public int breakCipher(String message) {\n        return probableOffset(chiSquares(message));\n    }\n\n    private double[] chiSquares(String message) {\n        double[] expectedLettersFrequencies = expectedLettersFrequencies(message.length());\n\n        double[] chiSquares = new double[ALPHABET_SIZE];\n\n        for (int offset = 0; offset < chiSquares.length; offset++) {\n            String decipheredMessage = decipher(message, offset);\n            long[] lettersFrequencies = observedLettersFrequencies(decipheredMessage);\n            double chiSquare = new ChiSquareTest().chiSquare(expectedLettersFrequencies, lettersFrequencies);\n            chiSquares[offset] = chiSquare;\n        }\n\n        return chiSquares;\n    }\n\n    private long[] observedLettersFrequencies(String message) {\n        return IntStream.rangeClosed(LETTER_A, LETTER_Z)\n          .mapToLong(letter -> countLetter((char) letter, message))\n          .toArray();\n    }\n\n    private long countLetter(char letter, String message) {\n        return message.chars()\n          .filter(character -> character == letter)\n          .count();\n    }\n\n    private double[] expectedLettersFrequencies(int messageLength) {\n        return Arrays.stream(ENGLISH_LETTERS_PROBABILITIES)\n          .map(probability -> probability * messageLength)\n          .toArray();\n    }\n\n    private int probableOffset(double[] chiSquares) {\n        int probableOffset = 0;\n        for (int offset = 0; offset < chiSquares.length; offset++) {\n            log.debug(String.format(\"Chi-Square for offset %d: %.2f\", offset, chiSquares[offset]));\n            if (chiSquares[offset] < chiSquares[probableOffset]) {\n                probableOffset = offset;\n            }\n        }\n\n        return probableOffset;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.caesarcipher;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass CaesarCipherUnitTest {\n    private static final String SENTENCE = \"he told me i could never teach a llama to drive\";\n    private static final String SENTENCE_SHIFTED_THREE = \"kh wrog ph l frxog qhyhu whdfk d oodpd wr gulyh\";\n    private static final String SENTENCE_SHIFTED_TEN = \"ro dyvn wo s myevn xofob dokmr k vvkwk dy nbsfo\";\n\n    private CaesarCipher algorithm = new CaesarCipher();\n\n    @Test\n    void givenSentenceAndShiftThree_whenCipher_thenCipheredMessageWithoutOverflow() {\n        String cipheredSentence = algorithm.cipher(SENTENCE, 3);\n\n        assertThat(cipheredSentence)\n          .isEqualTo(SENTENCE_SHIFTED_THREE);\n    }\n\n    @Test\n    void givenSentenceAndShiftTen_whenCipher_thenCipheredMessageWithOverflow() {\n        String cipheredSentence = algorithm.cipher(SENTENCE, 10);\n\n        assertThat(cipheredSentence)\n          .isEqualTo(SENTENCE_SHIFTED_TEN);\n    }\n\n    @Test\n    void givenSentenceAndShiftThirtySix_whenCipher_thenCipheredLikeTenMessageWithOverflow() {\n        String cipheredSentence = algorithm.cipher(SENTENCE, 36);\n\n        assertThat(cipheredSentence)\n          .isEqualTo(SENTENCE_SHIFTED_TEN);\n    }\n\n    @Test\n    void givenSentenceShiftedThreeAndShiftThree_whenDecipher_thenOriginalSentenceWithoutOverflow() {\n        String decipheredSentence = algorithm.decipher(SENTENCE_SHIFTED_THREE, 3);\n\n        assertThat(decipheredSentence)\n          .isEqualTo(SENTENCE);\n    }\n\n    @Test\n    void givenSentenceShiftedTenAndShiftTen_whenDecipher_thenOriginalSentenceWithOverflow() {\n        String decipheredSentence = algorithm.decipher(SENTENCE_SHIFTED_TEN, 10);\n\n        assertThat(decipheredSentence)\n          .isEqualTo(SENTENCE);\n    }\n\n    @Test\n    void givenSentenceShiftedTenAndShiftThirtySix_whenDecipher_thenOriginalSentenceWithOverflow() {\n        String decipheredSentence = algorithm.decipher(SENTENCE_SHIFTED_TEN, 36);\n\n        assertThat(decipheredSentence)\n          .isEqualTo(SENTENCE);\n    }\n\n    @Test\n    void givenSentenceShiftedThree_whenBreakCipher_thenOriginalSentence() {\n        int offset = algorithm.breakCipher(SENTENCE_SHIFTED_THREE);\n\n        assertThat(offset)\n          .isEqualTo(3);\n\n        assertThat(algorithm.decipher(SENTENCE_SHIFTED_THREE, offset))\n          .isEqualTo(SENTENCE);\n    }\n\n    @Test\n    void givenSentenceShiftedTen_whenBreakCipher_thenOriginalSentence() {\n        int offset = algorithm.breakCipher(SENTENCE_SHIFTED_TEN);\n\n        assertThat(offset)\n          .isEqualTo(10);\n\n        assertThat(algorithm.decipher(SENTENCE_SHIFTED_TEN, offset))\n          .isEqualTo(SENTENCE);\n    }\n}"}
{"code_source": "package com.baeldung.algorithms.gradientdescent;\n\nimport java.util.function.Function;\n\npublic class GradientDescent {\n\n    private final double precision = 0.000001;\n\n    public double findLocalMinimum(Function<Double, Double> f, double initialX) {\n        double stepCoefficient = 0.1;\n        double previousStep = 1.0;\n        double currentX = initialX;\n        double previousX = initialX;\n        double previousY = f.apply(previousX);\n        int iter = 100;\n\n        currentX += stepCoefficient * previousY;\n\n        while (previousStep > precision && iter > 0) {\n            iter--;\n            double currentY = f.apply(currentX);\n            if (currentY > previousY) {\n                stepCoefficient = -stepCoefficient / 2;\n            }\n            previousX = currentX;\n            currentX += stepCoefficient * previousY;\n            previousY = currentY;\n            previousStep = StrictMath.abs(currentX - previousX);\n        }\n        return currentX;\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.gradientdescent;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.function.Function;\n\nimport org.junit.jupiter.api.Test;\n\nclass GradientDescentUnitTest {\n\n    @Test\n    void givenFunction_whenStartingPointIsOne_thenLocalMinimumIsFound() {\n        Function<Double, Double> df = x ->\n            StrictMath.abs(StrictMath.pow(x, 3)) - (3 * StrictMath.pow(x, 2)) + x;\n        GradientDescent gd = new GradientDescent();\n        double res = gd.findLocalMinimum(df, 1);\n        assertTrue(res > 1.78);\n        assertTrue(res < 1.84);\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.greedy;\n\nimport java.util.List;\n\npublic class GreedyAlgorithm {\n\n    int currentLevel = 0;\n    final int maxLevel = 3; \n    SocialConnector sc;\n    FollowersPath fp;\n    \n    public GreedyAlgorithm(SocialConnector sc) {\n        super();\n        this.sc = sc;\n        this.fp = new FollowersPath();\n    }\n    \n    public long findMostFollowersPath(String account) {\n        long max = 0;\n        SocialUser toFollow = null;\n        \n        List<SocialUser> followers = sc.getFollowers(account);\n        for (SocialUser el : followers) {\n            long followersCount = el.getFollowersCount();\n            if (followersCount > max) {\n                toFollow = el;\n                max = followersCount;\n            }\n        }\n        \n        if (currentLevel < maxLevel - 1) {\n            currentLevel++;\n            max += findMostFollowersPath(toFollow.getUsername());\n            return max;\n        } else {\n            return max;\n        }            \n    }\n    \n    public FollowersPath getFollowers() {\n        return fp;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.greedy;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\n\n\n\nclass GreedyAlgorithmUnitTest {\n\n    private SocialConnector prepareNetwork() {\n        SocialConnector sc = new SocialConnector();\n        SocialUser root = new SocialUser(\"root\");\n        SocialUser child1 = new SocialUser(\"child1\");\n        SocialUser child2 = new SocialUser(\"child2\");\n        SocialUser child3 = new SocialUser(\"child3\");\n        SocialUser child21 = new SocialUser(\"child21\");\n        SocialUser child211 = new SocialUser(\"child211\");\n        SocialUser child2111 = new SocialUser(\"child2111\");\n        SocialUser child31 = new SocialUser(\"child31\");\n        SocialUser child311 = new SocialUser(\"child311\");\n        SocialUser child3111 = new SocialUser(\"child3111\");\n        child211.addFollowers(Arrays.asList(new SocialUser[]{child2111}));\n        child311.addFollowers(Arrays.asList(new SocialUser[]{child3111}));\n        child21.addFollowers(Arrays.asList(new SocialUser[]{child211}));\n        child31.addFollowers(Arrays.asList(new SocialUser[]{child311, \n          new SocialUser(\"child312\"), new SocialUser(\"child313\"), new SocialUser(\"child314\")}));\n        child1.addFollowers(Arrays.asList(new SocialUser[]{new SocialUser(\"child11\"), new SocialUser(\"child12\")}));\n        child2.addFollowers(Arrays.asList(new SocialUser[]{child21, new SocialUser(\"child22\"), new SocialUser(\"child23\")}));\n        child3.addFollowers(Arrays.asList(new SocialUser[]{child31}));\n        root.addFollowers(Arrays.asList(new SocialUser[]{child1, child2, child3}));\n        sc.setUsers(Arrays.asList(new SocialUser[]{root, child1, child2, child3, child21, child31, child311, child211}));\n        return sc;\n    }\n\n    @Test\n    void greedyAlgorithmTest() {\n        GreedyAlgorithm ga = new GreedyAlgorithm(prepareNetwork());\n        assertEquals(ga.findMostFollowersPath(\"root\"), 5);\n    }\n\n    @Test\n    void nongreedyAlgorithmTest() {\n        NonGreedyAlgorithm nga = new NonGreedyAlgorithm(prepareNetwork(), 0);\n        assertThrows(IllegalStateException.class, () -> {\n            nga.findMostFollowersPath(\"root\");\n          });\n    }\n\n    @Test\n    void nongreedyAlgorithmUnboundedTest() {\n        SocialConnector sc = prepareNetwork();\n        sc.switchCounter();\n        NonGreedyAlgorithm nga = new NonGreedyAlgorithm(sc, 0);\n        assertEquals(nga.findMostFollowersPath(\"root\"), 6);\n    }\n}"}
{"code_source": "package com.baeldung.algorithms.kruskal;\n\nimport com.google.common.graph.EndpointPair;\nimport com.google.common.graph.MutableValueGraph;\nimport com.google.common.graph.ValueGraph;\nimport com.google.common.graph.ValueGraphBuilder;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Set;\n\npublic class Kruskal {\n\n    public ValueGraph<Integer, Double> minSpanningTree(ValueGraph<Integer, Double> graph) {\n\n        return spanningTree(graph, true);\n    }\n\n    public ValueGraph<Integer, Double> maxSpanningTree(ValueGraph<Integer, Double> graph) {\n        return spanningTree(graph, false);\n    }\n\n    private ValueGraph<Integer, Double> spanningTree(ValueGraph<Integer, Double> graph, boolean minSpanningTree) {\n        Set<EndpointPair<Integer>> edges = graph.edges();\n        List<EndpointPair<Integer>> edgeList = new ArrayList<>(edges);\n\n        if (minSpanningTree) {\n            edgeList.sort(Comparator.comparing(e -> graph.edgeValue(e).get()));\n        } else {\n            edgeList.sort(Collections.reverseOrder(Comparator.comparing(e -> graph.edgeValue(e).get())));\n        }\n\n        int totalNodes = graph.nodes().size();\n        CycleDetector cycleDetector = new CycleDetector(totalNodes);\n        int edgeCount = 0;\n\n        MutableValueGraph<Integer, Double> spanningTree = ValueGraphBuilder.undirected().build();\n        for (EndpointPair<Integer> edge : edgeList) {\n            if (cycleDetector.detectCycle(edge.nodeU(), edge.nodeV())) {\n                continue;\n            }\n            spanningTree.putEdgeValue(edge.nodeU(), edge.nodeV(), graph.edgeValue(edge).get());\n            edgeCount++;\n            if (edgeCount == totalNodes - 1) {\n                break;\n            }\n        }\n        return spanningTree;\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.kruskal;\n\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport com.google.common.graph.MutableValueGraph;\nimport com.google.common.graph.ValueGraph;\nimport com.google.common.graph.ValueGraphBuilder;\nimport com.baeldung.algorithms.kruskal.Kruskal;\n\nclass KruskalUnitTest {\n\n    private MutableValueGraph<Integer, Double> graph;\n\n    @BeforeEach\n    public void setup() {\n        graph = ValueGraphBuilder.undirected().build();\n        graph.putEdgeValue(0, 1, 8.0);\n        graph.putEdgeValue(0, 2, 5.0);\n        graph.putEdgeValue(1, 2, 9.0);\n        graph.putEdgeValue(1, 3, 11.0);\n        graph.putEdgeValue(2, 3, 15.0);\n        graph.putEdgeValue(2, 4, 10.0);\n        graph.putEdgeValue(3, 4, 7.0);\n    }\n\n    @Test\n    void givenGraph_whenMinimumSpanningTree_thenOutputCorrectResult() {\n        final Kruskal kruskal = new Kruskal();\n        ValueGraph<Integer, Double> spanningTree = kruskal.minSpanningTree(graph);\n\n        assertTrue(spanningTree.hasEdgeConnecting(0, 1));\n        assertTrue(spanningTree.hasEdgeConnecting(0, 2));\n        assertTrue(spanningTree.hasEdgeConnecting(2, 4));\n        assertTrue(spanningTree.hasEdgeConnecting(3, 4));\n        assertEquals(graph.edgeValue(0, 1), spanningTree.edgeValue(0, 1));\n        assertEquals(graph.edgeValue(0, 2), spanningTree.edgeValue(0, 2));\n        assertEquals(graph.edgeValue(2, 4), spanningTree.edgeValue(2, 4));\n        assertEquals(graph.edgeValue(3, 4), spanningTree.edgeValue(3, 4));\n\n        assertFalse(spanningTree.hasEdgeConnecting(1, 2));\n        assertFalse(spanningTree.hasEdgeConnecting(1, 3));\n        assertFalse(spanningTree.hasEdgeConnecting(2, 3));\n    }\n\n    @Test\n    void givenGraph_whenMaximumSpanningTree_thenOutputCorrectResult() {\n        final Kruskal kruskal = new Kruskal();\n        ValueGraph<Integer, Double> spanningTree = kruskal.maxSpanningTree(graph);\n\n        assertTrue(spanningTree.hasEdgeConnecting(0, 1));\n        assertTrue(spanningTree.hasEdgeConnecting(1, 3));\n        assertTrue(spanningTree.hasEdgeConnecting(2, 3));\n        assertTrue(spanningTree.hasEdgeConnecting(2, 4));\n        assertEquals(graph.edgeValue(0, 1), spanningTree.edgeValue(0, 1));\n        assertEquals(graph.edgeValue(1, 3), spanningTree.edgeValue(1, 3));\n        assertEquals(graph.edgeValue(2, 3), spanningTree.edgeValue(2, 3));\n        assertEquals(graph.edgeValue(2, 4), spanningTree.edgeValue(2, 4));\n\n        assertFalse(spanningTree.hasEdgeConnecting(0, 2));\n        assertFalse(spanningTree.hasEdgeConnecting(1, 2));\n        assertFalse(spanningTree.hasEdgeConnecting(3, 4));\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.linkedlist;\n\npublic class LinkedListReversal {\n\n    ListNode reverseList(ListNode head) {\n        ListNode previous = null;\n        ListNode current = head;\n        while (current != null) {\n            ListNode nextElement = current.getNext();\n            current.setNext(previous);\n            previous = current;\n            current = nextElement;\n        }\n        return previous;\n    }\n\n    ListNode reverseListRecursive(ListNode head) {\n        if (head == null) {\n            return null;\n        }\n        if (head.getNext() == null) {\n            return head;\n        }\n        ListNode node = reverseListRecursive(head.getNext());\n        head.getNext().setNext(head);\n        head.setNext(null);\n        return node;\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.linkedlist;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\nimport org.junit.jupiter.api.Test;\n\nclass LinkedListReversalUnitTest {\n    @Test\n    void givenLinkedList_whenIterativeReverse_thenOutputCorrectResult() {\n        ListNode head = constructLinkedList();\n        ListNode node = head;\n        for (int i = 1; i <= 5; i++) {\n            assertNotNull(node);\n            assertEquals(i, node.getData());\n            node = node.getNext();\n        }\n        LinkedListReversal reversal = new LinkedListReversal();\n        node = reversal.reverseList(head);\n        for (int i = 5; i >= 1; i--) {\n            assertNotNull(node);\n            assertEquals(i, node.getData());\n            node = node.getNext();\n        }\n    }\n\n    @Test\n    void givenLinkedList_whenRecursiveReverse_thenOutputCorrectResult() {\n        ListNode head = constructLinkedList();\n        ListNode node = head;\n        for (int i = 1; i <= 5; i++) {\n            assertNotNull(node);\n            assertEquals(i, node.getData());\n            node = node.getNext();\n        }\n        LinkedListReversal reversal = new LinkedListReversal();\n        node = reversal.reverseListRecursive(head);\n        for (int i = 5; i >= 1; i--) {\n            assertNotNull(node);\n            assertEquals(i, node.getData());\n            node = node.getNext();\n        }\n    }\n\n    private ListNode constructLinkedList() {\n        ListNode head = null;\n        ListNode tail = null;\n        for (int i = 1; i <= 5; i++) {\n            ListNode node = new ListNode(i);\n            if (head == null) {\n                head = node;\n            } else {\n                tail.setNext(node);\n            }\n            tail = node;\n        }\n        return head;\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.minheapmerge;\n\npublic class MinHeap {\n\n    HeapNode[] heapNodes;\n\n    public MinHeap(HeapNode heapNodes[]) {\n        this.heapNodes = heapNodes;\n        heapifyFromLastLeafsParent();\n    }\n\n    void heapifyFromLastLeafsParent() {\n        int lastLeafsParentIndex = getParentNodeIndex(heapNodes.length);\n        while (lastLeafsParentIndex >= 0) {\n            heapify(lastLeafsParentIndex);\n            lastLeafsParentIndex--;\n        }\n    }\n\n    void heapify(int index) {\n        int leftNodeIndex = getLeftNodeIndex(index);\n        int rightNodeIndex = getRightNodeIndex(index);\n        int smallestElementIndex = index;\n        if (leftNodeIndex < heapNodes.length && heapNodes[leftNodeIndex].element < heapNodes[index].element) {\n            smallestElementIndex = leftNodeIndex;\n        }\n        if (rightNodeIndex < heapNodes.length && heapNodes[rightNodeIndex].element < heapNodes[smallestElementIndex].element) {\n            smallestElementIndex = rightNodeIndex;\n        }\n        if (smallestElementIndex != index) {\n            swap(index, smallestElementIndex);\n            heapify(smallestElementIndex);\n        }\n    }\n\n    int getParentNodeIndex(int index) {\n        return (index - 1) / 2;\n    }\n\n    int getLeftNodeIndex(int index) {\n        return (2 * index + 1);\n    }\n\n    int getRightNodeIndex(int index) {\n        return (2 * index + 2);\n    }\n\n    HeapNode getRootNode() {\n        return heapNodes[0];\n    }\n\n    void heapifyFromRoot() {\n        heapify(0);\n    }\n\n    void swap(int i, int j) {\n        HeapNode temp = heapNodes[i];\n        heapNodes[i] = heapNodes[j];\n        heapNodes[j] = temp;\n    }\n    \n    static int[] merge(int[][] array) {\n        HeapNode[] heapNodes = new HeapNode[array.length];\n        int resultingArraySize = 0;\n\n        for (int i = 0; i < array.length; i++) {\n            HeapNode node = new HeapNode(array[i][0], i);\n            heapNodes[i] = node;\n            resultingArraySize += array[i].length;\n        }\n        \n        MinHeap minHeap = new MinHeap(heapNodes);\n        int[] resultingArray = new int[resultingArraySize];\n\n        for (int i = 0; i < resultingArraySize; i++) {\n            HeapNode root = minHeap.getRootNode();\n            resultingArray[i] = root.element;\n\n            if (root.nextElementIndex < array[root.arrayIndex].length) {\n                root.element = array[root.arrayIndex][root.nextElementIndex++];\n            } else {\n                root.element = Integer.MAX_VALUE;\n            }\n            minHeap.heapifyFromRoot();\n        }\n        return resultingArray;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.minheapmerge;\n\nimport static org.hamcrest.CoreMatchers.equalTo;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.hamcrest.MatcherAssert.assertThat;\n\nimport org.junit.jupiter.api.Test;\n\nclass MinHeapUnitTest {\n\n    private final int[][] inputArray = { { 0, 6 }, { 1, 5, 10, 100 }, { 2, 4, 200, 650 } };\n    private final int[] expectedArray = { 0, 1, 2, 4, 5, 6, 10, 100, 200, 650 };\n\n    @Test\n    void givenSortedArrays_whenMerged_thenShouldReturnASingleSortedarray() {\n        int[] resultArray = MinHeap.merge(inputArray);\n        \n        assertThat(resultArray.length, is(equalTo(10)));\n        assertThat(resultArray, is(equalTo(expectedArray)));\n    }\n    \n}\n"}
{"code_source": "package com.baeldung.algorithms.topkelements;\n\nimport java.util.List;\n\npublic interface TopKElementsFinder<T extends Comparable<T>> {\n    List<T> findTopK(List<T> input, int k);\n}\n", "test_case": "package com.baeldung.algorithms.topkelements;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.assertj.core.api.Java6Assertions.assertThat;\n\nimport org.junit.jupiter.api.Test;\n\nclass TopKElementsFinderUnitTest {\n    private final TopKElementsFinder<Integer> bruteForceFinder = new BruteForceTopKElementsFinder();\n    private final TopKElementsFinder<Integer> maxHeapFinder = new MaxHeapTopKElementsFinder();\n    private final TopKElementsFinder<Integer> treeSetFinder = new TreeSetTopKElementsFinder();\n\n    private final int k = 4;\n    private final List<Integer> distinctIntegers = Arrays.asList(1, 2, 3, 9, 7, 6, 12);\n    private final List<Integer> distinctIntegersTopK = Arrays.asList(9, 7, 6, 12);\n    private final List<Integer> nonDistinctIntegers = Arrays.asList(1, 2, 3, 3, 9, 9, 7, 6, 12);\n    private final List<Integer> nonDistinctIntegersTopK = Arrays.asList(9, 9, 7, 12);\n\n\n    @Test\n    void givenArrayDistinctIntegers_whenBruteForceFindTopK_thenReturnKLargest() {\n        assertThat(bruteForceFinder.findTopK(distinctIntegers, k)).containsOnlyElementsOf(distinctIntegersTopK);\n    }\n\n    @Test\n    void givenArrayDistinctIntegers_whenMaxHeapFindTopK_thenReturnKLargest() {\n        assertThat(maxHeapFinder.findTopK(distinctIntegers, k)).containsOnlyElementsOf(distinctIntegersTopK);\n    }\n\n    @Test\n    void givenArrayDistinctIntegers_whenTreeSetFindTopK_thenReturnKLargest() {\n        assertThat(treeSetFinder.findTopK(distinctIntegers, k)).containsOnlyElementsOf(distinctIntegersTopK);\n    }\n\n    @Test\n    void givenArrayNonDistinctIntegers_whenBruteForceFindTopK_thenReturnKLargest() {\n        assertThat(bruteForceFinder.findTopK(nonDistinctIntegers, k)).containsOnlyElementsOf(nonDistinctIntegersTopK);\n    }\n\n    @Test\n    void givenArrayNonDistinctIntegers_whenMaxHeapFindTopK_thenReturnKLargest() {\n        assertThat(maxHeapFinder.findTopK(nonDistinctIntegers, k)).containsOnlyElementsOf(nonDistinctIntegersTopK);\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.luhn;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class LuhnChecker {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(LuhnChecker.class);\n    \n    /*\n     * Starting from the rightmost digit, we add all the digits together, performing\n     * a special step for every second digit.\n     * \n     * If the result is not divisible by 10, then the card number must not be valid.\n     * \n     * We can form a number that passes the Luhn Check by subtracting the result of\n     * the Luhn algorithm from 10.\n     * \n     * This is how the final digit of a credit card is calculated.\n     */\n    public static boolean checkLuhn(String cardNumber) {\n        int sum = 0;\n\n        try {\n            for (int i = cardNumber.length() - 1; i >= 0; i--) {\n                int digit = Integer.parseInt(cardNumber.substring(i, i + 1));\n\n                if ((cardNumber.length() - i) % 2 == 0) {\n                    digit = doubleAndSumDigits(digit);\n                }\n\n                sum += digit;\n            }\n            \n            LOGGER.info(\"Luhn Algorithm sum of digits is \" + sum);\n            \n        } catch (NumberFormatException e) {\n            LOGGER.error(\"NumberFormatException - Card number probably contained some non-numeric characters, returning false\");\n            return false;\n        } catch (NullPointerException e) {\n            LOGGER.error(\"Null pointer - Card number was probably null, returning false\");\n            return false;\n        }\n        \n        boolean result = sum % 10 == 0;\n        \n        LOGGER.info(\"Luhn check result (sum divisible by 10): \" + result);\n        \n        return result;\n    }\n\n    /*\n     * We apply this method to every second number from the right of the card\n     * number. First, we double the digit, then we sum the digits.\n     * \n     * Note: subtracting 9 is equivalent to doubling and summing digits (when\n     * starting with a single digit) 0-4 -> produce single digit when doubled\n     * 5*2 = 10 -> 1+0 = 1 = 10-9 \n     * 6*2 = 12 -> 1+3 = 3 = 12-9 \n     * 7*2 = 14 -> 1+5 = 5 = 14-9\n     * 8*2 = 16 -> 1+7 = 7 = 16-9 \n     * 9*2 = 18 -> 1+9 = 9 = 18-9\n     */\n    public static int doubleAndSumDigits(int digit) {\n        int ret = digit * 2;\n\n        if (ret > 9) {\n            ret -= 9;\n        }\n\n        return ret;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.luhn;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\nclass LuhnCheckerUnitTest {\n\n    @Test\n    void whenCardNumberDoesMeetLuhnCriteria_thenCheckLuhnReturnsTrue() {\n        String cardNumber = \"8649\";\n        boolean result = LuhnChecker.checkLuhn(cardNumber);\n        assertTrue(result);\n    }\n    \n    @Test\n    void whenCardNumberDoesNotMeetLuhnCriteria_thenCheckLuhnReturnsFalse() {\n        String cardNumber = \"8642\";\n        boolean result = LuhnChecker.checkLuhn(cardNumber);\n        assertFalse(result);\n    }\n    \n    @Test\n    void whenCardNumberHasNoSecondDigits_thenCheckLuhnCalculatesCorrectly() {\n        String cardNumber = \"0505050505050505\";\n        boolean result = LuhnChecker.checkLuhn(cardNumber);\n        assertTrue(result);\n    }\n\n    @Test\n    void whenCardNumberHasSecondDigits_thenCheckLuhnCalculatesCorrectly() {\n        String cardNumber = \"75757575757575\";\n        boolean result = LuhnChecker.checkLuhn(cardNumber);\n        assertTrue(result);\n    }\n    \n    @Test\n    void whenDoubleAndSumDigitsIsCalled_thenOutputIsCorrect() {\n        assertEquals(0,LuhnChecker.doubleAndSumDigits(0));\n        assertEquals(2,LuhnChecker.doubleAndSumDigits(1));\n        assertEquals(4, LuhnChecker.doubleAndSumDigits(2));\n        assertEquals(6, LuhnChecker.doubleAndSumDigits(3));\n        assertEquals(8, LuhnChecker.doubleAndSumDigits(4));\n        assertEquals(1, LuhnChecker.doubleAndSumDigits(5));\n        assertEquals(3, LuhnChecker.doubleAndSumDigits(6));\n        assertEquals(5, LuhnChecker.doubleAndSumDigits(7));\n        assertEquals(7, LuhnChecker.doubleAndSumDigits(8));\n        assertEquals(9, LuhnChecker.doubleAndSumDigits(9));\n    }\n    \n    @Test\n    void whenCardNumberNonNumeric_thenCheckLuhnReturnsFalse() {\n        String cardNumber = \"test\";\n        boolean result = LuhnChecker.checkLuhn(cardNumber);\n        assertFalse(result);\n    }\n    \n    @Test\n    void whenCardNumberIsNull_thenCheckLuhnReturnsFalse() {\n        String cardNumber = null;\n        boolean result = LuhnChecker.checkLuhn(cardNumber);\n        assertFalse(result);\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.binarysearch;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class BinarySearch {\n\n    public int runBinarySearchIteratively(int[] sortedArray, int key, int low, int high) {\n\n        int index = Integer.MAX_VALUE;\n\n        while (low <= high) {\n\n            int mid = low + ((high - low) / 2);\n\n            if (sortedArray[mid] < key) {\n                low = mid + 1;\n            } else if (sortedArray[mid] > key) {\n                high = mid - 1;\n            } else if (sortedArray[mid] == key) {\n                index = mid;\n                break;\n            }\n        }\n        return index;\n    }\n\n    public int runBinarySearchRecursively(int[] sortedArray, int key, int low, int high) {\n\n        int middle = low + ((high - low) / 2);\n        if (high < low) {\n            return -1;\n        }\n\n        if (key == sortedArray[middle]) {\n          return middle;\n        } else if (key < sortedArray[middle]) {\n          return runBinarySearchRecursively(sortedArray, key, low, middle - 1);\n        } else {\n          return runBinarySearchRecursively(sortedArray, key, middle + 1, high);\n        }\n    }\n\n    public int runBinarySearchUsingJavaArrays(int[] sortedArray, Integer key) {\n        int index = Arrays.binarySearch(sortedArray, key);\n        return index;\n    }\n\n    public int runBinarySearchUsingJavaCollections(List<Integer> sortedList, Integer key) {\n        int index = Collections.binarySearch(sortedList, key);\n        return index;\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.binarysearch;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nclass BinarySearchUnitTest {\n\n    int[] sortedArray = { 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9 };\n    int key = 6;\n    int expectedIndexForSearchKey = 7;\n    int low = 0;\n    int high = sortedArray.length - 1;\n    List<Integer> sortedList = Arrays.asList(0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9);\n    \n    @Test\n    void givenASortedArrayOfIntegers_whenBinarySearchRunIterativelyForANumber_thenGetIndexOfTheNumber() {\n        BinarySearch binSearch = new BinarySearch();\n        assertEquals(expectedIndexForSearchKey, binSearch.runBinarySearchIteratively(sortedArray, key, low, high));\n    }\n\n    @Test\n    void givenASortedArrayOfIntegers_whenBinarySearchRunRecursivelyForANumber_thenGetIndexOfTheNumber() {\n        BinarySearch binSearch = new BinarySearch();\n        assertEquals(expectedIndexForSearchKey, binSearch.runBinarySearchRecursively(sortedArray, key, low, high));\n    }\n    \n    @Test\n    void givenASortedArrayOfIntegers_whenBinarySearchRunUsingArraysClassStaticMethodForANumber_thenGetIndexOfTheNumber() {\n        BinarySearch binSearch = new BinarySearch();\n        assertEquals(expectedIndexForSearchKey, binSearch.runBinarySearchUsingJavaArrays(sortedArray, key));\n    }\n    \n    @Test\n    void givenASortedListOfIntegers_whenBinarySearchRunUsingCollectionsClassStaticMethodForANumber_thenGetIndexOfTheNumber() {\n        BinarySearch binSearch = new BinarySearch();\n        assertEquals(expectedIndexForSearchKey, binSearch.runBinarySearchUsingJavaCollections(sortedList, key));\n    }\n    \n}\n"}
{"code_source": "package com.baeldung.algorithms.breadthfirstsearch;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\n\npublic class BreadthFirstSearchAlgorithm {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(BreadthFirstSearchAlgorithm.class);\n\n    public static <T> Optional<Tree<T>> search(T value, Tree<T> root) {\n        Queue<Tree<T>> queue = new ArrayDeque<>();\n        queue.add(root);\n\n        Tree<T> currentNode;\n        while (!queue.isEmpty()) {\n            currentNode = queue.remove();\n            LOGGER.debug(\"Visited node with value: {}\", currentNode.getValue());\n\n            if (currentNode.getValue().equals(value)) {\n                return Optional.of(currentNode);\n            } else {\n                queue.addAll(currentNode.getChildren());\n            }\n        }\n\n        return Optional.empty();\n    }\n\n    public static <T> Optional<Node<T>> search(T value, Node<T> start) {\n        Queue<Node<T>> queue = new ArrayDeque<>();\n        queue.add(start);\n\n        Node<T> currentNode;\n        Set<Node<T>> alreadyVisited = new HashSet<>();\n\n        while (!queue.isEmpty()) {\n            currentNode = queue.remove();\n            LOGGER.debug(\"Visited node with value: {}\", currentNode.getValue());\n\n            if (currentNode.getValue().equals(value)) {\n                return Optional.of(currentNode);\n            } else {\n                alreadyVisited.add(currentNode);\n                queue.addAll(currentNode.getNeighbors());\n                queue.removeAll(alreadyVisited);\n            }\n        }\n\n        return Optional.empty();\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.breadthfirstsearch;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass BreadthFirstSearchAlgorithmUnitTest {\n\n    private Tree<Integer> root;\n    private Tree<Integer> rootFirstChild;\n    private Tree<Integer> depthMostChild;\n    private Tree<Integer> rootSecondChild;\n\n    private Node<Integer> start;\n    private Node<Integer> firstNeighbor;\n    private Node<Integer> firstNeighborNeighbor;\n    private Node<Integer> secondNeighbor;\n\n    @Test\n    void givenTree_whenSearchTen_thenRoot() {\n        initTree();\n        assertThat(BreadthFirstSearchAlgorithm.search(10, root)).isPresent().contains(root);\n    }\n\n    @Test\n    void givenTree_whenSearchThree_thenDepthMostValue() {\n        initTree();\n        assertThat(BreadthFirstSearchAlgorithm.search(3, root)).isPresent().contains(depthMostChild);\n    }\n\n    @Test\n    void givenTree_whenSearchFour_thenRootSecondChild() {\n        initTree();\n        assertThat(BreadthFirstSearchAlgorithm.search(4, root)).isPresent().contains(rootSecondChild);\n    }\n\n    @Test\n    void givenTree_whenSearchFive_thenNotFound() {\n        initTree();\n        assertThat(BreadthFirstSearchAlgorithm.search(5, root)).isEmpty();\n    }\n\n    private void initTree() {\n        root = Tree.of(10);\n        rootFirstChild = root.addChild(2);\n        depthMostChild = rootFirstChild.addChild(3);\n        rootSecondChild = root.addChild(4);\n    }\n\n    @Test\n    void givenNode_whenSearchTen_thenStart() {\n        initNode();\n        assertThat(BreadthFirstSearchAlgorithm.search(10, firstNeighborNeighbor)).isPresent().contains(start);\n    }\n\n    @Test\n    void givenNode_whenSearchThree_thenNeighborNeighbor() {\n        initNode();\n        assertThat(BreadthFirstSearchAlgorithm.search(3, firstNeighborNeighbor)).isPresent().contains(firstNeighborNeighbor);\n    }\n\n    @Test\n    void givenNode_whenSearchFour_thenSecondNeighbor() {\n        initNode();\n        assertThat(BreadthFirstSearchAlgorithm.search(4, firstNeighborNeighbor)).isPresent().contains(secondNeighbor);\n    }\n\n    @Test\n    void givenNode_whenSearchFive_thenNotFound() {\n        initNode();\n        assertThat(BreadthFirstSearchAlgorithm.search(5, firstNeighborNeighbor)).isEmpty();\n    }\n\n    private void initNode() {\n        start = new Node<>(10);\n        firstNeighbor = new Node<>(2);\n        start.connect(firstNeighbor);\n\n        firstNeighborNeighbor = new Node<>(3);\n        firstNeighbor.connect(firstNeighborNeighbor);\n        firstNeighborNeighbor.connect(start);\n\n        secondNeighbor = new Node<>(4);\n        start.connect(secondNeighbor);\n    }\n}"}
{"code_source": "package com.baeldung.algorithms.quadtree;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class QuadTree {\n    private static final int MAX_POINTS = 3;\n    private Region area;\n    private List<Point> points = new ArrayList<>();\n    private List<QuadTree> quadTrees = new ArrayList<>();\n    private StringBuilder searchTraversePath;\n\n    public QuadTree(Region area) {\n        this.area = area;\n    }\n\n    public boolean addPoint(Point point) {\n        if (this.area.containsPoint(point)) {\n            if (this.points.size() < MAX_POINTS) {\n                this.points.add(point);\n                return true;\n            } else {\n                if (this.quadTrees.size() == 0) {\n                    createQuadrants();\n                }\n                return addPointToOneQuadrant(point);\n            }\n        }\n        return false;\n    }\n\n    private boolean addPointToOneQuadrant(Point point) {\n        boolean isPointAdded;\n        for (int i = 0; i < 4; i++) {\n            isPointAdded = this.quadTrees.get(i)\n                .addPoint(point);\n            if (isPointAdded)\n                return true;\n        }\n        return false;\n    }\n\n    private void createQuadrants() {\n        Region region;\n        for (int i = 0; i < 4; i++) {\n            region = this.area.getQuadrant(i);\n            quadTrees.add(new QuadTree(region));\n        }\n    }\n\n    public List<Point> search(Region searchRegion, List<Point> matches, String depthIndicator) {\n        searchTraversePath = new StringBuilder();\n        if (matches == null) {\n            matches = new ArrayList<Point>();\n            searchTraversePath.append(depthIndicator)\n                .append(\"Search Boundary =\")\n                .append(searchRegion)\n                .append(\"\\n\");\n        }\n        if (!this.area.doesOverlap(searchRegion)) {\n            return matches;\n        } else {\n            for (Point point : points) {\n                if (searchRegion.containsPoint(point)) {\n                    searchTraversePath.append(depthIndicator)\n                    .append(\"Found match \" + point)\n                    .append(\"\\n\");\n                    matches.add(point);\n                }\n            }\n            if (this.quadTrees.size() > 0) {\n                for (int i = 0; i < 4; i++) {\n                    searchTraversePath.append(depthIndicator)\n                        .append(\"Q\")\n                        .append(i)\n                        .append(\"-->\")\n                        .append(quadTrees.get(i).area)\n                        .append(\"\\n\");\n                    quadTrees.get(i)\n                        .search(searchRegion, matches, depthIndicator + \"\\t\");\n                    this.searchTraversePath.append(quadTrees.get(i)\n                        .printSearchTraversePath());\n                }\n            }\n        }\n        return matches;\n    }\n\n    public String printTree(String depthIndicator) {\n        String str = \"\";\n        if (depthIndicator == \"\") {\n            str += \"Root-->\" + area.toString() + \"\\n\";\n        }\n\n        for (Point point : points) {\n            str += depthIndicator + point.toString() + \"\\n\";\n        }\n        for (int i = 0; i < quadTrees.size(); i++) {\n            str += depthIndicator + \"Q\" + String.valueOf(i) + \"-->\" + quadTrees.get(i).area.toString() + \"\\n\";\n            str += quadTrees.get(i)\n                .printTree(depthIndicator + \"\\t\");\n        }\n        return str;\n    }\n\n    public String printSearchTraversePath() {\n        return searchTraversePath.toString();\n    }\n}\n", "test_case": "package com.baeldung.algorithms.quadtree;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nclass QuadTreeSearchUnitTest {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(QuadTreeSearchUnitTest.class);\n\n    private static QuadTree quadTree;\n\n    @BeforeAll\n    public static void setUp() {\n        Region area = new Region(0, 0, 400, 400);\n        quadTree = new QuadTree(area);\n\n        float[][] points = new float[][] { { 21, 25 }, { 55, 53 }, { 70, 318 }, { 98, 302 },\n            { 49, 229 }, { 135, 229 }, { 224, 292 }, { 206, 321 }, { 197, 258 }, { 245, 238 } };\n\n        for (int i = 0; i < points.length; i++) {\n            Point point = new Point(points[i][0], points[i][1]);\n            quadTree.addPoint(point);\n        }\n        LOGGER.debug(\"\\n\" + quadTree.printTree(\"\"));\n        LOGGER.debug(\"==============================================\");\n    }\n\n    @Test\n    void givenQuadTree_whenSearchingForRange_thenReturn1MatchingItem() {\n        Region searchArea = new Region(200, 200, 250, 250);\n        List<Point> result = quadTree.search(searchArea, null, \"\");\n\n        LOGGER.debug(result.toString());\n        LOGGER.debug(quadTree.printSearchTraversePath());\n\n        assertEquals(1, result.size());\n        assertArrayEquals(new float[] { 245, 238 },\n            new float[]{result.get(0).getX(), result.get(0).getY() }, 0);\n    }\n\n    @Test\n    void givenQuadTree_whenSearchingForRange_thenReturn2MatchingItems() {\n        Region searchArea = new Region(0, 0, 100, 100);\n        List<Point> result = quadTree.search(searchArea, null, \"\");\n\n        LOGGER.debug(result.toString());\n        LOGGER.debug(quadTree.printSearchTraversePath());\n\n        assertEquals(2, result.size());\n        assertArrayEquals(new float[] { 21, 25 },\n            new float[]{result.get(0).getX(), result.get(0).getY() }, 0);\n        assertArrayEquals(new float[] { 55, 53 },\n            new float[]{result.get(1).getX(), result.get(1).getY() }, 0);\n\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.suffixtree;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class SuffixTree {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SuffixTree.class);\n\n    private static final String WORD_TERMINATION = \"$\";\n    private static final int POSITION_UNDEFINED = -1;\n    private Node root;\n    private String fullText;\n\n    public SuffixTree(String text) {\n        root = new Node(\"\", POSITION_UNDEFINED);\n        for (int i = 0; i < text.length(); i++) {\n            addSuffix(text.substring(i) + WORD_TERMINATION, i);\n        }\n        fullText = text;\n    }\n\n    public List<String> searchText(String pattern) {\n        LOGGER.debug(\"Searching for pattern \\\"{}\\\"\", pattern);\n        List<String> result = new ArrayList<>();\n        List<Node> nodes = getAllNodesInTraversePath(pattern, root, false);\n\n        if (nodes.size() > 0) {\n            Node lastNode = nodes.get(nodes.size() - 1);\n            if (lastNode != null) {\n                List<Integer> positions = getPositions(lastNode);\n                positions = positions.stream()\n                    .sorted()\n                    .collect(Collectors.toList());\n                positions.forEach(m -> result.add((markPatternInText(m, pattern))));\n            }\n        }\n        return result;\n    }\n\n    private void addSuffix(String suffix, int position) {\n        LOGGER.debug(\">>>>>>>>>>>> Adding new suffix {}\", suffix);\n        List<Node> nodes = getAllNodesInTraversePath(suffix, root, true);\n        if (nodes.size() == 0) {\n            addChildNode(root, suffix, position);\n            LOGGER.debug(\"{}\", printTree());\n        } else {\n            Node lastNode = nodes.remove(nodes.size() - 1);\n            String newText = suffix;\n            if (nodes.size() > 0) {\n                String existingSuffixUptoLastNode = nodes.stream()\n                    .map(a -> a.getText())\n                    .reduce(\"\", String::concat);\n\n                // Remove prefix from newText already included in parent\n                newText = newText.substring(existingSuffixUptoLastNode.length());\n            }\n            extendNode(lastNode, newText, position);\n            LOGGER.debug(\"{}\", printTree());\n        }\n    }\n\n    private List<Integer> getPositions(Node node) {\n        List<Integer> positions = new ArrayList<>();\n        if (node.getText()\n            .endsWith(WORD_TERMINATION)) {\n            positions.add(node.getPosition());\n        }\n        for (int i = 0; i < node.getChildren()\n            .size(); i++) {\n            positions.addAll(getPositions(node.getChildren()\n                .get(i)));\n        }\n        return positions;\n    }\n\n    private String markPatternInText(Integer startPosition, String pattern) {\n        String matchingTextLHS = fullText.substring(0, startPosition);\n        String matchingText = fullText.substring(startPosition, startPosition + pattern.length());\n        String matchingTextRHS = fullText.substring(startPosition + pattern.length());\n        return matchingTextLHS + \"[\" + matchingText + \"]\" + matchingTextRHS;\n    }\n\n    private void addChildNode(Node parentNode, String text, int position) {\n        parentNode.getChildren()\n            .add(new Node(text, position));\n    }\n\n    private void extendNode(Node node, String newText, int position) {\n        String currentText = node.getText();\n        String commonPrefix = getLongestCommonPrefix(currentText, newText);\n\n        if (commonPrefix != currentText) {\n            String parentText = currentText.substring(0, commonPrefix.length());\n            String childText = currentText.substring(commonPrefix.length());\n            splitNodeToParentAndChild(node, parentText, childText);\n        }\n\n        String remainingText = newText.substring(commonPrefix.length());\n        addChildNode(node, remainingText, position);\n    }\n\n    private void splitNodeToParentAndChild(Node parentNode, String parentNewText, String childNewText) {\n        Node childNode = new Node(childNewText, parentNode.getPosition());\n\n        if (parentNode.getChildren()\n            .size() > 0) {\n            while (parentNode.getChildren()\n                .size() > 0) {\n                childNode.getChildren()\n                    .add(parentNode.getChildren()\n                        .remove(0));\n            }\n        }\n\n        parentNode.getChildren()\n            .add(childNode);\n        parentNode.setText(parentNewText);\n        parentNode.setPosition(POSITION_UNDEFINED);\n    }\n\n    private String getLongestCommonPrefix(String str1, String str2) {\n        int compareLength = Math.min(str1.length(), str2.length());\n        for (int i = 0; i < compareLength; i++) {\n            if (str1.charAt(i) != str2.charAt(i)) {\n                return str1.substring(0, i);\n            }\n        }\n        return str1.substring(0, compareLength);\n    }\n\n    private List<Node> getAllNodesInTraversePath(String pattern, Node startNode, boolean isAllowPartialMatch) {\n        List<Node> nodes = new ArrayList<>();\n        for (int i = 0; i < startNode.getChildren()\n            .size(); i++) {\n            Node currentNode = startNode.getChildren()\n                .get(i);\n            String nodeText = currentNode.getText();\n            if (pattern.charAt(0) == nodeText.charAt(0)) {\n                if (isAllowPartialMatch && pattern.length() <= nodeText.length()) {\n                    nodes.add(currentNode);\n                    return nodes;\n                }\n\n                int compareLength = Math.min(nodeText.length(), pattern.length());\n                for (int j = 1; j < compareLength; j++) {\n                    if (pattern.charAt(j) != nodeText.charAt(j)) {\n                        if (isAllowPartialMatch) {\n                            nodes.add(currentNode);\n                        }\n                        return nodes;\n                    }\n                }\n\n                nodes.add(currentNode);\n                if (pattern.length() > compareLength) {\n                    List<Node> nodes2 = getAllNodesInTraversePath(pattern.substring(compareLength), currentNode, isAllowPartialMatch);\n                    if (nodes2.size() > 0) {\n                        nodes.addAll(nodes2);\n                    } else if (!isAllowPartialMatch) {\n                        nodes.add(null);\n                    }\n                }\n                return nodes;\n            }\n        }\n        return nodes;\n    }\n\n    public String printTree() {\n        return root.printTree(\"\");\n    }\n}\n", "test_case": "package com.baeldung.algorithms.suffixtree;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nclass SuffixTreeUnitTest {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SuffixTreeUnitTest.class);\n\n    private static SuffixTree suffixTree;\n\n    @BeforeAll\n    public static void setUp() {\n        suffixTree = new SuffixTree(\"havanabanana\");\n        printTree();\n    }\n\n    @Test\n    void givenSuffixTree_whenSearchingForA_thenReturn6Matches() {\n        List<String> matches = suffixTree.searchText(\"a\");\n        matches.stream()\n            .forEach(m -> LOGGER.debug(m));\n        assertArrayEquals(new String[] { \"h[a]vanabanana\", \"hav[a]nabanana\", \"havan[a]banana\", \"havanab[a]nana\", \"havanaban[a]na\", \"havanabanan[a]\" }, matches.toArray());\n    }\n\n    @Test\n    void givenSuffixTree_whenSearchingForNab_thenReturn1Match() {\n        List<String> matches = suffixTree.searchText(\"nab\");\n        matches.stream()\n            .forEach(m -> LOGGER.debug(m));\n        assertArrayEquals(new String[] { \"hava[nab]anana\" }, matches.toArray());\n    }\n\n    @Test\n    void givenSuffixTree_whenSearchingForNag_thenReturnNoMatches() {\n        List<String> matches = suffixTree.searchText(\"nag\");\n        matches.stream()\n            .forEach(m -> LOGGER.debug(m));\n        assertArrayEquals(new String[] {}, matches.toArray());\n    }\n\n    @Test\n    void givenSuffixTree_whenSearchingForBanana_thenReturn2Matches() {\n        List<String> matches = suffixTree.searchText(\"ana\");\n        matches.stream()\n            .forEach(m -> LOGGER.debug(m));\n        assertArrayEquals(new String[] { \"hav[ana]banana\", \"havanab[ana]na\", \"havanaban[ana]\" }, matches.toArray());\n    }\n\n    @Test\n    void givenSuffixTree_whenSearchingForNa_thenReturn4Matches() {\n        List<String> matches = suffixTree.searchText(\"na\");\n        matches.stream()\n            .forEach(m -> LOGGER.debug(m));\n        assertArrayEquals(new String[] { \"hava[na]banana\", \"havanaba[na]na\", \"havanabana[na]\" }, matches.toArray());\n    }\n\n    @Test\n    void givenSuffixTree_whenSearchingForX_thenReturnNoMatches() {\n        List<String> matches = suffixTree.searchText(\"x\");\n        matches.stream()\n            .forEach(m -> LOGGER.debug(m));\n        assertArrayEquals(new String[] {}, matches.toArray());\n    }\n\n    private static void printTree() {\n        suffixTree.printTree();\n\n        LOGGER.debug(\"\\n\" + suffixTree.printTree());\n        LOGGER.debug(\"==============================================\");\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.interpolationsearch;\n\npublic class InterpolationSearch {\n\n    public static int interpolationSearch(int[] data, int item) {\n\n        int highEnd = (data.length - 1);\n        int lowEnd = 0;\n\n        while (item >= data[lowEnd] && item <= data[highEnd] && lowEnd <= highEnd) {\n\n            int probe = lowEnd + (highEnd - lowEnd) * (item - data[lowEnd]) / (data[highEnd] - data[lowEnd]);\n\n            if (highEnd == lowEnd) {\n                if (data[lowEnd] == item) {\n                    return lowEnd;\n                } else {\n                    return -1;\n                }\n            }\n\n            if (data[probe] == item) {\n                return probe;\n            }\n\n            if (data[probe] < item) {\n                lowEnd = probe + 1;\n            } else {\n                highEnd = probe - 1;\n            }\n        }\n        return -1;\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.interpolationsearch;\n\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nclass InterpolationSearchUnitTest {\n    \n    private int[] myData;\n\n    @BeforeEach\n    public void setUp() {\n        myData = new int[]{13,21,34,55,69,73,84,101};\n    }\n    \n    @Test\n    void givenSortedArray_whenLookingFor84_thenReturn6() {\n        int pos = InterpolationSearch.interpolationSearch(myData, 84);\n        assertEquals(6, pos);\n    }\n    \n    @Test\n    void givenSortedArray_whenLookingFor19_thenReturnMinusOne() {\n        int pos = InterpolationSearch.interpolationSearch(myData, 19);\n        assertEquals(-1, pos);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.kthsmallest;\n\nimport java.util.Arrays;\nimport java.util.NoSuchElementException;\n\nimport static java.lang.Math.max;\nimport static java.lang.Math.min;\n\npublic class KthSmallest {\n\n    public static int findKthSmallestElement(int k, int[] list1, int[] list2)  throws NoSuchElementException, IllegalArgumentException {\n\n        checkInput(k, list1, list2);\n\n        // we are looking for the minimum value\n        if(k == 1) {\n            return min(list1[0], list2[0]);\n        }\n\n        // we are looking for the maximum value\n        if(list1.length + list2.length == k) {\n            return max(list1[list1.length-1], list2[list2.length-1]);\n        }\n\n        // swap lists if needed to make sure we take at least one element from list1\n        if(k <= list2.length && list2[k-1] < list1[0]) {\n            int[] list1_ = list1;\n            list1 = list2;\n            list2 = list1_;\n        }\n\n        // correct left boundary if k is bigger than the size of list2\n        int left = k < list2.length ? 0 : k - list2.length - 1;\n\n        // the inital right boundary cannot exceed the list1\n        int right = min(k-1, list1.length - 1);\n\n        int nElementsList1, nElementsList2;\n\n        // binary search\n        do {\n            nElementsList1 = ((left + right) / 2) + 1;\n            nElementsList2 = k - nElementsList1;\n\n            if(nElementsList2 > 0) {\n                if (list1[nElementsList1 - 1] > list2[nElementsList2 - 1]) {\n                    right = nElementsList1 - 2;\n                } else {\n                    left = nElementsList1;\n                }\n            }\n        } while(!kthSmallesElementFound(list1, list2, nElementsList1, nElementsList2));\n\n        return nElementsList2 == 0 ? list1[nElementsList1-1] : max(list1[nElementsList1-1], list2[nElementsList2-1]);\n    }\n\n    private static boolean kthSmallesElementFound(int[] list1, int[] list2, int nElementsList1, int nElementsList2) {\n\n        // we do not take any element from the second list\n        if(nElementsList2 < 1) {\n            return true;\n        }\n\n        if(list1[nElementsList1-1] == list2[nElementsList2-1]) {\n            return true;\n        }\n\n        if(nElementsList1 == list1.length) {\n            return list1[nElementsList1-1] <= list2[nElementsList2];\n        }\n\n        if(nElementsList2 == list2.length) {\n            return list2[nElementsList2-1] <= list1[nElementsList1];\n        }\n\n        return list1[nElementsList1-1] <= list2[nElementsList2] && list2[nElementsList2-1] <= list1[nElementsList1];\n    }\n\n\n    private static void checkInput(int k, int[] list1, int[] list2) throws NoSuchElementException, IllegalArgumentException {\n\n        if(list1 == null || list2 == null || k < 1) {\n            throw new IllegalArgumentException();\n        }\n\n        if(list1.length == 0 || list2.length == 0) {\n            throw new IllegalArgumentException();\n        }\n\n        if(k > list1.length + list2.length) {\n            throw new NoSuchElementException();\n        }\n    }\n\n    public static int getKthElementSorted(int[] list1, int[] list2, int k) {\n\n        int length1 = list1.length, length2 = list2.length;\n        int[] combinedArray = new int[length1 + length2];\n        System.arraycopy(list1, 0, combinedArray, 0, list1.length);\n        System.arraycopy(list2, 0, combinedArray, list1.length, list2.length);\n        Arrays.sort(combinedArray);\n\n        return combinedArray[k-1];\n    }\n\n    public static int getKthElementMerge(int[] list1, int[] list2, int k) {\n\n        int i1 = 0, i2 = 0;\n\n        while(i1 < list1.length && i2 < list2.length && (i1 + i2) < k) {\n            if(list1[i1] < list2[i2]) {\n                i1++;\n            } else {\n                i2++;\n            }\n        }\n\n        if((i1 + i2) < k) {\n            return i1 < list1.length ? list1[k - i2 - 1] : list2[k - i1 - 1];\n        } else if(i1 > 0 && i2 > 0) {\n            return Math.max(list1[i1-1], list2[i2-1]);\n        } else {\n            return i1 == 0 ? list2[i2-1] : list1[i1-1];\n        }\n    }\n}\n", "test_case": "package com.baeldung.algorithms.kthsmallest;\n\nimport org.junit.jupiter.api.Nested;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.function.Executable;\n\nimport java.util.*;\n\nimport static com.baeldung.algorithms.kthsmallest.KthSmallest.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass KthSmallestUnitTest {\n\n    @Nested\n    class Exceptions {\n\n        @Test\n        void when_at_least_one_list_is_null_then_an_exception_is_thrown() {\n\n            Executable executable1 = () -> findKthSmallestElement(1, null, null);\n            Executable executable2 = () -> findKthSmallestElement(1, new int[]{2}, null);\n            Executable executable3 = () -> findKthSmallestElement(1, null, new int[]{2});\n\n            assertThrows(IllegalArgumentException.class, executable1);\n            assertThrows(IllegalArgumentException.class, executable2);\n            assertThrows(IllegalArgumentException.class, executable3);\n        }\n\n        @Test\n        void when_at_least_one_list_is_empty_then_an_exception_is_thrown() {\n\n            Executable executable1 = () -> findKthSmallestElement(1, new int[]{}, new int[]{2});\n            Executable executable2 = () -> findKthSmallestElement(1, new int[]{2}, new int[]{});\n            Executable executable3 = () -> findKthSmallestElement(1, new int[]{}, new int[]{});\n\n            assertThrows(IllegalArgumentException.class, executable1);\n            assertThrows(IllegalArgumentException.class, executable2);\n            assertThrows(IllegalArgumentException.class, executable3);\n        }\n\n        @Test\n        void when_k_is_smaller_than_0_then_an_exception_is_thrown() {\n            Executable executable1 = () -> findKthSmallestElement(-1, new int[]{2}, new int[]{2});\n            assertThrows(IllegalArgumentException.class, executable1);\n        }\n\n        @Test\n        void when_k_is_smaller_than_1_then_an_exception_is_thrown() {\n            Executable executable1 = () -> findKthSmallestElement(0, new int[]{2}, new int[]{2});\n            assertThrows(IllegalArgumentException.class, executable1);\n        }\n\n        @Test\n        void when_k_bigger_then_the_two_lists_then_an_exception_is_thrown() {\n            Executable executable1 = () -> findKthSmallestElement(6, new int[]{1, 5, 6}, new int[]{2, 5});\n            assertThrows(NoSuchElementException.class, executable1);\n        }\n\n    }\n\n    @Nested\n    class K_is_smaller_than_the_size_of_list1_and_the_size_of_list2 {\n\n        @Test\n        public void when_k_is_1_then_the_smallest_element_is_returned_from_list1() {\n            int result = findKthSmallestElement(1, new int[]{2, 7}, new int[]{3, 5});\n            assertEquals(2, result);\n        }\n\n        @Test\n        public void when_k_is_1_then_the_smallest_element_is_returned_list2() {\n            int result = findKthSmallestElement(1, new int[]{3, 5}, new int[]{2, 7});\n            assertEquals(2, result);\n        }\n\n        @Test\n        public void when_kth_element_is_smallest_element_and_occurs_in_both_lists() {\n            int[] list1 = new int[]{1, 2, 3};\n            int[] list2 = new int[]{1, 2, 3};\n            int result = findKthSmallestElement(1, list1, list2);\n            assertEquals(1, result);\n        }\n\n        @Test\n        public void when_kth_element_is_smallest_element_and_occurs_in_both_lists2() {\n            int[] list1 = new int[]{1, 2, 3};\n            int[] list2 = new int[]{1, 2, 3};\n            int result = findKthSmallestElement(2, list1, list2);\n            assertEquals(1, result);\n        }\n\n        @Test\n        public void when_kth_element_is_largest_element_and_occurs_in_both_lists_1() {\n            int[] list1 = new int[]{1, 2, 3};\n            int[] list2 = new int[]{1, 2, 3};\n            int result = findKthSmallestElement(5, list1, list2);\n            assertEquals(3, result);\n        }\n\n        @Test\n        public void when_kth_element_is_largest_element_and_occurs_in_both_lists_2() {\n            int[] list1 = new int[]{1, 2, 3};\n            int[] list2 = new int[]{1, 2, 3};\n            int result = findKthSmallestElement(6, list1, list2);\n            assertEquals(3, result);\n        }\n\n        @Test\n        public void when_kth_element_and_occurs_in_both_lists() {\n            int[] list1 = new int[]{1, 2, 3};\n            int[] list2 = new int[]{0, 2, 3};\n            int result = findKthSmallestElement(3, list1, list2);\n            assertEquals(2, result);\n        }\n\n        @Test\n        public void and_kth_element_is_in_first_list() {\n            int[] list1 = new int[]{1,2,3,4};\n            int[] list2 = new int[]{1,3,4,5};\n            int result = findKthSmallestElement(3,  list1, list2);\n            assertEquals(2, result);\n        }\n\n        @Test\n        public void and_kth_is_in_second_list() {\n            int[] list1 = new int[]{1,3,4,4};\n            int[] list2 = new int[]{1,2,4,5};\n            int result = findKthSmallestElement(3,  list1, list2);\n            assertEquals(2, result);\n        }\n\n        @Test\n        public void and_elements_in_first_list_are_all_smaller_than_second_list() {\n            int[] list1 = new int[]{1,3,7,9};\n            int[] list2 = new int[]{11,12,14,15};\n            int result = findKthSmallestElement(3,  list1, list2);\n            assertEquals(7, result);\n        }\n\n        @Test\n        public void and_elements_in_first_list_are_all_smaller_than_second_list2() {\n            int[] list1 = new int[]{1,3,7,9};\n            int[] list2 = new int[]{11,12,14,15};\n            int result = findKthSmallestElement(4,  list1, list2);\n            assertEquals(9, result);\n        }\n\n        @Test\n        public void and_only_elements_from_second_list_are_part_of_result() {\n            int[] list1 = new int[]{11,12,14,15};\n            int[] list2 = new int[]{1,3,7,9};\n            int result = findKthSmallestElement(3,  list1, list2);\n            assertEquals(7, result);\n        }\n\n        @Test\n        public void and_only_elements_from_second_list_are_part_of_result2() {\n            int[] list1 = new int[]{11,12,14,15};\n            int[] list2 = new int[]{1,3,7,9};\n            int result = findKthSmallestElement(4,  list1, list2);\n            assertEquals(9, result);\n        }\n    }\n\n    @Nested\n    class K_is_bigger_than_the_size_of_at_least_one_of_the_lists {\n\n        @Test\n        public void k_is_smaller_than_list1_and_bigger_than_list2() {\n            int[] list1 = new int[]{1, 2, 3, 4, 7, 9};\n            int[] list2 = new int[]{1, 2, 3};\n            int result = findKthSmallestElement(5, list1, list2);\n            assertEquals(3, result);\n        }\n\n        @Test\n        public void k_is_bigger_than_list1_and_smaller_than_list2() {\n            int[] list1 = new int[]{1, 2, 3};\n            int[] list2 = new int[]{1, 2, 3, 4, 7, 9};\n            int result = findKthSmallestElement(5, list1, list2);\n            assertEquals(3, result);\n        }\n\n        @Test\n        public void when_k_is_bigger_than_the_size_of_both_lists_and_elements_in_second_list_are_all_smaller_than_first_list() {\n            int[] list1 = new int[]{9, 11, 13, 55};\n            int[] list2 = new int[]{1, 2, 3, 7};\n            int result = findKthSmallestElement(6, list1, list2);\n            assertEquals(11, result);\n        }\n\n        @Test\n        public void when_k_is_bigger_than_the_size_of_both_lists_and_elements_in_second_list_are_all_bigger_than_first_list() {\n            int[] list1 = new int[]{1, 2, 3, 7};\n            int[] list2 = new int[]{9, 11, 13, 55};\n            int result = findKthSmallestElement(6, list1, list2);\n            assertEquals(11, result);\n        }\n\n        @Test\n        public void when_k_is_bigger_than_the_size_of_both_lists() {\n            int[] list1 = new int[]{3, 7, 9, 11, 55};\n            int[] list2 = new int[]{1, 2, 3, 7, 13};\n            int result = findKthSmallestElement(7, list1, list2);\n            assertEquals(9, result);\n        }\n\n        @Test\n        public void when_k_is_bigger_than_the_size_of_both_lists_and_list1_has_more_elements_than_list2() {\n            int[] list1 = new int[]{3, 7, 9, 11, 55, 77, 100, 200};\n            int[] list2 = new int[]{1, 2, 3, 7, 13};\n            int result = findKthSmallestElement(11, list1, list2);\n            assertEquals(77, result);\n        }\n\n        @Test\n        public void max_test() {\n            int[] list1 = new int[]{100, 200};\n            int[] list2 = new int[]{1, 2, 3};\n            int result = findKthSmallestElement(4, list1, list2);\n            assertEquals(100, result);\n        }\n\n        @Test\n        public void max_test2() {\n            int[] list1 = new int[]{100, 200};\n            int[] list2 = new int[]{1, 2, 3};\n            int result = findKthSmallestElement(5, list1, list2);\n            assertEquals(200, result);\n        }\n\n        @Test\n        public void when_k_is_smaller_than_the_size_of_both_lists_and_kth_element_in_list2() {\n            int[] list1 = new int[]{1, 2, 5};\n            int[] list2 = new int[]{1, 3, 4, 7};\n            int result = findKthSmallestElement(4, list1, list2);\n            assertEquals(3, result);\n        }\n\n        @Test\n        public void when_k_is_smaller_than_the_size_of_both_lists_and_kth_element_is_smallest_in_list2() {\n            int[] list1 = new int[]{1, 2, 5};\n            int[] list2 = new int[]{3, 4, 7};\n            int result = findKthSmallestElement(3, list1, list2);\n            assertEquals(3, result);\n        }\n\n        @Test\n        public void when_k_is_smaller_than_the_size_of_both_lists_and_kth_element_is_smallest_in_list23() {\n            int[] list1 = new int[]{3, 11, 27, 53, 90};\n            int[] list2 = new int[]{4, 20, 21, 100};\n            int result = findKthSmallestElement(5, list1, list2);\n            assertEquals(21, result);\n        }\n    }\n\n//    @Test\n//    public void randomTests() {\n//        IntStream.range(1, 100000).forEach(i -> random());\n//    }\n\n    private void random() {\n\n        Random random = new Random();\n        int length1 = (Math.abs(random.nextInt())) % 1000 + 1;\n        int length2 = (Math.abs(random.nextInt())) % 1000 + 1;\n\n        int[] list1 = sortedRandomIntArrayOfLength(length1);\n        int[] list2 = sortedRandomIntArrayOfLength(length2);\n\n        int k = (Math.abs(random.nextInt()) % (length1 + length2)) + 1 ;\n\n        int result = findKthSmallestElement(k,  list1, list2);\n\n        int result2 = getKthElementSorted(list1, list2, k);\n\n        int result3 = getKthElementMerge(list1, list2, k);\n\n        assertEquals(result2, result);\n        assertEquals(result2, result3);\n    }\n\n    private int[] sortedRandomIntArrayOfLength(int length) {\n        int[] intArray = new Random().ints(length).toArray();\n        Arrays.sort(intArray);\n        return intArray;\n    }\n}"}
{"code_source": "package com.baeldung.algorithms.textsearch;\n\nimport java.math.BigInteger;\nimport java.util.Random;\n\npublic class TextSearchAlgorithms {\n    public static long getBiggerPrime(int m) {\n        BigInteger prime = BigInteger.probablePrime(getNumberOfBits(m) + 1, new Random());\n        return prime.longValue();\n    }\n\n    public static long getLowerPrime(long number) {\n        BigInteger prime = BigInteger.probablePrime(getNumberOfBits(number) - 1, new Random());\n        return prime.longValue();\n    }\n\n    private static int getNumberOfBits(final int number) {\n        return Integer.SIZE - Integer.numberOfLeadingZeros(number);\n    }\n\n    private static int getNumberOfBits(final long number) {\n        return Long.SIZE - Long.numberOfLeadingZeros(number);\n    }\n\n    public static int simpleTextSearch(char[] pattern, char[] text) {\n        int patternSize = pattern.length;\n        int textSize = text.length;\n\n        int i = 0;\n\n        while ((i + patternSize) <= textSize) {\n            int j = 0;\n            while (text[i + j] == pattern[j]) {\n                j += 1;\n                if (j >= patternSize)\n                    return i;\n            }\n            i += 1;\n        }\n\n        return -1;\n    }\n\n    public static int RabinKarpMethod(char[] pattern, char[] text) {\n        int patternSize = pattern.length; // m\n        int textSize = text.length; // n\n\n        long prime = getBiggerPrime(patternSize);\n\n        long r = 1;\n        for (int i = 0; i < patternSize - 1; i++) {\n            r *= 2;\n            r = r % prime;\n        }\n\n        long[] t = new long[textSize];\n        t[0] = 0;\n\n        long pfinger = 0;\n\n        for (int j = 0; j < patternSize; j++) {\n            t[0] = (2 * t[0] + text[j]) % prime;\n            pfinger = (2 * pfinger + pattern[j]) % prime;\n        }\n\n        int i = 0;\n        boolean passed = false;\n\n        int diff = textSize - patternSize;\n        for (i = 0; i <= diff; i++) {\n            if (t[i] == pfinger) {\n                passed = true;\n                for (int k = 0; k < patternSize; k++) {\n                    if (text[i + k] != pattern[k]) {\n                        passed = false;\n                        break;\n                    }\n                }\n\n                if (passed) {\n                    return i;\n                }\n            }\n\n            if (i < diff) {\n                long value = 2 * (t[i] - r * text[i]) + text[i + patternSize];\n                t[i + 1] = ((value % prime) + prime) % prime;\n            }\n        }\n        return -1;\n\n    }\n\n    public static int KnuthMorrisPrattSearch(char[] pattern, char[] text) {\n        int patternSize = pattern.length; // m\n        int textSize = text.length; // n\n\n        int i = 0, j = 0;\n\n        int[] shift = KnuthMorrisPrattShift(pattern);\n\n        while ((i + patternSize) <= textSize) {\n            while (text[i + j] == pattern[j]) {\n                j += 1;\n                if (j >= patternSize)\n                    return i;\n            }\n\n            if (j > 0) {\n                i += shift[j - 1];\n                j = Math.max(j - shift[j - 1], 0);\n            } else {\n                i++;\n                j = 0;\n            }\n        }\n        return -1;\n    }\n\n    public static int[] KnuthMorrisPrattShift(char[] pattern) {\n        int patternSize = pattern.length;\n\n        int[] shift = new int[patternSize];\n        shift[0] = 1;\n\n        int i = 1, j = 0;\n\n        while ((i + j) < patternSize) {\n            if (pattern[i + j] == pattern[j]) {\n                shift[i + j] = i;\n                j++;\n            } else {\n                if (j == 0)\n                    shift[i] = i + 1;\n\n                if (j > 0) {\n                    i = i + shift[j - 1];\n                    j = Math.max(j - shift[j - 1], 0);\n                } else {\n                    i = i + 1;\n                    j = 0;\n                }\n            }\n        }\n        return shift;\n    }\n\n    public static int BoyerMooreHorspoolSimpleSearch(char[] pattern, char[] text) {\n        int patternSize = pattern.length;\n        int textSize = text.length;\n\n        int i = 0, j = 0;\n\n        while ((i + patternSize) <= textSize) {\n            j = patternSize - 1;\n            while (text[i + j] == pattern[j]) {\n                j--;\n                if (j < 0)\n                    return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n\n    public static int BoyerMooreHorspoolSearch(char[] pattern, char[] text) {\n\n        int shift[] = new int[256];\n\n        for (int k = 0; k < 256; k++) {\n            shift[k] = pattern.length;\n        }\n\n        for (int k = 0; k < pattern.length - 1; k++) {\n            shift[pattern[k]] = pattern.length - 1 - k;\n        }\n\n        int i = 0, j = 0;\n\n        while ((i + pattern.length) <= text.length) {\n            j = pattern.length - 1;\n\n            while (text[i + j] == pattern[j]) {\n                j -= 1;\n                if (j < 0)\n                    return i;\n            }\n\n            i = i + shift[text[i + pattern.length - 1]];\n\n        }\n        return -1;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.textsearch;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.Test;\n\nclass TextSearchAlgorithmsUnitTest {\n\n\n    @Test\n    void testStringSearchAlgorithms() {\n        String text = \"This is some nice text.\";\n        String pattern = \"some\";\n\n        int realPosition = text.indexOf(pattern);\n        assertEquals(TextSearchAlgorithms.simpleTextSearch(pattern.toCharArray(), text.toCharArray()), realPosition);\n        assertEquals(TextSearchAlgorithms.RabinKarpMethod(pattern.toCharArray(), text.toCharArray()), realPosition);\n        assertEquals(TextSearchAlgorithms.KnuthMorrisPrattSearch(pattern.toCharArray(), text.toCharArray()) , realPosition);\n        assertEquals(TextSearchAlgorithms.BoyerMooreHorspoolSimpleSearch(pattern.toCharArray(), text.toCharArray()), realPosition);\n        assertEquals(TextSearchAlgorithms.BoyerMooreHorspoolSearch(pattern.toCharArray(), text.toCharArray()), realPosition);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.bubblesort;\n\nimport java.util.stream.IntStream;\n\npublic class BubbleSort {\n\n    void bubbleSort(Integer[] arr) {\n        int n = arr.length;\n        IntStream.range(0, n - 1)\n          .flatMap(i -> IntStream.range(1, n - i))\n          .forEach(j -> {\n              if (arr[j - 1] > arr[j]) {\n                  int temp = arr[j];\n                  arr[j] = arr[j - 1];\n                  arr[j - 1] = temp;\n              }\n          });\n    }\n\n    void optimizedBubbleSort(Integer[] arr) {\n        int i = 0, n = arr.length;\n\n        boolean swapNeeded = true;\n        while (i < n - 1 && swapNeeded) {\n            swapNeeded = false;\n            for (int j = 1; j < n - i; j++) {\n                if (arr[j - 1] > arr[j]) {\n\n                    int temp = arr[j - 1];\n                    arr[j - 1] = arr[j];\n                    arr[j] = temp;\n                    swapNeeded = true;\n                }\n            }\n            if (!swapNeeded)\n                break;\n            i++;\n        }\n    }\n}\n", "test_case": "package com.baeldung.algorithms.bubblesort;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass BubbleSortUnitTest {\n\n    @Test\n    void givenIntegerArray_whenSortedWithBubbleSort_thenGetSortedArray() {\n        Integer[] array = { 2, 1, 4, 6, 3, 5 };\n        Integer[] sortedArray = { 1, 2, 3, 4, 5, 6 };\n        BubbleSort bubbleSort = new BubbleSort();\n        bubbleSort.bubbleSort(array);\n        assertArrayEquals(array, sortedArray);\n    }\n\n    @Test\n    void givenIntegerArray_whenSortedWithOptimizedBubbleSort_thenGetSortedArray() {\n        Integer[] array = { 2, 1, 4, 6, 3, 5 };\n        Integer[] sortedArray = { 1, 2, 3, 4, 5, 6 };\n        BubbleSort bubbleSort = new BubbleSort();\n        bubbleSort.optimizedBubbleSort(array);\n        assertArrayEquals(array, sortedArray);\n    }\n}"}
{"code_source": "package com.baeldung.algorithms.bucketsort;\n\nimport java.util.List;\n\npublic interface Sorter<T> {\n\n    List<T> sort(List<T> arrayToSort);\n}\n", "test_case": "package com.baeldung.algorithms.bucketsort;\n\n\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nclass IntegerBucketSorterUnitTest {\n\n    private IntegerBucketSorter sorter;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        sorter = new IntegerBucketSorter();\n    }\n\n    @Test\n    void givenUnsortedList_whenSortedUsingBucketSorter_checkSortingCorrect() {\n\n        List<Integer> unsorted = Arrays.asList(80,50,60,30,20,10,70,0,40,500,600,602,200,15);\n        List<Integer> expected = Arrays.asList(0,10,15,20,30,40,50,60,70,80,200,500,600,602);\n\n        List<Integer> actual = sorter.sort(unsorted);\n\n        assertEquals(expected, actual);\n    }\n}"}
{"code_source": "package com.baeldung.algorithms.counting;\n\nimport java.util.Arrays;\nimport java.util.stream.IntStream;\n\npublic class CountingSort {\n\n    public static int[] sort(int[] input, int k) {\n        verifyPreconditions(input, k);\n        if (input.length == 0) return input;\n\n        int[] c = countElements(input, k);\n        int[] sorted = new int[input.length];\n        for (int i = input.length - 1; i >= 0; i--) {\n            int current = input[i];\n            sorted[c[current] - 1] = current;\n            c[current] -= 1;\n        }\n\n        return sorted;\n    }\n\n    static int[] countElements(int[] input, int k) {\n        int[] c = new int[k + 1];\n        Arrays.fill(c, 0);\n        for (int i : input) {\n            c[i] += 1;\n        }\n\n        for (int i = 1; i < c.length; i++) {\n            c[i] += c[i - 1];\n        }\n        return c;\n    }\n\n    private static void verifyPreconditions(int[] input, int k) {\n        if (input == null) {\n            throw new IllegalArgumentException(\"Input is required\");\n        }\n\n        int min = IntStream.of(input).min().getAsInt();\n        int max = IntStream.of(input).max().getAsInt();\n\n        if (min < 0 || max > k) {\n            throw new IllegalArgumentException(\"The input numbers should be between zero and \" + k);\n        }\n    }\n}\n", "test_case": "package com.baeldung.algorithms.counting;\n\nimport java.util.Arrays;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass CountingSortUnitTest {\n\n    @Test\n    void countElements_GivenAnArray_ShouldCalculateTheFrequencyArrayAsExpected() {\n        int k = 5;\n        int[] input = { 4, 3, 2, 5, 4, 3, 5, 1, 0, 2, 5 };\n\n        int[] c = CountingSort.countElements(input, k);\n        int[] expected = { 1, 2, 4, 6, 8, 11 };\n        assertArrayEquals(expected, c);\n    }\n\n    @Test\n    void sort_GivenAnArray_ShouldSortTheInputAsExpected() {\n        int k = 5;\n        int[] input = { 4, 3, 2, 5, 4, 3, 5, 1, 0, 2, 5 };\n\n        int[] sorted = CountingSort.sort(input, k);\n\n        // Our sorting algorithm and Java's should return the same result\n        Arrays.sort(input);\n        assertArrayEquals(input, sorted);\n    }\n}"}
{"code_source": "package com.baeldung.algorithms.heapsort;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Heap<E extends Comparable<E>> {\n\n    private List<E> elements = new ArrayList<>();\n\n    public static <E extends Comparable<E>> List<E> sort(Iterable<E> elements) {\n        Heap<E> heap = of(elements);\n\n        List<E> result = new ArrayList<>();\n\n        while (!heap.isEmpty()) {\n            result.add(heap.pop());\n        }\n\n        return result;\n    }\n\n    public static <E extends Comparable<E>> Heap<E> of(E... elements) {\n        return of(Arrays.asList(elements));\n    }\n\n    public static <E extends Comparable<E>> Heap<E> of(Iterable<E> elements) {\n        Heap<E> result = new Heap<>();\n        for (E element : elements) {\n            result.add(element);\n        }\n        return result;\n    }\n\n    public void add(E e) {\n        elements.add(e);\n        int elementIndex = elements.size() - 1;\n        while (!isRoot(elementIndex) && !isCorrectChild(elementIndex)) {\n            int parentIndex = parentIndex(elementIndex);\n            swap(elementIndex, parentIndex);\n            elementIndex = parentIndex;\n        }\n    }\n\n    public E pop() {\n        if (isEmpty()) {\n            throw new IllegalStateException(\"You cannot pop from an empty heap\");\n        }\n\n        E result = elementAt(0);\n\n        int lasElementIndex = elements.size() - 1;\n        swap(0, lasElementIndex);\n        elements.remove(lasElementIndex);\n\n        int elementIndex = 0;\n        while (!isLeaf(elementIndex) && !isCorrectParent(elementIndex)) {\n            int smallerChildIndex = smallerChildIndex(elementIndex);\n            swap(elementIndex, smallerChildIndex);\n            elementIndex = smallerChildIndex;\n        }\n\n        return result;\n    }\n\n    public boolean isEmpty() {\n        return elements.isEmpty();\n    }\n    \n    private boolean isRoot(int index) {\n        return index == 0;\n    }\n\n    private int smallerChildIndex(int index) {\n        int leftChildIndex = leftChildIndex(index);\n        int rightChildIndex = rightChildIndex(index);\n        \n        if (!isValidIndex(rightChildIndex)) {\n            return leftChildIndex;\n        }\n\n        if (elementAt(leftChildIndex).compareTo(elementAt(rightChildIndex)) < 0) {\n            return leftChildIndex;\n        }\n\n        return rightChildIndex;\n    }\n\n    private boolean isLeaf(int index) {\n        return !isValidIndex(leftChildIndex(index));\n    }\n\n    private boolean isCorrectParent(int index) {\n        return isCorrect(index, leftChildIndex(index)) && isCorrect(index, rightChildIndex(index));\n    }\n\n    private boolean isCorrectChild(int index) {\n        return isCorrect(parentIndex(index), index);\n    }\n\n    private boolean isCorrect(int parentIndex, int childIndex) {\n        if (!isValidIndex(parentIndex) || !isValidIndex(childIndex)) {\n            return true;\n        }\n\n        return elementAt(parentIndex).compareTo(elementAt(childIndex)) < 0;\n    }\n\n    private boolean isValidIndex(int index) {\n        return index < elements.size();\n    }\n\n    private void swap(int index1, int index2) {\n        E element1 = elementAt(index1);\n        E element2 = elementAt(index2);\n        elements.set(index1, element2);\n        elements.set(index2, element1);\n    }\n\n    private E elementAt(int index) {\n        return elements.get(index);\n    }\n\n    private int parentIndex(int index) {\n        return (index - 1) / 2;\n    }\n\n    private int leftChildIndex(int index) {\n        return 2 * index + 1;\n    }\n\n    private int rightChildIndex(int index) {\n        return 2 * index + 2;\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.heapsort;\n\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nclass HeapUnitTest {\n\n    @Test\n    void givenNotEmptyHeap_whenPopCalled_thenItShouldReturnSmallestElement() {\n        // given\n        Heap<Integer> heap = Heap.of(3, 5, 1, 4, 2);\n\n        // when\n        int head = heap.pop();\n\n        // then\n        assertThat(head).isEqualTo(1);\n    }\n    \n    @Test\n    void givenNotEmptyIterable_whenSortCalled_thenItShouldReturnElementsInSortedList() {\n        // given\n        List<Integer> elements = Arrays.asList(3, 5, 1, 4, 2);\n        \n        // when\n        List<Integer> sortedElements = Heap.sort(elements);\n        \n        // then\n        assertThat(sortedElements).isEqualTo(Arrays.asList(1, 2, 3, 4, 5));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.insertionsort;\n\npublic class InsertionSort {\n\n    public static void insertionSortImperative(int[] input) {\n        for (int i = 1; i < input.length; i++) {\n            int key = input[i];\n            int j = i - 1;\n            while (j >= 0 && input[j] > key) {\n                input[j + 1] = input[j];\n                j = j - 1;\n            }\n            input[j + 1] = key;\n        }\n    }\n\n    public static void insertionSortRecursive(int[] input) {\n        insertionSortRecursive(input, input.length);\n    }\n\n    private static void insertionSortRecursive(int[] input, int i) {\n        // base case\n        if (i <= 1) {\n            return;\n        }\n\n        // sort the first i - 1 elements of the array\n        insertionSortRecursive(input, i - 1);\n\n        // then find the correct position of the element at position i\n        int key = input[i - 1];\n        int j = i - 2;\n        // shifting the elements from their position by 1\n        while (j >= 0 && input[j] > key) {\n            input[j + 1] = input[j];\n            j = j - 1;\n        }\n        // inserting the key at the appropriate position\n        input[j + 1] = key;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.insertionsort;\n\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass InsertionSortUnitTest {\n\n    @Test\n    void givenUnsortedArray_whenInsertionSortImperative_thenSortedAsc() {\n        int[] input = {6, 2, 3, 4, 5, 1};\n        InsertionSort.insertionSortImperative(input);\n        int[] expected = {1, 2, 3, 4, 5, 6};\n        assertArrayEquals(expected, input, \"the two arrays are not equal\");\n    }\n\n    @Test\n    void givenUnsortedArray_whenInsertionSortRecursive_thenSortedAsc() {\n        int[] input = {6, 4, 5, 2, 3, 1};\n        InsertionSort.insertionSortRecursive(input);\n        int[] expected = {1, 2, 3, 4, 5, 6};\n        assertArrayEquals( expected, input, \"the two arrays are not equal\");\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.mergesort;\n\npublic class MergeSort {\n\n    public static void main(String[] args) {\n        int[] a = { 5, 1, 6, 2, 3, 4 };\n        mergeSort(a, a.length);\n        for (int i = 0; i < a.length; i++)\n            System.out.println(a[i]);\n    }\n\n    public static void mergeSort(int[] a, int n) {\n        if (n < 2)\n            return;\n        int mid = n / 2;\n        int[] l = new int[mid];\n        int[] r = new int[n - mid];\n\n        for (int i = 0; i < mid; i++) {\n            l[i] = a[i];\n        }\n        for (int i = mid; i < n; i++) {\n            r[i - mid] = a[i];\n        }\n        mergeSort(l, mid);\n        mergeSort(r, n - mid);\n\n        merge(a, l, r, mid, n - mid);\n    }\n\n    public static void merge(int[] a, int[] l, int[] r, int left, int right) {\n\n        int i = 0, j = 0, k = 0;\n\n        while (i < left && j < right) {\n\n            if (l[i] <= r[j])\n                a[k++] = l[i++];\n            else\n                a[k++] = r[j++];\n\n        }\n\n        while (i < left)\n            a[k++] = l[i++];\n\n        while (j < right)\n            a[k++] = r[j++];\n    }\n}\n", "test_case": "package com.baeldung.algorithms.mergesort;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass MergeSortUnitTest {\n\n    @Test\n    void positiveTest() {\n        int[] actual = { 5, 1, 6, 2, 3, 4 };\n        int[] expected = { 1, 2, 3, 4, 5, 6 };\n        MergeSort.mergeSort(actual, actual.length);\n        assertArrayEquals(expected, actual);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.quicksort;\n\npublic class QuickSort {\n\n    public static void quickSort(int arr[], int begin, int end)\n    {\n        if (begin < end) {\n            int partitionIndex = partition(arr, begin, end);\n\n            // Recursively sort elements of the 2 sub-arrays\n            quickSort(arr, begin, partitionIndex-1);\n            quickSort(arr, partitionIndex+1, end);\n        }\n    }\n\n    private static int partition(int arr[], int begin, int end)\n    {\n        int pivot = arr[end];\n        int i = (begin-1);\n\n        for (int j=begin; j<end; j++)\n        {\n            if (arr[j] <= pivot) {\n                i++;\n\n                int swapTemp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = swapTemp;\n            }\n        }\n\n        int swapTemp = arr[i+1];\n        arr[i+1] = arr[end];\n        arr[end] = swapTemp;\n\n        return i+1;\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.quicksort;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass QuickSortUnitTest {\n\n    @Test\n    void givenIntegerArray_whenSortedWithQuickSort_thenGetSortedArray() {\n        int[] actual = { 9, 5, 1, 0, 6, 2, 3, 4, 7, 8 };\n        int[] expected = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n        QuickSort.quickSort(actual, 0, actual.length-1);\n        assertArrayEquals(expected, actual);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.quicksort;\n\npublic class ThreeWayQuickSort {\n\n    public static void threeWayQuickSort(int[] a, int begin, int end)\n    {\n        if (end <= begin) return;\n\n        // partition\n        int i = begin;\n        int less = begin;\n        int greater = end;\n\n        while (i <= greater){\n            if (a[i] < a[less]) {\n                int tmp = a[i];\n                a[i] = a[less];\n                a[less] = tmp;\n\n                i++;\n                less++;\n            }\n            else if (a[less] < a[i])\t{\n                int tmp = a[i];\n                a[i] = a[greater];\n                a[greater] = tmp;\n\n                greater--;\n            }\n            else {\n                i++;\n            }\n        }\n\n        threeWayQuickSort(a, begin, less - 1);\n        threeWayQuickSort(a, greater + 1, end);\n    }\n}", "test_case": "package com.baeldung.algorithms.quicksort;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass ThreeWayQuickSortUnitTest {\n\n    @Test\n    public void givenIntegerArray_whenSortedWithThreeWayQuickSort_thenGetSortedArray() {\n        int[] actual = { 3, 5, 5, 5, 3, 7, 7, 3, 5, 5, 7, 3, 3 };\n        int[] expected = { 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 7, 7, 7 };\n        ThreeWayQuickSort.threeWayQuickSort(actual, 0, actual.length-1);\n        assertArrayEquals(expected, actual);\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.radixsort;\n\nimport java.util.Arrays;\n\npublic class RadixSort {\n\n    public static void sort(int numbers[]) {\n        int maximumNumber = findMaximumNumberIn(numbers);\n\n        int numberOfDigits = calculateNumberOfDigitsIn(maximumNumber);\n\n        int placeValue = 1;\n\n        while (numberOfDigits-- > 0) {\n            applyCountingSortOn(numbers, placeValue);\n            placeValue *= 10;\n        }\n    }\n\n    private static void applyCountingSortOn(int[] numbers, int placeValue) {\n        int range = 10; // radix or the base\n\n        int length = numbers.length;\n        int[] frequency = new int[range];\n        int[] sortedValues = new int[length];\n\n        for (int i = 0; i < length; i++) {\n            int digit = (numbers[i] / placeValue) % range;\n            frequency[digit]++;\n        }\n\n        for (int i = 1; i < range; i++) {\n            frequency[i] += frequency[i - 1];\n        }\n\n        for (int i = length - 1; i >= 0; i--) {\n            int digit = (numbers[i] / placeValue) % range;\n            sortedValues[frequency[digit] - 1] = numbers[i];\n            frequency[digit]--;\n        }\n\n        System.arraycopy(sortedValues, 0, numbers, 0, length);\n    }\n\n    private static int calculateNumberOfDigitsIn(int number) {\n        return (int) Math.log10(number) + 1; // valid only if number > 0\n    }\n\n    private static int findMaximumNumberIn(int[] arr) {\n        return Arrays.stream(arr).max().getAsInt();\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.radixsort;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass RadixSortUnitTest {\n\n    @Test\n    void givenUnsortedArray_whenRadixSort_thenArraySorted() {\n        int[] numbers = { 387, 468, 134, 123, 68, 221, 769, 37, 7 };\n        RadixSort.sort(numbers);\n        int[] numbersSorted = { 7, 37, 68, 123, 134, 221, 387, 468, 769 };\n        assertArrayEquals(numbersSorted, numbers);\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.selectionsort;\n\npublic class SelectionSort {\n\n    public static void sortAscending(final int[] arr) {\n        for (int i = 0; i < arr.length - 1; i++) {\n            int minElementIndex = i;\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[minElementIndex] > arr[j]) {\n                    minElementIndex = j;\n                }\n            }\n\n            if (minElementIndex != i) {\n                int temp = arr[i];\n                arr[i] = arr[minElementIndex];\n                arr[minElementIndex] = temp;\n            }\n        }\n    }\n\n    public static void sortDescending(final int[] arr) {\n        for (int i = 0; i < arr.length - 1; i++) {\n            int maxElementIndex = i;\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[maxElementIndex] < arr[j]) {\n                    maxElementIndex = j;\n                }\n            }\n\n            if (maxElementIndex != i) {\n                int temp = arr[i];\n                arr[i] = arr[maxElementIndex];\n                arr[maxElementIndex] = temp;\n            }\n        }\n    }\n}", "test_case": "package com.baeldung.algorithms.selectionsort;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass SelectionSortUnitTest {\n\n    @Test\n    void givenUnsortedArray_whenSelectionSort_SortAscending_thenSortedAsc() {\n        int[] input = { 5, 4, 1, 6, 2 };\n        SelectionSort.sortAscending(input);\n        int[] expected = {1, 2, 4, 5, 6};\n        assertArrayEquals(expected, input, \"the two arrays are not equal\");\n    }\n    \n    @Test\n    void givenUnsortedArray_whenSelectionSort_SortDescending_thenSortedDesc() {\n        int[] input = { 5, 4, 1, 6, 2 };\n        SelectionSort.sortDescending(input);\n        int[] expected = {6, 5, 4, 2, 1};\n        assertArrayEquals(expected, input, \"the two arrays are not equal\");\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.shellsort;\n\npublic class ShellSort {\n\n    public static void sort(int arrayToSort[]) {\n        int n = arrayToSort.length;\n\n        for (int gap = n / 2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; i++) {\n                int key = arrayToSort[i];\n                int j = i;\n                while (j >= gap && arrayToSort[j - gap] > key) {\n                    arrayToSort[j] = arrayToSort[j - gap];\n                    j -= gap;\n                }\n                arrayToSort[j] = key;\n            }\n        }\n    }\n}\n", "test_case": "package com.baeldung.algorithms.shellsort;\n\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass ShellSortUnitTest {\n\n    @Test\n    void givenUnsortedArray_whenShellSort_thenSortedAsc() {\n        int[] input = {41, 15, 82, 5, 65, 19, 32, 43, 8};\n        ShellSort.sort(input);\n        int[] expected = {5, 8, 15, 19, 32, 41, 43, 65, 82};\n        assertArrayEquals( expected, input, \"the two arrays are not equal\");\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.bynumber;\n\nimport java.util.Comparator;\n\npublic final class NaturalOrderComparators {\n\n    private static final String DIGIT_AND_DECIMAL_REGEX = \"[^\\\\d.]\";\n\n    private NaturalOrderComparators() {\n        throw new AssertionError(\"Let's keep this static\");\n    }\n\n    public static Comparator<String> createNaturalOrderRegexComparator() {\n        return Comparator.comparingDouble(NaturalOrderComparators::parseStringToNumber);\n    }\n\n    private static double parseStringToNumber(String input){\n\n        final String digitsOnly = input.replaceAll(DIGIT_AND_DECIMAL_REGEX, \"\");\n\n        if(\"\".equals(digitsOnly)) return 0;\n\n        try{\n            return Double.parseDouble(digitsOnly);\n        }catch (NumberFormatException nfe){\n            return 0;\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.bynumber;\n\n\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.jupiter.api.Test;\n\nclass NaturalOrderComparatorsUnitTest {\n\n    @Test\n    void givenSimpleStringsContainingIntsAndDoubles_whenSortedByRegex_checkSortingCorrect() {\n\n        List<String> testStrings = Arrays.asList(\"a1\", \"b3\", \"c4\", \"d2.2\", \"d2.4\", \"d2.3d\");\n\n        testStrings.sort(NaturalOrderComparators.createNaturalOrderRegexComparator());\n\n        List<String> expected = Arrays.asList(\"a1\", \"d2.2\", \"d2.3d\", \"d2.4\", \"b3\", \"c4\");\n\n        assertEquals(expected, testStrings);\n\n\n    }\n\n    @Test\n    void givenSimpleStringsContainingIntsAndDoublesWithAnInvalidNumber_whenSortedByRegex_checkSortingCorrect() {\n\n        List<String> testStrings = Arrays.asList(\"a1\", \"b3\", \"c4\", \"d2.2\", \"d2.4\", \"d2.3.3d\");\n\n        testStrings.sort(NaturalOrderComparators.createNaturalOrderRegexComparator());\n\n        List<String> expected = Arrays.asList(\"d2.3.3d\", \"a1\", \"d2.2\", \"d2.4\", \"b3\", \"c4\");\n\n        assertEquals(expected, testStrings);\n\n\n    }\n\n    @Test\n    void givenAllForseenProblems_whenSortedByRegex_checkSortingCorrect() {\n\n        List<String> testStrings = Arrays.asList(\"a1\", \"b3\", \"c4\", \"d2.2\", \"d2.f4\", \"d2.3.3d\");\n\n        testStrings.sort(NaturalOrderComparators.createNaturalOrderRegexComparator());\n\n        List<String> expected = Arrays.asList(\"d2.3.3d\", \"a1\", \"d2.2\", \"d2.f4\", \"b3\", \"c4\");\n\n        assertEquals(expected, testStrings);\n\n\n    }\n\n    @Test\n    void givenComplexStringsContainingSeparatedNumbers_whenSortedByRegex_checkNumbersCondensedAndSorted() {\n\n        List<String> testStrings = Arrays.asList(\"a1b2c5\", \"b3ght3.2\", \"something65.thensomething5\"); //125, 33.2, 65.5\n\n        List<String> expected = Arrays.asList(\"b3ght3.2\", \"something65.thensomething5\", \"a1b2c5\" );\n\n        testStrings.sort(NaturalOrderComparators.createNaturalOrderRegexComparator());\n\n        assertEquals(expected, testStrings);\n\n    }\n\n    @Test\n    void givenStringsNotContainingNumbers_whenSortedByRegex_checkOrderNotChanged() {\n\n        List<String> testStrings = Arrays.asList(\"a\", \"c\", \"d\", \"e\");\n        List<String> expected = new ArrayList<>(testStrings);\n\n        testStrings.sort(NaturalOrderComparators.createNaturalOrderRegexComparator());\n\n        assertEquals(expected, testStrings);\n    }\n}"}
{"code_source": "package com.baeldung.algorithms.gravitysort;\n\npublic class GravitySort {\n\n    public static int findMax(int[] A) {\n        int max = A[0];\n        for (int i = 1; i< A.length; i++) {\n            if (A[i] > max) {\n                max = A[i];\n            }\n        }\n        return max;\n    }\n\n    public static boolean[][] setupAbacus(int[] A, int m) {\n        boolean[][] abacus = new boolean[A.length][m];\n        for (int i = 0; i < abacus.length; i++) {\n            int number = A[i];\n            for (int j = 0; j < abacus[0].length && j < number; j++) {\n                abacus[A.length - 1 - i][j] = true;\n            }\n        }\n        return abacus;\n    }\n\n    public static void dropBeads(boolean[][] abacus, int[] A, int m) {\n        for (int i = 1; i < A.length; i++) {\n            for (int j = m - 1; j >= 0; j--) {\n                if (abacus[i][j] == true) {\n                    int x = i;\n                    while (x > 0 && abacus[x - 1][j] == false) {\n                        boolean temp = abacus[x - 1][j];\n                        abacus[x - 1][j] = abacus[x][j];\n                        abacus[x][j] = temp;\n                        x--;\n                    }\n                }\n            }\n        }\n    }\n\n    public static void transformToList(boolean[][] abacus, int[] A) {\n        int index = 0;\n        for (int i = abacus.length - 1; i >= 0; i--) {\n            int beads = 0;\n            for (int j = 0; j < abacus[0].length && abacus[i][j] == true; j++) {\n                beads++;\n            }\n            A[index++] = beads;\n        }\n    }\n\n    public static void sort(int[] A) {\n        int m = findMax(A);\n        boolean[][] abacus = setupAbacus(A, m);\n        dropBeads(abacus, A, m);\n        // transform abacus into sorted list\n        transformToList(abacus, A);\n    }\n}\n", "test_case": "package com.baeldung.algorithms.gravitysort;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass GravitySortUnitTest {\n\n    @Test\n    void givenIntegerArray_whenSortedWithGravitySort_thenGetSortedArray() {\n        int[] actual = { 9, 9, 100, 3, 57, 12, 3, 78, 0, 2, 2, 40, 21, 9 };\n        int[] expected = { 0, 2, 2, 3, 3, 9, 9, 9, 12, 21, 40, 57, 78, 100 };\n        GravitySort.sort(actual);\n        assertArrayEquals(expected, actual);\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.inoutsort;\n\npublic class InOutSort {\n\n    public static int[] reverseInPlace(int A[]) {\n        int n = A.length;\n        for (int i = 0; i < n / 2; i++) {\n            int temp = A[i];\n            A[i] = A[n - 1 - i];\n            A[n - 1 - i] = temp;\n        }\n\n        return A;\n    }\n\n    public static int[] reverseOutOfPlace(int A[]) {\n        int n = A.length;\n        int[] B = new int[n];\n        for (int i = 0; i < n; i++) {\n            B[n - i - 1] = A[i];\n        }\n\n        return B;\n    }\n}\n", "test_case": "package com.baeldung.algorithms.inoutsort;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass InOutSortUnitTest {\n\n    @Test\n    void givenArray_whenInPlaceSort_thenReversed() {\n        int[] input = {1, 2, 3, 4, 5, 6, 7};\n        int[] expected = {7, 6, 5, 4, 3, 2, 1};\n        assertArrayEquals(expected, InOutSort.reverseInPlace(input), \"the two arrays are not equal\");\n    }\n\n    @Test\n     void givenArray_whenOutOfPlaceSort_thenReversed() {\n        int[] input = {1, 2, 3, 4, 5, 6, 7};\n        int[] expected = {7, 6, 5, 4, 3, 2, 1};\n        assertArrayEquals(expected, InOutSort.reverseOutOfPlace(input), \"the two arrays are not equal\");\n    }\n}\n"}
{"code_source": "package com.baeldung.algorithms.quicksort;\n\npublic class Partition {\n    private int left;\n    private int right;\n\n    public Partition(int left, int right) {\n        super();\n        this.left = left;\n        this.right = right;\n    }\n\n    public int getLeft() {\n        return left;\n    }\n\n    public void setLeft(int left) {\n        this.left = left;\n    }\n\n    public int getRight() {\n        return right;\n    }\n\n    public void setRight(int right) {\n        this.right = right;\n    }\n\n}\n", "test_case": "package com.baeldung.algorithms.quicksort;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\nimport org.junit.jupiter.api.Test;\n\nclass BentleyMcilroyPartitioningUnitTest {\n\n    @Test\n    void given_IntegerArray_whenSortedWithBentleyMcilroyPartitioning_thenGetSortedArray() {\n        int[] actual = {3, 2, 2, 2, 3, 7, 7, 3, 2, 2, 7, 3, 3};\n        int[] expected = {2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 7, 7, 7};\n        BentleyMcIlroyPartioning.quicksort(actual, 0, actual.length - 1);\n        assertArrayEquals(expected, actual);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.algorithms.stringsort;\n\nimport java.util.Arrays;\n\npublic class AnagramValidator {\n\n    public static boolean isValid(String text, String anagram) {\n        text = prepare(text);\n        anagram = prepare(anagram);\n\n        String sortedText = sort(text);\n        String sortedAnagram = sort(anagram);\n\n        return sortedText.equals(sortedAnagram);\n    }\n\n    private static String sort(String text) {\n        char[] chars = prepare(text).toCharArray();\n\n        Arrays.sort(chars);\n        return new String(chars);\n    }\n\n    private static String prepare(String text) {\n        return text.toLowerCase()\n            .trim()\n            .replaceAll(\"\\\\s+\", \"\");\n    }\n}", "test_case": "package com.baeldung.algorithms.stringsort;\n\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nclass AnagramValidatorUnitTest {\n    \n    @Test\n    void givenValidAnagrams_whenSorted_thenEqual() {\n        boolean isValidAnagram = AnagramValidator.isValid(\"Avida Dollars\", \"Salvador Dali\");\n        \n        assertTrue(isValidAnagram);\n    }\n    \n    @Test\n    void givenNotValidAnagrams_whenSorted_thenNotEqual() {\n        boolean isValidAnagram = AnagramValidator.isValid(\"abc\", \"def\");\n        \n        assertFalse(isValidAnagram);\n    }\n}\n"}
{"code_source": "package com.baeldung.asciidoctor;\n\nimport static org.asciidoctor.Asciidoctor.Factory.create;\nimport static org.asciidoctor.OptionsBuilder.options;\n\nimport java.io.File;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.asciidoctor.Asciidoctor;\n\npublic class AsciidoctorDemo {\n\n    private final Asciidoctor asciidoctor;\n\n    AsciidoctorDemo() {\n        asciidoctor = create();\n    }\n\n    public void generatePDFFromString(final String input) {\n\n        final Map<String, Object> options = options().inPlace(true)\n          .backend(\"pdf\")\n          .asMap();\n\n\n        final String outfile = asciidoctor.convertFile(new File(\"sample.adoc\"), options);\n    }\n\n    String generateHTMLFromString(final String input) {\n        return asciidoctor.convert(\"Hello _Baeldung_!\", new HashMap<String, Object>());\n    }\n}\n", "test_case": "package com.baeldung.asciidoctor;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class AsciidoctorDemoIntegrationTest {\n\n    @Test\n    public void givenString_whenConverting_thenResultingHTMLCode() {\n        final AsciidoctorDemo asciidoctorDemo = new AsciidoctorDemo();\n        Assert.assertEquals(asciidoctorDemo.generateHTMLFromString(\"Hello _Baeldung_!\"), \"<div class=\\\"paragraph\\\">\\n<p>Hello <em>Baeldung</em>!</p>\\n</div>\");\n    }\n}\n"}
{"code_source": "package com.baeldung.jspec;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Cage {\n    \n    private Set<Animal> animals = new HashSet<>();\n    \n    public void put(Animal animal) {\n        animals.add(animal);\n    }\n    \n    public void put(Animal... animals) {\n        this.animals.addAll(Arrays.asList(animals));\n    }\n    \n    public Animal release(Animal animal) {\n        return animals.remove(animal) ? animal : null;\n    }\n    \n    public void open() {\n        animals.clear();\n    }\n    \n    public boolean hasAnimals() {\n        return animals.size() > 0;\n    }\n    \n    public boolean isEmpty() {\n        return animals.isEmpty();\n    }\n    \n    public Set<Animal> getAnimals() {\n        return this.animals;\n    }\n    \n    public int size() {\n        return animals.size();\n    }\n\n    @Override\n    public String toString() {\n        return \"Cage [animals=\" + animals + \"]\";\n    }\n    \n}\n", "test_case": "package com.baeldung.jspec;\n\nimport static org.javalite.test.jspec.JSpec.$;\nimport static org.javalite.test.jspec.JSpec.expect;\nimport static org.javalite.test.jspec.JSpec.the;\n\nimport java.util.Set;\n\nimport org.javalite.test.jspec.DifferenceExpectation;\nimport org.junit.Test;\n\npublic class CageUnitTest {\n\n    Cat tomCat = new Cat(\"Tom\");\n    Cat felixCat = new Cat(\"Felix\");\n    Dog boltDog = new Dog(\"Bolt\");\n    Cage cage = new Cage();\n\n    \n    @Test\n    public void puttingAnimals_shouldIncreaseCageSize() {\n        // When\n        cage.put(tomCat, boltDog);\n        \n        // Then\n        the(cage.size()).shouldEqual(2);\n    }\n    \n    @Test\n    public void releasingAnimals_shouldDecreaseCageSize() {\n        // When\n        cage.put(tomCat, boltDog);\n        cage.release(tomCat);\n        \n        // Then\n        the(cage.size()).shouldEqual(1);\n    }\n    \n    @Test\n    public void puttingAnimals_shouldLeaveThemInsideTheCage() {\n        // When\n        cage.put(tomCat, boltDog);\n        \n        // Then\n        the(cage).shouldHave(\"animals\");\n    }\n    \n    @Test\n    public void openingTheCage_shouldReleaseAllAnimals() {\n        // When\n        cage.put(tomCat, boltDog);\n        \n        // Then\n        the(cage).shouldNotBe(\"empty\");\n        \n        // When\n        cage.open();\n        \n        // Then\n        the(cage).shouldBe(\"empty\");\n        the(cage.isEmpty()).shouldBeTrue();\n    }\n    \n    @Test\n    public void comparingTwoDogs() {\n        // When\n        Dog firstDog = new Dog(\"Rex\");\n        Dog secondDog = new Dog(\"Rex\");\n        \n        // Then\n        $(firstDog).shouldEqual(secondDog);\n        $(firstDog).shouldNotBeTheSameAs(secondDog);\n    }\n    \n    @Test\n    public void puttingCatsOnly_shouldLetCageAnimalsToContainCats() {\n        // When\n        cage.put(tomCat, felixCat);\n        \n        // Then\n        Set<Animal> animals = cage.getAnimals();\n        the(animals).shouldContain(tomCat);\n        the(animals).shouldContain(felixCat);\n        the(animals).shouldNotContain(boltDog);\n    }\n    \n    @Test\n    public void puttingCatsOnly_shouldLetCageToContainCats() {\n        // When\n        cage.put(tomCat, felixCat);\n        \n        // Then\n        // Check with toString of the tested objects\n        the(cage).shouldContain(tomCat);\n        the(cage).shouldContain(felixCat);\n        the(cage).shouldNotContain(boltDog);\n    }\n    \n    @Test\n    public void puttingMoreAnimals_shouldChangeSize() {\n        // When\n        cage.put(tomCat, boltDog);\n        \n        // Then\n        expect( new DifferenceExpectation<Integer>(cage.size()) {\n\n            @Override\n            public Integer exec() {\n                cage.release(tomCat);\n                return cage.size();\n            }\n        } );\n    }\n    \n    \n    @Test\n    public void releasingTheDog_shouldReleaseAnAnimalOfDogType() {\n        // When\n        cage.put(boltDog);\n        Animal releasedAnimal = cage.release(boltDog);\n        \n        // Then\n        the(releasedAnimal).shouldNotBeNull();\n        the(releasedAnimal).shouldBeA(Dog.class);\n    }\n}\n"}
{"code_source": "package com.baeldung.assertj.custom;\n\npublic class Assertions {\n    public static PersonAssert assertThat(Person actual) {\n        return new PersonAssert(actual);\n    }\n\n    // static factory methods of other assertion classes\n}\n", "test_case": "package com.baeldung.assertj.custom;\n\nimport static com.baeldung.assertj.custom.Assertions.assertThat;\nimport static org.junit.Assert.fail;\n\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\n\npublic class AssertJCustomAssertionsUnitTest {\n    @Rule\n    public ExpectedException thrown = ExpectedException.none();\n\n    @Test\n    public void whenPersonNameMatches_thenCorrect() {\n        Person person = new Person(\"John Doe\", 20);\n        assertThat(person).hasFullName(\"John Doe\");\n    }\n\n    @Test\n    public void whenPersonAgeLessThanEighteen_thenNotAdult() {\n        Person person = new Person(\"Jane Roe\", 16);\n\n        try {\n            assertThat(person).isAdult();\n            fail();\n        } catch (AssertionError e) {\n            org.assertj.core.api.Assertions.assertThat(e).hasMessage(\"Expected person to be adult\");\n        }\n    }\n\n    @Test\n    public void whenPersonDoesNotHaveAMatchingNickname_thenIncorrect() {\n        Person person = new Person(\"John Doe\", 20);\n        person.addNickname(\"Nick\");\n\n        try {\n            assertThat(person).hasNickname(\"John\");\n            fail();\n        } catch (AssertionError e) {\n            org.assertj.core.api.Assertions.assertThat(e).hasMessage(\"Expected person to have nickname John\");\n        }\n    }\n}\n"}
{"code_source": "package com.baeldung.money;\n\nimport java.util.Locale;\nimport java.util.logging.Logger;\n\nimport javax.money.CurrencyUnit;\nimport javax.money.Monetary;\nimport javax.money.MonetaryAmount;\nimport javax.money.UnknownCurrencyException;\nimport javax.money.convert.ConversionQueryBuilder;\nimport javax.money.convert.CurrencyConversion;\nimport javax.money.convert.MonetaryConversions;\nimport javax.money.format.AmountFormatQueryBuilder;\nimport javax.money.format.MonetaryAmountFormat;\nimport javax.money.format.MonetaryFormats;\n\nimport org.javamoney.moneta.FastMoney;\nimport org.javamoney.moneta.Money;\nimport org.javamoney.moneta.format.CurrencyStyle;\n\npublic class JavaMoney {\n    final static Logger LOGGER = Logger.getLogger(JavaMoney.class.getName());\n    CurrencyUnit USD;\n    MonetaryAmount fstAmtUSD;\n    MonetaryAmount fstAmtEUR;\n    MonetaryAmount oneDolar;\n    MonetaryAmount moneyof;\n    MonetaryAmount fastmoneyof;\n    MonetaryAmount roundEUR;\n    MonetaryAmount calcAmtUSD;\n    MonetaryAmount[] monetaryAmounts;\n    MonetaryAmount sumAmtCHF;\n    MonetaryAmount calcMoneyFastMoney;\n    MonetaryAmount convertedAmountEURtoUSD;\n    MonetaryAmount convertedAmountEURtoUSD2;\n    MonetaryAmount convertedAmountUSDtoEUR;\n    MonetaryAmount convertedAmountUSDtoEUR2;\n    MonetaryAmount multiplyAmount;\n    MonetaryAmount divideAmount;\n    MonetaryAmount oneDivThree;\n    CurrencyConversion convEUR;\n    CurrencyConversion convUSD;\n    CurrencyConversion conversionUSD;\n    CurrencyConversion conversionEUR;\n    MonetaryAmount oneEuro;\n    MonetaryAmountFormat formatUSD;\n    MonetaryAmountFormat customFormat;\n    String usFormatted;\n    String customFormatted;\n    \n    public JavaMoney() {\n        USD = Monetary.getCurrency(\"USD\");\n        fstAmtUSD = Monetary.getDefaultAmountFactory().setCurrency(USD).setNumber(200.50).create();\n        fstAmtEUR = Monetary.getDefaultAmountFactory().setCurrency(\"EUR\").setNumber(1.30473908).create();\n        oneDolar = Monetary.getDefaultAmountFactory().setCurrency(\"USD\").setNumber(1).create();\n        moneyof = Money.of(12, USD);\n        fastmoneyof = FastMoney.of(2, USD);\n \n        LOGGER.info(\"First Amount in USD : \" + fstAmtUSD);\n        LOGGER.info(\"First Amount in EUR : \" + fstAmtEUR);\n        LOGGER.info(\"One Dolar : \" + oneDolar);\n        LOGGER.info(\"MoneyOf : \" + moneyof);\n        LOGGER.info(\"FastMoneyOf : \" + fastmoneyof);\n        \n        try{\n            @SuppressWarnings(\"unused\")\n            CurrencyUnit AAA = Monetary.getCurrency(\"AAA\");\n        } catch (UnknownCurrencyException e) {\n            LOGGER.severe(\"Unknown Currency\");\n        }\n\n        roundEUR = fstAmtEUR.with(Monetary.getDefaultRounding());\n\n        LOGGER.info(\"Rounded EUR : \" + roundEUR);\n\n        calcAmtUSD = Money.of(1, \"USD\").subtract(fstAmtUSD);\n\n        LOGGER.info(\"Substracting amounts : \" + calcAmtUSD);\n\n        calcMoneyFastMoney = moneyof.subtract(fastmoneyof);\n\n        LOGGER.info(\"Money & FastMoney operations : \" + calcMoneyFastMoney);\n\n        monetaryAmounts = \n                new MonetaryAmount[] { \n                        Money.of(100, \"CHF\"), \n                        Money.of(10.20, \"CHF\"), \n                        Money.of(1.15, \"CHF\"), };\n        sumAmtCHF = Money.of(0, \"CHF\");\n        for (MonetaryAmount monetaryAmount : monetaryAmounts) {\n            sumAmtCHF = sumAmtCHF.add(monetaryAmount);\n        }\n\n        LOGGER.info(\"Adding amounts : \" + sumAmtCHF);\n\n        multiplyAmount = oneDolar.multiply(0.25);\n        LOGGER.info(\"Multiply Amount : \" + multiplyAmount);\n\n        divideAmount = oneDolar.divide(0.25);\n        LOGGER.info(\"Divide Amount : \" + divideAmount);\n\n        try{\n            oneDivThree = oneDolar.divide(3);\n        }catch (ArithmeticException e) {\n            LOGGER.severe(\"One divide by Three is an infinite number\");\n        }\n        \n        convEUR = MonetaryConversions.getConversion(ConversionQueryBuilder.of().setTermCurrency(\"EUR\").build());\n        convUSD = MonetaryConversions.getConversion(ConversionQueryBuilder.of().setTermCurrency(USD).build());\n\n        conversionUSD = MonetaryConversions.getConversion(\"USD\");\n        conversionEUR = MonetaryConversions.getConversion(\"EUR\");\n\n        convertedAmountEURtoUSD = fstAmtEUR.with(conversionUSD);\n        convertedAmountEURtoUSD2 = fstAmtEUR.with(convUSD);\n        convertedAmountUSDtoEUR = oneDolar.with(conversionEUR);\n        convertedAmountUSDtoEUR2 = oneDolar.with(convEUR);\n        LOGGER.info(\"C1 - \" + convertedAmountEURtoUSD);\n        LOGGER.info(\"C2 - \" + convertedAmountEURtoUSD2);\n        LOGGER.info(\"One Euro -> \" + convertedAmountUSDtoEUR);\n        LOGGER.info(\"One Euro2 -> \" + convertedAmountUSDtoEUR2);\n\n        oneEuro = Money.of(1, \"EUR\");\n\n        if (oneEuro.equals(FastMoney.of(1, \"EUR\"))) {\n            LOGGER.info(\"Money == FastMoney\");\n        } else {\n            LOGGER.info(\"Money != FastMoney\");\n        }\n\n        if (oneDolar.equals(Money.of(1, \"USD\"))) {\n            LOGGER.info(\"Factory == Money\");\n        } else {\n            LOGGER.info(\"Factory != Money\");\n        }\n\n        formatUSD = MonetaryFormats.getAmountFormat(Locale.US);\n        usFormatted = formatUSD.format(oneDolar);\n        LOGGER.info(\"One dolar standard formatted : \" + usFormatted);\n\n        customFormat = MonetaryFormats.getAmountFormat(AmountFormatQueryBuilder.of(Locale.US).set(CurrencyStyle.NAME).set(\"pattern\", \"00000.00 \u00a4\").build());\n        customFormatted = customFormat.format(oneDolar);\n        LOGGER.info(\"One dolar custom formatted : \" + customFormatted);\n    }\n    \n    public static void main(String[] args) {\n        @SuppressWarnings(\"unused\")\n        JavaMoney java9Money = new JavaMoney();\n    }\n    \n}\n", "test_case": "package com.baeldung.money;\n\nimport org.javamoney.moneta.FastMoney;\nimport org.javamoney.moneta.Money;\nimport org.javamoney.moneta.format.CurrencyStyle;\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport javax.money.CurrencyUnit;\nimport javax.money.Monetary;\nimport javax.money.MonetaryAmount;\nimport javax.money.UnknownCurrencyException;\nimport javax.money.convert.CurrencyConversion;\nimport javax.money.convert.MonetaryConversions;\nimport javax.money.format.AmountFormatQueryBuilder;\nimport javax.money.format.MonetaryAmountFormat;\nimport javax.money.format.MonetaryFormats;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\n\npublic class JavaMoneyUnitManualTest {\n\n    @Test\n    public void givenCurrencyCode_whenString_thanExist() {\n        CurrencyUnit usd = Monetary.getCurrency(\"USD\");\n\n        assertNotNull(usd);\n        assertEquals(usd.getCurrencyCode(), \"USD\");\n        assertEquals(usd.getNumericCode(), 840);\n        assertEquals(usd.getDefaultFractionDigits(), 2);\n    }\n\n    @Test(expected = UnknownCurrencyException.class)\n    public void givenCurrencyCode_whenNoExist_thanThrowsError() {\n        Monetary.getCurrency(\"AAA\");\n    }\n\n    @Test\n    public void givenAmounts_whenStringified_thanEquals() {\n        CurrencyUnit usd = Monetary.getCurrency(\"USD\");\n        MonetaryAmount fstAmtUSD = Monetary\n          .getDefaultAmountFactory()\n          .setCurrency(usd)\n          .setNumber(200)\n          .create();\n        Money moneyof = Money.of(12, usd);\n        FastMoney fastmoneyof = FastMoney.of(2, usd);\n\n        assertEquals(\"USD\", usd.toString());\n        assertEquals(\"USD 200\", fstAmtUSD.toString());\n        assertEquals(\"USD 12\", moneyof.toString());\n        assertEquals(\"USD 2.00000\", fastmoneyof.toString());\n    }\n\n    @Test\n    public void givenCurrencies_whenCompared_thanNotequal() {\n        MonetaryAmount oneDolar = Monetary\n          .getDefaultAmountFactory()\n          .setCurrency(\"USD\")\n          .setNumber(1)\n          .create();\n        Money oneEuro = Money.of(1, \"EUR\");\n\n        assertFalse(oneEuro.equals(FastMoney.of(1, \"EUR\")));\n        assertTrue(oneDolar.equals(Money.of(1, \"USD\")));\n    }\n\n    @Test(expected = ArithmeticException.class)\n    public void givenAmount_whenDivided_thanThrowsException() {\n        MonetaryAmount oneDolar = Monetary\n          .getDefaultAmountFactory()\n          .setCurrency(\"USD\")\n          .setNumber(1)\n          .create();\n        oneDolar.divide(3);\n        fail(); // if no exception\n    }\n\n    @Test\n    public void givenAmounts_whenSummed_thanCorrect() {\n        List<MonetaryAmount> monetaryAmounts = Arrays.asList(Money.of(100, \"CHF\"), Money.of(10.20, \"CHF\"), Money.of(1.15, \"CHF\"));\n\n        Money sumAmtCHF = (Money) monetaryAmounts\n          .stream()\n          .reduce(Money.of(0, \"CHF\"), MonetaryAmount::add);\n\n        assertEquals(\"CHF 111.35\", sumAmtCHF.toString());\n    }\n\n    @Test\n    public void givenArithmetic_whenStringified_thanEqualsAmount() {\n        CurrencyUnit usd = Monetary.getCurrency(\"USD\");\n\n        Money moneyof = Money.of(12, usd);\n        MonetaryAmount fstAmtUSD = Monetary\n          .getDefaultAmountFactory()\n          .setCurrency(usd)\n          .setNumber(200.50)\n          .create();\n        MonetaryAmount oneDolar = Monetary\n          .getDefaultAmountFactory()\n          .setCurrency(\"USD\")\n          .setNumber(1)\n          .create();\n        Money subtractedAmount = Money\n          .of(1, \"USD\")\n          .subtract(fstAmtUSD);\n        MonetaryAmount multiplyAmount = oneDolar.multiply(0.25);\n        MonetaryAmount divideAmount = oneDolar.divide(0.25);\n\n        assertEquals(\"USD\", usd.toString());\n        assertEquals(\"USD 1\", oneDolar.toString());\n        assertEquals(\"USD 200.5\", fstAmtUSD.toString());\n        assertEquals(\"USD 12\", moneyof.toString());\n        assertEquals(\"USD -199.5\", subtractedAmount.toString());\n        assertEquals(\"USD 0.25\", multiplyAmount.toString());\n        assertEquals(\"USD 4\", divideAmount.toString());\n    }\n\n    @Test\n    public void givenAmount_whenRounded_thanEquals() {\n        MonetaryAmount fstAmtEUR = Monetary\n          .getDefaultAmountFactory()\n          .setCurrency(\"EUR\")\n          .setNumber(1.30473908)\n          .create();\n        MonetaryAmount roundEUR = fstAmtEUR.with(Monetary.getDefaultRounding());\n        assertEquals(\"EUR 1.30473908\", fstAmtEUR.toString());\n        assertEquals(\"EUR 1.3\", roundEUR.toString());\n    }\n\n    @Test\n    @Ignore(\"Currency providers are not always available\")\n    public void givenAmount_whenConversion_thenNotNull() {\n        MonetaryAmount oneDollar = Monetary\n          .getDefaultAmountFactory()\n          .setCurrency(\"USD\")\n          .setNumber(1)\n          .create();\n\n        CurrencyConversion conversionEUR = MonetaryConversions.getConversion(\"EUR\");\n\n        MonetaryAmount convertedAmountUSDtoEUR = oneDollar.with(conversionEUR);\n\n        assertEquals(\"USD 1\", oneDollar.toString());\n        assertNotNull(convertedAmountUSDtoEUR);\n    }\n\n    @Test\n    public void givenLocale_whenFormatted_thanEquals() {\n        MonetaryAmount oneDollar = Monetary\n          .getDefaultAmountFactory()\n          .setCurrency(\"USD\")\n          .setNumber(1)\n          .create();\n        MonetaryAmountFormat formatUSD = MonetaryFormats.getAmountFormat(Locale.US);\n        String usFormatted = formatUSD.format(oneDollar);\n\n        assertEquals(\"USD 1\", oneDollar.toString());\n        assertNotNull(formatUSD);\n        assertEquals(\"USD1.00\", usFormatted);\n    }\n\n    @Test\n    public void givenAmount_whenCustomFormat_thanEquals() {\n        MonetaryAmount oneDollar = Monetary\n          .getDefaultAmountFactory()\n          .setCurrency(\"USD\")\n          .setNumber(1)\n          .create();\n\n        MonetaryAmountFormat customFormat = MonetaryFormats.getAmountFormat(AmountFormatQueryBuilder\n          .of(Locale.US)\n          .set(CurrencyStyle.NAME)\n          .set(\"pattern\", \"00000.00 US Dollar\")\n          .build());\n        String customFormatted = customFormat.format(oneDollar);\n\n        assertNotNull(customFormat);\n        assertEquals(\"USD 1\", oneDollar.toString());\n        assertEquals(\"00001.00 US Dollar\", customFormatted);\n    }\n}\n"}
{"code_source": "package com.baeldung.resourcebundle;\n\nimport java.util.ListResourceBundle;\n\npublic class ExampleResource extends ListResourceBundle {\n\n    @Override\n    protected Object[][] getContents() {\n        return new Object[][] { \n            { \"greeting\", \"hello\" } \n        };\n    }\n\n}\n", "test_case": "package com.baeldung.resourcebundle;\n\nimport org.junit.Test;\n\nimport java.math.BigDecimal;\nimport java.util.Arrays;\nimport java.util.Locale;\nimport java.util.ResourceBundle;\n\nimport static org.junit.Assert.*;\n\npublic class ExampleResourceUnitTest {\n\n    @Test\n    public void whenGetBundleExampleResourceForLocalePlPl_thenItShouldInheritPropertiesGreetingAndLanguage() {\n        Locale plLocale = new Locale(\"pl\", \"PL\");\n\n        ResourceBundle exampleBundle = ResourceBundle.getBundle(\"com.baeldung.resourcebundle.ExampleResource\", plLocale);\n\n        assertTrue(exampleBundle.keySet()\n            .containsAll(Arrays.asList(\"toUsdRate\", \"cities\", \"greeting\", \"currency\", \"language\")));\n        assertEquals(exampleBundle.getString(\"greeting\"), \"cze\u015b\u0107\");\n        assertEquals(exampleBundle.getObject(\"toUsdRate\"), new BigDecimal(\"3.401\"));\n        assertArrayEquals(exampleBundle.getStringArray(\"cities\"), new String[] { \"Warsaw\", \"Cracow\" });\n    }\n\n    @Test\n    public void whenGetBundleExampleResourceForLocaleUs_thenItShouldContainOnlyGreeting() {\n        Locale usLocale = Locale.US;\n\n        ResourceBundle exampleBundle = ResourceBundle.getBundle(\"com.baeldung.resourcebundle.ExampleResource\", usLocale);\n\n        assertFalse(exampleBundle.keySet()\n            .containsAll(Arrays.asList(\"toUsdRate\", \"cities\", \"currency\", \"language\")));\n        assertTrue(exampleBundle.keySet()\n            .containsAll(Arrays.asList(\"greeting\")));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.util;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Properties;\n\npublic class PropertiesLoader {\n\n    public static Properties loadProperties(String resourceFileName) throws IOException {\n        Properties configuration = new Properties();\n        InputStream inputStream = PropertiesLoader.class\n          .getClassLoader()\n          .getResourceAsStream(resourceFileName);\n        configuration.load(inputStream);\n        inputStream.close();\n        return configuration;\n    }\n\n}\n", "test_case": "package com.baeldung.util;\n\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.util.Properties;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class PropertiesLoaderUnitTest {\n\n    @Test\n    public void loadProperties_whenPropertyReaded_thenSuccess() throws IOException {\n        //given\n        final String RESOURCE_FILE_NAME = \"configuration.properties\";\n\n        final String SAMPLE_CONF_ENTRY = \"sampleConfEntry\";\n        final String COLON_SEPARATED_CONF_ENTRY = \"colonSeparatedEntry\";\n\n        final String GIVEN_CONF_ENTRY_VALUE = \"sample String value\";\n        final String COLON_SEPARATED_CONF_ENTRY_VALUE = \"colon separated entry value\";\n\n        //when\n        Properties config = PropertiesLoader.loadProperties(RESOURCE_FILE_NAME);\n\n        String sampleConfEntryValue = config.getProperty(SAMPLE_CONF_ENTRY);\n        String colonSeparatedConfEntryValue = config.getProperty(COLON_SEPARATED_CONF_ENTRY);\n\n        //then\n        assertEquals(GIVEN_CONF_ENTRY_VALUE, sampleConfEntryValue);\n        assertEquals(COLON_SEPARATED_CONF_ENTRY_VALUE, colonSeparatedConfEntryValue);\n\n    }\n}\n"}
{"code_source": "package com.baeldung.benchmark;\n\nimport org.eclipse.collections.api.list.MutableList;\nimport org.eclipse.collections.api.list.primitive.IntList;\nimport org.eclipse.collections.api.list.primitive.MutableIntList;\nimport org.eclipse.collections.impl.factory.primitive.IntLists;\nimport org.eclipse.collections.impl.list.mutable.FastList;\nimport org.eclipse.collections.impl.list.mutable.primitive.IntArrayList;\nimport org.openjdk.jmh.annotations.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.PrimitiveIterator;\nimport java.util.Random;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\n@State(Scope.Benchmark)\n@BenchmarkMode(Mode.Throughput)\n@OutputTimeUnit(TimeUnit.SECONDS)\n@Fork(2)\npublic class IntegerListFilter {\n\n    private List<Integer> jdkIntList;\n    private MutableList<Integer> ecMutableList;\n    private IntList ecIntList;\n    private ExecutorService executor;\n\n    @Setup\n    public void setup() {\n        PrimitiveIterator.OfInt iterator = new Random(1L).ints(-10000, 10000).iterator();\n        ecMutableList = FastList.newWithNValues(1_000_000, iterator::nextInt);\n        jdkIntList = new ArrayList<>(1_000_000);\n        jdkIntList.addAll(ecMutableList);\n        ecIntList = ecMutableList.collectInt(i -> i, new IntArrayList(1_000_000));\n        executor = Executors.newWorkStealingPool();\n    }\n\n    @Benchmark\n    public List<Integer> jdkList() {\n        return jdkIntList.stream().filter(i -> i % 5 == 0).collect(Collectors.toList());\n    }\n\n    @Benchmark\n    public MutableList<Integer> ecMutableList() {\n        return ecMutableList.select(i -> i % 5 == 0);\n    }\n\n    @Benchmark\n    public List<Integer> jdkListParallel() {\n        return jdkIntList.parallelStream().filter(i -> i % 5 == 0).collect(Collectors.toList());\n    }\n\n    @Benchmark\n    public MutableList<Integer> ecMutableListParallel() {\n        return ecMutableList.asParallel(executor, 100_000).select(i -> i % 5 == 0).toList();\n    }\n\n    @Benchmark\n    public IntList ecPrimitive() {\n        return this.ecIntList.select(i -> i % 5 == 0);\n    }\n\n    @Benchmark\n    public IntList ecPrimitiveParallel() {\n        return this.ecIntList.primitiveParallelStream().filter(i -> i % 5 == 0).collect(IntLists.mutable::empty, MutableIntList::add, MutableIntList::addAll);\n    }\n}", "test_case": "package com.baeldung.benchmark;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\n\npublic class IntegerListFilterUnitTest {\n\n    private IntegerListFilter integerListFilter;\n\n    @Before\n    public void init() {\n        integerListFilter = new IntegerListFilter();\n        integerListFilter.setup();\n    }\n\n    @Test\n    public void whenBenchmarkIsExecute_thenJDKListsMustBeOfSameSize() {\n        assertEquals(integerListFilter.jdkList().size(), integerListFilter.jdkListParallel().size());\n    }\n\n    @Test\n    public void whenBenchmarkIsExecute_thenMutableListsMustBeOfSameSize() {\n        assertEquals(integerListFilter.ecMutableList().size(), integerListFilter.ecMutableListParallel().size());\n    }\n\n    @Test\n    public void whenBenchmarkIsExecute_thenPrimitiveListsMustBeOfSameSize() {\n        assertEquals(integerListFilter.ecPrimitive().size(), integerListFilter.ecPrimitiveParallel().size());\n    }\n}\n"}
{"code_source": "package com.baeldung.benchmark;\n\nimport org.eclipse.collections.api.list.MutableList;\nimport org.eclipse.collections.api.list.primitive.IntList;\nimport org.eclipse.collections.impl.list.mutable.FastList;\nimport org.eclipse.collections.impl.list.mutable.primitive.IntArrayList;\nimport org.openjdk.jmh.annotations.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.PrimitiveIterator;\nimport java.util.Random;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\n@State(Scope.Benchmark)\n@BenchmarkMode(Mode.Throughput)\n@OutputTimeUnit(TimeUnit.SECONDS)\n@Fork(2)\npublic class IntegerListSum {\n\n    private List<Integer> jdkIntList;\n    private MutableList<Integer> ecMutableList;\n    private ExecutorService executor;\n    private IntList ecIntList;\n\n    @Setup\n    public void setup() {\n        PrimitiveIterator.OfInt iterator = new Random(1L).ints(-10000, 10000).iterator();\n        ecMutableList = FastList.newWithNValues(1_000_000, iterator::nextInt);\n        jdkIntList = new ArrayList<>(1_000_000);\n        jdkIntList.addAll(ecMutableList);\n        ecIntList = ecMutableList.collectInt(i -> i, new IntArrayList(1_000_000));\n        executor = Executors.newWorkStealingPool();\n    }\n\n    @Benchmark\n    public long jdkList() {\n        return jdkIntList.stream().mapToLong(i -> i).sum();\n    }\n\n    @Benchmark\n    public long ecMutableList() {\n        return ecMutableList.sumOfInt(i -> i);\n    }\n\n    @Benchmark\n    public long jdkListParallel() {\n        return jdkIntList.parallelStream().mapToLong(i -> i).sum();\n    }\n\n    @Benchmark\n    public long ecMutableListParallel() {\n        return ecMutableList.asParallel(executor, 100_000).sumOfInt(i -> i);\n    }\n\n    @Benchmark\n    public long ecPrimitive() {\n        return this.ecIntList.sum();\n    }\n\n    @Benchmark\n    public long ecPrimitiveParallel() {\n        return this.ecIntList.primitiveParallelStream().sum();\n    }\n}", "test_case": "package com.baeldung.benchmark;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\n\npublic class IntegerListSumUnitTest {\n\n    private IntegerListSum integerListSum;\n\n    @Before\n    public void init() {\n        integerListSum = new IntegerListSum();\n        integerListSum.setup();\n    }\n\n    @Test\n    public void whenBenchmarkIsExecute_thenJDKListsMustHaveSameValue() {\n        assertEquals(integerListSum.jdkList(), integerListSum.jdkListParallel());\n    }\n\n    @Test\n    public void whenBenchmarkIsExecute_thenMutableListsMustHaveSameValue() {\n        assertEquals(integerListSum.ecMutableList(), integerListSum.ecMutableListParallel());\n    }\n\n    @Test\n    public void whenBenchmarkIsExecute_thenPrimitiveListsMustHaveSameValue() {\n        assertEquals(integerListSum.ecPrimitive(), integerListSum.ecPrimitiveParallel());\n    }\n}\n"}
{"code_source": "package com.baeldung.reflection;\n\npublic class Operations {\n\n    public double publicSum(int a, double b) {\n        return a + b;\n    }\n\n    public static double publicStaticMultiply(float a, long b) {\n        return a * b;\n    }\n\n    private boolean privateAnd(boolean a, boolean b) {\n        return a && b;\n    }\n\n    protected int protectedMax(int a, int b) {\n        return a > b ? a : b;\n    }\n\n}\n", "test_case": "package com.baeldung.reflection;\n\nimport static org.hamcrest.CoreMatchers.equalTo;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertThat;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport org.junit.Test;\n\npublic class OperationsUnitTest {\n\n    public OperationsUnitTest() {\n    }\n\n    @Test(expected = IllegalAccessException.class)\n    public void givenObject_whenInvokePrivateMethod_thenFail() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n        Method andPrivateMethod = Operations.class.getDeclaredMethod(\"privateAnd\", boolean.class, boolean.class);\n\n        Operations operationsInstance = new Operations();\n        Boolean result = (Boolean) andPrivateMethod.invoke(operationsInstance, true, false);\n\n        assertFalse(result);\n    }\n\n    @Test\n    public void givenObject_whenInvokePrivateMethod_thenCorrect() throws Exception {\n        Method andPrivatedMethod = Operations.class.getDeclaredMethod(\"privateAnd\", boolean.class, boolean.class);\n        andPrivatedMethod.setAccessible(true);\n\n        Operations operationsInstance = new Operations();\n        Boolean result = (Boolean) andPrivatedMethod.invoke(operationsInstance, true, false);\n\n        assertFalse(result);\n    }\n    \n    @Test\n    public void givenObject_whenInvokePrivateMethod_thenCheckAccess() throws Exception {\n        Operations operationsInstance = new Operations();\n        Method andPrivatedMethod = Operations.class.getDeclaredMethod(\"privateAnd\", boolean.class, boolean.class);\n        boolean isAccessEnabled = andPrivatedMethod.canAccess(operationsInstance);\n        \n        assertFalse(isAccessEnabled);\n    }\n    \n    @Test\n    public void givenObject_whenInvokePublicMethod_thenEnableAccess() throws Exception {\n        Operations operationsInstance = new Operations();\n        Method andPrivatedMethod = Operations.class.getDeclaredMethod(\"privateAnd\", boolean.class, boolean.class);\n        andPrivatedMethod.trySetAccessible();\n        boolean isAccessEnabled = andPrivatedMethod.canAccess(operationsInstance);\n        \n        assertTrue(isAccessEnabled);\n    }\n\n    @Test\n    public void givenObject_whenInvokePublicMethod_thenCorrect() throws Exception {\n        Method sumInstanceMethod = Operations.class.getMethod(\"publicSum\", int.class, double.class);\n\n        Operations operationsInstance = new Operations();\n        Double result = (Double) sumInstanceMethod.invoke(operationsInstance, 1, 3);\n\n        assertThat(result, equalTo(4.0));\n    }\n\n    @Test\n    public void givenObject_whenInvokeStaticMethod_thenCorrect() throws Exception {\n        Method multiplyStaticMethod = Operations.class.getDeclaredMethod(\"publicStaticMultiply\", float.class, long.class);\n\n        Double result = (Double) multiplyStaticMethod.invoke(null, 3.5f, 2);\n\n        assertThat(result, equalTo(7.0));\n    }\n\n}\n"}
{"code_source": "package com.baeldung.java14.npe;\n\npublic class HelpfulNullPointerException {\n\n    public static void main(String[] args) {\n        Employee employee = null;\n        employee.getName();\n    }\n\n    public String getEmployeeEmailAddress(Employee employee) {\n        String emailAddress = employee.getPersonalDetails().getEmailAddress().toLowerCase();\n        return emailAddress;\n    }\n\n    static class Employee {\n        String name;\n        PersonalDetails personalDetails;\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n\n        public PersonalDetails getPersonalDetails() {\n            return personalDetails;\n        }\n\n        public void setPersonalDetails(PersonalDetails personalDetails) {\n            this.personalDetails = personalDetails;\n        }\n    }\n\n    static class PersonalDetails {\n        String emailAddress;\n        String phone;\n\n        public String getEmailAddress() {\n            return emailAddress;\n        }\n\n        public void setEmailAddress(String emailAddress) {\n            this.emailAddress = emailAddress;\n        }\n\n        public String getPhone() {\n            return phone;\n        }\n\n        public void setPhone(String phone) {\n            this.phone = phone;\n        }\n    }\n}\n", "test_case": "package com.baeldung.java14.npe;\n\nimport org.junit.Test;\n\nimport static com.baeldung.java14.helpfulnullpointerexceptions.HelpfulNullPointerException.Employee;\nimport static com.baeldung.java14.helpfulnullpointerexceptions.HelpfulNullPointerException.PersonalDetails;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class HelpfulNullPointerExceptionUnitTest {\n\n    @Test (expected = NullPointerException.class)\n    public void givenAnEmptyPersonalDetails_whenEmailAddressIsAccessed_thenThrowNPE() {\n        var helpfulNPE = new HelpfulNullPointerException();\n\n        var employee = new Employee();\n        employee.setName(\"Eduard\");\n        employee.setPersonalDetails(new PersonalDetails());\n        helpfulNPE.getEmployeeEmailAddress(employee);\n    }\n\n    @Test\n    public void givenCompletePersonalDetails_whenEmailAddressIsAccessed_thenSuccess() {\n        var helpfulNPE = new HelpfulNullPointerException();\n        var emailAddress = \"eduard@gmx.com\";\n\n        var employee = new Employee();\n        employee.setName(\"Eduard\");\n\n        var personalDetails = new PersonalDetails();\n        personalDetails.setEmailAddress(emailAddress.toUpperCase());\n        personalDetails.setPhone(\"1234\");\n        employee.setPersonalDetails(personalDetails);\n\n        assertThat(helpfulNPE.getEmployeeEmailAddress(employee)).isEqualTo(emailAddress);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.java14.patternmatchingforinstanceof;\n\npublic class PatternMatchingForInstanceOf {\n\n    public void performAnimalOperations(Animal animal) {\n         if (animal instanceof Cat cat) {\n             cat.meow();\n         } else if(animal instanceof Dog dog) {\n             dog.woof();\n         }\n    }\n\n    abstract class Animal {\n    }\n\n    final class Cat extends Animal {\n        void meow() {\n        }\n    }\n\n    final class Dog extends Animal {\n        void woof() {\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.java14.patternmatchingforinstanceof;\n\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.baeldung.java14.patternmatchingforinstanceof.PatternMatchingForInstanceOf.Cat;\nimport com.baeldung.java14.patternmatchingforinstanceof.PatternMatchingForInstanceOf.Dog;\n\nclass PatternMatchingForInstanceOfUnitTest {\n\n    @Test\n    void givenAnAnimal_whenTypeIsCat_ThenCatGoesMeow() {\n        Cat animal = mock(Cat.class);\n\n        PatternMatchingForInstanceOf instanceOf = new PatternMatchingForInstanceOf();\n        instanceOf.performAnimalOperations(animal);\n\n        verify(animal).meow();\n    }\n\n    @Test\n    void givenAnAnimal_whenTypeIsDog_ThenDogGoesWoof() {\n        Dog animal = mock(Dog.class);\n\n        PatternMatchingForInstanceOf instanceOf = new PatternMatchingForInstanceOf();\n        instanceOf.performAnimalOperations(animal);\n\n        verify(animal).woof();\n    }\n\n}\n"}
{"code_source": "package com.baeldung.java14.recordvsfinal;\n\npublic record USCitizen(String firstName, String lastName, String address) {\n    static int countryCode;\n\n    // static initializer\n    static {\n        countryCode = 1;\n    }\n\n    public static int getCountryCode() {\n        return countryCode;\n    }\n\n    public String getFullName() {\n        return firstName + \" \" + lastName;\n    }\n}", "test_case": "package com.baeldung.java14.recordvsfinal;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\npublic class USCitizenUnitTest {\n\n    @Test\n    public void givenName_whenGetNameAndCode_thenExpectedValuesReturned() {\n\n        String firstName = \"Joan\";\n        String lastName = \"Winn\";\n        String address = \"1892 Black Stallion Road\";\n        int countryCode = 1;\n\n        USCitizen citizen = new USCitizen(firstName, lastName, address);\n\n        assertEquals(firstName + \" \" + lastName, citizen.getFullName());\n        assertEquals(countryCode, USCitizen.getCountryCode());\n    }\n\n}"}
{"code_source": "package com.baeldung.java14.textblocks;\n\npublic class TextBlocks13 {\n    public String getBlockOfHtml() {\n        return \"\"\"\n            <html>\n\n                <body>\n                    <span>example text</span>\n                </body>\n            </html>\"\"\";\n    }\n\n    public String getNonStandardIndent() {\n        return \"\"\"\n                Indent\n            \"\"\";\n    }\n\n    public String getQuery() {\n        return \"\"\"\n            select \"id\", \"user\"\n            from \"table\"\n            \"\"\";\n    }\n\n    public String getTextWithCarriageReturns() {\n        return \"\"\"\n            separated with\\r\n            carriage returns\"\"\";\n    }\n\n    public String getTextWithEscapes() {\n        return \"\"\"\n            fun with\\n\n            whitespace\\t\\r\n            and other escapes \\\"\"\"\n            \"\"\";\n    }\n\n    public String getFormattedText(String parameter) {\n        return \"\"\"\n            Some parameter: %s\n            \"\"\".formatted(parameter);\n    }\n}\n", "test_case": "package com.baeldung.java14.textblocks;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.Test;\n\nclass TextBlocks13UnitTest {\n    private TextBlocks13 subject = new TextBlocks13();\n\n    @Test\n    void givenAnOldStyleMultilineString_whenComparing_thenEqualsTextBlock() {\n        String expected = \"<html>\\n\"\n          + \"\\n\"\n          + \"    <body>\\n\"\n          + \"        <span>example text</span>\\n\"\n          + \"    </body>\\n\"\n          + \"</html>\";\n        assertThat(subject.getBlockOfHtml()).isEqualTo(expected);\n    }\n\n    @Test\n    void givenAnOldStyleString_whenComparing_thenEqualsTextBlock() {\n        String expected = \"<html>\\n\\n    <body>\\n        <span>example text</span>\\n    </body>\\n</html>\";\n        assertThat(subject.getBlockOfHtml()).isEqualTo(expected);\n    }\n\n    @Test\n    void givenAnIndentedString_thenMatchesIndentedOldStyle() {\n        assertThat(subject.getNonStandardIndent()).isEqualTo(\"    Indent\\n\");\n    }\n\n    @Test\n    void givenAMultilineQuery_thenItCanContainUnescapedQuotes() {\n        assertThat(subject.getQuery()).contains(\"select \\\"id\\\", \\\"user\\\"\");\n    }\n\n    @Test\n    void givenAMultilineQuery_thenItEndWithANewline() {\n        assertThat(subject.getQuery()).endsWith(\"\\n\");\n    }\n\n    @Test\n    void givenATextWithCarriageReturns_thenItContainsBoth() {\n        assertThat(subject.getTextWithCarriageReturns()).isEqualTo(\"separated with\\r\\ncarriage returns\");\n    }\n\n    @Test\n    void givenAStringWithEscapedWhitespace_thenItAppearsInTheResultingString() {\n        assertThat(subject.getTextWithEscapes()).contains(\"fun with\\n\\n\")\n            .contains(\"whitespace\\t\\r\\n\")\n            .contains(\"and other escapes \\\"\\\"\\\"\");\n    }\n\n    @Test\n    void givenAFormattedString_thenTheParameterIsReplaced() {\n        assertThat(subject.getFormattedText(\"parameter\")).contains(\"Some parameter: parameter\");\n    }\n}"}
{"code_source": "package com.baeldung.java14.textblocks;\n\npublic class TextBlocks14 {\n    public String getIgnoredNewLines() {\n        return \"\"\"\n            This is a long test which looks to \\\n            have a newline but actually does not\"\"\";\n    }\n\n    public String getEscapedSpaces() {\n        return \"\"\"\n            line 1\n            line 2       \\s\n            \"\"\";\n    }\n}\n", "test_case": "package com.baeldung.java14.textblocks;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.junit.jupiter.api.Test;\n\nclass TextBlocks14UnitTest {\n    private TextBlocks14 subject = new TextBlocks14();\n\n    @Test\n    void givenAStringWithEscapedNewLines_thenTheResultHasNoNewLines() {\n        String expected = \"This is a long test which looks to have a newline but actually does not\";\n        assertThat(subject.getIgnoredNewLines()).isEqualTo(expected);\n    }\n\n    @Test\n    void givenAStringWithEscapesSpaces_thenTheResultHasLinesEndingWithSpaces() {\n        String expected = \"line 1\\nline 2        \\n\";\n        assertThat(subject.getEscapedSpaces()).isEqualTo(expected);\n    }\n}"}
{"code_source": "package com.baeldung.hidden.classes;\n\npublic class HiddenClass {\n    public String convertToUpperCase(String s) {\n        return s.toUpperCase();\n    }\n}\n", "test_case": "package com.baeldung.hidden.classes;\n\n\nimport java.io.InputStream;\nimport java.lang.invoke.MethodHandles;\nimport java.lang.invoke.MethodHandles.Lookup.ClassOption;\nimport java.lang.reflect.Method;\n\nimport org.apache.commons.io.IOUtils;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HiddenClassUnitTest {\n\n    private static final Logger LOG = LoggerFactory.getLogger(HiddenClassUnitTest.class);\n\n    @Test\n    void whenInvokeMethodOnHiddenClass_thenSuccess() {\n        // Initiate lookup class\n        MethodHandles.Lookup lookup = MethodHandles.lookup();\n\n        // Create a byte code of a class\n\n        Class<?> clazz = HiddenClass.class;\n        String className = clazz.getName();\n        String classAsPath = className.replace('.', '/') + \".class\";\n        InputStream stream = clazz.getClassLoader()\n            .getResourceAsStream(classAsPath);\n\n        try {\n            // Define hidden class with byte code\n            Class<?> hiddenClass = lookup.defineHiddenClass(IOUtils.toByteArray(stream), true, ClassOption.NESTMATE)\n                .lookupClass();\n            Object hiddenClassObject = hiddenClass.getConstructor()\n                .newInstance();\n\n            Method method = hiddenClassObject.getClass()\n                .getDeclaredMethod(\"convertToUpperCase\", String.class);\n\n            Assertions.assertEquals(true, hiddenClass.isHidden());\n\n            Assertions.assertEquals(\"HELLO\", method.invoke(hiddenClassObject, \"Hello\"));\n\n            Assertions.assertEquals(this.getClass()\n                .getClassLoader(), hiddenClass.getClassLoader());\n\n            Assertions.assertEquals(null, hiddenClass.getCanonicalName());      \n            \n            Assertions.assertThrows(ClassNotFoundException.class, () -> Class.forName(hiddenClass.getName()));\n            \n            Assertions.assertThrows(ClassNotFoundException.class, () -> lookup.findClass(hiddenClass.getName()));\n\n        } catch (Exception e) {\n            LOG.error(\"Couldn't instantiate hidden class\" + e);\n        }\n    }\n\n}\n"}
{"code_source": "package com.baeldung.features;\n\ninterface HelloWorld {\n    default String hello() {\n        return \"world\";\n    }\n}\n", "test_case": "package com.baeldung.features;\n\n\nimport org.junit.jupiter.api.Test;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\nimport static java.lang.ClassLoader.getSystemClassLoader;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass HelloWorldUnitTest {\n\n    @Test\n    public void givenAnInterfaceWithDefaulMethod_whenCreatingProxyInstance_thenCanInvokeDefaultMethod() throws Exception {\n        Object proxy = Proxy.newProxyInstance(getSystemClassLoader(), new Class<?>[] { HelloWorld.class },\n            (prox, method, args) -> {\n                if (method.isDefault()) {\n                    return InvocationHandler.invokeDefault(prox, method, args);\n                }\n                return method.invoke(prox, args);\n            }\n        );\n        Method method = proxy.getClass().getMethod(\"hello\");\n        assertThat(method.invoke(proxy)).isEqualTo(\"world\");\n    }\n}"}
{"code_source": "package com.baeldung.features;\n\nimport jdk.incubator.vector.IntVector;\n\npublic class VectorExample {\n    public int[] scalarComputation(int[] a, int[] b) {\n        var c = new int[a.length];\n        for (int i = 0; i < a.length; i++) {\n            c[i] = a[i] * b[i];\n        }\n        return c;\n    }\n\n    public int[] vectorComputation(int[] a, int[] b) {\n        var c = new int[a.length];\n\n        var vectorA = IntVector.fromArray(IntVector.SPECIES_128, a, 0);\n        var vectorB = IntVector.fromArray(IntVector.SPECIES_128, b, 0);\n        var vectorC = vectorA.mul(vectorB);\n        vectorC.intoArray(c, 0);\n        return c;\n    }\n}\n", "test_case": "package com.baeldung.features;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\n\nclass VectorExampleUnitTest {\n\n    @Test\n    void givenAScalarComputation_whenCalculatingUsingVectorAPI_thenResultIsSameAsPreviousMethodOfComputation() {\n        VectorExample objectUnderTest = new VectorExample();\n\n        int[] a = {1, 2, 3, 4};\n        int[] b = {5, 6, 7, 8};\n\n        int[] result = objectUnderTest.scalarComputation(a, b);\n        int[] result2 = objectUnderTest.vectorComputation(a, b);\n\n        assertArrayEquals(result, result2);\n    }\n}"}
{"code_source": "package com.baeldung.instanceofalternative.visitorspattern;\n\npublic interface Visitor {\n\n    String visit(Anatotitan anatotitan);\n\n    String visit(Euraptor euraptor);\n\n}\n", "test_case": "package com.baeldung.instanceoftest;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\nimport com.baeldung.instanceofalternative.visitorspattern.*;\n\npublic class VisitorsPatternUnitTest {\n\n    @Test\n    public void givenADinosaurSpecie_whenUsingVisitorPattern_thenGetMovementOfAnatotitan() {\n\n        assertEquals(\"running\", moveDinosaurUsingVisitorPattern((Dino) new Anatotitan()));\n    }\n\n    @Test\n    public void givenADinosaurSpecie_whenUsingVisitorPattern_thenGetMovementOfEuraptor() {\n\n        assertEquals(\"flying\", moveDinosaurUsingVisitorPattern((Dino) new Euraptor()));\n    }\n\n    public static String moveDinosaurUsingVisitorPattern(Dino dinosaur) {\n        Visitor visitor = new DinoVisitorImpl();\n\n        return dinosaur.move(visitor);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.features;\n\nimport java.util.random.RandomGeneratorFactory;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\npublic class JEP356 {\n\n    public Stream<String> getAllAlgorithms() {\n        return RandomGeneratorFactory.all().map(RandomGeneratorFactory::name);\n    }\n\n    public IntStream getPseudoInts(String algorithm, int streamSize) {\n        // returns an IntStream with size @streamSize of random numbers generated using the @algorithm\n        // where the lower bound is 0 and the upper is 100 (exclusive)\n        return RandomGeneratorFactory.of(algorithm)\n                .create()\n                .ints(streamSize, 0,100);\n    }\n}\n", "test_case": "package com.baeldung.features;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class JEP356UnitTest {\n\n    @Test\n    void getPseudoInts_whenUsingAlgorithmXoroshiro128PlusPlus_shouldReturnStreamOfRandomInteger() {\n        var algorithm = \"Xoshiro256PlusPlus\";\n        var streamSize = 100;\n\n        JEP356 jep356 = new JEP356();\n\n        jep356.getPseudoInts(algorithm, streamSize)\n            .forEach(value -> assertThat(value).isLessThanOrEqualTo(99));\n    }\n}\n"}
{"code_source": "package com.baeldung.features;\n\nimport com.baeldung.features.JEP409.Circle;\nimport com.baeldung.features.JEP409.Shape;\nimport com.baeldung.features.JEP409.Triangle;\n\npublic class JEP406 {\n\n    static record Human (String name, int age, String profession) {}\n\n    public String checkObject(Object obj) {\n        return switch (obj) {\n            case Human h -> \"Name: %s, age: %s and profession: %s\".formatted(h.name(), h.age(), h.profession());\n            case Circle c -> \"This is a circle\";\n            case Shape s -> \"It is just a shape\";\n            case null -> \"It is null\";\n            default -> \"It is an object\";\n        };\n    }\n\n    public String checkShape(Shape shape) {\n        return switch (shape) {\n            case Triangle t && (t.getNumberOfSides() != 3) -> \"This is a weird triangle\";\n            case Circle c && (c.getNumberOfSides() != 0) -> \"This is a weird circle\";\n            default -> \"Just a normal shape\";\n        };\n    }\n}\n", "test_case": "package com.baeldung.features;\n\nimport com.baeldung.features.JEP406.Human;\nimport com.baeldung.features.JEP409.Square;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass JEP406UnitTest {\n\n    @Test\n    void checkObject_shouldMatchWithHuman() {\n        var jep406 = new JEP406();\n\n        var human = new Human(\"John\", 31, \"Developer\");\n\n        var checkResult = jep406.checkObject(human);\n\n        assertEquals(\"Name: John, age: 31 and profession: Developer\", checkResult);\n    }\n\n    @Test\n    void checkShape_shouldMatchWithShape() {\n        var jep406 = new JEP406();\n\n        var square = new Square();\n\n        var checkResult = jep406.checkShape(square);\n\n        assertEquals(\"Just a normal shape\", checkResult);\n    }\n\n}"}
{"code_source": "package com.baeldung.features;\n\npublic class JEP409 {\n\n    sealed interface Shape permits Rectangle, Circle, Square, Triangle {\n        int getNumberOfSides();\n    }\n\n    static final class Rectangle implements Shape {\n        @Override\n        public int getNumberOfSides() {\n            return 4;\n        }\n    }\n\n    static final class Circle implements Shape {\n        @Override\n        public int getNumberOfSides() {\n            return 0;\n        }\n    }\n\n    static final class Square implements Shape {\n        @Override\n        public int getNumberOfSides() {\n            return 4;\n        }\n    }\n\n    static non-sealed class Triangle implements Shape {\n\n        @Override\n        public int getNumberOfSides() {\n            return 3;\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.features;\n\nimport com.baeldung.features.JEP409.*;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.verify;\n\nclass JEP409UnitTest {\n\n    static class WeirdTriangle extends Triangle {\n        @Override public int getNumberOfSides() {\n            return 40;\n        }\n    }\n\n    @Test\n    void testSealedClass_shouldInvokeRightClass() {\n\n        Shape shape = spy(new WeirdTriangle());\n\n        int numberOfSides = getNumberOfSides(shape);\n\n        assertEquals(40, numberOfSides);\n        verify(shape).getNumberOfSides();\n    }\n\n    int getNumberOfSides(Shape shape) {\n        return switch (shape) {\n            case WeirdTriangle t -> t.getNumberOfSides();\n            case Circle c -> c.getNumberOfSides();\n            case Triangle t -> t.getNumberOfSides();\n            case Rectangle r -> r.getNumberOfSides();\n            case Square s -> s.getNumberOfSides();\n        };\n    }\n}"}
{"code_source": "package com.baeldung.features;\n\nimport jdk.incubator.foreign.CLinker;\nimport jdk.incubator.foreign.FunctionDescriptor;\nimport jdk.incubator.foreign.MemoryAddress;\nimport jdk.incubator.foreign.SymbolLookup;\n\nimport java.io.IOException;\nimport java.lang.invoke.MethodType;\n\nimport static jdk.incubator.foreign.ResourceScope.newImplicitScope;\n\npublic class JEP412 {\n\n    private static final SymbolLookup libLookup;\n\n    static {\n        var resource = JEP412.class.getResource(\"/compile_c.sh\");\n        try {\n            var process = new ProcessBuilder(\"sh\", resource.getPath()).start();\n            while (process.isAlive()) {}\n        } catch (IOException ex) {\n            throw new RuntimeException(ex);\n        }\n\n        var path = JEP412.class.getResource(\"/print_name.so\").getPath();\n        System.load(path);\n        libLookup = SymbolLookup.loaderLookup();\n    }\n\n    public String getPrintNameFormat(String name){\n\n        var printMethod = libLookup.lookup(\"printName\");\n\n        if (printMethod.isPresent()) {\n            var methodReference = CLinker.getInstance()\n                .downcallHandle(\n                    printMethod.get(),\n                    MethodType.methodType(MemoryAddress.class, MemoryAddress.class),\n                    FunctionDescriptor.of(CLinker.C_POINTER, CLinker.C_POINTER)\n                );\n\n            try {\n                var nativeString = CLinker.toCString(name, newImplicitScope());\n                var invokeReturn = methodReference.invoke(nativeString.address());\n                var memoryAddress = (MemoryAddress) invokeReturn;\n                return CLinker.toJavaString(memoryAddress);\n            } catch (Throwable throwable) {\n                throw new RuntimeException(throwable);\n            }\n        }\n        throw new RuntimeException(\"printName function not found.\");\n    }\n}\n\n\n", "test_case": "package com.baeldung.features;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass JEP412UnitTest {\n\n    @Test\n    void getPrintNameFormat_whenPassingAName_shouldReceiveItFormatted() {\n        var jep412 = new JEP412();\n\n        var formattedName = jep412.getPrintNameFormat(\"John\");\n\n        assertEquals(\"Your name is John\", formattedName);\n    }\n}"}
{"code_source": "package com.baeldung.features;\n\nimport jdk.incubator.vector.FloatVector;\nimport jdk.incubator.vector.VectorSpecies;\n\npublic class JEP414 {\n\n    private static final VectorSpecies<Float> SPECIES = FloatVector.SPECIES_PREFERRED;\n\n\n    public void newVectorComputation(float[] a, float[] b, float[] c) {\n        for (var i = 0; i < a.length; i += SPECIES.length()) {\n            var m = SPECIES.indexInRange(i, a.length);\n            var va = FloatVector.fromArray(SPECIES, a, i, m);\n            var vb = FloatVector.fromArray(SPECIES, b, i, m);\n            var vc = va.mul(vb);\n            vc.intoArray(c, i, m);\n        }\n    }\n\n    public void commonVectorComputation(float[] a, float[] b, float[] c) {\n        for (var i = 0; i < a.length; i ++) {\n            c[i] = a[i] * b[i];\n        }\n    }\n\n}\n", "test_case": "package com.baeldung.features;\n\nimport org.junit.jupiter.api.Test;\n\nimport static java.util.stream.Collectors.toList;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass JEP414UnitTest {\n\n    @Test\n    void vectorComputation_shouldMultiplyVectors() {\n        var jep414 = new JEP414();\n\n        float[] a = initArray(100);\n        float[] b = initArray(100);\n        float[] c = new float[100];\n        float[] d = new float[100];\n\n        jep414.newVectorComputation(a, b, c);\n        jep414.commonVectorComputation(a, b, d);\n\n        for (int i = 0; i < a.length; i++) {\n            assertEquals(c[i], d[i]);\n        }\n    }\n\n    private float[] initArray(int size) {\n        final var jep356 = new JEP356();\n        final var values = new float[size];\n        final var pseudoInts = jep356.getPseudoInts(\"Xoshiro256PlusPlus\", size).mapToObj(Float::valueOf).collect(toList());\n\n        for (int i = 0; i < pseudoInts.size(); i++) {\n            values[i] = pseudoInts.get(i);\n        }\n\n        return values;\n    }\n}"}
{"code_source": "package com.baeldung.instantsource;\n\nimport java.time.Instant;\nimport java.time.InstantSource;\n\npublic class InstantExample {\n    InstantWrapper instantWrapper;\n    InstantSource instantSource;\n\n    public InstantExample(InstantWrapper instantWrapper, InstantSource instantSource) {\n        this.instantWrapper = instantWrapper;\n        this.instantSource = instantSource;\n    }\n\n    public Instant getCurrentInstantFromWrapper() {\n        return instantWrapper.instant();\n    }\n    public Instant getCurrentInstantFromInstantSource() {\n        return instantSource.instant();\n    }\n}\n", "test_case": "package com.baeldung.instantsource;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.time.Clock;\nimport java.time.Instant;\nimport java.time.InstantSource;\nimport java.time.LocalDateTime;\nimport java.time.ZoneOffset;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nclass InstantExampleUnitTest {\n\n    @Test\n    void getCurrentInstantFromWrapper_shouldReturnCurrentInstantBasedOnSystemClock() {\n        //given\n        InstantExample tested = new InstantExample(InstantWrapper.of(), null);\n        Instant currentInstant = Clock.systemDefaultZone().instant();\n        //when\n        Instant returnedInstant = tested.getCurrentInstantFromWrapper();\n\n        //then\n        assertTrue(returnedInstant.isAfter(currentInstant));\n    }\n\n    @Test\n    void getCurrentInstantFromWrapper_shouldReturnFixedInstant() {\n        //given\n        LocalDateTime now = LocalDateTime.now();\n        InstantExample tested = new InstantExample(InstantWrapper.of(now), null);\n        Instant currentInstant = now.toInstant(ZoneOffset.UTC);\n        //when\n        Instant returnedInstant = tested.getCurrentInstantFromWrapper();\n\n        //then\n        assertEquals(currentInstant, returnedInstant);\n    }\n\n    @Test\n    void getCurrentInstantFromInstantSource_shouldReturnCurrentInstantBasedOnSystemClock() {\n        //given\n        InstantSource instantSource = InstantSource.system();\n        InstantExample tested = new InstantExample(null, instantSource);\n        Instant currentInstant = instantSource.instant();\n\n        //when\n        Instant returnedInstant = tested.getCurrentInstantFromInstantSource();\n\n        //then\n        assertTrue(returnedInstant.isAfter(currentInstant));\n    }\n\n    @Test\n    void getCurrentInstantFromInstantSource_shouldReturnFixedInstant() {\n        //given\n        LocalDateTime now = LocalDateTime.now();\n        InstantSource instantSource = InstantSource.fixed(now.toInstant(ZoneOffset.UTC));\n        InstantExample tested = new InstantExample(null, instantSource);\n        Instant currentInstant = instantSource.instant();\n\n        LocalDateTime fixed = LocalDateTime.of(2022, 01, 01, 00, 00);\n        Instant i = InstantSource.fixed(fixed.toInstant(ZoneOffset.UTC)).instant();\n        System.out.println(i);\n\n        //when\n        Instant returnedInstant = tested.getCurrentInstantFromInstantSource();\n\n        //then\n        assertEquals(currentInstant, returnedInstant);\n    }\n\n    @Test\n    void getCurrentInstantFromInstantSource_shouldMatchGivenTimezone() {\n        //given\n        LocalDateTime now = LocalDateTime.now();\n        InstantSource instantSource = InstantSource.fixed(now.toInstant(ZoneOffset.of(\"-4\")));\n        InstantExample tested = new InstantExample(null, instantSource);\n\n        //when\n        Instant returnedInstant = tested.getCurrentInstantFromInstantSource();\n\n        //then\n        assertEquals(now.atOffset(ZoneOffset.of(\"-4\")).toInstant(), returnedInstant);\n    }\n}"}
{"code_source": "package com.baeldung.randomgenerators;\n\nimport java.util.Comparator;\nimport java.util.random.RandomGenerator;\nimport java.util.random.RandomGeneratorFactory;\n\npublic class GeneratorFactory {\n\n    public static void main(String[] args) {\n        System.out.println(\"Group\\tName\\tJumpable?\\tSplittable?\");\n        RandomGeneratorFactory.all()\n          .sorted(Comparator.comparing(RandomGeneratorFactory::name))\n          .forEach(factory -> System.out.println(String.format(\"%s\\t%s\\t%s\\t%s\",\n            factory.group(),\n            factory.name(),\n            factory.isJumpable(),\n            factory.isSplittable())));\n    }\n\n    public static int getRandomInt(RandomGenerator generator, int bound) {\n        return generator.nextInt(bound);\n    }\n\n    public static RandomGenerator getDefaultGenerator() {\n        return RandomGeneratorFactory.getDefault().create();\n    }\n\n    public static RandomGenerator getJumpableGenerator() {\n        return RandomGeneratorFactory.all()\n          .filter(RandomGeneratorFactory::isJumpable)\n          .findAny()\n          .map(RandomGeneratorFactory::create)\n          .orElseThrow(() -> new RuntimeException(\"Error creating a generator\"));\n    }\n\n}\n", "test_case": "package com.baeldung.randomgenerators;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass GeneratorFactoryUnitTest {\n\n    @Test\n    void givenDefaultGenerator_whenGeneratingAnInt_thenIntInRangeIsGenerated() {\n        int number = GeneratorFactory.getRandomInt(GeneratorFactory.getDefaultGenerator(), 10);\n        assertThat(number).isNotNegative().isLessThan(10);\n    }\n\n    @Test\n    void givenJumpableGenerator_whenGeneratingAnInt_thenIntInRangeIsGenerated() {\n        int number = GeneratorFactory.getRandomInt(GeneratorFactory.getJumpableGenerator(), 10);\n        assertThat(number).isNotNegative().isLessThan(10);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.randomgenerators;\n\nimport java.util.Random;\n\npublic class OldRandom {\n\n    public static int getRandomInt(int bound) {\n        Random random = new Random();\n        return random.nextInt(bound);\n    }\n\n}\n", "test_case": "package com.baeldung.randomgenerators;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass OldRandomUnitTest {\n\n    @Test\n    void givenOldRandomApi_whenGeneratingAnInt_thenIntInRangeIsGenerated() {\n        int number = OldRandom.getRandomInt(10);\n        assertThat(number).isNotNegative().isLessThan(10);\n    }\n\n}\n"}
{"code_source": "package com.baeldung.randomgenerators;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.random.RandomGenerator;\nimport java.util.random.RandomGeneratorFactory;\n\npublic class SplittableGeneratorMultiThread {\n\n    public static List<Integer> generateNumbersInMultipleThreads() {\n        List<Integer> numbers = Collections.synchronizedList(new ArrayList<>());\n        ExecutorService executorService = Executors.newCachedThreadPool();\n\n        RandomGenerator.SplittableGenerator sourceGenerator = RandomGeneratorFactory\n          .<RandomGenerator.SplittableGenerator>of(\"L128X256MixRandom\")\n          .create();\n\n        sourceGenerator.splits(20).forEach((splitGenerator) -> {\n            executorService.submit(() -> {\n                numbers.add(splitGenerator.nextInt(10));\n            });\n        });\n\n        return numbers;\n    }\n\n}\n", "test_case": "package com.baeldung.randomgenerators;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.List;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass SplittableGeneratorMultiThreadUnitTest {\n\n    @Test\n    void givenSplittableGenerator_whenUsingMultipleThreads_thenListOfIntsIsGenerated() {\n        List<Integer> numbers = SplittableGeneratorMultiThread.generateNumbersInMultipleThreads();\n        assertThat(numbers).hasSize(20).allMatch(number -> number >= 0 && number <= 10);\n    }\n\n}\n"}

